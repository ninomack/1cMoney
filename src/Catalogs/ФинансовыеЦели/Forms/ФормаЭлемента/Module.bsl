
#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСФормамиСправочников.ФормаОбъектаПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, Истина, Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСФормамиСправочников.ФормаОбъектаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, Истина, Истина, Истина);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаботаСФормамиСправочниковКлиент.ФормаОбъектаПриОткрытии(ЭтотОбъект, Отказ, Истина, Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОбслуживаниеСправочниковКлиент.ИнформироватьОДобавленииСтатьиБюджета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РаботаСФормамиСправочников.ФормаОбъектаПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи, Истина, Истина, Истина);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФормамиСправочников.ФормаОбъектаПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Истина, Истина, Истина);
	
	// Обслуживание плановых операций
	ПлановыеОперации.ПослеЗаписиСправочникФинансовыеЦели(Объект.Ссылка, Объект.ШаблонНакопления, ПараметрыРасписания, АдресПроизвольныхДатРасписания, СохранитьРасписание);
	
	ЗаполнитьДобавленныеКолонки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Записан элемент справочника", Новый Структура("ИмяСправочника,Ссылка,ВладелецФормы", 
			"ФинансовыеЦели", Объект.Ссылка, 
			?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено)));
	РаботаСФормамиСправочниковКлиент.ФормаОбъектаПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи, Истина, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" Тогда
		
		ВидДокумента = "";
		ЭтоШаблон = Ложь;
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ФормаВладельца = ЭтаФорма.УникальныйИдентификатор 
			И Параметр.Свойство("ВидДокумента", ВидДокумента) И (ВидДокумента = "Доход" ИЛИ ВидДокумента = "Перемещение") Тогда
			Объект.ШаблонНакопления = Параметр.Ссылка;
			ОбновитьШаблонНакоплений();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "Изменено расписание"  Тогда
		
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ФормаВладельца = ЭтаФорма.УникальныйИдентификатор Тогда
			ТекстГрафикаНакопления = ПараметрыРасписания.ОписаниеРасписания;
		КонецЕсли; 
	КонецЕсли;
		
	#Область ПрикрепленныеФайлы
	Если (ПрикрепленныеФайлыКлиент.ЭтоПрикреплениеФайла(ЭтотОбъект, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиент.ОбработатьОповещениеДобавленияФайла(ЭтотОбъект, Параметр);
	ИначеЕсли (ПрикрепленныеФайлыКлиент.ЭтоИзменениеСпискаМультимедиа(ЭтотОбъект, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеТекущегоФайла(ЭтотОбъект);
	КонецЕсли;
	#КонецОбласти
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьШаблонНакопленияДобавитьНажатие(Элемент)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьШаблонНакоплений();

КонецПроцедуры

&НаКлиенте
Процедура ТекстГрафикаНакопленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонНакопления) Тогда
		
		ТекстВопроса = НСтр("ru = 'График накоплений можно задать только после создания шаблона накоплений.
			|Создать шаблон накоплений?'");
		ОбработчикОтвета = Новый ОписаниеОповещения("ТекстГрафикаНакопленияНажатиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
		
	КонецЕсли; 
	
	ПлановыеОперацииКлиент.ОткрытьРедакторРасписанияИзСправочникаФинансовыеЦели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий", Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНакопленияПриИзменении(Элемент)
	
	ТекстПредупреждения = "";
	Если НЕ ПроверитьШаблонНакопленияСервер(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#Область ПрикрепленныеФайлы

&НаКлиенте
Процедура ПредставлениеТекущегоФайлаНажатие(Элемент, СтандартнаяОбработка)
	ПрикрепленныеФайлыКлиент.ОбработчикНажатияНаТекущийФайл(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлКнопкаНавигацииНажатие(Элемент)
	ПрикрепленныеФайлыКлиент.ФайлКнопкаНавигацииНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры

#КонецОбласти 


#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Подготовка реквизитов формы
	ТекстГрафикаНакопления = НСтр("ru = 'Не задан (нет шаблона накоплений)'") ;
	
	// Если использовать группы-страницы, заголовки получаются разной ширины, поэтому будем управлять видимостью обычных групп
	Элементы.ГруппаСтраницаОбщиеНакопления.Видимость = Объект.Предопределенный;
	Элементы.ГруппаСтраницаОбычнаяЦель.Видимость     = НЕ Объект.Предопределенный;
	
	ПрочитатьЗаписиРегистровСведений();
	
	// Заполнение дополнительных колонок
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм элементов справочников
	РаботаСФормамиСправочников.ФормаЭлементаПриСозданииНаСервере(ЭтаФорма);
	
	// Настройка внешнего вида
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()


КонецПроцедуры

&НаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.ГруппаШаблонаГрафикаНакопления.Доступность = Ложь;
		Элементы.НадписьШаблонНакопленияДобавить.Видимость  = Ложь;
		Элементы.ШаблонНакопления.ПодсказкаВвода = НСтр("ru = 'Запишите цель перед созданием шаблона'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		Элементы.ГруппаШаблонаГрафикаНакопления.Доступность = Истина;
		Элементы.НадписьШаблонНакопленияДобавить.Видимость  = НЕ ЗначениеЗаполнено(Объект.ШаблонНакопления);
		Элементы.ШаблонНакопления.ПодсказкаВвода = НСтр("ru = 'Выберите или создайте шаблон накоплений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли; 
	
	Элементы.ШаблонНакопления.Доступность = НЕ Объект.Предопределенный;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписиРегистровСведений()

	Если ЗначениеЗаполнено(Объект.ШаблонНакопления) Тогда
		ТипШаблонаНакопления   = Объект.ШаблонНакопления.Метаданные().Имя;
	Иначе
		ТипШаблонаНакопления   = "";
	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Цель", Объект.Ссылка);
	Запрос.УстановитьПараметр("Шаблон", Объект.ШаблонНакопления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расписания.*
	|ИЗ
	|	РегистрСведений.Расписания КАК Расписания
	|ГДЕ
	|	Расписания.ВладелецРасписания = &Шаблон
	|";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыРасписания, Выборка);
		ТекстГрафикаНакопления = ПараметрыРасписания.ОписаниеРасписания;
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыРасписания, РегистрыСведений.Расписания.СоздатьМенеджерЗаписи());
		Если ЗначениеЗаполнено(Объект.ШаблонНакопления) Тогда
			ТекстГрафикаНакопления = НСтр("ru = 'Не задан'") ;
		Иначе
			ТекстГрафикаНакопления = НСтр("ru = 'Не задан (нет шаблона накоплений)'") ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПроверитьШаблонНакопленияСервер(ТекстПредупреждения)

	ТекстПредупреждения = "";
	Если ЗначениеЗаполнено(Объект.ШаблонНакопления) Тогда
		
		// Выбранный шаблон накопления должен увеличивать остаток по редактируемой финансовой цели
		Если ТипЗнч(Объект.ШаблонНакопления) = Тип("ДокументСсылка.Перемещение") Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ШаблонНакопления, "ФинансоваяЦельКуда");
			Если ЗначенияРеквизитов.ФинансоваяЦельКуда <> Объект.Ссылка Тогда
				
				ТекстПредупреждения = НСтр("ru = 'Выбранный шаблон перемещения не использует эту финансовую цель для накоплений.
					|Выберите другой шаблон или создайте новый.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
				Объект.ШаблонНакопления = Неопределено;
				Возврат Ложь;
				
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Объект.ШаблонНакопления) = Тип("ДокументСсылка.Доход") Тогда
				
			ТаблицаДоходов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ШаблонНакопления, "Доходы").Доходы.Выгрузить();
			ТаблицаДоходов.Свернуть("ФинансоваяЦель");
			СтрокаФинцели = ТаблицаДоходов.Найти(Объект.Ссылка, "ФинансоваяЦель");
			Если СтрокаФинцели = Неопределено Тогда
				
				ТекстПредупреждения = НСтр("ru = 'Выбранный шаблон дохода не использует эту финансовую цель.
					|Выберите другой шаблон или создайте новый.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
				Объект.ШаблонНакопления = Неопределено;
				Возврат Ложь;
				
			КонецЕсли; 
				
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьШаблонНакоплений();
	УправлениеФормой(ЭтотОбъект);
	
	Возврат Истина;

КонецФункции
  
&НаСервере
Процедура ОбновитьШаблонНакоплений()

	ПрочитатьЗаписиРегистровСведений();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьШаблонНакоплений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Создать шаблон можно только для финансовой цели, сохраненной в базе.
			|Записать эту финансовую цель?'");
		ОбработчикОтвета = Новый ОписаниеОповещения("ОткрытьШаблонНакопленийЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ОпределитьИОткрытьШаблонНакоплений();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьИОткрытьШаблонНакоплений()

	Если ЗначениеЗаполнено(Объект.ШаблонНакопления) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Объект.ШаблонНакопления);
		ОткрытьФорму("Документ." + ТипШаблонаНакопления + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Ложь);
		
	Иначе
		
		СписокВидовОпераций = Новый СписокЗначений;
		СписокВидовОпераций.Добавить("Доход", НСтр("ru = 'Доход в кошелек'") );
		СписокВидовОпераций.Добавить("Перемещение", НСтр("ru = 'Перемещение'") );
		Оповещение = Новый ОписаниеОповещения("ОпределитьИОткрытьШаблонНакопленийЗавершение", ЭтотОбъект);
		СписокВидовОпераций.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите тип операции для накопления'"));
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьИОткрытьШаблонНакопленийЗавершение(ВыборПользователя, ДополнительныеПараметры) Экспорт

	Если ВыборПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НазваниеШаблона = НСтр("ru = 'Накопления на цель [%1]'");
	НазваниеШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазваниеШаблона, Объект.Наименование);
	
	ПараметрыШаблона = Новый Структура("ФинансоваяЦель,ФинансоваяЦельКуда,ОписаниеОперации,ЭтоШаблон", 
		Объект.Ссылка, Объект.Ссылка, НазваниеШаблона, Истина);
	ОткрытьФорму("Документ." + ВыборПользователя.Значение + ".ФормаОбъекта", 
		Новый Структура("ЗначенияЗаполнения", ПараметрыШаблона), ЭтаФорма, Ложь);

КонецПроцедуры
 

&НаКлиенте
Процедура ТекстГрафикаНакопленияНажатиеЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьШаблонНакоплений();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблонНакопленийЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да И Записать() Тогда
		ОпределитьИОткрытьШаблонНакоплений();
	КонецЕсли; 

КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


#КонецОбласти

