#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// Возвращает расписание, установленное для сценария этого транспорта обмена
Функция РасписаниеСценария(СсылкаНаТранспорт, ИспользоватьРегламентноеЗадание = Ложь) Экспорт

	Если ЗначениеЗаполнено(СсылкаНаТранспорт) Тогда
		
		Сценарий = СценарийДляТранспортаОбмена(СсылкаНаТранспорт);
		Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
			РасписаниеРегламентногоЗадания = РасписаниеРегламентногоЗаданияПоУмолчанию();
			ИспользоватьРегламентноеЗадание = Истина;
		Иначе
			
			РеквизитыСценария = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сценарий, "РегламентноеЗаданиеGUID, ИспользоватьРегламентноеЗадание");
			РегламентноеЗаданиеGUID         = РеквизитыСценария.РегламентноеЗаданиеGUID;
			ИспользоватьРегламентноеЗадание = РеквизитыСценария.ИспользоватьРегламентноеЗадание;
			
			Если ПустаяСтрока(РегламентноеЗаданиеGUID) Тогда
				
				РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
				
			Иначе
				
				Попытка
					РегламентноеЗаданиеОбъект = ОбщегоНазначенияДеньги.НайтиРегламентноеЗаданиеПоПараметру(РегламентноеЗаданиеGUID);
				Исключение
					РегламентноеЗаданиеОбъект = Неопределено;
				КонецПопытки; 
				
				Если РегламентноеЗаданиеОбъект <> Неопределено Тогда
					РасписаниеРегламентногоЗадания = РегламентноеЗаданиеОбъект.Расписание;
				Иначе
					РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		
	Иначе
		
		ИспользоватьРегламентноеЗадание = Истина;
		РасписаниеРегламентногоЗадания  = РасписаниеРегламентногоЗаданияПоУмолчанию();
		
	КонецЕсли; 
	
	Возврат РасписаниеРегламентногоЗадания;

КонецФункции
 
// Создает/обновляет для транспорта обмена связанный с ним сценарий
Процедура ОбновитьПараметрыСценария(ТранспортОбъект, Расписание, ИспользоватьРегламентноеЗадание) Экспорт

	Сценарий = СценарийДляТранспортаОбмена(ТранспортОбъект.Ссылка);
	Если Сценарий = Неопределено Тогда
		ЭтаБаза = ОбменМобильноеПриложение.ПолучитьЭтотУзел();
		СценарийОбъект = СоздатьСценарий(ТранспортОбъект, ЭтаБаза);
	Иначе
		СценарийОбъект = Сценарий.ПолучитьОбъект();
	КонецЕсли; 
	
	СценарийОбъект.ИспользоватьРегламентноеЗадание = ИспользоватьРегламентноеЗадание И НЕ ТранспортОбъект.ЗапретитьИспользование;
	СценарийОбъект.ТранспортОбменаДанными          = ТранспортОбъект.Ссылка;
	СценарийОбъект.ПометкаУдаления                 = ТранспортОбъект.ПометкаУдаления;
	СценарийОбъект.Наименование                    = НСтр("ru = 'Обмен с помощью транспорта ""%1""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СценарийОбъект.Наименование                    = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СценарийОбъект.Наименование, ТранспортОбъект.Наименование);
	Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Ложь, Расписание, СценарийОбъект);
	СценарийОбъект.Записать();

КонецПроцедуры

// Определяет, является ли указанный транспорт облачным
//
// Параметры:
//  ТранспортСсылка	 - СправочникСсылка.ТранспортыОбменаДанными - Транспорт
// 
// Возвращаемое значение:
//  Булево - Истина, если указанный траснпорт является облачным
//
Функция ЭтоОблачныйТранспорт(ТранспортСсылка) Экспорт
	Если ТранспортСсылка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекВид = ТранспортСсылка.ВидТранспорта;

	Возврат (ТекВид = Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск) 
	    ИЛИ (ТекВид = Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox)
		ИЛИ (ТекВид = Перечисления.ВидыТранспортаСообщенийОбмена.GoogleDrive);
КонецФункции

// Обновляет сценарий облачного провайдера (если он изменился)
//
// Параметры:
//  ТранспортСсылка	 - СправочникСсылка.ТранспортыОбменаДанными - Текущий транспорт
//
Процедура ОбновитьСценарийОблачногоПровайдера(ТранспортСсылка) Экспорт
	
	Если НЕ ЭтоОблачныйТранспорт(ТранспортСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекПровайдер = Неопределено;
	ТекВид = ТранспортСсылка.ВидТранспорта;
	
	Если ТекВид = Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск Тогда
		ТекПровайдер = Перечисления.ТипыПровайдеровREST.Яндекс;
	ИначеЕсли ТекВид = Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox Тогда
		ТекПровайдер = Перечисления.ТипыПровайдеровREST.Dropbox;
	ИначеЕсли ТекВид = Перечисления.ВидыТранспортаСообщенийОбмена.GoogleDrive Тогда
		ТекПровайдер = Перечисления.ТипыПровайдеровREST.Google;
	КонецЕсли;
			
	Если (ТекПровайдер = Неопределено) ИЛИ (ТекПровайдер = ПараметрыСеанса.АвторизацияREST.Провайдер) Тогда
		Возврат;
	КонецЕсли;
		
	RESTВызовСервера.ПереключитьПровайдера(ТекПровайдер);
	
КонецПроцедуры

// Обновляет для транспорта обмена связанный с ним сценарий
Процедура ОбновитьСостояниеСценария(СсылкаНаТранспорт, ПометкаУдаленияТранспорта, Отказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТранспорт", СсылкаНаТранспорт);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаленияТранспорта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СценарииОбменовДанными.Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	СценарииОбменовДанными.ТранспортОбменаДанными = &СсылкаНаТранспорт
	|	И СценарииОбменовДанными.ПометкаУдаления <> &ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		СценарийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СценарийОбъект.УстановитьПометкуУдаления(ПометкаУдаленияТранспорта);
		
	КонецЕсли; 

КонецПроцедуры


// Возвращает ссылку справочника ТранспортыОбменаДанными, соответствующую транспорту вида WSссылка 
//	Если такой ссылки нет - создается новый элемент справочника
Функция ОсновнойТранспортДомашнейСети() Экспорт

	СсылкаНаТранспорт = Справочники.ТранспортыОбменаДанными.НайтиПоКоду("WS");
	
	Если СсылкаНаТранспорт.Пустая() Тогда
		
		НовыйОбъект = Справочники.ТранспортыОбменаДанными.СоздатьЭлемент();
		НовыйОбъект.Код          = "WS";
		НовыйОбъект.Наименование = НСтр("ru = 'Домашняя (локальная) сеть'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		НовыйОбъект.Комментарий  = НСтр("ru = 'Транспорт используется для синхронизации с мобильными устройствами, находящимися в одной локальной сети с этим компьютеорм.'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		НовыйОбъект.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
		НовыйОбъект.ЗапретитьИспользование = Истина;
		
		СтрокаПараметра = НовыйОбъект.ПараметрыТранспорта.Добавить();
		СтрокаПараметра.ИмяПараметра      = "WSURLВебСервиса";
		СтрокаПараметра.ЗначениеПараметра = "";
		
		СтрокаПараметра = НовыйОбъект.ПараметрыТранспорта.Добавить();
		СтрокаПараметра.ИмяПараметра      = "WSИспользоватьПередачуБольшогоОбъемаДанных";
		СтрокаПараметра.ЗначениеПараметра = Ложь;
		
		НовыйОбъект.Записать();
		
		СсылкаНаТранспорт = НовыйОбъект.Ссылка;
		
	КонецЕсли; 

	Возврат СсылкаНаТранспорт;
	
КонецФункции
 
// Возвращает ссылку справочника ТранспортыОбменаДанными, соответствующую транспорту вида FILE 
//	Если такой ссылки нет - создается новый элемент справочника
Функция ОсновнойТранспортКаталога() Экспорт

	СсылкаНаТранспорт = Справочники.ТранспортыОбменаДанными.НайтиПоКоду("FILE");
	
	Если СсылкаНаТранспорт.Пустая() Тогда
		
		НовыйОбъект = Справочники.ТранспортыОбменаДанными.СоздатьЭлемент();
		НовыйОбъект.Код          = "FILE";
		НовыйОбъект.Наименование = НСтр("ru = 'Локальный или сетевой каталог'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		НовыйОбъект.Комментарий  = НСтр("ru = 'Транспорт используется для обмена файлами с мобильными устройствами через локальный или сетевой каталог.
					|Может использоваться для каталогов, синхронизируемых с облачными сервисами обмена файлами типа Яндекс-диск'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		НовыйОбъект.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		НовыйОбъект.ЗапретитьИспользование = Истина;
		
		СтрокаПараметра = НовыйОбъект.ПараметрыТранспорта.Добавить();
		СтрокаПараметра.ИмяПараметра      = "FILEКаталогОбменаИнформацией";
		СтрокаПараметра.ЗначениеПараметра = "";
		
		НовыйОбъект.Записать();
		
		СсылкаНаТранспорт = НовыйОбъект.Ссылка;
		
	КонецЕсли; 

	Возврат СсылкаНаТранспорт;
	
КонецФункции
 
// Возвращает ссылку справочника ТранспортыОбменаДанными, соответствующую транспорту вида EMAIL 
//	Если такой ссылки нет - создается новый элемент справочника
Функция ОсновнойТранспортПочты() Экспорт

	СсылкаНаТранспорт = Справочники.ТранспортыОбменаДанными.НайтиПоКоду("EMAIL");
	
	Если СсылкаНаТранспорт.Пустая() Тогда
		
		НовыйОбъект = Справочники.ТранспортыОбменаДанными.СоздатьЭлемент();
		НовыйОбъект.Код          = "EMAIL";
		НовыйОбъект.Наименование = НСтр("ru = 'Сервер электронной почты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		НовыйОбъект.Комментарий  = НСтр("ru = 'Транспорт используется для обмена файлами с мобильными устройствами через сообщения электронной почты'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		НовыйОбъект.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
		НовыйОбъект.ЗапретитьИспользование = Истина;
		
		СтрокаПараметра = НовыйОбъект.ПараметрыТранспорта.Добавить();
		СтрокаПараметра.ИмяПараметра      = "FILEКаталогОбменаИнформацией";
		СтрокаПараметра.ЗначениеПараметра = "";
		
		НовыйОбъект.Записать();
		
		СсылкаНаТранспорт = НовыйОбъект.Ссылка;
		
	КонецЕсли; 

	Возврат СсылкаНаТранспорт;
	
КонецФункции

// Возвращает ссылку справочника ТранспортыОбменаДанными, соответствующую транспорту указанного облачного провайдера
//	Если параметр Провайдер пуст, будет возвращен основной транспорт для провайдера, заданного в настройках синхронизации
//	Если такой ссылки нет - создается новый элемент справочника
//
//Параметры:
//	Провайдер - Перечисление.ТипыПровайдеровREST
//
Функция ОсновнойТранспортОблачногоПровайдера(Провайдер) Экспорт

	СсылкаНаТранспорт = Неопределено;
	
	Если Не ЗначениеЗаполнено(Провайдер) Тогда
		Провайдер = RESTВызовСервера.ПровайдерИзПараметраСеанса();
	КонецЕсли;
	
	Если Провайдер = Перечисления.ТипыПровайдеровREST.Яндекс Тогда
		СсылкаНаТранспорт = ОсновнойТранспортЯндексДиск();
	ИначеЕсли Провайдер = Перечисления.ТипыПровайдеровREST.Dropbox Тогда
		СсылкаНаТранспорт = ОсновнойТранспортDropBox();
	ИначеЕсли Провайдер = Перечисления.ТипыПровайдеровREST.Google Тогда
		СсылкаНаТранспорт = ОсновнойТранспортGoogleDrive();
	КонецЕсли;

	Возврат СсылкаНаТранспорт;
	
КонецФункции

// Возвращает ссылку справочника ТранспортыОбменаДанными, соответствующую транспорту вида ЯндексДиск 
//	Если такой ссылки нет - создается новый элемент справочника
Функция ОсновнойТранспортЯндексДиск() Экспорт

	СсылкаНаТранспорт = Справочники.ТранспортыОбменаДанными.НайтиПоКоду("ЯндексДиск");
	
	Если СсылкаНаТранспорт.Пустая() Тогда
		
		НовыйОбъект = Справочники.ТранспортыОбменаДанными.СоздатьЭлемент();
		НовыйОбъект.Код          = "ЯндексДиск";
		НовыйОбъект.Наименование = НСтр("ru = 'Яндекс.Диск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		НовыйОбъект.Комментарий  = НСтр("ru = 'Транспорт используется для обмена файлами с мобильными устройствами через сервис Яндекс.Диск'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		НовыйОбъект.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск;
		НовыйОбъект.ЗапретитьИспользование = Истина;
		
		СтрокаПараметра = НовыйОбъект.ПараметрыТранспорта.Добавить();
		СтрокаПараметра.ИмяПараметра      = "ЯндексДискКаталогОбменаИнформацией";
		СтрокаПараметра.ЗначениеПараметра = "";
		
		НовыйОбъект.Записать();
		
		СсылкаНаТранспорт = НовыйОбъект.Ссылка;
		
	КонецЕсли; 

	Возврат СсылкаНаТранспорт;
	
КонецФункции

// Возвращает ссылку справочника ТранспортыОбменаДанными, соответствующую транспорту вида Dropbox 
//	Если такой ссылки нет - создается новый элемент справочника
Функция ОсновнойТранспортDropBox() Экспорт

	СсылкаНаТранспорт = Справочники.ТранспортыОбменаДанными.НайтиПоКоду("Dropbox");
	
	Если СсылкаНаТранспорт.Пустая() Тогда
		
		НовыйОбъект = Справочники.ТранспортыОбменаДанными.СоздатьЭлемент();
		НовыйОбъект.Код          = "Dropbox";
		НовыйОбъект.Наименование = НСтр("ru = 'Dropbox'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		НовыйОбъект.Комментарий  = НСтр("ru = 'Транспорт используется для обмена файлами с мобильными устройствами через сервис Dropbox'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		НовыйОбъект.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox;
		НовыйОбъект.ЗапретитьИспользование = Истина;
				
		НовыйОбъект.Записать();
		
		СсылкаНаТранспорт = НовыйОбъект.Ссылка;
		
	КонецЕсли; 

	Возврат СсылкаНаТранспорт;
	
КонецФункции

// Возвращает ссылку справочника ТранспортыОбменаДанными, соответствующую транспорту вида GoogleDrive 
//	Если такой ссылки нет - создается новый элемент справочника
Функция ОсновнойТранспортGoogleDrive() Экспорт

	СсылкаНаТранспорт = Справочники.ТранспортыОбменаДанными.НайтиПоКоду("GoogleDrive");
	
	Если СсылкаНаТранспорт.Пустая() Тогда
		
		НовыйОбъект = Справочники.ТранспортыОбменаДанными.СоздатьЭлемент();
		НовыйОбъект.Код          = "GoogleDrive";
		НовыйОбъект.Наименование = НСтр("ru = 'GoogleDrive'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		НовыйОбъект.Комментарий  = НСтр("ru = 'Транспорт используется для обмена файлами с мобильными устройствами через сервис Google Drive'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		НовыйОбъект.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.GoogleDrive;
		НовыйОбъект.ЗапретитьИспользование = Истина;
				
		НовыйОбъект.Записать();
		
		СсылкаНаТранспорт = НовыйОбъект.Ссылка;
		
	КонецЕсли; 

	Возврат СсылкаНаТранспорт;
	
КонецФункции

// Возвращает структуру, заполненную реквизитами и параметрами указанного транспорта
//
// Параметры:
//  СсылкаНаТранспорт			 - СправочникСсылка.ТранспортыОбменаДанными - Ссылка на транспорт 
//  ИнициализироватьПоУмолчанию	 - Булево - Истина, если следует иницализировать результат как стурктуру по-умолчанию
// 
// Возвращаемое значение:
//  Структура - Реквизиты транспорта в виде струткуры
//
Функция СтруктураПараметровТранспорта(СсылкаНаТранспорт, ИнициализироватьПоУмолчанию = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(СсылкаНаТранспорт) Тогда
		Результат = Неопределено;
		
		Если ИнициализироватьПоУмолчанию Тогда
			Результат = Новый Структура;
			Результат.Вставить("ЗапретитьИспользование", Истина);			
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	 
	Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаТранспорт, 
				"ВидТранспорта,КоличествоЭлементовВТранзакцииВыгрузкиДанных,КоличествоЭлементовВТранзакцииЗагрузкиДанных,СжиматьФайлИсходящегоСообщения,
				|ПарольАрхиваСообщенияОбмена,МаксимальныйДопустимыйРазмерСообщения,ИмяПользователяНаРесурсе,ПарольПользователяНаРесурсе,ЗапомнитьПароль,
				|EMAILУчетнаяЗапись,ЗапретитьИспользование,ПараметрыТранспорта");
				
	Если ТипЗнч(Результат.ПараметрыТранспорта) = Тип("РезультатЗапроса") Тогда
		
		ТаблицаПараметров = Результат.ПараметрыТранспорта.Выгрузить();
		Для каждого СтрокаПараметра Из ТаблицаПараметров Цикл
			Если ЗначениеЗаполнено(СтрокаПараметра.ИмяПараметра) Тогда
				Результат.Вставить(СтрокаПараметра.ИмяПараметра, ?(ЗначениеЗаполнено(СтрокаПараметра.ЗначениеДлиннойСтрокой), СтрокаПараметра.ЗначениеДлиннойСтрокой, СтрокаПараметра.ЗначениеПараметра));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Результат.Удалить("ПараметрыТранспорта");
	
	Результат.Вставить("Расписание", РасписаниеСценария(СсылкаНаТранспорт));
	
	Возврат Результат;

КонецФункции

// Возвращает статус включенности облачной синхронизации
// 
// Возвращаемое значение:
//  Булево - Истина = синхронизация через облако включена
//
Функция ОблачнаяСинхронизацияВключена() Экспорт
	Возврат (НЕ ОсновнойТранспортЯндексДиск().ЗапретитьИспользование) 
		ИЛИ (НЕ ОсновнойТранспортDropBox().ЗапретитьИспользование)
		ИЛИ (НЕ ОсновнойТранспортGoogleDrive().ЗапретитьИспользование);
КонецФункции

// Устанавливает статус активности облачной синхронизации
//
// Параметры:
//  СтатусАктивностиИспользования	 - Булево -  Истина, если следует разрешить использование транспорта
//
Процедура УстановитьСтатусОблачнойСинхронизации(Знач СтатусАктивностиИспользования) Экспорт
	
	УстановитьСтатусАктивностиИспользования(ОсновнойТранспортЯндексДиск(), СтатусАктивностиИспользования );
	УстановитьСтатусАктивностиИспользования(ОсновнойТранспортDropBox(), СтатусАктивностиИспользования );
	УстановитьСтатусАктивностиИспользования(ОсновнойТранспортGoogleDrive(), СтатусАктивностиИспользования );
	
КонецПроцедуры

// Возвращает ссылку на транспорт указанного вида
//
//Параметры:
//	ВидТранспорта- ПеречислениеСсылка.ВидыТранспортаСообщенийОбмена - вид искомого транспорта
//
//Возвращаемое значение:
//	СправочникСсылка.ТранспортыОбменаДанными
//
Функция ТранспортПоВидуТранспорта(ВидТранспорта) Экспорт

	Если ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox Тогда
		Возврат ОсновнойТранспортDropBox();
	ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.GoogleDrive Тогда
		Возврат ОсновнойТранспортGoogleDrive();
	ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск Тогда
		Возврат ОсновнойТранспортЯндексДиск();
	ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		Возврат ОсновнойТранспортДомашнейСети();
	ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL Тогда
		Возврат ОсновнойТранспортПочты();
	КонецЕсли;

	Возврат ОсновнойТранспортКаталога();
	
КонецФункции
 

#КонецОбласти

#Область ОбработчикиСобытий


// Форма объекта определяется в зависимости от выбранного вида транспорта
//	Если вид транспорта не объявлен, то открывается форма выбора вида транспорта.
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	ВидТранспорта = Неопределено;
	Если Параметры.Свойство("Ключ") 
			И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		ВидТранспорта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидТранспорта");
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") 
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
		ВидТранспорта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ВидТранспорта");
		
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
			И Параметры.ЗначенияЗаполнения.Свойство("ВидТранспорта") Тогда
			
		ВидТранспорта = Параметры.ЗначенияЗаполнения.ВидТранспорта;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВидТранспорта) Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.COM Тогда
			ВыбраннаяФорма = "ТранспортCOM";
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL Тогда
			ВыбраннаяФорма = "ТранспортEMAIL";
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
			ВыбраннаяФорма = "ТранспортFILE";
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
			ВыбраннаяФорма = "ТранспортFTP";
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
			ВыбраннаяФорма = "ТранспортWS";
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск Тогда
			ВыбраннаяФорма = "ТранспортЯндексДиск";
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox Тогда
			ВыбраннаяФорма = "ТранспортDropbox";			
		ИначеЕсли ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.GoogleDrive Тогда
			ВыбраннаяФорма = "ТранспортGoogleDrive";			
		Иначе
			ВызватьИсключение НСтр("ru='Не задана форма редактирования для выбранного вида транспорта!'"); 
		КонецЕсли; 
			
	КонецЕсли; 
	
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает статус активности использования
//
// Параметры:
//  ТранспортСсылка					 - СправочникСсылка.ТранспортыОбменаДанными	 - Текущий транспорт
//  СтатусАктивностиИспользования	 - Булево - Истина, если разрешать использование транспорта
//
Процедура УстановитьСтатусАктивностиИспользования(ТранспортСсылка, Знач СтатусАктивностиИспользования)	
	ТранспортОбъект = ТранспортСсылка.ПолучитьОбъект();
	ТранспортОбъект.ЗапретитьИспользование = НЕ СтатусАктивностиИспользования;
	ТранспортОбъект.Записать();
КонецПроцедуры

Функция РасписаниеРегламентногоЗаданияПоУмолчанию()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	Расписание.Месяцы                   = Месяцы;
	
	Возврат Расписание;
	
КонецФункции

Функция СценарийДляТранспортаОбмена(СсылкаНаТранспорт)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаТранспорт", СсылкаНаТранспорт);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СценарииОбменовДанными.Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными КАК СценарииОбменовДанными
	|ГДЕ
	|	СценарииОбменовДанными.ТранспортОбменаДанными = &СсылкаНаТранспорт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции
 
Функция СоздатьСценарий(ТранспортОбъект, УзелИнформационнойБазы)
	
	Отказ = Ложь;
	
	СценарийОбменаДанными = Справочники.СценарииОбменовДанными.СоздатьЭлемент();
	
	// Табличная часть
	СтрокаТаблицы = СценарийОбменаДанными.НастройкиОбмена.Добавить();
	СтрокаТаблицы.ВидТранспортаОбмена = ТранспортОбъект.ВидТранспорта;
	СтрокаТаблицы.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	СтрокаТаблицы.УзелИнформационнойБазы = УзелИнформационнойБазы;
	
	СтрокаТаблицы = СценарийОбменаДанными.НастройкиОбмена.Добавить();
	СтрокаТаблицы.ВидТранспортаОбмена = ТранспортОбъект.ВидТранспорта;
	СтрокаТаблицы.ВыполняемоеДействие = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
	СтрокаТаблицы.УзелИнформационнойБазы = УзелИнформационнойБазы;
	
	Возврат СценарийОбменаДанными;
	
КонецФункции


#КонецОбласти


#КонецЕсли