
#Область ПрограммныйИнтерфейс

// Возвращает таблицу значений, заполненную акутальными на текущий момент показателями
//	указанного в параметрах типа загружаемого докумета
//
//Параметры:
//	ТипДокумента - ПеречислениеСсылка.ТипыЗагружаемыхДокументов
//
//Возвращаемое значение:
// ТаблицаЗначений. Подробней см. функцию НовыйСписокПоказателей()
//
Функция НовыйСписокПоказателейЗагружаемогоДокумента(ТипДокумента) Экспорт

	Если ТипДокумента = Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка Тогда
		Возврат НовыйСписокПоказателейВыпискиБанка();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	 

КонецФункции

// Возвращает список показателей для указанного в параметрах правила чтения
//	Но возвращаются не все записи элемента справочника, а только актуальные - те, для которых 
//	найдутся ключи в таблице НовыйСписокПоказателейЗагружаемогоДокумента()
//
//Параметры:
//	СсылкаНаПравило - СправочникСсылка.ПравилаЧтенияТабличныхДокументов
//
//Возвращаемое значение:
// ТаблицаЗначений. Подробней см. функцию НовыйСписокПоказателей()
//
Функция СписокПоказателейПравила(СсылкаНаПравило) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаПравило);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаЧтенияТабличныхДокументов.ТипЗагружаемогоДокумента
	|ИЗ
	|	Справочник.ПравилаЧтенияТабличныхДокументов КАК ПравилаЧтенияТабличныхДокументов
	|ГДЕ
	|	ПравилаЧтенияТабличныхДокументов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаЧтенияТабличныхДокументовПоказателиДокумента.КлючПоказателя,
	|	ПравилаЧтенияТабличныхДокументовПоказателиДокумента.ПоложениеПоказателя
	|ИЗ
	|	Справочник.ПравилаЧтенияТабличныхДокументов.ПоказателиДокумента КАК ПравилаЧтенияТабличныхДокументовПоказателиДокумента
	|ГДЕ
	|	ПравилаЧтенияТабличныхДокументовПоказателиДокумента.Ссылка = &Ссылка";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаТипаДокумента = ПакетРезультатов[0].Выбрать();
	Если ВыборкаТипаДокумента.Следующий() Тогда
		ТипЗагружаемогоДокумента = ВыборкаТипаДокумента.ТипЗагружаемогоДокумента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СохраненныеПоказатели = ПакетРезультатов[1].Выгрузить();
	
	АктуальныеПоказатели = НовыйСписокПоказателейЗагружаемогоДокумента(ТипЗагружаемогоДокумента);
	Если АктуальныеПоказатели <> Неопределено Тогда
		
		Для каждого Показатель Из АктуальныеПоказатели Цикл
			
			СохраненныйПоказатель = СохраненныеПоказатели.Найти(Показатель.КлючПоказателя, "КлючПоказателя");
			Если СохраненныйПоказатель <> Неопределено Тогда
				Показатель.ПоложениеПоказателя = СохраненныйПоказатель.ПоложениеПоказателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат АктуальныеПоказатели;

КонецФункции

// Заполняет справочник записями с предустановленными правилами чтения табличных документов
Процедура ЗаполнитьПредустановленнымиПравилами(ПереписыватьСуществующие = Истина) Экспорт
	
	Макет = Справочники.ПравилаЧтенияТабличныхДокументов.ПолучитьМакет("ПредустановленныеПравила");
	Для каждого ОбластьМакета Из Макет.Области Цикл
		
		МакетПоказателей = Макет.ПолучитьОбласть(ОбластьМакета.Имя);
		ТекстТипаДокумента  = МакетПоказателей.Область(1,1).Текст;
		НаименованиеПравила = МакетПоказателей.Область(1,2).Текст;
		
		ТипДокумента = Перечисления.ТипыЗагружаемыхДокументов[ТекстТипаДокумента];
		СписокПоказателей = НовыйСписокПоказателейЗагружаемогоДокумента(ТипДокумента);
		
		СсылкаПравила = Справочники.ПравилаЧтенияТабличныхДокументов.НайтиПоНаименованию(НаименованиеПравила);
		Если ЗначениеЗаполнено(СсылкаПравила) Тогда
			Если Не ПереписыватьСуществующие Тогда
				Продолжить;
			Иначе
				ОбъектПравила = СсылкаПравила.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			ОбъектПравила = Справочники.ПравилаЧтенияТабличныхДокументов.СоздатьЭлемент();
		КонецЕсли;
		
		ОбъектПравила.Наименование               = НаименованиеПравила;
		ОбъектПравила.ТипЗагружаемогоДокумента   = ТипДокумента;
		ОбъектПравила.ПоказателиДокумента.Очистить();
		
		Для СчетчикСтрок = 2 По МакетПоказателей.ВысотаТаблицы Цикл
			
			ЭтоАналитика = ЗначениеЗаполнено(МакетПоказателей.Область(СчетчикСтрок, 3).Текст);
			Если ЭтоАналитика Тогда
				КлючПоказателя = ПланыВидовХарактеристик.ВидыАналитик[МакетПоказателей.Область(СчетчикСтрок, 1).Текст];
			Иначе
				КлючПоказателя = МакетПоказателей.Область(СчетчикСтрок, 1).Текст;
			КонецЕсли;
			
			Если СписокПоказателей.Найти(КлючПоказателя, "КлючПоказателя") <> Неопределено Тогда
				
				СтрокаПоказателя = ОбъектПравила.ПоказателиДокумента.Добавить();
				СтрокаПоказателя.КлючПоказателя = КлючПоказателя;
				СтрокаПоказателя.ПоложениеПоказателя = МакетПоказателей.Область(СчетчикСтрок, 2).Текст;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектПравила.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если ТипЗнч(Параметры) = Тип("Структура") Тогда
			
			Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) И Параметры.Ключ.ТипЗагружаемогоДокумента = Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка
				Или Параметры.Свойство("ЗначениеКопирования") И (ТипЗнч(Параметры.ЗначениеКопирования) = Тип("СправочникСсылка.ПравилаЧтенияТабличныхДокументов") ИЛИ ТипЗнч(Параметры.ЗначениеКопирования) = Тип("СправочникОбъект.ПравилаЧтенияТабличныхДокументов")) 
						И Параметры.ЗначениеКопирования.ТипЗагружаемогоДокумента = Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка
				Или Параметры.Свойство("ЗначенияЗаполнения") И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") 
						И Параметры.ЗначенияЗаполнения.Свойство("ТипЗагружаемогоДокумента") 
						И Параметры.ЗначенияЗаполнения.ТипЗагружаемогоДокумента = Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "Справочник.ПравилаЧтенияТабличныхДокументов.Форма.ПравилоЧтенияВыписки";
			КонецЕсли;
			
		КонецЕсли;
		
		 
		
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция НовыйСписокПоказателей() 

	ТипСтрока    = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючПоказателя",              );   // Строка или ссылка на аналитику
	Результат.Колонки.Добавить("Наименование",                ТипСтрока);   // представление показателя
	Результат.Колонки.Добавить("ПоложениеПоказателя",         ТипСтрока);   // координаты положения показателя в табличном документе, например, "R4C3" или "R7C3;R7C5"
	Результат.Колонки.Добавить("КонечнаяОбласть",             ТипСтрока);   // координаты конечной обасти показателя в табличном документе - конец колонки или конец таблицы
	Результат.Колонки.Добавить("Комментарий",                 ТипСтрока);   // подсказка, описание показателя
	Результат.Колонки.Добавить("ПоследнееЗначениеПоказателя",          );   // Произвольный, заполняется последним обработанным значением для ускорения получения значений общих для всей таблицы
	Результат.Колонки.Добавить("ТекстПоследнегоЗначения",     ТипСтрока);   // заполняется текстом последней обработанной ячейки показателя
	Результат.Колонки.Добавить("ОбластиПоказателя",                    );   // массив, заполняется при чтении табличного документа областями, в которых находятся значения показателей
	
	Результат.Колонки.Добавить("ТипЗначенияПоказателя",      Новый ОписаниеТипов("ОписаниеТипов")); // тип, который должен иметь показатель

	Возврат Результат;
	
КонецФункции

Функция НоваяСтрокаПоказателя(ТаблицаПоказателей, КлючПоказателя, Представление, Тип, Комментарий) 

	Строка = ТаблицаПоказателей.Добавить();
	Строка.КлючПоказателя            = КлючПоказателя;
	Строка.Наименование              = Представление;
	Строка.ТипЗначенияПоказателя     = Тип;
	Строка.Комментарий               = Комментарий;

	Возврат Строка;
	
КонецФункции

Функция НовыйСписокПоказателейВыпискиБанка() 

	ТипСтрока    = Новый ОписаниеТипов("Строка");
	ТипСумма     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2));
	ТипДата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	Результат = НовыйСписокПоказателей();

	// Заполняем обязательными показателями
	НоваяСтрокаПоказателя(Результат, "НачалоТаблицы", НСтр("ru='Начало таблицы операций'"), ТипСтрока,
			НСтр("ru='Первая ячейка, с которой начинается список операций (левый верхний угол списка)'"));
	НоваяСтрокаПоказателя(Результат, "Кошелек",  НСтр("ru='Кошелек (счет)'"), Новый ОписаниеТипов("СправочникСсылка.КошелькиИСчета"),
			НСтр("ru='Ячейка с номером или наименованием счета. Используется для идентификации кошелька'"));
	НоваяСтрокаПоказателя(Результат, "Дата", НСтр("ru='Дата операции'"), ТипДата,
			НСтр("ru='Дата, на которую должна быть создана операция'"));
	НоваяСтрокаПоказателя(Результат, "СуммаПоступления", НСтр("ru='Сумма прихода'"), ТипСумма,
			НСтр("ru='Колонка прихода или прихода и расхода, если приход и расход в одной колонке'"));
	НоваяСтрокаПоказателя(Результат, "СуммаСписания", НСтр("ru='Сумма расхода'"), ТипСумма,
			НСтр("ru='Колонка расхода или прихода и расхода, если приход и расход в одной колонке'"));
	НоваяСтрокаПоказателя(Результат, "Комментарий", НСтр("ru='Комментарий операции'"), ТипСтрока,
			НСтр("ru='Колонка, из которой можно извлечь вид операции и другие подробности'"));
	НоваяСтрокаПоказателя(Результат, "СтатьяДолг",  НСтр("ru='Статья, кошелек перемещения, долг'"), Метаданные.ОпределяемыеТипы.СтатьяБюджета.Тип,
			НСтр("ru='Колонка, из которой можно извлечь название статьи расхода/дохода, долга, имущества или номер второго счета, использовавшегося для перевода'"));
	НоваяСтрокаПоказателя(Результат, "ФинансоваяЦель", НСтр("ru='ФинансоваяЦель'"), Новый ОписаниеТипов("СправочникСсылка.ФинансовыеЦели"),
			НСтр("ru='Колонка, из которой можно извлечь название финансовой цели'"));
	
	// Заполняем видами аналитики
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыАналитик.Ссылка,
	|	ВидыАналитик.Наименование КАК Наименование,
	|	ВидыАналитик.ТипЗначения
	|ИЗ
	|	ПланВидовХарактеристик.ВидыАналитик КАК ВидыАналитик
	|ГДЕ
	|	НЕ ВидыАналитик.ПометкаУдаления
	|	И (ВидыАналитик.АктуальнаДляДохода
	|			ИЛИ ВидыАналитик.АктуальнаДляРасхода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строка = НоваяСтрокаПоказателя(Результат, Выборка.Ссылка, Выборка.Наименование, Выборка.ТипЗначения,
			НСтр("ru='Колонка, из которой можно извлечь название аналитики %1'"));
		Строка.Комментарий = СтрШаблон(Строка.Комментарий, """" + Выборка.Наименование + """");
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции


#КонецОбласти