////////////////////////////////////////////////////////////////////////////////
//Справочник.ПравилаЧтенияТабличныхДокументов.ПравилоЧтенияВыписки 
//  Для редактирования правила загрузки банковских выписок
//  
//Параметры формы:
//  Стандартные параметры формы
//	ТабличныйДокументВыписки - Табличный документ или строка с адресом временного хранилища
//  
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаСервере 
Перем ОбработкаЗагрузкиВыписки;


#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ТипЗагружаемогоДокумента) Тогда
			Объект.ТипЗагружаемогоДокумента = Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка;
		КонецЕсли;
		
		ПодгтовитьФормуНаСервере();
		
	КонецЕсли;
	
	 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПодгтовитьФормуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабличныйДокументВыпискиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции")
		Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Область <> Неопределено Тогда
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование И Не ПараметрыПеретаскивания.Значение[0] = НастройкиЧтения[0] Тогда
				ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя = СтрЗаменить(ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя, ";" + Область.Имя, "");
				ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя = СтрЗаменить(ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя, Область.Имя + ";", "");
				ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя = СтрЗаменить(ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя, Область.Имя, "");
				ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя = ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя
						+ ?(ПустаяСтрока(ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя), "", ";")
						+ Область.Имя;
			Иначе
				ПараметрыПеретаскивания.Значение[0].ПоложениеПоказателя = Область.Имя;
			КонецЕсли;
			 
			ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
			ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЧтенияПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.НастройкиЧтения.ТекущиеДанные;
	Если Не РасположениеУказаноПравильно(ДанныеСтроки) Тогда
		
	КонецЕсли;
	
	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПоказателиДокумента.Очистить();
	ТекущийОбъект.ПоказателиДокумента.Загрузить(НастройкиЧтения.Выгрузить(, "КлючПоказателя,ПоложениеПоказателя"));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЧтенияПриАктивизацииСтроки(Элемент)
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ЗагрузитьФайлКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныйДокумент(Команда)
	ОчисткаТабличногоДокумента();
КонецПроцедуры



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодгтовитьФормуНаСервере()

	ТабДокумент = Неопределено;
	Если Параметры.Свойство("ТабличныйДокументВыписки", ТабДокумент) и ТабДокумент <> Неопределено Тогда
		
		Если ТипЗнч(ТабДокумент) = Тип("Строка") Тогда
			ТабличныйДокументВыписки = ПолучитьИзВременногоХранилища(ТабДокумент);
		Иначе
			ТабличныйДокументВыписки = ТабДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОбъектНастроек = Параметры.ЗначениеКопирования;
	Иначе
		ОбъектНастроек = Объект.Ссылка;
	КонецЕсли;
	НастройкиЧтения.Загрузить(ПолучитьНастройкиЧтения(ОбъектНастроек));
	
	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);

КонецПроцедуры


#Область ОткрытиеФайла

&НаКлиенте
Процедура ЗагрузитьФайлКлиент()

	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
			МодульФайловыеФункцииСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ФайловыеФункцииСлужебныйКлиент");
			ПутьКФайлу = МодульФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
		Иначе
			ПутьКФайлу = ПолноеИмяФайла;
		КонецЕсли;
		
		ДиалогВыбораФайла = ПолучитьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие, ПутьКФайлу, "");
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьФайлКлиентЗавершение", ЭтотОбъект);
		ДиалогВыбораФайла.Показать(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлКлиентЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйФайл     = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныеФайлы[0]);
	ТекущееРасширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ВыбранныйФайл.Расширение);
	Если ЗначениеЗаполнено(ВыбранныйФайл.Имя) Тогда
		ПолноеИмяФайла = ВыбранныйФайл.ПолноеИмя;
	Иначе
		Возврат;
	КонецЕсли;

	АдресВременногоХранилища = "";
	Оповещение = Новый ОписаниеОповещения("ПриОкончаниеПомещенияФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ПолноеИмяФайла, Ложь);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогВыбораФайла(РежимДиалога, ПутьКФайлу, ИмяФайла = "")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	
	ДиалогВыбораФайла.Фильтр       = СтрокаФильтраПоРасширениюФайла(ТекущееРасширение, ДиалогВыбораФайла.ИндексФильтра);
	
	Если Не ПустаяСтрока(ТекущееРасширение) Тогда
		ДиалогВыбораФайла.Расширение = ТекущееРасширение;
	КонецЕсли;
		
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайла;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = РежимДиалога = РежимДиалогаВыбораФайла.Открытие;
	
	Возврат ДиалогВыбораФайла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаФильтраПоРасширениюФайла(ВыбранноеРасширение, ИндексВыбранногоРасширения)

	ОписаниеРасширения = НСтр("ru='Книга Excel 2007 (*.xlsx)|*.xlsx'")
			+ "|" + НСтр("ru='Книга Excel 97 (*.xls)|*.xls'")
			+ "|" + НСтр("ru='Таблица OpenDocument (*.ods)|*.ods'")
			+ "|" + НСтр("ru='Текстовый документ c разделителями (*.csv)|*.csv'")
			+ "|" + НСтр("ru='Табличный документ 1С:Предприятия (*.mxl)|*.mxl'")
			+ "|" + НСтр("ru='Текстовый отчет Сбербанка (*.txt)|*.txt'");

	Если ВыбранноеРасширение = "xlsx" Тогда
		ИндексВыбранногоРасширениям = 0;
	ИначеЕсли ВыбранноеРасширение = "xls" Тогда
		ИндексВыбранногоРасширениям = 1;
	ИначеЕсли ВыбранноеРасширение = "ods" Тогда
		ИндексВыбранногоРасширениям = 2;
	ИначеЕсли ВыбранноеРасширение = "csv" Тогда
		ИндексВыбранногоРасширениям = 3;
	ИначеЕсли ВыбранноеРасширение = "mxl" Тогда
		ИндексВыбранногоРасширениям = 4;
	ИначеЕсли ВыбранноеРасширение = "txt" Тогда
		ИндексВыбранногоРасширениям = 5;
	Иначе
		ИндексВыбранногоРасширениям = 0;
	КонецЕсли;
	 
	Возврат ОписаниеРасширения;
	
КонецФункции

&НаКлиенте
Процедура ПриОкончаниеПомещенияФайла(Результат, АдресВременногоХранилища, ИмяФайла, Параметр) Экспорт
	
	Если Результат = Истина Тогда
		
		Если Найти(СтрокаФильтраПоРасширениюФайла("",0), "*." + ТекущееРасширение) > 0 Тогда
			
			ФоновоеЗадание = Ложь;
			ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, ТекущееРасширение, ФоновоеЗадание);
			Если ФоновоеЗадание Тогда
				
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", 1, Истина);
				ПараметрыОбработчика.МаксимальныйИнтервал = 5;
				ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ФоновоеЗаданиеИдентификатор);
				
			Иначе
				
				ТабличныйДокументВыпискиПриИзмененииКлиент();
				
			КонецЕсли;
			
		Иначе
			
			ПоказатьПредупреждение(,НСтр("ru ='Не получилось загрузить данные из выбранного файла. Убедитесь в корректности его содержимого.'"));
			
		КонецЕсли;
		
		ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
		ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание = Ложь)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные     = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОчисткаТабличногоДокумента();

	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("Расширение",         Расширение);
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент",  ТабличныйДокументВыписки);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	
	ФоновоеЗаданиеАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ОбработкаЗагрузкиВыписки().ЗагрузитьФайлВТаблицу(ПараметрыВызоваСервера, ФоновоеЗаданиеАдресХранилища);
	ТабличныйДокументВыписки = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте()
	
	Результат = ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ФоновоеЗаданиеИдентификатор Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		
		ТабличныйДокументВыписки = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		ТабличныйДокументВыпискиПриИзмененииКлиент();
		
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат()
	
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Возврат Результат;
	
КонецФункции


#КонецОбласти



#Область ТабличныйДокументВыписки

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьОбластиТабличногоДокумента(Форма)

	ТабличныйДокументВыписки = Форма.ТабличныйДокументВыписки;
	НастройкиЧтения          = Форма.НастройкиЧтения;
	Автоцвет = Новый Цвет;
	
	// Очищаем предвдущее выделение
	МассивОбластей = Новый Массив;
	Для каждого Область Из ТабличныйДокументВыписки.Области Цикл
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента")
			Или Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОбластей.Добавить(Область);
		
	КонецЦикла;
	
	Для каждого Область Из МассивОбластей Цикл
		
		Если Область.Имя = "ВыделеннаяТаблицаВыписки" Тогда
			ПустаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Область.Обвести(ПустаяЛиния);
			ОбластьЦветЛинии = Автоцвет;
		КонецЕсли;
		
		Область.Примечание.Текст  = "";
		Область.ЦветУзора   = Автоцвет;
		Область.Узор        = ТипУзораТабличногоДокумента.БезУзора;
		Область.Имя = "";
		
	КонецЦикла;
	 
	
	Если ТабличныйДокументВыписки.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выделяем области показателя, выделенного в списке
	СтрокаПоказателя = Форма.Элементы.НастройкиЧтения.ТекущаяСтрока;
	Если СтрокаПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки =  Форма.НастройкиЧтения.НайтиПоИдентификатору(СтрокаПоказателя);
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ПоложениеПоказателя) Тогда
		Возврат;
	КонецЕсли;
	
	УзорВыделения = ТипУзораТабличногоДокумента.Узор3;
	ЦветВыделения = WebЦвета.НейтральноВесеннеЗеленый;
	
	ОбластиПоказателя = МассивОбластейПоказателя(ДанныеСтроки.ПоложениеПоказателя, ДанныеСтроки.КонечнаяОбласть, ТабличныйДокументВыписки);
	Счетчик = 1;
	Для каждого Область Из ОбластиПоказателя Цикл
		
		Суффикс = ?(ОбластиПоказателя.Количество() = 1, "", Формат(Счетчик, "ЧДЦ=; ЧГ=") );
		Область.Имя         = ?(ТипЗнч(ДанныеСтроки.КлючПоказателя) = Тип("Строка"), ДанныеСтроки.КлючПоказателя, "Аналитика" + Формат(Счетчик, "ЧДЦ=; ЧГ=")) + Суффикс;
		Область.Примечание.Текст  = Область.Примечание.Текст + ?(Область.Примечание.Текст = "", "", Символы.ПС + Символы.ПС)
							+ ДанныеСтроки.Наименование + Символы.ПС + ДанныеСтроки.Комментарий;
		Область.ЦветУзора   = ЦветВыделения;
		Область.Узор        = УзорВыделения;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчисткаТабличногоДокумента()
	
	ТабличныйДокументВыписки.Очистить();
	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки)

	Если НастройкиЧтения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеТаблицы      = НастройкиЧтения[0].ПоложениеПоказателя;
	ТабличныйДокументПуст = ТабличныйДокументВыписки.ВысотаТаблицы = 0;
	
	Если Не ЗначениеЗаполнено(ПоложениеТаблицы) Или ТабличныйДокументПуст Тогда
		
		ОбластьТаблицы   = ТабличныйДокументВыписки.Область(1,1);
		НачальнаяСтрока  = 1;
		НачальнаяКолонка = 1;
		КонечнаяСтрока   =  1;
		КонечнаяКолонка  =  1;
		
	Иначе
		
		ОбластьНачала    = ТабличныйДокументВыписки.Область(ПоложениеТаблицы);
		НачальнаяСтрока  = ОбластьНачала.Верх;
		НачальнаяКолонка = ОбластьНачала.Лево;
		
		КонечнаяСтрока  = НачальнаяСтрока;
		КонечнаяКолонка = ТабличныйДокументВыписки.ШиринаТаблицы;
		
		// вычисляем конечные строку и колонку таблицы
		Если ТабличныйДокументВыписки.ВысотаТаблицы > 1  Тогда
			
			// Первая пустая строка соответствует окончанию таблицы
			Для Счетчик = НачальнаяСтрока По ТабличныйДокументВыписки.ВысотаТаблицы Цикл
				Если Не ЗначениеЗаполнено(ТабличныйДокументВыписки.Область(Счетчик, НачальнаяКолонка).Текст)
					Или Счетчик = ТабличныйДокументВыписки.ВысотаТаблицы Тогда
					КонечнаяСтрока = Макс(1, Счетчик - ?(Счетчик = ТабличныйДокументВыписки.ВысотаТаблицы, 0, 1));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Вычисляем конечную колонку с учетом необязательности заполнения всех колонок
			ПраваяКолонка = ТабличныйДокументВыписки.ШиринаТаблицы;
			Пока ПраваяКолонка >= НачальнаяКолонка Цикл
				
				Для СчетчикСтрок = НачальнаяСтрока По КонечнаяСтрока Цикл
					
					Если ЗначениеЗаполнено(ТабличныйДокументВыписки.Область(СчетчикСтрок, ПраваяКолонка).Текст) Тогда
						КонечнаяКолонка = ПраваяКолонка;
						ПраваяКолонка = НачальнаяКолонка;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ПраваяКолонка = ПраваяКолонка - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Определяем область таблицы
		ОбластьТаблицы = ТабличныйДокументВыписки.Область(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		
	КонецЕсли;
	
	НастройкиЧтения[0].КонечнаяОбласть = "R" + Формат(КонечнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(КонечнаяКолонка, "ЧДЦ=; ЧН=0; ЧГ=");
	
	// Вычисляем конечные области для прочих показателей
	ПределСчетчика = НастройкиЧтения.Количество() - 1;
	Для Счетчик = 1  По ПределСчетчика Цикл
		
		СтрокаНастройки = НастройкиЧтения[Счетчик];
		СтрокаНастройки.КонечнаяОбласть = "";
		
		Если Не ТабличныйДокументПуст И ЗначениеЗаполнено(СтрокаНастройки.ПоложениеПоказателя) Тогда
			
			// Показатель может располагаться в нескольких колонках
			МассивАдресов = СтрРазделить(СтрокаНастройки.ПоложениеПоказателя, ";", Ложь);
			НачалоПоказателя    = "";
			ОкончаниеПоказателя = "";
			
			Для каждого АдресНачала Из МассивАдресов Цикл
				
				ОбластьПоказателя = ТабличныйДокументВыписки.Область(АдресНачала);
				
				Если ОбластьПринадлежитИсходной(ОбластьПоказателя, ОбластьТаблицы) Тогда
					
					// первая строка показателя-колонки должна равняться первой строке таблицы
					НачалоПоказателя    = НачалоПоказателя + ?(НачалоПоказателя = "", "", ";")
										+ "R" + Формат(НачальнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Лево, "ЧДЦ=; ЧН=0; ЧГ=");
					// заканчивается область на последней стркое таблицы
					ОкончаниеПоказателя = ОкончаниеПоказателя + ?(ОкончаниеПоказателя = "", "", ";") 
										+ "R" + Формат(КонечнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Право, "ЧДЦ=; ЧН=0; ЧГ=");
					
				Иначе
					
					НачалоПоказателя    = НачалоПоказателя + ?(НачалоПоказателя = "", "", ";") 
										+ "R" + Формат(ОбластьПоказателя.Верх, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Лево, "ЧДЦ=; ЧН=0; ЧГ=");
					ОкончаниеПоказателя = ОкончаниеПоказателя + ?(ОкончаниеПоказателя = "", "", ";") 
										+ "R" + Формат(ОбластьПоказателя.Низ, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Право, "ЧДЦ=; ЧН=0; ЧГ=");
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаНастройки.ПоложениеПоказателя = НачалоПоказателя;
			СтрокаНастройки.КонечнаяОбласть     = ОкончаниеПоказателя;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбластьПринадлежитИсходной(СравниваемаяОбласть, ИсходнаяОбласть)

	Возврат  СравниваемаяОбласть.Верх >= ИсходнаяОбласть.Верх
			И СравниваемаяОбласть.Лево >= ИсходнаяОбласть.Лево
			И СравниваемаяОбласть.Низ <= ИсходнаяОбласть.Низ
			И СравниваемаяОбласть.Право <= ИсходнаяОбласть.Право

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументВыпискиПриИзмененииКлиент()

	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиЧтения(ПравилоЧтения)

	Если ЗначениеЗаполнено(ПравилоЧтения) Тогда
		ТаблицаНастроек = Справочники.ПравилаЧтенияТабличныхДокументов.СписокПоказателейПравила(ПравилоЧтения);
	Иначе
		ТаблицаНастроек = Справочники.ПравилаЧтенияТабличныхДокументов.НовыйСписокПоказателейЗагружаемогоДокумента(Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка);
	КонецЕсли;
	
	Возврат ТаблицаНастроек;

КонецФункции

#КонецОбласти


&НаСервере
Функция ОбработкаЗагрузкиВыписки()

	Если ОбработкаЗагрузкиВыписки = Неопределено Тогда
		ОбработкаЗагрузкиВыписки = Обработки.ЗагрузкаВыпискиБанка.Создать();
	КонецЕсли;
	
	Возврат ОбработкаЗагрузкиВыписки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОбластейПоказателя(ПоложениеПоказателя, КонечнаяОбласть, ТабличныйДокументВыписки)

	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПоложениеПоказателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивНачалОбластей  = СтрРазделить(ПоложениеПоказателя, ";");
	МассивКонцовОбластей = СтрРазделить(КонечнаяОбласть, ";");
	Для Счетчик = 0 По МассивНачалОбластей.Количество() - 1 Цикл
		
		Результат.Добавить(ТабличныйДокументВыписки.Область(МассивНачалОбластей[Счетчик] + ":" + МассивКонцовОбластей[Счетчик]));
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция РасположениеУказаноПравильно(ДанныеСтроки)

	Если Не ЗначениеЗаполнено(ДанныеСтроки.ПоложениеПоказателя) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеСтроки = НастройкиЧтения[0] Тогда
		
		// Допускается указание только одной ячейки
		Попытка
			ОбластьДокумента = ТабличныйДокументВыписки.Область(ДанныеСтроки.ПоложениеПоказателя);
		Исключение
			ПоказатьСообщениеНеверноеПоложениеПоказателя();
			ДанныеСтроки.ПоложениеПоказателя = "";
			Возврат Ложь;
		КонецПопытки; 
		
	Иначе
		
		МассивАдресов = СтрРазделить(ДанныеСтроки.ПоложениеПоказателя, ";", Ложь);
		Для каждого Адрес Из МассивАдресов Цикл
			
			Попытка
				ОбластьДокумента = ТабличныйДокументВыписки.Область(Адрес);
			Исключение
				ПоказатьСообщениеНеверноеПоложениеПоказателя();
				ДанныеСтроки.ПоложениеПоказателя = "";
				Возврат Ложь;
			КонецПопытки; 
			
			Если Не ОбластьПоказателяКорректна(ОбластьДокумента) Тогда
				Возврат Ложь
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ОбластьПоказателяКорректна(Область)

	Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		Или Область.Верх <> Область.Низ
		Или Область.Право <> Область.Лево Тогда
		ПоказатьПредупреждение(, НСтр("ru='Положение показателя следует обозначать одной ячейкой. 
			|Если значение показателя находится в колонке таблицы следует указать ячейку в самой первой строке.этой таблицы.
			|Если значение показателя состоит из нескольких ячеек, их адреса следует перечислить через точку с запятой'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщениеНеверноеПоложениеПоказателя()

	ТекстСообщения = НСтр("ru='Положение указателя в таблице указано некорректно.
		|Укажите адрес ячейки в формате ""R<НомерСтроки>C<НомерКолонки> или перетащите мышью наименование показателя в нужную ячейку таблицы.'");
		
	ПоказатьПредупреждение(, ТекстСообщения);

КонецПроцедуры

#КонецОбласти