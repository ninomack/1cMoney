#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Устанавливаем свой порядок видов операций
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("ВводИзменениеОстатка");
	СписокТипов = ДеньгиВызовСервера.ПолучитьСписокВидовОпераций(, МассивИсключений);
	
	// Заполняем список видов операции:
	Элементы.ТипОперации.СписокВыбора.Добавить("Все", НСтр("ru = 'Все типы операций'") );
	Для Каждого ЭлементСписка Из СписокТипов Цикл
		Элементы.ТипОперации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление );
	КонецЦикла; 
	ТипОперации = "Все";
	
	// Установка условного оформления для форм списков:
	СуммыИВалюты = Новый Структура("СуммаПоступления, СуммаСписания", 
			Новый Массив, Новый Массив);
	СуммыИВалюты.СуммаПоступления.Добавить("СуммаПоступления");
	СуммыИВалюты.СуммаПоступления.Добавить("ВалютаПоступления");
	СуммыИВалюты.СуммаСписания.Добавить("СуммаСписания");
	СуммыИВалюты.СуммаСписания.Добавить("ВалютаСписания");
	РаботаСФормамиДокументов.УстановитьУсловноеОформлениеФормыСписка(ЭтотОбъект, "Список", Истина, СуммыИВалюты, Ложь, Истина);
	УстановитьДополнительноеОформлениеСписка();
	
	// Обработка параметра "Отбор":
	Если Параметры.Отбор.Свойство("Тип") И ЗначениеЗаполнено(Параметры.Отбор.Тип) Тогда
		ТипОтбора = Параметры.Отбор.Тип;
		ТипОперации = Метаданные.НайтиПоТипу(ТипОтбора).Имя;
		Если НЕ ЗначениеЗаполнено(ТипОперации) Тогда
			ТипОперации = "Все";
		КонецЕсли; 
	КонецЕсли; 
	РаботаСФормамиДокументов.ФормаСпискаДокументовОбработатьПараметрыОтбора(ЭтотОбъект, "Список", ОписаниеОтбора, Истина, Истина);
	АктуализироватьЗначенияБыстрыхОтборов(Список.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	// Устанавливаем параметр динамического списка
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекущаяДата", КонецДня(ТекущаяДатаСеанса()));
	
	Если НЕ ДеньгиВызовСервераПовтИсп.ИспользуетсяВариантИнтерфейсаТакси() Тогда
		// Для обычного интерфейса заменим шрифт на обычный
		РаботаСФормамиСправочников.ИзменитьШрифтПанелиОтбораСпискаВыбора(Элементы.ГруппаБыстрыеОтборы, ШрифтыСтиля.ОбычныйШрифтТекста);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Настройка стандартных команд формы
	РаботаСФормамиДокументовКлиентСервер.ПереименоватьКнопкиИПанелиСпискаДокументов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменилась дата плановой операции" Тогда
		Элементы.Список.Обновить();
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Отказ = истина;
	ПараметрыФормыНовогоДокумента = Новый Структура;
	ПараметрыФормыНовогоДокумента.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыФормыНовогоДокумента.ЗначенияЗаполнения.Вставить("ЭтоШаблон", Истина);
	
	Если ЗначениеЗаполнено(Параметр) Тогда
		ПараметрыФормыНовогоДокумента.Вставить("ТипДокумента", Параметр);
		ИмяВидаОперации = ПолучитьИмяВидаОперации(Параметр);
		Если НЕ ЗначениеЗаполнено(ИмяВидаОперации) Тогда
			Возврат;
		КонецЕсли; 
		ОткрытьФормуДобавленияОперации(ПараметрыФормыНовогоДокумента);
	Иначе
		ОбработчикВыбора = Новый ОписаниеОповещения("СписокПередНачаломДобавленияЗавершение", ЭтотОбъект, ПараметрыФормыНовогоДокумента);
		СписокТипов.ПоказатьВыборЭлемента(ОбработчикВыбора, НСтр("ru = 'Выбор типа операции'"));
	КонецЕсли;
	
КонецПроцедуры


// Обработчики Панели ГруппаБыстрыеОтборы
#Область ГруппаБыстрыеОтборы 

&НаКлиенте
Процедура АктуальностьПриИзменении(Элемент)
	
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОперацииПриИзменении(Элемент)
	
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОперацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипОперации = "Все";
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьБыстрыйОтборПоРеквизитам(Форма)

	ОтборСписка = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ОтборСписка <> Неопределено Тогда
		Если Форма.Актуальность = 1 Тогда
			// Только активные
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
			
		ИначеЕсли Форма.Актуальность = 2 Тогда
			// Только неактивные
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина);
			
		Иначе
			// Все шаблоны
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", , , , Ложь);
			
		КонецЕсли; 
		
		Если Форма.ТипОперации = "Все" Тогда
			// Все типы операций
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Тип", , , , Ложь);
		Иначе
			// Только одного типа
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Тип", Тип("ДокументСсылка." + Форма.ТипОперации), ВидСравненияКомпоновкиДанных.Равно, , Истина);
		КонецЕсли; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		Если ПустаяСтрока(ОписаниеОтбора) Тогда
			Форма.ОписаниеОтбора = НСтр("ru = 'не установлен'");
		Иначе
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Тип документа", "Тип операции");
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Активность Равно ""Да""", "Только актуальные");
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Активность Равно ""Нет""", "Только неактуальные");
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Активность", "Актуальность");
			Форма.ОписаниеОтбора = ОписаниеОтбора;
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	АктуализироватьЗначенияБыстрыхОтборов(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	АктуализироватьЗначенияБыстрыхОтборов(Список.КомпоновщикНастроек.ПользовательскиеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗначенияБыстрыхОтборов(Настройки)

	// Восстанавливаем значения быстрых отборов, если они были
	ОтборСписка = Настройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ОтборСписка <> Неопределено Тогда
		
		// "обнуляем" значения быстрого отбора:
		Актуальность    = 0;
		ОписаниеОтбора  = "";
		ТипОперации     = "Все";
		
		ПолеАктивность = Новый ПолеКомпоновкиДанных("Активность");
		ПолеТипОперации = Новый ПолеКомпоновкиДанных("Тип");
		Для Каждого ЭлементОтбора Из ОтборСписка.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеАктивность Тогда
				Если НЕ ЭлементОтбора.Использование Тогда
					Актуальность = 0;
				ИначеЕсли ЭлементОтбора.ПравоеЗначение = Ложь Тогда
					Актуальность = 2;
				Иначе
					Актуальность = 1;
				КонецЕсли; 
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеТипОперации Тогда
				Если НЕ ЭлементОтбора.Использование Или ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					ТипОперации = "Все";
				Иначе
					ТипОперации = Метаданные.НайтиПоТипу(ЭлементОтбора.ПравоеЗначение).Имя;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		Если ПустаяСтрока(ОписаниеОтбора) Тогда
			ОписаниеОтбора = НСтр("ru = 'не установлен'");
		Иначе
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Тип документа", "Тип операции");
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Активность Равно ""Да""", "Только актуальные");
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Активность Равно ""Нет""", "Только неактуальные");
			ОписаниеОтбора = СтрЗаменить(ОписаниеОтбора, "Активность", "Актуальность");
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры


#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДополнительноеОформлениеСписка()

	// Просрочено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПлановаяДата");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ПлановаяДата");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение  = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяВидаОперации(СсылкаНаДокумент)

	Если ТипЗнч(СсылкаНаДокумент) = Тип("Тип") Тогда
		ТипСсылки = СсылкаНаДокумент;
	Иначе
		ТипСсылки = ТипЗнч(СсылкаНаДокумент);
	КонецЕсли; 
	Если ТипСсылки = Тип("ДокументСсылка.ВводИзменениеОстатка") Тогда
		Возврат "ВводИзменениеОстатка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.МыВзялиВДолг") Тогда
		Возврат "МыВзялиВДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.МыДалиВДолг") Тогда
		Возврат "МыДалиВДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.НамВернулиДолг") Тогда
		Возврат "НамВернулиДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОбменВалюты") Тогда
		Возврат "ОбменВалюты";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Расход") Тогда
		Возврат "Расход";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Перемещение") Тогда
		Возврат "Перемещение";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Доход") Тогда
		Возврат "Доход";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.МыВернулиДолг") Тогда
		Возврат "МыВернулиДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.УниверсальнаяОперация") Тогда
		Возврат "УниверсальнаяОперация";
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДобавленияОперации(ПараметрыФормыНовогоДокумента)

	ПараметрыФормыНовогоДокумента.Вставить("АдресПараметровНовогоДокумента", 
		ПоместитьВоВременноеХранилище(ПараметрыФормыНовогоДокумента, УникальныйИдентификатор));
	
	ОткрытьФорму("Документ." + ПараметрыФормыНовогоДокумента.ИмяВидаДокумента + ".ФормаОбъекта", ПараметрыФормыНовогоДокумента, Элементы.Список);

КонецПроцедуры
 

#КонецОбласти

 
