
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.СтрокаПоиска2.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	Элементы.СтрокаПоиска1.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ОбновитьСписокИсточника();
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыИсточниковПодбораПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ЭлементИстории = ИсторияСтрокиПоиска.НайтиПоЗначению(СтрокаПоиска);
		Если ЭлементИстории = Неопределено Тогда
			ИсторияСтрокиПоиска.Вставить(0, СтрокаПоиска);
			Пока ИсторияСтрокиПоиска.Количество() > 25 Цикл
				ИсторияСтрокиПоиска.Удалить(24);
			КонецЦикла; 
		Иначе
			ИсторияСтрокиПоиска.Сдвинуть(ЭлементИстории, -ИсторияСтрокиПоиска.Индекс(ЭлементИстории));
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.СтрокаПоиска2.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	Элементы.СтрокаПоиска1.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтбораПриИзменении(Элемент)
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСправочника

&НаКлиенте
Процедура СписокСправочникаВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиСпискаСправочника(Значение);
	
КонецПроцедуры
 
&НаКлиенте
Процедура СписокСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиСпискаСправочника(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСправочникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование И ЗначениеЗаполнено(Родитель) Тогда
		Отказ = Истина;
		Родитель = ПолучитьРодителяЭлемента(Родитель);
		ЗначенияЗаполнения = Новый Структура("Родитель", Родитель);
		ОткрытьФорму("Справочник.СтатьиРасходов.Форма.ФормаЭлемента", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), Элементы.СписокСправочника, Истина);
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИстории

&НаКлиенте
Процедура СписокИсторииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборСтрокиСпискаИстории();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсторииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборСтрокиСпискаИстории();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	ВидимостьКоличестваИЦены = Расходы.Итог("КоличественныйУчет") <> 0;
	Элементы.ФормаПеренестиВОперацию.Доступность = Расходы.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	ТекущиеДанные.КоличественныйУчет = ?(ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасхода), ПолучитьПризнакКоличественногоУчета(ТекущиеДанные.СтатьяРасхода), Ложь);
	Если НЕ ТекущиеДанные.КоличественныйУчет Тогда
		ТекущиеДанные.Количество     = 0;
		ТекущиеДанные.Цена           = 0;
		ТекущиеДанные.ЕстьКоличество = 0;
	Иначе
		Если ТекущиеДанные.Количество = 0 Тогда
			ТекущиеДанные.Количество = 1;
			ТекущиеДанные.Цена = ТекущиеДанные.Сумма;
		КонецЕсли; 
		ТекущиеДанные.ЕстьКоличество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекущиеДанные.Цена = 0 И ТекущиеДанные.Сумма <> 0 Тогда
		ТекущиеДанные.Цена = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.Сумма / ТекущиеДанные.Количество);
	Иначе
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 И ТекущиеДанные.Сумма <> 0 Тогда
		ТекущиеДанные.Количество = ?(ТекущиеДанные.Цена = 0, 0, ТекущиеДанные.Сумма / ТекущиеДанные.Цена);
	Иначе
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 И ТекущиеДанные.Цена <> 0 Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.Сумма / ТекущиеДанные.Цена;
	Иначе
		ТекущиеДанные.Цена = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.Сумма / ТекущиеДанные.Количество);
	КонецЕсли;
	
КонецПроцедуры
 

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНайти(Команда)
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВОперацию(Команда)
	
	ОбработкаПереносаСтатейВОперацию();
	
КонецПроцедуры
 
&НаКлиенте
Процедура СоздатьПодчиненный(Команда)
	
	Родитель = Элементы.СписокСправочника.ТекущаяСтрока;
	ЗначенияЗаполнения = Новый Структура("Родитель", Родитель);
	ОткрытьФорму("Справочник.СтатьиРасходов.Форма.ФормаЭлемента", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), Элементы.СписокСправочника, Истина);
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	ФинЦельПоУмолчанию = Справочники.ФинансовыеЦели.ОбщиеНакопления;
	
	// Чтение параметров формы
	Если НЕ Параметры.Свойство("ВидимостьФинансовойЦели", ВидимостьФинансовойЦели) Тогда
		ВидимостьФинансовойЦели = Ложь;
	КонецЕсли; 
	Если НЕ Параметры.Свойство("ВидимостьКоличестваИЦены", ВидимостьКоличестваИЦены) Тогда
		ВидимостьКоличестваИЦены = Ложь;
	КонецЕсли; 
	Если НЕ Параметры.Свойство("ДатаОтбора", ДатаОтбора) ИЛИ НЕ ЗначениеЗаполнено(ДатаОтбора) Тогда
		ДатаОтбора = ДобавитьМесяц(ТекущаяДатаКлиентСервер(), -1);
	КонецЕсли; 
	Если НЕ Параметры.Свойство("ВалютаКошелька", ВалютаКошелька) ИЛИ НЕ ЗначениеЗаполнено(ВалютаКошелька) Тогда
		ВалютаКошелька = ВалютаУчета;
	КонецЕсли; 
	Если НЕ Параметры.Свойство("ДатаОперации", ДатаОперации) ИЛИ НЕ ЗначениеЗаполнено(ДатаОперации) Тогда
		ДатаОперации = ТекущаяДатаСеанса();
	КонецЕсли; 
	Параметры.Свойство("КошелекОперации", КошелекОперации);
	Если НЕ Параметры.Свойство("СтрокаПоиска", СтрокаПоиска) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СтрокаПоиска = "";
	КонецЕсли; 
	
	ТекстЗаголовка = НСтр("ru = 'Подбор статей в расход от %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Формат(ДатаОперации, "ДФ='дд.ММ.гг (ЧЧ:мм)'"));
	
	ЗаголовокКолонкиСуммы = НСтр("ru = 'Сумма (%1)'");
	ЗаголовокКолонкиСуммы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКолонкиСуммы, Строка(ВалютаКошелька));
	Элементы.РасходыСумма.Заголовок       = ЗаголовокКолонкиСуммы;
	Элементы.СписокИсторииСумма.Заголовок = ЗаголовокКолонкиСуммы;

	// Установка параметров динамических списков
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСправочника, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "КонецПериода", КонецДня(ТекущаяДатаКлиентСервер()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "БазоваяВалюта", ВалютаУчета);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "ВалютаОтчета", ?(ЗначениеЗаполнено(ВалютаКошелька), ВалютаКошелька, ВалютаУчета));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "ДатаОтбора", КонецДня(ДатаОтбора));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "ИспользоватьФинансовуюЦель", ВидимостьФинансовойЦели);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Список;
	Иначе
		Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Дерево;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокИсточника()

	Если Элементы.ГруппаСтраницыИсточниковПодбора.ТекущаяСтраница = Элементы.СтраницаСправочник Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСправочника, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Список;
		Иначе
			Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
		 
	ИначеЕсли Элементы.ГруппаСтраницыИсточниковПодбора.ТекущаяСтраница = Элементы.СтраницаИстория Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "ДатаОтбора", КонецДня(ДатаОтбора));
		
	КонецЕсли;
	 

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтатьюВСписок(СтруктураВыбора)

	НоваяСтрока = Расходы.Добавить();
	НоваяСтрока.СтатьяРасхода = СтруктураВыбора.Статья;
	НоваяСтрока.Сумма         = СтруктураВыбора.Сумма;
	НоваяСтрока.КоличественныйУчет = ?(СтруктураВыбора.КоличественныйУчет = Истина, 1, 0);
	Если НоваяСтрока.КоличественныйУчет = 1 Тогда
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(СтруктураВыбора.Количество), СтруктураВыбора.Количество, 1);
		НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
	КонецЕсли; 
	НоваяСтрока.КомментарийСтроки = СтруктураВыбора.КомментарийСтроки;
	Если ВидимостьФинансовойЦели Тогда
		НоваяСтрока.ФинансоваяЦель = ?(ЗначениеЗаполнено(СтруктураВыбора.ФинансоваяЦель), СтруктураВыбора.ФинансоваяЦель, ФинЦельПоУмолчанию);
	КонецЕсли; 
	НоваяСтрока.ЕстьКоличество = НоваяСтрока.Количество <> 0;
	
	ВидимостьКоличестваИЦены = Расходы.Итог("КоличественныйУчет") <> 0;
	Элементы.ФормаПеренестиВОперацию.Доступность = Расходы.Количество() > 0;
	
	Если ЗапрашиватьСумму Тогда
		ПараметрыСтроки = Новый Структура("ВидимостьКоличестваИЦены,ВидимостьФинансовойЦели,ВалютаКошелька,Сумма,
			|Цена,Количество,ФинансоваяЦель,КомментарийСтроки,КоличественныйУчет",
			ВидимостьКоличестваИЦены, ВидимостьФинансовойЦели, ВалютаКошелька, НоваяСтрока.Сумма, 
			НоваяСтрока.Цена, НоваяСтрока.Количество, НоваяСтрока.ФинансоваяЦель, НоваяСтрока.КомментарийСтроки, НоваяСтрока.КоличественныйУчет);
		ДопПараметры = Новый Структура("ИДСтроки", НоваяСтрока.ПолучитьИдентификатор());
		ОписаниеОбработчикаВводаСуммы = Новый ОписаниеОповещения("ОбработкаВводаСуммы", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Обработка.ФормыПодборов.Форма.ЗапросСуммыРасхода", ПараметрыСтроки, ЭтаФорма, Истина, ,,ОписаниеОбработчикаВводаСуммы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаСуммы(РезультатВвода, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВвода) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаРасхода = Расходы.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки);
	Если СтрокаРасхода = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	СтрокаРасхода.Сумма = РезультатВвода.Сумма;
	СтрокаРасхода.КомментарийСтроки = РезультатВвода.КомментарийСтроки;
	Если ВидимостьФинансовойЦели Тогда
		СтрокаРасхода.ФинансоваяЦель = ?(ЗначениеЗаполнено(РезультатВвода.ФинансоваяЦель), РезультатВвода.ФинансоваяЦель, ФинЦельПоУмолчанию);
	КонецЕсли; 
	Если СтрокаРасхода.КоличественныйУчет <> 0 Тогда
		СтрокаРасхода.Количество = РезультатВвода.Количество;
		СтрокаРасхода.Цена       = РезультатВвода.Цена;
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыборСтрокиСпискаИстории()

	ТекущаяСтрока = Элементы.СписокИстории.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПараметрВыбора = Новый Структура("Статья, КоличественныйУчет, Сумма, Количество, КомментарийСтроки, ФинансоваяЦель", 
			ТекущаяСтрока.СтатьяРасхода, ТекущаяСтрока.КоличественныйУчет, ТекущаяСтрока.Сумма, ТекущаяСтрока.Количество, ТекущаяСтрока.КомментарийСтроки, ТекущаяСтрока.ФинансоваяЦель);
	
	ДобавитьСтатьюВСписок(ПараметрВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ВыборСтрокиСпискаСправочника(ВыбраннаяСтатья)

	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтатья) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.СписокСправочника.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПараметрВыбора = Новый Структура("Статья, КоличественныйУчет, Сумма, Количество, КомментарийСтроки, ФинансоваяЦель", 
			ВыбраннаяСтатья, ТекущаяСтрока.КоличественныйУчет);
			
	ДобавитьСтатьюВСписок(ПараметрВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПереносаСтатейВОперацию()
	
	Закрыть(ПодготовитьРезультатКПереносуВОперацию(ВладелецФормы.УникальныйИдентификатор));
	
КонецПроцедуры
 
&НаСервере
Функция ПодготовитьРезультатКПереносуВОперацию(ИДВладельца)

	АдресТаблицы = ПоместитьВоВременноеХранилище(Расходы.Выгрузить(), ИДВладельца);
	Результат = Новый Структура("АдресТаблицыВыбора", АдресТаблицы);
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПризнакКоличественногоУчета(Знач Статья)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "КоличественныйУчет");

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРодителяЭлемента(Элемент)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Родитель");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти




