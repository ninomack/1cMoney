
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Элементы.СтрокаПоиска2.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	Элементы.СтрокаПоиска1.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ОбновитьСписокИсточника();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыИсточниковПодбораПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ЭлементИстории = ИсторияСтрокиПоиска.НайтиПоЗначению(СтрокаПоиска);
		Если ЭлементИстории = Неопределено Тогда
			ИсторияСтрокиПоиска.Вставить(0, СтрокаПоиска);
			Пока ИсторияСтрокиПоиска.Количество() > 25 Цикл
				ИсторияСтрокиПоиска.Удалить(24);
			КонецЦикла; 
		Иначе
			ИсторияСтрокиПоиска.Сдвинуть(ЭлементИстории, -ИсторияСтрокиПоиска.Индекс(ЭлементИстории));
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.СтрокаПоиска2.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	Элементы.СтрокаПоиска1.СписокВыбора.ЗагрузитьЗначения(ИсторияСтрокиПоиска.ВыгрузитьЗначения());
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтбораПриИзменении(Элемент)
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСправочника

&НаКлиенте
Процедура СписокСправочникаВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиСпискаСправочника(Значение);
	
КонецПроцедуры
 
&НаКлиенте
Процедура СписокСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтрокиСпискаСправочника(ВыбраннаяСтрока);
	
КонецПроцедуры
 
&НаКлиенте
Процедура СписокСправочникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование И ЗначениеЗаполнено(Родитель) Тогда
		Отказ = Истина;
		Родитель = ПолучитьРодителяЭлемента(Родитель);
		ЗначенияЗаполнения = Новый Структура("Родитель", Родитель);
		ОткрытьФорму("Справочник.СтатьиДоходов.Форма.ФормаЭлемента", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), Элементы.СписокСправочника, Истина);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИстории

&НаКлиенте
Процедура СписокИсторииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборСтрокиСпискаИстории();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИсторииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыборСтрокиСпискаИстории();
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	ВидимостьКоличестваИЦены = Доходы.Итог("КоличественныйУчет") <> 0;
	Элементы.ФормаПеренестиВОперацию.Доступность = Доходы.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКошелекПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Кошелек) Тогда
		ПараметрыКошелька    = ПолучитьВалютуНазначениеКошелька(ТекущиеДанные.Кошелек);
		ТекущиеДанные.Валюта = ПараметрыКошелька.Валюта;
		ТекущиеДанные.ВидимостьФинансовойЦели = ПараметрыКошелька.ИспользоватьДляНакоплений;
	Иначе
		ТекущиеДанные.Валюта = ВалютаУчета;
		ТекущиеДанные.ВидимостьФинансовойЦели = Ложь;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ВидимостьФинансовойЦели Тогда
		ТекущиеДанные.ФинансоваяЦель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНайти(Команда)
	
	ОбновитьСписокИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВОперацию(Команда)
	ОбработкаПереносаСтатейВОперацию();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПодчиненный(Команда)
	
	Родитель = Элементы.СписокСправочника.ТекущаяСтрока;
	ЗначенияЗаполнения = Новый Структура("Родитель", Родитель);
	ОткрытьФорму("Справочник.СтатьиДоходов.Форма.ФормаЭлемента", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), Элементы.СписокСправочника, Истина);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВалютаУчета        = Константы.ВалютаУчета.Получить();
	ФинЦельПоУмолчанию = Справочники.ФинансовыеЦели.ОбщиеНакопления;
	
	// Чтение параметров формы
	Параметры.Свойство("КошелекОперации", КошелекОперации);
	Если НЕ Параметры.Свойство("СтрокаПоиска", СтрокаПоиска) ИЛИ НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СтрокаПоиска = "";
	КонецЕсли; 
	Если ЗначениеЗаполнено(КошелекОперации) Тогда
		ВидимостьФинансовойЦели = КошелекОперации.ИспользоватьДляНакоплений;
		ВалютаКошелька          = КошелекОперации.Валюта;
	КонецЕсли; 
	Если НЕ Параметры.Свойство("ДатаОтбора", ДатаОтбора) ИЛИ НЕ ЗначениеЗаполнено(ДатаОтбора) Тогда
		ДатаОтбора = ДобавитьМесяц(ТекущаяДатаКлиентСервер(), -6);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ВалютаКошелька) Тогда
		ВалютаКошелька = ВалютаУчета;
	КонецЕсли; 
	Если НЕ Параметры.Свойство("ДатаОперации", ДатаОперации) ИЛИ НЕ ЗначениеЗаполнено(ДатаОперации) Тогда
		ДатаОперации = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	ТекстЗаголовка = НСтр("ru = 'Подбор статей в доход от %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Формат(ДатаОперации, "ДФ='дд.ММ.гг (ЧЧ:мм)'"));
	
	// Установка параметров динамических списков
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСправочника, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "ДатаОтбора", КонецДня(ДатаОтбора));
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Список;
	Иначе
		Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Дерево;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокИсточника()

	Если Элементы.ГруппаСтраницыИсточниковПодбора.ТекущаяСтраница = Элементы.СтраницаСправочник Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСправочника, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Список;
		Иначе
			Элементы.СписокСправочника.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
		 
	ИначеЕсли Элементы.ГруппаСтраницыИсточниковПодбора.ТекущаяСтраница = Элементы.СтраницаИстория Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "СтрокаПоиска", ?(ЗначениеЗаполнено(СтрокаПоиска), "%" + СтрокаПоиска + "%", ""));
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокИстории, "ДатаОтбора", КонецДня(ДатаОтбора));
		
	КонецЕсли;
	 

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтатьюВСписок(СтруктураВыбора)

	НоваяСтрока = Доходы.Добавить();
	НоваяСтрока.СтатьяДохода  = СтруктураВыбора.Статья;
	НоваяСтрока.Сумма         = СтруктураВыбора.Сумма;
	НоваяСтрока.Кошелек       = СтруктураВыбора.Кошелек;
	НоваяСтрока.Валюта        = СтруктураВыбора.Валюта;
	НоваяСтрока.КомментарийСтроки       = СтруктураВыбора.КомментарийСтроки;
	НоваяСтрока.ВидимостьФинансовойЦели = СтруктураВыбора.ДляНакоплений;
	Если НоваяСтрока.ВидимостьФинансовойЦели Тогда
		НоваяСтрока.ФинансоваяЦель = ?(ЗначениеЗаполнено(СтруктураВыбора.ФинансоваяЦель), СтруктураВыбора.ФинансоваяЦель, ФинЦельПоУмолчанию);
	КонецЕсли; 
	
	Элементы.ФормаПеренестиВОперацию.Доступность = Доходы.Количество() > 0;
	
	Если НЕ ЗначениеЗаполнено(КошелекОперации) И ЗначениеЗаполнено(НоваяСтрока.Кошелек) Тогда
		КошелекОперации         = НоваяСтрока.Кошелек;
		ПараметрыКошелька       = ПолучитьВалютуНазначениеКошелька(КошелекОперации);
		ВалютаКошелька          = ПараметрыКошелька.Валюта;
		ВидимостьФинансовойЦели = ПараметрыКошелька.ИспользоватьДляНакоплений;
	КонецЕсли; 
	
	Если ЗапрашиватьСумму Тогда
		ПараметрыСтроки = Новый Структура("Кошелек,Валюта,Сумма,ВидимостьФинансовойЦели,
			|КомментарийСтроки,ФинансоваяЦель",
			НоваяСтрока.Кошелек, НоваяСтрока.Валюта, НоваяСтрока.Сумма, НоваяСтрока.ВидимостьФинансовойЦели, 
			НоваяСтрока.КомментарийСтроки, НоваяСтрока.ФинансоваяЦель);
		ДопПараметры = Новый Структура("ИДСтроки", НоваяСтрока.ПолучитьИдентификатор());
		ОписаниеОбработчикаВводаСуммы = Новый ОписаниеОповещения("ОбработкаВводаСуммы", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Обработка.ФормыПодборов.Форма.ЗапросСуммыДохода", ПараметрыСтроки, ЭтаФорма, Истина, ,,ОписаниеОбработчикаВводаСуммы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаСуммы(РезультатВвода, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВвода) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаРасхода = Доходы.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки);
	Если СтрокаРасхода = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	СтрокаРасхода.Сумма = РезультатВвода.Сумма;
	СтрокаРасхода.КомментарийСтроки = РезультатВвода.КомментарийСтроки;
	СтрокаРасхода.ВидимостьФинансовойЦели = РезультатВвода.ВидимостьФинансовойЦели;
	СтрокаРасхода.Кошелек = РезультатВвода.Кошелек;
	СтрокаРасхода.Валюта  = РезультатВвода.Валюта;
	Если СтрокаРасхода.ВидимостьФинансовойЦели Тогда
		СтрокаРасхода.ФинансоваяЦель = ?(ЗначениеЗаполнено(РезультатВвода.ФинансоваяЦель), РезультатВвода.ФинансоваяЦель, ФинЦельПоУмолчанию);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(КошелекОперации) И ЗначениеЗаполнено(СтрокаРасхода.Кошелек) Тогда
		КошелекОперации         = СтрокаРасхода.Кошелек;
		ПараметрыКошелька       = ПолучитьВалютуНазначениеКошелька(КошелекОперации);
		ВалютаКошелька          = ПараметрыКошелька.Валюта;
		ВидимостьФинансовойЦели = ПараметрыКошелька.ИспользоватьДляНакоплений;
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыборСтрокиСпискаИстории()

	ТекущаяСтрока = Элементы.СписокИстории.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПараметрВыбора = ПолучитьСтруктуруВыбранногоЗначения();
	ПараметрВыбора.Статья             = ТекущаяСтрока.СтатьяДохода;
	ПараметрВыбора.Сумма              = ТекущаяСтрока.Сумма;
	ПараметрВыбора.Кошелек            = ТекущаяСтрока.Кошелек;
	ПараметрВыбора.Валюта             = ТекущаяСтрока.КошелекВалюта;
	ПараметрВыбора.КомментарийСтроки  = ТекущаяСтрока.КомментарийСтроки;
	ПараметрВыбора.ФинансоваяЦель     = ТекущаяСтрока.ФинансоваяЦель;
	ПараметрВыбора.ДляНакоплений      = ТекущаяСтрока.ДляНакоплений;

	ДобавитьСтатьюВСписок(ПараметрВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ВыборСтрокиСпискаСправочника(ВыбраннаяСтатья)

	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтатья) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока = Элементы.СписокСправочника.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ПараметрВыбора = ПолучитьСтруктуруВыбранногоЗначения();
	ПараметрВыбора.Статья          = ВыбраннаяСтатья;
	ПараметрВыбора.Кошелек         = КошелекОперации;
	ПараметрВыбора.Валюта          = ВалютаКошелька;
	ПараметрВыбора.ФинансоваяЦель  = ФинЦельПоУмолчанию;
	ПараметрВыбора.ДляНакоплений   = ВидимостьФинансовойЦели;
			
	ДобавитьСтатьюВСписок(ПараметрВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПереносаСтатейВОперацию()
	
	Закрыть(ПодготовитьРезультатКПереносуВОперацию(ВладелецФормы.УникальныйИдентификатор));
	
КонецПроцедуры
 
&НаСервере
Функция ПодготовитьРезультатКПереносуВОперацию(ИДВладельца)

	АдресТаблицы = ПоместитьВоВременноеХранилище(Доходы.Выгрузить(), ИДВладельца);
	Результат = Новый Структура("АдресТаблицыВыбора", АдресТаблицы);
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВалютуНазначениеКошелька(Знач Кошелек)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Кошелек, "Валюта,ИспользоватьДляНакоплений");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруВыбранногоЗначения()

	Результат = Новый Структура;
	Результат.Вставить("Статья");
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("Кошелек");
	Результат.Вставить("Валюта");
	Результат.Вставить("КомментарийСтроки", "");
	Результат.Вставить("ФинансоваяЦель");
	Результат.Вставить("ДляНакоплений", Ложь);

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРодителяЭлемента(Элемент)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Родитель");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти
