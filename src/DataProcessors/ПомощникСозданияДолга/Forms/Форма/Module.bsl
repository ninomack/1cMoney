////////////////////////////////////////////////////////////////////////////////
//  
// Параметры формы:
//	Копирование 			- Булево - Долг создается копированием 
//	СкрыватьОстатокНаНачало - Булево - Не заполнять и не создавать ввод остатка
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеТекущегоФайла(ЭтотОбъект);
	#КонецОбласти	
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записан элемент справочника" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ИмяСправочника = Неопределено;
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ИмяСправочника", ИмяСправочника) И ВРЕГ(ИмяСправочника) = ВРЕГ("КошелькиИСчета")
			И Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ЗначениеЗаполнено(ФормаВладельца)
			И ФормаВладельца = ЭтаФорма.УникальныйИдентификатор Тогда
			ПараметрыГрафика.КошелекДляПогашения = Параметр.Ссылка;
			ТекущийЭлемент = Элементы.ПараметрыГрафикаКошелекДляПогашения;
		ИначеЕсли Параметр.Свойство("ИмяСправочника", ИмяСправочника) И ВРЕГ(ИмяСправочника) = ВРЕГ("Контакты")
			И Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ЗначениеЗаполнено(ФормаВладельца)
			И ФормаВладельца = ЭтаФорма.УникальныйИдентификатор Тогда
			Объект.Контакт = Параметр.Ссылка;
			ТекущийЭлемент = Элементы.Контакт;
		КонецЕсли; 
		
	КонецЕсли;

	#Область ПрикрепленныеФайлы
	Если (ПрикрепленныеФайлыКлиент.ЭтоПрикреплениеФайла(ЭтотОбъект, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиент.ОбработатьОповещениеДобавленияФайла(ЭтотОбъект, Параметр);
	ИначеЕсли (ПрикрепленныеФайлыКлиент.ЭтоИзменениеСпискаМультимедиа(ЭтотОбъект, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеТекущегоФайла(ЭтотОбъект);
	КонецЕсли;
	#КонецОбласти
		
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ИндексШага = 0;
	Для каждого ЭлементЗаголовка Из СписокШаговПомощника Цикл
		Страница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы[ЭлементЗаголовка.Значение]; 
		Если НЕ СтраницаЗаполненаБезОшибок(Страница) Тогда
			Отказ = Истина;
			Элементы.СтраницыПомощника.ТекущаяСтраница = Страница;
			Элементы.ПредыдущаяСтраница.Доступность = ИндексШага > 0;
			Элементы.СледующаяСтраница.Доступность = ИндексШага < СписокШаговПомощника.Количество() - 1 И Объект.Ссылка.Пустая();
			Элементы.СледующаяСтраница.КнопкаПоУмолчанию = Элементы.СледующаяСтраница.Доступность;
			Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = НЕ Элементы.СледующаяСтраница.Доступность;
			Возврат;
		КонецЕсли;
		ИндексШага = ИндексШага + 1;
	КонецЦикла;
	
	Если Не Отказ Тогда
		ОбслуживаниеСправочниковКлиент.ИнформироватьОДобавленииСтатьиБюджета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыСервер.ОбработатьИЗаписатьДанныеМультимедиа(МедиаФайлы, ТекущийОбъект.Ссылка);
	#КонецОбласти 
	
	// Записываем остаток на начало:
	Если ЗначениеЗаполнено(ДатаНачальногоОстатка) И ЗначениеЗаполнено(ОстатокДолгаНаНачало) Тогда
		
		ДокументОстатка = Документы.ВводИзменениеОстатка.СоздатьДокумент();
		ДокументОстатка.Дата = ДатаНачальногоОстатка;
		ДокументОстатка.РазделУчета = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов;
		ДокументОстатка.ОбъектУчета = ТекущийОбъект.Ссылка;
		ДокументОстатка.ВалютаОперации = ТекущийОбъект.Валюта;
		
		Если ТекущийОбъект.ИспользоватьДляУчетаВыданныхДолгов
			И НЕ ТекущийОбъект.ИспользоватьДляУчетаВзятыхДолгов
			ИЛИ ТекущийОбъект.ИспользоватьДляУчетаВыданныхДолгов
			И ТекущийОбъект.ИспользоватьДляУчетаВзятыхДолгов Тогда
			// Для выданных долгов и взаиморасчетов остаток записываем, как есть
			ДокументОстатка.СуммаНовогоОстатка = ОстатокДолгаНаНачало;
		Иначе
			// Для взятых долгов инвертируем знак остатка
			ДокументОстатка.СуммаНовогоОстатка = - ОстатокДолгаНаНачало;
		КонецЕсли;
		ДокументОстатка.Комментарий = НСтр("ru='Остаток на начало'"); ;
		ДокументОстатка.Записать(РежимЗаписиДокумента.Проведение);
		
		ПараметрыЗаписи.Вставить("НовыйВводОстатка", ДокументОстатка.Ссылка);
		ПараметрыЗаписи.Вставить("НовыйВводОстаткаПредставление", ДокументОстатка.ОписаниеОперации);
		
	КонецЕсли;
	
	// Создаем шаблон платежа и расписание для него
	СсылкаНаШаблон = Неопределено;
	Если ЗадатьСпособИГрафикПогашения ИЛИ ЗадатьПроцентыИКомиссии Тогда
		
		ЭтоРазовыйПлатеж = ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = Перечисления.СпособыПогашенияКредита.РазовыйПлатеж;
		
		// График для разового платежа
		Если ЭтоРазовыйПлатеж Тогда
			ПроизвольныеДатыРасписания.Очистить();
			СтрокаРасписания = ПроизвольныеДатыРасписания.Добавить();
			СтрокаРасписания.ПлановаяДата = ПараметрыГрафика.ПлановаяДатаПогашения;
			СтрокаРасписания.АктуальнаяДата = ПараметрыГрафика.ПлановаяДатаПогашения;
			СтрокаРасписания.СуммаДолга   = ПараметрыГрафика.СуммаДолга;
			Если ЗадатьПроцентыИКомиссии Тогда
				СтрокаРасписания.СуммаПроцентов  = СуммаПроцентовДляРазовогоПлатежа;
				СтрокаРасписания.СуммаКомиссии   = ПараметрыГрафика.СуммаЕжемесячнойКомиссии;
			КонецЕсли;
		КонецЕсли;
		
		// Подготовим параметры графика
		Если НЕ ЗадатьСпособИГрафикПогашения Тогда
			ПараметрыГрафика.СпособПогашения = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроизвольныеДатыРасписания) И НЕ ЭтоРазовыйПлатеж Тогда
			ПараметрыГрафика.ПлановаяДатаПогашения = ПроизвольныеДатыРасписания[ПроизвольныеДатыРасписания.Количество()-1].ПлановаяДата;
		КонецЕсли;
		Если ВидДолга = ВидДолгаЗаем Тогда
			ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходов");
		ИначеЕсли ВидДолга = ВидДолгаКредит Тогда
			ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов");
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов;
		КонецЕсли; 
		ПараметрыГрафика.СтатьяДляУчетаПроцентов   = ОписаниеТипов.ПривестиЗначение(ПараметрыГрафика.СтатьяДляУчетаПроцентов);
		ПараметрыГрафика.СтатьяЕжемесячнойКомиссии = ОписаниеТипов.ПривестиЗначение(ПараметрыГрафика.СтатьяЕжемесячнойКомиссии);
		
		// Создаем Шаблон платежа и получаем ссылку нового документа
		ЭтоВозвраЗайма = ТекущийОбъект.ИспользоватьДляУчетаВыданныхДолгов
			И НЕ ТекущийОбъект.ИспользоватьДляУчетаВзятыхДолгов;
			
		Если ЭтоВозвраЗайма Тогда
			ШаблонПлатежа = Документы.НамВернулиДолг.СоздатьДокумент();
			ШаблонПлатежа.УстановитьСсылкуНового(Документы.НамВернулиДолг.ПолучитьСсылку());
		Иначе
			ШаблонПлатежа = Документы.МыВернулиДолг.СоздатьДокумент();
			ШаблонПлатежа.УстановитьСсылкуНового(Документы.МыВернулиДолг.ПолучитьСсылку());
		КонецЕсли;
		СсылкаНаШаблон = ШаблонПлатежа.ПолучитьСсылкуНового();
		
		// Сохраняем параметры графика погашения
		ЗаписьПараметров = РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.СоздатьМенеджерЗаписи();
		СписокСвойств = "";
		Если ЗадатьПроцентыИКомиссии Тогда
			СписокСвойств = СписокСвойств + ", ПроцентнаяСтавка, СтатьяДляУчетаПроцентов, СуммаЕжемесячнойКомиссии, СтатьяЕжемесячнойКомиссии";
		КонецЕсли;
		Если ЗадатьСпособИГрафикПогашения Тогда
			СписокСвойств = СписокСвойств + ", СпособПогашения, ДатаВозникновенияДолга, СуммаДолга, СрокМесяцев, ПлановаяДатаПогашения";
			СписокСвойств = СписокСвойств + ", ДнейВГоду, ДеньМесяцаДляРасчетов, НеПересчитыватьПриРедактировании, КошелекДляПогашения, ФинансоваяЦель";
			//СписокСвойств = СписокСвойств + ", ФинансоваяЦель";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаписьПараметров, ПараметрыГрафика, Сред(СписокСвойств, 3));
		ЗаписьПараметров.Долг                    = ТекущийОбъект.Ссылка;
		ЗаписьПараметров.ШаблонОперации          = СсылкаНаШаблон;
		ЗаписьПараметров.ДатаВозникновенияДолга  = ?(ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга), ПараметрыГрафика.ДатаВозникновенияДолга, НачалоМесяца(ТекущаяДатаСеанса()));
		ЗаписьПараметров.СпособПогашения = ?(ЗначениеЗаполнено(ЗаписьПараметров.СпособПогашения), ЗаписьПараметров.СпособПогашения, Перечисления.СпособыПогашенияКредита.Вручную);
		ЗаписьПараметров.Записать();
		
		Если ЗаписьПараметров.СпособПогашения = Перечисления.СпособыПогашенияКредита.РазовыйПлатеж Тогда
			
			// Шаблоном является сама операция. При этом расписания не требуется
			ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
			ЗаписьДаты.ВладелецРасписания  = СсылкаНаШаблон;
			ЗаписьДаты.ПлановаяОперация    = СсылкаНаШаблон;
			ЗаписьДаты.АктуальнаяДата      = ПараметрыГрафика.ПлановаяДатаПогашения;
			ЗаписьДаты.ПлановаяДата        = ЗаписьДаты.АктуальнаяДата;
			ЗаписьДаты.ВалютаДохода        = ТекущийОбъект.Валюта;
			ЗаписьДаты.ВалютаРасхода       = ТекущийОбъект.Валюта;
			Если ЭтоВозвраЗайма Тогда
				ЗаписьДаты.СуммаДохода   = ПараметрыГрафика.СуммаДолга + СуммаПроцентовДляРазовогоПлатежа;
			Иначе
				ЗаписьДаты.СуммаРасхода  = ПараметрыГрафика.СуммаДолга + СуммаПроцентовДляРазовогоПлатежа;
			КонецЕсли;
			ЗаписьДаты.СуммаДолга        = ПараметрыГрафика.СуммаДолга;
			ЗаписьДаты.СуммаПроцентов    = СуммаПроцентовДляРазовогоПлатежа;
			ЗаписьДаты.Записать(Истина);
			
		Иначе
			
			// Сохраняем расписание
			ЗаписьРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
			ЗаписьРасписания.ВладелецРасписания   = СсылкаНаШаблон;
			ЗаписьРасписания.ПорядокПериодов      = 0;
			ЗаписьРасписания.ПорядокДнейНедели    = 0;
			ЗаписьРасписания.ШаблонДнейНедели     = "";
			ЗаписьРасписания.ШаблонЧиселМесяца    = "";
			ЗаписьРасписания.ШаблонНомеровМесяцев = "";
			//Если ПроизвольныеДатыРасписания.Количество() <> 0 Тогда
			Если ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
				ЗаписьРасписания.ДатаНачалаРасписания    = ?(ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга), ПараметрыГрафика.ДатаВозникновенияДолга, НачалоМесяца(ТекущаяДатаСеанса()));
				ЗаписьРасписания.ДатаОкончанияРасписания = КонецМесяца(ПараметрыГрафика.ПлановаяДатаПогашения);
				ЗаписьРасписания.Периодичность      = Перечисления.СпособыПовторовСобытий.ВУказанныеДаты;
			Иначе
				ЗаписьРасписания.Периодичность      = Перечисления.СпособыПовторовСобытий.НеИспользовать;
			КонецЕсли;
			ЗаписьРасписания.ОписаниеРасписания = ПлановыеОперацииКлиентСервер.ПредставлениеРасписания(ЗаписьРасписания, ПроизвольныеДатыРасписания); 
			ЗаписьРасписания.СуммаДолга     = ПараметрыГрафика.СуммаДолга;
			ЗаписьРасписания.СуммаДохода    = 0;
			ЗаписьРасписания.СуммаРасхода   = 0;
			ЗаписьРасписания.ВалютаДохода   = ТекущийОбъект.Валюта;
			ЗаписьРасписания.ВалютаРасхода  = ТекущийОбъект.Валюта;
			ЗаписьРасписания.Записать(Истина);
			
			ПлановаяОперация = Неопределено;
			
			// Сохраняем даты расписания
			Если ПроизвольныеДатыРасписания.Количество() <> 0 Тогда
				ТаблицаДат = ПроизвольныеДатыРасписания.Выгрузить();
				ТаблицаДат.ЗаполнитьЗначения(СсылкаНаШаблон, "ВладелецРасписания");
				НаборДат = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
				НаборДат.Отбор.ВладелецРасписания.Установить(СсылкаНаШаблон);
				НаборДат.Загрузить(ТаблицаДат);
				НаборДат.Записать(Истина);
				ПлановыеОперации.ОбновитьСуммыВДатахРасписания(ЗаписьРасписания);
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Заполняем Шаблон платежа
		Если ЭтоВозвраЗайма Тогда
			
			// Возврат выданного займа
			//ШаблонПлатежа = Документы.НамВернулиДолг.СоздатьДокумент();
			ШаблонПлатежа.ЭтоШаблон            = ЗаписьПараметров.СпособПогашения <> Перечисления.СпособыПогашенияКредита.РазовыйПлатеж;
			ШаблонПлатежа.Дата                 = ПараметрыГрафика.ПлановаяДатаПогашения;
			ШаблонПлатежа.ОписаниеОперации     = НСтр("ru='Возврат займа %1'");
			ШаблонПлатежа.ОписаниеОперации     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПлатежа.ОписаниеОперации, "<" + ТекущийОбъект.Наименование + ">");
			ШаблонПлатежа.ВалютаДолга          = ТекущийОбъект.Валюта;
			ШаблонПлатежа.Кошелек              = ПараметрыГрафика.КошелекДляПогашения;
			ШаблонПлатежа.ВалютаПолучено       = ?(ЗначениеЗаполнено(ШаблонПлатежа.Кошелек.Валюта), ШаблонПлатежа.Кошелек.Валюта, ВалютаУчета);
			Если ШаблонПлатежа.Кошелек.ИспользоватьДляНакоплений Тогда
				ШаблонПлатежа.ФинансоваяЦель   = Справочники.ФинансовыеЦели.ОбщиеНакопления;
			Иначе
				ШаблонПлатежа.ФинансоваяЦель   = Справочники.ФинансовыеЦели.ПустаяСсылка();
			КонецЕсли;
			ШаблонПлатежа.Долг                 = ТекущийОбъект.Ссылка;
			ШаблонПлатежа.Контакт              = ТекущийОбъект.Контакт;
			
			Если ЗадатьПроцентыИКомиссии Тогда
				// !!! Тип ШаблонПлатежа.СтатьяДоходовПоПроцентам должен содержать СтатьиДоходов
				//Если ПараметрыГрафика.ПроцентнаяСтавка <> 0 Тогда
				//	ШаблонПлатежа.СтатьяДоходовПоПроцентам = ПараметрыГрафика.СтатьяДляУчетаПроцентов;
				//КонецЕсли;
				Если ПараметрыГрафика.СуммаЕжемесячнойКомиссии <> 0 Тогда
					СтрокаРасхода = ШаблонПлатежа.ДополнительныеРасходы.Добавить();
					СтрокаРасхода.СуммаРасхода = ПараметрыГрафика.СуммаЕжемесячнойКомиссии;
					СтрокаРасхода.СтатьяРасхода = ПараметрыГрафика.СтатьяЕжемесячнойКомиссии;
					СтрокаРасхода.КошелекРасхода = ШаблонПлатежа.Кошелек;
					СтрокаРасхода.ФинансоваяЦель = ШаблонПлатежа.ФинансоваяЦель;
				КонецЕсли; 
			КонецЕсли;
			
			Если ЗадатьСпособИГрафикПогашения Тогда
				Если ЭтоРазовыйПлатеж Тогда
					ШаблонПлатежа.СуммаВозвратаДолга = ПараметрыГрафика.СуммаДолга;
					ШаблонПлатежа.СуммаПроцентов = ?(ЗадатьПроцентыИКомиссии, СуммаПроцентовДляРазовогоПлатежа, 0);
				Иначе
					СуммаКВозврату = ?(ЗначениеЗаполнено(ДатаНачальногоОстатка) И ЗначениеЗаполнено(ОстатокДолгаНаНачало), 
							ОстатокДолгаНаНачало, ПараметрыГрафика.СуммаДолга);
					ШаблонПлатежа.СуммаВозвратаДолга = ?(ПроизвольныеДатыРасписания.Количество() = 0, СуммаКВозврату, ПроизвольныеДатыРасписания.Итог("ВсегоКУплате") / ПроизвольныеДатыРасписания.Количество());
					ШаблонПлатежа.СуммаПроцентов = ?(ПроизвольныеДатыРасписания.Количество() = 0, 0, ПроизвольныеДатыРасписания.Итог("СуммаПроцентов") / ПроизвольныеДатыРасписания.Количество());
				КонецЕсли;
			КонецЕсли;
			
			Если ШаблонПлатежа.ВалютаДолга = ШаблонПлатежа.ВалютаПолучено Тогда
				ШаблонПлатежа.СуммаПолучено    = ШаблонПлатежа.СуммаВозвратаДолга;
			Иначе
				КурсДолга    = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ШаблонПлатежа.ВалютаДолга,    ПараметрыГрафика.ПлановаяДатаПогашения, ВалютаУчета);
				КурсКошелька = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ШаблонПлатежа.ВалютаПолучено, ПараметрыГрафика.ПлановаяДатаПогашения, ВалютаУчета);
				ШаблонПлатежа.СуммаПолучено    = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ШаблонПлатежа.СуммаВозвратаДолга,
						ШаблонПлатежа.ВалютаДолга, ШаблонПлатежа.ВалютаПолучено, КурсДолга.Курс, КурсКошелька.Курс, КурсДолга.Кратность, КурсКошелька.Кратность);
				ШаблонПлатежа.СуммаПроцентов    = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ШаблонПлатежа.СуммаПроцентов,
						ШаблонПлатежа.ВалютаДолга, ШаблонПлатежа.ВалютаПолучено, КурсДолга.Курс, КурсКошелька.Курс, КурсДолга.Кратность, КурсКошелька.Кратность);
				Для Каждого СтрокаДопРасхода Из ШаблонПлатежа.ДополнительныеРасходы Цикл
					СтрокаДопРасхода.СуммаРасхода    = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДопРасхода.СуммаРасхода,
							ШаблонПлатежа.ВалютаДолга, ШаблонПлатежа.ВалютаПолучено, КурсДолга.Курс, КурсКошелька.Курс, КурсДолга.Кратность, КурсКошелька.Кратность);
				КонецЦикла;  
			КонецЕсли;
			ШаблонПлатежа.Записать();
			
		Иначе
			
			// Погашение полученного кредита
			//ШаблонПлатежа = Документы.МыВернулиДолг.СоздатьДокумент();
			ШаблонПлатежа.ЭтоШаблон                     = ЗаписьПараметров.СпособПогашения <> Перечисления.СпособыПогашенияКредита.РазовыйПлатеж;
			ШаблонПлатежа.Дата                          = ПараметрыГрафика.ПлановаяДатаПогашения;
			ШаблонПлатежа.ОписаниеОперации              = НСтр("ru='Погашение кредита %1'");
			ШаблонПлатежа.ОписаниеОперации              = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПлатежа.ОписаниеОперации, "<" + ТекущийОбъект.Наименование + ">");
			ШаблонПлатежа.ВалютаКредита                 = ТекущийОбъект.Валюта;
			ШаблонПлатежа.Кошелек                       = ПараметрыГрафика.КошелекДляПогашения;
			ШаблонПлатежа.ВалютаКошелька                = ?(ЗначениеЗаполнено(ШаблонПлатежа.Кошелек.Валюта), ШаблонПлатежа.Кошелек.Валюта, ВалютаУчета);
			Если ШаблонПлатежа.Кошелек.ИспользоватьДляНакоплений Тогда
				ШаблонПлатежа.ФинансоваяЦель = Справочники.ФинансовыеЦели.ОбщиеНакопления;
			Иначе
				ШаблонПлатежа.ФинансоваяЦель = Справочники.ФинансовыеЦели.ПустаяСсылка();
			КонецЕсли;
			ШаблонПлатежа.Кредит                        = ТекущийОбъект.Ссылка;
			ШаблонПлатежа.Кредитор                      = ТекущийОбъект.Контакт;
			
			Если ЗадатьПроцентыИКомиссии Тогда
				Если ПараметрыГрафика.ПроцентнаяСтавка <> 0 Тогда
					ШаблонПлатежа.СтатьяРасходовПоПроцентам = ПараметрыГрафика.СтатьяДляУчетаПроцентов;
				КонецЕсли;
				Если ПараметрыГрафика.СуммаЕжемесячнойКомиссии <> 0 Тогда
					ШаблонПлатежа.ВыплаченоКомиссии  = ПараметрыГрафика.СуммаЕжемесячнойКомиссии;
					ШаблонПлатежа.СтатьяРасходовПоКомиссии  = ПараметрыГрафика.СтатьяЕжемесячнойКомиссии;
				КонецЕсли; 
			КонецЕсли;
			
			Если ЗадатьСпособИГрафикПогашения Тогда
				Если ЭтоРазовыйПлатеж Тогда
					ШаблонПлатежа.ВыплаченоКредита   = ПараметрыГрафика.СуммаДолга;
					ШаблонПлатежа.ВыплаченоПроцентов = СуммаПроцентовДляРазовогоПлатежа;
				Иначе
					СуммаКВозврату = ?(ЗначениеЗаполнено(ДатаНачальногоОстатка) И ЗначениеЗаполнено(ОстатокДолгаНаНачало), 
							ОстатокДолгаНаНачало, ПараметрыГрафика.СуммаДолга);
					ШаблонПлатежа.ВыплаченоКредита   = ?(ПроизвольныеДатыРасписания.Количество() = 0, СуммаКВозврату, ПроизвольныеДатыРасписания.Итог("ВсегоКУплате") / ПроизвольныеДатыРасписания.Количество());
					ШаблонПлатежа.ВыплаченоПроцентов = ?(ПроизвольныеДатыРасписания.Количество() = 0, 0, ПроизвольныеДатыРасписания.Итог("СуммаПроцентов") / ПроизвольныеДатыРасписания.Количество());
				КонецЕсли;
			КонецЕсли;
			
			Если ШаблонПлатежа.ВалютаКредита = ШаблонПлатежа.ВалютаКошелька Тогда
				ШаблонПлатежа.СуммаКредитаВВалютеКредита    = ШаблонПлатежа.ВыплаченоКредита;
			Иначе
				КурсДолга    = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ШаблонПлатежа.ВалютаКредита,  ПараметрыГрафика.ПлановаяДатаПогашения, ВалютаУчета);
				КурсКошелька = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ШаблонПлатежа.ВалютаКошелька, ПараметрыГрафика.ПлановаяДатаПогашения, ВалютаУчета);
				ШаблонПлатежа.СуммаКредитаВВалютеКредита    = ШаблонПлатежа.ВыплаченоКредита;
				ШаблонПлатежа.ВыплаченоКредита = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(ШаблонПлатежа.СуммаКредитаВВалютеКредита,
						ШаблонПлатежа.ВалютаКредита, ШаблонПлатежа.ВалютаКошелька, КурсДолга.Курс, КурсКошелька.Курс, КурсДолга.Кратность, КурсКошелька.Кратность);
			КонецЕсли;
			ШаблонПлатежа.Записать();
			
		КонецЕсли;
		СсылкаНаШаблон = ШаблонПлатежа.Ссылка;
		ПараметрыЗаписи.Вставить("НовыйШаблонПлатежа", ШаблонПлатежа.Ссылка);
		ПараметрыЗаписи.Вставить("НовыйШаблонПлатежаПредставление", ШаблонПлатежа.ОписаниеОперации);
		
	КонецЕсли;
	
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Записан элемент справочника", Новый Структура("ИмяСправочника,Ссылка,ВладелецФормы", 
			"Долги", Объект.Ссылка, ?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено)));
	
	Если ПараметрыЗаписи.Свойство("НовыйВводОстатка") Тогда
		Оповестить("Записана операция", Новый Структура("Дата, ВидДокумента, Ссылка, ЭтоШаблон, ВладелецФормы", 
				ДатаНачальногоОстатка, "ВводИзменениеОстатка", Неопределено, ложь, Неопределено));
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создан ввод остатка при записи'") + " " + Объект.Ссылка + ":", 
			ПолучитьНавигационнуюСсылку(ПараметрыЗаписи.НовыйВводОстатка), 
			ПараметрыЗаписи.НовыйВводОстаткаПредставление);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("НовыйШаблонПлатежа") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создан шаблон операции при записи'") + " " + Объект.Ссылка + ":", 
			ПолучитьНавигационнуюСсылку(ПараметрыЗаписи.НовыйШаблонПлатежа), 
			ПараметрыЗаписи.НовыйШаблонПлатежаПредставление);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтактПриИзменении(Элемент)
	
	РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВидДолгаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВидДолга) Тогда
		ВидДолга = ВидДолгаВзаиморасчеты;
	КонецЕсли;
	
	Объект.ИспользоватьДляУчетаВзятыхДолгов   = (ВидДолга = ВидДолгаВзаиморасчеты ИЛИ ВидДолга = ВидДолгаКредит);
	Объект.ИспользоватьДляУчетаВыданныхДолгов = (ВидДолга = ВидДолгаВзаиморасчеты ИЛИ ВидДолга = ВидДолгаЗаем);
	
	РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	
	Если ВидДолга = ВидДолгаВзаиморасчеты Тогда
		ЗадатьПроцентыИКомиссии = Ложь;
		ЗадатьСпособИГрафикПогашения = Ложь;
	КонецЕсли; 
	
	ЗаполнитьСписокШаговПомощника(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий", Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДолгаНаНачалоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОстатокДолгаНаНачало) И (НЕ ЗадатьСпособИГрафикПогашения 
			ИЛИ ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж")) Тогда
		ПараметрыГрафика.СуммаДолга = ОстатокДолгаНаНачало;
		РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачальногоОстаткаПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения 
			И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") 
			И (НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) ИЛИ ДатаНачальногоОстатка < ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
		ПараметрыГрафика.ДатаВозникновенияДолга = ДатаНачальногоОстатка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачальногоОстаткаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДатаНачальногоОстатка) Тогда
		ДатаНачальногоОстатка = КонецМесяца(ДобавитьМесяц(ТекущаяДатаКлиентСервер(), -1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьПроцентыИКомиссииПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	//ЗаполнитьСписокШаговПомощника(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаПроцентнаяСтавкаПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьСпособИГрафикПогашенияПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения 
			И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") 
			И (НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) ИЛИ ДатаНачальногоОстатка < ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
		ПараметрыГрафика.ДатаВозникновенияДолга = ДатаНачальногоОстатка;
	КонецЕсли;
	
	Если ЗадатьСпособИГрафикПогашения И ЗначениеЗаполнено(ОстатокДолгаНаНачало) Тогда
		ПараметрыГрафика.СуммаДолга = ОстатокДолгаНаНачало;
	КонецЕсли;
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	
	ЗаполнитьСписокШаговПомощника(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаСпособПогашенияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж");
	КонецЕсли;
	
	Если ЗадатьСпособИГрафикПогашения И ЗначениеЗаполнено(ОстатокДолгаНаНачало) Тогда
		ПараметрыГрафика.СуммаДолга = ОстатокДолгаНаНачало;
		РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	КонецЕсли;
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	Если ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную") Тогда
		ПараметрыГрафика.НеПересчитыватьПриРедактировании = Истина;
	КонецЕсли; 
	
	ЗаполнитьСписокШаговПомощника(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаСуммаДолгаПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПроизвольныеДатыРасписания) Тогда
		// Пересчитаем остатки
		ОстатокДолга = ПараметрыГрафика.СуммаДолга;
		Для каждого СтрокаГрафика Из ПроизвольныеДатыРасписания Цикл
			СтрокаГрафика.ОстатокНаНачало = ОстатокДолга;
			СтрокаГрафика.ОстатокНаКонец  = СтрокаГрафика.ОстатокНаНачало - СтрокаГрафика.СуммаДолга;
			ОстатокДолга = СтрокаГрафика.ОстатокНаКонец;
		КонецЦикла;
	КонецЕсли;
	
	РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаДатаВозникновенияДолгаПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	РаботаСФормамиСправочниковКлиентСервер.ОбслужитьАвтоНаименованиеДолга(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаДатаВозникновенияДолгаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
		ПараметрыГрафика.ДатаВозникновенияДолга = ТекущаяДатаКлиентСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаПлановаяДатаПогашенияПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаПлановаяДатаПогашенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ПлановаяДатаПогашения) Тогда
		ПараметрыГрафика.ПлановаяДатаПогашения = ТекущаяДатаКлиентСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаКошелекДляПогашенияПриИзменении(Элемент)
	
	КошелекДляНакоплений = ЭтоКошелекДляНакоплений(ПараметрыГрафика.КошелекДляПогашения);
	Если КошелекДляНакоплений И НЕ ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления");
	ИначеЕсли НЕ КошелекДляНакоплений И ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = Неопределено;
	КонецЕсли; 
	Элементы.ПараметрыГрафикаФинансоваяЦель.Доступность = КошелекДляНакоплений;
	
КонецПроцедуры

#Область ПрикрепленныеФайлы

&НаКлиенте
Процедура ПредставлениеТекущегоФайлаНажатие(Элемент, СтандартнаяОбработка)
	ПрикрепленныеФайлыКлиент.ОбработчикНажатияНаТекущийФайл(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ФайлКнопкаНавигацииНажатие(Элемент)
	ПрикрепленныеФайлыКлиент.ФайлКнопкаНавигацииНажатие(ЭтотОбъект, Элемент);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПроизвольныеДатыРасписания

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПлановаяДатаПриИзменении(Элемент)
	
	ПересчитатьГрафикСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияСуммаДолгаПриИзменении(Элемент)
	
	ПроизвольныеДатыРасписанияСуммаДолгаПриИзмененииСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияСуммаПроцентовПриИзменении(Элемент)
	
	ПроизвольныеДатыРасписанияСуммаПроцентовПриИзмененииСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияСуммаКомиссииПриИзменении(Элемент)
	
	СуммаКомиссии = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные.СуммаКомиссии;
	Для Каждого ВыделеннаяСтрока Из Элементы.ПроизвольныеДатыРасписания.ВыделенныеСтроки Цикл
		СтрокаОперации = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаОперации.СуммаКомиссии = СуммаКомиссии;
		СтрокаОперации.ВсегоКУплате = СтрокаОперации.СуммаДолга + СтрокаОперации.СуммаПроцентов + СтрокаОперации.СуммаКомиссии
	КонецЦикла; 
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПропуститьПриИзменении(Элемент)
	
	СтрокаОперации = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если СтрокаОперации = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Пропустить = СтрокаОперации.Пропустить;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПроизвольныеДатыРасписания.ВыделенныеСтроки Цикл
		СтрокаОперации = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаОперации.Пропустить = Пропустить;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаОперации = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		СтрокаОперации.НомерСтроки = ПроизвольныеДатыРасписания.Количество();
		Если Копирование Тогда
			СтрокаОперации.ОстатокНаКонец  = 0;
			СтрокаОперации.ОстатокНаНачало = 0;
			Если ЗначениеЗаполнено(СтрокаОперации.ПлановаяДата) Тогда
				СтрокаОперации.ПлановаяДата = ДобавитьМесяц(СтрокаОперации.ПлановаяДата, 1);
			КонецЕсли; 
		КонецЕсли; 
		ПересчитатьГрафикСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПослеУдаления(Элемент)
	
	Элементы.ПроизвольныеДатыРасписанияВсегоКУплате.ТекстПодвала    = Формат(ПроизвольныеДатыРасписания.Итог("ВсегоКУплате"), "ЧДЦ=2; ЧГ=3,0"); 
	Элементы.ПроизвольныеДатыРасписанияСуммаДолга.ТекстПодвала      = Формат(ПроизвольныеДатыРасписания.Итог("СуммаДолга"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаПроцентов.ТекстПодвала  = Формат(ПроизвольныеДатыРасписания.Итог("СуммаПроцентов"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаКомиссии.ТекстПодвала   = Формат(ПроизвольныеДатыРасписания.Итог("СуммаКомиссии"), "ЧДЦ=2; ЧГ=3,0") ;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПересчитатьГрафик(Команда)
	
	Если ПроизвольныеДатыРасписания.Количество() > 0 
			И ПроизвольныеДатыРасписания.Итог("ВсегоКУплате") > 0 
			И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную") Тогда
			
		ТекстВопроса = НСтр("ru = 'График платежа будет полностью заполнен новыми расчетными значениями. 
			|Пересчитать график?'");
		ОбработчикОтвета = Новый ОписаниеОповещения("ПересчитатьГрафикЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
	Иначе
		ОбновитьВесьГрафик();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраница(Команда)
	
	ПоказатьСтраницу(ЭтаФорма, -1);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраница(Команда)
	
	Если СтраницаЗаполненаБезОшибок() Тогда
		ПоказатьСтраницу(ЭтаФорма, 1);
		ПриСменеСтраницыПомощника();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	ВидДолгаЗаем          = Перечисления.ТипыДолгов.ВыданныйЗаем;
	ВидДолгаКредит        = Перечисления.ТипыДолгов.ПолученныйКредит;
	ВидДолгаВзаиморасчеты = Перечисления.ТипыДолгов.ВзаимныйРасчет;
	
	СкрыватьОстатокНаНачало = Параметры.СкрыватьОстатокНаНачало;
	
	// Подготовка редактируемых объектов
	Если Параметры.Копирование И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.Наименование = "Копия: " + Параметры.ЗначениеКопирования.Наименование;
		СкопироватьЗначенияРегистров(Параметры.ЗначениеКопирования);
	КонецЕсли; 
	Если Параметры.ЗначенияЗаполнения.Свойство("ИспользоватьДляУчетаВыданныхДолгов") 
		 ИЛИ Параметры.ЗначенияЗаполнения.Свойство("ИспользоватьДляУчетаВзятыхДолгов") Тогда
		Параметры.ЗначенияЗаполнения.Свойство("ИспользоватьДляУчетаВыданныхДолгов", Объект.ИспользоватьДляУчетаВыданныхДолгов);
		Параметры.ЗначенияЗаполнения.Свойство("ИспользоватьДляУчетаВзятыхДолгов",   Объект.ИспользоватьДляУчетаВзятыхДолгов);
	КонецЕсли;
	Объект.Активность = Истина;
	
	Если Параметры.Свойство("ТекстЗаполнения") Тогда
		Объект.Наименование = Параметры.ТекстЗаполнения;
	КонецЕсли;
	
	Если Объект.ИспользоватьДляУчетаВзятыхДолгов И Объект.ИспользоватьДляУчетаВыданныхДолгов Тогда
		ВидДолга = ВидДолгаВзаиморасчеты;
	ИначеЕсли Объект.ИспользоватьДляУчетаВыданныхДолгов Тогда
		ВидДолга = ВидДолгаЗаем;
	Иначе
		ВидДолга = ВидДолгаКредит;
	КонецЕсли; 
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ПараметрыГрафика") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыГрафика, Параметры.ЗначенияЗаполнения.ПараметрыГрафика);
	КонецЕсли;
	
	ДоступностьКонтакта = НЕ СкрыватьОстатокНаНачало ИЛИ НЕ ЗначениеЗаполнено(Объект.Контакт);
	
	// Установим значения по умолчанию
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		ПараметрыГрафика.СпособПогашения = Перечисления.СпособыПогашенияКредита.РазовыйПлатеж;
	КонецЕсли;
	Если ПараметрыГрафика.СрокМесяцев = 0 Тогда
		ПараметрыГрафика.СрокМесяцев = 1;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
		ПараметрыГрафика.ДатаВозникновенияДолга = День(ТекущаяДатаКлиентСервер());
	КонецЕсли; 
	Если ПараметрыГрафика.ДеньМесяцаДляРасчетов = 0 Тогда
		ПараметрыГрафика.ДеньМесяцаДляРасчетов = День(ТекущаяДатаКлиентСервер());
	КонецЕсли; 
	
	РаботаСФормамиСправочниковКлиентСервер.СформироватьСписокВыбораНаименования(Элементы.НаименованиеДолга, Объект, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Объект.Наименование = Элементы.НаименованиеДолга.СписокВыбора[0];
	КонецЕсли;

	// Заполнение списка шагов
	ЗаполнитьСписокШаговПомощника(ЭтаФорма);
	
	КошелекДляНакоплений = ЭтоКошелекДляНакоплений(ПараметрыГрафика.КошелекДляПогашения);
	Если КошелекДляНакоплений И НЕ ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления");
	ИначеЕсли НЕ КошелекДляНакоплений И ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = Неопределено;
	КонецЕсли; 
	
	// Настройка внешнего вида
	УправлениеФормой(ЭтаФорма);
	ПоказатьСтраницу(ЭтаФорма, 0);

	// Общие настройки форм элементов справочников
	РаботаСФормамиСправочников.ФормаЭлементаПриСозданииНаСервере(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокШаговПомощника(Форма)

	СписокШаговПомощника = Форма.СписокШаговПомощника;
	
	// Заполним список шагов
	СписокШаговПомощника.Очистить();
	СписокШаговПомощника.Добавить("СтраницаОсновныеСведения", НСтр("ru = 'Шаг %1 из %2: Основные сведения о долге'"));
	//Если НЕ Форма.СкрыватьОстатокНаНачало Тогда
	//	СписокШаговПомощника.Добавить("СтраницаОстатокДолга", НСтр("ru = 'Шаг %1 из %2: Ввод начального остатка'"));
	//КонецЕсли;
	Если Форма.ВидДолга <> Форма.ВидДолгаВзаиморасчеты Тогда
		СписокШаговПомощника.Добавить("СтраницаУсловияПогашения", НСтр("ru = 'Шаг %1 из %2: Условия погашения %3'"));
	КонецЕсли; 
	Если Форма.ЗадатьСпособИГрафикПогашения
			И ЗначениеЗаполнено(Форма.ПараметрыГрафика.СпособПогашения)
			И Форма.ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж")
			Тогда
		СписокШаговПомощника.Добавить("СтраницаГрафикПлатежей", НСтр("ru = 'Шаг %1 из %2: График погашения %3'"));
	КонецЕсли; 
	
	// Скорректируем заголовки
	КоличествоШагов = СписокШаговПомощника.Количество();
	
	//Если Форма.ВидДолга = Форма.ВидДолгаВзаиморасчеты Тогда
	//	ВидДолгаРодительныйПадеж = НСтр("ru = 'долга'");
	//ИначеЕсли Форма.ВидДолга = Форма.ВидДолгаЗаем Тогда
	//	ВидДолгаРодительныйПадеж = НСтр("ru = 'выданного займа'");
	//Иначе //Если ВидДолга = ВидДолгаКредит Тогда
	//	ВидДолгаРодительныйПадеж = НСтр("ru = 'полученного кредита'");
	//КонецЕсли; 
	ВидДолгаРодительныйПадеж = НСтр("ru = 'долга'");
	
	Для каждого Элемент Из СписокШаговПомощника Цикл
		Элемент.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элемент.Представление, 
			СписокШаговПомощника.Индекс(Элемент) + 1, 
			КоличествоШагов, 
			ВидДолгаРодительныйПадеж);
	КонецЦикла; 
	
	
	ПоказатьСтраницу(Форма, 0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект                      = Форма.Объект;
	Элементы                    = Форма.Элементы;
	ПараметрыГрафика            = Форма.ПараметрыГрафика;
	ПроизвольныеДатыРасписания  = Форма.ПроизвольныеДатыРасписания;
	
	//Заголовок = НСтр("ru = '%1 (создание)'");
	//Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, Форма.Объект.Наименование);
	
	// СтраницаОсновныеСведения
	Элементы.Контакт.Доступность = Форма.ДоступностьКонтакта;
	Элементы.ВидДолга.Доступность = НЕ Форма.СкрыватьОстатокНаНачало;
	
	// ГруппаОстатокДолга
	Элементы.ГруппаОстатокДолга.Видимость = НЕ Форма.СкрыватьОстатокНаНачало;
	Элементы.ДатаНачальногоОстатка.ОтметкаНезаполненного = Ложь;
	Элементы.ДатаНачальногоОстатка.АвтоотметкаНезаполненного = ЗначениеЗаполнено(Форма.ОстатокДолгаНаНачало);
	Если Объект.ИспользоватьДляУчетаВыданныхДолгов = Объект.ИспользоватьДляУчетаВзятыхДолгов Тогда
		Элементы.ПодсказкаПоОстатку.Заголовок = НСтр(
		"ru = 'Положительный остаток - контакт должен нам, 
        |отрицательный - мы должны контакту'");
	Иначе
		Элементы.ПодсказкаПоОстатку.Заголовок = "";
	КонецЕсли;
	
	// СтраницаУсловияПогашения
	Элементы.ЗадатьПроцентыИКомиссии.Доступность = (Объект.ИспользоватьДляУчетаВзятыхДолгов <> Объект.ИспользоватьДляУчетаВыданныхДолгов);
	Элементы.ГруппаПроценты.Доступность = Форма.ЗадатьПроцентыИКомиссии;
	Элементы.ГруппаКомиссии.Доступность = Форма.ЗадатьПроцентыИКомиссии;
	Элементы.ПараметрыГрафикаСтатьяДляУчетаПроцентов.Доступность    = ЗначениеЗаполнено(ПараметрыГрафика.ПроцентнаяСтавка);
	Элементы.ПараметрыГрафикаСтатьяЕжемесячнойКомиссии.Доступность  = ЗначениеЗаполнено(ПараметрыГрафика.СуммаЕжемесячнойКомиссии);
	
	Если Форма.ВидДолга = Форма.ВидДолгаЗаем Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходов");
	ИначеЕсли Форма.ВидДолга = Форма.ВидДолгаКредит Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов");
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов;
	КонецЕсли; 
	Элементы.ПараметрыГрафикаСтатьяДляУчетаПроцентов.ОграничениеТипа   = ОписаниеТипов;
	Элементы.ПараметрыГрафикаСтатьяЕжемесячнойКомиссии.ОграничениеТипа = ОписаниеТипов;
	
	Элементы.ПараметрыГрафикаСпособПогашения.Доступность     = Форма.ЗадатьСпособИГрафикПогашения;
	Элементы.ПараметрыГрафикаКошелекДляПогашения.Доступность = Форма.ЗадатьСпособИГрафикПогашения;
	Элементы.ГруппаУсловияРасчетаГрафика.Доступность         = Форма.ЗадатьСпособИГрафикПогашения;
	Элементы.ПараметрыГрафикаФинансоваяЦель.Доступность      = Форма.ЗадатьСпособИГрафикПогашения И Форма.КошелекДляНакоплений;
	
	Если Форма.ВидДолга = Форма.ВидДолгаЗаем Тогда
		Элементы.ПараметрыГрафикаКошелекДляПогашения.Заголовок = НСтр("ru = 'В кошелек'");
		//СуммаДолгаЗаголовок = НСтр("ru = 'Сумма займа'");
	ИначеЕсли Форма.ВидДолга = Форма.ВидДолгаКредит Тогда
		Элементы.ПараметрыГрафикаКошелекДляПогашения.Заголовок = НСтр("ru = 'Из кошелька'");
		//СуммаДолгаЗаголовок = НСтр("ru = 'Сумма кредита'");
	Иначе
		Элементы.ПараметрыГрафикаКошелекДляПогашения.Заголовок = НСтр("ru = 'Кошелек погашения'");
		//СуммаДолгаЗаголовок = НСтр("ru = 'Сумма долга'");
	КонецЕсли;
	
	Если ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница   = Элементы.СтраницаРазовыйПлатеж;
		Элементы.ГруппаДатаВозникновенияДолгаПояснение.Видимость = Форма.ЗадатьПроцентыИКомиссии;
		Элементы.ГруппаСуммаПроцентовВалюта.Видимость            = Форма.ЗадатьПроцентыИКомиссии;
		//Элементы.ПараметрыГрафикаСуммаДолга1.Заголовок           = СуммаДолгаЗаголовок;
		Элементы.ГруппаСуммаВалютаДолга1.Доступность             = НЕ Форма.СкрыватьОстатокНаНачало;
	
		Если Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВыданныйЗаем") Тогда
			Элементы.ПараметрыГрафикаДатаВозникновенияДолга1.Заголовок = НСтр("ru = 'Долг выдан'");
			Элементы.ПараметрыГрафикаПлановаяДатаПогашения.Заголовок   = НСтр("ru = 'Когда вернут'");
		ИначеЕсли Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ПолученныйКредит") Тогда
			Элементы.ПараметрыГрафикаДатаВозникновенияДолга1.Заголовок = НСтр("ru = 'Долг получен'");
			Элементы.ПараметрыГрафикаПлановаяДатаПогашения.Заголовок   = НСтр("ru = 'Когда верну'");
		Иначе
			Элементы.ПараметрыГрафикаДатаВозникновенияДолга1.Заголовок = НСтр("ru = 'Дата возникновения долга'");
			Элементы.ПараметрыГрафикаПлановаяДатаПогашения.Заголовок   = НСтр("ru = 'Плановая дата погашения'");
		КонецЕсли;
		
	ИначеЕсли ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Аннуитет")
			ИЛИ ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.ДифференцированныеПлатежи") Тогда
		
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница = Элементы.СтраницаЕжемесячныеПлатежи;
		//Элементы.ПараметрыГрафикаСуммаДолга.Заголовок          = СуммаДолгаЗаголовок;
		Элементы.ГруппаСуммаВалютаДолга.Доступность            = НЕ Форма.СкрыватьОстатокНаНачало;
		
	ИначеЕсли ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную") Тогда
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница = Элементы.СтраницаПроизвольныеПлатежи;
		//Элементы.ПараметрыГрафикаСуммаДолга2.Заголовок         = СуммаДолгаЗаголовок;
		Элементы.ГруппаСуммаВалютаДолга2.Доступность           = НЕ Форма.СкрыватьОстатокНаНачало;
		
	Иначе
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница = Элементы.СтраницаУсловияРасчетаГрафикаПустая;
		
	КонецЕсли;
	
	// СтраницаГрафикПлатежей
	Элементы.ПроизвольныеДатыРасписанияВсегоКУплате.ТекстПодвала    = Формат(ПроизвольныеДатыРасписания.Итог("ВсегоКУплате"), "ЧДЦ=2; ЧГ=3,0"); 
	Элементы.ПроизвольныеДатыРасписанияСуммаДолга.ТекстПодвала      = Формат(ПроизвольныеДатыРасписания.Итог("СуммаДолга"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаПроцентов.ТекстПодвала  = Формат(ПроизвольныеДатыРасписания.Итог("СуммаПроцентов"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаКомиссии.ТекстПодвала   = Формат(ПроизвольныеДатыРасписания.Итог("СуммаКомиссии"), "ЧДЦ=2; ЧГ=3,0") ;
	
	Элементы.ПараметрыГрафикаНеПересчитыватьПриРедактировании.Доступность = ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ПоказатьСтраницу(Форма, Направление)

	Элементы = Форма.Элементы;
	СписокШагов = Форма.СписокШаговПомощника;
	СтраницыПомощника = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	ТекущийИндексШага = СписокШагов.Индекс(СписокШагов.НайтиПоЗначению(ТекущаяСтраница.Имя));
	НовыйИндексШага = ТекущийИндексШага + Направление;
	Если НовыйИндексШага < 0 ИЛИ НовыйИндексШага > СписокШагов.Количество() - 1 Тогда
		Возврат;
	КонецЕсли; 
	
	НовыйШаг = СписокШагов[НовыйИндексШага];
	Элементы.ЗаголовокШага.Заголовок = НовыйШаг.Представление;
	Элементы.СтраницыПомощника.ТекущаяСтраница = СтраницыПомощника[НовыйШаг.Значение];
	
	Элементы.ПредыдущаяСтраница.Доступность = НовыйИндексШага > 0;
	Элементы.СледующаяСтраница.Доступность = НовыйИндексШага < СписокШагов.Количество() - 1 И Форма.Объект.Ссылка.Пустая();
	
	// При установке кнопки по умолчанию проверяем текущее значение, чтобы не вызывать сервер без необходимости
	Если НЕ (Элементы.СледующаяСтраница.КнопкаПоУмолчанию = Элементы.СледующаяСтраница.Доступность) Тогда
		Элементы.СледующаяСтраница.КнопкаПоУмолчанию = Элементы.СледующаяСтраница.Доступность;
	КонецЕсли;
	Если НЕ (Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = (НЕ Элементы.СледующаяСтраница.Доступность)) Тогда
		Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = НЕ Элементы.СледующаяСтраница.Доступность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьЗначенияРегистров(ОригинальныйДолг)

	ЗаписьПараметраГрафика = РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.СоздатьМенеджерЗаписи();
	ЗаписьПараметраГрафика.Долг = ОригинальныйДолг;
	ЗаписьПараметраГрафика.Прочитать();
	Если ЗаписьПараметраГрафика.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыГрафика, ЗаписьПараметраГрафика, , "Долг, ШаблонОперации");
	КонецЕсли; 
	
	ШаблонОперации = ЗаписьПараметраГрафика.ШаблонОперации;
	
	Если ЗначениеЗаполнено(ШаблонОперации) Тогда
		
		ЗаписьРегистра = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.ВладелецРасписания = ШаблонОперации;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыРасписания, ЗаписьРегистра, "ВладелецРасписания");
		КонецЕсли; 
		
		ТаблицаДат = ПлановыеОперации.ПолучитьТаблицуПроизвольныхДатДляРедактирования(ШаблонОперации,
				ЗаписьПараметраГрафика.ДатаВозникновенияДолга, 
				КонецГода(ДобавитьМесяц(ЗаписьПараметраГрафика.ДатаВозникновенияДолга, ЗаписьПараметраГрафика.СрокМесяцев)));
		ТаблицаДат.ЗаполнитьЗначения(Неопределено, "ПлановаяОперация");
		ПроизвольныеДатыРасписания.Загрузить(ТаблицаДат);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция ПриСменеСтраницыПомощника()

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаГрафикПлатежей
		И ПроизвольныеДатыРасписания.Количество() = 0 
		И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную") Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить график платежей расчетными датами и суммами?'");
		ОбработчикОтвета = Новый ОписаниеОповещения("ПересчитатьГрафикЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли; 

КонецФункции

&НаКлиенте
Функция СтраницаЗаполненаБезОшибок(ПроверяемаяСтраница = Неопределено)

	СписокОшибок = Неопределено;
	Если ПроверяемаяСтраница = Неопределено Тогда
		ПроверяемаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	КонецЕсли;
	
	Если ПроверяемаяСтраница = Элементы.СтраницаОсновныеСведения Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидДолга) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ВидДолга", НСтр("ru='Не указана вид долга'"), "");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Валюта", НСтр("ru='Не указана валюта'"), "");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "Объект.Наименование", НСтр("ru='Не указано наименование долга'"), "");
		КонецЕсли;
		
	ИначеЕсли ПроверяемаяСтраница = Элементы.СтраницаОстатокДолга Тогда
		
		Если ЗначениеЗаполнено(ОстатокДолгаНаНачало) И НЕ ЗначениеЗаполнено(ДатаНачальногоОстатка) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ДатаНачальногоОстатка", НСтр("ru='Не указана дата остатка'"), "");
		КонецЕсли;
		
	ИначеЕсли ПроверяемаяСтраница = Элементы.СтраницаУсловияПогашения Тогда
		
		Если ЗадатьСпособИГрафикПогашения Тогда
			
			Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.СпособПогашения", НСтр("ru='Не указан способ погашения'"), "");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.КошелекДляПогашения) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.КошелекДляПогашения", НСтр("ru='Не указан кошелек погашения'"), "");
			КонецЕсли;
			
			Если (ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Аннуитет")
					ИЛИ ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.ДифференцированныеПлатежи")) Тогда
				
				Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.ДатаВозникновенияДолга", НСтр("ru='Не указано начало срока'"), "");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СрокМесяцев) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.СрокМесяцев", НСтр("ru='Не указан срок (месяцев)'"), "");
				КонецЕсли;
				Если ПараметрыГрафика.СуммаДолга = 0 Тогда
				   ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.СуммаДолга", НСтр("ru='Не указана сумма долга'"), "");
				КонецЕсли;
				Если ПараметрыГрафика.ДеньМесяцаДляРасчетов = 0 Тогда
				   ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.ДеньМесяцаДляРасчетов", НСтр("ru='Не указан день платежа'"), "");
				КонецЕсли;
					   
			ИначеЕсли ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
				
				Если ЗадатьПроцентыИКомиссии И НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.ДатаВозникновенияДолга", НСтр("ru='Не указана дата возникновения долга'"), "");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ПлановаяДатаПогашения) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПараметрыГрафика.ПлановаяДатаПогашения", НСтр("ru='Не указана дата погашения долга'"), "");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПроверяемаяСтраница = Элементы.СтраницаГрафикПлатежей Тогда
		
			Если ПроизвольныеДатыРасписания.Количество() > 0 Тогда
				
				МассивДат = Новый Массив;
				Для Каждого СтрокаДаты Из ПроизвольныеДатыРасписания Цикл
					СтрокаДаты.АктуальнаяДата = СтрокаДаты.ПлановаяДата;
					ДатаМесяц = НачалоМесяца(СтрокаДаты.ПлановаяДата);
					Если МассивДат.Найти(ДатаМесяц) = Неопределено Тогда
						МассивДат.Добавить(ДатаМесяц);
					Иначе
						ТекстСообщения = НСтр("ru = 'За каждый месяц может быть только одна дата. Удалите лишние даты за период %1'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(ДатаМесяц, "ДФ='ММММ гггг ""г.""'"));
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПроизвольныеДатыРасписания.ПлановаяДата", ТекстСообщения, "", СтрокаДаты.НомерСтроки);
					КонецЕсли; 
				КонецЦикла; 
				
			КонецЕсли; 
			
		
	КонецЕсли;
	
	ОчиститьСообщения();
	Если СписокОшибок <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуПроцентовДляРазовогоПлатежа()

	Если ЗадатьПроцентыИКомиссии 
		И ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") 
		И ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) И ЗначениеЗаполнено(ПараметрыГрафика.ПлановаяДатаПогашения)
		И ПараметрыГрафика.ДатаВозникновенияДолга < ПараметрыГрафика.ПлановаяДатаПогашения Тогда
		
		СуммаПроцентовДляРазовогоПлатежа = ПлановыеОперацииКлиентСервер.СуммаПроцентовЗаПериод(
												ПараметрыГрафика.СуммаДолга, 
												ПараметрыГрафика.ПроцентнаяСтавка, 
												ПараметрыГрафика.ДатаВозникновенияДолга, 
												ПараметрыГрафика.ПлановаяДатаПогашения);
		
	Иначе
		СуммаПроцентовДляРазовогоПлатежа = 0;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКошелекДляНакоплений(Кошелек)

	Возврат ЗначениеЗаполнено(Кошелек) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Кошелек, "ИспользоватьДляНакоплений");

КонецФункции
 

////////////////////////////////////////////////////////////////////////////////
// Пересчеты графика платежей

&НаСервере
Процедура ОбновитьВесьГрафик()

	ПараметрыГрафика.НеПересчитыватьПриРедактировании = Ложь;
	ПроизвольныеДатыРасписания.Очистить();
	ЗаполнитьГрафикДатами();
	ПересчитатьГрафикСервер();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикДатами()
	
	ГрафикПогашения          = ПроизвольныеДатыРасписания;
	СпособПогашения          = ПараметрыГрафика.СпособПогашения;
	ДатаПолучения            = ПараметрыГрафика.ДатаВозникновенияДолга;
	НачальнаяСуммаДолга      = ПараметрыГрафика.СуммаДолга;
	КоличествоМесяцев        = ПараметрыГрафика.СрокМесяцев;
	ДеньМесяцаДляРасчетов    = ПараметрыГрафика.ДеньМесяцаДляРасчетов;
	КонецСрока               = КонецМесяца(ДобавитьМесяц(ДатаПолучения, КоличествоМесяцев - 1));
	ДатаЗакрытияДолга        = ПараметрыГрафика.ДатаЗакрытияДолга;
		
	//Если СпособПогашения = Перечисления.СпособыПогашенияКредита.Вручную Тогда
	//	Возврат;
	//КонецЕсли;
	
	ПредыдущаяДата = ДатаПолучения;
	ДатаПлатежа    = ДатаПолучения;
	
	Пока КонецМесяца(ДатаПлатежа) <= КонецСрока  Цикл
		
		//ИскомаяДата  = Дата(Год(ДатаПлатежа), Месяц(ДатаПлатежа), Мин(ПрежнееДеньМесяцаДляРасчетов, День(КонецМесяца(ДатаПлатежа))));
		ПлановаяДата = Дата(Год(ДатаПлатежа), Месяц(ДатаПлатежа), Мин(ДеньМесяцаДляРасчетов, День(КонецМесяца(ДатаПлатежа))));
		ИскомаяДата  = ПлановаяДата;
		
		СтрокаРасписания = ГрафикПогашения.НайтиСтроки(Новый Структура("ПлановаяДата", ИскомаяДата));
		Если СтрокаРасписания.Количество() = 0 Тогда
			СтрокаРасписания = ГрафикПогашения.Добавить();
		Иначе
			СтрокаРасписания = СтрокаРасписания[0];
		КонецЕсли; 
		СтрокаРасписания.ПлановаяДата = ПлановаяДата;
		СтрокаРасписания.АктуальнаяДата = ПлановаяДата;
		//СтрокаРасписания.ДолгЗакрыт   = ДолгЗакрыт И ПлановаяДата >= ДатаЗакрытияДолга;
		
		ДатаПлатежа      = ДобавитьМесяц(ДатаПлатежа, 1);
		
	КонецЦикла;
	
	ГрафикПогашения.Сортировать("ПлановаяДата");
	
	ТелоДолга = -НачальнаяСуммаДолга;
	Счетчик = 0;
	СтрокиДляУдаления = Новый Массив;
	Для Каждого СтрокаГрафика Из ГрафикПогашения Цикл
		
		Если (СтрокаГрафика.ПлановаяДата < НачалоМесяца(ДатаПолучения) И НЕ СтрокаГрафика.ЕстьОперации)
				ИЛИ (СтрокаГрафика.ПлановаяДата > ДатаПлатежа И НЕ СтрокаГрафика.ЕстьОперации) Тогда
			СтрокиДляУдаления.Добавить(СтрокаГрафика);
			Продолжить;
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
		СтрокаГрафика.НомерСтроки = Счетчик;
		СтрокаГрафика.ОстатокНаНачало = ТелоДолга;
		ТелоДолга                     = ТелоДолга - СтрокаГрафика.СуммаДолга;
		СтрокаГрафика.ОстатокНаКонец  = ТелоДолга;
		Если СтрокаГрафика.ПлановаяДата < ДатаНачальногоОстатка Тогда
			СтрокаГрафика.Пропустить = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для Каждого УдаляемаяСтрока Из СтрокиДляУдаления Цикл
		ГрафикПогашения.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
	//ПрежнееДеньМесяцаДляРасчетов = ДеньМесяцаДляРасчетов;
	
КонецПроцедуры
 
&НаСервере
Процедура ПересчитатьГрафикСервер(ИДСтрокиГрафика = Неопределено)

	ГрафикПогашения          = ПроизвольныеДатыРасписания;
	СпособПогашения          = ПараметрыГрафика.СпособПогашения;
	СуммаКредита             = ПараметрыГрафика.СуммаДолга;
	СтавкаГодовых            = ПараметрыГрафика.ПроцентнаяСтавка / 100;
	СтавкаМесяца             = СтавкаГодовых / 12;
	ДатаПолучения            = ПараметрыГрафика.ДатаВозникновенияДолга;
	КоличествоМесяцев        = ПараметрыГрафика.СрокМесяцев;
	ТекущийМесяц             = НачалоМесяца(ТекущаяДатаСеанса());
	КонецСрока               = КонецМесяца(ДобавитьМесяц(ДатаПолучения, КоличествоМесяцев));
	ДеньМесяцаДляРасчетов    = ПараметрыГрафика.ДеньМесяцаДляРасчетов;
	ЕжемесячнаяКомиссия      = ПараметрыГрафика.СуммаЕжемесячнойКомиссии;
	НачислятьПроценты        = ПараметрыГрафика.ПроцентнаяСтавка <> 0;
	РазмерГода               = ПараметрыГрафика.ДнейВГоду;
	
	Если СпособПогашения = Перечисления.СпособыПогашенияКредита.Аннуитет Тогда
		Если СтавкаМесяца = 0 ИЛИ КоличествоМесяцев = 0 Тогда
			КоэффициентПлатежа = ?(КоличествоМесяцев - 1 = 0, СуммаКредита, СуммаКредита / (КоличествоМесяцев - 1));
			ЕжемесячныйПлатеж  = КоэффициентПлатежа;
		Иначе
			КоэффициентПлатежа = СтавкаМесяца / (1 - Pow( 1 + СтавкаМесяца, -((КоличествоМесяцев-1)-1) )); //СТЕПЕНЬ((1+Ставка/12);-((Срок-1)-1))
			ЕжемесячныйПлатеж  = Окр(СуммаКредита * КоэффициентПлатежа, 2, 1);
		КонецЕсли;
	ИначеЕсли СпособПогашения = Перечисления.СпособыПогашенияКредита.Вручную И ГрафикПогашения.Количество() = 0 Тогда
		ПерваяСтрока = ГрафикПогашения.Добавить();
		ПерваяСтрока.ПлановаяДата = ДатаПолучения;
		ПерваяСтрока.АктуальнаяДата = ДатаПолучения;
	КонецЕсли; 
	
	ПредыдущаяДата       = ДатаПолучения;
	ТелоДолга            = СуммаКредита;
	
	Если ИДСтрокиГрафика = Неопределено Тогда
		Если ГрафикПогашения.Количество() = 0 Тогда
			ТекущаяСтрокаГрафика = Неопределено;
			ДатаПлатежа          = ДатаПолучения;
		Иначе
			ТекущаяСтрокаГрафика = ГрафикПогашения[0];
			ДатаПлатежа          = ГрафикПогашения[0].ПлановаяДата;
		КонецЕсли; 
	Иначе
		ТекущаяСтрокаГрафика = ГрафикПогашения.НайтиПоИдентификатору(ИДСтрокиГрафика);
		ДатаПлатежа          = ТекущаяСтрокаГрафика.ПлановаяДата;
	КонецЕсли;
	
	Если СпособПогашения = Перечисления.СпособыПогашенияКредита.Вручную ИЛИ ПараметрыГрафика.НеПересчитыватьПриРедактировании Тогда
		
		Для каждого СтрокаГрафика Из ГрафикПогашения Цикл
			
			Если ИДСтрокиГрафика = Неопределено Тогда
				// пересчитывается весь график по порядку
			Иначе
				// пересчитывать нужно с указанной строки 
				Если СтрокаГрафика.НомерСтроки < ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					Продолжить;
				ИначеЕсли СтрокаГрафика.НомерСтроки = ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					// запомним предыдущую дату и остаток
					ПредыдущаяДата    = СтрокаГрафика.ПлановаяДата;
					ТелоДолга         = СтрокаГрафика.ОстатокНаКонец;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаГрафика.ОстатокНаНачало = ТелоДолга;
			
			ТелоДолга                    = ТелоДолга - СтрокаГрафика.СуммаДолга;
			КоличествоМесяцев            = КоличествоМесяцев - 1;
			
			СтрокаГрафика.ОстатокНаКонец = ТелоДолга;
			
			ПредыдущаяДата   = СтрокаГрафика.ПлановаяДата;
			ДатаПлатежа      = ДобавитьМесяц(ДатаПлатежа, 1);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаГрафика Из ГрафикПогашения Цикл
			
			Если ИДСтрокиГрафика = Неопределено Тогда
				// пересчитывается весь график по порядку
			Иначе
				// пересчитывать нужно с указанной строки 
				Если НЕ ЗначениеЗаполнено(СтрокаГрафика.НомерСтроки) И СтрокаГрафика.ЕстьОперации Тогда
					Продолжить;
				ИначеЕсли СтрокаГрафика.НомерСтроки < ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					Продолжить;
				ИначеЕсли СтрокаГрафика.НомерСтроки = ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					// запомним предыдущую дату и остаток
					ПредыдущаяДата    = СтрокаГрафика.ПлановаяДата;
					ТелоДолга         = СтрокаГрафика.ОстатокНаКонец;
					Если НачалоМесяца(СтрокаГрафика.ПлановаяДата) > НачалоМесяца(ДатаПолучения) Тогда
						ЕжемесячныйПлатеж = ?(СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов <= 0, ЕжемесячныйПлатеж, СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов);
					КонецЕсли; 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаГрафика.ОстатокНаНачало = ТелоДолга;
			СтрокаГрафика.СуммаКомиссии   = ЕжемесячнаяКомиссия;
			
			РасчетнаяСуммаДолга = ТелоДолга;
			
			Если СпособПогашения = Перечисления.СпособыПогашенияКредита.ДифференцированныеПлатежи Тогда
				
				СтрокаГрафика.СуммаДолга = Окр(РасчетнаяСуммаДолга / ?(КоличествоМесяцев <> 0, КоличествоМесяцев, 1), 2, 1);
				Если РазмерГода = 0 Тогда
					ДнейВГоду = Окр((КонецГода(СтрокаГрафика.ПлановаяДата) - НачалоГода(СтрокаГрафика.ПлановаяДата)) / 86400, 2,1);
				Иначе
					ДнейВГоду = РазмерГода;
				КонецЕсли; 
				Дней = Окр((СтрокаГрафика.ПлановаяДата - ПредыдущаяДата) / 86400, 2,1);
				Если НачислятьПроценты Тогда
					СтрокаГрафика.СуммаПроцентов = Окр((РасчетнаяСуммаДолга * СтавкаГодовых * Дней) / ДнейВГоду, 2,1);
				Иначе
					СтрокаГрафика.СуммаПроцентов = 0;
				КонецЕсли;
				
				СтрокаГрафика.ВсегоКУплате     = СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов;
				
			ИначеЕсли СпособПогашения = Перечисления.СпособыПогашенияКредита.Аннуитет Тогда
				
				Если РазмерГода = 0 Тогда
					ДнейВГоду = Окр((КонецГода(СтрокаГрафика.ПлановаяДата) - НачалоГода(СтрокаГрафика.ПлановаяДата)) / 86400, 2,1);
				Иначе
					ДнейВГоду = РазмерГода;
				КонецЕсли; 
				Дней = (КонецМесяца(СтрокаГрафика.ПлановаяДата) - Макс(НачалоМесяца(СтрокаГрафика.ПлановаяДата), ДатаПолучения + 86400))  / 86400;
				Если НачислятьПроценты Тогда
					СтрокаГрафика.СуммаПроцентов = Макс(0, Окр(РасчетнаяСуммаДолга * СтавкаГодовых / ДнейВГоду * Дней, 2,1));
				Иначе
					СтрокаГрафика.СуммаПроцентов = 0;
				КонецЕсли;
				
				Если НачалоМесяца(СтрокаГрафика.ПлановаяДата) = НачалоМесяца(ДатаПолучения) Тогда
					// первый месяц обычно только проценты
					СтрокаГрафика.СуммаДолга = 0;
				Иначе
					СтрокаГрафика.СуммаДолга = Мин(Макс(0, ЕжемесячныйПлатеж - СтрокаГрафика.СуммаПроцентов), РасчетнаяСуммаДолга);
				КонецЕсли; 
				
				СтрокаГрафика.ВсегоКУплате = СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов + СтрокаГрафика.СуммаКомиссии;
				Если СтрокаГрафика.ВсегоКУплате = 0 Тогда
					СтрокаГрафика.Пропустить = Истина;
				КонецЕсли; 
				
			КонецЕсли;
			
			ТелоДолга                    = ТелоДолга - СтрокаГрафика.СуммаДолга;
			КоличествоМесяцев            = КоличествоМесяцев - 1;
			СтрокаГрафика.ОстатокНаКонец = ТелоДолга;
			
			ПредыдущаяДата   = СтрокаГрафика.ПлановаяДата;
			ДатаПлатежа      = ДобавитьМесяц(ДатаПлатежа, 1);
		
		КонецЦикла;
		 
		Если ТелоДолга <> 0 И СтрокаГрафика <> Неопределено  Тогда
			СтрокаГрафика.СуммаДолга     = СтрокаГрафика.СуммаДолга + ТелоДолга;
			СтрокаГрафика.ВсегоКУплате   = СтрокаГрафика.ВсегоКУплате + ТелоДолга;
			СтрокаГрафика.ОстатокНаКонец = СтрокаГрафика.ОстатокНаНачало - СтрокаГрафика.СуммаДолга;
		КонецЕсли; 
		
	КонецЕсли;
	
	
	Элементы.ПроизвольныеДатыРасписанияВсегоКУплате.ТекстПодвала    = Формат(ПроизвольныеДатыРасписания.Итог("ВсегоКУплате"), "ЧДЦ=2; ЧГ=3,0"); 
	Элементы.ПроизвольныеДатыРасписанияСуммаДолга.ТекстПодвала      = Формат(ПроизвольныеДатыРасписания.Итог("СуммаДолга"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаПроцентов.ТекстПодвала  = Формат(ПроизвольныеДатыРасписания.Итог("СуммаПроцентов"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаКомиссии.ТекстПодвала   = Формат(ПроизвольныеДатыРасписания.Итог("СуммаКомиссии"), "ЧДЦ=2; ЧГ=3,0") ;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры
 
&НаСервере
Процедура ПроизвольныеДатыРасписанияСуммаДолгаПриИзмененииСервер(ИДСтроки)

	СтрокаГрафика = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ИДСтроки);
	СтрокаГрафика.ВсегоКУплате   = СтрокаГрафика.СуммаПроцентов + СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаКомиссии;
	Если НЕ ПараметрыГрафика.НеПересчитыватьПриРедактировании И СтрокаГрафика.ВсегоКУплате = 0 Тогда
		СтрокаГрафика.Пропустить = Истина;
	КонецЕсли; 
	СтрокаГрафика.ОстатокНаКонец = СтрокаГрафика.ОстатокНаНачало - СтрокаГрафика.СуммаДолга;
	
	// пересчет нужно начинать со следующей строки:
	Если СтрокаГрафика.НомерСтроки < ПроизвольныеДатыРасписания.Количество() Тогда
		ПересчитатьГрафикСервер(ПроизвольныеДатыРасписания[СтрокаГрафика.НомерСтроки].ПолучитьИдентификатор());
	КонецЕсли;
	 

КонецПроцедуры

&НаСервере
Процедура ПроизвольныеДатыРасписанияСуммаПроцентовПриИзмененииСервер(ИДСтроки)

	СтрокаГрафика = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ИДСтроки);
	СтрокаГрафика.ВсегоКУплате = СтрокаГрафика.СуммаПроцентов + СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаКомиссии;
	Если НЕ ПараметрыГрафика.НеПересчитыватьПриРедактировании И СтрокаГрафика.ВсегоКУплате = 0 Тогда
		СтрокаГрафика.Пропустить = Истина;
	КонецЕсли; 
	СтрокаГрафика.ОстатокНаКонец = СтрокаГрафика.ОстатокНаНачало - СтрокаГрафика.СуммаДолга;
	
	// пересчет нужно начинать со следующей строки:
	Если СтрокаГрафика.НомерСтроки < ПроизвольныеДатыРасписания.Количество() Тогда
		ПересчитатьГрафикСервер(ПроизвольныеДатыРасписания[СтрокаГрафика.НомерСтроки].ПолучитьИдентификатор());
	КонецЕсли;
	 
КонецПроцедуры


// Завершения процедур с интерактивным функиционалом

&НаКлиенте
Процедура ПересчитатьГрафикЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьВесьГрафик();
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти

