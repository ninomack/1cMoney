////////////////////////////////////////////////////////////////////////////////
//Обработка.МониторСинхронизации.Форма.Монитор
//  Форма для выполнения синхронизации и контроля за ее резултатами
//  
//Параметры формы:
//  Стандартные параметры формы
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДополнительныеРеквизиты();
	
	ОбновитьВсеДанные();
	
	ПроверитьНачальноеВключениеОбменаДанными();
	
	ИзменитьВидимостьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обмен: изменение облачного провайдера" Или ИмяСобытия = "RESTВыход" Тогда
		ОбновитьПараметрыОблачногоПровайдера();
		ОбновитьЭлементыПоОблачномуСервису(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "Обмен: изменение домашней сети" Тогда
		ОбновитьПараметрыДомашнейСети();
		ОбновитьЭлементыПоДомашнейСети(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ИзмененаСинхронизация" Тогда
		Если ВыбранДругойСпособСинхронизации() И Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстСостоянияСинхронизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОблачныйСервисИнфоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОблачныйСервисКомандыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДомашняяСетьИнфоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДомашняяСетьКомандыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл1РасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбменЧерезФайлыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийТаблицы_СписокМобильныхУстройств


&НаКлиенте
Процедура СписокМобильныхУстройствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ПоказатьПредупреждение(, НСтр("ru='Новые устройства добавляются автоматически при первом обмене данными'"));
КонецПроцедуры

&НаКлиенте
Процедура СписокМобильныхУстройствПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ИзменитьПометкуУдаленияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМобильныхУстройствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНайти("СписокМобильныхУстройствПредставлениеОтправки,СписокМобильныхУстройствИконкаОтправки,
			|СписокМобильныхУстройствРезультатОтправки,СписокМобильныхУстройствПредставлениеЗагрузкиУзлом,", Поле.Имя + ",") > 0 Тогда
		ОткрытьФормуРезультатов("Отправка");
	ИначеЕсли СтрНайти("СписокМобильныхУстройствИконкаПолучения,СписокМобильныхУстройствПредставлениеПолучения,
			|СписокМобильныхУстройствРезультатПолучения,СписокМобильныхУстройствПредставлениеОтправкиУзлом,", Поле.Имя + ",") > 0 Тогда
		ОткрытьФормуРезультатов("Получение");
	ИначеЕсли ЗначениеЗаполнено(Элементы.СписокМобильныхУстройств.ТекущиеДанные.УзелИнформационнойБазы) Тогда
		ОткрытьФормуУзла(Элементы.СписокМобильныхУстройств.ТекущиеДанные.УзелИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьВсе(Команда)
	ОбновитьВсеДанные();
	ИзменитьВидимостьЭлементовФормы(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура ОтключитьСинхронизацию(Команда)
	
	ПереключитьСинхронизациюКлиент();
	
КонецПроцедуры


&НаКлиенте
Процедура ТолькоАктивные(Команда)
	ИзменитьОтборАктивныхУстройств(1);
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОтключенные(Команда)
	ИзменитьОтборАктивныхУстройств(2);
КонецПроцедуры

&НаКлиенте
Процедура ВсеУстройства(Команда)
	ИзменитьОтборАктивныхУстройств(3);
КонецПроцедуры

&НаКлиенте
Процедура СписокПолученныхОбъектов(Команда)
	
	СтрокаСписка = Элементы.СписокМобильныхУстройств.ТекущиеДанные;
	Если СтрокаСписка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("МестоИзменения", СтрокаСписка.УзелИнформационнойБазы);
	
	ОткрытьФорму("РегистрСведений.ИзмененияОбъектовВоВнешнихПрограммах.ФормаСписка", Новый Структура("Отбор, ТолькоПоследниеИзменения", СтруктураОтбора, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовКОтправке(Команда)
	
	СтрокаСписка = Элементы.СписокМобильныхУстройств.ТекущиеДанные;
	Если СтрокаСписка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОбменДаннымиКлиент.ОткрытьСоставОтправляемыхДанных(СтрокаСписка.УзелИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	ЗагрузитьДанныеИзфайлаКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОбщаяИнформацияОСинхронизации(Команда)
	ПоказатьТекстДокументации("e1c://Документация_");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДомашнейСети(Команда)
	ОткрытьНастройкиДомашнейСети();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОблачногоСервиса(Команда)
	ОткрытьНастройкиОблачногоСервиса();
КонецПроцедуры

&НаКлиенте
Процедура ВключениеДомашнейСети(Команда)
	
	Если ПараметрыДомашняяСеть.ЗапретитьИспользование Тогда
		ПереключитьИспользованиеДомашнейСетиСервер();
		Оповестить("Обмен: изменение домашней сети");
	Иначе
		ЗадатьВопросОбОтключенииДомашнейСети();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключениеОблачногоСервиса(Команда)
	
	Если ПараметрыОблака.ЗапретитьИспользование Тогда
		ПереключитьИспользованиеОблакаСервер();
		Оповестить("Обмен: изменение облачного провайдера");
	Иначе
		ЗадатьВопросОбОтключенииОблака();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьСинхронизацию(Команда)
	
	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Выключить синхронизацию на этом компьютере?
		|Обратите внимание:
		| - выключение не освобождает лицензию в Облаке
		| - при повторном включении возможна рассинхронизация данных'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВыключитьСинхронизациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Выключить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти
	
КонецПроцедуры



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты()

	ДопРеквизитыФормы = Новый Структура;
	
	ДопРеквизитыФормы.Вставить("ОблачныйСервис", Новый Структура);
	ДопРеквизитыФормы.ОблачныйСервис.Вставить("СсылкаНастройка", "e1c://Настройка_ОблачныйСервис/");
	ДопРеквизитыФормы.ОблачныйСервис.Вставить("СсылкаСинхронизация", "e1c://Синхронизировать_ОблачныйСервис/");
	ДопРеквизитыФормы.ОблачныйСервис.Вставить("СсылкаДокументация", "e1c://Документация_ИспользованиеОблачногоСервиса/");

	ДопРеквизитыФормы.Вставить("ДомашняяСеть", Новый Структура);
	ДопРеквизитыФормы.ДомашняяСеть.Вставить("СсылкаНастройка", "e1c://Настройка_ДомашняяСеть/");
	ДопРеквизитыФормы.ДомашняяСеть.Вставить("СсылкаПроверка", "e1c://Проверка_ДомашняяСеть/");
	ДопРеквизитыФормы.ДомашняяСеть.Вставить("СсылкаДокументация", "e1c://Документация_ИспользованиеДомашнейСети/");

	ДопРеквизитыФормы.Вставить("ИмяЭтойОбработки", СтрЗаменить(ЭтотОбъект.ИмяФормы, ".Форма.Монитор", ""));
	
КонецПроцедуры

// обновляет все реквизиты формы, отражающие синхронизацию и ее результаты
&НаСервере
Процедура ОбновитьВсеДанные()

	СинхронизацияВключена = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	
	ОбновитьСписокМобильныхУстройств();
	
	ОбновитьПараметрыДомашнейСети();
	
	ОбновитьПараметрыОблачногоПровайдера();

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокМобильныхУстройств()

	// Запомним текущую строку списка для восстановления после обновления
	ТекСтрока = Элементы.СписокМобильныхУстройств.ТекущаяСтрока;
	Узел = ?(ТекСтрока = Неопределено, Неопределено, СписокМобильныхУстройств.НайтиПоИдентификатору(ТекСтрока));
	Узел = ?(Узел = Неопределено, Неопределено, Узел.УзелИнформационнойБазы);
	
	СписокМобильныхУстройств.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Активность", ?(Элементы.СписокМобильныхУстройствВсеУстройства.Пометка, 
				Неопределено, Элементы.СписокМобильныхУстройствТолькоАктивные.Пометка));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МобильноеПриложение.Ссылка) КАК Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	НЕ МобильноеПриложение.ЭтотУзел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МобильноеПриложение.Ссылка КАК УзелИнформационнойБазы,
	|	МобильноеПриложение.ПометкаУдаления,
	|	МобильноеПриложение.Активность,
	|	МобильноеПриложение.ПользовательМобильногоУстройства КАК ПользовательУстройства,
	|	КонтрольОбменаДанными.РезультатПолученияДанных,
	|	КонтрольОбменаДанными.РезультатОтправкиДанных,
	|	КонтрольОбменаДанными.ПоследнееПолучение,
	|	КонтрольОбменаДанными.ПоследняяОтправка,
	|	КонтрольОбменаДанными.ТекстОшибокПолучения,
	|	КонтрольОбменаДанными.ТекстОшибокОтправки,
	|	КонтрольОбменаДанными.ПоследнееПолучениеУзлом,
	|	КонтрольОбменаДанными.РезультатПолученияДанныхУзлом,
	|	КонтрольОбменаДанными.ТекстОшибокПолученияУзлом,
	|	КонтрольОбменаДанными.ПоследняяОтправкаУзлом,
	|	КонтрольОбменаДанными.РезультатОтправкиДанныхУзлом,
	|	КонтрольОбменаДанными.ТекстОшибокОтправкиУзлом,
	|	КонтрольОбменаДанными.ТранспортПолученияУзлом,
	|	КонтрольОбменаДанными.ТранспортОтправкиУзлом
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольОбменаДанными КАК КонтрольОбменаДанными
	|		ПО МобильноеПриложение.Ссылка = КонтрольОбменаДанными.УзелИнформационнойБазы
	|ГДЕ
	|	НЕ МобильноеПриложение.ЭтотУзел
	|	И (&Активность = НЕОПРЕДЕЛЕНО
	|			ИЛИ МобильноеПриложение.Активность = &Активность)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МобильноеПриложение.Активность УБЫВ,
	|	МобильноеПриложение.ПометкаУдаления УБЫВ,
	|	МобильноеПриложение.Наименование";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ПланОбменаИспользуется = ЗначениеЗаполнено(Выборка.Ссылка);
	Иначе
		ПланОбменаИспользуется = Ложь;
	КонецЕсли;
	
	Если Не ПланОбменаИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	Выборка        = Результаты[1].Выбрать(); 
	ЕстьОшибки     = Ложь;
	ТекСтрока      = Неопределено;
	ПустаяКартинка = Новый Картинка;
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаСписка = СписокМобильныхУстройств.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСписка, Выборка);
		
		Если СтрокаСписка.УзелИнформационнойБазы = Узел Тогда
			ТекСтрока  = СтрокаСписка;
		КонецЕсли;
		
		// Колонка отправки данных - результаты этой базы
		ДатаОтправки = ПредставлениеДаты(Выборка.ПоследняяОтправка);
		Если Выборка.РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено
			Или Выборка.РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями Тогда
			
			СтрокаСписка.ИконкаОтправки = ПустаяКартинка;
			СтрокаСписка.ПредставлениеОтправки = СтрШаблон(НСтр("ru='%1: успешная отправка'"), ДатаОтправки);
			СтрокаСписка.РезультатОтправки = "Ок";
			
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.РезультатОтправкиДанных) Тогда 
			
			СтрокаСписка.ИконкаОтправки = ПустаяКартинка;
			СтрокаСписка.ПредставлениеОтправки = СтрШаблон(НСтр("ru='%1: не было отправки'"), ДатаОтправки);
			СтрокаСписка.РезультатОтправки = "<нет пакета>";
			
		Иначе
			
			СтрокаСписка.ИконкаОтправки = БиблиотекаКартинок.СинхронизацияОшибкаОтправкаДанных16;
			СтрокаСписка.ПредставлениеОтправки = СтрШаблон(НСтр("ru='%1: ошибка отправки'"), ДатаОтправки);
			СтрокаСписка.РезультатОтправки = "См. ошибки";
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		// ...в этой базе отправка, на мобильном - получение
		ДатаПолученияУзлом = ПредставлениеДаты(Выборка.ПоследнееПолучениеУзлом);
		Если Выборка.РезультатПолученияДанныхУзлом = Перечисления.РезультатыВыполненияОбмена.Выполнено
			Или Выборка.РезультатПолученияДанныхУзлом = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями Тогда
			
			СтрокаСписка.ОшибкаЗагрузкиУзлом = Ложь;
			СтрокаСписка.ПредставлениеЗагрузкиУзлом = СтрШаблон(НСтр("ru='последняя загрузка на устройстве: %1'"), ДатаПолученияУзлом); 
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ТекстОшибокПолученияУзлом) Тогда 
			СтрокаСписка.ОшибкаЗагрузкиУзлом = Истина;
			СтрокаСписка.ПредставлениеЗагрузкиУзлом = СтрШаблон(НСтр("ru='на устройстве была ошибка загрузки: %1'"), ПредставлениеДаты(Выборка.ПоследнееПолучениеУзлом)); 
		Иначе
			СтрокаСписка.ОшибкаЗагрузкиУзлом = Ложь;
			СтрокаСписка.ПредставлениеЗагрузкиУзлом = ""; 
		КонецЕсли;
		
		
		// Колонка получения данных - результаты этой базы
		ДатаПолучения = ПредставлениеДаты(Выборка.ПоследнееПолучение);
		Если Выборка.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено
			Или Выборка.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями Тогда
			
			СтрокаСписка.ИконкаПолучения        = ПустаяКартинка;
			СтрокаСписка.ПредставлениеПолучения = СтрШаблон(НСтр("ru='%1: успешное получение'"), ДатаОтправки);
			СтрокаСписка.РезультатПолучения     = "Ок";
			
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.РезультатПолученияДанных) Тогда 
			
			СтрокаСписка.ИконкаПолучения = ПустаяКартинка;
			СтрокаСписка.ПредставлениеПолучения = СтрШаблон(НСтр("ru='%1: не было данных'"), ДатаОтправки);
			СтрокаСписка.РезультатПолучения = "<нет пакета>";
			
		Иначе
			
			СтрокаСписка.ИконкаПолучения = БиблиотекаКартинок.СинхронизацияОшибкаПолученияДанных16;
			СтрокаСписка.ПредставлениеПолучения = СтрШаблон(НСтр("ru='%1: ошибка получения'"), ДатаОтправки);
			СтрокаСписка.РезультатПолучения = "См. ошибки";
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		// ...в этой базе получение, на мобильном - отправка
		ДатаОтправкиУзлом = ПредставлениеДаты(Выборка.ПоследняяОтправкаУзлом);
		Если Выборка.РезультатОтправкиДанныхУзлом = Перечисления.РезультатыВыполненияОбмена.Выполнено
			Или Выборка.РезультатОтправкиДанныхУзлом = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями Тогда
			
			СтрокаСписка.ОшибкаОтправкиУзлом = Ложь;
			СтрокаСписка.ПредставлениеОтправкиУзлом = СтрШаблон(НСтр("ru='последняя отправка с устройства: %1'"), ДатаОтправкиУзлом); 
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ТекстОшибокОтправкиУзлом) Тогда 
			
			СтрокаСписка.ОшибкаОтправкиУзлом = Истина;
			СтрокаСписка.ПредставлениеОтправкиУзлом = СтрШаблон(НСтр("ru='на устройстве была ошибка отправки: %1'"), ДатаОтправкиУзлом); 
			
		Иначе
			
			СтрокаСписка.ОшибкаОтправкиУзлом = Ложь;
			СтрокаСписка.ПредставлениеОтправкиУзлом = ""; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекСтрока <> Неопределено Тогда
		Элементы.СписокМобильныхУстройств.ТекущаяСтрока = ТекСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДаты(Дата)

	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат "---";
	КонецЕсли;
	
	НачалоДня = НачалоДня(ДеньгиКлиентСервер.ЗначениеТекущейДаты());
	НачалоДаты =  НачалоДня(Дата);
	Если НачалоДаты = НачалоДня Тогда
		Возврат Формат(Дата, "Л=ru_RU; ДЛФ=T; ДП='- - -'") 
	ИначеЕсли НачалоДня - НачалоДаты < 604800 Тогда
		Возврат Формат(Дата, "Л=ru_RU; ДЛФ=DT; ДП='- - -'") 
	Иначе
		Возврат Формат(Дата, "Л=ru_RU; ДЛФ=D; ДП='- - -'") 
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОбновитьПараметрыДомашнейСети()

	ПараметрыДомашняяСеть = Справочники.ТранспортыОбменаДанными.СтруктураПараметровТранспорта(Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети());

КонецПроцедуры

Процедура ОбновитьПараметрыОблачногоПровайдера()
	
	СвойстваАккаунта = Неопределено;
	ОблачныйПровайдер = RESTВызовСервера.ПровайдерИзПараметраСеанса(СвойстваАккаунта);
	ПараметрыОблака = Справочники.ТранспортыОбменаДанными.СтруктураПараметровТранспорта(Справочники.ТранспортыОбменаДанными.ОсновнойТранспортОблачногоПровайдера(ОблачныйПровайдер), Истина);
	ПараметрыОблака.Вставить("СвойстваАккаунта", СвойстваАккаунта);
	ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	
КонецПроцедуры

// Если обмен еще не использовался, включаем его авторматически
&НаСервере
Процедура ПроверитьНачальноеВключениеОбменаДанными()

	Если Не СинхронизацияВключена И Не ПланОбменаИспользуется Тогда
		// в плане обмена еще нет ни одного узла - значит вручную обмен не выключали
		ПереключитьИспользованиеОбменаВКонфигурации(Истина);
		СинхронизацияВключена = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереключитьИспользованиеОбменаВКонфигурации(ИспользоватьОбмен)

	Константы.ИспользоватьСинхронизациюДанных.Установить(ИспользоватьОбмен);
	Константы.ДеньгиВыбранныйСпособСинхронизации.Установить(
		?(ИспользоватьОбмен, Перечисления.СпособыСинхронизацииДанных.ОбменФайлами, 
				Перечисления.СпособыСинхронизацииДанных.НеИспользовать)
		);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВидимостьЭлементовФормы(Форма)

	ОбновитьЭлементыПоСинхронизацияВключена(Форма);
	ОбновитьЭлементыПоСпискуУстройств(Форма);
	ОбновитьЭлементыПоДомашнейСети(Форма);
	ОбновитьЭлементыПоОблачномуСервису(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыПоСинхронизацияВключена(Форма)

	Элементы = Форма.Элементы;
	
	// При выключенной синхронизации выводится сообщение и недоступны остальные элементы
	Элементы.ГруппаСостояниеСинхронизации.Видимость    = Не Форма.СинхронизацияВключена;
	Элементы.ГруппаТранспортыСинхронизации.Доступность = Форма.СинхронизацияВключена;
	Элементы.ГруппаСпискаУстройств.Доступность         = Форма.СинхронизацияВключена;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыПоСпискуУстройств(Форма)

	Элементы = Форма.Элементы;
	
	Если Форма.ПланОбменаИспользуется Тогда
		Элементы.ГруппаСтраницСпискаУстройств.ТекущаяСтраница = Элементы.СтраницаСписокУстройств;
	Иначе
		Элементы.ГруппаСтраницСпискаУстройств.ТекущаяСтраница = Элементы.СтраницаНетУстройств;
	КонецЕсли;

	Элементы.ГруппаПредупреждениеОбОшибках.Видимость = Форма.ЕстьОшибки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыПоДомашнейСети(Форма)

	Элементы = Форма.Элементы;
	ДопРеквизиты = Форма.ДопРеквизитыФормы.ДомашняяСеть;
	
	ТекстКоманд = Новый ФорматированнаяСтрока(НСтр("ru='Как использовать?'"), , , , ДопРеквизиты.СсылкаДокументация);
	
	Если Форма.ПараметрыДомашняяСеть.ЗапретитьИспользование Тогда
		ТекстСостояния = Новый ФорматированнаяСтрока(НСтр("ru='Отключена'"), , , , ДопРеквизиты.СсылкаНастройка);
	ИначеЕсли Не ЗначениеЗаполнено(Форма.ПараметрыДомашняяСеть.WSURLВебСервиса) Тогда 
		ТекстСостояния = Новый ФорматированнаяСтрока(НСтр("ru='Включена, адрес не указан'"), , , , ДопРеквизиты.СсылкаНастройка);
	Иначе
		ТекстСостояния = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='Адрес: %1'"), Форма.ПараметрыДомашняяСеть.WSURLВебСервиса),
				, , , ДопРеквизиты.СсылкаНастройка);
		ТекстКоманд = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Проверить'"), , , , ДопРеквизиты.СсылкаПроверка),
				"   ",
				ТекстКоманд);
	КонецЕсли;
	
	Элементы.ДомашняяСетьИнфо.Заголовок      = ТекстСостояния;
	Элементы.ДомашняяСетьКоманды.Заголовок   = ТекстКоманд;
	Элементы.ВключениеДомашнейСети.Заголовок = ?(Форма.ПараметрыДомашняяСеть.ЗапретитьИспользование,
				НСтр("ru='Включить обмен в домашней сети'"), НСтр("ru='Отключить обмен в домашней сети'"));
	Элементы.ДомашняСетьКартинка.Доступность = Не Форма.ПараметрыДомашняяСеть.ЗапретитьИспользование;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыПоОблачномуСервису(Форма)

	Элементы = Форма.Элементы;
	
	ТекстКоманд     = Новый ФорматированнаяСтрока(НСтр("ru='Как использовать?'"), , , , "e1c://Документация_ИспользованиеОблачногоСервиса/");
	ДопРеквизиты = Форма.ДопРеквизитыФормы.ОблачныйСервис;
	
	Если Форма.ПараметрыОблака.ЗапретитьИспользование Тогда
		
		ТекстСостояния = Новый ФорматированнаяСтрока(НСтр("ru='Отключен'"), , , , ДопРеквизиты.СсылкаНастройка);
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.ПараметрыОблака.СвойстваАккаунта) Или Не ЗначениеЗаполнено(Форма.ПараметрыОблака.СвойстваАккаунта.КлючАвторизации) Тогда 
		
		ТекстСостояния = Новый ФорматированнаяСтрока(НСтр("ru='Включен, нет авторизации'"), , , , ДопРеквизиты.СсылкаНастройка);
		
	Иначе
		
		Если Форма.ПараметрыЦентральнойБазы = Неопределено Или Не ЗначениеЗаполнено(Форма.ПараметрыЦентральнойБазы.ИмяЭтойБазы) Тогда
			ИмяБазы = НСтр("ru='не задано'"); 
		Иначе
			ИмяБазы = Форма.ПараметрыЦентральнойБазы.ИмяЭтойБазы; 
		КонецЕсли;
		 
		ТекстСостояния = Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='Логин: %1, имя базы: %2'"), 
						Форма.ПараметрыОблака.СвойстваАккаунта.ПредставлениеАккаунта, ИмяБазы),
				, , , ДопРеквизиты.СсылкаНастройка);
		ТекстКоманд = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru='Синхронизировать'"), , , , ДопРеквизиты.СсылкаСинхронизация),
				"   ",
				ТекстКоманд);
				
	КонецЕсли;
	
	Если Форма.ОблачныйПровайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Dropbox") Тогда
		Элементы.ОблачныйСервисКартинка.Картинка = БиблиотекаКартинок.СинхронизацияDropBox48;
	ИначеЕсли Форма.ОблачныйПровайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Google") Тогда
		Элементы.ОблачныйСервисКартинка.Картинка = БиблиотекаКартинок.СинхронизацияGoogleDrive48;
	ИначеЕсли Форма.ОблачныйПровайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс") Тогда
		Элементы.ОблачныйСервисКартинка.Картинка = БиблиотекаКартинок.СинхронизацияЯндексДиск48;
	Иначе
		Элементы.ОблачныйСервисКартинка.Картинка = БиблиотекаКартинок.СинхронизацияКаталог48;
	КонецЕсли;
	
	Если Форма.ПараметрыОблака.ЗапретитьИспользование Или Не ЗначениеЗаполнено(Форма.ОблачныйПровайдер) Тогда
		Форма.Элементы.ЗаголовокТранспотраОблачныйСервис.Заголовок = НСтр("ru='Облачный сервис'");
	Иначе
		Форма.Элементы.ЗаголовокТранспотраОблачныйСервис.Заголовок = СтрШаблон(НСтр("ru='Облачный сервис %1'"), Строка(Форма.ОблачныйПровайдер));
	КонецЕсли;
	
	Элементы.ОблачныйСервисКартинка.Доступность = Не Форма.ПараметрыОблака.ЗапретитьИспользование;
	
	Элементы.ОблачныйСервисИнфо.Заголовок        = ТекстСостояния;
	Элементы.ОблачныйСервисКоманды.Заголовок     = ТекстКоманд;
	Элементы.ВключениеОблачногоСервиса.Заголовок = ?(Форма.ПараметрыОблака.ЗапретитьИспользование,
				НСтр("ru='Включить обмен через облачный сервис'"), НСтр("ru='Отключить обмен через облачный сервис'"));

КонецПроцедуры


&НаКлиенте
Процедура ПереключитьСинхронизациюКлиент()

	Если Не СинхронизацияВключена Тогда
		ПереключитьИспользованиеСинхронизацииСервер();
		Оповестить("ИзмененаСинхронизация");
		Возврат;
	КонецЕсли;
	
	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='После отключения синхронизации приложение не сможет получать или отправлять данные никаким способом.
		|Отключить сисинхронизацию?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПереключитьСинхронизациюКлиентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСинхронизациюКлиентЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереключитьИспользованиеСинхронизацииСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПереключитьИспользованиеСинхронизацииСервер()

	ПереключитьИспользованиеОбменаВКонфигурации(Не СинхронизацияВключена);
	СинхронизацияВключена = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	ОбновитьЭлементыПоСинхронизацияВключена(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ИзменитьОтборАктивныхУстройств(ВариантАктивности)

	Элементы.СписокМобильныхУстройствТолькоАктивные.Пометка    = ВариантАктивности = 1;
	Элементы.СписокМобильныхУстройствТолькоОтключенные.Пометка = ВариантАктивности = 2;
	Элементы.СписокМобильныхУстройствВсеУстройства.Пометка     = ВариантАктивности = 3;
	ОбновитьСписокМобильныхУстройств();
	ОбновитьЭлементыПоСпискуУстройств(ЭтотОбъект);

КонецПроцедуры

// Обработка всех навигационных ссылок формы
&НаКлиенте
Процедура ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Лев(НавигационнаяСсылкаФорматированнойСтроки, 27) = "e1c://ВключитьСинхронизацию" Тогда
		ПереключитьСинхронизациюКлиент();
	ИначеЕсли Лев(НавигационнаяСсылкаФорматированнойСтроки, 19) = "e1c://Документация_" Тогда
		ПоказатьТекстДокументации(НавигационнаяСсылкаФорматированнойСтроки);
	ИначеЕсли Лев(НавигационнаяСсылкаФорматированнойСтроки, 16) = "e1c://Настройка_" Тогда
		ОткрытьФормуНастройки(НавигационнаяСсылкаФорматированнойСтроки);
	ИначеЕсли Лев(НавигационнаяСсылкаФорматированнойСтроки, 23) = "e1c://Синхронизировать_" Тогда
		Синхронизировать(НавигационнаяСсылкаФорматированнойСтроки);
	ИначеЕсли Лев(НавигационнаяСсылкаФорматированнойСтроки, 15) = "e1c://Проверка_" Тогда
		ПроверитьТранспорт(НавигационнаяСсылкаФорматированнойСтроки);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройки(Ссылка)

	Если СтрНайти(Ссылка, "ОблачныйСервис") > 0 Тогда
		ОткрытьНастройкиОблачногоСервиса();
	ИначеЕсли СтрНайти(Ссылка, "ДомашняяСеть") > 0 Тогда
		ОткрытьНастройкиДомашнейСети();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Невозможно открыть форму для ссылки ""%1""'"), Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстДокументации(Ссылка)

	ИмяИнструкции = Сред(Ссылка, 20);
	Если Прав(ИмяИнструкции, 1) = "/" Тогда
		ИмяИнструкции = Сред(ИмяИнструкции, 1, СтрДлина(ИмяИнструкции) - 1);
	КонецЕсли;
	
	ИмяИнструкции = "Обработка.МониторСинхронизацииСМобильнымиУстройствами" + ?(ЗначениеЗаполнено(ИмяИнструкции), ".Форма." + ИмяИнструкции, "");
	
	Если Не ОткрытьСправку(ИмяИнструкции) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Извините, эта справка отсутствует в текущей версии программы'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Ссылка)

	Если СтрНайти(Ссылка, "Файлы") > 0 Тогда
		ЗагрузитьДанныеИзфайлаКлиент();
	ИначеЕсли СтрНайти(Ссылка, "ОблачныйСервис") > 0  Тогда
		ОткрытьОбменЧерезОблачногоПровайдера();
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ПроверитьТранспорт(Ссылка)

	Если СтрНайти(Ссылка, "ДомашняяСеть") > 0 Тогда
		ПроверитьАдерсБазы();
	ИначеЕсли СтрНайти(Ссылка, "ОблачныйСервис") > 0 Тогда
		ПроверкаСервиса();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОблачногоСервиса()

	ПараметрыФормы = Новый Структура("Провайдер, ВключитьИспользование", ПараметрыОблака.СвойстваАккаунта = Неопределено Или Не ЗначениеЗаполнено(ПараметрыОблака.СвойстваАккаунта.ПредставлениеАккаунта));
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму(ДопРеквизитыФормы.ИмяЭтойОбработки + ".Форма.НастройкаОблачногоСервиса", ПараметрыФормы, , ОблачныйПровайдер, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	ОбновитьВсеДанные();
	ИзменитьВидимостьЭлементовФормы(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиДомашнейСети()

	Состояние(НСтр("ru='Выполняется проверка локальной сети…'"));
	ПараметрыФормы = Новый Структура("ВключитьИспользование", Не ЗначениеЗаполнено(ПараметрыДомашняяСеть.WSURLВебСервиса));
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму(ДопРеквизитыФормы.ИмяЭтойОбработки + ".Форма.НастройкаДомашнейСети", ПараметрыФормы, , ОблачныйПровайдер, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУзла(Узел)

	// Параметры открываемой формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Узел);
	
	// Обработчик оповещения о закрытии формы
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Узел", Узел);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуУзлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Открытие формы
	ОткрытьФорму("ПланОбмена.МобильноеПриложение.Форма.ФормаУзла", ПараметрыФормы, ЭтотОбъект, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУзлаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	ОбновитьСписокМобильныхУстройств();
	ОбновитьЭлементыПоСпискуУстройств(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРезультатов(ДействиеПриОбмене)

	Если Элементы.СписокМобильныхУстройств.ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(Элементы.СписокМобильныхУстройств.ТекущиеДанные.УзелИнформационнойБазы) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДействиеПриОбмене", ДействиеПриОбмене);
	ПараметрыФормы.Вставить("УзелИнформационнойБазы", Элементы.СписокМобильныхУстройств.ТекущиеДанные.УзелИнформационнойБазы);
	ОткрытьФорму(ДопРеквизитыФормы.ИмяЭтойОбработки + ".Форма.ИнформацияОРезультатах", ПараметрыФормы, ЭтотОбъект, Элементы.СписокМобильныхУстройств.ТекущиеДанные.УзелИнформационнойБазы);

КонецПроцедуры
 

&НаКлиенте
Процедура ИзменитьПометкуУдаленияКлиент()

	ДанныеУзла = Элементы.СписокМобильныхУстройств.ТекущиеДанные;
	Если ДанныеУзла = Неопределено Или Не ЗначениеЗаполнено(ДанныеУзла.УзелИнформационнойБазы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеУзла.ПометкаУдаления Тогда
		#Область ПоказатьВопрос
		ТекстВопроса = СтрШаблон(НСтр("ru='После пометки на удаление обмен с устройтвом будет невозможен.
				|Пометить на удаление устройство ""%1""?'"), Строка(ДанныеУзла.УзелИнформационнойБазы));
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьПометкуУдаленияЗавершение", ЭтотОбъект, ДанныеУзла.УзелИнформационнойБазы);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
		#КонецОбласти
		 
	Иначе
		ИзменитьПометкуУдаленияСервер(ДанныеУзла.УзелИнформационнойБазы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуУдаленияЗавершение(Ответ, УзелИнформационнойБазы) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменитьПометкуУдаленияСервер(УзелИнформационнойБазы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаленияСервер(УзелИнформационнойБазы)

	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Или УзелИнформационнойБазы = ПланыОбмена.МобильноеПриложение.ЭтотУзел() Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбъект = УзелИнформационнойБазы.ПолучитьОбъект();
	УзелОбъект.УстановитьПометкуУдаления(Не УзелОбъект.ПометкаУдаления);
	ОбновитьСписокМобильныхУстройств();
	ОбновитьЭлементыПоСпискуУстройств(ЭтотОбъект);

КонецПроцедуры
 

&НаКлиенте
Процедура ЗадатьВопросОбОтключенииОблака()

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Отключить синхронизацию через облачный сервис?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОбОтключенииОблакаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбОтключенииОблакаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереключитьИспользованиеОблакаСервер();
		Оповестить("Обмен: изменение облачного провайдера");
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура ПереключитьИспользованиеОблакаСервер()

	ПараметрыОблака.ЗапретитьИспользование = Не ПараметрыОблака.ЗапретитьИспользование;
	СсылкаТранспорта = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортОблачногоПровайдера(ОблачныйПровайдер);
	ОбъектТранспорта = СсылкаТранспорта.ПолучитьОбъект();
	ОбъектТранспорта.ЗапретитьИспользование = ПараметрыОблака.ЗапретитьИспользование;
	ОбъектТранспорта.Записать();
	
	Если ПараметрыОблака.ЗапретитьИспользование Тогда
		РасписаниеОблако = Справочники.ТранспортыОбменаДанными.РасписаниеСценария(СсылкаТранспорта);
		Справочники.ТранспортыОбменаДанными.ОбновитьПараметрыСценария(СсылкаТранспорта, РасписаниеОблако, Ложь); 
	КонецЕсли;

	ОбновитьПараметрыОблачногоПровайдера();
	ОбновитьЭлементыПоОблачномуСервису(ЭтотОбъект);
	
КонецПроцедуры
 

&НаКлиенте
Процедура ЗадатьВопросОбОтключенииДомашнейСети()

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Отключить синхронизацию в домашней сети?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОбОтключенииДомашнейСетиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбОтключенииДомашнейСетиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереключитьИспользованиеДомашнейСетиСервер();
		Оповестить("Обмен: изменение домашней сети");
	КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура ПереключитьИспользованиеДомашнейСетиСервер()

	ПараметрыДомашняяСеть.ЗапретитьИспользование = Не ПараметрыОблака.ЗапретитьИспользование;
	СсылкаТранспорта = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети();
	ОбъектТранспорта = СсылкаТранспорта.ПолучитьОбъект();
	ОбъектТранспорта.ЗапретитьИспользование = ПараметрыДомашняяСеть.ЗапретитьИспользование;
	ОбъектТранспорта.Записать();

КонецПроцедуры
 

// Сревис транспорта "Домашняя сеть"

&НаКлиенте
Процедура ПроверитьАдерсБазы()

	ОписаниеПроблемы = "";
	Если АдресБазыКорректен(ОписаниеПроблемы) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Адрес информационной базы указан правильно.
			|Для доступа к базе с других компьютеров может потребоваться изменить настройки роутера и защитных программ.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Иначе
		ПоказатьПредупреждение(, ОписаниеПроблемы);
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Функция АдресБазыКорректен(ОписаниеПроблемы)

	СтруктураАдреса = Неопределено;
	Если НЕ ПроверитьПравописаниеАдресаБазы(ПараметрыДомашняяСеть.WSURLВебСервиса, ОписаниеПроблемы, СтруктураАдреса) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИнтернетПрокси = ОбменМобильноеПриложение.НастройкиПроксиСервера();
	
	Соединение = Новый HTTPСоединение(СтруктураАдреса.Хост,
		СтруктураАдреса.Порт,
		СтруктураАдреса.Логин,
		СтруктураАдреса.Пароль,
		ИнтернетПрокси,
		10,
		?(Нрег(СтруктураАдреса.Схема) = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	АдресСервиса =  СтруктураАдреса.ПутьНаСервере + "/ws/MobileService?wsdl";
	Запрос = Новый HTTPЗапрос(АдресСервиса);
	
	Попытка
		РезультатЗапроса = Соединение.Получить(Запрос);
	Исключение
		ОписаниеПроблемы = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки; 
	
	//Коды состояния HTTP: 200 - успех, 401 - ошибка авторизации
	Если РезультатЗапроса.КодСостояния = 200 ИЛИ РезультатЗапроса.КодСостояния = 401 Тогда
		
		Возврат Истина;
		
	Иначе
		
		ОписаниеПроблемы = НСтр("ru = 'Не удалось проверить доступность сервисов по указанному адресу.
				|Убедитесь в корректности адреса'"); 
				
		Возврат Ложь;
		
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПравописаниеАдресаБазы(WSURLВебСервиса, ОписаниеПроблемы, СтруктураАдреса)

	Если НЕ ЗначениеЗаполнено(WSURLВебСервиса) Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не указан адрес информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли; 
	
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(WSURLВебСервиса);
	Если Не ЗначениеЗаполнено(СтруктураАдреса.Схема) Тогда
		СтруктураАдреса.Схема = "http";
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ИмяСервера) ИЛИ Не ЗначениеЗаполнено(СтруктураАдреса.ПутьНаСервере) Тогда
		ОписаниеПроблемы = НСтр("ru = 'Адрес информационной базыуказан некорректно.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли; 
	

	Возврат Истина;

КонецФункции


// Ручной обмен файлами

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайлаКлиент()
	
	ОчиститьСообщения();
	
	Если НЕ СинхронизацияВключена Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ТранспортФайлДоступен() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Чтение файла в данный момент недоступно. Возможно, не завершилось предыдущее чтение в этом или в другом сеансе'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = ИмяФайлаЗагрузки;
	Диалог.Заголовок = НСтр("ru = 'Выберите файл с мобильными данными для загрузки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Фильтр = НСтр("ru = 'Файлы сообщений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Фильтр = Фильтр + " (*.xml)|*.xml";
	Диалог.Фильтр = Фильтр;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяФайлаЗагрузки = Диалог.ВыбранныеФайлы[0];
	Отказ = Ложь;
	ОписаниеПроблемы = "";
	ИмяФайлаОтвета = "";
	ВыполнитьОбменФайламиСервер(ИмяФайлаЗагрузки, Отказ, ОписаниеПроблемы, ИмяФайлаОтвета);
	
	Если Отказ Тогда
		Сообщить(ОписаниеПроблемы);
	Иначе
		ТекстСообщения = НСтр("ru = 'Данные с мобильного устройства обработаны успешно.
			|Переместите на мобильное устройство файл <%1> и выполните там загрузку данных'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайлаОтвета);
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли; 
	
	ОбновитьВсеДанные();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбменФайламиСервер(ИмяФайла, Отказ, ОписаниеПроблемы, ИмяФайлаОтвета)

	Отказ = Ложь;
	ОписаниеПроблемы = "";
	УзелКорреспондента = Неопределено;
	Транспорт = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортКаталога();
	
	Если Не РегистрыСведений.КонтрольТранспортовОбмена.УстановитьНачалоРаботыТранспорта(Транспорт, НСтр("ru='Чтение полученного файла'")) Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизацияАвтономныхКопий.ЗагрузитьДанныеИзФайлаДляУзлаИнформационнойБазы(УзелКорреспондента, ИмяФайла, Отказ, Транспорт);
	
	Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
		// Регистрация события только после установки узла корреспондента
		РегистрыСведений.КонтрольОбменаДанными.УстановитьНачалоОбмена(УзелКорреспондента, Транспорт);
	КонецЕсли;
	
	Если Отказ Тогда
		
		ОписаниеПроблемы = СтрШаблон(НСтр("ru='Не удалось прочитать файл %1. 
				|Подробная информация записана в журнал регистрации'"), ИмяФайла); 
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(Транспорт, 
				ОписаниеПроблемы);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
		Возврат;
		
	КонецЕсли; 
	
	// Регистрация события только после установки узла корреспондента
	РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	
	// отправка ответа
	ОписаниеПроблемы = "";
	ОкончаниеФайла = Прав(ИмяФайлаЗагрузки, 3);
	Если ОкончаниеФайла = "xml" Тогда
		ИмяФайлаОтвета = Сред(ИмяФайлаЗагрузки, 1, СтрДлина(ИмяФайлаЗагрузки) - 3) + "repl.xml";
	Иначе
		ИмяФайлаОтвета = ИмяФайлаЗагрузки + ".repl.xml";
	КонецЕсли; 
	
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(Транспорт, НСтр("ru='Выгрузка изменений в файл ответа'"));
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Выгрузка файла для отправки вручную'"));
	СинхронизацияАвтономныхКопий.ВыгрузитьДанныеВФайлДляУзлаИнформационнойБазы(УзелКорреспондента, ИмяФайлаОтвета, Отказ);
	
	Если Отказ Тогда
		ОписаниеПроблемы = СтрШаблон(НСтр("ru='Не удалось выгрузить данные в файл %1. 
				|Подробная информация записана в журнал регистрации'"), ИмяФайлаОтвета); 
	КонецЕсли;
	
	РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелКорреспондента, 
				?(Отказ, Перечисления.РезультатыВыполненияОбмена.Ошибка, Перечисления.РезультатыВыполненияОбмена.Выполнено),
				?(Отказ, ОписаниеПроблемы, ""));
	РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
	
	РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(Транспорт, 
			?(Отказ, ОписаниеПроблемы, ""));
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТранспортФайлДоступен()

	ТранспортФайл = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортКаталога();
	Возврат РегистрыСведений.КонтрольТранспортовОбмена.ТранспортДоступенДляНовогоОбмена(ТранспортФайл);

КонецФункции


// Обмен через облачного провайдера

&НаКлиенте
Процедура ОткрытьОбменЧерезОблачногоПровайдера()

	// Параметры открываемой формы
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Провайдер", ОблачныйПровайдер);
	
	// Обработчик оповещения о закрытии формы
	ДополнительныеПараметры = Новый Структура();
	Оповещение = Новый ОписаниеОповещения("ОбменЧерезОблачногоПровайдераЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Открытие формы
	ОткрытьФорму(ДопРеквизитыФормы.ИмяЭтойОбработки + ".Форма.ИнтерактивныйОбменЧерезСервис", ПараметрыФормы, ЭтотОбъект, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	 

КонецПроцедуры

&НаКлиенте
Процедура ОбменЧерезОблачногоПровайдераЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьВсеДанные();
	ИзменитьВидимостьЭлементовФормы(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСервиса()
	
	КодСостояния = 0;
	ОписаниеОшибки = "";
	Если Не ПроверитьОблачныйКаталогСервер(ОписаниеОшибки, КодСостояния) Тогда
		ПоказатьПредупреждение(, Строка(КодСостояния) + ": " + ОписаниеОшибки);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Сервис готов к обмену'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьОблачныйКаталогСервер(ОписаниеПроблемы, КодОшибки)

	Если Не СинхронизацияВключена Тогда
		ОписаниеПроблемы = НСтр("ru = 'Отключено использование облачного сервиса'");
		Возврат Ложь;
	КонецЕсли;
	
	// Выполнение стандартных действий по подготовке обмена и проверке каталогов
	ОбъектОбработки = Обработки.ТранспортСообщенийОбменаОблачныйФайловыйСервис.Создать();
	ОбъектОбработки.Инициализация();

	Если НЕ ОбъектОбработки.ВыполнитьДействияПередОбработкойСообщения() Тогда
		ОписаниеПроблемы = ОбъектОбработки.СтрокаСообщенияОбОшибке;
		КодОшибки = ОбъектОбработки.КодТекущейОшибки;
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ ОбъектОбработки.ПодключениеУстановлено() Тогда
		ОписаниеПроблемы = ОбъектОбработки.СтрокаСообщенияОбОшибке;
		КодОшибки = ОбъектОбработки.КодТекущейОшибки;
		Возврат Ложь;
	КонецЕсли; 
	
	ОбъектОбработки.ВыполнитьДействияПослеОбработкиСообщения();
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыбранДругойСпособСинхронизации()

	Возврат Не ПолучитьФункциональнуюОпцию("ДеньгиИспользуетсяОбменСМобильными") 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");

КонецФункции
 
&НаКлиенте
Процедура ВыключитьСинхронизациюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыключитьСинхронизациюСервер();
	ОбновитьИнтерфейс();
	Оповестить("ИзмененаСинхронизация");
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыключитьСинхронизациюСервер()
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда 
		Константы.ИспользоватьСинхронизациюДанных.Установить(Ложь);
	КонецЕсли;

	// Выбор способа устанавливает функциональные опции
	Константы.ДеньгиВыбранныйСпособСинхронизации.Установить(Перечисления.СпособыСинхронизацииДанных.НеИспользовать);
	
КонецПроцедуры


#КонецОбласти
