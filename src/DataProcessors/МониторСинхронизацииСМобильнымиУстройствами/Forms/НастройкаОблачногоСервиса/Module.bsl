////////////////////////////////////////////////////////////////////////////////
//Обработка.МониторСинхронизации.Форма.НастройкаОблачногоСервиса
//  Выбор обчачного провайдера и настройка автоматического расписания
//  
//Параметры формы:
//	Провайдер - Перечисление.ТипыПровайдеровREST
//	ВключитьИспользованиеПриОткрытии - Булево - принудительное включеие использования сервиса
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВключитьИспользование", ВключитьИспользованиеПриОткрытии);
	Параметры.Свойство("Провайдер", Провайдер);
	
	ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	ИмяЭтойБазы              = ПараметрыЦентральнойБазы.ИмяЭтойБазы;
	ПрежнееИмяЭтойБазы       = ПараметрыЦентральнойБазы.ИмяЭтойБазы;
	
	ПровайдерИзНастроек = RESTВызовСервера.ПровайдерИзПараметраСеанса(СвойстваАккаунта);
	Если ЗначениеЗаполнено(Провайдер) И ЗначениеЗаполнено(ПровайдерИзНастроек) И Провайдер <> ПровайдерИзНастроек Тогда
		ПереключитьПровайдера();
	КонецЕсли;
	
	ОбновитьИнформациюОПровайдере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВключитьИспользованиеПриОткрытии И ЗапретитьИспользование Тогда
		// если задано - включаем и оповещаем об изменении
		ПереключитьСинхронизациюКлиент();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяЭтойБазыПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИмяЭтойБазы) Тогда
		ИмяЭтойБазы = ПрежнееИмяЭтойБазы;
		Возврат;
	КонецЕсли;
	
	Если ИмяЭтойБазы <> ПрежнееИмяЭтойБазы Тогда
		Если ЗначениеЗаполнено(ПрежнееИмяЭтойБазы) Тогда
			ЗадатьВопросОбИзмененииИмени();
		Иначе
			ОбновитьИмяБазыКлиент();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПровайдерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Провайдер) Тогда
		Провайдер = ПрежнийПровайдер;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрежнийПровайдер) И Провайдер <> ПрежнийПровайдер Тогда
		ЗадатьВопросОСменеПровайдера();
	Иначе
		ПереключитьПровайдера();
		ОповеститьОбИзменениях();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРасписаниеОблакоПриИзменении(Элемент)
	
	Элементы.ПредопределенноеРасписаниеОблако.Доступность   = ИспользоватьРасписаниеОблако;
	Элементы.НастроитьРасписаниеОблачногоСервиса.Доступность          = ИспользоватьРасписаниеОблако;
	
	ЗаписатьИзмененияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредопределенноеРасписаниеПриИзменении(Элемент)
	
	РасписаниеОблако = ПолучитьПредопределенноеРасписание(ПредопределенноеРасписаниеОблако);
	
	Если ПредопределенноеРасписаниеОблако <> "Другое" Тогда
		Элементы.НастроитьРасписаниеОблачногоСервиса.Заголовок = НСтр("ru = 'Настроить...'");
	КонецЕсли; 
	Элементы.НастроитьРасписаниеОблачногоСервиса.Видимость = ПредопределенноеРасписаниеОблако = "Другое";
	
	ЗаписатьИзмененияКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСостоянияСинхронизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПереключитьСинхронизациюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеОблачногоСервисаНажатие(Элемент)
	РедактированиеРасписанияРегламентногоЗадания();
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Авторизация(Команда)
	АвторизоватьКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОтменаАвторизации(Команда)
	ОтменитьАвторизациюКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСервиса(Команда)
	
	КодСостояния = 0;
	ОписаниеОшибки = "";
	Если Не ПроверитьОблачныйКаталогСервер(ОписаниеОшибки, КодСостояния) Тогда
		ПоказатьПредупреждение(, Строка(КодСостояния) + ": " + ОписаниеОшибки);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Сервис готов к обмену'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	
	ПереключитьСинхронизациюКлиент();
	
КонецПроцедуры
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПереключитьПровайдера()

	ВключатьСинхронизацию = Не ЗапретитьИспользование;
	
	// Отключаем расписание предыдущего провайдера
	Если ЗначениеЗаполнено(СсылкаТранспортОблако) Тогда
		Справочники.ТранспортыОбменаДанными.ОбновитьПараметрыСценария(СсылкаТранспортОблако, РасписаниеОблако, Ложь); 
	КонецЕсли;
	
	RESTВызовСервера.ПереключитьПровайдера(Провайдер);
	RESTВызовСервера.СохранитьПараметрыREST(Ложь);
	СвойстваАккаунта   = Неопределено;
	СвойстваПровайдера = Неопределено;
	ОбновитьИнформациюОПровайдере();
	
	Если ВключатьСинхронизацию И ЗапретитьИспользование Тогда
		ПереключитьИспользованиеСинхронизацииСервер();
	КонецЕсли;
	
	ЗаписатьИзменения();

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОПровайдере(Авторизован = Ложь)

	RESTКлиентСервер.ПроверитьСвойстваАккаунтаИПровайдера(Провайдер, СвойстваАккаунта, СвойстваПровайдера);
	Авторизован = ЗначениеЗаполнено(СвойстваАккаунта.КлючАвторизации);
	ТекстНастроек = "";
	Если Авторизован Тогда
		ТекстНастроек = ?(ЗначениеЗаполнено(СвойстваАккаунта.ПредставлениеАккаунта), 
				СтрШаблон(НСтр("ru='Авторизовано пользователем %1'"), СвойстваАккаунта.ПредставлениеАккаунта), 
				НСтр("ru='Авторизовано, пользователь не известен'")); 
	Иначе
		ТекстНастроек = НСтр("ru='Приложение не авторизовано'"); 
	КонецЕсли;
	
	Элементы.ИнформацияАвторизации.Заголовок = ТекстНастроек; 
	
	ПредставлениеАккаунта = ?(ЗначениеЗаполнено(СвойстваАккаунта.ПредставлениеАккаунта), СвойстваАккаунта.ПредставлениеАккаунта, "не авторизован!");
	
	СсылкаТранспортОблако = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортОблачногоПровайдера(Провайдер);
	ЗапретитьИспользование = СсылкаТранспортОблако.ЗапретитьИспользование;
	
	Элементы.ГруппаСообщениеОЗапрете.Видимость = ЗапретитьИспользование;
	Элементы.ГруппаВыборПровайдера.Доступность = Не ЗапретитьИспользование;
	
	ОбновитьПредставлениеРасписания();
	
	ПрежнийПровайдер = Провайдер;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписания()

	РасписаниеОблако = Справочники.ТранспортыОбменаДанными.РасписаниеСценария(СсылкаТранспортОблако, ИспользоватьРасписаниеОблако);
	ПредопределенноеРасписаниеОблако = ОпределитьТипПредопределенногоРасписания(РасписаниеОблако);
	Если ПредопределенноеРасписаниеОблако = "Другое" Тогда
		Элементы.НастроитьРасписаниеОблачногоСервиса.Заголовок = Строка(РасписаниеОблако);
	Иначе
		Элементы.НастроитьРасписаниеОблачногоСервиса.Заголовок = НСтр("ru = 'Настроить...'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли; 
	Элементы.НастроитьРасписаниеОблачногоСервиса.Видимость = (ПредопределенноеРасписаниеОблако = "Другое");
	
	Элементы.ПредопределенноеРасписаниеОблако.Доступность   = ИспользоватьРасписаниеОблако;
	Элементы.НастроитьРасписаниеОблачногоСервиса.Доступность          = ИспользоватьРасписаниеОблако;

КонецПроцедуры


&НаКлиенте
Процедура АвторизоватьКлиент()
	
	Оповещение = Новый ОписаниеОповещения("АвторизоватьЗавершение", ЭтотОбъект);
	RESTКлиент.ОткрытьФормуАвторизации(Провайдер, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАвторизациюКлиент()
	
	Оповещение = Новый ОписаниеОповещения("АвторизоватьЗавершение", ЭтотОбъект);
	RESTКлиент.ОткрытьФормуОтменыАвторизации(Провайдер, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторизоватьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	СвойстваАккаунта   = Неопределено;
	СвойстваПровайдера = Неопределено;
	
	Авторизован = Ложь;
	ОбновитьИнформациюОПровайдере(Авторизован);
	
	Если Авторизован Тогда
		
		КодСостояния = 0;
		ОписаниеОшибки = "";
		Если Не ПроверитьОблачныйКаталогСервер(ОписаниеОшибки, КодСостояния) Тогда
			ПоказатьПредупреждение(, Строка(КодСостояния) + ": " + ОписаниеОшибки);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Сервис готов к обмену'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредопределенноеРасписание(ТипРасписания)

	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	
	Если ТипРасписания = "ЧетвертьЧаса" Тогда
		Расписание.ПериодПовтораВТечениеДня = 60*15; // 15 минут
	ИначеЕсли ТипРасписания = "ПолЧаса" Тогда
		Расписание.ПериодПовтораВТечениеДня = 60*30; // 30 минут
	ИначеЕсли ТипРасписания = "Час" Тогда
		Расписание.ПериодПовтораВТечениеДня = 60*60; // 60 минут
	Иначе
		Расписание.ВремяНачала              = Дата('00010101210000'); // 21:00
	КонецЕсли; 
	
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
	
КонецФункции
 
&НаСервереБезКонтекста
Функция ОпределитьТипПредопределенногоРасписания(Расписание)

	Если ЗначениеЗаполнено(Расписание.ВремяЗавершения)
		ИЛИ ЗначениеЗаполнено(Расписание.ВремяКонца) 
		ИЛИ ЗначениеЗаполнено(Расписание.ВремяНачала) 
		ИЛИ ЗначениеЗаполнено(Расписание.ДатаКонца) 
		ИЛИ ЗначениеЗаполнено(Расписание.ДатаНачала) 
		ИЛИ Расписание.ДетальныеРасписанияДня.Количество() > 0 
		ИЛИ Расписание.ДниНедели.Количество() <> 7 
		ИЛИ Расписание.Месяцы.Количество() <> 12 
		ИЛИ Расписание.ПериодПовтораДней <> 1
		Тогда
		Возврат "Другое";
	КонецЕсли; 

	Если Расписание.ПериодПовтораВТечениеДня = 60*15 Тогда
		Возврат "ЧетвертьЧаса";
	ИначеЕсли Расписание.ПериодПовтораВТечениеДня = 60*30 Тогда
		Возврат "ПолЧаса";
	ИначеЕсли Расписание.ПериодПовтораВТечениеДня = 60*60 Тогда
		Возврат "Час";
	Иначе
		Возврат "Другое";
	КонецЕсли; 
	
КонецФункции
 
&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	Если РасписаниеОблако = Неопределено Тогда
		
		РасписаниеОблако = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеОблако);
	
	// открываем диалог для редактирования Расписания
	ДополнительныеПараметры = Новый Структура();
	ОписаниеОповещения      = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеОблако = Расписание;
		ПредопределенноеРасписаниеОблако = ОпределитьТипПредопределенногоРасписания(РасписаниеОблако);
		Если ПредопределенноеРасписаниеОблако = "Другое" Тогда
			Элементы.НастроитьРасписаниеОблачногоСервиса.Заголовок = Строка(РасписаниеОблако);
			Элементы.НастроитьРасписаниеОблачногоСервиса.Видимость = Истина;
		Иначе
			Элементы.НастроитьРасписаниеОблачногоСервиса.Заголовок = НСтр("ru = 'Изменить...'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			Элементы.НастроитьРасписаниеОблачногоСервиса.Видимость = Ложь;
		КонецЕсли; 
		
		ЗаписатьИзмененияКлиент();
		
		ОбновитьПредставлениеРасписания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияКлиент()

	ЗаписатьИзменения();
	ОповеститьОбИзменениях();

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзменениях()

	Оповестить("Обмен: изменение облачного провайдера");

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения()

	Если Не ЗначениеЗаполнено(Провайдер) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаТранспортОблако) Тогда
		СсылкаТранспортОблако = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортОблачногоПровайдера(Провайдер);
	КонецЕсли;
	
	СправочникОбъект = СсылкаТранспортОблако.ПолучитьОбъект();
	Если СправочникОбъект.ЗапретитьИспользование <> ЗапретитьИспользование Тогда
		СправочникОбъект.ЗапретитьИспользование = ЗапретитьИспользование;
	КонецЕсли;
	Если СправочникОбъект.Модифицированность() Тогда
		СправочникОбъект.Записать();
	КонецЕсли;
	
	Справочники.ТранспортыОбменаДанными.ОбновитьПараметрыСценария(СсылкаТранспортОблако, РасписаниеОблако, ИспользоватьРасписаниеОблако И Не ЗапретитьИспользование); 

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСинхронизациюКлиент()

	Если ЗапретитьИспользование Тогда
		ПереключитьИспользованиеСинхронизацииСервер();
		ОповеститьОбИзменениях();
		Возврат;
	КонецЕсли;
	
	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='После отключения обмена приложение не сможет получать или отправлять данные через облачные сервисы.
		|Отключить сисинхронизацию?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПереключитьСинхронизациюКлиентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСинхронизациюКлиентЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереключитьИспользованиеСинхронизацииСервер();
		ОповеститьОбИзменениях();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПереключитьИспользованиеСинхронизацииСервер()

	ЗапретитьИспользование = Не ЗапретитьИспользование;
	Если ЗапретитьИспользование Тогда
		ИспользоватьРасписаниеОблако = Ложь;
	КонецЕсли;
	
	ЗаписатьИзменения();
	
	ОбновитьИнформациюОПровайдере();

КонецПроцедуры

&НаСервере
Функция ПроверитьОблачныйКаталогСервер(ОписаниеПроблемы, КодОшибки)

	Если ЗапретитьИспользование Тогда
		ОписаниеПроблемы = НСтр("ru = 'Отключено использование облачного сервиса'");
		Возврат Ложь;
	КонецЕсли;
	
	// Выполнение стандартных действий по подготовке обмена и проверке каталогов
	ОбъектОбработки = Обработки.ТранспортСообщенийОбменаОблачныйФайловыйСервис.Создать();
	ОбъектОбработки.Инициализация();

	Если НЕ ОбъектОбработки.ВыполнитьДействияПередОбработкойСообщения() Тогда
		ОписаниеПроблемы = ОбъектОбработки.СтрокаСообщенияОбОшибке;
		КодОшибки = ОбъектОбработки.КодТекущейОшибки;
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ ОбъектОбработки.ПодключениеУстановлено() Тогда
		ОписаниеПроблемы = ОбъектОбработки.СтрокаСообщенияОбОшибке;
		КодОшибки = ОбъектОбработки.КодТекущейОшибки;
		Возврат Ложь;
	КонецЕсли; 
	
	ОбъектОбработки.ВыполнитьДействияПослеОбработкиСообщения();
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьПараметрыЦентральнойБазы(ИмяЭтойБазы, ПрежнееИмяЭтойБазы)

	ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений(Ложь);
	ПараметрыЦентральнойБазы.ИмяЭтойБазы = ИмяЭтойБазы;
	Константы.ПараметрыЦентральнойБазыМобильныхПриложений.Установить(Новый ХранилищеЗначения(ПараметрыЦентральнойБазы));
	ПрежнееИмяЭтойБазы = ИмяЭтойБазы;

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбИзмененииИмени()

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='После изменения имени базы потребуется измениь настройки на всех мобильных устройствах!
			|Изменить имя этой базы?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОбИзмененииИмениЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти
	 

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбИзмененииИмениЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьИмяБазыКлиент();
	Иначе
		ИмяЭтойБазы = ПрежнееИмяЭтойБазы;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИмяБазыКлиент()

	Состояние(НСтр("ru='Подождите, в облаке создается файл списка устройств...'"));
	ОбновитьПараметрыЦентральнойБазы(ИмяЭтойБазы, ПрежнееИмяЭтойБазы);
	ОповеститьОбИзменениях();
	
	КодСостояния = 0;
	ОписаниеОшибки = "";
	Если Не ПроверитьОблачныйКаталогСервер(ОписаниеОшибки, КодСостояния) Тогда
		ПоказатьПредупреждение(, Строка(КодСостояния) + ": " + ОписаниеОшибки);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='В облачном сервисе создан новый файл списка устройств'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСменеПровайдера()

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='После изменения облачного сервиса потребуется измениь настройки на всех мобильных устройствах!
			|Изменить облачный сервис?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ЗадатьВопросОСменеПровайдераЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти
	 

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСменеПровайдераЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние(НСтр("ru='Подождите, идет настройка облачного сервиса...'"));
		ПереключитьПровайдера();
		ОповеститьОбИзменениях();
		
		КодСостояния = 0;
		ОписаниеОшибки = "";
		Если Не ПроверитьОблачныйКаталогСервер(ОписаниеОшибки, КодСостояния) Тогда
			ПоказатьПредупреждение(, Строка(КодСостояния) + ": " + ОписаниеОшибки);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Синхронизация переведена на другой облачный сервис'"));
		КонецЕсли;
		
	Иначе
		Провайдер = ПрежнийПровайдер;
	КонецЕсли;

КонецПроцедуры



#КонецОбласти
