////////////////////////////////////////////////////////////////////////////////
//Обработка.ИмяОбработки.Форма.ИмяФормы
//  _Назначение_
//  
//Параметры формы:
//	ВключитьИспользованиеПриОткрытии - Булево - принудительное включеие использования сервиса
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СсылкаТранспортДомашняяСеть = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети();
	ОбъектТранспорта            = СсылкаТранспортДомашняяСеть.ПолучитьОбъект();
	WSURLВебСервиса             = ОбъектТранспорта.ЗначениеПараметраТранспорта("WSURLВебСервиса");
	ТекущийIP                   = WSURLВебСервиса;
	ЗапретитьИспользование      = ОбъектТранспорта.ЗапретитьИспользование;
	
	Параметры.Свойство("ВключитьИспользование", ВключитьИспользованиеПриОткрытии);
	
	ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	
	ЗаполнитьСистемныеПараметры();
	
	// Автоматические настройки - только для windows
	Если СистемныеПараметры.Платформа = "win" Тогда
		Элементы.ГруппаСтраницНастроек.ТекущаяСтраница = Элементы.СтраницаWindows;
	Иначе
		Элементы.ГруппаСтраницНастроек.ТекущаяСтраница = Элементы.СтраницаДругаяСистема;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВключитьИспользованиеПриОткрытии И ЗапретитьИспользование Тогда
		// если задано - включаем и оповещаем об изменении
		ПереключитьСинхронизациюКлиент();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстПояснения1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТекстСостоянияСинхронизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПереключитьСинхронизациюКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПояснения2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПояснения3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПояснения4ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПояснения5ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура WSURLВебСервисаПриИзменении(Элемент)
	ЗаписатьИзменения();
	ОповеститьОбИзменениях();
КонецПроцедуры



#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отключить(Команда)
	
	ПереключитьСинхронизациюКлиент();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПроверитьАдрес(Команда)
	
	ОписаниеПроблемы = "";
	ОчиститьСообщения();
	Если АдресБазыКорректен(ОписаниеПроблемы) Тогда
		ДомашняяСетьПроверена = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Адрес информационной базы указан правильно'"));
	Иначе
		ДомашняяСетьПроверена = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеПроблемы, , "WSURLВебСервиса");
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСистемныеПараметры()

	СистемныеПараметры = Новый Структура;
	СистемныеПараметры.Вставить("БазаОпубликована", Ложь);

	// Определение ОС
	СистемнаяИфнормация = Новый СистемнаяИнформация;
	Если СистемнаяИфнормация.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИфнормация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		СистемныеПараметры.Вставить("Платформа", "win");
	ИначеЕсли СистемнаяИфнормация.ТипПлатформы = ТипПлатформы.MacOS_x86 ИЛИ СистемнаяИфнормация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		СистемныеПараметры.Вставить("Платформа", "mac");
	Иначе
		СистемныеПараметры.Вставить("Платформа", "linux");
		Элементы.НадписьСостояниеДомашняяСеть.Заголовок = НСтр("ru = 'В текущей версии программы автоматическая проверка и установка ПО недоступна.'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли; 
	
	ПроверитьНастройкиДомашнейСетиСервер(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСинхронизациюКлиент()

	Если ЗапретитьИспользование Тогда
		ПереключитьИспользованиеСинхронизацииСервер();
		ОповеститьОбИзменениях();
		Возврат;
	КонецЕсли;
	
	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='После отключения обмена приложение не сможет получать или отправлять данные в домашней сети.
		|Отключить сисинхронизацию?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПереключитьСинхронизациюКлиентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьСинхронизациюКлиентЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПереключитьИспользованиеСинхронизацииСервер();
		ОповеститьОбИзменениях();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПереключитьИспользованиеСинхронизацииСервер()

	ЗапретитьИспользование = Не ЗапретитьИспользование;
	ЗаписатьИзменения();
	ОбновитьДоступностьОбмена(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзменения()

	СправочникОбъект = СсылкаТранспортДомашняяСеть.ПолучитьОбъект();
	Если СправочникОбъект.ЗапретитьИспользование <> ЗапретитьИспользование Тогда
		СправочникОбъект.ЗапретитьИспользование = ЗапретитьИспользование;
	КонецЕсли;
	Если ТекущийIP <> WSURLВебСервиса Тогда
		СправочникОбъект.УстановитьЗначениеПараметраТранспорта("WSURLВебСервиса", WSURLВебСервиса);
		ТекущийIP = WSURLВебСервиса;
	КонецЕсли;
	 
	Если СправочникОбъект.Модифицированность() Тогда
		СправочникОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзменениях()

	Оповестить("Обмен: изменение домашней сети");

КонецПроцедуры

&НаКлиенте
Процедура ОбщаяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	ТипСсылки     = "";
	КомандаСсылки = "";
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "e1c://Документация_") = 1 Тогда
		ТипСсылки = "Документация";
		КомандаСсылки = Сред(НавигационнаяСсылкаФорматированнойСтроки, 20);
	ИначеЕсли СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "e1c://Настройка_") = 1 Тогда
		ТипСсылки = "Настройка";
		КомандаСсылки = Сред(НавигационнаяСсылкаФорматированнойСтроки, 17);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Прав(КомандаСсылки, 1) = "/" Тогда
		КомандаСсылки = Сред(КомандаСсылки, 1, СтрДлина(КомандаСсылки) - 1);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ТипСсылки = "Документация" Тогда
		ОткрытьФайлДокументации(КомандаСсылки);
	ИначеЕсли ТипСсылки = "Настройка" Тогда
		ВыполнитьКомандуНастройки(КомандаСсылки);
	КонецЕсли;
	 

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуНастройки(КомандаСсылки)

	Если КомандаСсылки = "ПроверкаПубликации" Тогда
		ПроверитьНастройкиДомашнейСетиСервер(3);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДокументации(КомандаСсылки)

	ИмяИнструкции = "Обработка.МониторСинхронизацииСМобильнымиУстройствами" + ?(ЗначениеЗаполнено(КомандаСсылки), ".Форма." + КомандаСсылки, "");
	Если Прав(ИмяИнструкции, 1) = "/" Тогда
		ИмяИнструкции = Сред(ИмяИнструкции, 1, СтрДлина(ИмяИнструкции) - 1);
	КонецЕсли;
	
	Если Не ОткрытьСправку(ИмяИнструкции) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Извините, эта справка отсутствует в текущей версии программы'"));
	КонецЕсли;

КонецПроцедуры


// Проверка готовности к синхронизации с использованием локального веб-сервера
#Область ПреверкаИНастройкаДомашнейСети

&НаСервере
Процедура ПроверитьНастройкиДомашнейСетиСервер(УровеньПроверки)

	// Наличие веб-расширения
	СистемныеПараметры.Вставить("ВебРасширениеУстановлено",    ПроверитьУстановкуВебРасширения());
	
	// Параметры сети и операционной системы
	СистемныеПараметры.Вставить("СистемныеПараметрыПрочитаны", ЗаполнитьСистемныеПараметрыДаннымиОС());
	
	
	Если УровеньПроверки > 0 Тогда
		// Проверяем доступность сервиса через localhost
		СистемныеПараметры.Вставить("СервисДоступен", ПроверитьТекущиеНастройкиПубликацииИБ());
	КонецЕсли; 
	
	Если УровеньПроверки > 1 Тогда
		// Проверяем доступность сервиса через адрес, указанный в настройках
		Если ПолучитьКоличествоУстановленныхВебСерверов() > 0 И ОпределитьПубликациюБазыНаСерверах() Тогда
			СистемныеПараметры.Вставить("СервисПроверен", ПроверитьСерверныеНастройкиПубликацииИБ());
			СистемныеПараметры.Вставить("БазаОпубликована", Истина);
		КонецЕсли;
	КонецЕсли; 
	

КонецПроцедуры

// Получение параметров операционной системы

&НаСервере
Функция ЗаполнитьСистемныеПараметрыДаннымиОС()

	Если СистемныеПараметры.Платформа = "win" Тогда
		Результат = ЗаполнитьСистемныеПараметрыДаннымиОСWindows();
	Иначе
		Результат = Неопределено;
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции
 
&НаСервере
Функция ЗаполнитьСистемныеПараметрыДаннымиОСWindows()

	Отказ                 = Ложь;
	ИмяВремФайла          = ПолучитьИмяВременногоФайла("tmp");
	ИмяВремФайлаВСкриптах = """" + ИмяВремФайла + """";
	ОписаниеПроблемы      = "";
	ОболочкаСкриптов      = Новый COMОбъект("WScript.Shell"); 

	// Заполняемые параметры:
	СистемныеПараметры.Вставить("APPDATA", "");
	СистемныеПараметры.Вставить("COMPUTERNAME", "");
	СистемныеПараметры.Вставить("USERNAME", "");
	СистемныеПараметры.Вставить("SERDOMAIN", "");
	СистемныеПараметры.Вставить("SYSTEMROOT", "");
	СистемныеПараметры.Вставить("SYSTEMDRIVE", "");
	СистемныеПараметры.Вставить("ЗапущеноСПравамиАдминистратора", Ложь);
	СистемныеПараметры.Вставить("MAC", "");
	СистемныеПараметры.Вставить("IP", Новый Структура);
	
#Область ПеременныеОкруженияWindows
	ТекущееДействие  = НСтр("ru = 'Получение переменных среды Windows'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстСкрипта     = "cmd /C echo %APPDATA%*%COMPUTERNAME%*%USERNAME%*%USERDOMAIN%*%SystemRoot%*%SYSTEMDRIVE% > " + ИмяВремФайлаВСкриптах;
	РезультатСкрипта = ОболочкаСкриптов.Run(ТекстСкрипта, 0, Истина);
	
	Файл = Новый Файл(ИмяВремФайла);
	Если Файл.Существует() Тогда
		
		ЧтениеТекста  = Новый ЧтениеТекста(ИмяВремФайла);
		СтрокаПеременных = СокрЛП(ЧтениеТекста.ПрочитатьСтроку());
		
		МассивПеременных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаПеременных, "*");
		СистемныеПараметры.Вставить("APPDATA",      ?(МассивПеременных.Количество() >= 1, МассивПеременных[0], ""));
		СистемныеПараметры.Вставить("COMPUTERNAME", ?(МассивПеременных.Количество() >= 2, МассивПеременных[1], ""));
		СистемныеПараметры.Вставить("USERNAME",     ?(МассивПеременных.Количество() >= 3, МассивПеременных[2], ""));
		СистемныеПараметры.Вставить("USERDOMAIN",   ?(МассивПеременных.Количество() >= 4, МассивПеременных[3], ""));
		СистемныеПараметры.Вставить("SYSTEMROOT",   ?(МассивПеременных.Количество() >= 5, МассивПеременных[4], ""));
		СистемныеПараметры.Вставить("SYSTEMDRIVE",  ?(МассивПеременных.Количество() >= 6, МассивПеременных[5], ""));
		
		ЧтениеТекста.Закрыть();
		УдалитьФайлы(ИмяВремФайла);
		
	Иначе
		
		ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, 
			НСтр("ru = 'Не удалось прочитать переменные окружения Windows'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			Отказ, ОписаниеПроблемы);
		Возврат Ложь;
		
	КонецЕсли;

#КонецОбласти
	
#Область ПроверкаПравАдминистратора

	ТекущееДействие  = НСтр("ru = 'Проверка прав админисратора в ОС Windows'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Попытка
	
		СлужбаWMI = GetComObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2");
		ТекстЗапроса = "SELECT Caption, ExecutablePath, Description, CommandLine  FROM Win32_Process where Caption LIKE ""svchost%""";
		
		РезультатЗапроса = СлужбаWMI.ExecQuery(ТекстЗапроса);
		Если РезультатЗапроса <> Неопределено Тогда
			Для Каждого СтрокаЗаписи Из РезультатЗапроса Цикл
				Если ЗначениеЗаполнено(СтрокаЗаписи.ExecutablePath) Тогда
					СистемныеПараметры.ЗапущеноСПравамиАдминистратора = Истина;
				КонецЕсли;
				Прервать;
			КонецЦикла; 
		КонецЕсли; 
	
	Исключение
	
		ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, 
			ИнформацияОбОшибке(), 
			Отказ, ОписаниеПроблемы);
		Возврат Ложь;
		
	КонецПопытки; 
		
#КонецОбласти

#Область ПолучениеСетевыхАдресов

		ТекущееДействие = НСтр("ru = 'Определение сетевых адресов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

		Попытка
		
	        СлужбаWMI = GetComObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2");
			
			РезультатЗапроса = СлужбаWMI.ExecQuery("SELECT MACAddress FROM Win32_NetworkAdapter WHERE NetConnectionStatus=2");
	        Для каждого Элемент Из РезультатЗапроса Цикл
	            Если СокрЛП(Элемент["MACAddress"]) <> "" Тогда
	                СистемныеПараметры.MAC = СокрЛП(Элемент["MACAddress"]);
	                Прервать;
	            КонецЕсли;
			КонецЦикла;
			
	        РезультатЗапроса = СлужбаWMI.ExecQuery("Select IPAddress from Win32_NetworkAdapterConfiguration where ipenabled = true" 
						+ ?(СистемныеПараметры.Свойство("MAC") И ЗначениеЗаполнено(СистемныеПараметры.MAC), " and MACAddress=""" + СистемныеПараметры.MAC + """", ""));
			Для Каждого ОбъектРезультата Из РезультатЗапроса Цикл
	            Если ТипЗнч(ОбъектРезультата.IPAddress) = Тип("COMSafeArray") Тогда
					Для Каждого Элем Из ОбъектРезультата.IPAddress Цикл
						Если Лев(Элем,4) = "192." Тогда
		                    СистемныеПараметры.IP.Вставить("Внутренний192", Элем);
						ИначеЕсли Лев(Элем,3) = "10." Тогда
		                    СистемныеПараметры.IP.Вставить("Внутренний10", Элем);
						ИначеЕсли Найти(Элем, ":") > 0 Тогда
		                    СистемныеПараметры.IP.Вставить("ipV6", Элем);
						Иначе 
		                    СистемныеПараметры.IP.Вставить("Внешний", Элем);
						КонецЕсли; 
	                КонецЦикла;
	            КонецЕсли;    
			КонецЦикла; 
		
		Исключение
		
			ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, 
				ИнформацияОбОшибке(), 
				Отказ, ОписаниеПроблемы);
			Возврат Ложь;
			
		КонецПопытки; 
	

#КонецОбласти


	// Выбираем из IP подходящий
	Если СистемныеПараметры.IP.Свойство("Внешний") И ЗначениеЗаполнено(СистемныеПараметры.IP.Внешний) Тогда
		ТекущийIP = СистемныеПараметры.IP.Внешний;
	ИначеЕсли СистемныеПараметры.IP.Свойство("Внутренний10") И ЗначениеЗаполнено(СистемныеПараметры.IP.Внутренний10) Тогда
		ТекущийIP = СистемныеПараметры.IP.Внутренний10;
	ИначеЕсли СистемныеПараметры.IP.Свойство("Внутренний192") И ЗначениеЗаполнено(СистемныеПараметры.IP.Внутренний192) Тогда
		ТекущийIP = СистемныеПараметры.IP.Внутренний192;
	Иначе
		ТекущийIP = "";
	КонецЕсли; 

	Файл = Новый Файл(ИмяВремФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяВремФайла);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции
 

// Проверка установленной компоненты веб-расширения

&НаСервере
Функция ПроверитьУстановкуВебРасширения()

	Если СистемныеПараметры.Платформа = "win" Тогда
		Возврат ПроверитьУстановкуВебРасширенияОСWindows();
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

&НаСервере
Функция ПроверитьУстановкуВебРасширенияОСWindows()

	Отказ                 = Ложь;
	ОписаниеПроблемы      = "";
	
	// Заполняемые параметры:
	СистемныеПараметры.Вставить("ВебРасширениеУстановлено", Ложь);

	ТекущееДействие = НСтр("ru = 'Проверка веб-расширения платформы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Попытка
	
		ИмяФайла = КаталогПрограммы();
		ИмяФайла = ИмяФайла + ?(Прав(ИмяФайла, 1) = "\", "", "\") + "webinst.exe";
		Файл = Новый Файл(ИмяФайла);
		ФлагВебРасширениеУстановлено = Файл.Существует() И Файл.ЭтоФайл();
		Файл = Неопределено;
		СистемныеПараметры.ВебРасширениеУстановлено = ФлагВебРасширениеУстановлено;
	
	Исключение
	
		ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, 
			ИнформацияОбОшибке(), 
			Отказ, ОписаниеПроблемы);
		Возврат Ложь;
		
	КонецПопытки; 
	
	Возврат СистемныеПараметры.ВебРасширениеУстановлено;
	
КонецФункции


// Проверка доступность веб-сервиса

&НаСервере
Функция ПроверитьТекущиеНастройкиПубликацииИБ()

	Результат = ЗначениеЗаполнено(ПараметрыЦентральнойБазы.ВебСервер)
		И ЗначениеЗаполнено(ПараметрыЦентральнойБазы.IPАдрес)
		И СервисДоступен(ПараметрыЦентральнойБазы.НомерПорта, ПараметрыЦентральнойБазы.ИмяЭтойБазы);
		
	Если НЕ Результат Тогда
		ПараметрыЦентральнойБазы.IPАдрес    = "";
		ПараметрыЦентральнойБазы.НомерПорта = "";
	КонецЕсли; 
	ПараметрыЦентральнойБазы.Вставить("ПубликацияПроверена", Результат);
	
	Возврат Результат;

КонецФункции
 
&НаКлиентеНаСервереБезКонтекста 
Функция СервисДоступен(НомерПорта, ИмяБазы)

#Если Не ВебКлиент Тогда
	
	АдресСервиса =  ИмяБазы + "/ws/MobileService?wsdl";
	Соединение = Новый HTTPСоединение("localhost", ?(ЗначениеЗаполнено(НомерПорта), Число(НомерПорта), 80));
	Запрос = новый HTTPЗапрос(АдресСервиса);
	Попытка
		РезультатЗапроса = Соединение.Получить(Запрос);
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
	//Коды состояния HTTP: 200 - успех, 401 - ошибка авторизации
	Возврат РезультатЗапроса <> Неопределено И (РезультатЗапроса.КодСостояния = 200 ИЛИ РезультатЗапроса.КодСостояния = 401);
#КонецЕсли 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьПравописаниеАдресаБазы(WSURLВебСервиса, ОписаниеПроблемы, СтруктураАдреса)

	Если НЕ ЗначениеЗаполнено(WSURLВебСервиса) Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не указан адрес информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли; 
	
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(WSURLВебСервиса);
	Если Не ЗначениеЗаполнено(СтруктураАдреса.Схема) Тогда
		СтруктураАдреса.Схема = "http";
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ИмяСервера) ИЛИ Не ЗначениеЗаполнено(СтруктураАдреса.ПутьНаСервере) Тогда
		ОписаниеПроблемы = НСтр("ru = 'Адрес информационной базы указан некорректно.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Возврат Ложь;
	КонецЕсли; 
	

	Возврат Истина;

КонецФункции

&НаСервере
Функция АдресБазыКорректен(ОписаниеПроблемы)

	СтруктураАдреса = Неопределено;
	Если НЕ ПроверитьПравописаниеАдресаБазы(WSURLВебСервиса, ОписаниеПроблемы, СтруктураАдреса) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ИнтернетПрокси = ОбменМобильноеПриложение.НастройкиПроксиСервера();
	
	Соединение = Новый HTTPСоединение(СтруктураАдреса.Хост,
		СтруктураАдреса.Порт,
		СтруктураАдреса.Логин,
		СтруктураАдреса.Пароль,
		ИнтернетПрокси,
		10,
		?(Нрег(СтруктураАдреса.Схема) = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	АдресСервиса =  СтруктураАдреса.ПутьНаСервере + "/ws/MobileService?wsdl";
	Запрос = Новый HTTPЗапрос(АдресСервиса);
	
	Попытка
		РезультатЗапроса = Соединение.Получить(Запрос);
	Исключение
		ОписаниеПроблемы = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки; 
	
	//Коды состояния HTTP: 200 - успех, 401 - ошибка авторизации
	Если РезультатЗапроса.КодСостояния = 200 ИЛИ РезультатЗапроса.КодСостояния = 401 Тогда
		
		// Обновляем параметры центральной базы
		ПараметрыЦентральнойБазы.ЗащищенноеСоединение = Нрег(СтруктураАдреса.Схема) = "https";
		ПараметрыЦентральнойБазы.ИмяЭтойБазы = СтруктураАдреса.ПутьНаСервере;
		ПараметрыЦентральнойБазы.НомерПорта = СтруктураАдреса.Порт;
		ПараметрыЦентральнойБазы.IPАдрес = СтруктураАдреса.Хост;
		ПараметрыЦентральнойБазы.ПубликацияПроверена = Ложь;
		Константы.ПараметрыЦентральнойБазыМобильныхПриложений.Установить(Новый ХранилищеЗначения(ПараметрыЦентральнойБазы));
		
		ИмяЭтойБазы = ПараметрыЦентральнойБазы.ИмяЭтойБазы;
		ТекущийIP   = ПараметрыЦентральнойБазы.IPАдрес;
		
		Возврат Истина;
		
	Иначе
		ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'Не удалось проверить доступность сервисов по указанному адресу.
				|Код состояния: %1
				|%2'"), РезультатЗапроса.КодСостояния, "Проверьте корректность адреса и настройки веб-сервера"); 
				
		Возврат Ложь;
	КонецЕсли; 
	
	
КонецФункции

// Проверка веб-серверов

&НаСервере
Функция ПолучитьКоличествоУстановленныхВебСерверов()

	Если СистемныеПараметры.Платформа = "win" Тогда
		Возврат ПолучитьКоличествоУстановленныхВебСерверовОСWindows();
	Иначе
		Возврат 0;
	КонецЕсли; 

КонецФункции

&НаСервере
Функция ПолучитьКоличествоУстановленныхВебСерверовОСWindows()

	Отказ                 = Ложь;
	ИмяВремФайла          = ПолучитьИмяВременногоФайла("tmp");
	ИмяВремФайлаВСкриптах = """" + ИмяВремФайла + """";
	ОписаниеПроблемы      = "";
	ОболочкаСкриптов      = Новый COMОбъект("WScript.Shell"); 
	
	ТекущееДействие = НСтр("ru = 'Поиск работающих веб-серверов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	// Заполняемые параметры:
	СистемныеПараметры.Вставить("ВебСерверы", Новый Структура);
	СистемныеПараметры.Вставить("СвободныйПорт", "");
	
	// Временная структура
	СтруктураСерверов = Новый Структура;
	СтруктураСерверов.Вставить("IIS", Новый Массив);
	СтруктураСерверов.Вставить("Apache", Новый Массив);
	
	Попытка
	
		// Чтение ключей регистра
		HKLM = 2147483650;
		СлужбаWMI = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:stdRegProv");
		
		// Определение MS IIS
		ЗначениеПараметра = "";
		Если СлужбаWMI.GetStringValue(HKLM, "SOFTWARE\Microsoft\InetStp", "InstallPath", ЗначениеПараметра) = 0 Тогда
			СистемныеПараметры.ВебСерверы.Вставить("IIS", Новый Структура("Каталог,Порт,КаталогДокументов,Версия,ПараметрыЗапуска", ЗначениеПараметра, "", "", "", ""));
			Если СлужбаWMI.GetStringValue(HKLM, "SOFTWARE\Microsoft\InetStp", "PathWWWRoot", ЗначениеПараметра) = 0 Тогда
				СистемныеПараметры.ВебСерверы.IIS.КаталогДокументов = ЗначениеПараметра;
			КонецЕсли;
			Если СлужбаWMI.GetStringValue(HKLM, "SOFTWARE\Microsoft\InetStp", "VersionString", ЗначениеПараметра) = 0 Тогда
				СистемныеПараметры.ВебСерверы.IIS.Версия = ЗначениеПараметра;
			КонецЕсли;
		КонецЕсли; 
		
		// Определение Apache 2.2
		ЗначениеПараметра = "";
		МассивКлючей = Новый Массив;
		Если СлужбаWMI.EnumKey (HKLM, "Software\Apache Software Foundation\Apache", МассивКлючей) = 0 Тогда
			
			// Есть записи об установке сервера
			МаксВерсия = "";
			Для Каждого КлючВерсииСервера Из МассивКлючей Цикл
				Если КлючВерсииСервера > МаксВерсия Тогда
					МаксВерсия = КлючВерсииСервера;
				КонецЕсли; 
			КонецЦикла; 
			
			Если СлужбаWMI.GetStringValue(HKLM, "Software\Apache Software Foundation\Apache\" + МаксВерсия, "ServerRoot", ЗначениеПараметра) = 0 Тогда
				СистемныеПараметры.ВебСерверы.Вставить("Apache", Новый Структура("Каталог,Порт,КаталогДокументов,Версия,ПараметрыЗапуска", ЗначениеПараметра, "", "", МаксВерсия, ""));
			КонецЕсли; 
			
			Если СлужбаWMI.GetStringValue(HKLM, "Software\Apache Software Foundation\Apache\" + МаксВерсия, "DocumentRoot", ЗначениеПараметра) = 0 Тогда
				СистемныеПараметры.ВебСерверы.Apache.КаталогДокументов = ЗначениеПараметра;
			КонецЕсли; 
			
		Иначе
			
			// Записей об установки нет, проверяем запущенные процессы
			Если СлужбаWMI.GetStringValue(HKLM, "SYSTEM\CurrentControlSet\Services\Apache2.2", "ImagePath", ЗначениеПараметра) = 0 Тогда
				ПараметрыЗапуска = Сред(ЗначениеПараметра, Найти(ЗначениеПараметра, " -"));
				ЗначениеПараметра = Лев(ЗначениеПараметра, Найти(Врег(ЗначениеПараметра), "HTTPD.EXE")-1);
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, """", "");
				СистемныеПараметры.ВебСерверы.Вставить("Apache", Новый Структура("Каталог,Порт,КаталогДокументов,Версия,ПараметрыЗапуска", ЗначениеПараметра, "", "", "2.2", ПараметрыЗапуска));
			КонецЕсли; 
			
		КонецЕсли;
		
		Если НЕ СистемныеПараметры.ВебСерверы.Свойство("Apache") Тогда
			
			// Проверяем наличие версии Apache 2.0
			ЗначениеПараметра = "";
			МассивКлючей = Новый Массив;
			Если СлужбаWMI.EnumKey (HKLM, "Software\Apache Group\Apache", МассивКлючей) = 0 Тогда
				
				// Есть записи об установке сервера
				МаксВерсия = "";
				Для Каждого КлючВерсииСервера Из МассивКлючей Цикл
					Если КлючВерсииСервера > МаксВерсия Тогда
						МаксВерсия = КлючВерсииСервера;
					КонецЕсли; 
				КонецЦикла; 
				
				Если СлужбаWMI.GetStringValue(HKLM, "Software\Apache Group\Apache\" + МаксВерсия, "ServerRoot", ЗначениеПараметра) = 0 Тогда
					СистемныеПараметры.ВебСерверы.Вставить("Apache", Новый Структура("Каталог,Порт,КаталогДокументов,Версия,ПараметрыЗапуска", ЗначениеПараметра, "", "", МаксВерсия, ""));
				КонецЕсли; 
				
				Если СлужбаWMI.GetStringValue(HKLM, "Software\Apache Group\Apache\" + МаксВерсия, "DocumentRoot", ЗначениеПараметра) = 0 Тогда
					СистемныеПараметры.ВебСерверы.Apache.КаталогДокументов = ЗначениеПараметра;
				КонецЕсли; 
				
			Иначе
				
				// Записей об установки нет, проверяем запущенные процессы
				Если СлужбаWMI.GetStringValue(HKLM, "SYSTEM\CurrentControlSet\Services\Apache2", "ImagePath", ЗначениеПараметра) = 0 Тогда
					СистемныеПараметры.ВебСерверы.Вставить("Apache", Новый Структура("Каталог,Порт,КаталогДокументов,Версия,ПараметрыЗапуска", ЗначениеПараметра, "", "", "2", ""));
				КонецЕсли; 
				
			КонецЕсли;
			
			
		КонецЕсли; 
		
		// Проверяем корневой каталог публикации для Apache
		Если СистемныеПараметры.ВебСерверы.Свойство("Apache") И НЕ ЗначениеЗаполнено(СистемныеПараметры.ВебСерверы.Apache.КаталогДокументов) Тогда
			
			СлужбаWMI = GetComObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2");
			ТекстЗапроса = "SELECT ExecutablePath, Description, CommandLine  FROM Win32_Process where name = 'httpd.exe'";
			РезультатЗапроса = СлужбаWMI.ExecQuery(ТекстЗапроса);
			Для Каждого ЗаписьРезультата Из РезультатЗапроса Цикл
				
				// Если включет UAC и программа запущена без прав администратора, пути запуска будут пустыми!
				СтрокаКаталога = ЗаписьРезультата.ExecutablePath;
				СтрокаПараметров = ЗаписьРезультата.CommandLine;
				СтрокаПараметров = СтрЗаменить(СтрокаПараметров, ЗаписьРезультата.ExecutablePath, "");
				СистемныеПараметры.ВебСерверы.Apache.ПараметрыЗапуска = "" +
						СистемныеПараметры.ВебСерверы.Apache.ПараметрыЗапуска + СтрокаПараметров;
			КонецЦикла; 
			
		КонецЕсли; 
		
		Если СистемныеПараметры.ВебСерверы.Свойство("Apache") И НЕ ЗначениеЗаполнено(СистемныеПараметры.ВебСерверы.Apache.Порт) Тогда
			ОпределитьНомерПортаApache();
		КонецЕсли;
		 
		
		Если НЕ ЗначениеЗаполнено(СистемныеПараметры.СвободныйПорт) Тогда
			
			ТекущееДействие = НСтр("ru = 'Определение свободного порта для установки сервера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			НомерПорта = ?(ЗначениеЗаполнено(ПараметрыЦентральнойБазы.НомерПорта), ПараметрыЦентральнойБазы.НомерПорта, "4722");
			Пока Число(НомерПорта) < 4900 Цикл
			
				ТекстСкрипта     = "cmd /C netstat -an | findstr /R ""^[^a-zA-Z]*[a-zA-Z]*[^:]*:" + НомерПорта + "[^0-9][^a-zA-Z]*LISTENING$"" > " + ИмяВремФайлаВСкриптах ;
				РезультатСкрипта = ОболочкаСкриптов.Run(ТекстСкрипта, 0, Истина);
				Файл = Новый Файл(ИмяВремФайла);
				Если Файл.Существует() И Файл.Размер() > 0 Тогда
					НомерПорта = Формат(Число(НомерПорта) + 5, "ЧДЦ=; ЧГ=");
					УдалитьФайлы(ИмяВремФайла);
				Иначе
					Прервать;
				КонецЕсли; 
			
			КонецЦикла; 
			
			СистемныеПараметры.Вставить("СвободныйПорт", НомерПорта);
			
		КонецЕсли; 
		
	Исключение
		
		ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, 
			ИнформацияОбОшибке(), 
			Отказ, ОписаниеПроблемы);
		Возврат СистемныеПараметры.ВебСерверы.Количество();
		
	КонецПопытки; 
	
	Файл = Новый Файл(ИмяВремФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяВремФайла);
	КонецЕсли;
	
	Возврат СистемныеПараметры.ВебСерверы.Количество();

КонецФункции

&НаСервере
Процедура ОпределитьНомерПортаApache()

	Если СистемныеПараметры.Платформа = "win" Тогда
		ОпределитьНомерПортаApacheОСWindows();
	Иначе
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ОпределитьНомерПортаApacheОСWindows()

	ИмяВремФайла          = ПолучитьИмяВременногоФайла("tmp");
	ИмяВремФайлаВСкриптах = """" + ИмяВремФайла + """";
	ОписаниеПроблемы      = "";
	ОболочкаСкриптов      = Новый COMОбъект("WScript.Shell"); 
	
	Попытка
	
		ТекстСкрипта     = "cmd /C tasklist /NH /FI ""SERVICES eq apache*"" > " + ИмяВремФайлаВСкриптах;
		РезультатСкрипта = ОболочкаСкриптов.Run(ТекстСкрипта, 0, Истина);
		
		Процессы = Новый Массив;
				
		Файл = Новый Файл(ИмяВремФайла);
		Если Файл.Существует() Тогда
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВремФайла, КодировкаТекста.Системная);
			СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
			Пока СтрокаТекста <> Неопределено Цикл
				
				Если ПустаяСтрока(СтрокаТекста) Тогда
					СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
					Продолжить;
				КонецЕсли; 
				
				МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаТекста, " ");
				
				Если Врег(МассивСлов[0]) = "HTTPD.EXE" Тогда
					Процессы.Добавить(МассивСлов[1]);
				КонецЕсли; 
				
				СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
				
			КонецЦикла; 
			
			ЧтениеТекста.Закрыть();
			УдалитьФайлы(ИмяВремФайла);
			
			Если Процессы.Количество() <> 0 Тогда
				
				ТекущееДействие = НСтр("ru = 'Определение открытых портов для Apache'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
				ТекстСкрипта     = "";
				Счетчик = 0;
				Для Каждого ЭлементМассива Из Процессы Цикл
					ТекстСкрипта = ТекстСкрипта + ?(Счетчик = 0, "", " & ") + "netstat -noa | find """ + ЭлементМассива + """ ";
					ТекстСкрипта = ТекстСкрипта + ?(Счетчик = 0, "> ", ">> ") + ИмяВремФайлаВСкриптах + Символы.ПС;
					Счетчик = Счетчик + 1;
				КонецЦикла; 
						
				РезультатСкрипта = ОболочкаСкриптов.Run("cmd /C " + ТекстСкрипта, 0, Истина);
					
				Если Файл.Существует() Тогда
					
					ЧтениеТекста = Новый ЧтениеТекста(ИмяВремФайла, КодировкаТекста.Системная);
					СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
					
					Пока СтрокаТекста <> Неопределено Цикл
						
						ПозицияВСтроке = Найти(ВРЕГ(СтрокаТекста), "TCP");
						Если ПозицияВСтроке > 0 Тогда
							СтрокаПорта = Сред(СтрокаТекста, Найти(СтрокаТекста, "0.0.0.0") + 8);
							СтрокаПорта = СокрЛП(Сред(СтрокаПорта, 1, Найти(СтрокаТекста, "0.0.0.0")-1));
							Если ЗначениеЗаполнено(СтрокаПорта) Тогда
								СистемныеПараметры.ВебСерверы.Apache.Порт = СтрокаПорта;
								СистемныеПараметры.Вставить("СвободныйПорт", СтрокаПорта);
								Прервать;
							КонецЕсли; 
						КонецЕсли; 
						
						СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
						
					КонецЦикла; 
						
					ЧтениеТекста.Закрыть();
					УдалитьФайлы(ИмяВремФайла);
					
				КонецЕсли; 
						
			КонецЕсли; 
			
		КонецЕсли;
		
	Исключение
	
		
		ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, ТекущееДействие, 
			ИнформацияОбОшибке(), 
			Истина, ОписаниеПроблемы);
		
	КонецПопытки; 

	Файл = Новый Файл(ИмяВремФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяВремФайла);
	КонецЕсли;
	
КонецПроцедуры
 

&НаСервере
Функция ОпределитьПубликациюБазыНаСерверах(СохранятьИзменения = Ложь)

	Результат = Неопределено;
	
	Если СистемныеПараметры.Платформа = "win" Тогда
		Результат = ОпределитьПубликациюБазыНаСерверахWindows();
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	Если СохранятьИзменения Тогда
		ЗаписатьИзменения();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОпределитьПубликациюБазыНаСерверахWindows()

	СтрокаСоединения      = СтрокаСоединенияИнформационнойБазы();
	Отказ                 = Ложь;
	ИмяВремФайла          = ПолучитьИмяВременногоФайла("tmp");
	ИмяВремФайлаВСкриптах = """" + ИмяВремФайла + """";
	ОписаниеПроблемы      = "";
	ОболочкаСкриптов      = Новый COMОбъект("WScript.Shell"); 
	
	// Заполняемые параметры:
	СистемныеПараметры.Вставить("ИмяЭтойБазы", "");
	СистемныеПараметры.Вставить("ВебСервер", "");
	СистемныеПараметры.Вставить("НомерПорта", "");
	СистемныеПараметры.Вставить("КаталогВебСервера", "");
	
	Для Каждого Сервер Из СистемныеПараметры.ВебСерверы Цикл
		
		ТекущееДействие = НСтр("ru = 'Проверка публикации базы на веб-сервере %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
		Если Сервер.Ключ = "Apache" Тогда
			
			// Проверка публикации на среврере Apache
			
#Область Сервер_Appache
			Если Сервер.Значение.Свойство("ФайлКонфигурации") И ЗначениеЗаполнено(Сервер.Значение.ФайлКонфигурации) Тогда
				ИмяФайлаКонфигурации = Сервер.Значение.ФайлКонфигурации;
			Иначе
				ИмяФайлаКонфигурации = ПолучитьИмяФайлаКонфигурацииДляСервераWindows(Сервер.Ключ, Сервер.Значение);
				СистемныеПараметры.ВебСерверы[Сервер.Ключ].Вставить("ФайлКонфигурации", ИмяФайлаКонфигурации);
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ИмяФайлаКонфигурации) Тогда
				
				ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаКонфигурации);
				
				КоличествоНайденыхПараметров = 0;
				СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
				Пока СтрокаТекста <> Неопределено Цикл
					
					Если Лев(НРег(СокрЛ(СтрокаТекста)), 12) = НРег("DocumentRoot") Тогда
						
						// Корневой каталог документов сервера
						ИмяКаталога = СтрЗаменить(НРег(СтрокаТекста), НРег("DocumentRoot"), "");
						ИмяКаталога = СокрЛП(СтрЗаменить(ИмяКаталога, """", ""));
						СистемныеПараметры.ВебСерверы[Сервер.Ключ].Вставить("КаталогПубликаций", ?(ПустаяСтрока(ИмяКаталога), Сервер.Значение.Каталог, ИмяКаталога));
						КоличествоНайденыхПараметров = КоличествоНайденыхПараметров + 1;
						
						Если КоличествоНайденыхПараметров = 2 Тогда
							Прервать;
						КонецЕсли; 
						
					ИначеЕсли Лев(НРег(СокрЛ(СтрокаТекста)), 28) = НРег("ManagedApplicationDescriptor") Тогда
						
						ИмяФайлаVRD = Сред(СокрЛ(СтрокаТекста), 29 );
						ИмяФайлаVRD = СокрЛП(СтрЗаменить(ИмяФайлаVRD, """", ""));
						ВремИмяПубликации = "";
						Если НЕ ПустаяСтрока(ИмяФайлаVRD) И ФайлVRDСоответствуетБазе(ИмяФайлаVRD, ВремИмяПубликации) Тогда
							
							Файл = Новый Файл(ИмяФайлаVRD);
							Если Файл.Существует() И Файл.ЭтоФайл() Тогда
								
								СистемныеПараметры.ИмяЭтойБазы         = СтрЗаменить(ВремИмяПубликации, "/", "");
								СистемныеПараметры.ВебСервер           = Сервер.Ключ;
								СистемныеПараметры.НомерПорта          = Сервер.Значение.Порт;
								СистемныеПараметры.КаталогВебСервера   = Сервер.Значение.Каталог;
								КоличествоНайденыхПараметров = КоличествоНайденыхПараметров + 1;
								
							КонецЕсли; 
							
						КонецЕсли; 
						
					КонецЕсли;
					
					Если КоличествоНайденыхПараметров = 2 Тогда
						Прервать;
					КонецЕсли; 
			
					СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
					
				КонецЦикла; 
				
				ЧтениеТекста.Закрыть();
				
				Если НЕ СистемныеПараметры.ВебСерверы[Сервер.Ключ].Свойство("КаталогПубликаций") ИЛИ 
					НЕ ЗначениеЗаполнено(СистемныеПараметры.ВебСерверы[Сервер.Ключ].КаталогПубликаций) Тогда
					СистемныеПараметры.ВебСерверы[Сервер.Ключ].Вставить("КаталогПубликаций", Сервер.Значение.Каталог);
				КонецЕсли; 
				
			КонецЕсли; 
#КонецОбласти

		Иначе
			
			// Проверка публикации на среврере IIS
			
#Область Сервер_IIS

			КаталогПрограммы = СистемныеПараметры.ВебСерверы.IIS.Каталог;
			ИсполняемыйФайл = КаталогПрограммы + ?(Прав(КаталогПрограммы, 1) = "\", "", "\") + "appcmd.exe";
			
			Файл = Новый Файл(ИсполняемыйФайл);
			Если НЕ Файл.Существует() Тогда
				Возврат Ложь;
			КонецЕсли; 
			
			СистемныеПараметры.ВебСерверы.IIS.Вставить("КаталогПубликации", "");
			
			ОболочкаСкриптов = Новый COMОбъект("WScript.Shell"); 
			ТекстСкрипта = "cmd /C " + ИсполняемыйФайл + " list vdir > " + ИмяВремФайлаВСкриптах;
			РезультатСкрипта = ОболочкаСкриптов.Run(ТекстСкрипта, 0, Истина);
			Файл = Новый Файл(ИмяВремФайла);
			Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
				Возврат Ложь;
			КонецЕсли; 
			
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВремФайла);
			СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
			
			Пока СтрокаТекста <> Неопределено Цикл
				
				ВремКаталогПубликации = СокрЛП(Сред(СтрокаТекста, Найти(СтрокаТекста, "physicalPath:") + 13));
				ВремКаталогПубликации = СтрЗаменить(ВремКаталогПубликации, "%SystemDrive%", СистемныеПараметры.SystemDrive);
				ВремКаталогПубликации = Сред(ВремКаталогПубликации, 1, Найти(ВремКаталогПубликации, ")") - 1);
				Файл = Новый Файл(ВремКаталогПубликации + ?(Прав(ВремКаталогПубликации, 1) = "\", "", "\") + "default.vrd");
				Если Файл.Существует() И Файл.ЭтоФайл() Тогда
									
					ВремИмяПубликации = "";
					Если ФайлVRDСоответствуетБазе(Файл.ПолноеИмя, ВремИмяПубликации) Тогда
						
						СистемныеПараметры.ИмяЭтойБазы         = СтрЗаменить(ВремИмяПубликации, "/", "");
						СистемныеПараметры.ВебСервер           = Сервер.Ключ;
						СистемныеПараметры.НомерПорта          = Сервер.Значение.Порт;
						СистемныеПараметры.КаталогВебСервера   = Сервер.Значение.Каталог;
						Прервать;
					КонецЕсли; 
					
				КонецЕсли; 
				
				СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
				
			КонецЦикла; 
			
			ЧтениеТекста.Закрыть();
			УдалитьФайлы(ИмяВремФайла);
			

#КонецОбласти

		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(СистемныеПараметры.ИмяЭтойБазы) И ЗначениеЗаполнено(СистемныеПараметры.ВебСервер) Тогда
		Порт = СистемныеПараметры.ВебСерверы[СистемныеПараметры.ВебСервер].Порт;
		WSURLВебСервиса = ТекущийIP + ?(ЗначениеЗаполнено(Порт), ":" + Порт, "") + "/" + СистемныеПараметры.ИмяЭтойБазы;
	КонецЕсли; 
	
	Возврат ЗначениеЗаполнено(СистемныеПараметры.ИмяЭтойБазы) И ЗначениеЗаполнено(СистемныеПараметры.ВебСервер);
	
КонецФункции

&НаСервере
Функция ФайлVRDСоответствуетБазе(знач ИмяФайлаVRD, ИмяПубликации)

	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	ИмяФайлаVRD = СокрЛП(СтрЗаменить(ИмяФайлаVRD, """", ""));
	Файл = Новый Файл(ИмяФайлаVRD);
	Если Файл.Существует() И Файл.ЭтоФайл() Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаVRD);
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.Имя = "base" Тогда
						ИмяПубликации = ЧтениеXML.Значение;
					ИначеЕсли ЧтениеXML.Имя = "ib" Тогда
						ВремКаталогПубликации = ЧтениеXML.Значение;
					КонецЕсли; 
				КонецЦикла; 
				
				Если НЕ ПустаяСтрока(ВремКаталогПубликации) И Нрег(ВремКаталогПубликации) = НРег(СтрокаСоединения) Тогда
					Возврат Истина
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если ПараметрыЦентральнойБазы.ПубликацияПроверена Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

&НаСервере
Функция ПолучитьИмяФайлаКонфигурацииДляСервераWindows(ВидСервера, ПараметрыСервера)

	Если ВидСервера = "Apache" Тогда
		
		ИмяФайлаКонфигурации = "";
		Если ЗначениеЗаполнено(ПараметрыСервера.ПараметрыЗапуска) Тогда
			ПозицияПараметра = Найти(ПараметрыСервера.ПараметрыЗапуска, "-f ");
			Если ПозицияПараметра > 0 Тогда
				СтрокаПоиска = СокрЛП(Сред(ПараметрыСервера.ПараметрыЗапуска, ПозицияПараметра + 3));
			КонецЕсли; 
			ДопускаютсяПробелы = Лев(СтрокаПоиска, 1) = """";
			Символ = "";
			Для Счетчик = ?(ДопускаютсяПробелы, 2, 1) По СтрДлина(СтрокаПоиска) + 1 Цикл
				Символ = Сред(СтрокаПоиска, Счетчик, 1);
				Если ДопускаютсяПробелы И Символ = """" ИЛИ 
					НЕ ДопускаютсяПробелы И Символ = " " Тогда
					Прервать;
				КонецЕсли; 
				ИмяФайлаКонфигурации = ИмяФайлаКонфигурации + Символ;
			КонецЦикла; 
		КонецЕсли; 
		
		Если ИмяФайлаКонфигурации = "" Тогда
			ИмяФайлаКонфигурации = Лев(ПараметрыСервера.Каталог, Найти(Врег(ПараметрыСервера.Каталог), Врег("\bin")) - 1) + "\conf\httpd.conf";
			ИмяФайлаКонфигурации = СтрЗаменить(ИмяФайлаКонфигурации, """", "");
		КонецЕсли; 
		
	Иначе
		
		ИмяФайлаКонфигурации = ПараметрыСервера.Каталог;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИмяФайлаКонфигурации) Тогда
		
		Файл = Новый Файл(ИмяФайлаКонфигурации);
		Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
			ИмяФайлаКонфигурации = "";
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ИмяФайлаКонфигурации;

КонецФункции

&НаСервере
Функция ПроверитьСерверныеНастройкиПубликацииИБ()

	Если СистемныеПараметры.Платформа = "win" Тогда
		Возврат ПроверитьСерверныеНастройкиПубликацииИБОСWindows();
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции

&НаСервере
Функция ПроверитьСерверныеНастройкиПубликацииИБОСWindows()

	Результат = ЗначениеЗаполнено(СистемныеПараметры.ИмяЭтойБазы)
		И ЗначениеЗаполнено(СистемныеПараметры.ВебСервер)
		И ЗначениеЗаполнено(ТекущийIP)
		И СервисДоступен(СистемныеПараметры.НомерПорта, СистемныеПараметры.ИмяЭтойБазы);
		
	Если Результат Тогда
		// Обновляем настройки публикации ИБ
		ПараметрыЦентральнойБазы.IPАдрес              = ТекущийIP;
		ПараметрыЦентральнойБазы.ВебСервер            = СистемныеПараметры.ВебСервер;
		ПараметрыЦентральнойБазы.НомерПорта           = СистемныеПараметры.НомерПорта;
		ПараметрыЦентральнойБазы.ИмяЭтойБазы          = СистемныеПараметры.ИмяЭтойБазы;
		ПараметрыЦентральнойБазы.КаталогВебСервера    = СистемныеПараметры.КаталогВебСервера;
		Константы.ПараметрыЦентральнойБазыМобильныхПриложений.Установить(Новый ХранилищеЗначения(ПараметрыЦентральнойБазы));
	КонецЕсли; 
	
	ПараметрыЦентральнойБазы.Вставить("ПубликацияПроверена", Результат);
	
	Возврат Результат;

КонецФункции



#КонецОбласти


&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	ОбновитьДоступностьОбмена(Форма);
	
	Если Форма.СистемныеПараметры.Платформа = "win" Тогда
		ОбновитьТекстВебРасширения(Форма);
		ОбновитьТекстВебСервера(Форма);
		ОбновитьТекстПубликации(Форма);
	КонецЕсли;

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьОбмена(Форма)

	Форма.Элементы.ГруппаСообщениеОЗапрете.Видимость = Форма.ЗапретитьИспользование;
	Форма.Элементы.ГруппаСтраницНастроек.Доступность = Не Форма.ЗапретитьИспользование;
	Форма.Элементы.ГруппаРезультатов.Доступность     = Не Форма.ЗапретитьИспользование;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстВебРасширения(Форма)

	МассивТекстов = Новый Массив;
	
	Если Форма.СистемныеПараметры.ВебРасширениеУстановлено = Истина Тогда
		
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='1. Веб-расширение платформы установлено.'")));
		МассивТекстов.Добавить(" ");
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Узнать подробней'"), , , , "e1c://Документация_УстановкаВебРасширения"));
		
	Иначе
		
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='1. Установите веб-расширение платформы 1С:Предприятие.'")));
		МассивТекстов.Добавить(" ");
		МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Открыть инструкцию'"), , , , "e1c://Документация_УстановкаВебРасширения"));
		
	КонецЕсли;
	
	Форма.Элементы.ТекстПояснения2.Заголовок = Новый ФорматированнаяСтрока(МассивТекстов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстВебСервера(Форма)

	МассивТекстов = Новый Массив;
	
	КоличествоСерверов = Форма.СистемныеПараметры.ВебСерверы.Количество();
	Если КоличествоСерверов = 0 Тогда
		
		Если ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() = "" Тогда
			// локализация на другие языки
		Иначе
			// По умолчанию - локализация = "ru"
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='2. Установите на компьютере веб-сервер'")));
			МассивТекстов.Добавить(" ");
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='самостоятельно'"), , , , "e1c://Документация_УстановкаВебСервераApache"));
			МассивТекстов.Добавить("." + Символы.ПС);
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Автоматическая установка веб-сервера в данный момент недоступна'")));
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() = "" Тогда
			// локализация на другие языки
		Иначе
			// По умолчанию - локализация = "ru"
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='2. Веб-сервер на компьютере установлен.'")));
			МассивТекстов.Добавить(" ");
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Инстукция по установке.'"), , , , "e1c://Документация_УстановкаВебСервераApache"));
		КонецЕсли;
		
	КонецЕсли;
	 
	Форма.Элементы.ТекстПояснения3.Заголовок = Новый ФорматированнаяСтрока(МассивТекстов);

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстПубликации(Форма)

	МассивТекстов = Новый Массив;
	
	Если Не Форма.СистемныеПараметры.БазаОпубликована Тогда
		
		Если ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() = "" Тогда
			// локализация на другие языки
		Иначе
			// По умолчанию - локализация = "ru"
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='3. Опубликуйте'"), , , , "e1c://Документация_ПубликацияБазыНаВебсервере/"));
			МассивТекстов.Добавить(" ");
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='на веб-сервере эту базу'")));
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() = "" Тогда
			// локализация на другие языки
		Иначе
			// По умолчанию - локализация = "ru"
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='3. База на веб-сервере опубликована.'")));
			МассивТекстов.Добавить(" ");
			МассивТекстов.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Узнать, как публикуется база.'"), , , , "e1c://Документация_ПубликацияБазыНаВебсервере"));
		КонецЕсли;
		
	КонецЕсли;
	 
	Форма.Элементы.ТекстПояснения4.Заголовок = Новый ФорматированнаяСтрока(МассивТекстов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти
