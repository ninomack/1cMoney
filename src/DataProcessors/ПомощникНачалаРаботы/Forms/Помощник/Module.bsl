////////////////////////////////////////////////////////////////////////////////
//Обработка.ПомощникНачалаРаботы.Форма.Помощник
//  Быстрая настройка программы для работы с конкртеным пользователем
//  
//Параметры формы:
//  Стандартные параметры формы
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияДеньги.ИнформационнаяБазаПустая() Тогда
		ПоказатьНедоступностьПомощника();
		Возврат;
	КонецЕсли;
	
	ИспользуетсяОбменСЦБ = ОбщегоНазначения.ПодсистемаСуществует("ФункционалКонфигурацииДеньги.ОбменСЦентральнойБазой");
	Если Не ИспользуетсяОбменСЦБ Тогда
		
		Элементы.Сценарий.СписокВыбора.Очистить();
		Элементы.Сценарий.СписокВыбора.Добавить("НовыйПользователь", НСтр("ru='Настроить программу с нуля'"));
		Элементы.Сценарий.СписокВыбора.Добавить("ЗаполнениеИзМиниденег", НСтр("ru='Заполнить данными из ""Миниденег""'"));
		
	КонецЕсли;
	
	// Заполняем дополнительные реквизиты
	ЗаполнитьДополнительныеРеквизитыФормы();
	КаталогИнструкций = КаталогИнструкций();
	
	// Задаем последовательность шагов помощника
	ЗаполнитьСтруктуруПомощника();
	
	// Получаем текущее сотсояние помощника: работа с помощником могла быть прервана или отложена, 
	//в этом случае она продолжится с последнего шага
	СостояниеПомощника    = Обработки.ПомощникНачалаРаботы.ТекущееСостояниеПомощника();
	Сценарий              = "НовыйПользователь";
	СпособПолученияФайлов = "Файл";
	КлючТекущегоШага      = СтруктураПомощника.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	
	// Устанавливаем текущий сценарий и шаг помощника
	Если Не СостояниеПомощника.ПомощникЗавершен Тогда
		Сценарий              = ?(СостояниеПомощника.Сценарий = "", Сценарий, СостояниеПомощника.Сценарий);
		СпособПолученияФайлов = ?(СостояниеПомощника.СпособПолученияФайлов = "", СпособПолученияФайлов, СостояниеПомощника.СпособПолученияФайлов);
		КлючТекущегоШага      = ?(СостояниеПомощника.ТекущийШагПомощника = "", КлючТекущегоШага, ПолучитьИдентификаторСтраницыПоИмени(СостояниеПомощника.ТекущийШагПомощника));
	КонецЕсли;
	
	// Сброс расположения и размеров формы
	ОбщегоНазначенияДеньги.СброситьРазмерИПоложениеФормы(ЭтотОбъект);
	
	// Заполнение значений по умолчанию:
	// ...валюты
	ВалютаУчета        = Константы.ВалютаУчета.Получить();
	ПрежняяВалютаУчета = ВалютаУчета;
	
	// ...кошельки
	ЗаполнитьСписокКошельков();
	ТекущаяСтрокаКошелька = 0;
	
	// ...пользователи
	Пользователь = Пользователи.АвторизованныйПользователь();
	Если Не РежимРазделения Тогда
		Если ЗначениеЗаполнено(Пользователь) И Не Пользователь.Служебный Тогда
			
			ПользовательИмя = Пользователь.Наименование;
			
			// Если пользователь задан в конфигураторе или в предыдущий запуск помощника, страницу с именем пользователя можно пропустить
			Если КлючТекущегоШага = ПолучитьИдентификаторСтраницыПоИмени("СтраницаПользователь") Тогда
				КлючТекущегоШага = ПолучитьИдентификаторСтраницыПоИмени("СтраницаВыборСценария");
			КонецЕсли;
			
		Иначе
			
			Пользователь    = Неопределено;
			ПользовательИмя = ИмяПользователя();
			
		КонецЕсли;
		
		ПользовательСвойства = Пользователи.СвойстваПользователяИБ(ПользовательИмя);
		Если ПользовательСвойства = Неопределено Тогда
			ПользовательСвойства = Новый Структура;
		Иначе
			ПользовательСвойства.Удалить("ПользовательИБ");
		КонецЕсли;
		
		ПользовательСвойства.Вставить("ПарольИзменен", Ложь);
		ПользовательСвойства.Вставить("ПрежнееИмяПользователя", ИмяПользователя());
		
		УстановитьНаличиеПароля(ЭтотОбъект);
		ЗаполнитьСписокСемьи();
		
	Иначе
		ПользовательСвойства = Новый Структура;
		ПользовательСвойства.Вставить("ПарольИзменен", Ложь);
		ПользовательСвойства.Вставить("ПрежнееИмяПользователя", ИмяПользователя());
	КонецЕсли;
	
	// ... источники доходов и расходов
	ЗаполнитьДоходыИРасходы();
	
	ОбработкаИзмененияСпособаПолученияФайлов(ЭтотОбъект);
	
	Элементы.Пояснение16.Заголовок = "";
	
	// Выводим страницу помощника
	ОтобразитьСтраницуПомощника(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьСостояниеПомощника(СостояниеПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненОбменДанными" Тогда
		ПроверитьРезультатыОбмена(РезультатОбмена);
		ПоказатьСтаницуРезультатаЗагрузки();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти


#Область СтраницаПользователь

&НаКлиенте
Процедура ПользовательИмяПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПользовательИмя) Тогда
		// Для пустого имени не может использоваться пароль
		ПользовательПароль = "";
		ПользовательПарольПодтверждение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПарольПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПользовательИмя) Тогда
		// Для пустого имени не может использоваться пароль
		ПользовательПароль = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ПользовательПароль) Тогда
		ПользовательПарольПодтверждение = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаВалютаУчета

&НаКлиенте
Процедура ВалютаУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда
		ВалютаУчета = ПрежняяВалютаУчета;
	КонецЕсли;
	
	Если ВалютаУчета = ПрежняяВалютаУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокКошельковОбработан Тогда
		
		#Область ПоказатьВопрос
		ТекстВопроса = НСтр("ru='Заменить валюту в списке кошельков?'");
		
		ДополнительныеПараметры = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ВалютаУчетаПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Заменить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить изменение валюты'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
		#КонецОбласти
		
	Иначе
		ЗаменитьВалютуВСпискеКошельков();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СтраницаКошельки

&НаКлиенте
Процедура СписокКошельковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ИДОригинала = ?(Копирование, Элементы.СписокКошельков.ТекущаяСтрока, Неопределено);
	ОткрытьПараметрыКошелька(-10, ИДОригинала);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКошельковНаименованиеПриИзменении(Элемент)
	
	СтрокаКошелька = Элементы.СписокКошельков.ТекущиеДанные;
	Если СтрокаКошелька <> Неопределено И Не ЗначениеЗаполнено(СтрокаКошелька.Наименование) Тогда
		СтрокаКошелька.Наименование = СтрокаКошелька.ТипСчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКошельковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	СтрокаКошелька = Элементы.СписокКошельков.ТекущиеДанные;
	Если СтрокаКошелька <> Неопределено Тогда
		
		#Область ПоказатьВопрос
		ТекстВопроса = НСтр("ru='Удалить кошелек <%1>?'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, СтрокаКошелька.Наименование);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрока", Элементы.СписокКошельков.ТекущаяСтрока);
		Оповещение = Новый ОписаниеОповещения("СписокКошельковПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Удалить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет, Заголовок);
		#КонецОбласти
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКошельковПередНачаломИзменения(Элемент, Отказ)
	
	СтрокаКошелька = Элементы.СписокКошельков.ТекущиеДанные;
	Если СтрокаКошелька = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокКошельков.ТекущийЭлемент <> Неопределено 
		И (Элементы.СписокКошельков.ТекущийЭлемент.Имя <> "СписокКошельковОстатокНаНачало"
			Или СтрокаКошелька.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.БанковскаяКартаКредитная"))
		Тогда
		
		Отказ = Истина;
		ОткрытьПараметрыКошелька(Элементы.СписокКошельков.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКошельковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СписокКошельков.ТекущийЭлемент <> Неопределено
		И Элементы.СписокКошельков.ТекущийЭлемент.Имя <> "СписокКошельковОстатокНаНачало" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПараметрыКошелька(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Синхронизация

&НаКлиенте
Процедура СпособПолученияФайловПриИзменении(Элемент)
	
	ОбработкаИзмененияСпособаПолученияФайлов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаИзмененияСпособаПолученияФайлов(Форма)

	Форма.ОблакоПровайдер = Неопределено;
	Форма.ОблакоПараметры = Неопределено;
	
	Если Форма.СпособПолученияФайлов = "Google" Тогда
		Форма.ОблакоПровайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Google");
	ИначеЕсли Форма.СпособПолученияФайлов = "Dropbox" Тогда
		Форма.ОблакоПровайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Dropbox");
	ИначеЕсли Форма.СпособПолученияФайлов = "ЯндексДиск" Тогда
		Форма.ОблакоПровайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс");
	ИначеЕсли Форма.СпособПолученияФайлов = "ДомашняяСеть" Тогда
		//
	ИначеЕсли Форма.СпособПолученияФайлов = "Файл" Тогда
		//
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПояснениебработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиКлиент(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры


#КонецОбласти 


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если НужноСменитьСтраницуПомощника(1) Тогда
		ОтобразитьСтраницуПомощника(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если НужноСменитьСтраницуПомощника(-1) Тогда
		ОтобразитьСтраницуПомощника(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	ЗавершитьРаботуПомощника();
	ДеньгиВызовСервера.УстановитьСтандартныйИнтерфейс();
	
	Если Не РежимРазделения И ПользовательСвойства <> Неопределено 
		И (ПользовательСвойства.ПрежнееИмяПользователя <> ПользовательСвойства.Имя
			Или ПользовательСвойства.ПарольИзменен)
		Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПредупреждениеОПерезагрузкеЗавершение", ЭтотОбъект);
		ТекстПредупреждения = НСтр("ru='После перезапуска программы войдите под своим именем и паролем'");
		ПоказатьПредупреждение(Оповещение, ТекстПредупреждения);
		
	Иначе
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПароль(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки", Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль", ПользовательСвойства.Пароль);
	
	ПользователиСлужебныйКлиент.ОткрытьФормуСменыПароля(Пользователь, Новый ОписаниеОповещения(
		"СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыКошелька(Команда)
	
	ИДСтроки = Элементы.СписокКошельков.ТекущаяСтрока;
	Если ИДСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПараметрыКошелька(ИДСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторизоватьсяВОблаке(Команда)
	
	ТекстОшибки = "";
	Если СинхронизацияВОблакеВключена(ПараметрыЦентральнойБазы, ОблакоПровайдер, ОблакоПараметры, ТекстОшибки) Тогда
		Оповещение = Новый ОписаниеОповещения("АвторизоватьсяВОблакеЗавершение", ЭтотОбъект);
		RESTКлиент.ОткрытьФормуАвторизации(ОблакоПровайдер, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьВОблаке(Команда)
	
	ТранспортОблако = СсылкаНаТранспорт(ОблакоПровайдер);
	Если ТранспортОблако = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбменКлиентЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Транспорт,ЗакрыватьПриЗавершении", ТранспортОблако, Истина);
	ОткрытьФорму("Обработка.МониторСинхронизацииСМобильнымиУстройствами.Форма.ИнтерактивныйОбменЧерезСервис", 
				ПараметрыФормы, , ТранспортОблако,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = НСтр("ru='Файл данных из Миниденег'");
	Фильтр = НСтр("ru = 'Файлы сообщений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Фильтр = Фильтр + " (*.xml)|*.xml";
	ДиалогВыбора.Фильтр = Фильтр;
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыФормы()

	ДопРеквизитыФормы= Новый Структура;
	ДопРеквизитыФормы.Вставить("Цвет_Особый",    ЦветаСтиля.ЦветОсобогоТекста);
	ДопРеквизитыФормы.Вставить("Цвет_Поясняющий", ЦветаСтиля.ПоясняющийТекст);
	ДопРеквизитыФормы.Вставить("ШрифтВыделения", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
	
	ДопРеквизитыФормы.Вставить("ИмяРисунка", "");

	ДопРеквизитыФормы.Вставить("ТекстНастройкиОблакаВМиниденьгах", Элементы.Пояснение21.Заголовок);
	
	РежимРазделения = ОбщегоНазначения.РазделениеВключено();

КонецПроцедуры
 
// Формирует последовательность шагов помощника с учетом разветвлений
// Последовательность шагов сохраняется в дереве значений СтруктураПомощника:
//	- каждая следующая страница указана в подстроке текущей страницы
//	- строка со страницей, на которой осуществляется выбор, содержит несколько подчиненных строк, 
//		каждая из которых имеет свой уникальный набор значений в колонках "Сценарий" и "СпособПолученияФайлов"
//	- значение "*" в колонках "Сценарий" и "СпособПолученияФайлов" означает, что эти переменные могут иметь 
//		любое значение для выбора данной страницы
&НаСервере
Процедура ЗаполнитьСтруктуруПомощника()

	// Общие страницы начала сценарий
	ИмяСценария              = "*";
	ИмяСпособаПолученияФайла = "*";
	НачальныйИндекс          = 1;
	ШагВыбораСценария = ДобавитьСисокСтраницВСценарий("СтраницаПользователь,СтраницаВыборСценария", 
					Неопределено, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
	
	// Заполнение базы с нуля
	Если РежимРазделения Тогда
		// в режиме разделения пользователь не редактируется
		ИмяСценария              = "НовыйПользователь";
		ИмяСпособаПолученияФайла = "*";
		НачальныйИндекс          = 4;
		ФинальнаяСтраница = ДобавитьСисокСтраницВСценарий("СтраницаКошельки,СтраницаВидыДеятельности,
					|СтраницаСемья,СтраницаЗавершение", 
						ШагВыбораСценария, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
	Иначе
		ИмяСценария              = "НовыйПользователь";
		ИмяСпособаПолученияФайла = "*";
		НачальныйИндекс          = 3;
		ФинальнаяСтраница = ДобавитьСисокСтраницВСценарий("СтраницаВалютаУчета,СтраницаКошельки,СтраницаВидыДеятельности,
					|СтраницаСемья,СтраницаЗавершение", 
						ШагВыбораСценария, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
	КонецЕсли;
	
	// Загрузка данных из Миниденег
	ИмяСценария              = "ЗаполнениеИзМиниденег";
	ИмяСпособаПолученияФайла = "*";
	НачальныйИндекс          = 3;
	ШагВыбораСпособа = ДобавитьСисокСтраницВСценарий("СтраницаВыборСпособаОбмена", 
					ШагВыбораСценария, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
	
	// Загрузка данных из Миниденег через облако
	ИмяСценария              = "ЗаполнениеИзМиниденег";
	ИмяСпособаПолученияФайла = "Google,Dropbox,ЯндексДиск";
	НачальныйИндекс          = 4;
	ФинальнаяСтраница = ДобавитьСисокСтраницВСценарий("СтраницаНастройкиОблака,СтраницаНастройкиОблакаВМиниденьгах,СтраницаВыполнитьСинхронизациюВОблаке,
				|СтраницаСемья,СтраницаЗавершение", 
					ШагВыбораСпособа, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
	
	// Загрузка данных из Миниденег в домашней сети
	ИмяСценария              = "ЗаполнениеИзМиниденег";
	ИмяСпособаПолученияФайла = "ДомашняяСеть";
	НачальныйИндекс          = 4;
	ФинальнаяСтраница = ДобавитьСисокСтраницВСценарий("СтраницаНастройкиСети,СтраницаНастройкиСетиВМиниденьгах,
				|СтраницаСемья,СтраницаЗавершение", 
					ШагВыбораСпособа, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
	
	// Загрузка данных из Миниденег из файла
	ИмяСценария              = "ЗаполнениеИзМиниденег";
	ИмяСпособаПолученияФайла = "Файл";
	НачальныйИндекс          = 4;
	ФинальнаяСтраница = ДобавитьСисокСтраницВСценарий("СтраницаНастройкиФайлаВМиниденьгах,СтраницаЗагрузитьФайл,
				|СтраницаСемья,СтраницаЗавершение", 
					ШагВыбораСпособа, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
	
	
	Если ИспользуетсяОбменСЦБ Тогда
		// Загрузка данных из сервиса атвосинхронизации
		ИмяСценария              = "ЗаполнениеИзОблака";
		ИмяСпособаПолученияФайла = "*";
		НачальныйИндекс          = 3;
		ФинальнаяСтраница = ДобавитьСисокСтраницВСценарий("СтраницаНастройкиСервисаЦБ,СтраницаСинхронизацияССервисомЦБ,
					|СтраницаСемья,СтраницаЗавершение", 
						ШагВыбораСценария, ИмяСценария, ИмяСпособаПолученияФайла, НачальныйИндекс);
		
	КонецЕсли;
	
	// Для определения картинки обозначим длину сценариев
	ДопРеквизитыФормы.Вставить("КоличествоДекораций", Элементы.ГруппаСтраницыДекораций.ПодчиненныеЭлементы.Количество());
	ДопРеквизитыФормы.Вставить("ДлиныСценариев", Новый Структура("НовыйПользователь,ЗаполнениеИзМиниденег,ЗаполнениеИзОблака", 7, 9, 5));
	
КонецПроцедуры

// Добавляет в дерево "СтруктураПомощника" строки для каждого имени страрицы в параметре СписокИменСтраниц
//	Каждая добавленная страница является родителем для следующих страниц.
//
//Возвращаемое значение:
//	СтрокаДереваЗначений - последняя добавленная в дерево строка
//
&НаСервере
Функция ДобавитьСисокСтраницВСценарий(СписокИменСтраниц, Родитель, Сценарий, СпособПолученияФайлов, Индекс)

	СтрокиУзла = ?(Родитель = Неопределено, СтруктураПомощника, Родитель).ПолучитьЭлементы();
	МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СписокИменСтраниц, ",");
	Для каждого ИмяСтраницы Из МассивИмен Цикл
		
		СтрокаШага = СтрокиУзла.Добавить();
		СтрокаШага.ИмяСтраницы           = СокрЛП(ИмяСтраницы);
		СтрокаШага.Сценарий              = Сценарий;
		СтрокаШага.СпособПолученияФайлов = СпособПолученияФайлов;
		СтрокаШага.Индекс                = Индекс;
		
		СтрокиУзла = СтрокаШага.ПолучитьЭлементы();
		Индекс     = Индекс + 1;
		
	КонецЦикла;
	
	Возврат СтрокаШага;

КонецФункции

&НаСервере
Функция ПолучитьИдентификаторСтраницыПоИмени(ИмяСтраницыПомощника, Узел = Неопределено)

	Если Узел = Неопределено Тогда
		Узел = СтруктураПомощника;
	КонецЕсли;
	
	СтрокиУзла = Узел.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из СтрокиУзла Цикл
		
		Если СтрокаДерева.ИмяСтраницы = ИмяСтраницыПомощника Тогда
			Возврат СтрокаДерева.ПолучитьИдентификатор();
		Иначе
			Возврат ПолучитьИдентификаторСтраницыПоИмени(ИмяСтраницыПомощника, СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Заполнение списков и занчений по умолчанию

&НаСервере
Процедура ЗаполнитьДоходыИРасходы()

	ВидыДеятельности.Очистить();
	ВидыДеятельности.Добавить("Зарплата",                   НСтр("ru='Получаю заработную плату на предприятии'"));
	ВидыДеятельности.Добавить("КупляПродажа",               НСтр("ru='Покупаю и продаю товары'"));
	ВидыДеятельности.Добавить("ОказаниеУслуг",              НСтр("ru='Оказываю услуги, выполняю работы'"));
	ВидыДеятельности.Добавить("СдачаВАренду",               НСтр("ru='Сдаю имущество в аренду'"));
	ВидыДеятельности.Добавить("АрендаЖилья",                НСтр("ru='Снимаю жилье'"));
	ВидыДеятельности.Добавить("Коммуналка",                 НСтр("ru='Плачу коммунальные услуги'"));
	ВидыДеятельности.Добавить("Дети",                       НСтр("ru='Воспитываю детей'"));
	ВидыДеятельности.Добавить("Автомобиль",                 НСтр("ru='Владею личным автотранспортом'"));
	ВидыДеятельности.Добавить("Животные",                   НСтр("ru='Держу домашних животных'"));
	ВидыДеятельности.Добавить("Образование",                НСтр("ru='Обучаюсь в учебном заведении'"));
	ВидыДеятельности.Добавить("Спорт",                      НСтр("ru='Занимаюсь спортом'"));
	ВидыДеятельности.Добавить("Дача",                       НСтр("ru='Имею дачу, приусадебный участок'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКошельков()

	СписокКошельков.Очистить();
	
	НовыйКошелек = СписокКошельков.Добавить();
	НовыйКошелек.Наименование = НСтр("ru='Мои наличные'");
	НовыйКошелек.ТипСчета = Перечисления.ТипыСчетов.Наличность;
	НовыйКошелек.Валюта = ВалютаУчета;
	НовыйКошелек.ИспользоватьДляНакоплений = Ложь;
	НовыйКошелек.Ключ = "Наличные"; // ключ для показа "обязательного кошелька"
	НовыйКошелек.Свойства = ТекстСвойствКошелька(НовыйКошелек);

	НовыйКошелек = СписокКошельков.Добавить();
	НовыйКошелек.Наименование = НСтр("ru='Зарплатная карта'");
	НовыйКошелек.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаДебетовая;
	НовыйКошелек.Валюта = ВалютаУчета;
	НовыйКошелек.ИспользоватьДляНакоплений = Ложь;
	НовыйКошелек.Ключ = "Зарплата";
	НовыйКошелек.Свойства = ТекстСвойствКошелька(НовыйКошелек);

	НовыйКошелек = СписокКошельков.Добавить();
	НовыйКошелек.Наименование = НСтр("ru='Кредитная карта'");
	НовыйКошелек.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная;
	НовыйКошелек.Валюта = ВалютаУчета;
	НовыйКошелек.ИспользоватьДляНакоплений = Ложь;
	НовыйКошелек.Ключ = "Кредитка";
	НовыйКошелек.Свойства = ТекстСвойствКошелька(НовыйКошелек);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСвойствКошелька(СтрокаКошелька)

	ТекстСвойств = "";
	
	Если СтрокаКошелька.ИспользоватьДляНакоплений Тогда
		ТекстСвойств = НСтр("ru='накопления'");
	ИначеЕсли ЗначениеЗаполнено(СтрокаКошелька.КредитныйЛимит) Тогда
		ТекстСвойств = НСтр("ru='лимит: %1'"); 
		ТекстСвойств = СтрШаблон(ТекстСвойств, Формат(СтрокаКошелька.КредитныйЛимит, "ЧДЦ="));
	КонецЕсли;
	
	ТекстСвойств = ?(ЗначениеЗаполнено(СтрокаКошелька.Наименование), СтрокаКошелька.Наименование, НСтр("ru='<без названия>'"))
				+ ?(ЗначениеЗаполнено(ТекстСвойств), " (" + ТекстСвойств + ")", "");
	
	Возврат ТекстСвойств;

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокСемьи()

	Семья.Очистить();
	ИмяТекущегоПользователя = ИмяПользователя();
	ВыборкаПользователей = Справочники.Пользователи.Выбрать();
	Пока ВыборкаПользователей.Следующий() Цикл
		Если ВыборкаПользователей.Ссылка = Пользователь 
			Или ВыборкаПользователей.ПометкаУдаления 
			Или ВыборкаПользователей.Служебный 
			Или ВыборкаПользователей.Наименование = ИмяТекущегоПользователя Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка = Семья.Добавить();
		СтрокаСписка.Пользователь = ВыборкаПользователей.Ссылка;
		СтрокаСписка.Имя = ВыборкаПользователей.Наименование;
		 
	КонецЦикла;

КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// Проверки и переходы по страницам помощника

&НаКлиенте
Процедура ПоказатьСтаницуРезультатаЗагрузки()
	
	Если Сценарий = "ЗаполнениеИзОблака" Тогда
		
		ПоказатьСтраницуПоИмени("СтраницаСинхронизацияССервисомЦБ");
		
	Иначе
		
		ВыполнитьОбменКлиентЗавершение(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуПоИмени(ИмяСтраницы)
	
	СтрокаПомощника = НайтиСтрокуПоИмениСтраницы(СтруктураПомощника, ИмяСтраницы);
	Если СтрокаПомощника = Неопределено Тогда
		ВызватьИсключение "Не найдена страница помощника " + ИмяСтраницы;
	КонецЕсли;
	
	КлючТекущегоШага = СтрокаПомощника.ПолучитьИдентификатор();
	СостояниеПомощника.Сценарий = Сценарий;
	СостояниеПомощника.СпособПолученияФайлов = СпособПолученияФайлов;
	СостояниеПомощника.ТекущийШагПомощника = СтрокаПомощника.ИмяСтраницы;
	СохранитьСостояниеПомощника(СостояниеПомощника);
	ОтобразитьСтраницуПомощника(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуПоИмениСтраницы(УзелДерева, ИмяСтраницы)
	Перем Результат;
	
	СтрокиПомощника = УзелДерева.ПолучитьЭлементы();
	Для каждого Строка Из СтрокиПомощника Цикл
		
		Если Строка.ИмяСтраницы = ИмяСтраницы Тогда
			Результат = Строка;
		ИначеЕсли Строка.ПолучитьЭлементы().Количество() > 0 Тогда 
			Результат = НайтиСтрокуПоИмениСтраницы(Строка, ИмяСтраницы);
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 


// Проверяет возможность изменения текущего шага помощника и вычисляет новое значение "КлючТекущегоШага"
//
//Возвращаемое значение:
//	Булево - Истина, если КлючТекущегоШага изменился
//
&НаКлиенте
Функция НужноСменитьСтраницуПомощника(Направление)

	// Выполняем проверку текущей страницы помощника
	Если Не РаботаНаСтраницеПомощникаЗавершена(Направление) Или Не ПроверкаШагаВыполненаУспешно(Направление) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаДерева = СтруктураПомощника.НайтиПоИдентификатору(КлючТекущегоШага);
	
	Если Направление > 0 Тогда
		
		НоваяСтрока = Неопределено;
		СтрокиШагов = СтрокаДерева.ПолучитьЭлементы();
		Для каждого СтрокаШага Из СтрокиШагов Цикл
			Если (СтрокаШага.Сценарий  = "*" Или СтрНайти(СтрокаШага.Сценарий + ",", Сценарий + ",") > 0)
				И (СтрокаШага.СпособПолученияФайлов  = "*" Или СтрНайти(СтрокаШага.СпособПолученияФайлов + ",", СпособПолученияФайлов + ",") > 0)
				Тогда
				НоваяСтрока = СтрокаШага;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		НоваяСтрока = СтрокаДерева.ПолучитьРодителя();
	КонецЕсли;

	Если НоваяСтрока <> Неопределено Тогда
		КлючТекущегоШага = НоваяСтрока.ПолучитьИдентификатор();
		СостояниеПомощника.Сценарий = Сценарий;
		СостояниеПомощника.СпособПолученияФайлов = СпособПолученияФайлов;
		СостояниеПомощника.ТекущийШагПомощника = НоваяСтрока.ИмяСтраницы;
		СохранитьСостояниеПомощника(СостояниеПомощника);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура ОтобразитьСтраницуПомощника(Форма)

	Элементы = Форма.Элементы;
	
	СтрокаДерева = Форма.СтруктураПомощника.НайтиПоИдентификатору(Форма.КлючТекущегоШага);
	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы[СтрокаДерева.ИмяСтраницы];
	
	Элементы.Назад.Доступность = СтрокаДерева.ПолучитьРодителя() <> Неопределено;
	Элементы.Далее.Доступность = СтрокаДерева.ПолучитьЭлементы().Количество() > 0;
	Элементы.Далее.КнопкаПоУмолчанию = Элементы.Далее.Доступность;
	Элементы.Завершить1.КнопкаПоУмолчанию = Не Элементы.Далее.КнопкаПоУмолчанию;
	Элементы.Завершить.Доступность = Не Элементы.Завершить1.КнопкаПоУмолчанию;

	// Определяем номер картинки для текущего шага помощника
	ИндексКартинки = Цел(Форма.ДопРеквизитыФормы.КоличествоДекораций * СтрокаДерева.Индекс / Форма.ДопРеквизитыФормы.ДлиныСценариев[Форма.Сценарий]);
	ИндексКартинки = Мин(Макс(ИндексКартинки, 1), Форма.ДопРеквизитыФормы.КоличествоДекораций);
	ИмяРисунка     = "СтраницаДекорации" + Формат(ИндексКартинки, "ЧДЦ=; ЧГ=");
	Если Элементы.ГруппаСтраницыДекораций.ТекущаяСтраница.Имя <> ИмяРисунка Тогда
		Элементы.ГруппаСтраницыДекораций.ТекущаяСтраница = Элементы[ИмяРисунка];
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

// Возвращает Истина, если поля помощника заполнены без ошибок
&НаКлиенте
Функция ПроверкаШагаВыполненаУспешно(Направление)

	СписокОшибок = Неопределено;
	ОчиститьСообщения();
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаПользователь" Тогда
		
		Если ПустаяСтрока(ПользовательИмя) Тогда
			ТекстСообщения = НСтр("ru='Укажите имя пользователя'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПользовательИмя", ТекстСообщения, "");
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаВалютаУчета" Тогда
		
		Если Не ЗначениеЗаполнено(ВалютаУчета) Тогда
			ТекстСообщения = НСтр("ru='Укажите валюту учета!'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ВалютаУчета", ТекстСообщения, "");
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаКошельки" Тогда
		
		СписокКошельковОбработан = Истина;
		
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиОблака" Тогда
		
		Если Направление > 0 И (ОблакоПараметры = Неопределено Или Не ОблакоПараметры.Авторизован) Тогда
			ТекстСообщения = НСтр("ru='Авторизуйтесь в облачном сервисе %1
					|Или вернитесь назад и выберите другой способ получения данных из Миниденег'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, ОблакоПараметры.Представление);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ВалютаУчета", ТекстСообщения, "");
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаЗагрузитьФайл"
		Или Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаВыполнитьСинхронизациюВОблаке" Тогда
		
		Если Направление > 0 И (РезультатОбмена = Неопределено 
				Или РезультатОбмена.РезультатПолученияДанных <> ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Выполнено")) Тогда
			ТекстСообщения = ?(Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаЗагрузитьФайл", 
							НСтр("ru='Загрузите файл с данными!'"), НСтр("ru='Загрузите данные из облака!'"));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстСообщения, "");
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиСетиВМиниденьгах" Или Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаСинхронизацияССервисомЦБ" Тогда
		
		РезультатОбмена = Неопределено;
		ПроверитьРезультатыОбмена(РезультатОбмена);
		Если Направление > 0 И (РезультатОбмена = Неопределено 
				Или РезультатОбмена.РезультатПолученияДанных <> ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Выполнено")) Тогда
			Если Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиСетиВМиниденьгах" Тогда
				ТекстСообщения = НСтр("ru='Нет информации о получении данных из Миниденег. 
							|Выполните синхронизацию в Миниденьгах, после чего нажмите кнопку ""Далее""'");
			Иначе
				ТекстСообщения = НСтр("ru='Нет информации о загрузке данных из облака. 
							|Выполните синхронизацию с облаком или вернитесь назад и выберите другой спсоб заполнения данных'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстСообщения, "");
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиСервисаЦБ" Тогда
		
		Если Не ИспользуетсяОбменСЦБ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Направление > 0 Тогда 
			Если Не БазаПодключенаКСервисуСинхронизациСЦБ() Тогда
				ТекстСообщения = НСтр("ru='Подключение к облаку не настроено или недоступно. 
							|Повторите настройку или вернитесь на предыдущий шаг и выберите другой способ начала работы'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, Неопределено, ТекстСообщения, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокОшибок <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Возвращает Истина, если требуется сменить страницу помощника, 
//в противном случае выполняет необходимые изменения на текущей старнице
&НаКлиенте
Функция РаботаНаСтраницеПомощникаЗавершена(Направление)

	Если Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиСети" Тогда
		
		// Создаем пользователя, чтобы обеспечить загрузку документов из Миниденег
		Пользователь = НовыйПользовательБазы(ИмяПользователя(), ПользовательИмя, ПользовательСвойства.Пароль, Пользователь, ПользовательСвойства.ПарольИзменен);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьСостояниеПомощника(СостояниеПомощника)
	Константы.СостояниеПомощникаНачалаРаботы.Установить(Новый ХранилищеЗначения(СостояниеПомощника));
КонецПроцедуры

&НаСервере
Процедура ПоказатьНедоступностьПомощника()

	Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.СтраницаПомощникНедоступен;
	Элементы.ГруппаКомандыНавигации.Видимость = Ложь;
	Элементы.ГруппаСтраницыДекораций.ТекущаяСтраница = Элементы["СтраницаДекорации" + Элементы.ГруппаСтраницыДекораций.ПодчиненныеЭлементы.Количество()];

КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// Управление внешним видом формы

// Натсройка видимости/доступности и заголовков элеметов формы
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаКошельки" Тогда
		УправлениеСтраницаКошельки(Форма);
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиОблака" Тогда
		УправлениеСтраницаНастройкиОблака(Форма);
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиСетиВМиниденьгах" Тогда
		УправлениеСтраницаНастройкиСети(Форма);
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаНастройкиФайлаВМиниденьгах" Тогда
		УправлениеСтраницаНастройкиФайла(Форма);
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаЗагрузитьФайл"
		Или Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаВыполнитьСинхронизациюВОблаке"
		Тогда
		УправлениеСтраницаЗагрузитьФайл(Форма);
	ИначеЕсли Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаСинхронизацияССервисомЦБ" Тогда
		УправлениеСтраницаНастройкиСинхронизацияСЦБ(Форма);
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницаКошельки(Форма)

	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницаНастройкиОблака(Форма)

	ТекстОшибки = "";
	Если (Форма.ОблакоПараметры <> Неопределено Или 
			СинхронизацияВОблакеВключена(Форма.ПараметрыЦентральнойБазы, Форма.ОблакоПровайдер, Форма.ОблакоПараметры, ТекстОшибки) 
				И ОблачныйКаталогПодготовлен(Форма.ОблакоПровайдер, ТекстОшибки)) 
		И Форма.ОблакоПараметры.Авторизован Тогда
		
		Форма.Элементы.Пояснение16.Заголовок = НСтр("ru='Настольная программа настроена на работу с облачным хранилищем %1.
					|
					|
					|Вы авторизованы в %1 как %2
					|
					|
					|Нажмите ""Далее"" для продолжения'");
		Форма.Элементы.Пояснение16.Заголовок = СтрШаблон(Форма.Элементы.Пояснение16.Заголовок, Форма.ОблакоПараметры.Представление, Форма.ОблакоПараметры.Аккаунт);
		Форма.Элементы.Пояснение15.Видимость = Ложь;
		Форма.Элементы.АвторизоватьсяВОблаке.Видимость = Ложь;
		
		ТекстНастройкиМиниденег = ТекстНастройкиМиниденегВОблаке(Форма.ДопРеквизитыФормы.ШрифтВыделения, 
							Строка(Форма.ОблакоПровайдер), Форма.ОблакоПараметры.Аккаунт, Форма.ПараметрыЦентральнойБазы.ИмяЭтойБазы); 
		
	Иначе
		
		Форма.Элементы.Пояснение16.Заголовок           = "";
		Форма.Элементы.Пояснение15.Видимость           = Истина;
		Форма.Элементы.АвторизоватьсяВОблаке.Видимость = Истина;
		
		ТекстНастройкиМиниденег = НСтр("ru='Мобильное приложение можно настроить только после авторизации настольной программы в облачном сервисе.
					|Вернитесь на предыдущий шаг и выполните необходимые действия.'");
		
	КонецЕсли;
	
	Форма.Элементы.Пояснение21.Заголовок = ТекстНастройкиМиниденег;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницаНастройкиСети(Форма)

	ПодготовитьСетьКРаботе(Форма.ПараметрыЦентральнойБазы);

	ШрифтВыделения = Форма.ДопРеквизитыФормы.ШрифтВыделения;
	
	ТекстНастройкиМиниденег = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока("1. Откройте мобильное приложение ""Миниденьги"", в главном меню выберите команду "),
			Новый ФорматированнаяСтрока("Настройки и сервис", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" и нажмите на строку "),
			Новый ФорматированнаяСтрока("Настройка синхронизации", ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("2. Включите синхронизацию, если она еще не включена"),
			Символы.ПС,
			Новый ФорматированнаяСтрока("3. Обязательно укажите сценарий первой синхронизации "),
			Новый ФорматированнаяСтрока("Выгрузить в пустую настольную базу", ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("4. Включите синхронизацию в домашней сети и укажите адрес настольной базы "),
			Символы.ПС,
			Новый ФорматированнаяСтрока("5. Укажите пользователя настольной базы: "),
			Новый ФорматированнаяСтрока(Форма.ПользовательИмя, ШрифтВыделения),
			" ",
			Новый ФорматированнаяСтрока(?(Форма.ПользовательСвойства.ПарольУстановлен, НСтр("ru='и его пароль'"), НСтр("ru='а пароль оставьте пустым'"))),
			Символы.ПС,
			Новый ФорматированнаяСтрока("6. Закройте настройку синхронизации и нажмите команду "),
			Новый ФорматированнаяСтрока("Синхронизировать в домашней сети", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" в главном меню мобильного приложения "),
			Символы.ПС,
			Символы.ПС,
			Новый ФорматированнаяСтрока("Дождитесь выполнения синхронизации на мобильном устройстве, после чего нажмите кнопку ""Далее""")
		);
	
	Форма.Элементы.Пояснение23.Заголовок = ТекстНастройкиМиниденег;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницаНастройкиФайла(Форма)

	ШрифтВыделения = Форма.ДопРеквизитыФормы.ШрифтВыделения;
	
	ТекстНастройкиМиниденег = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока("1. Откройте мобильное приложение ""Миниденьги"", в главном меню выберите команду "),
			Новый ФорматированнаяСтрока("Настройки и сервис", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" и нажмите на строку "),
			Новый ФорматированнаяСтрока("Настройка синхронизации", ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("2. Включите синхронизацию, если она еще не включена"),
			Символы.ПС,
			Новый ФорматированнаяСтрока("3. Обязательно укажите сценарий первой синхронизации "),
			Новый ФорматированнаяСтрока("Выгрузить в пустую настольную базу", ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("4. Закройте настройку синхронизации и выполните команду "),
			Новый ФорматированнаяСтрока("Синхронизировать через файлы", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" в главном меню мобильного приложения "),
			Символы.ПС,
			Новый ФорматированнаяСтрока("5. В форме синхронизации нажмите ссылку "),
			Новый ФорматированнаяСтрока("выгрузить", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" и дождитесь завершения выгрузки"),
			Символы.ПС,
			Новый ФорматированнаяСтрока("6. Скопируйте файл mdmessage.xml с мобильного устройства на компьютер любым удобным способом"),
			Символы.ПС,
			Символы.ПС,
			Новый ФорматированнаяСтрока("После файла на компьютер приложения нажмите кнопку ""Далее""")
		);
	
	Форма.Элементы.Пояснение33.Заголовок = ТекстНастройкиМиниденег;


КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницаЗагрузитьФайл(Форма)

	ВидимостьКнопкиЗагрузить = Истина;
	ВидимостьРезультата = Ложь;
	
	Если Форма.РезультатОбмена = Неопределено Тогда
		
		ТекстЗаголовка     = "";
		ОписаниеРезультата = "";
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.РезультатОбмена.РезультатПолученияДанных) Тогда
		
		ВидимостьРезультата = Истина;
		ТекстЗаголовка     = НСтр("ru='Данные не загружены'");
		ОписаниеРезультата = НСтр("ru='Файл с данными не найден, имеет неправильный формат или не содержит нужных данных.
					|Пожалуйста, вернитесь назад, проверьте настройки и повторите загрузку данных из Миниденег'");
		
	ИначеЕсли Форма.РезультатОбмена.РезультатПолученияДанных = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Выполнено")
		Или Форма.РезультатОбмена.РезультатПолученияДанных = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями") Тогда
		
		ВидимостьРезультата = Истина;
		ТекстЗаголовка     = НСтр("ru='Загрузка данных выполнена'");
		ВидимостьКнопкиЗагрузить = Ложь;
		
		Если Форма.Элементы.ГруппаСтраниц.ТекущаяСтраница.Имя = "СтраницаЗагрузитьФайл" Тогда
			ОписаниеРезультата = НСтр("ru='Скопируйте на устройство ответный файл ""mdmessage.repl.xml"" и загрузите его в Миниденьгах
						|
						|нажмите ""Далее"" для продолжения'");
		Иначе
			ОписаниеРезультата = НСтр("ru='Данные из Миниденег загружены, нажмите ""Далее"" для продолжения'");
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.РезультатОбмена.ТекстОшибокПолучения) Тогда
		
		ВидимостьРезультата = Истина;
		ТекстЗаголовка     = НСтр("ru='Ошибка загрузки данных'");
		ОписаниеРезультата = НСтр("ru='При загрузке возникли ошибки:
					|%1
					|
					|Пожалуйста, вернитесь назад, проверьте настройки и повторите загрузку данных из Миниденег'");
		ОписаниеРезультата = СтрШаблон(ОписаниеРезультата, Форма.РезультатОбмена.ТекстОшибокПолучения);
		
	КонецЕсли;
	
	Форма.Элементы.Пояснение28.Заголовок = ТекстЗаголовка;
	Форма.Элементы.Пояснение29.Заголовок = ОписаниеРезультата;
	Форма.Элементы.Пояснение28.Видимость = ВидимостьРезультата;
	Форма.Элементы.Пояснение29.Видимость = ВидимостьРезультата;
	
	Форма.Элементы.Пояснение30.Заголовок = ТекстЗаголовка;
	Форма.Элементы.Пояснение31.Заголовок = ОписаниеРезультата;
	Форма.Элементы.Пояснение30.Видимость = ВидимостьРезультата;
	Форма.Элементы.Пояснение31.Видимость = ВидимостьРезультата;
	
	Форма.Элементы.Пояснение25.Видимость             = ВидимостьКнопкиЗагрузить;
	Форма.Элементы.Пояснение27.Видимость             = ВидимостьКнопкиЗагрузить;
	Форма.Элементы.ЗагрузитьИзФайла.Видимость        = ВидимостьКнопкиЗагрузить;
	Форма.Элементы.СинхронизироватьВОблаке.Видимость = ВидимостьКнопкиЗагрузить;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНастройкиМиниденегВОблаке(ШрифтВыделения, ИмяПровайдера, Аккаунт, ИмяБазы)

	ТекстНастройки = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока("1. Откройте мобильное приложение ""Миниденьги"", в главном меню выберите команду "),
			Новый ФорматированнаяСтрока("Настройки и сервис", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" и нажмите на строку "),
			Новый ФорматированнаяСтрока("Настройка синхронизации", ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("2. Включите синхронизацию, если она еще не включена"),
			Символы.ПС,
			Новый ФорматированнаяСтрока("3. Обязательно укажите сценарий первой синхронизации "),
			Новый ФорматированнаяСтрока("Выгрузить в пустую настольную базу", ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("4. В разделе ""Облачный сервис"" включите "),
			Новый ФорматированнаяСтрока("Использовать облако", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" и наишите имя базы на компьютере: "),
			Новый ФорматированнаяСтрока(ИмяБазы, ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("Соблюдайте регистр символов!"),
			Символы.ПС,
			Новый ФорматированнаяСтрока("5. Выберите облачный сервис "),
			Новый ФорматированнаяСтрока(ИмяПровайдера, ШрифтВыделения),
			Символы.ПС,
			Новый ФорматированнаяСтрока("6.Нажмите кнопку "),
			Новый ФорматированнаяСтрока("Авторизовать", ШрифтВыделения),
			Новый ФорматированнаяСтрока(". Войдите на сервис под логином "),
			Новый ФорматированнаяСтрока(Аккаунт, ШрифтВыделения),
			Новый ФорматированнаяСтрока(" и разрешите программе доступ к файлам"),
			Символы.ПС,
			Новый ФорматированнаяСтрока("7. Подождите, пока программа проверит доступ, после чего закройте настройку синхронизации и нажмите команду "),
			Новый ФорматированнаяСтрока("Синхронизировать через облако", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" в главном меню мобильного приложения "),
			Символы.ПС,
			Символы.ПС,
			Новый ФорматированнаяСтрока("Дождитесь выполнения синхронизации на мобильном устройстве, после чего нажмите кнопку "),
			Новый ФорматированнаяСтрока("Далее", ШрифтВыделения),
			Новый ФорматированнаяСтрока(" в этом диалоге")
		);

	Возврат ТекстНастройки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СсылкаНаТранспорт(Провайдер, ВключитьИспользование = Истина)

	ТранспортОблако = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортОблачногоПровайдера(Провайдер);
	Если Не ЗначениеЗаполнено(ТранспортОблако) Тогда
		ВызватьИсключение НСтр("ru='Облачный сервис указан неправильно'");
	КонецЕсли;
	
	Если ВключитьИспользование И ТранспортОблако.ЗапретитьИспользование Тогда
		ТрансопртОбъект = ТранспортОблако.ПолучитьОбъект();
		ТрансопртОбъект.ЗапретитьИспользование = Ложь;
		ТрансопртОбъект.Записать();
	КонецЕсли;
	
	Возврат ТранспортОблако;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеСтраницаНастройкиСинхронизацияСЦБ(Форма)
	
	Форма.Элементы.ГруппаСинхронизацияСЦБ.Видимость = Форма.РезультатОбмена = Неопределено;
	Форма.Элементы.ГруппаСинхронизацияСЦБВыполнена.Видимость = Форма.РезультатОбмена <> Неопределено 
			И ( Форма.РезультатОбмена.РезультатПолученияДанных = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.Выполнено")
				Или Форма.РезультатОбмена.РезультатПолученияДанных = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями") );
	Форма.Элементы.ГруппаСинхронизацияСЦБОшибка.Видимость = Не Форма.Элементы.ГруппаСинхронизацияСЦБ.Видимость
				И Не Форма.Элементы.ГруппаСинхронизацияСЦБВыполнена.Видимость;
	
	Если Форма.РезультатОбмена <> Неопределено И Не ПустаяСтрока(Форма.РезультатОбмена.ТекстОшибокПолучения) Тогда
		
		Форма.Элементы.ПояснениеОшибкиСЦБ.Заголовок = Форма.РезультатОбмена.ТекстОшибокПолучения;
		
	Иначе
		Форма.Элементы.ПояснениеОшибкиСЦБ.Заголовок = НСтр("ru='Загрузка данных завершилась ошибкой.
				|Подробность можно посмотреть в журнале регистрации'") ;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Навигационные ссылки

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиКлиент(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Найти(НРег(НавигационнаяСсылкаФорматированнойСтроки), "команда_") = 1 Тогда
		ВыполнитьКомандуПоСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	ИначеЕсли Найти(НРег(НавигационнаяСсылкаФорматированнойСтроки), "документация_") = 1 Тогда
		ОткрытьИнструкциюПоСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	ИначеЕсли Найти(НРег(НавигационнаяСсылкаФорматированнойСтроки), "описание_") = 1 Тогда
		ОткрытьОписаниеПоСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	Иначе
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПоСсылке(НавигационнаяСсылка)
	
	ИмяКоманды = НРег(Сред(НавигационнаяСсылка, 9));
	Если ИмяКоманды = НРег("ПодключитьСервисЦБ") Тогда
		ПодключитьсяКСервисуЦБ();
	ИначеЕсли ИмяКоманды = НРег("СинхронизироватьСЦБ") Тогда
		ОткрытьСинхронизациюСЦБ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоСсылке(НавигационнаяСсылка)

	ИмяИнструкции = Сред(НавигационнаяСсылка, 14);
	
	Если Найти("МониторСинхронизацииСМобильнымиУстройствами,Монитор,НастройкаОблачногоСервиса,НастройкаДомашнейСети,ИнформацияОРезультатах,ИнтерактивныйОбменЧерезСервис,
				|ИспользованиеОблачногоСервиса,УстановкаВебРасширения,УстановкаВебСервераApache,ПубликацияБазыНаВебсервере,
				|ПримерНастройкиРоутера,ИспользованиеДомашнейСети,ИнструкцияОбменаФайлами,", ИмяИнструкции) > 0 Тогда
		ИмяОбработки = "МониторСинхронизацииСМобильнымиУстройствами";
	ИначеЕсли Найти("ПлановыеОперации,Аналитика,ФинансовыеЦели,Бюджет,МобильноеПриложение", ИмяИнструкции) > 0 Тогда
		ИмяОбработки = "ОбзорОсновныхВозможностей";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяОбработки = "МониторСинхронизацииСМобильнымиУстройствами" Тогда
		ОткрытьСправку("Обработка.МониторСинхронизацииСМобильнымиУстройствами." + ?(ИмяИнструкции = "МониторСинхронизацииСМобильнымиУстройствами", "", "Форма." + ИмяИнструкции));
	Иначе
		ДеньгиКлиент.ОткрытьМакетВоВнешнемБраузере(ИмяИнструкции, ИмяОбработки, КаталогИнструкций);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция КаталогИнструкций()

	Разделитель = ПолучитьРазделительПутиКлиента();
	КаталогВсехИнструкций = КаталогВременныхФайлов();
	КаталогВсехИнструкций = КаталогВсехИнструкций + ?(Прав(КаталогВсехИнструкций, 1) = Разделитель, "", Разделитель) + "MoneyTutorials.tmp";
	Возврат КаталогВсехИнструкций;

КонецФункции

&НаКлиенте
Процедура ОткрытьОписаниеПоСсылке(НавигационнаяСсылка)

	ФормаОписания = Сред(НавигационнаяСсылка, 10);
	ОткрытьСправку("Обработка.ОбзорОсновныхВозможностей.Форма." + ФормаОписания);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Синхронизация

&НаСервереБезКонтекста
Функция СинхронизацияВОблакеВключена(ПараметрыЦентральнойБазы, Провайдер, Параметры, ТекстОшибки)

	ПараметрыЦентральнойБазы = Неопределено;
	ВключитьОбменДанными(ПараметрыЦентральнойБазы);
	Если ПараметрыЦентральнойБазы = Неопределено Тогда
		ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	КонецЕсли;
	
	Параметры = Неопределено;
	ОбновитьПараметрыОблачнойСинхронизации(Провайдер, Параметры);
	
	Возврат ТипЗнч(Параметры) = Тип("Структура");

КонецФункции

&НаСервереБезКонтекста
Процедура ВключитьОбменДанными(ПараметрыЦентральнойБазы, ССервисомЦБ = Ложь)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Если Не ОбщегоНазначения.РазделениеВключено() Тогда 
			Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Выбор способа устанавливает функциональные опции
	Константы.ДеньгиВыбранныйСпособСинхронизации.Установить(
		?(ССервисомЦБ, Перечисления.СпособыСинхронизацииДанных.СинхронизацияССервисом, 
			Перечисления.СпособыСинхронизацииДанных.ОбменФайлами));
	
	ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПараметрыОблачнойСинхронизации(Провайдер, Параметры)

	Параметры = Новый Структура;	
	
	НастройкиПровайдера = RESTКлиентСервер.СвойстваПровайдера(Провайдер);
	Параметры.Вставить("ПутьККаталогу", НастройкиПровайдера.КаталогОбмена);
	Параметры.Вставить("Представление", Строка(Провайдер));
	
	Параметры.Вставить("Авторизован",  RESTКлиентСервер.ПриложениеАвторизовано(Провайдер, Истина));
	
	Аккаунт = "";
	Если Параметры.Авторизован Тогда
		RESTКлиентСервер.ОбновитьСвойстваАккаунта(Провайдер, Неопределено);
		Аккаунт = RESTКлиентСервер.ПредставлениеАвторизованногоАккаунта(Провайдер);
	КонецЕсли;
	Параметры.Вставить("Аккаунт", Аккаунт);

КонецПроцедуры

&НаКлиенте
Процедура АвторизоватьсяВОблакеЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	ОбработкаАвторизацииОблачногоПровайдера();

КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаАвторизацииОблачногоПровайдера()

	Состояние(НСтр("ru='Подождите, выполняется проверка облачного сервиса...'"));
	
	ТекстОшибки = "";
	Если Не СинхронизацияВОблакеВключена(ПараметрыЦентральнойБазы, ОблакоПровайдер, ОблакоПараметры, ТекстОшибки) 
		Или Не ОблачныйКаталогПодготовлен(ОблакоПровайдер, ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
	УправлениеСтраницаНастройкиОблака(ЭтотОбъект);
	// Автоматически страницу не меняем, иначе непоняет результат и незаметно, что на экране появились новые инструкции

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменКлиентЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	ПроверитьРезультатыОбмена(РезультатОбмена);
	УправлениеСтраницаЗагрузитьФайл(ЭтотОбъект);
	Если РезультатОбмена = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не удалось загрузить данные из Миниденег.
					|Проверьте настройки синхронизации, описанные на предыдущем шаге,
					|и повторите поптыку'"));
		ПослеОтказаЗагрузкиДанныхИзМобильного();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРезультатыОбмена(РезультатОбмена)
	
	РезультатОбмена = Неопределено;
	Если ОбщегоНазначенияДеньги.ИнформационнаяБазаПустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРезультатыОбменаБСП(РезультатОбмена);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРезультатыОбменаБСП(РезультатОбмена)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильноеУстройство", Константы.ДеньгиВыбранныйСпособСинхронизации.Получить() <> Перечисления.СпособыСинхронизацииДанных.СинхронизацияССервисом);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияОбменовДанными.ДействиеПриОбмене КАК ДействиеПриОбмене,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	СостоянияОбменовДанными.РезультатВыполненияОбмена КАК РезультатВыполненияОбмена,
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	НЕ СостоянияОбменовДанными.УзелИнформационнойБазы.ЭтотУзел
	|	И СостоянияОбменовДанными.УзелИнформационнойБазы.МобильноеУстройство = &МобильноеУстройство
	|	И СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СостоянияОбменовДанными", "РегистрСведений.СостоянияОбменовДаннымиОбластейДанных")
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатОбмена = Новый Структура("УзелИнформационнойБазы,РезультатПолученияДанных,ПоследнееПолучение,ТекстОшибокПолучения");
		РезультатОбмена.УзелИнформационнойБазы = Выборка.УзелИнформационнойБазы;
		РезультатОбмена.РезультатПолученияДанных = Выборка.РезультатВыполненияОбмена;
		РезультатОбмена.ПоследнееПолучение = Выборка.ДатаОкончания;
		Если РезультатОбмена.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято Тогда
			РезультатОбмена.ТекстОшибокПолучения = НСтр("ru='Сообщение было принято ранее'");
		ИначеЕсли РезультатОбмена.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения Тогда
			РезультатОбмена.ТекстОшибокПолучения = НСтр("ru='Ошибка транспорта сообщений: сервер недоступен или соединение оборвано'");
		ИначеЕсли РезультатОбмена.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Отменено Тогда
			РезультатОбмена.ТекстОшибокПолучения = НСтр("ru='Чтение сообщения было отменено'");
		ИначеЕсли РезультатОбмена.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка Тогда
			РезультатОбмена.ТекстОшибокПолучения = НСтр("ru='При чтении полученных данных возникла ошибка
					|Детали можно посмотреть в журнале регистрации'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРезультатыОбменаФайлы(РезультатОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрольОбменаДанными.УзелИнформационнойБазы,
	|	КонтрольОбменаДанными.Транспорт,
	|	КонтрольОбменаДанными.РезультатПолученияДанных,
	|	КонтрольОбменаДанными.ПоследнееУспешноеПолучение,
	|	КонтрольОбменаДанными.ПоследнееПолучение КАК ПоследнееПолучение,
	|	КонтрольОбменаДанными.ТекстОшибокПолучения
	|ИЗ
	|	РегистрСведений.КонтрольОбменаДанными КАК КонтрольОбменаДанными
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоследнееПолучение УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатОбмена = Новый Структура("УзелИнформационнойБазы,Транспорт,РезультатПолученияДанных,ПоследнееУспешноеПолучение,ПоследнееПолучение,ТекстОшибокПолучения");
		ЗаполнитьЗначенияСвойств(РезультатОбмена, Выборка);
	КонецЕсли;

	
КонецПроцедуры


&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подождите, выполняется загрузка данных из файла...'"), , , БиблиотекаКартинок.ДлительнаяОперация48);
	
	ИмяФайлаЗагрузки = ВыбранныеФайлы[0];
	Отказ            = Ложь;
	ОписаниеПроблемы = "";
	ИмяФайлаОтвета   = "";
	ВыполнитьОбменФайламиСервер(ИмяФайлаЗагрузки, Отказ, ОписаниеПроблемы, ИмяФайлаОтвета);

	Если Отказ Тогда
		Сообщить(ОписаниеПроблемы);
		ПоказатьПредупреждение(, НСтр("ru='Не удалось загрузить файл.
				|Повторите действия, описанные на предыдущем шаге, и снова загрузите файл'"));
	Иначе
		ПроверитьРезультатыОбмена(РезультатОбмена);
		УправлениеСтраницаЗагрузитьФайл(ЭтотОбъект);
	КонецЕсли; 
	
	//ОтобразитьСтраницуПомощника(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьОбменФайламиСервер(Знач ИмяФайла, Отказ, ОписаниеПроблемы, ИмяФайлаОтвета)

	ПараметрыЦентральнойБазы = Неопределено;
	ВключитьОбменДанными(ПараметрыЦентральнойБазы);
	
	Отказ = Ложь;
	ОписаниеПроблемы = "";
	УзелКорреспондента = Неопределено;
	Транспорт = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортКаталога();
	
	// Предварительная очистка базы
	Если Не ОбщегоНазначенияДеньги.ОчиститьДанныеПодсистемыДеньги(Истина, ОписаниеПроблемы) Тогда
		Отказ = Истина;
		ПослеОтказаЗагрузкиДанныхИзМобильного(УзелКорреспондента);
		Возврат;
	КонецЕсли;
	
	СинхронизацияАвтономныхКопий.ЗагрузитьДанныеИзФайлаДляУзлаИнформационнойБазы(УзелКорреспондента, ИмяФайла, Отказ, Транспорт);
	
	Если Отказ Тогда
		ПослеОтказаЗагрузкиДанныхИзМобильного(УзелКорреспондента, ОписаниеПроблемы, Транспорт);
		Возврат;
	Иначе
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	КонецЕсли; 
	
	ОкончаниеФайла = Прав(ИмяФайла, 3);
	Если ОкончаниеФайла = "xml" Тогда
		ИмяФайлаОтвета = Сред(ИмяФайла, 1, СтрДлина(ИмяФайла) - 3) + "repl.xml";
	Иначе
		ИмяФайлаОтвета = ИмяФайла + ".repl.xml";
	КонецЕсли; 
	
	СинхронизацияАвтономныхКопий.ВыгрузитьДанныеВФайлДляУзлаИнформационнойБазы(УзелКорреспондента, ИмяФайлаОтвета, Отказ);
	
	Если Отказ Тогда
		ПослеОтказаЗагрузкиДанныхИзМобильного(УзелКорреспондента, ОписаниеПроблемы, Транспорт);
	Иначе
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Выполнено);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПослеОтказаЗагрузкиДанныхИзМобильного(УзелКорреспондента = Неопределено, ОписаниеПроблемы = Неопределено, Транспорт = Неопределено)

	СписокУзлов = Новый Массив;
	Если Не ЗначениеЗаполнено(УзелКорреспондента) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МобильноеПриложение.Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	НЕ МобильноеПриложение.ЭтотУзел
		|	И МобильноеПриложение.Активность";
		
		СписокУзлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
		СписокУзлов.Добавить(УзелКорреспондента);
	КонецЕсли;
	
	Для каждого Узел Из СписокУзлов Цикл
		УзелОбъект = Узел.ПолучитьОбъект();
		УзелОбъект.НомерПринятого = 0;
		УзелОбъект.Записать();
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(УзелКорреспондента) Или ОписаниеПроблемы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПроблемы = "";
	Если ЗначениеЗаполнено(Транспорт) Тогда
		ОшибкаТранспорта = РегистрыСведений.КонтрольТранспортовОбмена.ТекстОшибкиОбмена(Транспорт);
	Иначе
		ОшибкаТранспорта = "";
	КонецЕсли;
	ОшибкаУзла = РегистрыСведений.КонтрольОбменаДанными.ТекстОшибкиОбмена(УзелКорреспондента);
	
	ОписаниеПроблемы = ОшибкаТранспорта + ?(ЗначениеЗаполнено(ОшибкаТранспорта) Или ЗначениеЗаполнено(ОшибкаУзла), Символы.ПС, "") + ОшибкаУзла;

КонецПроцедуры


// Проверяет доступность и работоспособность с каталогом в облаке
//
// Параметры:
//  ОписаниеПроблемы - Строка - Возвращаемый параметр. Содержит информацию о текущей ошибке. Пустая строка = без ошибок
//  КодОшибки		 - Число - Возвращаемый параметр. Содержит код текущей ошибки. Если равен 0, то без ошибок. 
// 
// Возвращаемое значение:
//  Булево - Истина, если все в порядке и каталог готов к работе.
//
&НаСервереБезКонтекста
Функция ОблачныйКаталогПодготовлен(Провайдер, ОписаниеПроблемы = "")

	ОписаниеПроблемы = "";
	
	//Определяем обработку транспорта 
	ОбъектОбработки = Обработки.ТранспортСообщенийОбменаОблачныйФайловыйСервис.Создать();
	ОбъектОбработки.Провайдер = Провайдер;
	ОбъектОбработки.Инициализация();
	
	Результат = Истина;
	
	Если НЕ ОбъектОбработки.ВыполнитьДействияПередОбработкойСообщения() Тогда
		ОписаниеПроблемы = ОбъектОбработки.СтрокаСообщенияОбОшибке;
		Результат = Ложь;
	КонецЕсли;
	
	Если Результат И НЕ ОбъектОбработки.ПодключениеУстановлено() Тогда
		ОписаниеПроблемы = ОбъектОбработки.СтрокаСообщенияОбОшибке;
		Результат = Ложь;
	КонецЕсли; 
	
	ОбъектОбработки.ВыполнитьДействияПослеОбработкиСообщения();
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПодготовитьСетьКРаботе(ПараметрыЦентральнойБазы)

	ПараметрыЦентральнойБазы = Неопределено;
	ВключитьОбменДанными(ПараметрыЦентральнойБазы);
	Если ПараметрыЦентральнойБазы = Неопределено Тогда
		ПараметрыЦентральнойБазы = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	КонецЕсли;
	
	ТранспортДомашняяСеть = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети();
	
	Если ТранспортДомашняяСеть.ЗапретитьИспользование Тогда
		ТрансопртОбъект = ТранспортДомашняяСеть.ПолучитьОбъект();
		ТрансопртОбъект.ЗапретитьИспользование = Ложь;
		ТрансопртОбъект.Записать();
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСвойствКошелька()
	Возврат "Валюта,ВалютаУчета,ИндексСтрокиКошелька,ИспользоватьДляНакоплений,Ключ,ТипСчета,КредитныйЛимит,Наименование,ОстатокНаНачало";
КонецФункции

&НаКлиенте
Процедура ОткрытьПараметрыКошелька(ИДСтроки, ИДОригинала = Неопределено)

	Если ИДОригинала <> Неопределено Тогда
		СтрокаКошелька = СписокКошельков.НайтиПоИдентификатору(ИДОригинала);
	Иначе
		СтрокаКошелька = СписокКошельков.НайтиПоИдентификатору(ИДСтроки);
	КонецЕсли;
	
	// Параметры открываемой формы
	ПараметрыФормы = Новый Структура(СтрокаСвойствКошелька());
	Если СтрокаКошелька <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаКошелька);
	Иначе
		ПараметрыФормы.Валюта = ВалютаУчета;
		ПараметрыФормы.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.БанковскаяКартаДебетовая");
	КонецЕсли;
	ПараметрыФормы.ВалютаУчета          = ВалютаУчета;
	
	// Обработчик оповещения о закрытии формы
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ИДСтроки);
	Оповещение = Новый ОписаниеОповещения("ПараметрыКошелькаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Открытие формы
	ОткрытьФорму("Обработка.ПомощникНачалаРаботы.Форма.ПараметрыКошелька", ПараметрыФормы, СписокКошельков, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
 
&НаКлиенте
Процедура ПараметрыКошелькаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТекущаяСтрока < 0 Тогда
		// Добавляется новая строка
		СтрокаКошелька = СписокКошельков.Добавить();
	Иначе
		СтрокаКошелька = СписокКошельков.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	КонецЕсли;

	Если СтрокаКошелька = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаКошелька, Результат);
	СтрокаКошелька.Свойства = ТекстСвойствКошелька(СтрокаКошелька);
	Элементы.СписокКошельков.ТекущаяСтрока = СтрокаКошелька.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКошельковПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	СтрокаКошелька = СписокКошельков.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	Если СтрокаКошелька = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокКошельков.Удалить(СтрокаКошелька);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВалютуВСпискеКошельков()

	Для каждого СтрокаКошелька Из СписокКошельков Цикл
		Если СтрокаКошелька.Валюта = ПрежняяВалютаУчета Тогда
			СтрокаКошелька.Валюта = ВалютаУчета
		КонецЕсли;
	КонецЦикла;

	ПрежняяВалютаУчета = ВалютаУчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаУчетаПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаменитьВалютуВСпискеКошельков();
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		ВалютаУчета = ПрежняяВалютаУчета;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательСвойства.Пароль       = Результат.НовыйПароль;
	ПользовательСвойства.ПарольУстановлен = ЗначениеЗаполнено(Результат.НовыйПароль);
	ПользовательСвойства.ПарольИзменен    = Истина;
	
	УстановитьНаличиеПароля(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНаличиеПароля(Форма)

	Если Форма.ПользовательСвойства <> Неопределено И Форма.ПользовательСвойства.ПарольУстановлен Тогда
		Форма.ПользовательПароль = НСтр("ru='Пароль задан'");
		Форма.Элементы.СменитьПароль.Заголовок = НСтр("ru='Сменить пароль...'"); 
	Иначе
		Форма.ПользовательПароль = НСтр("ru='Пустой пароль'");
		Форма.Элементы.СменитьПароль.Заголовок = НСтр("ru='Установить пароль...'"); 
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Завершение работы помощника

&НаСервере
Процедура ЗавершитьРаботуПомощника()

	Если СостояниеПомощника = Неопределено Тогда
		БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
		РегистрыСведений.СтатистикаСправочников.ОбновитьВсюСтатистикуСправочников();
		Возврат;
	КонецЕсли;
	
	Если Не РежимРазделения И ЗначениеЗаполнено(ПользовательИмя) Тогда
		УстановитьПользователей();
	КонецЕсли;
	
	Если Сценарий = "НовыйПользователь" Тогда
		УстановитьВалютуУчета();
		УстановитьКошельки();
		УстановитьСтатьиДоходовИРасходов();
	КонецЕсли;
	
	БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	РегистрыСведений.СтатистикаСправочников.ОбновитьВсюСтатистикуСправочников();
	
	СостояниеПомощника.ПомощникЗавершен = Истина;
	СохранитьСостояниеПомощника(СостояниеПомощника);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПользователей()

	Если РежимРазделения Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем основного пользователя
	Пользователь = НовыйПользовательБазы(?(ЗначениеЗаполнено(ИмяПользователя()), ИмяПользователя(), ПользовательИмя), 
				ПользовательИмя, ПользовательСвойства.Пароль, Пользователь, ПользовательСвойства.ПарольИзменен);
	
	// Создаем пользователей - членов семьи
	Для каждого СтрокаПользователя Из Семья Цикл
		Если ЗначениеЗаполнено(СтрокаПользователя.Имя) Тогда
			СтрокаПользователя.Пользователь = НовыйПользовательБазы(СтрокаПользователя.Имя, СтрокаПользователя.Имя, СтрокаПользователя.Пароль, СтрокаПользователя.Пользователь, Ложь);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйПользовательБазы(ТекущееИмя, НовоеИмя, Пароль, СсылкаПользователя, ПарольИзменен)

	ПользовательИБ = ?(ЗначениеЗаполнено(ТекущееИмя), ПользователиИнформационнойБазы.НайтиПоИмени(ТекущееИмя), 
				?(ЗначениеЗаполнено(НовоеИмя), ПользователиИнформационнойБазы.НайтиПоИмени(НовоеИмя), Неопределено));
	Если ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	Если ПользовательИБ.Имя <> НовоеИмя Или ПарольИзменен Тогда
		
		ПользовательИБ.Имя                       = НовоеИмя;
		ПользовательИБ.ПолноеИмя                 = НовоеИмя;
		ПользовательИБ.АутентификацияСтандартная = Истина;
		ПользовательИБ.АутентификацияОС          = Ложь;
		
		Если ПарольИзменен Тогда
			ПользовательИБ.Пароль = Пароль;
		КонецЕсли;
		ПользовательИБ.ПоказыватьВСпискеВыбора = Истина;
		ПользовательИБ.Роли.Очистить();
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		
		ПользовательИБ.Записать();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаПользователя) Тогда
		СсылкаПользователя = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(СсылкаПользователя) Тогда
		СсылкаПользователя = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СсылкаПользователя) Тогда
		СсылкаПользователя = Справочники.Пользователи.НайтиПоНаименованию(ТекущееИмя);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СсылкаПользователя) Тогда
		СсылкаПользователя = Справочники.Пользователи.НайтиПоНаименованию(НовоеИмя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаПользователя) Тогда
		ПользовательОбъект = СсылкаПользователя.ПолучитьОбъект();
	Иначе
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
	КонецЕсли;
	ПользовательОбъект.Наименование = НовоеИмя;
	ПользовательОбъект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
	Попытка
		ПользовательОбъект.Записать();
	Исключение
		Сообщить(СтрШаблон(НСтр("ru='Не удалось записать пользователя ""%1"". Проверьте список пользователей в меню ""Сервис->Настройка и обслуживание""'") ));
	КонецПопытки; 
	
	Возврат ПользовательОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура УстановитьВалютуУчета()

	Если ЗначениеЗаполнено(ВалютаУчета) И ВалютаУчета <> Константы.ВалютаУчета.Получить() Тогда
		Константы.ВалютаУчета.Установить(ВалютаУчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаУчета) Тогда
		Выборка = Справочники.Валюты.Выбрать();
		Пока Выборка.Следующий() Цикл
			РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Выборка.Ссылка, ВалютаУчета);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьКошельки()

	Для каждого СтрокаКошелька Из СписокКошельков Цикл
		СтрокаКошелька.Ссылка = НовыйКошелек(СтрокаКошелька, Пользователь);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйКошелек(СтрокаКошелька, Пользователь)

	КошелекСсылка = Справочники.КошелькиИСчета.НайтиПоНаименованию(СтрокаКошелька.Наименование);
	Если КошелекСсылка.Пустая() И ЗначениеЗаполнено(СтрокаКошелька.Ключ) Тогда
		КошелекСсылка = Справочники.КошелькиИСчета.НайтиПоНаименованию(СтрокаКошелька.Ключ);
	КонецЕсли;
	Если КошелекСсылка.Пустая() Тогда
		КошелекОбъект = Справочники.КошелькиИСчета.СоздатьЭлемент();
	Иначе
		КошелекОбъект = КошелекСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КошелекОбъект, СтрокаКошелька);
	КошелекОбъект.Активность = Истина;
	КошелекОбъект.ДополнительныеСвойства.Вставить("ОтложеннаяЗапись", Истина);
	КошелекОбъект.Записать();
	КошелекСсылка = КошелекОбъект.Ссылка;
	
	Если ЗначениеЗаполнено(СтрокаКошелька.ОстатокНаНачало) Тогда
		
		Операция = Документы.ВводИзменениеОстатка.СоздатьДокумент();
		Операция.Дата = НачалоМесяца(ТекущаяДатаКлиентСервер()) - 1;
		Операция.Комментарий = НСтр("ru='Остаток на начало'"); 
		Операция.ОбъектУчета = КошелекСсылка;
		Операция.СуммаНовогоОстатка = СтрокаКошелька.ОстатокНаНачало;
		Операция.Пользователь = Пользователь;
		Операция.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
	Возврат КошелекСсылка;

КонецФункции

&НаСервере
Процедура УстановитьСтатьиДоходовИРасходов()

	// Сначала соберем подезную статистику
	Статистика = Новый Структура("ОтмеченоВидов, Доходов, Расходов", 0, 0, 0);
	
	Для каждого ВидДеятельности Из ВидыДеятельности Цикл
		
		Если Не ВидДеятельности.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Статистика.ОтмеченоВидов = Статистика.ОтмеченоВидов + 1;
		Если СтрНайти("Зарплата,КупляПродажа,ОказаниеУслуг,СдачаВАренду,", ВидДеятельности.Значение + ",") > 0 Тогда
			Статистика.Доходов = Статистика.Доходов + 1;
		Иначе
			Статистика.Расходов = Статистика.Расходов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатьямиОбщегоНазначения();
	
	Для каждого ВидДеятельности Из ВидыДеятельности Цикл
		Если ВидДеятельности.Пометка Тогда
			ДобавитьСтатьиПоВидуДеятельности(ВидДеятельности.Значение, Статистика);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтатьямиОбщегоНазначения()

	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Еда и напитки'"));
	НоваяСтатьяРасхода(НСтр("ru='Еда в кафе, столовых, ресторанах'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Мясные продукты и рыба'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Молочные продукты'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Консервы'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Овощи, фрукты, зелень'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Крупы, макароны'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Сладости, десерты'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Приправы'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Выпечка'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Полуфабрикаты'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Напитки спиртные'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Напитки безалкогольные'"), ГруппаРасходов);

	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Одежда и обувь'"));
	НоваяСтатьяРасхода(НСтр("ru='Зимняя одежда и обувь'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Летняя одежда и обувь'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Демисезонная одежда и обувь'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Спортивная одежда и обувь'"), ГруппаРасходов);
	
	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Лечение'"));
	НоваяСтатьяРасхода(НСтр("ru='Медицинаская старховка'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Расходы на поликлинику'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Стоматолог'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Очки, линзы'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Лекарства'"), ГруппаРасходов);
	
	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Общественный транспорт'"));
	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Развлечения и хобби'"));
	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Финансовая поддержка родственников'"));
	
	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Связь и интернет'"));
	НоваяСтатьяРасхода(НСтр("ru='Сотовая связь'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Интернет'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Почтовые услуги'"), ГруппаРасходов);
	
	ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Культура и просвещение'"));
	НоваяСтатьяРасхода(НСтр("ru='Художественная литература'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Кинотеатры, театры, концерты'"), ГруппаРасходов);
	НоваяСтатьяРасхода(НСтр("ru='Музеи и экскурсии'"), ГруппаРасходов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтатьиПоВидуДеятельности(Вид, Статистика)

	Если Вид = "Зарплата" Тогда
		
		ГруппаДоходов  = ?(Статистика.Доходов > 1, НоваяСтатьяДохода(НСтр("ru='Заработок'")), Неопределено);
		НоваяСтатьяДохода(НСтр("ru='Зарплата'"), ГруппаДоходов);
		НоваяСтатьяДохода(НСтр("ru='Премия'"), ГруппаДоходов);
		НоваяСтатьяДохода(НСтр("ru='Аванс'"), ГруппаДоходов);
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Расходы по работе'"));
		НоваяСтатьяРасхода(НСтр("ru='Разные офисные расходы'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Еда на работе'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Служебные поездки'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Корпоративные мероприятия'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "КупляПродажа" Тогда
		
		ГруппаДоходов  = НоваяСтатьяДохода(НСтр("ru='Торговая выручка'"));
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Расходы на торговлю'"));
		НоваяСтатьяРасхода(НСтр("ru='Закупка товара'"),                 ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Доставка товара'"),                ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Комиссионные за продажу товара'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Хранение товара'"),                ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Аренда торговой площади'"),        ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Зарплата продавцов'"),             ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Торговое оборудование'"),          ГруппаРасходов);
		
	ИначеЕсли Вид = "ОказаниеУслуг" Тогда
		
		ГруппаДоходов  = НоваяСтатьяДохода(НСтр("ru='Выручка за работы и услуги'"));
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Расходы по работам и услугам'"));
		НоваяСтатьяРасхода(НСтр("ru='Закупка материалов'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Поездки к заказчикам и обратно'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Оплата работ субподрядчиков'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Инструменты'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "СдачаВАренду" Тогда
		
		ГруппаДоходов  = НоваяСтатьяДохода(НСтр("ru='Арендная плата'"));
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Расходы на сдаваемое в аренду имущество'"));
		НоваяСтатьяРасхода(НСтр("ru='Содержание сдаваемого имущества'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Ремонт сдаваемого имущества'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Налоги на сдаваемое имущество'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Страхование сдаваемого имущества'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "АрендаЖилья" Тогда
		
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Аренда жилья'"));
		
	ИначеЕсли Вид = "Коммуналка" Тогда
		
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Коммунальные платежи'"));
		НоваяСтатьяРасхода(НСтр("ru='Электроэнергия'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Вода'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Водоотвод'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Центральное отопление'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Нагрев воды'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Капитальный ремонт'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Лифт'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Уборка'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Содержание общедомового имущества'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Телевизионная антена'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Радиоточка'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Вывоз мусора'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "Дети" Тогда
		
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Воспитание детей'"));
		НоваяСтатьяРасхода(НСтр("ru='Карманные расходы детей'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Детская одежда и обувь'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Детское образование'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Детские секции, кружки'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Игрушки, подарки'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Детское питание'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Детские врачи и лекарства'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "Автомобиль" Тогда
		
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Автомобиль'"));
		НоваяСтатьяРасхода(НСтр("ru='Бензин'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Стоянка'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Штрафы ГИБДД'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='ОСАГО'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='КАСКО'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Техобслуживание автомобиля'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Ремонт и запасные части'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Комплектующие для автомобиля'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Разные улучшения автомобиля'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "Животные" Тогда
		
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Животные'"));
		НоваяСтатьяРасхода(НСтр("ru='Корм'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Ветеринар'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Наполнитель для туалета'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Посуда для животных'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Витамины и лекарства для животных'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Игрушки, чесалки, ошейники'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Клетки и переноски для животных'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "Образование" Тогда
		
		ГруппаДоходов  = НоваяСтатьяДохода(НСтр("ru='Стипендия'"));
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Образование'"));
		НоваяСтатьяРасхода(НСтр("ru='Учебная литература'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Платные курсы, лекции, тренинги'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Прочие расходы на обучение'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "Спорт" Тогда
		
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Спорт'"));
		НоваяСтатьяРасхода(НСтр("ru='Спортивная одежда'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Абонементы в спортзал/фитнес-центр'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Спортивное питание'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Спортивные снаряды'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Спортивная одежда и обувь'"), ГруппаРасходов);
		
	ИначеЕсли Вид = "Дача" Тогда
		
		ГруппаРасходов = НоваяСтатьяРасхода(НСтр("ru='Дача'"));
		НоваяСтатьяРасхода(НСтр("ru='Поездки на дачу'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Посадочный материал'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Удобрения, хим.защита'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Налоги за дачу'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Материалы для дачи'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Строительство и ремонт дачи'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Дачные коммунальные платежи'"), ГруппаРасходов);
		НоваяСтатьяРасхода(НСтр("ru='Дачная мебель и оборудование'"), ГруппаРасходов);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяСтатьяДохода(Наименование, Родитель = Неопределено)

	СтатьяСсылка = Справочники.СтатьиДоходов.НайтиПоНаименованию(Наименование, Истина, Родитель);
	Если СтатьяСсылка.Пустая() Тогда
		СтатьяОбъект = Справочники.СтатьиДоходов.СоздатьЭлемент();
		СтатьяОбъект.Наименование = Наименование;
		СтатьяОбъект.Родитель = Родитель;
		СтатьяОбъект.Активность = истина;
		СтатьяОбъект.ДополнительныеСвойства.Вставить("ОтложеннаяЗапись", Истина);
		СтатьяОбъект.Записать();
		СтатьяСсылка = СтатьяОбъект.Ссылка;
	КонецЕсли;
	
	Возврат СтатьяСсылка;

КонецФункции

&НаСервереБезКонтекста
Функция НоваяСтатьяРасхода(Наименование, Родитель = Неопределено, КоличественныйУчет = Ложь)

	СтатьяСсылка = Справочники.СтатьиРасходов.НайтиПоНаименованию(Наименование, Истина, Родитель);
	Если СтатьяСсылка.Пустая() Тогда
		СтатьяОбъект = Справочники.СтатьиРасходов.СоздатьЭлемент();
		СтатьяОбъект.Наименование = Наименование;
		СтатьяОбъект.Родитель = Родитель;
		СтатьяОбъект.Активность = истина;
		СтатьяОбъект.КоличественныйУчет = КоличественныйУчет;
		СтатьяОбъект.ДополнительныеСвойства.Вставить("ОтложеннаяЗапись", Истина);
		СтатьяОбъект.Записать();
		СтатьяСсылка = СтатьяОбъект.Ссылка;
	КонецЕсли;
	
	Возврат СтатьяСсылка;

КонецФункции

&НаКлиенте
Процедура ПредупреждениеОПерезагрузкеЗавершение(ДополнительныеПараметры) Экспорт

	Если ПользовательСвойства <> Неопределено И ЗначениеЗаполнено(ПользовательСвойства.Имя) Тогда
		СтрокаПараметров = "/N" + ПользовательСвойства.Имя;
	Иначе
		СтрокаПараметров = "";
	КонецЕсли;
	 
	ЗавершитьРаботуСистемы(Ложь, Истина, СтрокаПараметров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

&НаСервереБезКонтекста
Функция БазаПодключенаКСервисуСинхронизациСЦБ()
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ДеньгиВОблакеВызовСервера");
	Возврат Модуль.ЭтаБазаПодключенаКОблаку();
	
КонецФункции 

&НаКлиенте
Процедура ПодключитьсяКСервисуЦБ()
	
	Если Не ИспользуетсяОбменСЦБ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЦентральнойБазы = Неопределено;
	ВключитьОбменДанными(ПараметрыЦентральнойБазы, Истина);
	ПараметрыФормы = Новый Структура("ЗагружатьДанные", Истина);
	ИмяФормы = "ОбщаяФорма.УправлениеСервисомАвтосинхронизации";
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСинхронизациюСЦБ()
	
	Если Не ИспользуетсяОбменСЦБ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыДляОткрытия = "ОбщаяФорма.УправлениеСервисомАвтосинхронизации";
	ОткрытьФорму(ИмяФормыДляОткрытия);
	
КонецПроцедуры


#КонецОбласти
