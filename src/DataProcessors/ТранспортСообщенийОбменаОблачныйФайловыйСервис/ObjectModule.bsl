#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем СтрокаСообщенияОбОшибке Экспорт;
Перем СтрокаСообщенияОбОшибкеЖР Экспорт;
Перем КодТекущейОшибки Экспорт; // Текущий нормер ошибки из СообщенияОшибок

Перем СообщенияОшибок; // соответствие с сообщениями ошибок обработки
Перем ИмяОбъекта; // имя объекта метаданных

Перем ВременныйФайлСообщенияОбмена; // временный файл сообщения обмена для выгрузки/загрузки данных
Перем ВременныйКаталогСообщенийОбмена; // временный каталог для сообщений обмена

Перем КлючСообщенияЖурналаРегистрации Экспорт; 

Перем СписокКодовУстройств Экспорт; // Массив, содержт коды устройств, с которыми осуществляется обмен
Перем ИмяЭтойБазы;
Перем КодЭтойБазы;


#Область ПрограммныйИнтерфейс


// Выполняет инициализацию свойств обработки начальными значениями и константами
//
// Параметры:
//  Нет.
// 
Процедура Инициализация() Экспорт
	
	// Очищаем все сообщения
	ИнициализацияСообщений();
	
	// Восстанавливаем имя этой базы для обработки первого подключения устройств
	ПараметрыЦБ = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	ИмяЭтойБазы = ПараметрыЦБ.ИмяЭтойБазы;
	КодЭтойБазы = СинхронизацияАвтономныхКопийВызовСервера.КодЭтогоУзла("МобильноеПриложение");
	
	// Устанавливаем ключ для записи сообщений об ошибках
	Если НЕ ЗначениеЗаполнено(КлючСообщенияЖурналаРегистрации) Тогда
		КлючСообщенияЖурналаРегистрации = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными();
	КонецЕсли;
	
	// Проверяем свойства провайдера и аккаунта
	Если Не ЗначениеЗаполнено(Провайдер) Тогда
		Провайдер = RESTВызовСервера.ПровайдерИзПараметраСеанса(СвойстваАккаунта);
	КонецЕсли;
	RESTКлиентСервер.ПроверитьСвойстваАккаунтаИПровайдера(Провайдер, СвойстваАккаунта, СвойстваПровайдера);
	
	СписокКодовУстройств = Новый Массив;
	
КонецПроцедуры

// Создает временный каталог в каталоге временных файлов пользователя операционной системы.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка
// 
Функция ВыполнитьДействияПередОбработкойСообщения() Экспорт
	
	ИнициализацияСообщений();
	
	ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений = Истина;
	Возврат СоздатьВременныйКаталогСообщенийОбмена();
	
КонецФункции

// Выполняет проверку возможности установки подключения к заданному ресурсу
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина - подключение может быть установлено; Ложь - нет
//
Функция ПодключениеУстановлено(СоздаватьВременныйФайл = Истина) Экспорт
	
	ИнициализацияСообщений();
	
	Если ТипЗнч(СвойстваАккаунта) <> Тип("Структура") Тогда
		
		ПолучитьСообщениеОбОшибке(14);
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(СвойстваПровайдера) <> Тип("Структура") Тогда
		
		ПолучитьСообщениеОбОшибке(15);
		Возврат Ложь;
		
	ИначеЕсли Не RESTКлиентСервер.ПриложениеАвторизовано(Провайдер, Истина, СвойстваАккаунта) Тогда 
		
		ПолучитьСообщениеОбОшибке(12);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СоздаватьВременныйФайл Тогда
		
		Если Не СоздатьФайлПроверки() Тогда
			
			ПолучитьСообщениеОбОшибке(8);
			Возврат Ложь;
			
		ИначеЕсли Не УдалитьФайлПроверки() Тогда
			
			ПолучитьСообщениеОбОшибке(9);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСписокКодовУстройств(Истина) Тогда
		
		ПолучитьСообщениеОбОшибке(11);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Удаляет временный каталог сообщений обмена после выполнения выгрузки или загрузки данных
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина
//
Функция ВыполнитьДействияПослеОбработкиСообщения() Экспорт
	
	ИнициализацияСообщений();
	
	Если ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений Тогда
		
		УдалитьВременныйКаталогСообщенийОбмена();
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Получает с заданного ресурса во временный каталог сообщений обмена сообщения от всех узлов
//
// Параметры:
//  КодЭтойБазы - Строка - Код, который необходимо использовать в шаблоне для имен сообщений
// 
//  Возвращаемое значение:
//  Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка
// 
Функция ПолучитьВсеСообщения() Экспорт
	
	ИнициализацияСообщений();
	
	Результат = Истина;
	
	// Каталог обмена - для распакованных и готовых к чтению файлов
	КаталогОбменаЛокальный  = ИмяКаталогаСообщенияОбмена();
	
	// Список файлов по кодам их отправителей
	ТаблицаФайловСообщенийОбмена = Новый ТаблицаЗначений;
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("КодКорреспондента");
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("Файл", Новый ОписаниеТипов("Файл"));
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ШаблонФайла");
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("Распаковывать", Новый ОписаниеТипов("Булево"));
	
	// Получаем файлы от устройств, вписавших свои коды в общий файл.
	СчетчикПолученныхФайлов = 0;
	Для Каждого КодУстройства Из СписокКодовУстройств Цикл
		
		СтрокаТаблицы = ТаблицаФайловСообщенийОбмена.Добавить();
		СтрокаТаблицы.КодКорреспондента = КодУстройства;
		
		// Формируем имя получаемого файла
		СтрокаТаблицы.ШаблонФайла = СинхронизацияАвтономныхКопий.ИмяФайлаСообщенияОбмена(КодУстройства, КодЭтойБазы, Ложь);
		ИмяВходящегоФайла         = ИмяКаталогаОбменаИнформацией() + СтрокаТаблицы.ШаблонФайла + ".xml";
		ИмяЛокальнойКопииФайла    = КаталогОбменаЛокальный + СтрокаТаблицы.ШаблонФайла + ".xml";
		
		// Проверка наличия файла в облаке
		СтруктураРезультата = RESTКлиентСервер.ПолучитьИнформациюОРесурсе(Провайдер, ИмяВходящегоФайла, СвойстваАккаунта, СвойстваПровайдера);
		Если Не СтруктураРезультата.ВыполненоУспешно Или Не СтруктураРезультата.Результат.Существует Тогда
			// отсутствие входящего файла ошибкой не является
			Продолжить;
		КонецЕсли;
		
		// Получение файла с облака во временный каталог
		СтруктураРезультата = RESTКлиентСервер.СкачатьФайлИзОблака(Провайдер, ИмяВходящегоФайла, ИмяЛокальнойКопииФайла, СвойстваАккаунта, СвойстваПровайдера);
		Если Не СтруктураРезультата.ВыполненоУспешно Тогда
			
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при получении пакета из облака. 
					|%1: %2'")
					,СтруктураРезультата.КодСостояния, СтруктураРезультата.ОписаниеОшибки);
			УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
			
			// В некоторых случаях остаются файлы нулевого размера
			ФайлСообщения = Новый Файл(ИмяЛокальнойКопииФайла);
			Если ФайлСообщения.Существует() Тогда
				УдалитьФайлы(ИмяЛокальнойКопииФайла);
			КонецЕсли; 
			
			Возврат Ложь;
			
		КонецЕсли;
		
		// Проверяем полученный файл
		ФайлСообщения = Новый Файл(ИмяЛокальнойКопииФайла);
		Если ФайлСообщения.Существует() И ФайлСообщения.Размер() > 0 Тогда
			
			СтрокаТаблицы.Файл          = ФайлСообщения;
			СтрокаТаблицы.Распаковывать = Ложь;
			СчетчикПолученныхФайлов     = СчетчикПолученныхФайлов + 1;
			
			// Удаляем файл в источнике
			RESTКлиентСервер.УдалитьФайлИзОблака(Провайдер, ИмяВходящегоФайла, СвойстваАккаунта, СвойстваПровайдера); 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

// Получает с заданного ресурса во временный каталог файлы отчетов об обмене, созданные мобильными устройтвами
//	В файлах отчетов содержится информация о чтении сообщений устройствами и об отправке ими сообщений в это приложение
//
// Параметры:
//  Нет
// 
//  Возвращаемое значение:
// ТаблицаЗначений или Неопределено
// 
Функция ПолучитьФайлыОтчетов() Экспорт
	
	ИнициализацияСообщений();
	
	Результат = Истина;
	
	// Каталог обмена - для распакованных и готовых к чтению файлов
	КаталогОбменаЛокальный  = ИмяКаталогаСообщенияОбмена();
	РасширениеОтчетов       = "json";
	
	// Список файлов по кодам их отправителей
	ТаблицаФайловСообщенийОбмена = Новый ТаблицаЗначений;
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("КодКорреспондента");
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ОтчетОПолучении", );
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ОтчетОбОтправке", );
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ШаблонФайлаПолучения");
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ШаблонФайлаОтправки");
	
	// Получаем файлы от устройств, вписавших свои коды в общий файл.
	СчетчикПолученныхФайлов = 0;
	Для Каждого КодУстройства Из СписокКодовУстройств Цикл
		
		СтрокаТаблицы = ТаблицаФайловСообщенийОбмена.Добавить();
		СтрокаТаблицы.КодКорреспондента = КодУстройства;
		СтрокаТаблицы.ШаблонФайлаПолучения = ИмяФайлаОтчетаОПолучении(КодЭтойБазы, КодУстройства);
		СтрокаТаблицы.ШаблонФайлаОтправки  = ИмяФайлаОтчетаОБОтправке(КодУстройства, КодЭтойБазы);
		
		// Отчет о получении сообщений мобильным устройством
		ИмяФайлаНаСервере         = ИмяКаталогаОбменаИнформацией() + СтрокаТаблицы.ШаблонФайлаПолучения + "." + РасширениеОтчетов;
		ИмяЛокальнойКопииФайла    = КаталогОбменаЛокальный + СтрокаТаблицы.ШаблонФайлаПолучения + "." + РасширениеОтчетов;
		СтруктураРезультата = RESTКлиентСервер.ПолучитьИнформациюОРесурсе(Провайдер, ИмяФайлаНаСервере, СвойстваАккаунта, СвойстваПровайдера);
		Если СтруктураРезультата.ВыполненоУспешно И СтруктураРезультата.Результат.Существует Тогда
			// Получение файла отчета
			
			СтруктураРезультата = RESTКлиентСервер.СкачатьФайлИзОблака(Провайдер, ИмяФайлаНаСервере, ИмяЛокальнойКопииФайла, СвойстваАккаунта, СвойстваПровайдера);
			Если СтруктураРезультата.ВыполненоУспешно Тогда
				
				ФайлОтчета = Новый Файл(ИмяЛокальнойКопииФайла);
				Если ФайлОтчета.Существует() И ФайлОтчета.Размер() > 0 Тогда
					
					СтрокаТаблицы.ОтчетОПолучении = ФайлОтчета;
					СчетчикПолученныхФайлов       = СчетчикПолученныхФайлов + 1;
					
					// Удаляем файл в источнике
					RESTКлиентСервер.УдалитьФайлИзОблака(Провайдер, ИмяФайлаНаСервере, СвойстваАккаунта, СвойстваПровайдера); 
					
				КонецЕсли; 
				
			КонецЕсли;
		КонецЕсли;
		
		// Отчет об отправке сообщения мобильным устройством в это приложение
		ИмяФайлаНаСервере         = ИмяКаталогаОбменаИнформацией() + СтрокаТаблицы.ШаблонФайлаОтправки + "." + РасширениеОтчетов;
		ИмяЛокальнойКопииФайла    = КаталогОбменаЛокальный + СтрокаТаблицы.ШаблонФайлаОтправки + "." + РасширениеОтчетов;
		СтруктураРезультата = RESTКлиентСервер.ПолучитьИнформациюОРесурсе(Провайдер, ИмяФайлаНаСервере, СвойстваАккаунта, СвойстваПровайдера);
		Если СтруктураРезультата.ВыполненоУспешно И СтруктураРезультата.Результат.Существует Тогда
			// Получение файла отчета
			
			СтруктураРезультата = RESTКлиентСервер.СкачатьФайлИзОблака(Провайдер, ИмяФайлаНаСервере, ИмяЛокальнойКопииФайла, СвойстваАккаунта, СвойстваПровайдера);
			Если СтруктураРезультата.ВыполненоУспешно Тогда
				
				ФайлОтчета = Новый Файл(ИмяЛокальнойКопииФайла);
				Если ФайлОтчета.Существует() И ФайлОтчета.Размер() > 0 Тогда
					
					СтрокаТаблицы.ОтчетОбОтправке = ФайлОтчета;
					СчетчикПолученныхФайлов       = СчетчикПолученныхФайлов + 1;
					
					// Удаляем файл в источнике
					RESTКлиентСервер.УдалитьФайлИзОблака(Провайдер, ИмяФайлаНаСервере, СвойстваАккаунта, СвойстваПровайдера); 
					
				КонецЕсли; 
				
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла; 
	
	Если СчетчикПолученныхФайлов = 0 Тогда
		
	Иначе
		
	КонецЕсли;
	
	
	Возврат ТаблицаФайловСообщенийОбмена;
	
КонецФункции

// Обновляет ШаблонИмениФайлаСообщения в случае отправки файлов для нескольких узлов
Процедура УстановитьИмяВременногоФайлаСообщений(ШаблонФайла) Экспорт

	ВременныйФайлСообщенияОбмена = Новый Файл(ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена(), ШаблонФайла + ".xml"));

КонецПроцедуры

// Выполняет отправку сообщения обмена на заданный ресурс из временного каталога сообщения обмена
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка
// 
Функция ОтправитьСообщение() Экспорт
	
	Результат = Истина;
	
	ИнициализацияСообщений();
	
	ИмяФайлаИсходящегоСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаОбменаИнформацией(), ШаблонИмениФайлаСообщения + ".xml");
	
	// копируем файл сообщения в каталог обмена информацией
	СтруктураРезультата = RESTКлиентСервер.ЗагрузитьФайлВОблако(Провайдер, ИмяФайлаСообщенияОбмена(), 
				ИмяФайлаИсходящегоСообщения, СвойстваАккаунта, СвойстваПровайдера);
	
	Если Не СтруктураРезультата.ВыполненоУспешно Тогда
		// при отправке сообщения сервер вернул ошибку
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при отправке файла %1 на облачный сервис. 
				|%2: %3'"), ИмяФайлаСообщенияОбмена(), СтруктураРезультата.КодСостояния, СтруктураРезультата.ОписаниеОшибки);
		УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает в облачном сервисе файлы с описанием результатов обмена для каждого узла плана обмена
//
//Параметры:
//	КодЭтойБазы - строка - код Этого узла обмена
//	ВыборкаРезультатов - ВыборкаЗапроса - выборка из РС КонтрольОбменаДанными, результаты которого нужно отправить в сервис
//
//Возвращаемое значение:
//	Булево - Истина, если резульаты отправлены в облако и Ложь в противном случае
//
Функция ОтправитьРезультатыОбмена(КодЭтойБазы, ВыборкаРезультатов) Экспорт

	Результат = Истина;
	КаталогОбменаЛокальный  = ИмяКаталогаСообщенияОбмена();
	РасширениеОтчетов       = "json";
	
	ИнициализацияСообщений();
	
	Пока ВыборкаРезультатов.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаРезультатов.РезультатПолученияДанных) Тогда
			
			ШаблонФайла = ИмяФайлаОтчетаОПолучении(ВыборкаРезультатов.КодУзла, КодЭтойБазы);
			ИмяФайлаНаСервере         = ИмяКаталогаОбменаИнформацией() + ШаблонФайла + "." + РасширениеОтчетов;
			ИмяЛокальнойКопииФайла    = КаталогОбменаЛокальный + ШаблонФайла + "." + РасширениеОтчетов;
			
			// запись отчета в файл
			ЗаписьТекста = Новый ЗаписьТекста(ИмяЛокальнойКопииФайла, КодировкаТекста.UTF8, , Ложь);
			ЗаписьТекста.Записать(ТекстРезультатаОбмена(КодЭтойБазы, ВыборкаРезультатов, Ложь));
			ЗаписьТекста.Закрыть();
			
			// Отправка файла в облако
			СтруктураРезультата = RESTКлиентСервер.ЗагрузитьФайлВОблако(Провайдер, ИмяЛокальнойКопииФайла, 
					ИмяФайлаНаСервере, СвойстваАккаунта, СвойстваПровайдера);
			
			Если Не СтруктураРезультата.ВыполненоУспешно Тогда
				// при отправке файла сервер вернул ошибку
				СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при отправке файла %1 на облачный сервис. 
						|%2: %3'"), ИмяФайлаСообщенияОбмена(), СтруктураРезультата.КодСостояния, СтруктураРезультата.ОписаниеОшибки);
				УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаРезультатов.РезультатОтправкиДанных) Тогда
			
			ШаблонФайла = ИмяФайлаОтчетаОБОтправке(КодЭтойБазы, ВыборкаРезультатов.КодУзла);
			ИмяФайлаНаСервере         = ИмяКаталогаОбменаИнформацией() + ШаблонФайла + "." + РасширениеОтчетов;
			ИмяЛокальнойКопииФайла    = КаталогОбменаЛокальный + ШаблонФайла + "." + РасширениеОтчетов;
			
			// запись отчета в файл
			ЗаписьТекста = Новый ЗаписьТекста(ИмяЛокальнойКопииФайла, КодировкаТекста.UTF8, , Ложь);
			ЗаписьТекста.Записать(ТекстРезультатаОбмена(КодЭтойБазы, ВыборкаРезультатов, Истина));
			ЗаписьТекста.Закрыть();
			
			// Отправка файла в облако
			СтруктураРезультата = RESTКлиентСервер.ЗагрузитьФайлВОблако(Провайдер, ИмяЛокальнойКопииФайла, 
					ИмяФайлаНаСервере, СвойстваАккаунта, СвойстваПровайдера);
			
			Если Не СтруктураРезультата.ВыполненоУспешно Тогда
				// при отправке файла сервер вернул ошибку
				СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при отправке файла %1 на облачный сервис. 
						|%2: %3'"), ИмяФайлаСообщенияОбмена(), СтруктураРезультата.КодСостояния, СтруктураРезультата.ОписаниеОшибки);
				УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ТекстРезультатаОбмена(КодЭтойБазы, ВыборкаРезультатов, Отправка = Ложь)

	Результат = "{
					| ""ID"": """ + ВыборкаРезультатов.КодУзла + """
					| ""IDMainAPP"": """ + КодЭтойБазы + """
					| ""Disabled"": " + ?(ВыборкаРезультатов.Активность, "false", "true") + "
					| ""Transport"": """ + Строка(ВыборкаРезультатов.ВидТранспорта) + """";
	
	Если Отправка Тогда
		
		
		Результат = Результат + Символы.ПС + 
			" ""Date"": """ + Формат(ВыборкаРезультатов.ПоследняяОтправка, "ДФ=ггггММддЧЧммсс")  + """
			| ""Result"": """ + ОбщегоНазначения.ИмяЗначенияПеречисления(ВыборкаРезультатов.РезультатОтправкиДанных) + """
			| ""Errors"": """ + КодироватьСтроку(ВыборкаРезультатов.ТекстОшибокОтправки, СпособКодированияСтроки.КодировкаURL) + """";
		
	Иначе
		
		Результат = Результат + Символы.ПС + 
			" ""Date"": """ + Формат(ВыборкаРезультатов.ПоследнееПолучение, "ДФ=ггггММддЧЧммсс")  + """
			| ""Result"": """ + ОбщегоНазначения.ИмяЗначенияПеречисления(ВыборкаРезультатов.РезультатПолученияДанных) + """
			| ""Errors"": """ + КодироватьСтроку(ВыборкаРезультатов.ТекстОшибокПолучения, СпособКодированияСтроки.КодировкаURL) + """";
	КонецЕсли;
	
	Результат = Результат + Символы.ПС + "}";

	Возврат Результат;
	
КонецФункции

// Выполняет проверку соединения с указанным транспортом обмена
//
Процедура ПроверитьСоединениеСТранспортом(СтруктураНастроекОбмена) Экспорт

	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	ДействиеСтрокой = СтрШаблон(НСтр("ru = 'Подключение к сервису %1'"), СтруктураНастроекОбмена.ТранспортОбмена);
	
	// создание каталогов и определеие шаблонов
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Подготовка транспорта к обмену'"));
	Если Не ВыполнитьДействияПередОбработкойСообщения() Тогда
		
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(СтрокаСообщенияОбОшибкеЖР, Неопределено, "ЗагрузкаДанных");
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	// проверка подключения
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Проверка соединения с облачным сервисом'"));
	Если Не ПодключениеУстановлено(Ложь) Тогда
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		
		ДополнительноеСообщение = НСтр("ru = 'Техническую информацию об ошибке см. в журнале регистрации.'");
		
		СообщениеОбОшибке = СтрШаблон("%1
						|%2", СтрокаСообщенияОбОшибке, ДополнительноеСообщение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Транспорт сообщений обмена'"),
			УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибкеЖР);
		
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				СтрокаСообщенияОбОшибкеЖР);
				
	КонецЕсли;

КонецПроцедуры

// Получает файлы сообзщений из облака и загружает их в базу
// 
Процедура ПолучитьСообщенияИзТранспортаОбмена(СтруктураНастроекОбмена) Экспорт

	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	
	ВременныйКаталог = ИмяКаталогаСообщенияОбмена();
	СтруктураНастроекОбмена.Вставить("ВременныйКаталогФайловОбмена", ВременныйКаталог);
	СтруктураНастроекОбмена.Вставить("СписокКодовУстройств", Новый Массив);
	
	СтруктураНастроекОбмена.ТекущееДействие = НСтр("ru='Получение файлов с помощью транспорта <%1>'"); 
	СтруктураНастроекОбмена.ТекущееДействие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтруктураНастроекОбмена.ТекущееДействие, СтруктураНастроекОбмена.ТранспортОбмена);
	
	// получаем отчеты об обмене от мобильных устройств
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Получение отчетов по синхронизации из облака'"));
	ТаблицаОтчетов = ПолучитьФайлыОтчетов();
	Если ТаблицаОтчетов <> Неопределено И ТаблицаОтчетов.Количество() > 0 Тогда
		ПолучитьРезультатыОбменаИзФайлов(СтруктураНастроекОбмена, ТаблицаОтчетов);
	КонецЕсли;
	
	// получаем сообщения обмена во временный каталог
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Получение файлов сообщений из облака'"));
	Если Не ПолучитьВсеСообщения() Тогда
		
		//ОбменДаннымиСервер.ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				СтрокаСообщенияОбОшибкеЖР);
		
		Возврат;
		
	КонецЕсли;
	
	// Получаем список кодов устройств, зарегистрировавшихся в данном транспорте обмена
	СтруктураНастроекОбмена.СписокКодовУстройств = СписокКодовУстройств;
	
	// обрабатываем файлы во временном каталоге.
	СтруктураНастроекОбмена.ТекущееДействие = НСтр("ru='Чтение файлов'"); 
	
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Чтение полученных файлов сообщений'"));
	
	ДлинаКода = СтрДлина(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод);
	СчетчикФайлов      = 0;
	КоличествоОшибок   = 0;
	
	Для Каждого КодУстройства Из СтруктураНастроекОбмена.СписокКодовУстройств Цикл
		
		УзелКорреспондента = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодУстройства);
		Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
			// утсановка отметки о начале обмена
			РегистрыСведений.КонтрольОбменаДанными.УстановитьНачалоОбмена(УзелКорреспондента, СтруктураНастроекОбмена.ТранспортОбмена);
			РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Получение файлов из облака'"));
		КонецЕсли;
		
		ИмяФайла = СинхронизацияАвтономныхКопий.ИмяФайлаСообщенияОбмена(КодУстройства, СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, Ложь) + ".xml";
		Файл = Новый Файл(СтруктураНастроекОбмена.ВременныйКаталогФайловОбмена + ИмяФайла);
		Если Не Файл.Существует() Или Не Файл.ЭтоФайл() Тогда
			Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
				РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, 
						Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями, НСтр("ru='От устройства нет файла в облачном каталоге'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли; 
		
		// Пропуск фалов чужих сообщений
		Если Прав(Файл.ИмяБезРасширения, ДлинаКода) <> СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод Тогда
			Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
				РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, 
						Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями, НСтр("ru='От устройства нет файла в облачном каталоге'"));
			КонецЕсли;
			Продолжить;
		КонецЕсли; 
		
		// Загрузка сообщения из файла в базу
		Если ЗначениеЗаполнено(УзелКорреспондента) Тогда
			РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Чтение полученного файла'"));
		КонецЕсли;
		
		Отказ              = Ложь;
		СинхронизацияАвтономныхКопий.ЗагрузитьДанныеИзФайлаДляУзлаИнформационнойБазы(УзелКорреспондента, Файл.ПолноеИмя, Отказ, СтруктураНастроекОбмена.ТранспортОбмена);
		
		Если ЗначениеЗаполнено(УзелКорреспондента) И Не Отказ Тогда
			// обчистка текущего действия
			//В случае Отказ=Истина информация об ошибке регистрируется при записи в журнал регистрации в ОМ ОбменДаннымиXDTOСервер
			РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, "");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает данные в файлы и отправляет их в облако
// 
Процедура ОтправитьСообщенияТранспортомОбмена(СтруктураНастроекОбмена) Экспорт
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	
	ВсегоУзлов       = СтруктураНастроекОбмена.СписокКодовУстройств.Количество();
	СчетчикУзлов     = 0;
	ОписаниеПроблемы = "";
	КоличествоОшибокТранспорта = 0;
	КоличествоОшибокВыгрузки   = 0;
	ПредставлениеТранспорта = Строка(СтруктураНастроекОбмена.ТранспортОбмена);
	
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Выгрузка данных для отправки в облако'"));
	
	Если Не ВыполнитьДействияПередОбработкойСообщения() Тогда
		
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(СтрокаСообщенияОбОшибкеЖР, Неопределено, "ВыгрузкаДанных");
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, 
				СтрокаСообщенияОбОшибкеЖР);
				
		Возврат;
		
	КонецЕсли;
	
	ВременныйКаталог = ИмяКаталогаСообщенияОбмена();
	СтруктураНастроекОбмена.Вставить("ВременныйКаталогФайловОбмена", ВременныйКаталог);
	
	// Восстанавливаем имя этой базы для обработки первого подключения устройств
	ПараметрыЦБ = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	ИмяЭтойБазы = ПараметрыЦБ.ИмяЭтойБазы;
	КодЭтойБазы = СинхронизацияАвтономныхКопийВызовСервера.КодЭтогоУзла("МобильноеПриложение");
	
	// Формируем файл сообщений для каждого узла, зарегистрированного в списке
	Для Каждого КодУстройства Из СтруктураНастроекОбмена.СписокКодовУстройств Цикл
		
		УзелИнформационнойБазы = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(КодУстройства);
		
		// Сообщение будет сформировано только если в плане обмена есть узел с указанным кодом, 
		//	и при загрузке данных от него не было ошибок
		Если НЕ ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетчикУзлов = СчетчикУзлов + 1;
		
		// Определяем шаблон для файла ответа
		ШаблонИмениФайлаСообщения = СинхронизацияАвтономныхКопий.ИмяФайлаСообщенияОбмена(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, УзелИнформационнойБазы.Код, Истина);
		ИмяОтправленногоФайла =  ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(СтруктураНастроекОбмена.ВременныйКаталогФайловОбмена, 
					ШаблонИмениФайлаСообщения + ".xml");
		// Формируем имена файлов сообщения в обработке транспорта
		УстановитьИмяВременногоФайлаСообщений(ШаблонИмениФайлаСообщения);
		
		// Выгрузка зарегистрированных изменений в файл
		Отказ = Ложь;
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелИнформационнойБазы, "Выгрузка изменений в файл");
		СинхронизацияАвтономныхКопий.ВыгрузитьДанныеВФайлДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ИмяОтправленногоФайла, Отказ, СтруктураНастроекОбмена.ТранспортОбмена);
		
		Если Отказ Тогда
			КоличествоОшибокВыгрузки = КоличествоОшибокВыгрузки + 1;
			Продолжить;
		КонецЕсли;
		
		// Обновление настроек
		СтруктураНастроекОбмена.УзелИнформационнойБазы             = УзелИнформационнойБазы;
		СтруктураНастроекОбмена.УзелИнформационнойБазыКод          = УзелИнформационнойБазы.Код;
		СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование = УзелИнформационнойБазы.Наименование;
		СтруктураНастроекОбмена.ДействиеПриОбмене                  = Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
		
		// Отправка файла в облако
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелИнформационнойБазы, "Отправка сообщения в облако");
		
		ШаблонИмениФайлаСообщения = ШаблонИмениФайлаСообщения;
		Если Не ОтправитьСообщение() Тогда
			
			КоличествоОшибокТранспорта = КоличествоОшибокТранспорта + 1;
			СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(СтрокаСообщенияОбОшибкеЖР, УзелИнформационнойБазы, "ВыгрузкаДанных");
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
			
		Иначе
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелИнформационнойБазы, Перечисления.РезультатыВыполненияОбмена.Выполнено);
		КонецЕсли;
		
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелИнформационнойБазы);
		
	КонецЦикла; 
	
	ВыполнитьДействияПослеОбработкиСообщения();
	
	Если КоличествоОшибокТранспорта > 0 Тогда
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
	ИначеЕсли КоличествоОшибокВыгрузки > 0 Тогда
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
	Иначе
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	 
	ТекстСостояния = НСтр("ru = 'Отправлено сообщений: %1, ошибок отправки: %2'");
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, СчетчикУзлов, КоличествоОшибокТранспорта);
	
КонецПроцедуры

// Отправка отчетов, очистка временных файлов и т.д.
Процедура ЗавершитьИспользованиеОблачногоТранспорта(СтруктураНастроекОбмена, ЗаписатьРезультатыОбмена = Ложь, УстанавливатьЗавершениеРаботыТранспорта = Ложь) Экспорт
	
	Если ЗаписатьРезультатыОбмена Тогда
		ОтправитьРезультатыОбменаВОблако(СтруктураНастроекОбмена);
	КонецЕсли;
	
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПослеОбработкиСообщения();
	
	ОбменДаннымиСервер.ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	Если УстанавливатьЗавершениеРаботыТранспорта Тогда
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// Функции-свойства

// Функция-свойство: полное имя каталога сообщения обмена
//
// Возвращаемое значение:
//  Строка - полное имя каталога сообщения обмена.
//
Функция ИмяКаталогаСообщенияОбмена() Экспорт
	
	Имя = "";
	
	Если ТипЗнч(ВременныйКаталогСообщенийОбмена) = Тип("Файл") Тогда
		
		Имя = ПроверитьРазделителиВКаталоге(ВременныйКаталогСообщенийОбмена.ПолноеИмя);
		
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

Функция ИмяВременногоФайлаФлага()
	
	Возврат "flag.tmp";
	
КонецФункции

// Функция-свойство: полное имя файла сообщения обмена
//
// Возвращаемое значение:
//  Строка - полное имя файла сообщения обмена.
//
Функция ИмяФайлаСообщенияОбмена() Экспорт
	
	Имя = "";
	
	Если ТипЗнч(ВременныйФайлСообщенияОбмена) = Тип("Файл") Тогда
		
		Имя = ВременныйФайлСообщенияОбмена.ПолноеИмя;
		
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

// Возвращает имя каталога для обмена информацией в каталоге приложения облачного сервиса.
// Сам каталог приложения в этом пути не учитывается!
//
//Возвращаемое значение:
//	Строка
//
Функция ИмяКаталогаОбменаИнформацией() Экспорт

	Возврат "";

КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Служебные экспортируемые функции

Функция ЗаполнитьСписокКодовУстройств(СоздаватьРесурсыПоУмолчанию = Ложь) Экспорт
	
	СписокКодовУстройств    = Новый Массив;
	КаталогОбменаЛокальный   = ИмяКаталогаСообщенияОбмена();
	
	// Проверка может быть запущена без полной инициализации транспорта
	ЭтоВызовБезИнициализации = КаталогОбменаЛокальный = "";
	Если ЭтоВызовБезИнициализации Тогда
		ВыполнитьДействияПередОбработкойСообщения();
		КаталогОбменаЛокальный   = ИмяКаталогаСообщенияОбмена();
	КонецЕсли; 
	
	ИмяФайлаСпискаУстройств = ОбменМобильноеПриложение.ПолучитьИмяФайлаСпискаУстройств();
	
	Если ИмяФайлаСпискаУстройств = Неопределено Тогда
		ОписаниеПроблемы = НСтр("ru = 'Не задано имя текущей базы данных.'");
		УстановитьСтрокуСообщенияОбОшибке(ОписаниеПроблемы);
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ПолучитьФайлСпискаУстройствИзОблака(КаталогОбменаЛокальный, ИмяФайлаСпискаУстройств, СоздаватьРесурсыПоУмолчанию);
	
	Если Не Результат И СоздаватьРесурсыПоУмолчанию Тогда
		Результат = СоздатьФайлСпискаУстройствВОблаке(КаталогОбменаЛокальный, ИмяФайлаСпискаУстройств);
	КонецЕсли;
	
	Если ЭтоВызовБезИнициализации Тогда
		// если проверка вызывалась без инициализации, очистка производится сразу
		ВыполнитьДействияПослеОбработкиСообщения();
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// Инициализация

Процедура ИнициализацияСообщений()
	
	СтрокаСообщенияОбОшибке   = "";
	СтрокаСообщенияОбОшибкеЖР = "";
	
КонецПроцедуры

Процедура ИнициализацияСообщенийОшибок()
	
	СообщенияОшибок = Новый Соответствие;
	СообщенияОшибок.Вставить(1, НСтр("ru = 'Ошибка подключения: Не указан каталог обмена информацией.'"));
	СообщенияОшибок.Вставить(2, НСтр("ru = 'Ошибка подключения: Каталог обмена информацией не существует.'"));
	
	СообщенияОшибок.Вставить(3, НСтр("ru = 'В каталоге обмена информацией не был обнаружен файл сообщения с данными.'"));
	СообщенияОшибок.Вставить(4, НСтр("ru = 'Ошибка при распаковке сжатого файла сообщения.'"));
	СообщенияОшибок.Вставить(5, НСтр("ru = 'Ошибка при сжатии файла сообщения обмена.'"));
	СообщенияОшибок.Вставить(6, НСтр("ru = 'Ошибка при создании временного каталога на диске пользователя'"));
	СообщенияОшибок.Вставить(7, НСтр("ru = 'Архив не содержит файл сообщения обмена'"));
	
	СообщенияОшибок.Вставить(8, НСтр("ru = 'Ошибка записи файла в каталог обмена информацией. Проверьте права пользователя на доступ к каталогу.'"));
	СообщенияОшибок.Вставить(9, НСтр("ru = 'Ошибка удаления файла из каталога обмена информацией. Проверьте права пользователя на доступ к каталогу.'"));
	
	СообщенияОшибок.Вставить(10, НСтр("ru = 'Ошибка доступа к облачному сервису. Проверьте имя и пароль пользователя'"));
	СообщенияОшибок.Вставить(11, НСтр("ru = 'Ошибка работы с файлом списка синхронизируемых устройств'"));
	
	СообщенияОшибок.Вставить(12, НСтр("ru = 'Ошибка подключения: Приложение не авторизовано на сервере'"));
	СообщенияОшибок.Вставить(13, НСтр("ru = 'Каталог обмена `%s` не обнаружен или заблокирован.'"));

	СообщенияОшибок.Вставить(14, НСтр("ru = 'Параметры аккацнта некорректны или не заданы'"));
	СообщенияОшибок.Вставить(15, НСтр("ru = 'Параметры провайдера некорректны или не занады'"));

	КодТекущейОшибки = 0;
	// 0 = Без ошибок
	// -1 = Неизвестаня ошибка
	
КонецПроцедуры

Функция СоздатьВременныйКаталогСообщенийОбмена()
	
	ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений = Ложь;
	
	// создаем временный каталог для сообщений обмена
	Попытка
		ИмяВременногоКаталога = ОбменДаннымиСервер.СоздатьВременныйКаталогСообщенийОбмена();
		ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений = Истина;
	Исключение
		ПолучитьСообщениеОбОшибке(6);
		ДополнитьСообщениеОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	ВременныйКаталогСообщенийОбмена = Новый Файл(ИмяВременногоКаталога);
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьВременныйКаталогСообщенийОбмена()
	
	Попытка
		
		Если Не ПустаяСтрока(ИмяКаталогаСообщенияОбмена()) Тогда
			
			УдалитьФайлы(ИмяКаталогаСообщенияОбмена());
			
			ВременныйКаталогСообщенийОбмена = Неопределено;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Устанавливает сообщение об ошибке
//
// Параметры:
//  НомерСообщения		 - Число - Номер сообщения из списка возможных ошибок СообщенияОшибок
//  ПараметрСообщения	 - Строка - Необязательный параметр. Дополнительная информация к ошибке
//
Процедура ПолучитьСообщениеОбОшибке(Знач НомерСообщения, Знач ПараметрСообщения = "")
	
	Результат = ПолучитьВыражениеСПараметром(СообщенияОшибок[НомерСообщения], ПараметрСообщения);		
	УстановитьСтрокуСообщенияОбОшибке(Результат, НомерСообщения);
	
КонецПроцедуры

// Устанавливает строку сообщения об ошибке и ее код
//
// Параметры:
//  Сообщение	 - Строка или Неопределено - Информация об ошибке
//  КодОшибки	 - Число - Необязательный параметр. Код текущей ошибки.
//
Процедура УстановитьСтрокуСообщенияОбОшибке(Знач Сообщение, Знач КодОшибки = -1)
	
	Если Сообщение = Неопределено Тогда
		Сообщение = Нстр("ru = 'Внутренняя ошибка'");			
	КонецЕсли;
		
	СтрокаСообщенияОбОшибке   = Сообщение + ?(СтрокаСообщенияОбОшибке = "", "", Символы.ПС) + СтрокаСообщенияОбОшибке;
	СтрокаСообщенияОбОшибкеЖР = ИмяОбъекта + ": " + Сообщение;
	КодТекущейОшибки = КодОшибки;
	
КонецПроцедуры

Процедура ДополнитьСообщениеОбОшибке(Сообщение)
	
	СтрокаСообщенияОбОшибкеЖР = СтрокаСообщенияОбОшибкеЖР + Символы.ПС + Сообщение;
	
КонецПроцедуры

Функция ПроверитьРазделителиВКаталоге(ИмяКаталога)

	РазделительПути = ПолучитьРазделительПутиКлиента();
	Результат = ИмяКаталога + ?(Прав(ИмяКаталога, 1) = РазделительПути, "", РазделительПути);

	Возврат Результат;
	
КонецФункции

// Возвращает строковое выражение с заданным параметром
//
// Параметры:
//  Значение - Строка - Строка-шаблон, куда следует вставить параметр
//  Параметр - ПроизволныйТипДанных - Параметр, который необходимо вставить
// 
// Возвращаемое значение:
//  Строка - Результирующая строка
//
Функция ПолучитьВыражениеСПараметром(Знач Значение, Знач Параметр)
	
	Результат = Значение;
	Если ТипЗнч(Параметр) = Тип("Строка") И (НЕ ПустаяСтрока(Параметр)) Тогда
		Результат = СтрЗаменить(Результат, "%s", Параметр);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Создает файл проверки в облаке
// 
// Возвращаемое значение:
//  Булево - Истина, если операция завершена успешно.
//
Функция СоздатьФайлПроверки()
	
	Результат = Истина;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(НСтр("ru = 'Временный файл проверки'"));
	
	// Создаем локальный файл т.к. создать его сразу на Яндекс.Диске не получится:
	ИмяЛокальногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаСообщенияОбмена(), ИмяВременногоФайлаФлага());
	ТекстовыйДокумент.Записать(ИмяЛокальногоФайла);
	
	Попытка
		
		ПутьВОблаке = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаОбменаИнформацией(), ИмяВременногоФайлаФлага() );		
		
		СтруктураРезультата = RESTКлиентСервер.ЗагрузитьФайлВОблако(Провайдер, ИмяЛокальногоФайла, ПутьВОблаке, СвойстваАккаунта, СвойстваПровайдера);
		Результат = СтруктураРезультата.ВыполненоУспешно;
		Если Не Результат Тогда
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при создании проверочного файла. Описание ошибки: %1'")
					,СтруктураРезультата.ОписаниеОшибки);
			УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
		КонецЕсли;
		
		
	Исключение
		
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат = Ложь;
		
	КонецПопытки;
	
	УдалитьФайлы(ИмяЛокальногоФайла);
	Возврат Результат;
	
КонецФункции

Функция УдалитьФайлПроверки()
	
	Попытка
		
		ПутьВОблаке = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ИмяКаталогаОбменаИнформацией(), ИмяВременногоФайлаФлага() );
		СтруктураРезультата = RESTКлиентСервер.УдалитьФайлИзОблака(Провайдер, ПутьВОблаке, СвойстваАккаунта, СвойстваПровайдера); 
		Результат = СтруктураРезультата.ВыполненоУспешно;
		Если Не Результат Тогда
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при удалении проверочного файла. Описание ошибки: %1'")
					,СтруктураРезультата.ОписаниеОшибки);
			УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьФайлСпискаУстройствИзОблака(КаталогОбменаЛокальный, ИмяФайлаСпискаУстройств, СоздаватьРесурсыПоУмолчанию) 

	// Проверка существования файла по указанному пути
	ПолныйПутьНаОблаке = ИмяКаталогаОбменаИнформацией() + ИмяФайлаСпискаУстройств;
	СтруктураРезультата = RESTКлиентСервер.ПолучитьИнформациюОРесурсе(Провайдер, 
				ПолныйПутьНаОблаке, СвойстваАккаунта, СвойстваПровайдера);
	
	Если Не СтруктураРезультата.ВыполненоУспешно Тогда
		// запрос к серверу завершился ошибкой
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Не удалось проверить наличие файла со списком устройств на сервере:
				|%1'")
				,Строка(СтруктураРезультата.КодСостояния) +": " + СтруктураРезультата.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтруктураРезультата.Результат.Существует Тогда
		// файла в облаке нет
		Возврат Ложь;
	КонецЕсли;

	// Получение файла из облака
	ПолныйПутьЛокальный = КаталогОбменаЛокальный + ИмяФайлаСпискаУстройств;
	СтруктураРезультата = RESTКлиентСервер.СкачатьФайлИзОблака(Провайдер, КаталогОбменаИнформацией + ИмяФайлаСпискаУстройств, 
					КаталогОбменаЛокальный + ИмяФайлаСпискаУстройств, СвойстваАккаунта, СвойстваПровайдера);
	
	ФайлСпискаУстройств = Новый Файл(ПолныйПутьЛокальный);
	
	Если Не СтруктураРезультата.ВыполненоУспешно Тогда
		// при получении файла из облака произошла ошибка 
		
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при получении из облака списка устройств. Описание ошибки: %1'")
				,СтруктураРезультата.ОписаниеОшибки);
		УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
		
		// При ошибке могут оставаться файлы нулевого размера
		Если ФайлСпискаУстройств.Существует() И Не ОбменМобильноеПриложение.ФайлСодержитСписокУстройств(ФайлСпискаУстройств) Тогда
			УдалитьФайлы(ФайлСпискаУстройств.ПолноеИмя);
		КонецЕсли; 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Проверка полученного файла
	ФайлСпискаУстройств = Новый Файл(КаталогОбменаЛокальный + ИмяФайлаСпискаУстройств);
	Если Не ФайлСпискаУстройств.Существует() Или Не ОбменМобильноеПриложение.ФайлСодержитСписокУстройств(ФайлСпискаУстройств) Тогда
		
		Если Не СоздаватьРесурсыПоУмолчанию Тогда
			// Файл не создается, значит его отсутствие - это ошибка
			ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'В папке облачного сервиса отсутствует список устройств %1, необходимый для обмена данными.'"),
								ИмяФайлаСпискаУстройств);
			УстановитьСтрокуСообщенияОбОшибке(ОписаниеПроблемы);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Проверка содержимого файла
	КодВладельца = "";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогОбменаЛокальный + ИмяФайлаСпискаУстройств);
	Пока ЧтениеXML.Прочитать() Цикл
	
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Owner" Тогда
			
			КодВладельца = ЧтениеXML.ПолучитьАтрибут("Code");
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "MobileApp" Тогда
			
			КодУстройства = ЧтениеXML.ПолучитьАтрибут("Code");
			Если ЗначениеЗаполнено(КодУстройства) Тогда
				СписокКодовУстройств.Добавить(КодУстройства);
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЦикла;
	ЧтениеXML.Закрыть();
	
	Если КодВладельца <> КодЭтойБазы Тогда
		
		ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'Имя <%1> используется другой базой. Пожалуйста, измените имя этой базы в настройках синхронизации облачного сервиса.'"), ИмяЭтойБазы);
		УстановитьСтрокуСообщенияОбОшибке(ОписаниеПроблемы);
		Возврат Ложь;
		
	КонецЕсли; 
	
	
	// Файл считан и проверен. Список кодов узлов обмена заполнен
	Возврат Истина;
	
КонецФункции

Функция СоздатьФайлСпискаУстройствВОблаке(КаталогОбменаЛокальный, ИмяФайлаСпискаУстройств) 

	ПолныйПутьНаОблаке = ИмяКаталогаОбменаИнформацией() + ИмяФайлаСпискаУстройств;
	ПолныйПутьЛокальный = КаталогОбменаЛокальный + ИмяФайлаСпискаУстройств;
	
	// Создание нового файла
	ОбменМобильноеПриложение.ЗаписатьНовыйФайлСпискаУстройств(КаталогОбменаЛокальный + ИмяФайлаСпискаУстройств);
		
	// отправка файла в облако
	СтруктураРезультата = RESTКлиентСервер.ЗагрузитьФайлВОблако(Провайдер, ПолныйПутьЛокальный, ПолныйПутьНаОблаке, СвойстваАккаунта, СвойстваПровайдера); 
	
	Если Не СтруктураРезультата.ВыполненоУспешно Тогда
		
		СтрокаСообщения = СтрШаблон(НСтр("ru = 'Ошибка при отправке в облако списка устройств %1. Описание ошибки: %2'")
				, КаталогОбменаЛокальный + ИмяФайлаСпискаУстройств, СтруктураРезультата.ОписаниеОшибки);
		УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
		Возврат Ложь;
		
	КонецЕсли;

	Возврат Истина;

КонецФункции


////////////////////////////////

// Обрабатывает файлы с отчетами об обмене и записывает информацию в регистр сведений "КонтрольОбменаДанными"
// 
Процедура ПолучитьРезультатыОбменаИзФайлов(СтруктураНастроекОбмена, ТаблицаОтчетов) 
	
	Для каждого СтрокаОтчетов Из ТаблицаОтчетов Цикл
		
		ОтчетОПолучении  = Неопределено;
		Если СтрокаОтчетов.ОтчетОПолучении <> Неопределено Тогда
			Текст = Новый ЧтениеТекста(СтрокаОтчетов.ОтчетОПолучении.ПолноеИмя);
			ОтчетОПолучении = ПарсерJSON.РаспарситьJSON(Текст.Прочитать(), 0);
			Текст.Закрыть();
			УдалитьФайлы(СтрокаОтчетов.ОтчетОПолучении.ПолноеИмя);
		КонецЕсли;
		
		ОтчетОбОтправке  = Неопределено;
		Если СтрокаОтчетов.ОтчетОбОтправке <> Неопределено Тогда
			Текст = Новый ЧтениеТекста(СтрокаОтчетов.ОтчетОбОтправке.ПолноеИмя);
			ОтчетОбОтправке = ПарсерJSON.РаспарситьJSON(Текст.Прочитать(), 0);
			Текст.Закрыть();
			УдалитьФайлы(СтрокаОтчетов.ОтчетОбОтправке.ПолноеИмя);
		КонецЕсли;
		
		ЕстьОтчетОПолучении = ТипЗнч(ОтчетОПолучении) = Тип("Соответствие") 
				И ОтчетОПолучении["IDMainAPP"] = СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод И ЗначениеЗаполнено(ОтчетОПолучении["Result"]);
		ЕстьОтчетОбОтправке = ТипЗнч(ОтчетОбОтправке) = Тип("Соответствие") 
				И ОтчетОбОтправке["IDMainAPP"] = СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод И ЗначениеЗаполнено(ОтчетОбОтправке["Result"]);
		
		Если Не ЕстьОтчетОПолучении = Неопределено И Не ЕстьОтчетОбОтправке Тогда
			//Для узла нет очетов
			Продолжить;
		КонецЕсли;
		
		// Определяем узел плана обмена
		Узел = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(СтрокаОтчетов.КодКорреспондента);
		Если Не ЗначениеЗаполнено(Узел) Тогда
			// для новых подключаемых узлов отчеты не актуальны
			Продолжить;
		КонецЕсли;
		
		ЗаписьКонтроля = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
		ЗаписьКонтроля.УзелИнформационнойБазы = Узел;
		ЗаписьКонтроля.Прочитать();
		ЗаписьКонтроля.УзелИнформационнойБазы = Узел;
		
		Если ЕстьОтчетОПолучении Тогда
			
			ЗаписьКонтроля.ПоследнееПолучениеУзлом       = ОтчетОПолучении["Date"];
			ЗаписьКонтроля.РезультатПолученияДанныхУзлом = Перечисления.РезультатыВыполненияОбмена[ОтчетОПолучении["Result"]];
			ЗаписьКонтроля.ТекстОшибокПолученияУзлом     = РаскодироватьСтроку(ОтчетОПолучении["Errors"], СпособКодированияСтроки.КодировкаURL);
			ЗаписьКонтроля.ТранспортПолученияУзлом       = ОтчетОПолучении["Transport"];
			
		КонецЕсли;
		
		Если ЕстьОтчетОбОтправке Тогда
			
			ЗаписьКонтроля.ПоследняяОтправкаУзлом        = ОтчетОбОтправке["Date"];
			ЗаписьКонтроля.РезультатОтправкиДанныхУзлом  = Перечисления.РезультатыВыполненияОбмена[ОтчетОбОтправке["Result"]];
			ЗаписьКонтроля.ТекстОшибокОтправкиУзлом      = РаскодироватьСтроку(ОтчетОбОтправке["Errors"], СпособКодированияСтроки.КодировкаURL);
			ЗаписьКонтроля.ТранспортОтправкиУзлом        = ОтчетОбОтправке["Transport"];
			
		КонецЕсли;
		
		Попытка
			ЗаписьКонтроля.Записать(Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(Инфо, Неопределено, "ЗагрузкаДанных");
			РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, , КраткоеПредставлениеОшибки(Инфо));
		КонецПопытки; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяФайлаОтчетаОПолучении(КодУзлаОтправителя, КодУзлаПолучателя)
	
	Возврат СтрШаблон("resRead_%1_from_%2", КодУзлаОтправителя, КодУзлаПолучателя);
	
КонецФункции

Функция ИмяФайлаОтчетаОБОтправке(КодУзлаОтправителя, КодУзлаПолучателя)
	
	Возврат СтрШаблон("resSend_%1_from_%2", КодУзлаОтправителя, КодУзлаПолучателя);
	
КонецФункции

Процедура ОтправитьРезультатыОбменаВОблако(СтруктураНастроекОбмена) 
	
	РегистрыСведений.КонтрольТранспортовОбмена.ОбновитьСостояниеТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, НСтр("ru='Отправка отчетов о синхронизации в облако'"));
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСеанса", НомерСеансаИнформационнойБазы());
	Запрос.УстановитьПараметр("Транспорт", СтруктураНастроекОбмена.ТранспортОбмена);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрольОбменаДанными.УзелИнформационнойБазы КАК Узел,
	|	КонтрольОбменаДанными.УзелИнформационнойБазы.Код КАК КодУзла,
	|	КонтрольОбменаДанными.Транспорт.ВидТранспорта КАК ВидТранспорта,
	|	КонтрольОбменаДанными.ПоследнееПолучение,
	|	КонтрольОбменаДанными.РезультатПолученияДанных,
	|	КонтрольОбменаДанными.ТекстОшибокПолучения,
	|	КонтрольОбменаДанными.ПоследняяОтправка,
	|	КонтрольОбменаДанными.РезультатОтправкиДанных,
	|	КонтрольОбменаДанными.ТекстОшибокОтправки,
	|	КонтрольОбменаДанными.УзелИнформационнойБазы.Активность КАК Активность
	|ИЗ
	|	РегистрСведений.КонтрольОбменаДанными КАК КонтрольОбменаДанными
	|ГДЕ
	|	НЕ КонтрольОбменаДанными.УзелИнформационнойБазы.ЭтотУзел
	|	И КонтрольОбменаДанными.НомерСеанса = &НомерСеанса
	|	И КонтрольОбменаДанными.Транспорт = &Транспорт";
	
	Попытка
	
		РезультатОтправки = ОбработкаТранспортаСообщенийОбмена.ОтправитьРезультатыОбмена(СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод, Запрос.Выполнить().Выбрать());
	
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(СтруктураНастроекОбмена.ТранспортОбмена, КраткоеПредставлениеОшибки(Инфо), Неопределено);
		ВызватьИсключение ПодробноеПредставлениеОшибки(Инфо);
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает имя файла списка устройств
// 
// Возвращаемое значение:
//  * Строка - Имя файла, хранящего список устройств 
//  * Неопределено - Имя центральной базы не задано
//
Функция ПолучитьИмяФайлаСпискаУстройств()
	ПараметрыЦБ = ОбменМобильноеПриложение.ПараметрыЦентральнойБазыМобильныхПриложений();
	ИмяЭтойБазы = ПараметрыЦБ.ИмяЭтойБазы;
	
	Если ПустаяСтрока(ИмяЭтойБазы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяЭтойБазы + "_Apps.xml";
КонецФункции



#КонецОбласти


ИнициализацияСообщенийОшибок();
ИмяОбъекта = СтрШаблон(НСтр("ru = 'Обработка: %1'"), Метаданные().Имя);

#КонецЕсли
