////////////////////////////////////////////////////////////////////////////////
//Обработка.ЗагрузкаВыпискиБанков 
//  
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// Загружает файл в таблицу выписки банка
Процедура ЗагрузитьФайлВТаблицу(ПараметрыВызоваСервера, АдресХранилища) Экспорт
	
	Расширение           = ПараметрыВызоваСервера.Расширение;
	ТабличныйДокумент    = ПараметрыВызоваСервера.ТабличныйДокумент;
	ИмяВременногоФайла   = ПараметрыВызоваСервера.ИмяВременногоФайла;
	Таблица              = Неопределено;
	
	Если Расширение = "csv" Тогда 
		
		ЗагрузитьCSVФайлВТаблицу(ИмяВременногоФайла, Таблица);
		
	ИначеЕсли Расширение = "txt" Тогда 
		
		ЗагрузитьTXTФайлВТаблицу(ИмяВременногоФайла, Таблица, "Сбербанк");
		
	Иначе
		
		ТабличныйДокумент.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
		
	КонецЕсли;
	
	Если Таблица <> Неопределено Тогда
		
		// Выгружаем таблицу в табличный документ
		ВыгрузитьТаблицуЗначенийВТабличныйДокумент(Таблица, ТабличныйДокумент, Истина);
		
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Создает и возвращает таблицу значений для загрузки данных из табличного документа
Функция НоваяТаблицаВыписки() Экспорт

	// Описания типов
	ТипСтрока    = Новый ОписаниеТипов("Строка");
	ТипСумма     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2));
	ТипКурс      = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 4));
	ТипНомер     = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(22, 0));
	ТипБулево    = Новый ОписаниеТипов("Булево");
	ТипДата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипКошелек   = Новый ОписаниеТипов("СправочникСсылка.КошелькиИСчета");
	
	ТаблицаВыписки = Новый ТаблицаЗначений;
	
	// Колонки с исходным текстом загружаемой выписки
	ТаблицаВыписки.Колонки.Добавить("НомерСтрокиИсходника", ТипНомер);    // Номер строки табличного документа
	ТаблицаВыписки.Колонки.Добавить("НомерКоррСтроки", ТипНомер);         // Номер строки табл.документа, в которой сожержится информация о корреспондирующей операции
													                      // (используется при переводах)
	
	// Колонки со значениями показателей
	ТаблицаВыписки.Колонки.Добавить("Загружать", ТипБулево);   // Текстовое представление операции
	
	ТаблицаВыписки.Колонки.Добавить("Дата", ТипДата);                        // Дата операции
	ТаблицаВыписки.Колонки.Добавить("ДатаКлючевоеСлово", ТипСтрока);         // Текст, по которому определяется кошелек
	
	ТаблицаВыписки.Колонки.Добавить("Кошелек", ТипКошелек);              // Кошелек операции (в перемещениях - кошелек откуда)
	ТаблицаВыписки.Колонки.Добавить("КошелекПредставление", ТипСтрока);  // представление в таблице
	ТаблицаВыписки.Колонки.Добавить("КошелекКлючевоеСлово", ТипСтрока);  // текст, по которому сопоставляется значение
	
	ТаблицаВыписки.Колонки.Добавить("СуммаПоступления", ТипСумма);     // Сумма прихода на счет
	ТаблицаВыписки.Колонки.Добавить("СуммаПоступленияКлючевоеСлово", ТипСтрока);  // текст, по которому сопоставляется значение
	
	ТаблицаВыписки.Колонки.Добавить("СуммаСписания", ТипСумма);         // Сумма расхода со счета
	ТаблицаВыписки.Колонки.Добавить("СуммаСписанияКлючевоеСлово", ТипСтрока);  // текст, по которому сопоставляется значение
	
	ТаблицаВыписки.Колонки.Добавить("ВидОперации", ТипСтрока);       // Строковое представление операции
	ТаблицаВыписки.Колонки.Добавить("ВидОперацииПредставление", ТипСтрока);  // Строковое представление операции
	ТаблицаВыписки.Колонки.Добавить("ВидОперацииКлючевоеСлово", ТипСтрока);  // текст, по которому сопоставляется значение
	
	ТаблицаВыписки.Колонки.Добавить("СтатьяДолг", Метаданные.ОпределяемыеТипы.СтатьяБюджета.Тип); // Основание платежа
	ТаблицаВыписки.Колонки.Добавить("СтатьяДолгПредставление", ТипСтрока); // Основание платежа
	ТаблицаВыписки.Колонки.Добавить("СтатьяДолгКлючевоеСлово", ТипСтрока);  // текст, по которому сопоставляется значение
	
	ТаблицаВыписки.Колонки.Добавить("ФинансоваяЦель", Новый ОписаниеТипов("СправочникСсылка.ФинансовыеЦели"));      // Строковое представление операции
	ТаблицаВыписки.Колонки.Добавить("ФинансоваяЦельПредставление", ТипСтрока);      // Строковое представление операции
	ТаблицаВыписки.Колонки.Добавить("ФинансоваяЦельКлючевоеСлово", ТипСтрока);  // текст, по которому сопоставляется значение
	
	ТаблицаВыписки.Колонки.Добавить("СсылкаНаОперацию");                          // ДокументСсылка...
	ТаблицаВыписки.Колонки.Добавить("СсылкаНаОперациюПредставление", ТипСтрока);  // Представление документа
	ТаблицаВыписки.Колонки.Добавить("СсылкаНаОперациюКлючевоеСлово", ТипСтрока);  // текст, по которому сопоставляется значение
	
	ТаблицаВыписки.Колонки.Добавить("ТекстСтрокиВыписки", ТипСтрока);  // Строка выписки, как она получена из банка
	ТаблицаВыписки.Колонки.Добавить("Комментарий", ТипСтрока);         // Текст, который будет записан в комментарий операции

	ТаблицаВыписки.Колонки.Добавить("Аналитика");
	ТаблицаВыписки.Колонки.Добавить("АналитикаПредставление",    ТипСтрока);
	
	// Дополнительные колонки
	ТаблицаВыписки.Колонки.Добавить("ВидОперацииИконка", ТипНомер);               // Иконка "СтатусыОпераций"
	
	
	Возврат ТаблицаВыписки;
	
КонецФункции

// Транслирует текст табличного документа в список операций
Процедура ПрочитатьТабличныйДокумент(ПараметрыВызоваСервера, АдресХранилища) Экспорт
	
	ТабличныйДокумент    = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(ПараметрыВызоваСервера.ТабличныйДокумент);
	
	НастройкиЧтения      = ПараметрыВызоваСервера.НастройкиЧтения;
	
	// Область табличного документа, содержащая таблицу
	ОбластьТаблицы = ТабличныйДокумент.Область(НастройкиЧтения[0].ПоложениеПоказателя + ":" + НастройкиЧтения[0].КонечнаяОбласть);
	
	СписокАналитики = Новый Массив;
	
	СтрокаДаты = Неопределено;
	
	// Составим список актуальных показателей и их положения в таблице
	Для каждого СтрокаПоказателя Из НастройкиЧтения Цикл
		
		// Пропускаем настройки, которые не могут иметь единственное значение
		// и настройки, для которых не указана ячейка в таблице
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.ПоложениеПоказателя) Или СтрокаПоказателя.КлючПоказателя = "НачалоТаблицы" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоказателя.ОбластиПоказателя = МассивОбластейПоказателя(СтрокаПоказателя.ПоложениеПоказателя, СтрокаПоказателя.КонечнаяОбласть, ТабличныйДокумент);
		
		Если СтрокаПоказателя.КлючПоказателя = "Дата" Тогда
			СтрокаДаты = СтрокаПоказателя;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПоказателя.КлючПоказателя) <> Тип("Строка") Тогда
			СписокАналитики.Добавить(СтрокаПоказателя);
		КонецЕсли;
		
	КонецЦикла;
	
	СуммыВОднойКолонке = СтрокаНастройкиПоказателя(НастройкиЧтения, "СуммаПоступления").ПоложениеПоказателя 
							= СтрокаНастройкиПоказателя(НастройкиЧтения, "СуммаСписания").ПоложениеПоказателя;
	
	// Создаем пустую таблицу выписки
	ТаблицаВыписки              = НоваяТаблицаВыписки();
	
	// Перед обработкой строк таблицы нужно разъединить объединенные ячейки, чтобы текст не дублировался
	ТабличныйДокумент.Область(ОбластьТаблицы.Верх, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы).Разъединить();
	
	// Заполяем таблицу выписки строками табличного докумнета
	СтрокаВыписки = Неопределено;
	Для СчетчикСтрок = ОбластьТаблицы.Верх По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		// Строки с пустыми датами пропускаем
		ТекстДаты = ТекстПоказателяЯчеекПоНомеруСтроки(СчетчикСтрок, СтрокаДаты.ОбластиПоказателя, ТабличныйДокумент);
		ЗначениеДаты = ЗначениеПоказателяИзТекста(ТекстДаты, СтрокаДаты.ТипЗначенияПоказателя, "Дата", Ложь);
		Если Не ЗначениеЗаполнено(ТекстДаты) Или Не ЗначениеЗаполнено(ЗначениеДаты) Или ТипЗнч(ЗначениеДаты) <> Тип("Дата") Тогда
			ДополнитьТекстСтрокиВыписки(СчетчикСтрок, СтрокаВыписки, ТабличныйДокумент, ОбластьТаблицы, Истина);
			Продолжить;
		КонецЕсли;
		
		СтрокаВыписки = ТаблицаВыписки.Добавить();
		СтрокаВыписки.НомерСтрокиИсходника = СчетчикСтрок;
		
		// Составляем текст строки выписки из значений колонок
		ДополнитьТекстСтрокиВыписки(СчетчикСтрок, СтрокаВыписки, ТабличныйДокумент, ОбластьТаблицы, Ложь);
		
		// заполняем обязательные поля выписки
		СтрокаВыписки.Дата = ЗначениеДаты;
		УстановитьЗначениеВСтрокеВыписки(СтрокаВыписки, "Дата",             НастройкиЧтения, ТабличныйДокумент);
		УстановитьЗначениеВСтрокеВыписки(СтрокаВыписки, "Кошелек",          НастройкиЧтения, ТабличныйДокумент);
		УстановитьЗначениеВСтрокеВыписки(СтрокаВыписки, "ФинансоваяЦель",   НастройкиЧтения, ТабличныйДокумент);
		УстановитьЗначениеВСтрокеВыписки(СтрокаВыписки, "Комментарий",      НастройкиЧтения, ТабличныйДокумент);
		
		// Суммы поступления и списания прорабатываем отедельно
		СуммаПоступления = ЗначениеИПредставлениеПоказателя(СтрокаВыписки, "СуммаПоступления", НастройкиЧтения, ТабличныйДокумент);
		СуммаСписания    = ЗначениеИПредставлениеПоказателя(СтрокаВыписки, "СуммаСписания", НастройкиЧтения, ТабличныйДокумент);
		
		Если СуммыВОднойКолонке Тогда
			
			// поступление или списание - определяется знаком суммы
			СтрокаВыписки.СуммаПоступления              = ?(ЗнакЧисла(СуммаПоступления.Значение) > 0, СуммаПоступления.Значение, 0);
			СтрокаВыписки.СуммаПоступленияКлючевоеСлово = ?(ЗнакЧисла(СуммаПоступления.Значение) > 0, СуммаПоступления.Представление, "");
			
			СтрокаВыписки.СуммаСписания                 = ?(ЗнакЧисла(СуммаСписания.Значение) < 0, -СуммаСписания.Значение, 0);
			СтрокаВыписки.СуммаСписанияКлючевоеСлово    = ?(ЗнакЧисла(СуммаСписания.Значение) < 0, СуммаСписания.Представление, "");
			
		Иначе
			
			СтрокаВыписки.СуммаПоступления              = СуммаПоступления.Значение;
			СтрокаВыписки.СуммаПоступленияКлючевоеСлово = СуммаПоступления.Представление;
			
			СтрокаВыписки.СуммаСписания              = СуммаСписания.Значение;
			СтрокаВыписки.СуммаСписанияКлючевоеСлово = СуммаСписания.Представление;
			
		КонецЕсли;
		
		// Находим существующую операцию
		Если ЗначениеЗаполнено(СтрокаВыписки.Кошелек) И ЗначениеЗаполнено(СтрокаВыписки.Дата) Тогда
			Операция = НайтиОперацию(СтрокаВыписки.Дата, СтрокаВыписки.Кошелек, СтрокаВыписки.СуммаПоступления, СтрокаВыписки.СуммаСписания);
			СтрокаВыписки.СсылкаНаОперацию        = Операция.Операция;
			СтрокаВыписки.ВидОперацииИконка       = Операция.ИконкаОперации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаВыписки.СсылкаНаОперацию) Тогда
			
			СтрокаВыписки.СсылкаНаОперациюПредставление = Строка(СтрокаВыписки.СсылкаНаОперацию);
			
			// Проверяем статьи, кошельки и аналитику
			ОбновитьКошелекИСтатьиПоСсылкеНаОперацию(СтрокаВыписки);
			
		Иначе
			
			// Определяем вид операции
			// Сначала пытаемся найти статью, долг или кошелек 
			УстановитьЗначениеВСтрокеВыписки(СтрокаВыписки, "СтатьяДолг",       НастройкиЧтения, ТабличныйДокумент);
			
			Если СтрокаВыписки.СуммаПоступления = СтрокаВыписки.СуммаСписания Или ТипЗнч(СтрокаВыписки.СтатьяДолг) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
				
				СтрокаВыписки.СсылкаНаОперацию         = Документы.Перемещение.ПустаяСсылка();
				
			ИначеЕсли СтрокаВыписки.СуммаПоступления > 0 Тогда
				
				Если ТипЗнч(СтрокаВыписки.СтатьяДолг) = Тип("СправочникСсылка.Долги") Тогда
					
					Если СтрокаВыписки.СтатьяДолг.ИспользоватьДляУчетаВыданныхДолгов Тогда
						СтрокаВыписки.СсылкаНаОперацию         = Документы.НамВернулиДолг.ПустаяСсылка();
					Иначе
						СтрокаВыписки.СсылкаНаОперацию         = Документы.МыВзялиВДолг.ПустаяСсылка();
					КонецЕсли;
					
				Иначе
					
					СтрокаВыписки.СсылкаНаОперацию         = Документы.Доход.ПустаяСсылка();
					ТипСтатьиДолга = Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходов");
					СтрокаВыписки.СтатьяДолг = ТипСтатьиДолга.ПривестиЗначение(СтрокаВыписки.СтатьяДолг);
					
				КонецЕсли;
				
			Иначе
				
				Если ТипЗнч(СтрокаВыписки.СтатьяДолг) = Тип("СправочникСсылка.Долги") Тогда
					
					Если СтрокаВыписки.СтатьяДолг.ИспользоватьДляУчетаВыданныхДолгов Тогда
						СтрокаВыписки.СсылкаНаОперацию         = Документы.МыДалиВДолг.ПустаяСсылка();
					Иначе
						СтрокаВыписки.СсылкаНаОперацию         = Документы.МыВернулиДолг.ПустаяСсылка();
					КонецЕсли;
					
				Иначе
					
					СтрокаВыписки.СсылкаНаОперацию         = Документы.Расход.ПустаяСсылка();
					ТипСтатьиДолга = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов");
					СтрокаВыписки.СтатьяДолг = ТипСтатьиДолга.ПривестиЗначение(СтрокаВыписки.СтатьяДолг);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаВыписки.ВидОперации              = СтрокаВыписки.СсылкаНаОперацию.Метаданные().Имя;
		СтрокаВыписки.ВидОперацииПредставление = СтрокаВыписки.СсылкаНаОперацию.Метаданные().Синоним;
		Если Не ЗначениеЗаполнено(СтрокаВыписки.СсылкаНаОперацию) Тогда
			СтрокаВыписки.СсылкаНаОперациюПредставление = СтрокаВыписки.ВидОперацииПредставление;
		КонецЕсли;
		
		// Определяем необходимость загрузки
		СтрокаВыписки.Загружать = Не ЗначениеЗаполнено(СтрокаВыписки.СсылкаНаОперацию) 
			И ЗначениеЗаполнено(СтрокаВыписки.Дата) И ЗначениеЗаполнено(СтрокаВыписки.КошелекПредставление);
			
		// Обработка аналитики - выполняем в любом случае, чтобы можно было ее заполнить при изменении типа операции или 
		//при создании новой операции
		СтрокаВыписки.Аналитика = НоваяТаблицаАналитики(); 
		Для каждого ЭлементАналитики Из СписокАналитики Цикл
			
			СтрокаАналитики = СтрокаВыписки.Аналитика.Добавить();
			СтрокаАналитики.ВидАналитики = ЭлементАналитики.КлючПоказателя;
			
			ЗначениеИПредставление = ЗначениеИПредставлениеПоказателя(СтрокаВыписки, ЭлементАналитики.КлючПоказателя, НастройкиЧтения, ТабличныйДокумент);
			
			Если ЗначениеЗаполнено(ЗначениеИПредставление.Представление) Тогда
				
				СтрокаАналитики.КлючевоеСлово = ЗначениеИПредставление.КлючевоеСлово;
				СтрокаАналитики.Представление = ЗначениеИПредставление.Представление;
				СтрокаАналитики.Значение      = ЗначениеИПредставление.Значение;
				
			КонецЕсли;
			
			СтрокаВыписки.АналитикаПредставление = СтрокаВыписки.АналитикаПредставление 
						+ ?(ЗначениеЗаполнено(СтрокаВыписки.АналитикаПредставление), "; ", "")
						+ Строка(СтрокаАналитики.ВидАналитики) + " = " + ДеньгиКлиентСервер.СокращенноеПредставление(СтрокаАналитики.Представление, 30, Ложь);
			
		КонецЦикла;
		
		// Представление аналитики зависит от типа операции и наличия ссылки на операции
		Если СтрокаВыписки.ВидОперации <> "Доход" И СтрокаВыписки.ВидОперации <> "Расход" Тогда
			
			//аналитика для таких операций не предусмотрена
			СтрокаВыписки.АналитикаПредставление = "";
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаВыписки.СсылкаНаОперацию) Тогда
			
			// аналитика уже заполнена в самой операции
			СтрокаВыписки.АналитикаПредставление = НСтр("ru='см. операцию…'");
			
			
		КонецЕсли;
		
		 
		
	КонецЦикла;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ТаблицаВыписки, АдресХранилища);
	
КонецПроцедуры



#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Разное


Процедура ВыгрузитьТаблицуЗначенийВТабличныйДокумент(ТаблицаЗначений, ТабличныйДокумент, Очищать = Истина)
	
	Если Очищать Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	НомерСтроки =ТабличныйДокумент.ВысотаТаблицы;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		НомерСтроки = НомерСтроки + 1;
		НомерКолонки = 0;
		
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			
			НомерКолонки = НомерКолонки + 1;
			
			ТекстКолонки = СтрокаТаблицы[Колонка.Имя];
			Если ЗначениеЗаполнено(ТекстКолонки) Тогда
				Ячейка       = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
				Ячейка.Текст = ТекстКолонки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Во избежание исключений выполняется проверка на тип значения числа
Функция ЗнакЧисла(Знач Число)

	Если ЗначениеЗаполнено(Число) И ТипЗнч(Число) = Тип("Число") Тогда
		Возврат ?(Число > 0, 1, -1);
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции
 

#КонецОбласти


#Область ДлительныеОперации


#КонецОбласти


/////////////// Загрузка данных //////////////////////////

#Область РаботаСCSVФайлами

Процедура ЗагрузитьCSVФайлВТаблицу(ИмяФайла, Таблица) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда 
		Возврат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	
	// Проверка файла
	Строка = ЧтениеТекста.ПрочитатьСтроку();
	Если Строка = Неопределено Тогда 
		ТекстСообщения = НСтр("ru = 'Не получилось загрузить данные из этого файла. Убедитесь в корректности данных в файле.'");
		Возврат;
	КонецЕсли;
	
	Пока ПустаяСтрока(Строка) Цикл
		Строка = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	Если ПустаяСтрока(Строка) Тогда
		ТекстСообщения = НСтр("ru = 'Указанный файл не содержит текст. Убедитесь в корректности данных в файле.'");
		Возврат;
	КонецЕсли;
	
	//Опрелеляем ограничитель полей
	КавычкаОткрытая = "";
	КавычкаЗакрытая = "";
	ПервыйСимвол     = Лев(СокрЛ(Строка), 1);
	МинимумПовторов  = 4; // ограничители повторяются в начале и конце каждого поля; полей должно быть не менее 5
	ВхожденийСимвола = СтрЧислоВхождений(Строка, ПервыйСимвол);
	
	Если (ПервыйСимвол = """" ИЛИ ПервыйСимвол = "'" ИЛИ ПервыйСимвол = "*")
		И ВхожденийСимвола >= МинимумПовторов * 2 Тогда
		
		КавычкаОткрытая = ПервыйСимвол;
		КавычкаЗакрытая = ПервыйСимвол;
		
	ИначеЕсли ПервыйСимвол = "[" И ВхожденийСимвола >= МинимумПовторов
		И СтрЧислоВхождений(Строка, "]") >= МинимумПовторов Тогда
		
		КавычкаОткрытая = "[";
		КавычкаЗакрытая = "]";
		
	ИначеЕсли ПервыйСимвол = "{" И ВхожденийСимвола >= МинимумПовторов
		И СтрЧислоВхождений(Строка, "}") >= МинимумПовторов Тогда
		
		КавычкаОткрытая = "{";
		КавычкаЗакрытая = "}";
		
	КонецЕсли;
	
	// Определяем символ разделителя
	СимволРазделителя = РазделительЗначенийФайлаCSV(Строка, КавычкаОткрытая, КавычкаЗакрытая, МинимумПовторов);
	Если СимволРазделителя = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'В указанном файле не удалось определить разделитель показателей. Убедитесь в корректности данных в файле. Убедитесь в корректности данных в файле.'");
		Возврат;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	
	// Создаем колонки таблицы
	КолонкиШапки = СтрРазделить(Строка, СимволРазделителя, Истина);
	Счетчик = 0;
	ИменаКолонок = Новый Массив;
	Для Каждого Колонка Из КолонкиШапки Цикл
		ИменаКолонок.Добавить("Колонка" + Формат(Счетчик, "ЧДЦ=; ЧН=0; ЧГ="));
		Таблица.Колонки.Добавить(ИменаКолонок[Счетчик]);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	ВсегоКолонок = Таблица.Колонки.Количество();
	
	// Заполняем таблицу
	Пока Строка <> Неопределено Цикл
		
		НоваяСтрока = Таблица.Добавить();
		
		ЗначенияПолей = СтрРазделить(Строка, СимволРазделителя, Истина);
		Счетчик = 0;
		Для каждого Поле Из ЗначенияПолей Цикл
			
			ЗначениеПоля = СокрЛП(Поле);
			Если Не ПустаяСтрока(КавычкаОткрытая) Тогда
				ЗначениеПоля = Сред(ЗначениеПоля, 2, СтрДлина(ЗначениеПоля) - 2);
			КонецЕсли;
			
			Если Счетчик >= ВсегоКолонок Тогда
				ИменаКолонок.Добавить("Колонка" + Формат(Счетчик, "ЧДЦ=; ЧН=0; ЧГ="));
				Таблица.Колонки.Добавить(ИменаКолонок[Счетчик]);
				ВсегоКолонок = Таблица.Колонки.Количество();
			КонецЕсли;
			
			НоваяСтрока[ИменаКолонок[Счетчик]] = ЗначениеПоля;
			Счетчик = Счетчик + 1;
			
		КонецЦикла;

		Строка = ЧтениеТекста.ПрочитатьСтроку();
		
	КонецЦикла;
	
	//ЗаполнитьТаблицуПоЗагруженнымДаннымИзФайла(Источник, ТабличныйДокумент, ИнформацияПоКолонкам);
	
КонецПроцедуры

Процедура СохранитьТаблицуВCSVФайл(ПутьКФайлу) Экспорт
	
	ФорматЗаголовкаДляCSV = "";
	
	Если СтрДлина(ФорматЗаголовкаДляCSV) > 0 Тогда
		ФорматЗаголовкаДляCSV = Лев(ФорматЗаголовкаДляCSV, СтрДлина(ФорматЗаголовкаДляCSV)-1);
	КонецЕсли;
	
	Файл = Новый ЗаписьТекста(ПутьКФайлу);
	Файл.ЗаписатьСтроку(ФорматЗаголовкаДляCSV);
	Файл.Закрыть();
	
КонецПроцедуры

Функция РазделительЗначенийФайлаCSV(Строка, КавычкаОткрытая, КавычкаЗакрытая, МинимумПовторов) 

	Результат = Неопределено;
	
	СимволРазделителя = ",";
	СтрокаПоиска = КавычкаЗакрытая + СимволРазделителя + КавычкаОткрытая;
	Если СтрЧислоВхождений(Строка, СтрокаПоиска) > МинимумПовторов - 1 Тогда
		Результат = СимволРазделителя;
	КонецЕсли;
	
	СимволРазделителя = ";";
	СтрокаПоиска = КавычкаЗакрытая + СимволРазделителя + КавычкаОткрытая;
	Если СтрЧислоВхождений(Строка, СтрокаПоиска) > МинимумПовторов - 1 Тогда
		Результат = СимволРазделителя;
	КонецЕсли;
	
	СимволРазделителя = Символы.Таб;
	СтрокаПоиска = КавычкаЗакрытая + СимволРазделителя + КавычкаОткрытая;
	Если СтрЧислоВхождений(Строка, СтрокаПоиска) > МинимумПовторов - 1 Тогда
		Результат = СимволРазделителя;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


#КонецОбласти


#Область ЗагрузкаФайлаСбербанка

// Возвращает таблицу значений для загрузки выписка сбербанка из текстового файла
Функция НоваяТаблицаСбербанка() 

	ТаблицаВыписки = Новый ТаблицаЗначений;
	
	ТаблицаВыписки.Колонки.Добавить("ДатаОперации",             , "Дата операции", 10);
	ТаблицаВыписки.Колонки.Добавить("ДатаОбработки",            , "Дата обработки", 10);
	ТаблицаВыписки.Колонки.Добавить("НомерСчета",               , "Счет", 20);
	ТаблицаВыписки.Колонки.Добавить("СуммаВВалютеОперации",     , "Сумма в валюте операции", 12);
	ТаблицаВыписки.Колонки.Добавить("ВалютаОперацииСтрокой",    , "Валюта операции", 3);
	ТаблицаВыписки.Колонки.Добавить("СуммаВВалютеСчета",        , "Сумма в валюте счета", 12);
	ТаблицаВыписки.Колонки.Добавить("СодержаниеОперации",       , "Содержание операции", 45);
	
	Возврат ТаблицаВыписки;
	
КонецФункции

Процедура ЗагрузитьTXTФайлВТаблицу(ПутьКФайлу, Таблица, ПараметрыБанка) 
	
	Файл = Новый Файл(ПутьКФайлу);
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыБанка = "Сбербанк" Тогда
		Таблица = ТаблицаИзФайлаСбербанка(ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Обработка отчета, получаемого из банка в txt-файле.
Функция ТаблицаИзФайлаСбербанка(ПутьКФайлу) 

	// Таблица, которую нужно заполнить данными
	ТаблицаВыписки = НоваяТаблицаСбербанка();
	
	// Дополнительные колонки, специфичные для банка
	ТаблицаВыписки.Колонки.Добавить("НомерОперации", Новый ОписаниеТипов("Строка"));
	
	// Переменная для текущей заполняемой строки выписки
	ТекущаяСтрокаВыписки = Неопределено;
	
	// Индикатор состояния (строка или Неопределено)
	СостояниеЧтения = Неопределено;
	
	// Список колонок текстового отчета (расположение в строке, количество символов, заголовок)
	СписокКолонок   = Новый ТаблицаЗначений;
	СписокКолонок.Колонки.Добавить("НачальнаяПозиция");
	СписокКолонок.Колонки.Добавить("ПозицияГраницы");
	СписокКолонок.Колонки.Добавить("КоличествоСимволов");
	СписокКолонок.Колонки.Добавить("Название",          Новый ОписаниеТипов("Строка"));
	СписокКолонок.Колонки.Добавить("СтроковоеЗначение", Новый ОписаниеТипов("Строка")); //для сбора текстового значения ячейки, расположенного на нескольких строках таблицы
	КоличествоКолонок = 0;
	
	// Список счетов. 
	// Описание каждого счета собирается из нескольких строк 1-й колонки
	СписокСчетов = Новый ТаблицаЗначений;
	СписокСчетов.Колонки.Добавить("ОписаниеСчета",   Новый ОписаниеТипов("Строка"));
	СписокСчетов.Колонки.Добавить("ЧтениеЗавершено", Новый ОписаниеТипов("Булево")); // Истина, если чтение счета завершили
	СписокСчетов.Колонки.Добавить("СтрокиСчета",     Новый ОписаниеТипов("Массив")); // ссылки на строки, в которых нужно проставить значение счета
	ТекущийСчет = Неопределено;
	
	СтрокаЗаголовка    = Неопределено;
	ЧтениеНовойСтроки  = Ложь;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.ANSI);
	
	СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	Пока СтрокаТекста <> Неопределено Цикл
		
		Если Лев(СтрокаТекста, 5) = "-----" И СтрНайти(СтрокаТекста,"-+-") > 0 Тогда // Это разделитель таблицы
			
			Если СостояниеЧтения = Неопределено Тогда
				
				СостояниеЧтения = "ЧтениеШапки";
				
				Если СтрокаЗаголовка = Неопределено Тогда
					
					// Начинаем читать таблицу. Определяем ширину колонок
					СписокКолонок.Очистить();
					
					НачальнаяПозиция = 1;
					ПозицияГраницы = СтрНайти(СтрокаТекста, "+", НаправлениеПоиска.СНачала, НачальнаяПозиция);
					Пока ПозицияГраницы > 0 Цикл
						
						СтрокаКолонки = СписокКолонок.Добавить();
						СтрокаКолонки.НачальнаяПозиция  = НачальнаяПозиция;
						СтрокаКолонки.ПозицияГраницы    = ПозицияГраницы;
						СтрокаКолонки.КоличествоСимволов    = ПозицияГраницы - НачальнаяПозиция;
						
						НачальнаяПозиция = ПозицияГраницы + 1;
						ПозицияГраницы = СтрНайти(СтрокаТекста, "+", НаправлениеПоиска.СНачала, НачальнаяПозиция);
						
					КонецЦикла;
					
					// последняя колонка не завершается символом "+"
					СтрокаКолонки = СписокКолонок.Добавить();
					СтрокаКолонки.НачальнаяПозиция      = НачальнаяПозиция;
					СтрокаКолонки.ПозицияГраницы        = СтрДлина(СтрокаТекста);
					СтрокаКолонки.КоличествоСимволов    = СтрокаКолонки.ПозицияГраницы - СтрокаКолонки.НачальнаяПозиция;
					
					КоличествоКолонок = СписокКолонок.Количество();
					
					// Поправки на "нестандартную форматированность" текста сбербанка
					СписокКолонок[1].НачальнаяПозиция = СписокКолонок[1].НачальнаяПозиция - 1;
					СписокКолонок[2].НачальнаяПозиция   = СписокКолонок[2].НачальнаяПозиция - 1;
					СписокКолонок[2].КоличествоСимволов = СписокКолонок[2].КоличествоСимволов + 2;
					
				КонецЕсли;
				
				
			ИначеЕсли СостояниеЧтения = "ЧтениеШапки" Тогда
				
				Если СтрокаЗаголовка = Неопределено Тогда
					СтрокаЗаголовка = ТаблицаВыписки.Добавить();
					ЗаписатьЗаголовкиКолонокВСтрокуВыписки(СтрокаЗаголовка, СписокКолонок);
				КонецЕсли;
				
				СостояниеЧтения = "ЧтениеТаблицы";
				
			ИначеЕсли СостояниеЧтения = "ЧтениеТаблицы" Тогда
				
				// закончили читать таблицу
				Если ТекущаяСтрокаВыписки <> Неопределено Тогда
					
					ЗаписатьЗначенияЯчеекВСтрокуВыписки(ТекущаяСтрокаВыписки, СписокКолонок);
					ТекущаяСтрокаВыписки = Неопределено;
					
				КонецЕсли;
				СостояниеЧтения      = Неопределено;
				ТекущаяСтрокаВыписки = Неопределено;
				
			КонецЕсли;
			
			СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
			Продолжить;
			
		КонецЕсли;
		
		
		Если СостояниеЧтения = "ЧтениеШапки" Тогда
			
			// Пишем в список колонок их заголовки
			Если СтрокаЗаголовка = Неопределено Тогда
				Для каждого Колонка Из СписокКолонок Цикл
					ТекстЯчейки = СокрЛП(Сред(СтрокаТекста, Колонка.НачальнаяПозиция, Колонка.КоличествоСимволов));
					ТекстЯчейки = СокрЛП(СтрЗаменить(ТекстЯчейки, "|", " "));
					Если Не ПустаяСтрока(ТекстЯчейки) Тогда
						Колонка.Название = Колонка.Название + ?(Колонка.Название = "", "", " ") + ТекстЯчейки;
						Колонка.СтроковоеЗначение = Колонка.СтроковоеЗначение + ?(Колонка.СтроковоеЗначение = "", "", " ") + ТекстЯчейки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли СостояниеЧтения = "ЧтениеТаблицы" Тогда
			
			// 1. Считываем описание счета из 1-й колонки
			СтрокаОписанияСчета = СокрЛП(Лев(СтрокаТекста, СписокКолонок[0].КоличествоСимволов));
			Если ЗначениеЗаполнено(СтрокаОписанияСчета) Тогда
				
				Если ТекущийСчет = Неопределено Или ТекущийСчет.ЧтениеЗавершено Тогда
					// В таблице появился новый счет
					ТекущийСчет = СписокСчетов.Добавить();
				КонецЕсли;
				
				// Дополняем описание счета:
				ТекущийСчет.ОписаниеСчета = ТекущийСчет.ОписаниеСчета 
						+ ?(ПустаяСтрока(ТекущийСчет.ОписаниеСчета), "", " ")
						+ СтрокаОписанияСчета;
				
			Иначе
				
				Если ТекущийСчет <> Неопределено И Не ТекущийСчет.ЧтениеЗавершено Тогда
					ТекущийСчет.ЧтениеЗавершено = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// 2. Новая строка выписки начинается с непустой даты операции
			СтрокаОписанияДаты = СокрЛП(Сред(СтрокаТекста, СписокКолонок[2].НачальнаяПозиция, СписокКолонок[2].КоличествоСимволов));
			ЭтоСтрокаИтога = СтрНайти(СтрокаТекста, "*******") > 0;
			Если ЗначениеЗаполнено(СтрокаОписанияДаты) И Не ЭтоСтрокаИтога Тогда
				
				Если ТекущаяСтрокаВыписки <> Неопределено Тогда
					
					ЗаписатьЗначенияЯчеекВСтрокуВыписки(ТекущаяСтрокаВыписки, СписокКолонок);
					
				КонецЕсли;
				
				ТекущаяСтрокаВыписки = ТаблицаВыписки.Добавить();
				ЧтениеНовойСтроки    = Истина;
				
				Если ТекущийСчет <> Неопределено Тогда
					ТекущийСчет.СтрокиСчета.Добавить(ТекущаяСтрокаВыписки);
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрокаВыписки = Неопределено Или ЭтоСтрокаИтога Тогда
				
				СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
				Продолжить;
				
			КонецЕсли;
			
			// Заполняем строковые значения колонок
			Для Счетчик = 1 По КоличествоКолонок -1 Цикл
				
				СтрокаКолонки = СписокКолонок[Счетчик];
				ТекстЯчейки = СтрЗаменить(СокрЛП(Сред(СтрокаТекста, СтрокаКолонки.НачальнаяПозиция, СтрокаКолонки.КоличествоСимволов)), "   ", " ");
				Если ЗначениеЗаполнено(ТекстЯчейки) Тогда
					СтрокаКолонки.СтроковоеЗначение = СтрокаКолонки.СтроковоеЗначение 
						+ ?(СтрокаКолонки.СтроковоеЗначение = "", "", " ")
						+ ТекстЯчейки;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если это начало новой строки, вытаскиваем символ валюты:
			Если ЧтениеНовойСтроки Тогда
				
				ТекстСтроки = СписокКолонок[4].СтроковоеЗначение;
				ТекущаяСтрокаВыписки.ВалютаОперацииСтрокой = Прав(ТекстСтроки, 3);
				СписокКолонок[4].СтроковоеЗначение = СокрЛП(Лев(ТекстСтроки, СтрДлина(ТекстСтроки) - 3));
				ЧтениеНовойСтроки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
		
	КонецЦикла;

	ЧтениеТекста.Закрыть();
	
	// Заполняем значения счетов:
	Для каждого Счет Из СписокСчетов Цикл
		
		Для каждого СтрокаВыписки Из Счет.СтрокиСчета Цикл
			СтрокаВыписки.НомерСчета = Счет.ОписаниеСчета;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВыписки;
	
КонецФункции

Процедура ЗаписатьЗначенияЯчеекВСтрокуВыписки(ТекущаяСтрокаВыписки, СписокКолонок, ОчищатьСтроковыеЗначенияКолонок = Истина) 
	
	// Заполняем значения строки выписки из текстов ячеек
	ТекущаяСтрокаВыписки.ДатаОбработки      = ДатаИзЧислаИМесяцаСтрокой(СписокКолонок[2].СтроковоеЗначение);
	ТекущаяСтрокаВыписки.ДатаОперации       = ДатаИзЧислаИМесяцаСтрокой(СписокКолонок[1].СтроковоеЗначение, Год(ТекущаяСтрокаВыписки.ДатаОбработки));
	ТекущаяСтрокаВыписки.НомерОперации      = СокрЛП(СписокКолонок[3].СтроковоеЗначение);
	ТекущаяСтрокаВыписки.СодержаниеОперации = СписокКолонок[4].СтроковоеЗначение;
	
	// Сначала определяем сумму в валюте счета - она содержит знак операции
	ТекущаяСтрокаВыписки.СуммаВВалютеСчета = СуммаИзСтрокиСбербанка(СписокКолонок[6].СтроковоеЗначение);
	ТекущаяСтрокаВыписки.СуммаВВалютеОперации = СуммаИзСтрокиСбербанка(СписокКолонок[5].СтроковоеЗначение);
	// В сумме в валюте операции не указывается символ CR, потому знак устанавливаем из суммы в валюте счета
	Если ТекущаяСтрокаВыписки.СуммаВВалютеСчета > 0 И ТекущаяСтрокаВыписки.СуммаВВалютеОперации < 0 Тогда
		ТекущаяСтрокаВыписки.СуммаВВалютеОперации = -ТекущаяСтрокаВыписки.СуммаВВалютеОперации;
	КонецЕсли;
	
	 
	
	Если ОчищатьСтроковыеЗначенияКолонок Тогда
		// Очищаем строковые значения колонок
		Для каждого СтрокаКолонки Из СписокКолонок Цикл
			СтрокаКолонки.СтроковоеЗначение = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗаголовкиКолонокВСтрокуВыписки(СтрокаЗаголовков, СписокКолонок) 
	
	Для каждого Колонка Из СписокКолонок Цикл
		Колонка.СтроковоеЗначение = СтрЗаменить(Колонка.СтроковоеЗначение, "- ", "");
	КонецЦикла;
	
	СтрокаЗаголовков.НомерСчета         = СписокКолонок[0].СтроковоеЗначение;
	СтрокаЗаголовков.ДатаОперации       = СписокКолонок[1].СтроковоеЗначение;
	СтрокаЗаголовков.ДатаОбработки      = СписокКолонок[2].СтроковоеЗначение;
	СтрокаЗаголовков.НомерОперации      = СписокКолонок[3].СтроковоеЗначение;
	
	СтрокаЗаголовков.ВалютаОперацииСтрокой = НСтр("ru='Валюта операции'");
	СтрокаЗаголовков.СодержаниеОперации    = СписокКолонок[4].СтроковоеЗначение;
	СтрокаЗаголовков.СуммаВВалютеОперации  = СписокКолонок[5].СтроковоеЗначение;
	СтрокаЗаголовков.СуммаВВалютеСчета     = СписокКолонок[6].СтроковоеЗначение;
	
	// Очищаем строковые значения колонок
	Для каждого СтрокаКолонки Из СписокКолонок Цикл
		СтрокаКолонки.СтроковоеЗначение = "";
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область ЧтениеВыпискиИзТабличногоДокумента

Функция НоваяТаблицаАналитики() 

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыАналитик"));
	Результат.Колонки.Добавить("Значение", );
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КлючевоеСлово", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;

КонецФункции

Функция ЗначениеПоказателяИзТекста(ЗначениеСтрокой, ТипЗначенияПоказателя, КлючПоказателя, ЭтоПоступление) 

	Если Не ЗначениеЗаполнено(ЗначениеСтрокой) Тогда
		Возврат ТипЗначенияПоказателя.ПривестиЗначение(Неопределено);
	КонецЕсли;
	
	// Примитивные типы получаем из предварительно обработанной строки
	Если ТипЗначенияПоказателя.СодержитТип(Тип("Строка")) Тогда
		
		Возврат ЗначениеСтрокой;
		
	ИначеЕсли ТипЗначенияПоказателя.СодержитТип(Тип("Число")) Тогда
		
		Возврат ЧислоИзТекстаДоПервойБуквы(СокрЛП(ЗначениеСтрокой));
		
	ИначеЕсли ТипЗначенияПоказателя.СодержитТип(Тип("Дата")) Тогда
		
		Возврат ДатаИзСтроки(СокрЛП(ЗначениеСтрокой));
		
	ИначеЕсли ТипЗначенияПоказателя.СодержитТип(Тип("Булево")) Тогда
		
		Возврат БулевоИзСтроки(СокрЛП(ЗначениеСтрокой));
		
	Иначе
		
		// Ссылочные типы получаем из указанных текстов с учетом соответствий
		Возврат СсылкаИзСтроки(СокрЛП(ЗначениеСтрокой), ТипЗначенияПоказателя, КлючПоказателя, ЭтоПоступление);
		
	КонецЕсли;
	
	Возврат ЗначениеСтрокой;

КонецФункции

Функция СтрокаНастройкиПоказателя(Настройки, Ключ) 

	Возврат Настройки.Найти(Ключ, "КлючПоказателя");

КонецФункции

Процедура УстановитьЗначениеВСтрокеВыписки(СтрокаВыписки, КлючПоказателя, НастройкиЧтения, ТабличныйДокумент) 
	
	ЗначениеИПредставление = ЗначениеИПредставлениеПоказателя(СтрокаВыписки, КлючПоказателя, НастройкиЧтения, ТабличныйДокумент);
	СтрокаВыписки[КлючПоказателя]                   = ЗначениеИПредставление.Значение;
	
	Если КлючПоказателя <> "Комментарий" Тогда
		
		СтрокаВыписки[КлючПоказателя + "КлючевоеСлово"]    = ЗначениеИПредставление.КлючевоеСлово;
		
		ДобавитьПредставление = КлючПоказателя <> "ОписаниеОперации"
			И Не ТипЗнч(ЗначениеИПредставление.Значение) = Тип("Дата")
			И Не ТипЗнч(ЗначениеИПредставление.Значение) = Тип("Число");
			
		Если ДобавитьПредставление И ЗначениеЗаполнено(ЗначениеИПредставление.Представление) Тогда
			СтрокаВыписки[КлючПоказателя + "Представление"] = ЗначениеИПредставление.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеИПредставлениеПоказателя(СтрокаВыписки, КлючПоказателя, НастройкиЧтения, ТабличныйДокумент) 

	Результат = Новый Структура("Значение, Представление, КлючевоеСлово", Неопределено, "", "");
	
	НастройкаПокзателя = СтрокаНастройкиПоказателя(НастройкиЧтения, КлючПоказателя);
	Если НастройкаПокзателя = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоПоступление = СтрокаВыписки.СуммаПоступления <> 0;
	Если Не ЗначениеЗаполнено(НастройкаПокзателя.ПоложениеПоказателя) Тогда
		// Ячейка для показателя не задана.
		
		// Приведем пустое значение к нужному типу
		
		Результат.Значение = ЗначениеПоказателяИзТекста("", НастройкаПокзателя.ТипЗначенияПоказателя, НастройкаПокзателя.КлючПоказателя, ЭтоПоступление);
		Возврат Результат;
		
	КонецЕсли;
		
	// Получаем текстовое представление значения показателя
	Результат.КлючевоеСлово = ТекстПоказателяЯчеекПоНомеруСтроки(СтрокаВыписки.НомерСтрокиИсходника, НастройкаПокзателя.ОбластиПоказателя, ТабличныйДокумент);
	
	Если ЗначениеЗаполнено(НастройкаПокзателя.ТекстПоследнегоЗначения) 
		И НастройкаПокзателя.ТекстПоследнегоЗначения = Результат.КлючевоеСлово
		И НастройкаПокзателя.ЭтоПоступление = ЭтоПоступление Тогда
		// текстовое представление совпадает с последним полученным
		Результат.Значение      = НастройкаПокзателя.ПоследнееЗначениеПоказателя;
	Иначе
		
		Результат.Значение      = ЗначениеПоказателяИзТекста(Результат.КлючевоеСлово, НастройкаПокзателя.ТипЗначенияПоказателя, НастройкаПокзателя.КлючПоказателя, СтрокаВыписки.СуммаПоступления <> 0);
		
		// Кешируем последнее значение и представление показателя на случай, когда его значение общее для всей таблицы 
		НастройкаПокзателя.ТекстПоследнегоЗначения     = Результат.КлючевоеСлово;
		НастройкаПокзателя.ПоследнееЗначениеПоказателя = Результат.Значение;
		НастройкаПокзателя.ЭтоПоступление              = ЭтоПоступление;
		
	КонецЕсли;
	
	Результат.Представление = ?(ЗначениеЗаполнено(Результат.Значение), Строка(Результат.Значение), Результат.КлючевоеСлово);
		
	Возврат Результат;
	
КонецФункции

Функция НайтиОперацию(Дата, Кошелек, СуммаПоступления, СуммаСписания) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Кошелек", Кошелек);
	Запрос.УстановитьПараметр("СуммаПоступления", СуммаПоступления);
	Запрос.УстановитьПараметр("СуммаСписания", СуммаСписания);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыОпераций.Операция,
	|ВЫБОР
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.Расход
	|		ТОГДА 9
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.Доход
	|		ТОГДА 6
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.УниверсальнаяОперация
	|		ТОГДА 30
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.Перемещение
	|		ТОГДА 12
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.МыДалиВДолг
	|		ТОГДА 18
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.НамВернулиДолг
	|		ТОГДА 21
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.МыВзялиВДолг
	|		ТОГДА 24
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.МыВернулиДолг
	|		ТОГДА 27
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.ОбменВалюты
	|		ТОГДА 15
	|	КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.ВводИзменениеОстатка
	|		ТОГДА 33
	|	ИНАЧЕ 0
	|КОНЕЦ + ВЫБОР
	|	КОГДА ЖурналДокументовОбщийЖурналДокументов.Проведен
	|			ИЛИ ЖурналДокументовОбщийЖурналДокументов.ЭтоШаблон
	|		ТОГДА 1
	|	КОГДА ЖурналДокументовОбщийЖурналДокументов.ПометкаУдаления
	|		ТОГДА 2
	|	ИНАЧЕ 0
	|КОНЕЦ КАК ИконкаОперации
	|ИЗ
	|	РегистрСведений.ОбъектыОпераций КАК ОбъектыОпераций
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ОбщийЖурналДокументов КАК ЖурналДокументовОбщийЖурналДокументов
	|	ПО ЖурналДокументовОбщийЖурналДокументов.Ссылка = ОбъектыОпераций.Операция
	|ГДЕ
	|	ОбъектыОпераций.Дата МЕЖДУ НачалоПериода(&Дата, День) И КонецПериода(&Дата, День)
	|	И ОбъектыОпераций.ПредметУчета = &Кошелек
	|	И (&СуммаПоступления <> 0 И ОбъектыОпераций.СуммаПоступления = &СуммаПоступления
	|		ИЛИ &СуммаСписания <> 0 И ОбъектыОпераций.СуммаСписания = &СуммаСписания)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Структура("Операция, ИконкаОперации", Неопределено, 0);
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
 
Функция МассивОбластейПоказателя(ПоложениеПоказателя, КонечнаяОбласть, ТабличныйДокументВыписки)

	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПоложениеПоказателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивНачалОбластей  = СтрРазделить(ПоложениеПоказателя, ";");
	МассивКонцовОбластей = СтрРазделить(КонечнаяОбласть, ";");
	Для Счетчик = 0 По МассивНачалОбластей.Количество() - 1 Цикл
		
		Результат.Добавить(ТабличныйДокументВыписки.Область(МассивНачалОбластей[Счетчик] + ":" + МассивКонцовОбластей[Счетчик]));
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ТекстПоказателяЯчеекПоНомеруСтроки(НомерСтроки, МассивОбластейПоказателя, ТабличныйДокументВыписки)

	ТекстПоказателя = "";
	
	Для каждого Область Из МассивОбластейПоказателя Цикл
		
		Если Область.Лево = Область.Право И Область.Верх = Область.Низ Тогда
			ТекстПоказателя = ТекстПоказателя + ?(ТекстПоказателя = "", "", " ") + Область.Текст;
		Иначе
			
			ТекстПоказателя = ТекстПоказателя + ?(ТекстПоказателя = "", "", " ") 
						+ ТабличныйДокументВыписки.Область(НомерСтроки, Область.Лево).Текст;
		КонецЕсли;
		
	КонецЦикла;

	Возврат СокрЛП(ТекстПоказателя);
	
КонецФункции

Процедура ДополнитьТекстСтрокиВыписки(НомерСтроки, СтрокаВыписки, ТабличныйДокумент, ОбластьТаблицы, ПропускатьПустыеКолонки) 
	
	Если СтрокаВыписки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерКолонки = ОбластьТаблицы.Лево По ОбластьТаблицы.Право Цикл
		ТекстЯчейки = СокрЛП(ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).Текст);
		Если Не ЗначениеЗаполнено(ТекстЯчейки) И ПропускатьПустыеКолонки Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВыписки.ТекстСтрокиВыписки = СтрокаВыписки.ТекстСтрокиВыписки + ?(СтрокаВыписки.ТекстСтрокиВыписки = "", "", " | ") 
			+ ТекстЯчейки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКошелекИСтатьиПоСсылкеНаОперацию(СтрокаОперации)

	Если СтрокаОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) Тогда
		
		МетаданныеОперации = СтрокаОперации.СсылкаНаОперацию.Метаданные();
		СтрокаОперации.ВидОперации              = МетаданныеОперации.Имя;
		СтрокаОперации.ВидОперацииПредставление = МетаданныеОперации.Синоним;
		
		// Проверяем и заменяем статьи и аналитику
		Если СтрокаОперации.ВидОперации = "Доход" Тогда
			
			ТабличныеЧасти = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОперации.СсылкаНаОперацию, "Доходы,АналитикаДокумента");
			ТаблицаДокумента = ТабличныеЧасти.Доходы.Выгрузить();
			
			ТаблицаСсылок = ТаблицаДокумента.Скопировать(, "Кошелек");
			ТаблицаСсылок.Свернуть("Кошелек");
			Если ТаблицаСсылок.Количество() = 1 Тогда
				СтрокаОперации.Кошелек = ТаблицаСсылок[0].Кошелек;
			КонецЕсли;
			
			ТаблицаСсылок = ТаблицаДокумента.Скопировать(, "СтатьяДохода");
			ТаблицаСсылок.Свернуть("СтатьяДохода");
			Если ТаблицаСсылок.Количество() = 1 Тогда
				СтрокаОперации.СтатьяДолг = ТаблицаСсылок[0].СтатьяДохода;
			КонецЕсли;
			
			СтрокаОперации.ВидОперацииИконка = 6 + ?(СтрокаОперации.СсылкаНаОперацию.Проведен, 1, ?(СтрокаОперации.СсылкаНаОперацию.ПометкаУдаления, 2, 0));
			
		ИначеЕсли СтрокаОперации.ВидОперации = "Расход" Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОперации.СсылкаНаОперацию, "КошелекДолг,Расходы,АналитикаДокумента");
			СтрокаОперации.Кошелек = РеквизитыДокумента.КошелекДолг;
			
			ТаблицаДокумента = РеквизитыДокумента.Расходы.Выгрузить();
			
			ТаблицаСсылок = ТаблицаДокумента.Скопировать(, "СтатьяРасходаИмущество");
			ТаблицаСсылок.Свернуть("СтатьяРасходаИмущество");
			Если ТаблицаСсылок.Количество() = 1 Тогда
				СтрокаОперации.СтатьяДолг = ТаблицаСсылок[0].СтатьяРасходаИмущество;
			КонецЕсли;
			
			СтрокаОперации.ВидОперацииИконка = 9 + ?(СтрокаОперации.СсылкаНаОперацию.Проведен, 1, ?(СтрокаОперации.СсылкаНаОперацию.ПометкаУдаления, 2, 0));
			
		ИначеЕсли СтрокаОперации.ВидОперации = "Перемещение" Или СтрокаОперации.ВидОперации = "ОбменВалюты" Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОперации.СсылкаНаОперацию, "КошелекОткуда,КошелекКуда,АналитикаДокумента");
			Если СтрокаОперации.СуммаПоступления <> 0 Тогда
				СтрокаОперации.Кошелек    = РеквизитыДокумента.КошелекКуда;
				СтрокаОперации.СтатьяДолг = РеквизитыДокумента.КошелекОткуда;
			Иначе
				СтрокаОперации.Кошелек    = РеквизитыДокумента.КошелекОткуда;
				СтрокаОперации.СтатьяДолг = РеквизитыДокумента.КошелекКуда;
			КонецЕсли;
			
			СтрокаОперации.ВидОперацииИконка = ?(СтрокаОперации.ВидОперации = "Перемещение", 12, 15)
						+ ?(СтрокаОперации.СсылкаНаОперацию.Проведен, 1, ?(СтрокаОперации.СсылкаНаОперацию.ПометкаУдаления, 2, 0));
			
		ИначеЕсли СтрокаОперации.ВидОперации = "МыВзялиВДолг" Или СтрокаОперации.ВидОперации = "МыВернулиДолг" Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОперации.СсылкаНаОперацию, "Кошелек,Кредит,АналитикаДокумента");
			СтрокаОперации.Кошелек    = РеквизитыДокумента.Кошелек;
			СтрокаОперации.СтатьяДолг = РеквизитыДокумента.Кредит;
			
			СтрокаОперации.ВидОперацииИконка = ?(СтрокаОперации.ВидОперации = "МыВзялиВДолг", 27, 24)
						+ ?(СтрокаОперации.СсылкаНаОперацию.Проведен, 1, ?(СтрокаОперации.СсылкаНаОперацию.ПометкаУдаления, 2, 0));
			
		ИначеЕсли СтрокаОперации.ВидОперации = "МыДалиВДолг" Или СтрокаОперации.ВидОперации = "НамВернулиДолг" Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОперации.СсылкаНаОперацию, "Кошелек,Долг,АналитикаДокумента");
			СтрокаОперации.Кошелек    = РеквизитыДокумента.Кошелек;
			СтрокаОперации.СтатьяДолг = РеквизитыДокумента.Долг;
			
			СтрокаОперации.ВидОперацииИконка = ?(СтрокаОперации.ВидОперации = "МыДалиВДолг", 18, 21)
						+ ?(СтрокаОперации.СсылкаНаОперацию.Проведен, 1, ?(СтрокаОперации.СсылкаНаОперацию.ПометкаУдаления, 2, 0));
			
		ИначеЕсли СтрокаОперации.ВидОперации = "УниверсальнаяОперация" Тогда
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОперации.СсылкаНаОперацию, "Доходы,Расходы,Перемещения,АналитикаДокумента");
			
			КошелекОперации = Неопределено;
			СтатьяОперации  = Неопределено;
			
			Выборка = РеквизитыДокумента.Доходы.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если КошелекОперации = Неопределено И ЗначениеЗаполнено(Выборка.ОбъектУчета)
					И ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
					КошелекОперации = Выборка.ОбъектУчета;
				КонецЕсли;
				
				Если СтатьяОперации = Неопределено И ЗначениеЗаполнено(Выборка.СтатьяДохода) Тогда
					СтатьяОперации = Выборка.СтатьяДохода;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КошелекОперации) И ЗначениеЗаполнено(СтатьяОперации) Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(КошелекОперации) Или Не ЗначениеЗаполнено(СтатьяОперации) Тогда
				
				Выборка = РеквизитыДокумента.Расходы.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если КошелекОперации = Неопределено И ЗначениеЗаполнено(Выборка.ОбъектУчета)
						И ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
						КошелекОперации = Выборка.ОбъектУчета;
					КонецЕсли;
					
					Если СтатьяОперации = Неопределено И ЗначениеЗаполнено(Выборка.СтатьяРасхода) Тогда
						СтатьяОперации = Выборка.СтатьяРасхода;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(КошелекОперации) И ЗначениеЗаполнено(СтатьяОперации) Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(КошелекОперации) Или Не ЗначениеЗаполнено(СтатьяОперации) Тогда
				
				Выборка = РеквизитыДокумента.Перемещения.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если КошелекОперации = Неопределено И ЗначениеЗаполнено(Выборка.ОбъектУчетаКт)
						И ТипЗнч(Выборка.ОбъектУчетаКт) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
						КошелекОперации = Выборка.ОбъектУчетаКт;
					КонецЕсли;
					
					Если СтатьяОперации = Неопределено И ЗначениеЗаполнено(Выборка.ОбъектУчетаДт) Тогда
						СтатьяОперации = Выборка.ОбъектУчетаДт;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(КошелекОперации) И ЗначениеЗаполнено(СтатьяОперации) Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаОперации.Кошелек    = КошелекОперации;
			СтрокаОперации.СтатьяДолг = СтатьяОперации;
			СтрокаОперации.ВидОперацииИконка = 30 + ?(СтрокаОперации.СсылкаНаОперацию.Проведен, 1, ?(СтрокаОперации.СсылкаНаОперацию.ПометкаУдаления, 2, 0));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ПреобразованияТекстов

Функция ФорматТекстаДаты(Текст) 

	Результат   = "";
	Текст = СокрЛП(СтрЗаменить(Текст, "  ", ""));
	ДлинаТекста = СтрДлина(Текст);
	
	Для Счетчик = 1 По ДлинаТекста Цикл
		
		Символ = Сред(Текст, Счетчик, 1);
		Если Найти("0123456789", Символ) > 0 Тогда
			Результат = Результат + "9";
		ИначеЕсли Найти(" ./\-", Символ) > 0 Тогда
			Результат = Результат + ".";
		ИначеЕсли Символ = ":" Тогда
			Результат = Результат + ":";
		Иначе
			Результат = Результат + "X";
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция НомерГодаИзТекста(Текст) 

	Результат = 0;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат Результат;
	ИначеЕсли СтрДлина(Текст) = 2 Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло("20" + Текст);
	Иначе
		Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Текст);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(Результат), Результат, 0);
	
КонецФункции
 

Функция ДатаИзЧислаИМесяцаСтрокой(Знач Текст, Знач Год = 0) 

	Результат = Дата(1,1,1);
	
	ЧислоСтрокой = "";
	МесяцСтрокой = "";
	ГодСтрокой   = "";
	
	Текст = Врег(СокрЛП(Текст));
	ДлинаТекста = СтрДлина(Текст);
	
	ЧислоСтрокой = Лев(Текст, 2);
	МесяцСтрокой = Сред(Текст, 3, 3);
	Если ДлинаТекста > 5 Тогда
		ГодСтрокой = Сред(Текст, 6);
	КонецЕсли;
	
	Число = ?(ЗначениеЗаполнено(ЧислоСтрокой) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧислоСтрокой), Число(ЧислоСтрокой), 0);
	
	Если МесяцСтрокой = "ЯНВ" Тогда
		Месяц = 1;
	ИначеЕсли МесяцСтрокой = "ФЕВ" Тогда
		Месяц = 2;
	ИначеЕсли МесяцСтрокой = "МАР" Тогда
		Месяц = 3;
	ИначеЕсли МесяцСтрокой = "АПР" Тогда
		Месяц = 4;
	ИначеЕсли МесяцСтрокой = "МАЙ" Тогда
		Месяц = 5;
	ИначеЕсли МесяцСтрокой = "ИЮН" Тогда
		Месяц = 6;
	ИначеЕсли МесяцСтрокой = "ИЮЛ" Тогда
		Месяц = 7;
	ИначеЕсли МесяцСтрокой = "АВГ" Тогда
		Месяц = 8;
	ИначеЕсли МесяцСтрокой = "СЕН" Тогда
		Месяц = 9;
	ИначеЕсли МесяцСтрокой = "ОКТ" Тогда
		Месяц = 10;
	ИначеЕсли МесяцСтрокой = "НОЯ" Тогда
		Месяц = 11;
	ИначеЕсли МесяцСтрокой = "ДЕК" Тогда
		Месяц = 12;
	Иначе
		Месяц = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГодСтрокой) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодСтрокой) Тогда
		Год = Число(?(СтрДлина(ГодСтрокой) = 2, "20" + ГодСтрокой, ГодСтрокой));
	Иначе
		Год = ?(Год = 0, ?(Число > 0, Год(ТекущаяДатаСеанса()), 1), Год);
	КонецЕсли;
	
	Попытка
		Результат = Дата(Год, Макс(1, Месяц), Макс(1, Число));
	Исключение
		Результат = Дата(1,1,1);
	КонецПопытки; 
	
	Возврат Результат;

КонецФункции

Функция СуммаИзСтрокиСбербанка(Знач Текст) 

	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат 0;
	КонецЕсли;
	
	Текст = СокрЛП(Текст);
	
	Если Прав(Текст, 2) = "CR" Тогда
		Коэффициент = 1;
		Текст = Сред(Текст, 1, СтрДлина(Текст) - 2);
	Иначе
		Коэффициент = -1;
	КонецЕсли;
	
	ТекстПроверки = СтрЗаменить(Текст, ".", " ");
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстПроверки, , Ложь) Тогда
		Возврат Коэффициент * Число(Текст);
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

// Предполагается, что в строке содержится дата, или дата + время
Функция ДатаИзСтроки(Знач Текст) 

	Текст = СокрЛП(Текст);
	Если ПустаяСтрока(Текст) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	Результат = ТипДата.ПривестиЗначение(Текст);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ФорматТекстаДаты = ФорматТекстаДаты(Текст);
	
	// Проверяем на соответствие особым/нестандартным форматам
	Если ФорматТекстаДаты = "99XXX" Или ФорматТекстаДаты = "99XXX99" Тогда
		Результат = ДатаИзЧислаИМесяцаСтрокой(Текст);
		Если ЗначениеЗаполнено(Результат) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Стандартные формы записи даты и времени
	Год     = 0;
	Число   = 0;
	Месяц   = 0;
	Час     = 0;
	Минута  = 0;
	Секунда = 0;
	ВДатеЕстьВремя = СтрНайти(ФорматТекстаДаты, ":9") > 1;
	
	МассивСлов = СтрРазделить(ФорматТекстаДаты, ".");
	Если МассивСлов.Количество() < 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если МассивСлов.Количество() > 0 И ВДатеЕстьВремя Тогда
		МассивВремени = СтрРазделить(МассивСлов[МассивСлов.Количество() - 1], ":");
		МассивСлов.Удалить(МассивСлов.Количество() - 1);
	КонецЕсли;
	
	ТекстГода = "";
	ТекстМесяца = "";
	ТекстДня = "";
	
	Если МассивСлов.Количество() = 2 Тогда
		
		Если Найти(МассивСлов[0], "X") = 1 Тогда
			// старый формат сбера "МЕС2000"
			ТекстМесяца = Лев(Текст, СтрДлина(МассивСлов[0]));
			ТекстГода   = Сред(Текст, СтрДлина(МассивСлов[0]) + 2);
			
		ИначеЕсли СтрДлина(МассивСлов[1] = 4) И Найти(МассивСлов[1], "9") = 1 Тогда
			// номер месяца и год
			ТекстМесяца = Лев(Текст, СтрДлина(МассивСлов[0]));
			ТекстГода   = Сред(Текст, СтрДлина(МассивСлов[0]) + 2);
			
		Иначе
			// дата и месяц без указания года
			ТекстДня     = Лев(Текст, СтрДлина(МассивСлов[0]));
			ТекстМесяца  = Сред(Текст, СтрДлина(МассивСлов[0]) + 2);
		КонецЕсли;
		
	ИначеЕсли МассивСлов.Количество() = 3 Тогда
		
		ПозицияТочки1 = СтрДлина(МассивСлов[0]) + 1;
		ПозицияТочки2 = ПозицияТочки1 + СтрДлина(МассивСлов[1]) + 1;
		
		Если СтрДлина(МассивСлов[0]) = 4 Тогда
			// год, месяц, день
			ТекстГода = Лев(Текст, 4);
			ТекстМесяца = Сред(Текст, 6, СтрДлина(МассивСлов[1]));
			ТекстДня    = Сред(Текст, ПозицияТочки2 + 1, СтрДлина(МассивСлов[2]));
		Иначе
			// число, месяц, день
			ТекстДня    = Лев(Текст, СтрДлина(МассивСлов[0]));
			ТекстМесяца = Сред(Текст, ПозицияТочки1 + 1, СтрДлина(МассивСлов[1]));
			ТекстГода   = Сред(Текст, ПозицияТочки2 + 1, СтрДлина(МассивСлов[2]));
		КонецЕсли;
		
	КонецЕсли;
	 
	Число        = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекстДня);
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекстМесяца) Тогда
		Месяц = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекстМесяца);
	Иначе
		Месяц = НомерИзИмениМесяца(ТекстМесяца);
	КонецЕсли;
	Год          = НомерГодаИзТекста(ТекстГода);
	
	Если ВДатеЕстьВремя И МассивВремени.Количество() > 1 Тогда
		
		ПозицияТочки = 0;
		Для каждого Слово Из МассивСлов Цикл
			ПозицияТочки = ПозицияТочки + СтрДлина(Слово) + 1;
		КонецЦикла;
		
		Час     = Сред(Текст, ПозицияТочки + 1, СтрДлина(МассивВремени[0]));
		
		ПозицияТочки2 = ПозицияТочки + 1 + СтрДлина(МассивВремени[0]);
		Минута  = Сред(Текст, ПозицияТочки2 + 1, СтрДлина(МассивВремени[1]));
		
		Если МассивВремени.Количество() > 2 Тогда
			ПозицияТочки3 = ПозицияТочки2 + 1 + СтрДлина(МассивВремени[1]);
			Секунда  = Сред(Текст, ПозицияТочки3 + 1, СтрДлина(МассивВремени[2]));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Год = 0 И Месяц = 0 И Число = 0 И Час = 0 И Минута = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Год      = ?(Год = 0, Год(ТекущаяДатаСеанса()), Год);
	Месяц    = Макс(Месяц, 1);
	Число    = Макс(Число, 1);
	
	Попытка
		//из текста могли быть получены недопустимые значения частей даты, 
		//потому преобразование осуществляется через попытку-исключение
		Результат = Дата(Год, Месяц, Число, Час, Минута, Секунда);
	Исключение
		Результат = Дата(1,1,1);
	КонецПопытки; 
	
	Возврат Результат;
	

КонецФункции

// Выделяет из параметра Текст только цифры и разделители десятичных и дробных частей, до первой встреченной буквы
//Возвращает число, полученное из набора цифр с учетом знака
//	
Функция ЧислоИзТекстаДоПервойБуквы(Знач Текст) 
	
	ИсходнаяСтрока = СокрЛП(Текст);
	ПодготовленнаяСтрока = "";
	ЗнакОтрицательный  = Ложь;
	ДлинаТекста = СтрДлина(ИсходнаяСтрока);
	
	// допустимые символы:
	// цифра, знак "-" или "(" вначале числа, "," или ".", закрывающая скобка, пробел или неразрывный пробел.
	//	При обнаружении прочих символов считывание числа прерывается.
	
	Для НомерСимвола = 1 По ДлинаТекста Цикл
		
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Символ = Сред(ИсходнаяСтрока, НомерСимвола, 1);
		
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			
			// Игнорируем
			Продолжить;
			
		ИначеЕсли КодСимвола = 45 Или КодСимвола = 40 Тогда // Минус или открывающая скобка.
			
			Если Не ПустаяСтрока(ПодготовленнаяСтрока) Тогда
				// знак или скобка не допускаяется внутри числа
				Прервать;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
			ПодготовленнаяСтрока = "-";
			Продолжить;
			
		ИначеЕсли КодСимвола = 41 Тогда // Закрывающая скобка.
			
			Если Не ЗнакОтрицательный Или ПодготовленнаяСтрока = "" Тогда // Не было открывающей скобки или нет числа.
				Прервать;
			КонецЕсли;
			
		ИначеЕсли СтрНайти("0123456789,.", Символ) = 0 Тогда // это не цифра и не разделитель
			
			Прервать;
			
		КонецЕсли;
		
		ПодготовленнаяСтрока = ПодготовленнаяСтрока + Символ;
		
	КонецЦикла;
	
	Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ПодготовленнаяСтрока);
	
	Возврат ?(ЗначениеЗаполнено(Результат), Результат, 0);
	
КонецФункции

Функция НомерИзИмениМесяца(Знач МесяцСтрокой) 

	МесяцСтрокой = Нрег(СокрЛП(МесяцСтрокой));
	Если СтрНайти(Нрег("Янв,январь,января,Jan,January"), МесяцСтрокой) > 0 Тогда
		Возврат 1;
	ИначеЕсли СтрНайти(Нрег("фев,февраль,февраля,Feb,February"), МесяцСтрокой) > 0 Тогда
		Возврат 2;
	ИначеЕсли СтрНайти(Нрег("мар,март,марта,Mar,March"), МесяцСтрокой) > 0 Тогда
		Возврат 3;
	ИначеЕсли СтрНайти(Нрег("апр,апрель,апреля,Apr,April"), МесяцСтрокой) > 0 Тогда
		Возврат 4;
	ИначеЕсли СтрНайти(Нрег("май,мая,May"), МесяцСтрокой) > 0 Тогда
		Возврат 5;
	ИначеЕсли СтрНайти(Нрег("июн,июнь,июня,Jun,June"), МесяцСтрокой) > 0 Тогда
		Возврат 6;
	ИначеЕсли СтрНайти(Нрег("июл,июль,июля,Jul,July"), МесяцСтрокой) > 0 Тогда
		Возврат 7;
	ИначеЕсли СтрНайти(Нрег("авг,август,августа,Aug,Augustus"), МесяцСтрокой) > 0 Тогда
		Возврат 8;
	ИначеЕсли СтрНайти(Нрег("сен,сентябрь,сентября,September,Sep"), МесяцСтрокой) > 0 Тогда
		Возврат 9;
	ИначеЕсли СтрНайти(Нрег("окт,октябрь,октября,Oct,October"), МесяцСтрокой) > 0 Тогда
		Возврат 10;
	ИначеЕсли СтрНайти(Нрег("ноя,ноябрь,ноября,Nov,November"), МесяцСтрокой) > 0 Тогда
		Возврат 11;
	ИначеЕсли СтрНайти(Нрег("дек,декабрь,декабря,Dec,December"), МесяцСтрокой) > 0 Тогда
		Возврат 12;
	Иначе
		Возврат 0;
	КонецЕсли;
	 

КонецФункции

Функция БулевоИзСтроки(Знач Текст) 

	Текст = НРег(СокрЛП(Текст));
	Если СтрНайти("нет,ложь,пусто,false,no", Текст) > 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Не ПустаяСтрока(Текст);
	КонецЕсли;

КонецФункции

Функция СсылкаИзСтроки(Знач Текст, Знач ТипСсылки, КлючПоказателя, ЭтоПоступление) 

	// Выполняется поиск по ключевому слову:
	ИскомыеОбъекты = РегистрыСведений.КлючевыеСловаОбъектов.СписокОбъектовПоКлючевомуСлову(Текст, ТипСсылки);
	Для каждого СтрокаОбъекта Из ИскомыеОбъекты Цикл
		Если ЭтоПоступление И ТипЗнч(СтрокаОбъекта.Объект) <> Тип("СправочникСсылка.СтатьиРасходов")
			Или Не ЭтоПоступление И ТипЗнч(СтрокаОбъекта.Объект) <> Тип("СправочникСсылка.СтатьиДоходов") Тогда
			Возврат СтрокаОбъекта.Объект;
		КонецЕсли;
	КонецЦикла;

	ПустоеЗначение = ТипСсылки.ПривестиЗначение(Неопределено);
	МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ПустоеЗначение));
	Если МетаданныеЗначения <> Неопределено И ОбщегоНазначения.ЭтоСправочник(МетаданныеЗначения) Тогда
		// Для справочника выполняется пописк по наименованию
		Ссылка = Справочники[МетаданныеЗначения.Имя].НайтиПоНаименованию(Текст, Истина, , КлючПоказателя);
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПустоеЗначение;
	
КонецФункции


#КонецОбласти


#КонецОбласти

#КонецЕсли
