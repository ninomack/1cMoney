////////////////////////////////////////////////////////////////////////////////
//Обработка.ИмяОбработки.Форма.ИмяФормы
//  _Назначение_
//  
//Параметры формы:
//  Стандартные параметры формы
//  
////////////////////////////////////////////////////////////////////////////////
&НаСервере 
Перем ВсеРеквизиты;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Значения реквизитов формы
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	ЗаполнитьДеревоРазделов();
	
	Если Параметры.Свойство("ИмяРаздела") И ЗначениеЗаполнено(Параметры.ИмяРаздела) Тогда
		
		ИДСтроки = СтрокаРазделаПоИмени(Параметры.ИмяРаздела);
		Если ИДСтроки <> Неопределено Тогда
			Элементы.ДеревоРазделов.ТекущаяСтрока = ИДСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбрабатыватьНастройкиБИП = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователейКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиентСервер");
		ВерсияБИП = МодульИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки();
		ОбрабатыватьНастройкиБИП = (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБИП, "2.2.1.1") >= 0);
	КонецЕсли;
	
	Если ОбрабатыватьНастройкиБИП Тогда
		
		НастройкиПрограммыПереопределяемый.ИнтернетПоддержкаИСервисыПриСозданииНаСервере(ЭтотОбъект);
		
		УстановитьПривилегированныйРежим(Истина);
		БИПДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если БИПДанныеАутентификации <> Неопределено Тогда
			БИПДанныеАутентификации.Пароль = "";
		КонецЕсли;
		ИнтернетПоддержкаПользователейКлиентСервер.ОтобразитьСостояниеПодключенияИПП(ЭтотОбъект);
		
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(ЭтотОбъект);
		
	КонецЕсли;
	
	ИзменитьВидимостьДопРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	Если ИмяСобытия = "ЗакрытаФормаНастройкиРезервногоКопирования"
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ") Тогда
		
		ОбновитьНастройкиРезервногоКопирования();
		
	ИначеЕсли ИмяСобытия = "ИнтернетПоддержкаПодключена" Или ИмяСобытия = "ИнтернетПоддержкаОтключена" Тогда
		// Обработка подключения Интернет-поддержки
		
		ВведенныеДанныеАутентификации = Параметр;
		Если ВведенныеДанныеАутентификации <> Неопределено Тогда
			ДанныеАутентификации = ВведенныеДанныеАутентификации;
			ОтобразитьСостояниеПодключенияИПП();
		КонецЕсли;
		
		Элементы.ГруппаАдресныйКлассификаторПраваяКолонка.Видимость = ИмяСобытия = "ИнтернетПоддержкаОтключена";
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДеревоРазделовПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.ДеревоРазделов.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Или ДанныеСтроки.Скрыть Тогда
		Элементы.ГруппаСтраницРазделов.ТекущаяСтраница = Элементы.Страница_НетНастроек;
		Возврат;
	КонецЕсли;
	
	Если ТекущийКлючРаздела = Элементы.ДеревоРазделов.ТекущиеДанные.Ключ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКлючРаздела = Элементы.ДеревоРазделов.ТекущиеДанные.Ключ;
	
	Если Не ДанныеСтроки.СодержимоеОбновлено Тогда
		ДанныеСтроки.СодержимоеОбновлено = Истина;
		ОбновитьСодержимоеНастроек(ДанныеСтроки.Ключ);
	КонецЕсли;
	
	ОбновитьВыделенияНаСтранице(Элементы.ДеревоРазделов.ТекущиеДанные.Ключ);
	Если Элементы.ДеревоРазделов.ТекущиеДанные <> Неопределено Тогда
		Элементы.ГруппаСтраницРазделов.ТекущаяСтраница = Элементы[Элементы.ДеревоРазделов.ТекущиеДанные.Ключ];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ТекущийКлючРаздела = "";
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ИзменитьВидимостьРазделов(ДеревоРазделов, Истина);
	Иначе
		ВыполнитьПоискСлов();
	КонецЕсли;
	
	ДеревоРазделовПриАктивизацииСтроки(Элементы.ДеревоРазделов);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ИзменитьВидимостьРазделов(ДеревоРазделов, Истина);
	ОбновитьВыделенияНаСтранице(Элементы.ГруппаСтраницРазделов.ТекущаяСтраница.Имя);
	
КонецПроцедуры


#КонецОбласти


#Область Страница_НастройкиОбщие

&НаКлиенте
Процедура ЗаголовокПрограммыПриИзменении(Элемент)
	ПриИзмененииКонстантыКлиент("ЗаголовокСистемы", НаборКонстант.ЗаголовокСистемы);
	ОбновитьПовторноИспользуемыеЗначения();
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	ПриИзмененииКонстантыКлиент("ИспользоватьДополнительныеРеквизитыИСведения", НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения);
	ОбновитьПовторноИспользуемыеЗначения();
	ИзменитьВидимостьДопРеквизитов(ЭтотОбъект);
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеОтчетыИОбработкиПриИзменении(Элемент)
	ПриИзмененииКонстантыКлиент("ИспользоватьДополнительныеОтчетыИОбработки", НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки);
	ОбновитьПовторноИспользуемыеЗначения();
	ИзменитьВидимостьДопРеквизитов(ЭтотОбъект);
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВидимостьДопРеквизитов(Форма)
	
	Форма.Элементы.СправочникНаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Видимость 
				= Форма.НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	Форма.Элементы.ОткрытьДополнительныеОтчетыИОбработки.Видимость 
				= Форма.НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	
КонецПроцедуры


#КонецОбласти 

#Область Страница_НастройкиПользователя

&НаКлиенте
Процедура НастройкаПриИзменении(Элемент)

	СохранитьНастройкуПользователя(Элемент.Имя);

КонецПроцедуры
 
&НаКлиенте
Процедура ЗапрашиватьПодтверждениеПриЗавершенииПрограммыПриИзменении(Элемент)
	СохранитьНастройкуПользователя("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы");
	СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
КонецПроцедуры

&НаКлиенте
Процедура РазрешеноОткрытиеВнешнихОтчетовИОбработокПриИзменении(Элемент)
	
	ЗаписатьРазрешениеОткрытияВнешнихОбработок();
	
КонецПроцедуры


#КонецОбласти 

#Область Страница_ОбновлениеПрограммы

&НаКлиенте
Процедура ЧасовойПоясПрограммыПриИзменении(Элемент)
	ЗаписатьЧасовойПояс();
КонецПроцедуры

&НаКлиенте
Процедура ЧасовойПоясПрограммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.СписокВыбора.Количество() < 2 Тогда
		ЗагрузитьЧасовыеПояса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПроксиСервераНажатие(Элемент)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'В веб-клиенте параметры прокси-сервера необходимо задавать в настройках браузера.'"));
	Возврат;
#КонецЕсли
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера", Новый Структура("НастройкаПроксиНаКлиенте", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическаяПроверкаОбновленийПриИзменении(Элемент)
	
	МодульПолучениеОбновленийПрограммыКлиент       = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	Если МодульПолучениеОбновленийПрограммыКлиент <> Неопределено Тогда
		МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_АвтоматическаяПроверкаОбновленийПриИзменении(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеНажатие(Элемент)
	
	МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	Если МодульПолучениеОбновленийПрограммыКлиент <> Неопределено Тогда
		МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ДекорацияРасписаниеПроверкиОбновленийНажатие(ЭтотОбъект, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДистрибутиваПлатформыНажатие(Элемент, СтандартнаяОбработка)
	
	МодульПолучениеОбновленийПрограммыКлиент       = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	Если МодульПолучениеОбновленийПрограммыКлиент <> Неопределено Тогда
		МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_КаталогДистрибутиваПлатформыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьОбновлениеИБВЖурналеРегистрацииПриИзменении(Элемент)
	СохранитьЗначениеКонстанты("ДетализироватьОбновлениеИБВЖурналеРегистрации", НаборКонстант.ДетализироватьОбновлениеИБВЖурналеРегистрации);
КонецПроцедуры

&НаКлиенте
Процедура БИППодключатьсяКСерверамВЗонеEuИзменении(Элемент)
	
	МодульИнтернетПоддержкаПользователейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
	МодульИнтернетПоддержкаПользователейКлиент.ИнтернетПоддержкаИСервисы_ПодключатьсяКСерверамВЗонеEuИзменении(
		ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БИПЗагружатьИУстанавливатьИсправленияАвтоматическиПриИзменении(Элемент)
	
	МодульПолучениеОбновленийПрограммыКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ЗагружатьИУстанавливатьИсправленияАвтоматическиПриИзменении(
		ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеУстановкаИсправленийНажатие(Элемент)
	
	МодульПолучениеОбновленийПрограммыКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ДекорацияРасписаниеУстановкаИсправленийНажатие(
		ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

#КонецОбласти 

#Область Страница_Администрирование

&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеПриИзменении(Элемент)
	РегламентныеЗаданияИспользованиеПриИзменении("УдалениеПомеченных");
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияГиперссылкаНажатие(ПрефиксРеквизитов)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Идентификатор", ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"]);
	ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
	
	РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
КонецПроцедуры


#КонецОбласти 

#Область Страница_АдресныйКлассификатор

&НаКлиенте
Процедура АдресныйКлассификаторПриИзменении(Элемент)
	
	АдресныйКлассификаторПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти 

#Область Страница_ОчисткаБазы

&НаКлиенте
Процедура УдалитьИзБазыВсеЗаписи(Команда)
	ЗапросПодтвержденияОчистки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеКромеСправочников(Команда)
	ЗапросПодтвержденияОчистки(Истина);
КонецПроцедуры


#КонецОбласти 



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьВремяТекущегоСеанса(Команда)
	
	ПоказатьПредупреждение(,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Время сеанса: %1
				|На сервере: %2
				|На клиенте: %3
				|
				|Время сеанса - это время сервера,
				|приведенное к часовому поясу клиента.'"),
			Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДЛФ=T"),
			Формат(ДатаСервера(), "ДЛФ=T"),
			Формат(ТекущаяДата(), "ДЛФ=T")));
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОПользователе(Команда)
	
	ПоказатьЗначение(, АвторизованныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВходаПользователей(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУправлениеПолнотекстовымПоиском(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		ИмяОткрываемойФормы = "Обработка.ПолнотекстовыйПоискВДанных.Форма.УправлениеПолнотекстовымПоискомИИзвлечениемТекстов";
		ОткрытьФорму(ИмяОткрываемойФормы, , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхНастроитьРасписание(Команда)
	РегламентныеЗаданияГиперссылкаНажатие("УдалениеПомеченных");
КонецПроцедуры

&НаСервере
Процедура АдресныйКлассификаторПриИзмененииСервер()

	СохранитьЗначениеКонстантыСервер("ИсточникДанныхАдресногоКлассификатора", НаборКонстант.ИсточникДанныхАдресногоКлассификатора);
	УстановитьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ВойтиИлиВыйтиИПП(Команда)
	
	Если ДанныеАутентификации = Неопределено Тогда
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(,ЭтотОбъект);
		
	Иначе
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПриОтветеНаВопросОВыходеИзИнтернетПоддержки", ЭтотОбъект),
			НСтр("ru = 'Логин и пароль для подключения к сервисам Интернет-поддержки пользователей будут удалены из программы.
				|Отключить Интернет-поддержку?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет,
			НСтр("ru = 'Выход из Интернет-поддержки пользователей'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеВТехПоддержку(Команда)
	
	ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВТехПоддержку(
		НСтр("ru = 'Интернет-поддержка пользователей'"),
		НСтр("ru = '<Заполните текст сообщения>'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиСоединенияССервером(Команда)
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодключениеИнтернетПоддержки",
		,
		ЭтотОбъект,
		"",
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистикуСправочников(Команда)
	ОбновитьСтатистикуСправочниковНаСервере();
КонецПроцедуры


// ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки
&НаКлиенте
Процедура КомандаМониторИнтернетПоддержки(Команда)
	
	МодульМониторИнтернетПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МониторИнтернетПоддержкиКлиент");
	Если МодульМониторИнтернетПоддержкиКлиент <> Неопределено Тогда
		МодульМониторИнтернетПоддержкиКлиент.ОткрытьМониторИнтернетПоддержки();
	КонецЕсли;
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки

// ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки
&НаКлиенте
Процедура ОбновлениеПрограммы(Команда)
	
	МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	Если МодульПолучениеОбновленийПрограммыКлиент <> Неопределено Тогда
		МодульПолучениеОбновленийПрограммыКлиент.ОбновитьПрограмму();
	КонецЕсли;
	
КонецПроцедуры
// ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки

// СтандартныеПодсистемы.ОбновлениеВерсииИБ
&НаКлиенте
Процедура ОтложеннаяОбработкаДанных(Команда)
	
	ПараметрыФормы = Новый Структура("ОткрытиеИзПанелиАдминистрирования", Истина);
	ОткрытьФорму(
		"Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОтложенногоОбновленияИБ",
		ПараметрыФормы);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти



#Область СлужебныеПроцедурыИФункции


#Область ОбслуживаниеДереваРазделов
	
&НаСервере
Процедура ЗаполнитьДеревоРазделов()

	ДеревоРазделов.ПолучитьЭлементы().Очистить();
	
	Для каждого Страница Из Элементы.ГруппаСтраницРазделов.ПодчиненныеЭлементы Цикл
		
		Если Страница.Имя = "Страница_НетНастроек" Или Не Страница.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРаздела = ДеревоРазделов.ПолучитьЭлементы().Добавить();
		СтрокаРаздела.Ключ = Страница.Имя;
		СтрокаРаздела.Заголовок = Страница.Заголовок;
		ДополнитьТекстыДляПоиска(СтрокаРаздела.ТекстыДляПоиска, Страница);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстыДляПоиска(ТекстыДляПоиска, Элемент)

	Если Не Элемент.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыДляПоиска = ТекстыДляПоиска + ТекстЭлементаФормы(Элемент);
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("ГруппаФормы") Или ТипЭлемента = Тип("ТаблицаФормы") Тогда
		
		Для каждого ПодчиненыйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			ДополнитьТекстыДляПоиска(ТекстыДляПоиска, ПодчиненыйЭлемент);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЭлементаФормы(Элемент)

	Результат = Строка(Элемент.Заголовок) + "||";
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("КнопкаФормы") Тогда
		Если ЗначениеЗаполнено(Элемент.ИмяКоманды) Тогда
			Результат = Результат + Команды[Элемент.ИмяКоманды].Заголовок + "||"  + Команды[Элемент.ИмяКоманды].Подсказка + "||";
		КонецЕсли;
	ИначеЕсли ТипЭлемента = Тип("ПолеФормы") И ЗначениеЗаполнено(Элемент.ПутьКДанным) Тогда 
		
		Если ВсеРеквизиты = Неопределено Тогда
			ПрочитатьВсеРеквизиты();
		КонецЕсли;
		
		Реквизит = ВсеРеквизиты.Получить(Элемент.ПутьКДанным);
		Если  Реквизит <> Неопределено Тогда
			Результат = Результат + Реквизит.Заголовок + "||";
		КонецЕсли;
		
	Иначе
		Результат = Результат + Элемент.Подсказка + "||";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.РасширеннаяПодсказка.Заголовок) Тогда
		Результат = Результат + Элемент.РасширеннаяПодсказка.Заголовок + "||";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
 

&НаСервере
Процедура ОбновитьСодержимоеНастроек(КлючНастроек)

	Попытка
	
		Выполнить(СтрЗаменить(КлючНастроек, "Страница_", "Подключаемый_") + "Обновить()");
	
	Исключение
	
	КонецПопытки; 

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьРазделов(Узел, Видимость)

	Если ТипЗнч(Узел) = Тип("ДанныеФормыЭлементДерева") Тогда
		Узел.Скрыть = Не Видимость;
	КонецЕсли;
	
	СтрокиУзла = Узел.ПолучитьЭлементы();
	Для каждого Строка Из СтрокиУзла Цикл
		Строка.Скрыть = Не Видимость;
		ИзменитьВидимостьРазделов(Строка, Видимость);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискСлов()

	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаПоиска, " ");
	ПерваяНайденаяСтрока = ВыполнитьРекурсивныйПоиск(ДеревоРазделов, МассивСлов);
	Если ПерваяНайденаяСтрока = Неопределено Тогда
		Элементы.ГруппаСтраницРазделов.ТекущаяСтраница = Элементы.Страница_НетНастроек;
	Иначе
		Элементы.ДеревоРазделов.ТекущаяСтрока = ПерваяНайденаяСтрока;
	КонецЕсли;
	ОбновитьВыделенияНаСтранице(Элементы.ГруппаСтраницРазделов.ТекущаяСтраница.Имя);

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьРекурсивныйПоиск(Узел, МассивСлов)

	ИДСтроки = Неопределено;
	
	СтрокиУзла = Узел.ПолучитьЭлементы();
	Для каждого Строка Из СтрокиУзла Цикл
		
		Строка.Скрыть = Не ТекстСоответствуетПоиску(Строка.ТекстыДляПоиска, МассивСлов);
		Если Не Строка.Скрыть И ИДСтроки = Неопределено Тогда
			ИДСтроки = Строка.ПолучитьИдентификатор();
		КонецЕсли;
		
		ВыполнитьРекурсивныйПоиск(Строка, МассивСлов);
		
		Если Не Строка.Скрыть Тогда
			
			Если ИДСтроки = Неопределено Тогда
				ИДСтроки = Строка.ПолучитьИдентификатор();
			КонецЕсли;
			
			Родитель = Строка.ПолучитьРодителя();
			Если Родитель <> Неопределено И Родитель.Скрыть Тогда
				Родитель.Скрыть = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ИДСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ТекстСоответствуетПоиску(Текст, МассивСлов)

	Найдено = 0;
	ТекстПриведенный = НРег(Текст);
	Для каждого Слово Из МассивСлов Цикл
		
		Если СтрНайти(ТекстПриведенный, НРег(Слово)) = 0 Тогда
			Возврат Ложь;
		Иначе
			Найдено = Найдено + 1;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Найдено = МассивСлов.Количество();
	
КонецФункции

&НаСервере 
Процедура ОбновитьВыделенияНаСтранице(ИмяСтраницы)

	МассивСлов = ?(ПустаяСтрока(СтрокаПоиска), Неопределено, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаПоиска, " "));
	Страница = Элементы[ИмяСтраницы];
	ЦветВыделения = ЦветаСтиля.ФонВыделеннойКнопки;
	ЦветОбычный   = Новый Цвет;
	
	ОбновитьВыделенияРекурсивно(Страница, ЦветВыделения, ЦветОбычный, МассивСлов);

КонецПроцедуры

&НаСервере
Процедура ОбновитьВыделенияРекурсивно(ГруппаФормы, ЦветВыделения, ЦветОбычный, МассивСлов)

	ТипГруппа = Тип("ГруппаФормы");
	
	Для каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		
		Если МассивСлов = Неопределено Тогда
			ЦветГруппы = ЦветОбычный;
		Иначе
			ТекстПоиска = ТекстЭлементаФормы(Элемент);
			ЦветГруппы = ?(ТекстСоответствуетПоиску(ТекстПоиска, МассивСлов), ЦветВыделения, ЦветОбычный);
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = ТипГруппа Тогда
			ОбновитьВыделенияРекурсивно(Элемент, ЦветВыделения, ЦветОбычный, МассивСлов);
		КонецЕсли;
		
		Если ТипЗнч(Элемент.Родитель) = ТипГруппа И Элемент.Родитель.ЦветФона <> ЦветГруппы Тогда
			Элемент.Родитель.ЦветФона = ЦветГруппы;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьВсеРеквизиты()

	ВсеРеквизиты = Новый Соответствие;
	МассивРеквизитов = ЭтотОбъект.ПолучитьРеквизиты();
	Для каждого Реквизит Из МассивРеквизитов Цикл
		Если Реквизит.Имя = "НаборКонстант" Тогда
			Для каждого Константа Из Метаданные.Константы Цикл
				ВсеРеквизиты.Вставить(Реквизит.Имя + "." + Константа.Имя, Новый Структура("Заголовок", Константа.Синоним));
			КонецЦикла;
		Иначе
			ВсеРеквизиты.Вставить(Реквизит.Имя, Реквизит);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СтрокаРазделаПоИмени(ИмяРаздела, Узел = Неопределено)

	Если Узел = Неопределено Тогда
		Узел = ДеревоРазделов;
	КонецЕсли;
	
	СтрокиРазделов = Узел.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из СтрокиРазделов Цикл
		
		Если СтрНайти(Нрег(СтрокаДерева.Ключ), НРег(ИмяРаздела)) > 0 Тогда
			Возврат СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			Результат = СтрокаРазделаПоИмени(ИмяРаздела, СтрокаДерева);
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции


#КонецОбласти 


#Область Страница_НастройкиОбщие

&НаСервере
Процедура Подключаемый_НастройкиОбщиеОбновить()

	ЧасовойПоясПрограммы = ПолучитьЧасовойПоясИнформационнойБазы();
	Если ПустаяСтрока(ЧасовойПоясПрограммы) Тогда
		ЧасовойПоясПрограммы = ЧасовойПояс();
	КонецЕсли;
	Элементы.ЧасовойПоясПрограммы.СписокВыбора.Добавить(ЧасовойПоясПрограммы);
	

КонецПроцедуры

&НаСервере
Процедура ЗаписатьЧасовойПояс()

	Если ЧасовойПоясПрограммы <> ПолучитьЧасовойПоясИнформационнойБазы() Тогда 
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			ОбщегоНазначенияДеньги.ЗаблокироватьИБ();
			УстановитьЧасовойПоясИнформационнойБазы(ЧасовойПоясПрограммы);
			ОбщегоНазначенияДеньги.РазблокироватьИБ();
		Исключение
			ОбщегоНазначенияДеньги.РазблокироватьИБ();
			ВызватьИсключение;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		УстановитьЧасовойПоясСеанса(ЧасовойПоясПрограммы);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЧасовыеПояса()
	
	Элементы.ЧасовойПоясПрограммы.СписокВыбора.ЗагрузитьЗначения(ПолучитьДопустимыеЧасовыеПояса());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаСервера()
	
	Возврат ТекущаяДата();
	
КонецФункции

#КонецОбласти 


#Область Страница_НастройкиПользователя

&НаСервере
Процедура Подключаемый_НастройкиПользователяОбновить()

	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
	РазрешеноОткрытиеВнешнихОтчетовИОбработок = ОбщегоНазначенияДеньги.РазрешеноОткрытиеВнешнихОтчетовИОбработок();
	Элементы.РазрешеноОткрытиеВнешнихОтчетовИОбработок.Доступность = РазрешеноОткрытиеВнешнихОтчетовИОбработок >= 0 И РольДоступна("АдминистраторСистемы");
	Элементы.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы.Видимость = Ложь;
	Элементы.РазрешеноОткрытиеВнешнихОтчетовИОбработок.Видимость = Ложь;
	
	Элементы.СведенияОПользователе.Заголовок = АвторизованныйПользователь;

	// Общие настройки пользователя
	ПриЗапускеОткрыватьРаздел     = ПользовательскиеНастройкиДеньгиСервер.ПриЗапускеОткрыватьРаздел();
	СпособОткрытияФорм            = ПользовательскиеНастройкиДеньгиСервер.СпособОткрытияФорм();
	ТипДатыНовойОперации          = ПользовательскиеНастройкиДеньгиСервер.ТипДатыНовойОперации();
	
	// Значения по умолчанию
	ОсновнойКошелек   = ПользовательскиеНастройкиДеньгиСервер.ОсновнойКошелек();
	ОсновнойКонтакт   = ПользовательскиеНастройкиДеньгиСервер.ОсновнойКонтакт();
	ОсновноеИмущество = ПользовательскиеНастройкиДеньгиСервер.ОсновноеИмущество();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкуПользователя(ИмяНастройки)
	
	Если ИмяНастройки = "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы" Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ЗапрашиватьПодтверждениеПриЗавершенииПрограммы);
	Иначе
		Выполнить("ПользовательскиеНастройкиДеньгиСервер.Записать" + ИмяНастройки + "(" + ИмяНастройки + ")");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРазрешениеОткрытияВнешнихОбработок()

	ОбщегоНазначенияДеньги.ИзменитьРазрешениеОткрыватьВнешниеОтчетыИОбработки(РазрешеноОткрытиеВнешнихОтчетовИОбработок);

КонецПроцедуры
 
#КонецОбласти 


#Область Страница_РезервноеКопирование
	
&НаСервере
Процедура Подключаемый_РезервноеКопированиеОбновить()

	ОбновитьНастройкиРезервногоКопирования();

КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиРезервногоКопирования()
	
	Автономный  = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	Локальный   = Автономный И Не ОбщегоНазначения.РазделениеВключено();
	Если (Локальный Или Автономный) И Пользователи.ЭтоПолноправныйПользователь() Тогда
		МодульРезервноеКопированиеИБСервер = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеИБСервер");
		Элементы.НастройкаРезервногоКопированияИБ.РасширеннаяПодсказка.Заголовок = МодульРезервноеКопированиеИБСервер.ТекущаяНастройкаРезервногоКопирования();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 


#Область Страница_УправлениеПользователями
	
&НаСервере
Процедура Подключаемый_УправлениеПользователямиОбновить()

	

КонецПроцедуры
 

#КонецОбласти 


#Область Страница_Обновление
	
&НаКлиенте
Процедура ДекорацияЛогинИППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницу(
		ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки("/software?needAccessToken=true"),
		НСтр("ru = 'Личный кабинет пользователя'"),
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновлениеОбновить()

	НастроитьОтображениеБИП();
	
	МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
	НастройкиОбновления = МодульПолучениеОбновленийПрограммы.НастройкиАвтоматическогоОбновления();
	
	БИПАвтоматическаяПроверкаОбновлений = НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы;
	Элементы.ДекорацияРасписаниеПроверкиОбновлений.Доступность = (БИПАвтоматическаяПроверкаОбновлений = 2);
	Элементы.ДекорацияРасписаниеПроверкиОбновлений.Заголовок = ПредставлениеРасписания(НастройкиОбновления.Расписание);
	
	Если Не МодульПолучениеОбновленийПрограммы.ЭтоФайловаяИБ() Тогда
		Элементы.КаталогДистрибутиваПлатформы.Видимость = Ложь;
	Иначе
		КаталогДистрибутиваПлатформы = МодульПолучениеОбновленийПрограммы.КаталогСохраненияПоследнегоПолученногоДистрибутива();
		Элементы.КаталогДистрибутиваПлатформы.Видимость = Не ПустаяСтрока(КаталогДистрибутиваПлатформы);
	КонецЕсли;

	Если Элементы.ГруппаПодключениеИПП.Видимость Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		ОтобразитьСостояниеПодключенияИПП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеБИП()
	
	Элементы.ГруппаПодключениеИПП.Видимость = ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки();
	Элементы.ГруппаОбращениеВТехПоддержку.Видимость = Не ОбщегоНазначения.РазделениеВключено();
	Элементы.ГруппаНастройкиСоединенияССервером.Видимость = Элементы.ГруппаПодключениеИПП.Видимость;
	
	// ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		МодульМониторИнтернетПоддержки = ОбщегоНазначения.ОбщийМодуль("МониторИнтернетПоддержки");
		Элементы.ГруппаМониторИнтернетПоддержки.Видимость = МодульМониторИнтернетПоддержки.ДоступноИспользованиеМонитораИнтернетПоддержки();
	Иначе
		Элементы.ГруппаМониторИнтернетПоддержки.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки
	
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	Элементы.ГруппаДетализироватьОбновлениеИБВЖурналеРегистрации.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		ДоступноИспользованиеОбновленияПрограммы =
			МодульПолучениеОбновленийПрограммы.ДоступноИспользованиеОбновленияПрограммы();
		Элементы.ГруппаОбновлениеПрограммы.Видимость    = ДоступноИспользованиеОбновленияПрограммы;
		Элементы.КаталогДистрибутиваПлатформы.Видимость = ДоступноИспользованиеОбновленияПрограммы;
		
	Иначе
		
		Элементы.ГруппаОбновлениеПрограммы.Видимость    = Ложь;
		Элементы.КаталогДистрибутиваПлатформы.Видимость = Ложь;
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы
	
	Если Элементы.Найти("ОткрытьОписаниеИзмененийСистемы") = Неопределено Тогда
		Элементы.ГруппаОткрытьОписаниеИзмененийСистемы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРасписания(Расписание, ДопПараметры) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодПовтораВТечениеДня = Расписание.ПериодПовтораВТечениеДня;
	Если БИПАвтоматическаяПроверкаОбновлений = 2
		И ПериодПовтораВТечениеДня > 0
		И ПериодПовтораВТечениеДня < 300 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Интервал проверки не может быть задан чаще, чем один раз 5 минут.'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияРасписаниеПроверкиОбновлений.Заголовок = ПредставлениеРасписания(Расписание);
	
	МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	МодульПолучениеОбновленийПрограммыВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыВызовСервера");
	
	НастройкиОбновления = МодульПолучениеОбновленийПрограммыКлиент.ГлобальныеНастройкиОбновления();
	НастройкиОбновления.Расписание = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание);
	МодульПолучениеОбновленийПрограммыВызовСервера.ЗаписатьНастройкиОбновления(НастройкиОбновления);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРасписания(Расписание)

	Если Расписание = Неопределено Тогда
		Возврат НСтр("ru = 'Настроить расписание'");
	Иначе
		Если ТипЗнч(Расписание) = Тип("Структура") Тогда
			Возврат Строка(ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Расписание));
		Иначе
			Возврат Строка(Расписание);
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ОтобразитьСостояниеПодключенияИПП()
	
	Если ДанныеАутентификации = Неопределено Тогда
		Элементы.ДекорацияЛогинИПП.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			НСтр("ru = 'Подключение к Интернет-поддержке не выполнено.'"));
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru = 'Подключить'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		ШаблонЗаголовка = ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
			НСтр("ru = '<body>Подключена Интернет-поддержка для пользователя <a href=""action:openUsersSite"">%1</body>'"));
		Элементы.ДекорацияЛогинИПП.Заголовок = ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗаголовка,
				ДанныеАутентификации.Логин));
		Элементы.ВойтиИлиВыйтиИПП.Заголовок = НСтр("ru = 'Отключить'");
		Элементы.ВойтиИлиВыйтиИПП.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОВыходеИзИнтернетПоддержки(КодВозврата, ДопПараметры) Экспорт
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ВыйтиИзИППСервер();
		ДанныеАутентификации = Неопределено;
		ОтобразитьСостояниеПодключенияИПП();
		Оповестить("ИнтернетПоддержкаОтключена");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыйтиИзИППСервер()
	
	// Проверка права записи данных
	Если Не ИнтернетПоддержкаПользователей.ПравоЗаписиПараметровИПП() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для записи данных аутентификации Интернет-поддержки.'");
	КонецЕсли;
	
	// Запись данных
	УстановитьПривилегированныйРежим(Истина);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
	
КонецПроцедуры


#КонецОбласти 



#Область Страница_Администрирование

&НаСервере
Процедура Подключаемый_АдминистрированиеОбновить()


	Если Не ОбщегоНазначения.РазделениеВключено() И Пользователи.ЭтоПолноправныйПользователь() Тогда
		РегламентноеЗадание = РегламентныеЗаданияНайтиПредопределенное("УдалениеПомеченных");
		Если РегламентноеЗадание <> Неопределено Тогда
			УдалениеПомеченныхИдентификатор = РегламентноеЗадание.УникальныйИдентификатор;
			УдалениеПомеченныхИспользование = РегламентноеЗадание.Использование;
			УдалениеПомеченныхРасписание    = РегламентноеЗадание.Расписание;
		Иначе
			Элементы.ГруппаУдалениеПомеченныхОбъектовПоРасписанию.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаУдалениеПомеченныхОбъектовПоРасписанию.Видимость = Ложь;
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры
 
&НаКлиенте
Процедура РегламентныеЗаданияИспользованиеПриИзменении(ПрефиксРеквизитов)
	ИмяРеквизитаИспользование = ПрефиксРеквизитов + "Использование";
	Идентификатор = ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"];
	Если ЭтотОбъект[ИмяРеквизитаИспользование] Тогда
		ЭлементПредставление = Элементы.Найти(ПрефиксРеквизитов + "ПредставлениеРасписания");
		Если ЭлементПредставление = Неопределено Или ЭлементПредставление.Видимость Тогда
			ПараметрыВыполнения = Новый Структура;
			ПараметрыВыполнения.Вставить("Идентификатор", Идентификатор);
			ПараметрыВыполнения.Вставить("ИмяРеквизитаРасписание", ПрефиксРеквизитов + "Расписание");
			ПараметрыВыполнения.Вставить("ИмяРеквизитаИспользование", ИмяРеквизитаИспользование);
			РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Изменения = Новый Структура("Использование", ЭтотОбъект[ИмяРеквизитаИспользование]);
	РегламентныеЗаданияСохранить(Идентификатор, Изменения, ИмяРеквизитаИспользование);
КонецПроцедуры

&НаСервере
Функция РегламентныеЗаданияНайтиПредопределенное(ИмяПредопределенного)
	МетаданныеПредопределенного = Метаданные.РегламентныеЗадания.Найти(ИмяПредопределенного);
	Если МетаданныеПредопределенного = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РегламентныеЗадания.НайтиПредопределенное(МетаданныеПредопределенного);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РегламентныеЗаданияИзменитьРасписание(ПараметрыВыполнения)
	Обработчик = Новый ОписаниеОповещения("РегламентныеЗаданияПослеИзмененияРасписания", ЭтотОбъект, ПараметрыВыполнения);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание]);
	Диалог.Показать(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	Если Расписание = Неопределено Тогда
		Если ПараметрыВыполнения.Свойство("ИмяРеквизитаИспользование") Тогда
			ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаИспользование] = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаРасписание] = Расписание;
	
	Изменения = Новый Структура("Расписание", Расписание);
	Если ПараметрыВыполнения.Свойство("ИмяРеквизитаИспользование") Тогда
		ЭтотОбъект[ПараметрыВыполнения.ИмяРеквизитаИспользование] = Истина;
		Изменения.Вставить("Использование", Истина);
	КонецЕсли;
	РегламентныеЗаданияСохранить(ПараметрыВыполнения.Идентификатор, Изменения, ПараметрыВыполнения.ИмяРеквизитаРасписание);
КонецПроцедуры

&НаСервере
Процедура РегламентныеЗаданияСохранить(УникальныйИдентификатор, Изменения, РеквизитПутьКДанным)
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(РегламентноеЗадание, Изменения);
	РегламентноеЗадание.Записать();
	
	Если РеквизитПутьКДанным <> Неопределено Тогда
		УстановитьДоступность(РеквизитПутьКДанным);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
	Если Элементы.ГруппаУдалениеПомеченныхОбъектовПоРасписанию.Видимость
		И (РеквизитПутьКДанным = "УдалениеПомеченныхРасписание"
			Или РеквизитПутьКДанным = "УдалениеПомеченныхИспользование"
			Или РеквизитПутьКДанным = "") Тогда
		Элементы.УдалениеПомеченныхНастроитьРасписание.Доступность         = УдалениеПомеченныхИспользование;
		Элементы.ПояснениеУдалениеПомеченныхОбъектовПоРасписанию.Видимость = УдалениеПомеченныхИспользование;
		Если УдалениеПомеченныхИспользование Тогда
			РасписаниеПредставление = Строка(УдалениеПомеченныхРасписание);
			Представление = ВРег(Лев(РасписаниеПредставление, 1)) + Сред(РасписаниеПредставление, 2);
		Иначе
			Представление = НСтр("ru = '<Отключено>'");
		КонецЕсли;
		Элементы.ПояснениеУдалениеПомеченныхОбъектовПоРасписанию.Заголовок = Представление;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УдалениеПомеченныхОбъектов
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Если РеквизитПутьКДанным = "НаборКонстант.ИсточникДанныхАдресногоКлассификатора"
	 Или РеквизитПутьКДанным = "" Тогда
	 
		Элементы.ГруппаАдресныйКлассификаторКоманды.Доступность = ПустаяСтрока(НаборКонстант.ИсточникДанныхАдресногоКлассификатора);
		
	КонецЕсли; 
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

#КонецОбласти 

#Область Страница_АдресныйКлассификатор

&НаСервере
Процедура Подключаемый_АдресныйКлассификаторОбновить()

	УстановитьДоступность();

КонецПроцедуры
 

#КонецОбласти 

#Область СохранениеНастроек

&НаКлиенте
Процедура ПриИзмененииКонстантыКлиент(КонстантаИмя, ЗначениеКонстанты)

	Если СохранитьЗначениеКонстанты(КонстантаИмя, ЗначениеКонстанты) Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СохранитьЗначениеКонстанты(КонстантаИмя, НовоеЗначение)

	Результат = СохранитьЗначениеКонстантыСервер(КонстантаИмя, НовоеЗначение);
	
	Если Результат Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста 
Функция СохранитьЗначениеКонстантыСервер(КонстантаИмя, НовоеЗначение)

	КонстантаМенеджер = Константы[КонстантаИмя];
	
	Если КонстантаМенеджер.Получить() <> НовоеЗначение Тогда
		КонстантаМенеджер.Установить(НовоеЗначение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции



#КонецОбласти 


#Область ОчисткаБазы

&НаСервере
Процедура Подключаемый_ОчисткаБазыОбновить()
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ЗапросПодтвержденияОчистки(СохранятьСправочники)

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Удаление записей необратимо!
			|Ваша финансовая информация останется только в резервных копиях, если их делали.
			|
			|Вы действительно хотите удалить записи из информационной базы?'");
	
	ДополнительныеПараметры = Новый Структура("СохранятьСправочники", СохранятьСправочники);
	Оповещение = Новый ОписаниеОповещения("ЗапросПодтвержденияОчисткиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Нет'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура ЗапросПодтвержденияОчисткиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Удаление данных - ответственный шаг.
			|
			|Подтвердите свое решение:'");
	
	Оповещение = Новый ОписаниеОповещения("ПодтверждениеОчисткиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,        НСтр("ru='Удалить данные безвозвратно'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена,    НСтр("ru='Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти

	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеОчисткиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	Состояние(НСтр("ru='Ждите, из базы удаляются данные'"));
	ОписаниеПроблемы = "";
	Результат = УдалитьДанныеСервер(ДополнительныеПараметры.СохранятьСправочники, ОписаниеПроблемы);
	
	Если Результат Тогда
		ПараметрыПерезапуска = "";
		Режим = ДеньгиКлиентСервер.ТестовыйРежим();
		Если Режим = "testclient"  Тогда
			ПараметрыПерезапуска = "/TESTCLIENT ";
		ИначеЕсли Режим = "testmanager"  Тогда
			ПараметрыПерезапуска = "/TESTMANAGER ";
		КонецЕсли;
		ПараметрыПерезапуска = ПараметрыПерезапуска + "/C""" + ПараметрЗапуска + """";
		ЗавершитьРаботуСистемы(Ложь, Истина, ПараметрыПерезапуска);
	Иначе
		Сообщить(ОписаниеПроблемы);
		ПоказатьПредупреждение(, НСтр("ru='Не удалось очистить базу. См. описание проблемы в сообщении'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьДанныеСервер(СохранятьСправочники, ОписаниеПроблемы);

	Результат =  ОбщегоНазначенияДеньги.ОчиститьДанныеПодсистемыДеньги(СохранятьСправочники, ОписаниеПроблемы);
	Если Результат Тогда
		Константы.СостояниеПомощникаНачалаРаботы.Установить(Новый ХранилищеЗначения(Неопределено));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


#КонецОбласти 

&НаСервереБезКонтекста
Процедура ОбновитьСтатистикуСправочниковНаСервере()
	БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	РегистрыСведений.СтатистикаСправочников.ОбновитьВсюСтатистикуСправочников();
КонецПроцедуры



#КонецОбласти
