
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьСписокОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбновитьСписокОпераций();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуОперации(Элементы.СписокОпераций.ТекущаяСтрока, Неопределено, Неопределено);
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОперацииОтложить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВводДатыЗавершение", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, ТекущаяДатаКлиентСервер(), НСтр("ru='Укажите дату'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложитьСледДень(Команда)
	ПеренестиОперацииНаДатуКлиент("СледДень");
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложитьСледМесяц(Команда)
	ПеренестиОперацииНаДатуКлиент("СледМесяц");
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложитьСледНеделя(Команда)
	ПеренестиОперацииНаДатуКлиент("СледНеделя");
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСоздать(Команда)
	
	ОбновлятьСписок = Ложь;
	МассивСтрок = Элементы.СписокОпераций.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 1 Тогда
		ОткрытьФормуОперации(МассивСтрок[0], Неопределено, Неопределено);
	Иначе
		ВыполнитьОперацииКлиент(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПропустить(Команда)
	
	ПропуститьПлановыеОперации();
	Оповестить("Изменился список операций на период", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПрекратитьПовторы(Команда)
	
	СтрокаОперации = Элементы.СписокОпераций.ТекущиеДанные;
	Если СтрокаОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Прекратить повторение операций по шаблону <%1> начиная с %2?'"); 
	ТекстВопроса = СтрШаблон(ТекстВопроса, СтрокаОперации.ШаблонОперации, Формат(СтрокаОперации.АктуальнаяДата, "ДФ=дд.ММ.гггг"));
	ДополнительныеПараметры = Новый Структура("ИДСтроки", Элементы.СписокОпераций.ТекущаяСтрока);
	ОбработчикОтвета = Новый ОписаниеОповещения("ОперацииПрекратитьПовторыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСписокОпераций()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаКлиентСервер()));
	Запрос.УстановитьПараметр("ВалютаУчета", ПараметрыСеанса.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаОтчета", ПараметрыСеанса.ВалютаУчета);
	Запрос.УстановитьПараметр("ПланыМаксимальнаяДата", КонецДня(Запрос.Параметры.ТекущаяДата));

	#Область ТекстЗапроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДатыРасписаний.ПлановаяДата
	|		ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|	КОНЕЦ КАК АктуальнаяДата,
	|	ДатыРасписаний.ВладелецРасписания КАК ШаблонОперации,
	|	ДатыРасписаний.ПлановаяДата,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ДатыРасписаний.ВладелецРасписания.ОписаниеОперации КАК СТРОКА(1000)), """") КАК ПредставлениеШаблона,
	|	ВЫБОР
	|			КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДатыРасписаний.ПлановаяДата
	|			ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|		КОНЕЦ < &ТекущаяДата
	|		И НЕ ДатыРасписаний.Выполнено
	|		И НЕ ДатыРасписаний.Пропустить КАК Просрочена,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДатыРасписаний.ПлановаяДата
	|				ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|			КОНЕЦ, ДЕНЬ) <= &ТекущаяДата
	|		И НЕ ДатыРасписаний.Выполнено
	|		И НЕ ДатыРасписаний.Пропустить КАК НаСегодня,
	|	ДатыРасписаний.СуммаДохода КАК СуммаПоступления,
	|	ДатыРасписаний.ВалютаДохода КАК ВалютаПоступления,
	|	ДатыРасписаний.СуммаРасхода КАК СуммаСписания,
	|	ДатыРасписаний.ВалютаРасхода КАК ВалютаСписания,
	|	ДатыРасписаний.ПлановаяОперация КАК ПлановаяОперация,
	|	ДатыРасписаний.Выполнено КАК Выполнено,
	|	ДатыРасписаний.Пропустить КАК Пропустить,
	|	ДатыРасписаний.СуммаДолга,
	|	ДатыРасписаний.СуммаКомиссии,
	|	ДатыРасписаний.СуммаПроцентов
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Расписания КАК Расписания
	|		ПО (Расписания.ВладелецРасписания = ДатыРасписаний.ВладелецРасписания)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДатыРасписаний.ПлановаяДата
	|			ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|		КОНЕЦ <= &ПланыМаксимальнаяДата
	|	И НЕ ДатыРасписаний.Выполнено
	|	И НЕ ДатыРасписаний.Пропустить
	|	И ЕСТЬNULL(Расписания.НеИспользовать, ЛОЖЬ) = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктуальнаяДата,
	|	ПредставлениеШаблона";
	#КонецОбласти 
	
	СписокОпераций.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДатыЗавершение(НоваяДата, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(НоваяДата) Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиОперацииНаДатуКлиент(НоваяДата);

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОперацииНаДатуКлиент(СпособПереноса)

	ПеренестиОперацииНаДату(СпособПереноса);
	Оповестить("Изменилась дата плановой операции", , ЭтаФорма);

КонецПроцедуры
 

&НаСервере 
Процедура ПеренестиОперацииНаДату(СпособПереноса)

	Сегодня = КонецДня(ТекущаяДатаКлиентСервер());
	ОбновлятьСписок = Ложь;
	
	Для каждого ИДСтроки Из Элементы.СписокОпераций.ВыделенныеСтроки Цикл
		
		СтрокаСписка = СписокОпераций.НайтиПоИдентификатору(ИДСтроки);
		
		Если СпособПереноса = "СледДень" Тогда
			НоваяДата = СтрокаСписка.АктуальнаяДата + 86400;
		ИначеЕсли СпособПереноса = "СледНеделя" Тогда
			НоваяДата = СтрокаСписка.АктуальнаяДата + 86400 * 7;
		ИначеЕсли СпособПереноса = "СледМесяц" Тогда
			НоваяДата = ДобавитьМесяц(СтрокаСписка.АктуальнаяДата, 1);
		Иначе
			НоваяДата = СпособПереноса;
		КонецЕсли;
		
		ИзменитьДатуОперации(СтрокаСписка.ШаблонОперации, СтрокаСписка.ПлановаяДата, НоваяДата);
		
		Если НоваяДата > Сегодня Тогда
			СписокОпераций.Удалить(СтрокаСписка);
		Иначе
			ОбновлятьСписок = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбновлятьСписок Тогда
		ОбновитьСписокОпераций();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьДатуОперации(ШаблонОперации, ПлановаяДата, АктуальнаяДата)

	ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
	ЗаписьДаты.ВладелецРасписания = ШаблонОперации;
	ЗаписьДаты.ПлановаяДата = ПлановаяДата;
	ЗаписьДаты.Прочитать();
	Если ЗначениеЗаполнено(ЗаписьДаты.ПлановаяОперация) Тогда
		ОбъектОперации = ЗаписьДаты.ПлановаяОперация.ПолучитьОбъект();
		ОбъектПроведен = ОбъектОперации.Проведен;
	Иначе
		ОбъектОперации = Неопределено;
		ОбъектПроведен = Ложь;
	КонецЕсли; 

	ЗаписьДаты.АктуальнаяДата   = АктуальнаяДата;
	ЗаписьДаты.Записать(Истина);
	
	Если ОбъектОперации <> Неопределено Тогда
		ОбъектОперации.Дата = АктуальнаяДата + (ОбъектОперации.Дата - НачалоДня(ОбъектОперации.Дата));
		РежимЗаписи = ?(ОбъектОперации.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ОбъектОперации.Записать(РежимЗаписи);
		ОбъектПроведен = ОбъектОперации.Проведен;
	КонецЕсли; 
	
	ПлановыеОперации.СформироватьОборотыШаблонаДокументов(ШаблонОперации);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперацииКлиент(МассивСтрок = Неопределено)

	Если МассивСтрок = Неопределено Тогда
		МассивСтрок = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элементы.СписокОпераций.ВыделенныеСтроки);
	КонецЕсли;
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		СтрокаСписка = СписокОпераций.НайтиПоИдентификатору(ИДСтроки);
		
		ПараметрыФормы = Новый Структура;
		Если СоздатьОперациюСервер(ИДСтроки, ПараметрыФормы) Тогда
			
			Элементы.СписокОпераций.ВыделенныеСтроки.Удалить(Элементы.СписокОпераций.ВыделенныеСтроки.Найти(ИДСтроки));
			СписокОпераций.Удалить(СтрокаСписка);
			Оповестить("Записана операция", , ЭтотОбъект);
			
		Иначе
			
			ОбновлятьСписок = Истина;
			
			ОткрытьФормуОперации(ИДСтроки, ПараметрыФормы, ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элементы.СписокОпераций.ВыделенныеСтроки));
			 
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ОбновлятьСписок Тогда
		ОбновитьСписокОпераций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперации(ИДСтроки, ПараметрыФормы, МассивСтрок)

	СтрокаСписка = СписокОпераций.НайтиПоИдентификатору(ИДСтроки);
	
	ДополнительныеПараметры = Новый Структура("ИДСтроки,МассивСтрок", ИДСтроки, МассивСтрок);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = ПараметрыФормыДокументаИзСтрокиОперации(ИДСтроки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаСписка.ПлановаяОперация) Тогда
		ОткрытьФорму("Документ." +ПараметрыФормы.ИмяФормыДокумента + ".ФормаОбъекта", 
					Новый Структура("Ключ", СтрокаСписка.ПлановаяОперация), ЭтотОбъект, СтрокаСписка.ПлановаяОперация, , , 
					Оповещение);
	Иначе
		ОткрытьФорму("Документ." + ПараметрыФормы.ИмяФормыДокумента + ".ФормаОбъекта", 
						ПараметрыФормы, ЭтотОбъект, Истина, , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьОперацииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(ДополнительныеПараметры.МассивСтрок) Тогда
		
		ВыделенныйЭлемент = Элементы.СписокОпераций.ВыделенныеСтроки.Найти(ДополнительныеПараметры.ИДСтроки);
		Если ВыделенныйЭлемент <> Неопределено Тогда
			Элементы.СписокОпераций.ВыделенныеСтроки.Удалить(ВыделенныйЭлемент);
		КонецЕсли;
		
		ВыделенныйЭлемент = ДополнительныеПараметры.МассивСтрок.Найти(ДополнительныеПараметры.ИДСтроки);
		Если ВыделенныйЭлемент <> Неопределено Тогда
			ДополнительныеПараметры.МассивСтрок.Удалить(ВыделенныйЭлемент);
		КонецЕсли;
		
		ВыполнитьОперацииКлиент(ДополнительныеПараметры.МассивСтрок);
		
	Иначе
		
		ОбновитьСписокОпераций();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СоздатьОперациюСервер(ИДСтроки, ПараметрыФормыНовогоДокумента)

	СтрокаОперации = СписокОпераций.НайтиПоИдентификатору(ИДСтроки);
	ПараметрыФормыНовогоДокумента = ПараметрыФормыДокументаИзСтрокиОперации(ИДСтроки);
	
	Если ЗначениеЗаполнено(СтрокаОперации.ПлановаяОперация) Тогда
		
		ДокументОбъект = СтрокаОперации.ПлановаяОперация.ПолучитьОбъект();
		
	Иначе
		
		ДокументОбъект = СтрокаОперации.ШаблонОперации.Скопировать();
		ДокументОбъект.ЭтоШаблон = Ложь;
		ДокументОбъект.Заполнить(ПараметрыФормыНовогоДокумента.ЗначенияЗаполнения);
		
	КонецЕсли;
	
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		
		Если ДокументОбъект.Ссылка.Пустая() Тогда
			СсылкаНаОперацию = Документы[ПараметрыФормыНовогоДокумента.ИмяФормыДокумента].ПолучитьСсылку();
			ДокументОбъект.УстановитьСсылкуНового(СсылкаНаОперацию);
		Иначе
			СсылкаНаОперацию = ДокументОбъект.Ссылка;
		КонецЕсли;
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.ПометкаУдаления = Ложь;
		КонецЕсли;
		
		// Создаем записи регистров
		ЗаписьОперации = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
		ЗаписьОперации.ВладелецРасписания = СтрокаОперации.ШаблонОперации;
		ЗаписьОперации.ПлановаяДата = СтрокаОперации.ПлановаяДата;
		ЗаписьОперации.Прочитать();
		Если Не ЗаписьОперации.Выбран() Тогда
			ЗаписьОперации.ВладелецРасписания = СтрокаОперации.ШаблонОперации;
			ЗаписьОперации.ПлановаяДата = СтрокаОперации.ПлановаяДата;
		КонецЕсли;
		ЗаписьОперации.АктуальнаяДата   = СтрокаОперации.АктуальнаяДата;
		ЗаписьОперации.ПлановаяОперация = СсылкаНаОперацию;
		ЗаписьОперации.Пропустить       = Ложь;
		ЗаписьОперации.Выполнено        = Истина;
		ПлановыеОперации.ОбновитьСуммыПлановойОперации(ЗаписьОперации, ДокументОбъект);
		
		ПлановыеОперации.ПередЗаписьюОперации(ДокументОбъект, , , , Ложь, , ЗаписьОперации, , Ложь, СсылкаНаОперацию);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ПроверитьАктуальностьРасписания(СтрокаОперации);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыДокументаИзСтрокиОперации(ИДСтроки)

	СтрокаОперации = СписокОпераций.НайтиПоИдентификатору(ИДСтроки);
	ПараметрыФормыНовогоДокумента = Новый Структура;
	ПараметрыФормыНовогоДокумента.Вставить("ЗначениеКопирования", СтрокаОперации.ШаблонОперации);
	СтруктураЗаполнения = Новый Структура("ЭтоШаблон,Дата,СуммаДолга,СуммаПроцентов,СуммаКомиссии", 
		Ложь, СтрокаОперации.АктуальнаяДата, СтрокаОперации.СуммаДолга, СтрокаОперации.СуммаПроцентов,
		СтрокаОперации.СуммаКомиссии);
	ПараметрыФормыНовогоДокумента.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	
	ПараметрыФормыНовогоДокумента.Вставить("ВладелецРасписания", СтрокаОперации.ШаблонОперации);
	ПараметрыФормыНовогоДокумента.Вставить("ПлановаяДата",       СтрокаОперации.ПлановаяДата);
	ПараметрыФормыНовогоДокумента.Вставить("АктуальнаяДата",     СтрокаОперации.АктуальнаяДата);
	ПараметрыФормыНовогоДокумента.Вставить("ИмяФормыДокумента",  СтрокаОперации.ШаблонОперации.Метаданные().Имя);

	Возврат ПараметрыФормыНовогоДокумента;
	
КонецФункции
 
&НаСервере
Процедура ПропуститьПлановыеОперации()

	СтрокиКУдалению = Новый Массив;
	Для каждого ИДСтроки Из Элементы.СписокОпераций.ВыделенныеСтроки Цикл
		
		СтрокаСписка = СписокОпераций.НайтиПоИдентификатору(ИДСтроки);
		ПропуститьПлановуюОперациюСервер(СтрокаСписка);
		СтрокиКУдалению.Добавить(СтрокаСписка);
		
	КонецЦикла;
	
	Для каждого СтрокаСписка Из СтрокиКУдалению Цикл
		СписокОпераций.Удалить(СтрокаСписка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПропуститьПлановуюОперациюСервер(СтрокаОперации)

	ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
	ЗаписьДаты.ВладелецРасписания = СтрокаОперации.ШаблонОперации;
	ЗаписьДаты.ПлановаяДата = СтрокаОперации.ПлановаяДата;
	ЗаписьДаты.Прочитать();
	Если ЗначениеЗаполнено(ЗаписьДаты.ПлановаяОперация) Тогда
		ОбъектОперации = ЗаписьДаты.ПлановаяОперация.ПолучитьОбъект();
		ОбъектПроведен = ОбъектОперации.Проведен;
	Иначе
		ОбъектОперации = Неопределено;
		ОбъектПроведен = Ложь;
	КонецЕсли; 

	ЗаписьДаты.Пропустить   = НЕ ЗаписьДаты.Пропустить;
	ЗаписьДаты.Записать(Истина);
	
	ПроверитьАктуальностьРасписания(СтрокаОперации);
	
	Если ОбъектОперации <> Неопределено Тогда
		Если ЗаписьДаты.Пропустить Тогда
			РежимЗаписи = ?(ОбъектОперации.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		ОбъектОперации.Записать(РежимЗаписи);
		ОбъектПроведен = ОбъектОперации.Проведен;
	КонецЕсли; 

	ПлановыеОперации.СформироватьОборотыШаблонаДокументов(СтрокаОперации.ШаблонОперации);

КонецПроцедуры

&НаСервере
Процедура ПроверитьАктуальностьРасписания(СтрокаОперации)

	// Проверяем актуальность расписания
	ЗаписьРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
	ЗаписьРасписания.ВладелецРасписания = СтрокаОперации.ШаблонОперации;
	ЗаписьРасписания.Прочитать();
	Если ЗаписьРасписания.Выбран() И ЗаписьРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ВУказанныеДаты Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВладелецРасписания", СтрокаОперации.ШаблонОперации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ДатыРасписаний.АктуальнаяДата) КАК АктуальнаяДата
		|ИЗ
		|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
		|ГДЕ
		|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
		|	И ДатыРасписаний.Пропустить = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.АктуальнаяДата) И Выборка.АктуальнаяДата <> ЗаписьРасписания.ДатаОкончанияРасписания Тогда
			ЗаписьРасписания.КоличествоПовторов = 0;
			ЗаписьРасписания.ДатаОкончанияРасписания = Выборка.АктуальнаяДата;
			ЗаписьРасписания.Записать(Истина);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОперацииПрекратитьПовторыЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПрекратитьПовторениеОпераций(ДополнительныеПараметры.ИДСтроки);
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПрекратитьПовторениеОпераций(СтрокаОперации)

	// Завершаем само расписание:
	ЗаписьРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
	ЗаписьРасписания.ВладелецРасписания = СтрокаОперации.ШаблонОперации;
	ЗаписьРасписания.Прочитать();
	ЗаписьРасписания.ДатаОкончанияРасписания = СтрокаОперации.ПлановаяДата;
	ЗаписьРасписания.Активность = ложь;
	ЗаписьРасписания.Записать(Истина);
	
	// Удаляем лишние даты расписания:
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецРасписания", СтрокаОперации.ШаблонОперации);
	Запрос.УстановитьПараметр("ДатаПрекращения", СтрокаОперации.ПлановаяДата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата,
	|	ДатыРасписаний.ПлановаяОперация,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ) КАК ОперацияУчтена
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
	|	И ДатыРасписаний.ПлановаяДата >= &ДатаПрекращения";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ТребуетсяОбновление = Выборка.Количество() > 0;
	Пока Выборка.Следующий() Цикл
		
		// Удаяем плановую операцию, если она не проведена
		Если ЗначениеЗаполнено(Выборка.ПлановаяОперация) И НЕ Выборка.ОперацияУчтена Тогда
			ДокументОбъект = Выборка.ПлановаяОперация.ПолучитьОбъект();
			ДокументОбъект.Удалить();
		КонецЕсли; 
		
		// Удаляем дату в календаре
		МенеджерЗаписи = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
		
	КонецЦикла; 
	
	ПлановыеОперации.СформироватьОборотыШаблонаДокументов(СтрокаОперации.ШаблонОперации);
	
	ОбновитьСписокОпераций();

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти
