

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ДопНастройкиФормы.ПоказалиПодсказкуКалендарь И КоличествоОперацийЗаМесяц = 0 И КоличествоОперацийПросроченных = 0 Тогда
		ПодключитьОбработчикОжидания("ПоказатьПодсказкуКалендарь", 0.8, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	// Обработка перехода по ссылке
	ДатаОтобранныхОпераций = Неопределено;
	ПараметрыПереходаПоСсылке = ДеньгиВызовСервера.ПолучитьПараметрПереходаПоСсылке();
	Если ТипЗнч(ПараметрыПереходаПоСсылке) = Тип("Структура") 
		И ПараметрыПереходаПоСсылке.НазначениеПерехода = "ФормаКалендаря" Тогда
		Если ПараметрыПереходаПоСсылке.Отбор.Свойство("ДатаКалендаря", ДатаОтобранныхОпераций) Тогда
			ДатаНачала = НачалоМесяца(ДатаОтобранныхОпераций);
			Если ДатаОтобранныхОпераций < НачалоДня(ДеньгиКлиентСервер.ЗначениеТекущейДаты()) Тогда
				НужнаяСтраница = Элементы.ГруппаСтраницаРаздела2;
			Иначе
				НужнаяСтраница = Элементы.ГруппаСтраницаРаздела1;
			КонецЕсли; 
			
			Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница <> НужнаяСтраница Тогда
				Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = НужнаяСтраница;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ОбновитьСодержимоеФормы(Истина, ДатаОтобранныхОпераций);
	
 	Оповестить("Изменился список операций на период", 
		Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" 
		ИЛИ ИмяСобытия = "Записан элемент справочника" И Параметр.ИмяСправочника = "КошелькиИСчета" Тогда
		
		Если ВводДоступен() ИЛИ Параметр.Свойство("ВладелецФормы") И Параметр.ВладелецФормы = УникальныйИдентификатор Тогда
			ОбновитьСодержимоеФормы(Истина);
		Иначе
			ТребуетсяОбновитьДанные = Истина;
			Заголовок = НСтр("ru = 'Календарь (обновляется...)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеПриДоступностиВВода", 0.2, Истина);
		КонецЕсли; 
		
 		Оповестить("Изменился список операций на период", 
			Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));
		
	ИначеЕсли ИмяСобытия = "Изменилась настройка" И Параметр.Свойство("ПриЗапускеОткрыватьРаздел") Тогда
		
		Элементы.ОткрыватьПриЗапускеПрограммы.Пометка =  Параметр.ПриЗапускеОткрыватьРаздел = "Календарь";
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.ТипВыбранногоЗначения = "КомандаСпискаНаДень" Тогда
			
			Если ВыбранноеЗначение.Свойство("СтруктураОперации") Тогда
				СтруктураОперации = ВыбранноеЗначение.СтруктураОперации;
			Иначе
				СтруктураОперации = ПолучитьВыделеннуюОпереацию(ВыбранноеЗначение.ИДСтрокиТаблицыОпераций);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтруктураОперации.ИДСтрокиТаблицыОпераций) Тогда
				ЗаполнитьИдентификаторСтрокиВСтруктуреОперации(СтруктураОперации);
			КонецЕсли; 
			
			ДополнительныеПараметры = Новый Структура("СтруктураОперации", СтруктураОперации);
			
			Если ВыбранноеЗначение.ИмяКоманды = "ОперацииСоздать" Тогда
				Если ЗначениеЗаполнено(СтруктураОперации.ПлановаяОперация) Тогда
					ПоказатьЗначение(, СтруктураОперации.ПлановаяОперация);
				Иначе
					Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Ложь, Истина) Тогда
						СоздатьОперациюПоШаблону(СтруктураОперации);
					КонецЕсли; 
				КонецЕсли;
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииОтложить" Тогда
				
				ИзменитьДатуОперацииНаПроизвольную(СтруктураОперации);
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииПропустить" Тогда
				
				ПропуститьПлановуюОперацию(СтруктураОперации);
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииПрекратитьПовторы" Тогда
				
				ПрекратитьПовторы(СтруктураОперации);
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииОтложитьСледДень" Тогда
				
				Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
					ИзменитьДатуОперации(СтруктураОперации, "СледующийДень", Ложь);
				КонецЕсли;
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииОтложитьПредДень" Тогда
				
				Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
					ИзменитьДатуОперации(СтруктураОперации, "ПредыдущийДень", Ложь);
				КонецЕсли;
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииОтложитьСледМесяц" Тогда
				
				Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
					ИзменитьДатуОперации(СтруктураОперации, "СледующийМесяц", Ложь);
				КонецЕсли;
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииОтложитьСледНеделя" Тогда
				
				Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
					ИзменитьДатуОперации(СтруктураОперации, "СледующаяНеделя", Ложь);
				КонецЕсли;
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ШаблоныИзменитьШаблон" Тогда
				
				Если СтруктураОперации.Выбран И ЗначениеЗаполнено(СтруктураОперации.ШаблонОперации) Тогда
					Оповещение = Новый ОписаниеОповещения("ШаблоныИзменитьШаблонЗавершение", ЭтотОбъект);
					ПоказатьЗначение(Оповещение, СтруктураОперации.ШаблонОперации);
				КонецЕсли;
				
			ИначеЕсли ВыбранноеЗначение.ИмяКоманды = "ОперацииОткрытьСписокВсехОпераций" Тогда
				
				ПараметрОтбор = Новый Структура("ВладелецРасписания", СтруктураОперации.ШаблонОперации);
				ОткрытьФорму("РегистрСведений.ДатыРасписаний.ФормаСписка", Новый Структура("Отбор", ПараметрОтбор),ЭтаФорма);
				
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОстановитьОбновлениеВФоне();
		ОтключитьОбработчикОжидания("ПроверитьФоновоеОбновлениеНаКлиенте");
	КонецЕсли; 
	
КонецПроцедуры
 

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыРазделовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьСодержимоеФормы(Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела3);

КонецПроцедуры


#КонецОбласти


// Страница "Календарь"
#Область ОбработчикиСобытийСтраницы_Раздел1

&НаКлиенте
Процедура ПредставлениеВыбранногоМесяцаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ДатаПериода", ВыбранныйМесяц.ДатаНачала);
	ОбработчикОтвета = Новый ОписаниеОповещения("ПериодВыбратьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ПлановыеОперации.Форма.ФормаВыбораМесяца", ДополнительныеПараметры, ЭтотОбъект, ,,,ОбработчикОтвета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВыбранногоМесяцаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ВыбранныйМесяц.ДатаНачала    = НачалоМесяца(ДобавитьМесяц(ВыбранныйМесяц.ДатаНачала, Направление * 1));
	ВыбранныйМесяц.ДатаОкончания = КонецМесяца(ВыбранныйМесяц.ДатаНачала);
	ОбновитьСодержимоеФормы(Истина, ВыделеннаяДатаКалендаря);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНаМесяцВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.ТаблицаНаМесяц.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяЭлемента = Элементы.ТаблицаНаМесяц.ТекущийЭлемент.Имя;
	Если Найти(ИмяЭлемента, "ТаблицаНаМесяцТекст") = 1 Тогда
		ОбновитьТаблицуОперацийЗаПериод();
		ОткрытьФормуОперацийЗаПериод();
	Иначе
		СтруктураОперации = ПолучитьВыделеннуюОпереацию();
		Если ЗначениеЗаполнено(СтруктураОперации.ПлановаяОперация) ИЛИ СтруктураОперации.Пропустить = Истина Тогда
			Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Ложь, Истина) Тогда
				ОткрытьФормуОперации(СтруктураОперации.ПлановаяОперация);
			КонецЕсли
		ИначеЕсли ЗначениеЗаполнено(СтруктураОперации.ШаблонОперации) Тогда
			СоздатьОперациюПоШаблону(СтруктураОперации);
		Иначе
			ШаблоныДобавитьШаблон(Неопределено);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНаМесяцПриАктивизацииЯчейки(Элемент)
	
	Если Не ВводДоступен() Или Элементы.ТаблицаНаМесяц.ТекущийЭлемент = Неопределено Или Элементы.ТаблицаНаМесяц.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяЭлемента = Элементы.ТаблицаНаМесяц.ТекущийЭлемент.Имя;
	НомерДняНедели = Прав(ИмяЭлемента, 1);
	Если ВыделеннаяДатаКалендаря = Элементы.ТаблицаНаМесяц.ТекущиеДанные["ДеньНедели" + НомерДняНедели] Тогда
		Возврат; // исключаем повторную обработку при выводе данных
	КонецЕсли; 
	ВыделеннаяДатаКалендаря = Элементы.ТаблицаНаМесяц.ТекущиеДанные["ДеньНедели" + НомерДняНедели];
	
КонецПроцедуры


#КонецОбласти

// Страница "Просроченные операции"
#Область ОбработчикиСобытийСтраницы_Раздел2

&НаКлиенте
Процедура ТаблицаПросроченныхОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если СтруктураОперации.Выбран Тогда
		Если ЗначениеЗаполнено(СтруктураОперации.ПлановаяОперация) Тогда
			ПоказатьЗначение(, СтруктураОперации.ПлановаяОперация);
		Иначе
			СоздатьОперациюПоШаблону(СтруктураОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

// Страница "Прогноз остатков"
#Область ОбработчикиСобытийСтраницы_Раздел3

&НаКлиенте
Процедура ВидСрокаПрогнозаПриИзменении(Элемент)
	
	ОбновитьСодержимоеФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособГруппировкиПрогнозаПриИзменении(Элемент)
	
	ОбновитьСодержимоеФормы(Истина);

КонецПроцедуры
 
&НаКлиенте
Процедура СпособОтбораКошельковПриИзменении(Элемент)
	
	Если СпособОтбораКошельков = 6 Тогда
		// Редактируем список кошельков
		ДополнительныеПараметры = Новый Структура("СписокКошельков", СписокКошельковДляПрогноза);
		ОбработчикОтвета = Новый ОписаниеОповещения("СпособОтбораКошельковПриИзмененииЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ПлановыеОперации.Форма.ФормаВыбораКошельков", ДополнительныеПараметры, ЭтотОбъект, ,,,ОбработчикОтвета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли; 
	
	ОбновитьСодержимоеФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаОстатковОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка.ТипЗначения = "ОстатокНаНачало" Тогда
		Возврат;
	КонецЕсли; 
	
	ПрогнозЗначениеКлючевогоПоля = Расшифровка.КлючевоеПоле;
	ПрогнозВыбраннаяДата = Расшифровка.Дата;
	
	ОбновитьТаблицуОперацийЗаПериод();
	
	Если ТаблицаОперацийЗаПериод.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Нет операций, запланированных на период %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаФорматаДаты = ?(ВидСрокаПрогноза > 5, "ДФ='ММММ гггг ""г.""'", "ДФ='дд ММММ гггг ""г.""'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Формат(Расшифровка.Дата, СтрокаФорматаДаты) );
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	ОткрытьФормуОперацийЗаПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаливатьОбластиДиаграммыПриИзменении(Элемент)
	
	ДиаграммаОстатков.ТипДиаграммы  = ?(ЗаливатьОбластиДиаграммы, ТипДиаграммы.ГрафикСОбластями, ТипДиаграммы.График);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПодсказку(Команда)
	
	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма.КалендарьТакси",,ЭтаФорма,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСегодня(Команда)
	
	ВыбранныйМесяц = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц);
	ОбновитьСодержимоеФормы(Истина, ДеньгиКлиентСервер.ЗначениеТекущейДаты());
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСодержимоеФормыКлиент();
	
КонецПроцедуры


&НаКлиенте
Процедура ОперацииИзменитьОперацию(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Ложь, Истина, Истина) Тогда
		Если ЗначениеЗаполнено(СтруктураОперации.ПлановаяОперация) Тогда
			ОткрытьФормуОперации(СтруктураОперации.ПлановаяОперация);
		ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураОперации.ШаблонОперации) Тогда
			ШаблоныДобавитьШаблон(Неопределено);
		Иначе
			СоздатьОперациюПоШаблону(СтруктураОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОткрытьСписок(Команда)
	
	ОбновитьТаблицуОперацийЗаПериод();
	ОткрытьФормуОперацийЗаПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложить(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	ИзменитьДатуОперацииНаПроизвольную(СтруктураОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложитьПредДень(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
		ИзменитьДатуОперации(СтруктураОперации, "ПредыдущийДень");
		Оповестить("Изменилась дата плановой операции", 
			Новый Структура("ПлановаяОперация,ШаблонОперации", СтруктураОперации.ПлановаяОперация, СтруктураОперации.ШаблонОперации), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложитьСледДень(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
		ИзменитьДатуОперации(СтруктураОперации, "СледующийДень");
		Оповестить("Изменилась дата плановой операции", 
			Новый Структура("ПлановаяОперация,ШаблонОперации", СтруктураОперации.ПлановаяОперация, СтруктураОперации.ШаблонОперации), ЭтаФорма);
	ИначеЕсли ЗначениеЗаполнено(СтруктураОперации.ОписаниеОшибки) Тогда
		ПоказатьПредупреждение(, СтруктураОперации.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложитьСледМесяц(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
		ИзменитьДатуОперации(СтруктураОперации, "СледующийМесяц");
		Оповестить("Изменилась дата плановой операции", 
			Новый Структура("ПлановаяОперация,ШаблонОперации", СтруктураОперации.ПлановаяОперация, СтруктураОперации.ШаблонОперации), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОтложитьСледНеделя(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
		ИзменитьДатуОперации(СтруктураОперации, "СледующаяНеделя");
		Оповестить("Изменилась дата плановой операции", 
			Новый Структура("ПлановаяОперация,ШаблонОперации", СтруктураОперации.ПлановаяОперация, СтруктураОперации.ШаблонОперации), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПрекратитьПовторы(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	ПрекратитьПовторы(СтруктураОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПропустить(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	ПропуститьПлановуюОперацию(СтруктураОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныДобавитьШаблон(Команда)
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ШаблоныДобавитьШаблонЗавершение", ЭтотОбъект);
	СписокТипов.ПоказатьВыборЭлемента(ОбработчикВыбора, НСтр("ru = 'Выбор типа операции'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныИзменитьШаблон(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если СтруктураОперации.Выбран Тогда
		Если ЗначениеЗаполнено(СтруктураОперации.ШаблонОперации) Тогда
			ПоказатьЗначение(, СтруктураОперации.ШаблонОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПерейтиВСписок(Команда)
	
	ОткрытьФорму("ЖурналДокументов.ОбщийЖурналДокументов.Форма.ФормаСпискаШаблонов", ,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОткрытьСписокВсехОпераций(Команда)
	
	СтруктураОперации = ПолучитьВыделеннуюОпереацию();
	Если СтруктураОперации.Выбран Тогда
		ПараметрОтбор = Новый Структура("ВладелецРасписания", СтруктураОперации.ШаблонОперации);
		ОткрытьФорму("РегистрСведений.ДатыРасписаний.ФормаСписка", Новый Структура("Отбор", ПараметрОтбор),ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры


// Настройка автоматического открытия формы при начале работы порграммы

&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммы(Команда)
	
	Если Элементы.ОткрыватьПриЗапускеПрограммы.Пометка Тогда
		ТекстВопроса = НСтр("ru = 'Отключить автоматическое открытие этой формы при запуске программы?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		ТекстВопроса = НСтр("ru = 'Октрывать эту форму при каждом запуске программы?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли; 
	ДополнительныеПараметры = Новый Структура("Открывать", Элементы.ОткрыватьПриЗапускеПрограммы.Пометка);
	ОбработчикОтвета = Новый ОписаниеОповещения("ОткрыватьПриЗапускеПрограммыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры
 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Обработчики общих событий и команд формы

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Заполнение переменных и вспомогательных реквизитов
	ВалютаУчета                 = Константы.ВалютаУчета.Получить();
	ВалютаОтчета                = ВалютаУчета;
	ВыбранныйМесяц              = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц);
	МаксимальноеКоличествоСтрок = ?(МаксимальноеКоличествоСтрок = 0, 4, МаксимальноеКоличествоСтрок);
	НачалоПрогноза              = НачалоДня(ТекущаяДатаСеанса());
	// Настройка автоматического открытия формы при начале работы порграммы
	Элементы.ОткрыватьПриЗапускеПрограммы.Пометка = ПользовательскиеНастройкиДеньгиСервер.ПриЗапускеОткрыватьРаздел() = "Календарь";
	
	// Список допустимых видов документов
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("ВводИзменениеОстатка");
	СписокТипов = ДеньгиВызовСервера.ПолучитьСписокВидовОпераций(, МассивИсключений);
	
	// Дополнительные значения для сокращения числа обращений к серверу
	ДопНастройкиФормы = Новый Структура;
	ДопНастройкиФормы.Вставить("ПоказалиПодсказкуНачалоРаботыСШаблонами", РаботаСФормамиСправочников.ПользовательСмотрелПодсказку("НачалоРаботыСШаблонами"));
	ДопНастройкиФормы.Вставить("ПоказалиПодсказкуКалендарь", РаботаСФормамиСправочников.ПользовательСмотрелПодсказку("Календарь"));
	
	// Подготовка реквизитов формы
	СоздатьКолонкиТаблицы();
	ПодготовитьДиаграмму();
	
	// Обработка перехода по ссылке
	ДатаОтобранныхОпераций = Неопределено;
	ДатаНачала             = Неопределено;
	ПараметрыПереходаПоСсылке = ДеньгиВызовСервера.ПолучитьПараметрПереходаПоСсылке();
	Если ТипЗнч(ПараметрыПереходаПоСсылке) = Тип("Структура") 
		И ПараметрыПереходаПоСсылке.НазначениеПерехода = "ФормаКалендаря" Тогда
		Если ПараметрыПереходаПоСсылке.Отбор.Свойство("ДатаКалендаря", ДатаОтобранныхОпераций) Тогда
			ДатаНачала = НачалоМесяца(ДатаОтобранныхОпераций);
			Если ДатаОтобранныхОпераций < НачалоДня(ДеньгиКлиентСервер.ЗначениеТекущейДаты()) Тогда
				ВыбранныйРаздел = 2;
			Иначе
				ВыбранныйРаздел = 1;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если Параметры.Свойство("ДатаКалендаря") И ЗначениеЗаполнено(Параметры.ДатаКалендаря) Тогда
			ДатаОтобранныхОпераций = Параметры.ДатаКалендаря;
			ДатаНачала = НачалоМесяца(ДатаОтобранныхОпераций);
		КонецЕсли;
		Если Параметры.Свойство("РазделКалендаря") И ЗначениеЗаполнено(Параметры.РазделКалендаря) Тогда
			ВыбранныйРаздел = Параметры.РазделКалендаря;
		КонецЕсли;
	КонецЕсли;
	
	// Обновляем содержимое
	Если ДатаНачала <> Неопределено Тогда
		ВыбранныйМесяц.ДатаНачала    = ДатаНачала;
		ВыбранныйМесяц.ДатаОкончания = КонецМесяца(ДатаНачала);
	КонецЕсли;
	
	Если ВыбранныйРаздел = 3 Тогда
		Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела3;
	ИначеЕсли ВыбранныйРаздел = 2 Тогда
		Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела2;
	Иначе
		Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела1;
	КонецЕсли;
	 
	
	ОбновитьСодержимоеФормы(Истина, ДатаОтобранныхОпераций);
	
	// Настройка внешнего вида
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеИХранилища()

	АдресДанныхДиаграммы = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресДанныхНаМесяц   = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);

КонецПроцедуры
 
&НаСервереБезКонтекста
Процедура УправлениеФормой(Форма)


КонецПроцедуры

&НаСервере
Процедура ОбновитьСодержимоеФормы(ОчищатьИсходныеТаблицы, НужнаяДатаКалендаря = Неопределено)

	ПредставлениеВыбранногоМесяца = Формат(ВыбранныйМесяц.ДатаНачала, "ДФ='ММММ гггг ""г.""'");
	Элементы.ГруппаСтраницаРаздела1.Заголовок = ПредставлениеВыбранногоМесяца;
	
	
	Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела3 Тогда
		
		Если ОчищатьИсходныеТаблицы Тогда
			ОчиститьДанныеИХранилища();
			Обработки.ПлановыеОперации.ПрочитатьТаблицуПрогнозаОстатков(ПолучитьПараметрыЗапросаДляПрогноза(), АдресДанныхДиаграммы);
		КонецЕсли; 
		
		ДанныеДляДиаграммы = ПолучитьИзВременногоХранилища(АдресДанныхДиаграммы);
		ВывестиВыборкуПрогнозаВДиаграмму(ДанныеДляДиаграммы.ВыборкаИтогов, ДанныеДляДиаграммы.ТаблицаОперацийПрогноза, ДанныеДляДиаграммы.ИмяГруппировки);
		
	Иначе
		
		Если ОчищатьИсходныеТаблицы Тогда
			ОчиститьДанныеИХранилища();
			Обработки.ПлановыеОперации.ПрочитатьОперацииЗаМесяцИПросроченные(ПолучитьПараметрыЗапросаДляКалендаря(), АдресДанныхНаМесяц);
			ДанныеНаМесяц = ПолучитьИзВременногоХранилища(АдресДанныхНаМесяц);
			// Обновляем таблицу операций
			ТаблицаОпераций.Загрузить(ДанныеНаМесяц.ТаблицаОпераций);
			// Обновляем счетчики и заголовки
			КоличествоОперацийЗаМесяц      = ДанныеНаМесяц.КоличествоЗаМесяц;
			КоличествоОперацийПросроченных = ДанныеНаМесяц.КоличествоПросроченных;
		КонецЕсли; 
		
		Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела1 Тогда
			ЗаполнитьТаблицуКалендаря(НужнаяДатаКалендаря);
		Иначе
			ЗаполнитьТаблицуПросроченных();
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТаблицаОперацийЗаПериод.Количество() > 0 Тогда
		ОбновитьТаблицуОперацийЗаПериод();
	КонецЕсли; 
	
	Заголовок = НСтр("ru = 'Календарь'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
	ТребуетсяОбновитьДанные = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеПриДоступностиВВода()

	Если НЕ ТребуетсяОбновитьДанные Тогда
		Возврат;
	ИначеЕсли ВводДоступен() Тогда
		ОбновитьСодержимоеФормы(Истина);
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеПриДоступностиВВода", 1, Истина);
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ОстановитьОбновлениеВФоне()

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	ФоновоеЗаданиеИдентификатор = Неопределено;

КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьПодсказкуКалендарь()

	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма.КалендарьТакси", , ЭтаФорма);

КонецПроцедуры
 

&НаКлиенте
Функция ПолучитьВыделеннуюОпереацию(ИДСтроки = Неопределено)

	Результат = Новый Структура("Выбран,ИДСтрокиТаблицыОпераций,СтрокаТаблицы,ИмяКолонки,ПлановаяОперация,ШаблонОперации,
			|АктуальнаяДата,ПлановаяДата,Пропустить,Выполнена,СуммаДолга,СуммаПроцентов,СуммаКомиссии,ОписаниеОшибки", Ложь);
			
	Если ИДСтроки <> Неопределено Тогда
		
		Результат.ИДСтрокиТаблицыОпераций = ИДСтроки;
		СтрокаТаблицыОпераций   = ТаблицаОпераций.НайтиПоИдентификатору(Результат.ИДСтрокиТаблицыОпераций);
		Если СтрокаТаблицыОпераций <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицыОпераций);
			Результат.Выбран = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела1 Тогда
		
		// Таблица календаря на месяц
		Результат.СтрокаТаблицы = Элементы.ТаблицаНаМесяц.ТекущаяСтрока;
		Результат.ИмяКолонки    = ?(Элементы.ТаблицаНаМесяц.ТекущийЭлемент = Неопределено, Неопределено, Элементы.ТаблицаНаМесяц.ТекущийЭлемент.Имя);
		Если Элементы.ТаблицаНаМесяц.ТекущиеДанные <> Неопределено Тогда
			ДатаВыбранногоДня = Элементы.ТаблицаНаМесяц.ТекущиеДанные["ДеньНедели" + Прав(Результат.ИмяКолонки, 1)];
			Если Найти(Результат.ИмяКолонки, "ТаблицаНаМесяцПредставлениеОперации") = 1 Тогда
				ИмяПоляИдентификатора   = СтрЗаменить(Результат.ИмяКолонки, "ТаблицаНаМесяцПредставлениеОперации", "ИДСтроки");
				Результат.ИДСтрокиТаблицыОпераций = Элементы.ТаблицаНаМесяц.ТекущиеДанные[ИмяПоляИдентификатора];
				СтрокаТаблицыОпераций   = ТаблицаОпераций.НайтиПоИдентификатору(Результат.ИДСтрокиТаблицыОпераций);
				Если СтрокаТаблицыОпераций <> Неопределено И СтрокаТаблицыОпераций.АктуальнаяДата = ДатаВыбранногоДня Тогда
					ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицыОпераций);
					Результат.Выбран = Истина;
				КонецЕсли;
			Иначе
				Результат.ОписаниеОшибки = НСтр("ru='Не выбран шаблон операции'"); 
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела2 Тогда
		
		// Список просроченных операций
		Результат.СтрокаТаблицы = Элементы.ТаблицаПросроченныхОпераций.ТекущаяСтрока;
		Результат.ИмяКолонки    = ?(Элементы.ТаблицаПросроченныхОпераций.ТекущийЭлемент = Неопределено, Неопределено, Элементы.ТаблицаПросроченныхОпераций.ТекущийЭлемент.Имя);
		Если Элементы.ТаблицаПросроченныхОпераций.ТекущиеДанные <> Неопределено Тогда
			Результат.ИДСтрокиТаблицыОпераций = Элементы.ТаблицаПросроченныхОпераций.ТекущиеДанные.ИДСтрокиТаблицыОпераций;
			СтрокаТаблицыОпераций   = ТаблицаОпераций.НайтиПоИдентификатору(Результат.ИДСтрокиТаблицыОпераций);
			Если СтрокаТаблицыОпераций <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицыОпераций);
				Результат.Выбран = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, ТолькоНеВыполненную = Ложь, ТолькоНеПропущенную = Ложь, РазрешитьНезапланированные = Ложь)

	Если НЕ СтруктураОперации.Выбран Тогда
		Если НЕ РазрешитьНезапланированные Тогда
			ТекстПредупреждения = НСтр("ru = 'Не выбрана операция'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТолькоНеВыполненную И СтруктураОперации.Выполнена = Истина Тогда
		ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить команду, т.к. выбранная операция уже учтена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
		ПоказатьПредупреждение(, ТекстПредупреждения);
		СтруктураОперации.Выбран = Ложь;
	ИначеЕсли ТолькоНеПропущенную И СтруктураОперации.Пропустить = Истина Тогда
		ТекстПредупреждения = НСтр("ru = 'Невозможно выполнить команду, т.к. выбранная операция пропущена.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()); 
		ПоказатьПредупреждение(, ТекстПредупреждения);
		СтруктураОперации.Выбран = Ложь;
	КонецЕсли; 

	Возврат СтруктураОперации.Выбран;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИдентификаторСтрокиВСтруктуреОперации(СтруктураОперации)

	СтрокиТаблицы = ТаблицаОпераций.НайтиСтроки(Новый Структура("ШаблонОперации,ПлановаяДата", СтруктураОперации.ШаблонОперации, СтруктураОперации.ПлановаяДата));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		СтруктураОперации.ИДСтрокиТаблицыОпераций = Неопределено;
	Иначе
		СтруктураОперации.ИДСтрокиТаблицыОпераций = СтрокиТаблицы[0].ПолучитьИдентификатор();
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеПлановойОперации(Знач Операция, Знач АктуальнаяДата, Знач Проведен, Знач Пропустить)

	Результат = "";
	ДатаСтрокой = Формат(АктуальнаяДата, "ДФ=дд.ММ.гггг");
	Если Проведен Тогда
		Результат = НСтр("ru = 'Учтена'") + " " + ДатаСтрокой;
	ИначеЕсли Пропустить Тогда
		Результат = НСтр("ru = 'Пропущена'") + " " + ДатаСтрокой;
	ИначеЕсли ЗначениеЗаполнено(Операция) Тогда
		Результат = НСтр("ru = 'Введен черновик'") + " " + ДатаСтрокой;
	Иначе
		Результат = НСтр("ru = 'Запланирована на'") + " " + ДатаСтрокой;
	КонецЕсли; 

	Если АктуальнаяДата < НачалоДня(ДеньгиКлиентСервер.ЗначениеТекущейДаты()) И НЕ Проведен И НЕ Пропустить Тогда
		Результат = Результат + " " + НСтр("ru = '(просрочено)'");
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции
 

// Заполнение и вывод календаря и списка просроченных операций
#Область РаботаСКалендаремИПросроченными

&НаСервере
Процедура СоздатьКолонкиТаблицы()

	УдаляемыеРеквизиты    = Новый Массив;
	ДобавляемыеРеквизиты  = Новый Массив;
	
	РеквизитыТаблицы = ПолучитьРеквизиты("ТаблицаНаМесяц");
	Для Каждого РеквизитТаблицы Из РеквизитыТаблицы Цикл
		Если Найти(РеквизитТаблицы.Имя, "ПредставлениеОперации") = 1 Тогда
			УдаляемыеРеквизиты.Добавить("ТаблицаНаМесяц." + РеквизитТаблицы.Имя);
			ЭлементРеквизита = Элементы.Найти("ТаблицаНаМесяц" + РеквизитТаблицы.Имя);
			Если ЭлементРеквизита <> Неопределено Тогда
				Элементы.Удалить(ЭлементРеквизита);
			КонецЕсли; 
		КонецЕсли; 
		Если Найти(РеквизитТаблицы.Имя, "СсылкаОперации") = 1 Тогда
			УдаляемыеРеквизиты.Добавить("ТаблицаНаМесяц." + РеквизитТаблицы.Имя);
		КонецЕсли; 
		Если Найти(РеквизитТаблицы.Имя, "Пропустить") = 1 Тогда
			УдаляемыеРеквизиты.Добавить("ТаблицаНаМесяц." + РеквизитТаблицы.Имя);
		КонецЕсли; 
		Если Найти(РеквизитТаблицы.Имя, "Проведен") = 1 Тогда
			УдаляемыеРеквизиты.Добавить("ТаблицаНаМесяц." + РеквизитТаблицы.Имя);
		КонецЕсли; 
		Если Найти(РеквизитТаблицы.Имя, "ТипПоказателя") = 1 Тогда
			УдаляемыеРеквизиты.Добавить("ТаблицаНаМесяц." + РеквизитТаблицы.Имя);
		КонецЕсли; 
		Если Найти(РеквизитТаблицы.Имя, "Просрочено") = 1 Тогда
			УдаляемыеРеквизиты.Добавить("ТаблицаНаМесяц." + РеквизитТаблицы.Имя);
		КонецЕсли; 
		Если Найти(РеквизитТаблицы.Имя, "ИДСтроки") = 1 Тогда
			УдаляемыеРеквизиты.Добавить("ТаблицаНаМесяц." + РеквизитТаблицы.Имя);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаголовкиДнейНедели = Новый Соответствие;
	ЗаголовкиДнейНедели.Вставить(1, НСтр("ru='пн.'"));
	ЗаголовкиДнейНедели.Вставить(2, НСтр("ru='вт.'"));
	ЗаголовкиДнейНедели.Вставить(3, НСтр("ru='ср.'"));
	ЗаголовкиДнейНедели.Вставить(4, НСтр("ru='чт.'"));
	ЗаголовкиДнейНедели.Вставить(5, НСтр("ru='пт.'"));
	ЗаголовкиДнейНедели.Вставить(6, НСтр("ru='сб.'"));
	ЗаголовкиДнейНедели.Вставить(7, НСтр("ru='вс.'"));
	
	Для СчетчикСтрок = 1 По МаксимальноеКоличествоСтрок - 1 Цикл
		Для СчетчикДней = 1 По 7 Цикл
			ИмяРеквизита = "ПредставлениеОперации" + СчетчикСтрок + "День" + СчетчикДней;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"), "ТаблицаНаМесяц", "Операция " + СчетчикСтрок + " за " + ЗаголовкиДнейНедели[СчетчикДней]));
			ИмяРеквизита = "СсылкаОперации" + СчетчикСтрок + "День" + СчетчикДней;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов(Документы.ТипВсеСсылки()), "ТаблицаНаМесяц"));
			ИмяРеквизита = "Пропустить" + СчетчикСтрок + "День" + СчетчикДней;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"), "ТаблицаНаМесяц"));
			ИмяРеквизита = "Проведен" + СчетчикСтрок + "День" + СчетчикДней;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"), "ТаблицаНаМесяц"));
			ИмяРеквизита = "ТипПоказателя" + СчетчикСтрок + "День" + СчетчикДней;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"), "ТаблицаНаМесяц"));
			ИмяРеквизита = "Просрочено" + СчетчикСтрок + "День" + СчетчикДней;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"), "ТаблицаНаМесяц"));
			ИмяРеквизита = "ИДСтроки" + СчетчикСтрок + "День" + СчетчикДней;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Число"), "ТаблицаНаМесяц"));
		КонецЦикла; 
	КонецЦикла;                                 
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	МассивУдаляемыхОформлений = Новый Массив;
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если Найти(ЭлементОформления.Представление, "АвтоНастройка") = 1 Тогда
			МассивУдаляемыхОформлений.Добавить(ЭлементОформления);
		КонецЕсли;
	КонецЦикла; 
	Для Каждого ЭлементОформления Из МассивУдаляемыхОформлений Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементОформления);
	КонецЦикла; 
	
	ШиринаЭлемента = Элементы.ТаблицаНаМесяцДеньНедели1.Ширина;
	СчетчикЭлементов = 0;
	Для Каждого НовыйРеквизит Из ДобавляемыеРеквизиты Цикл
		
		Если Найти(НовыйРеквизит.Имя, "ПредставлениеОперации") = 1 Тогда
			
			СчетчикЭлементов = СчетчикЭлементов + 1;
			НомерДня = Прав(НовыйРеквизит.Имя, 1);
			
			ЭлементТекста    = Элементы["ТаблицаНаМесяцТекст" + НомерДня];
			ГруппаКолонок    = Элементы["ТаблицаНаМесяцГруппа" + НомерДня];
			ЭлементРеквизита = Элементы.Вставить("ТаблицаНаМесяц" + НовыйРеквизит.Имя, Тип("ПолеФормы"), ГруппаКолонок, ЭлементТекста);
			ЭлементРеквизита.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементРеквизита.ПутьКДанным = "ТаблицаНаМесяц." + НовыйРеквизит.Имя;
			ЭлементРеквизита.ОтображатьВШапке = Ложь;
			//ЭлементРеквизита.Гиперссылка = Истина;
			//ЭлементРеквизита.ГиперссылкаЯчейки = Истина;
			ЭлементРеквизита.Видимость= Истина;
			ЭлементРеквизита.Доступность = Истина;
			ЭлементРеквизита.Ширина = ШиринаЭлемента;
			ЭлементРеквизита.Шрифт = Новый Шрифт(,7);
			ЭлементРеквизита.РастягиватьПоГоризонтали = Истина;
			
			// Проведен
			ИмяПоляОтбора = СтрЗаменить(НовыйРеквизит.Имя, "ПредставлениеОперации", "Проведен");
			Оформление1 = УсловноеОформление.Элементы.Добавить();
			Оформление1.Представление = "АвтоНастройка_1_" + СчетчикЭлементов;
			Оформление1.Использование = Истина;
			ОтборОформления1 = Оформление1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборОформления1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц." + ИмяПоляОтбора);
			ОтборОформления1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборОформления1.ПравоеЗначение = Истина;
			Оформление1Шрифт = Оформление1.Оформление.Элементы.Найти("Шрифт");
			Оформление1Шрифт.Значение = Новый Шрифт(,,,,,Истина);  // Зачеркнутый
			Оформление1Шрифт.Использование = Истина;
			ПолеПредставления = Оформление1.Поля.Элементы.Добавить();
			ПолеПредставления.Использование = Истина;
			ПолеПредставления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц" + НовыйРеквизит.Имя);
			
			// Операция пропущена
			ИмяПоляОтбора = СтрЗаменить(НовыйРеквизит.Имя, "ПредставлениеОперации", "Пропустить");
			Оформление1 = УсловноеОформление.Элементы.Добавить();
			Оформление1.Представление = "АвтоНастройка_2_" + СчетчикЭлементов;
			Оформление1.Использование = Истина;
			ОтборОформления1 = Оформление1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборОформления1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц." + ИмяПоляОтбора);
			ОтборОформления1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборОформления1.ПравоеЗначение = Истина;
			Оформление1Шрифт = Оформление1.Оформление.Элементы.Найти("Шрифт");
			Оформление1Шрифт.Значение = Новый Шрифт(,,,Истина,,Истина);  // Наклонный, Зачеркнутый
			Оформление1Шрифт.Использование = Истина;
			Оформление1ЦветТекста = Оформление1.Оформление.Элементы.Найти("ЦветТекста");
			Оформление1ЦветТекста.Значение = WebЦвета.СинийСоСтальнымОттенком;
			Оформление1ЦветТекста.Использование = Истина;
			ПолеПредставления = Оформление1.Поля.Элементы.Добавить();
			ПолеПредставления.Использование = Истина;
			ПолеПредставления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц" + НовыйРеквизит.Имя);
			
			// Операция просрочена
			ИмяПоляОтбора = СтрЗаменить(НовыйРеквизит.Имя, "ПредставлениеОперации", "Просрочено");
			Оформление1 = УсловноеОформление.Элементы.Добавить();
			Оформление1.Представление = "АвтоНастройка_3_" + СчетчикЭлементов;
			Оформление1.Использование = Истина;
			ОтборОформления1 = Оформление1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборОформления1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц." + ИмяПоляОтбора);
			ОтборОформления1.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборОформления1.ПравоеЗначение = Истина;
			Оформление1ЦветТекста = Оформление1.Оформление.Элементы.Найти("ЦветТекста");
			Оформление1ЦветТекста.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
			Оформление1ЦветТекста.Использование = Истина;
			ПолеПредставления = Оформление1.Поля.Элементы.Добавить();
			ПолеПредставления.Использование = Истина;
			ПолеПредставления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц" + НовыйРеквизит.Имя);
			
		КонецЕсли;
		
	КонецЦикла; 

	// Условное оформление для дней предыдущего месяца:
	Для СчетчикДней = 1 По 7 Цикл
		
		// Предыдущий месяц
		Оформление1 = УсловноеОформление.Элементы.Добавить();
		Оформление1.Представление = "АвтоНастройка_2_" + СчетчикДней;
		Оформление1.Использование = Истина;
		
		ОтборОформления1 = Оформление1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОформления1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц.ДеньНедели" + СчетчикДней);
		ОтборОформления1.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ОтборОформления1.ПравоеЗначение =  Новый ПолеКомпоновкиДанных("ВыбранныйМесяц.ДатаНачала");
		
		Оформление1Шрифт = Оформление1.Оформление.Элементы.Найти("ЦветФона");
		Оформление1Шрифт.Значение = ЦветаСтиля.ПользовательВыбранный;
		Оформление1Шрифт.Использование = Истина;
		
		Для СчетчикСтрок = 1 По МаксимальноеКоличествоСтрок - 1 Цикл
			ПолеПредставления = Оформление1.Поля.Элементы.Добавить();
			ПолеПредставления.Использование = Истина;
			ПолеПредставления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяцПредставлениеОперации" + СчетчикСтрок + "День" + СчетчикДней);
		КонецЦикла; 
		ПолеПредставления = Оформление1.Поля.Элементы.Добавить();
		ПолеПредставления.Использование = Истина;
		ПолеПредставления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяцТекст" + СчетчикДней);
		
	КонецЦикла; 
	
	// Условное оформление для дней следующего месяца:
	Для СчетчикДней = 1 По 7 Цикл
		
		// Предыдущий месяц
		Оформление1 = УсловноеОформление.Элементы.Добавить();
		Оформление1.Представление = "АвтоНастройка_3_" + СчетчикДней;
		Оформление1.Использование = Истина;
		
		ОтборОформления1 = Оформление1.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОформления1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяц.ДеньНедели" + СчетчикДней);
		ОтборОформления1.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ОтборОформления1.ПравоеЗначение =  Новый ПолеКомпоновкиДанных("ВыбранныйМесяц.ДатаОкончания");
		
		Оформление1Шрифт = Оформление1.Оформление.Элементы.Найти("ЦветФона");
		Оформление1Шрифт.Значение = ЦветаСтиля.ПользовательВыбранный;
		Оформление1Шрифт.Использование = Истина;
		
		Для СчетчикСтрок = 1 По МаксимальноеКоличествоСтрок - 1 Цикл
			ПолеПредставления = Оформление1.Поля.Элементы.Добавить();
			ПолеПредставления.Использование = Истина;
			ПолеПредставления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяцПредставлениеОперации" + СчетчикСтрок + "День" + СчетчикДней);
		КонецЦикла; 
		ПолеПредставления = Оформление1.Поля.Элементы.Добавить();
		ПолеПредставления.Использование = Истина;
		ПолеПредставления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНаМесяцТекст" + СчетчикДней);
		
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьПараметрыЗапросаДляКалендаря()

	Результат = Новый Структура;
	Результат.Вставить("ТекущийМомент",  НачалоПрогноза);
	Результат.Вставить("ВыбранныйМесяц", ВыбранныйМесяц);
	Результат.Вставить("ВалютаУчета",    ВалютаУчета);

	Возврат Результат;
	
КонецФункции

// Заполняет таблицу "ТаблицаНаМесяц" строками из "ТаблицаОпераций"
&НаСервере
Процедура ЗаполнитьТаблицуКалендаря(ДатаМесяца = Неопределено)

	// Если новая дата не указана, запомним текущее число
	Если НЕ ЗначениеЗаполнено(ДатаМесяца) Тогда
		Если Элементы.ТаблицаНаМесяц.ТекущаяСтрока = Неопределено Тогда
			ДатаМесяца = ТекущаяДатаСеанса();
		Иначе
			ДанныеСтроки = ТаблицаНаМесяц.НайтиПоИдентификатору(Элементы.ТаблицаНаМесяц.ТекущаяСтрока);
			Если ДанныеСтроки = Неопределено Тогда
				ДатаМесяца = ТекущаяДатаСеанса();
			Иначе
				НомерДняНедели = Прав(Элементы.ТаблицаНаМесяц.ТекущийЭлемент.Имя, 1);
				ДатаМесяца     = ДанныеСтроки["ДеньНедели" + НомерДняНедели];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДатаМесяца = НачалоДня(ДатаМесяца);
	НомерДняМесяца   = День(ДатаМесяца);
	НомерМесяца      = Месяц(ДатаМесяца);
	
	// Идентификатор строки таблицы операций
	ИДСтрокиТаблицыОпераций = Неопределено;
	Если Элементы.ТаблицаНаМесяц.ТекущаяСтрока <> Неопределено И Элементы.ТаблицаНаМесяц.ТекущийЭлемент <> Неопределено Тогда
		ДанныеСтроки = ТаблицаНаМесяц.НайтиПоИдентификатору(Элементы.ТаблицаНаМесяц.ТекущаяСтрока);
		Если ДанныеСтроки <> Неопределено И Найти(Элементы.ТаблицаНаМесяц.ТекущийЭлемент.Имя, "ПредставлениеОперации") > 0 Тогда
			ИмяИДСтроки = СтрЗаменить(Элементы.ТаблицаНаМесяц.ТекущийЭлемент.Имя, "ТаблицаНаМесяц", "");
			ИмяИДСтроки = СтрЗаменить(ИмяИДСтроки, "ПредставлениеОперации", "ИДСтроки");
			ИДСтрокиТаблицыОпераций = ДанныеСтроки[ИмяИДСтроки];
		КонецЕсли;
	КонецЕсли;
	 
	ТаблицаНаМесяц.Очистить();
	
	
	// Заполнение таблицы календаря данными
	НачальнаяДата = НачалоНедели(ВыбранныйМесяц.ДатаНачала);
	КонечнаяДата = КонецНедели(ВыбранныйМесяц.ДатаОкончания);
	ВыводимаяДата = НачальнаяДата;
	НомерНедели = 0;
	
	// Заполняем "группы строк" по неделям
	Пока КонецНедели(ВыводимаяДата) <= КонечнаяДата Цикл
		
		НомерНедели = НомерНедели + 1;
		НомерСтрокиВНеделе = 0;
		ДатаКонцаНедели = КонецНедели(ВыводимаяДата);
		
		СтрокаЗаголовкаНедели = ТаблицаНаМесяц.Добавить();
		СтрокаЗаголовкаНедели.НомерНедели = НомерНедели;
		
		// добавляем в группы строки по дням недели 
		Пока КонецДня(ВыводимаяДата) <= ДатаКонцаНедели Цикл
			
			НомерДня = ДеньНедели(ВыводимаяДата);
			ИмяПоляДняНедели = "ДеньНедели" + НомерДня;
			СтрокаЗаголовкаНедели[ИмяПоляДняНедели] = ВыводимаяДата;
			
			ОперацииДня = ТаблицаОпераций.НайтиСтроки(Новый Структура("АктуальнаяДата", ВыводимаяДата));
			ВыведеноСтрок = 1;
			Для Каждого СтрокаОперации Из ОперацииДня Цикл
				
				ИмяПоляПредставления = "ПредставлениеОперации" + ВыведеноСтрок + "День" + НомерДня;
				ИмяПоляСсылки        = "СсылкаОперации" + ВыведеноСтрок + "День" + НомерДня;
				ИмяПоляПропустить    = "Пропустить" + ВыведеноСтрок + "День" + НомерДня;
				ИмяПоляПроведен      = "Проведен" + ВыведеноСтрок + "День" + НомерДня;
				ИмяПоляТип           = "ТипПоказателя" + ВыведеноСтрок + "День" + НомерДня;
				ИмяПоляПросрочено    = "Просрочено" + ВыведеноСтрок + "День" + НомерДня;
				ИмяПоляИДСтроки      = "ИДСтроки" + ВыведеноСтрок + "День" + НомерДня;
				Если СтрокаОперации.СуммаПоступления <> 0 И СтрокаОперации.СуммаСписания <> 0  Тогда
					Если (СтрокаОперации.СуммаПоступления = СтрокаОперации.СуммаСписания ИЛИ СтрокаОперации.СуммаПоступления = -СтрокаОперации.СуммаСписания) И СтрокаОперации.ВалютаПоступления = СтрокаОперации.ВалютаСписания Тогда
						СуммаОперации  =  "±" + Формат(СтрокаОперации.СуммаПоступления, "ЧДЦ=2") + " " + СтрокаОперации.ВалютаПоступления; 
					Иначе
						СуммаОперации  =  "+" + Формат(СтрокаОперации.СуммаПоступления, "ЧДЦ=2") + " " + СтрокаОперации.ВалютаПоступления 
									+ "-" + Формат(СтрокаОперации.СуммаСписания, "ЧДЦ=2") + " " + СтрокаОперации.ВалютаСписания; 
					КонецЕсли; 
					СтрокаЗаголовкаНедели[ИмяПоляТип]    = "Перемещение";
				ИначеЕсли СтрокаОперации.СуммаПоступления <> 0  Тогда
					СуммаОперации  =  "+" + Формат(СтрокаОперации.СуммаПоступления, "ЧДЦ=2") + " " + СтрокаОперации.ВалютаПоступления; 
					СтрокаЗаголовкаНедели[ИмяПоляТип]    = "Поступление";
				ИначеЕсли СтрокаОперации.СуммаСписания <> 0  Тогда
					СуммаОперации  =  "-" + Формат(СтрокаОперации.СуммаСписания, "ЧДЦ=2") + " " + СтрокаОперации.ВалютаСписания;
					СтрокаЗаголовкаНедели[ИмяПоляТип]    = "Списание";
				Иначе //Если СтрокаОперации.СуммаПоступления = 0 И СтрокаОперации.СуммаСписания = 0  Тогда
					Если СтрокаОперации.ВалютаПоступления = СтрокаОперации.ВалютаСписания 
						Или Не ЗначениеЗаполнено(СтрокаОперации.ВалютаПоступления) 
						Или Не ЗначениеЗаполнено(СтрокаОперации.ВалютаСписания) Тогда
						СуммаОперации  =  "" + Формат(СтрокаОперации.СуммаПоступления, "ЧДЦ=2; ЧН=") + " " + ?(ЗначениеЗаполнено(СтрокаОперации.ВалютаПоступления), СтрокаОперации.ВалютаПоступления, СтрокаОперации.ВалютаСписания); 
					Иначе
						СуммаОперации  =  "+" + Формат(СтрокаОперации.СуммаПоступления, "ЧДЦ=2; ЧН=") + " " + СтрокаОперации.ВалютаПоступления 
									+ "-" + Формат(СтрокаОперации.СуммаСписания, "ЧДЦ=2; ЧН=") + " " + СтрокаОперации.ВалютаСписания; 
					КонецЕсли; 
					СтрокаЗаголовкаНедели[ИмяПоляТип]    = "Перемещение";
				КонецЕсли;
				
				Если СтрокаОперации.Пропустить Тогда
					ТекстСостояния = НСтр("ru = 'пропущено'");
				ИначеЕсли СтрокаОперации.Выполнена Тогда
					ТекстСостояния = НСтр("ru = 'учтено'");
				ИначеЕсли ЗначениеЗаполнено(СтрокаОперации.ПлановаяОперация) Тогда
					ТекстСостояния = НСтр("ru = 'создано, но не учтено'");
				Иначе
					ТекстСостояния = "";
				КонецЕсли; 
				Если СтрокаОперации.Просрочена Тогда
					ТекстСостояния = ТекстСостояния + ?(ТекстСостояния = "", "", ", ") + НСтр("ru = 'просрочено'");
				КонецЕсли; 
				Если ТекстСостояния <> "" Тогда
					ТекстСостояния = " (" + ТекстСостояния + ")";
				КонецЕсли; 
				
				СтрокаЗаголовкаНедели[ИмяПоляСсылки]        = СтрокаОперации.ШаблонОперации;
				СтрокаЗаголовкаНедели[ИмяПоляПредставления] = СуммаОперации + " " + СтрокаОперации.ШаблонОперации + ТекстСостояния;
				СтрокаЗаголовкаНедели[ИмяПоляПроведен]      = СтрокаОперации.Выполнена;
				СтрокаЗаголовкаНедели[ИмяПоляПропустить]    = СтрокаОперации.Пропустить;
				СтрокаЗаголовкаНедели[ИмяПоляПросрочено]    = СтрокаОперации.Просрочена;
				СтрокаЗаголовкаНедели[ИмяПоляИДСтроки]      = СтрокаОперации.ПолучитьИдентификатор();
				
				Если ВыведеноСтрок >= МаксимальноеКоличествоСтрок - 1 Тогда
					Прервать;
				КонецЕсли; 
				
				ВыведеноСтрок = ВыведеноСтрок + 1;
				
			КонецЦикла; 
			
			Если ОперацииДня.Количество() > ВыведеноСтрок Тогда
				ТекстЕще = НСтр("ru = 'Еще %1 операций'");
				ТекстЕще = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЕще, ОперацииДня.Количество() - ВыведеноСтрок);
				СтрокаЗаголовкаНедели["Текст" + НомерДня] = ТекстЕще;
			КонецЕсли; 
			
			ВыводимаяДата = НачалоДня(КонецДня(ВыводимаяДата) + 1);
			
		КонецЦикла; 
	
	КонецЦикла; 
	
	Если ДатаМесяца < НачалоНедели(ВыбранныйМесяц.ДатаНачала) ИЛИ ДатаМесяца > КонецНедели(ВыбранныйМесяц.ДатаОкончания) Тогда
		ДатаМесяца = Дата(Год(ВыбранныйМесяц.ДатаНачала), Месяц(ВыбранныйМесяц.ДатаНачала), Мин(НомерДняМесяца, День(ВыбранныйМесяц.ДатаОкончания)));
	КонецЕсли;
	НомерДняНедели = ДеньНедели(ДатаМесяца);
	
	СтрокаТаблицы = ТаблицаНаМесяц.НайтиСтроки(Новый Структура("ДеньНедели" + НомерДняНедели, ДатаМесяца));
	Если СтрокаТаблицы.Количество() > 0 Тогда
		Элементы.ТаблицаНаМесяц.ТекущаяСтрока  = СтрокаТаблицы[0].ПолучитьИдентификатор();
		Элементы.ТаблицаНаМесяц.ТекущийЭлемент = Элементы["ТаблицаНаМесяцПредставлениеОперации1День" + НомерДняНедели];
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу "ТаблицаПросроченныхОпераций" строками из "ТаблицаОпераций"
&НаСервере
Процедура ЗаполнитьТаблицуПросроченных()

	ТаблицаПросроченныхОпераций.Очистить();
	ПросроченныеОперации = ТаблицаОпераций.НайтиСтроки(Новый Структура("Просрочена", Истина));
	Для Каждого СтрокаПросроченных Из ПросроченныеОперации Цикл
		НоваяСтрока = ТаблицаПросроченныхОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПросроченных);
		НоваяСтрока.ИДСтрокиТаблицыОпераций = СтрокаПросроченных.ПолучитьИдентификатор();
		НоваяСтрока.ОписаниеПлановойОперации = ПолучитьОписаниеПлановойОперации(СтрокаПросроченных.ПлановаяОперация, СтрокаПросроченных.АктуальнаяДата, 
				СтрокаПросроченных.Выполнена, СтрокаПросроченных.Пропустить);
	КонецЦикла; 

	КоличествоОперацийПросроченных = ТаблицаПросроченныхОпераций.Количество();
	
КонецПроцедуры

 
#КонецОбласти


// Заполнение и вывод диаграммы прогноза
#Область РаботаСДиаграммойПрогноза

&НаСервере
Процедура ПодготовитьДиаграмму()


	// Остатки денег по кошелькам:
	ДиаграммаОстатков.Обновление = Ложь;
	ДиаграммаОстатков.ТипДиаграммы                    = ?(ЗаливатьОбластиДиаграммы, ТипДиаграммы.ГрафикСОбластями, ТипДиаграммы.График);
	ДиаграммаОстатков.Рамка                           = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ДиаграммаОстатков.ЦветФона                        = ЦветаСтиля.ЦветФонаФормы;
	ДиаграммаОстатков.ПрозрачныйФон                   = Истина;
	ДиаграммаОстатков.ОтображатьЗаголовок             = Ложь;
	ДиаграммаОстатков.ВидПодписей                     = ВидПодписейКДиаграмме.Нет;
	ДиаграммаОстатков.ПоложениеПодписей               = ПоложениеПодписейКДиаграмме.КрайАвто;
	ДиаграммаОстатков.ФорматПроцентовВПодписях        = "ЧДЦ=1; ЧН=0; ЧГ=";
	ДиаграммаОстатков.ФорматЗначенийВПодписях         = "ЧДЦ=2; ЧРГ=' '; ЧГ=3,0";
	ДиаграммаОстатков.Градиент                        = Истина;
	ДиаграммаОстатков.ОбластьПостроения.ПрозрачныйФон = Истина;
	ДиаграммаОстатков.БазовоеЗначение                 = 0;
	ДиаграммаОстатков.ПропускатьБазовоеЗначение       = Ложь;
	ДиаграммаОстатков.РежимПолупрозрачности           = РежимПолупрозрачностиДиаграммы.Использовать;
	ДиаграммаОстатков.ПроцентПолупрозрачности         = 80;
	ДиаграммаОстатков.АвтоТранспонирование            = Истина;
	
	ДиаграммаОстатков.ОтображатьЛегенду               = Истина;
	ДиаграммаОстатков.ОбластьЛегенды.ПрозрачныйФон    = Истина;
	ДиаграммаОстатков.ОбластьЛегенды.Прокрутка        = Истина;
	ДиаграммаОстатков.ОбластьЛегенды.Шрифт            = Новый Шрифт(,7);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыЗапросаДляПрогноза()

	Результат = Новый Структура;
	Результат.Вставить("НачалоПрогноза",             НачалоПрогноза);
	Результат.Вставить("ОкончаниеПрогноза",          ПолучитьКонецПериодаПрогноза(НачалоПрогноза, ВидСрокаПрогноза));
	Результат.Вставить("ВалютаУчета",                ВалютаУчета);
	Результат.Вставить("ВалютаОтчета",               ВалютаОтчета);
	Результат.Вставить("ВидСрокаПрогноза",           ВидСрокаПрогноза);
	Результат.Вставить("СпособОтбораКошельков",      СпособОтбораКошельков);
	Результат.Вставить("СпособГруппировкиПрогноза",  СпособГруппировкиПрогноза);
	Результат.Вставить("СписокКошельковДляПрогноза", СписокКошельковДляПрогноза);

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКонецПериодаПрогноза(Знач НачалоПрогноза, Знач ВидПериода)

	Если ВидПериода = 0 Тогда
		Возврат НачалоДня(КонецНедели(НачалоПрогноза));
	ИначеЕсли ВидПериода = 1 Тогда
		Возврат НачалоДня(КонецНедели(КонецНедели(НачалоПрогноза) + 1));
	ИначеЕсли ВидПериода = 3 Тогда
		Возврат НачалоДня(ДобавитьМесяц(НачалоПрогноза, 1));
	ИначеЕсли ВидПериода = 4 Тогда
		Возврат НачалоДня(ДобавитьМесяц(НачалоПрогноза, 2));
	ИначеЕсли ВидПериода = 5 Тогда
		Возврат НачалоДня(ДобавитьМесяц(НачалоПрогноза, 3));
	ИначеЕсли ВидПериода = 6 Тогда
		Возврат НачалоДня(ДобавитьМесяц(НачалоПрогноза, 6));
	ИначеЕсли ВидПериода = 7 Тогда
		Возврат НачалоДня(ДобавитьМесяц(НачалоПрогноза, 12));
	КонецЕсли; 

КонецФункции
 
&НаСервере
Процедура ВывестиВыборкуПрогнозаВДиаграмму(ВыборкаИтогов, ТаблицаОперацийПрогноза, ИмяГруппировки)

	ДиаграммаОстатков.Обновление = Ложь;
	ДиаграммаОстатков.Очистить();
	
	ПредыдущаяДата = НачалоДня(НачалоДня(ТекущаяДатаСеанса()) - 10);
	СтрокаФорматаДаты = ?(ВидСрокаПрогноза > 5, "ДФ='ММММ гггг'", "ДФ='дд.ММ, ддд'");
	
	ДиаграммаОстатков.ТипДиаграммы  = ?(ЗаливатьОбластиДиаграммы, ТипДиаграммы.ГрафикСОбластями, ТипДиаграммы.График);
	
	Пока ВыборкаИтогов.Следующий() Цикл
		
		ОстатокВВалюте  = 0;
		ОстатокИтоговый = 0;
		ЗначениеКлючевогоПоля = ?(ИмяГруппировки = "ОБЩИЕ", Неопределено,ВыборкаИтогов[ИмяГруппировки]);
		ТипЗаписиИтога = ВыборкаИтогов.ТипЗаписи();
		
		Если ИмяГруппировки = "ОБЩИЕ" Тогда
			ПредставлениеКлючевогоПоля = НСтр("ru = 'Остатки по всем кошелькам'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИначеЕсли ИмяГруппировки = "ДляНакоплений" Тогда
			ПредставлениеКлючевогоПоля = ?(ЗначениеКлючевогоПоля = Истина, 
						НСтр("ru = 'Накопления'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
						НСтр("ru = 'Свободные деньги'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		ИначеЕсли ИмяГруппировки = "Группа" Тогда
			ПредставлениеКлючевогоПоля = ?(ЗначениеЗаполнено(ЗначениеКлючевогоПоля), 
						Строка(ЗначениеКлючевогоПоля), 
						НСтр("ru = '<Без группы>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Иначе
			ПредставлениеКлючевогоПоля = Строка(ЗначениеКлючевогоПоля);
		КонецЕсли; 
		
		СерияГруппировки = ДиаграммаОстатков.УстановитьСерию(ЗначениеКлючевогоПоля);
		
		Если СерияГруппировки = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		СерияГруппировки.Текст = ПредставлениеКлючевогоПоля;
		
		ВыборкаДат = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Дата", "Все");
		Перваядата = Истина;
		Пока ВыборкаДат.Следующий() Цикл
		
			Если Перваядата Тогда
				
				ОстатокИтоговый = ?(ЗначениеЗаполнено(ВыборкаДат.ОстатокНаНачало), ВыборкаДат.ОстатокНаНачало, 0);
				ОстатокВВалюте  = ?(ЗначениеЗаполнено(ВыборкаДат.ОстатокНаНачалоВВалюте), ВыборкаДат.ОстатокНаНачалоВВалюте, 0);
				СуммаСтрокой    = ?(ИмяГруппировки = "Кошелек" И ТипЗаписиИтога = ТипЗаписиЗапроса.ИтогПоГруппировке, 
								Формат(ОстатокВВалюте, "ЧДЦ=2; ЧН=0") + " " + ВыборкаИтогов.Валюта,
								Формат(ОстатокИтоговый, "ЧДЦ=2; ЧН=0") + " " + ВалютаОтчета);
				
				ТочкаДаты = ДиаграммаОстатков.УстановитьТочку(ПредыдущаяДата);
				ТочкаДаты.Текст = НСтр("ru = 'На начало'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ДиаграммаОстатков.УстановитьЗначение(
					ТочкаДаты,
					СерияГруппировки,
					ВыборкаДат.ОстатокНаНачало,
					Новый Структура("ТипЗначения, КлючевоеПоле, Дата", "ОстатокНаНачало", ЗначениеКлючевогоПоля, ПредыдущаяДата), // Расшифровка
					"" + ПредставлениеКлючевогоПоля + ", " + ТочкаДаты.Текст + ": " + СуммаСтрокой  ); // Подсказка
				
				Перваядата = Ложь;
			КонецЕсли; 
		
			ОстатокИтоговый = ОстатокИтоговый + ?(ЗначениеЗаполнено(ВыборкаДат.СуммаОборота), ВыборкаДат.СуммаОборота, 0);
			ОстатокВВалюте  = ОстатокВВалюте + ?(ЗначениеЗаполнено(ВыборкаДат.СуммаОборотаВВалюте), ВыборкаДат.СуммаОборотаВВалюте, 0);
			СуммаСтрокой    = ?(ИмяГруппировки = "Кошелек" И ТипЗаписиИтога = ТипЗаписиЗапроса.ИтогПоГруппировке, 
							Формат(ОстатокВВалюте, "ЧДЦ=2; ЧН=0") + " " + ВыборкаИтогов.Валюта,
							Формат(ОстатокИтоговый, "ЧДЦ=2; ЧН=0") + " " + ВалютаОтчета);
							
			ТочкаДаты = ДиаграммаОстатков.УстановитьТочку(ВыборкаДат.Дата);
			ТочкаДаты.Текст = формат(ВыборкаДат.Дата, СтрокаФорматаДаты);
			ДиаграммаОстатков.УстановитьЗначение(
				ТочкаДаты,
				СерияГруппировки,
				ОстатокИтоговый,
				Новый Структура("ТипЗначения, КлючевоеПоле, Дата", "Остаток", ЗначениеКлючевогоПоля, ВыборкаДат.Дата), // Расшифровка
				"" + ПредставлениеКлючевогоПоля + ", " + ТочкаДаты.Текст + ", " + НСтр("ru = 'Остаток'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + ": " + СуммаСтрокой); // Подсказка
				
			ВыборкаОпераций = ВыборкаДат.Выбрать();
			Пока ВыборкаОпераций.Следующий() Цикл
				Если ВыборкаОпераций.ЭтоПлановаяОперация = Истина Тогда
					СтрокаТаблицыПрогноза = ТаблицаОперацийПрогноза.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПрогноза, ВыборкаОпераций);
					СтрокаТаблицыПрогноза.КлючевоеПоле = ЗначениеКлючевогоПоля;
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла; 

КонецПроцедуры
 

#КонецОбласти


// Заполнение и открытие списка операций за период (из календаря или из диаграммы прогноза)
#Область СписокОперацийЗаПериод

&НаСервере
Процедура ОбновитьТаблицуОперацийЗаПериод()

	ТаблицаОперацийЗаПериод.Очистить();
	
	Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела3 Тогда
		
		СтруктураИзХранилища = ПолучитьИзВременногоХранилища(АдресДанныхДиаграммы);
		Если СтруктураИзХранилища = Неопределено  Тогда
			Возврат;
		КонецЕсли; 
		
		ТаблицаОперацийПрогноза = СтруктураИзХранилища.ТаблицаОперацийПрогноза;
		ВремТаблица = ТаблицаОперацийЗаПериод.Выгрузить();
		СтрокиПрогноза = ТаблицаОперацийПрогноза.НайтиСтроки(Новый Структура("КлючевоеПоле,Дата", ПрогнозЗначениеКлючевогоПоля, ПрогнозВыбраннаяДата));
		
		Для Каждого СтрокаПрогноза Из СтрокиПрогноза Цикл
			
			СтрокаИзменения = ВремТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзменения, СтрокаПрогноза);
			
			СтрокаИзменения.ОписаниеПлановойОперации = ПолучитьОписаниеПлановойОперации(СтрокаИзменения.ПлановаяОперация, СтрокаИзменения.АктуальнаяДата,
					СтрокаИзменения.Выполнена, СтрокаИзменения.Пропустить);
			
		КонецЦикла;
		
		ВремТаблица.Свернуть("ШаблонОперации,ПлановаяДата,АктуальнаяДата,ПлановаяОперация,Пропустить,Выполнена,
				|ВалютаПоступления,ВалютаСписания,СуммаДолга,СуммаПроцентов,СуммаКомиссии,Просрочена,
				|ИДСтрокиТаблицыОпераций,ОписаниеПлановойОперации", "СуммаПоступления,СуммаСписания,СуммаПоступленияВВалюте,СуммаСписанияВВалюте");
		ТаблицаОперацийЗаПериод.Загрузить(ВремТаблица);
		
	Иначе
		
		ВыборкаОпераций = ТаблицаОпераций.НайтиСтроки(Новый Структура("АктуальнаяДата", ВыделеннаяДатаКалендаря));
		
		Для Каждого СтрокаОперации Из ВыборкаОпераций Цикл
			
			НоваяСтрока = ТаблицаОперацийЗаПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОперации);
			НоваяСтрока.СуммаПоступленияВВалюте = НоваяСтрока.СуммаПоступления;
			НоваяСтрока.СуммаСписанияВВалюте    = НоваяСтрока.СуммаСписания;
			НоваяСтрока.ИДСтрокиТаблицыОпераций = СтрокаОперации.ПолучитьИдентификатор();
			
			НоваяСтрока.ОписаниеПлановойОперации = ПолучитьОписаниеПлановойОперации(СтрокаОперации.ПлановаяОперация, НоваяСтрока.АктуальнаяДата,
					СтрокаОперации.Выполнена, СтрокаОперации.Пропустить);
			
		КонецЦикла; 
		
		
	КонецЕсли; 

	ТаблицаОперацийЗаПериод.Сортировать("АктуальнаяДата, ШаблонОперации");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьФормуОперацийЗаПериод()

	Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела3 Тогда
		Если ВидСрокаПрогноза > 5 Тогда
			ПредставлениеПериода = Формат(ПрогнозВыбраннаяДата, "ДФ='ММММ гггг ""г.""'");
		Иначе
			ПредставлениеПериода = Формат(ПрогнозВыбраннаяДата, "ДФ='ДФ='дддд, дд.ММ.гггг ""г.""'");
		КонецЕсли;
		ДатаПараметра = ПрогнозВыбраннаяДата;
	Иначе
		ПредставлениеПериода = Формат(ВыделеннаяДатаКалендаря, "ДФ='ДФ='дддд, дд.ММ.гггг ""г.""'");
		ДатаПараметра = ВыделеннаяДатаКалендаря;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("ВыбраннаяДата,ПредставлениеПериода,ТаблицаОперацийЗаПериод", ДатаПараметра, ПредставлениеПериода, ТаблицаОперацийЗаПериод);
	ОбработчикОтвета = Новый ОписаниеОповещения("ОткрытьФормуОперацийЗаПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПлановыеОперации.Форма.ОперацииЗаПериод", ПараметрыФормы, ЭтаФорма, , , , ОбработчикОтвета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры


#КонецОбласти


// Пропуск, перенос, выполнение плановых операций, изменение их шаблонов
#Область УправлениеОперациямиИШаблонами

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьИмяВидаДокумента(Знач СсылкаНаДокумент)

	ТипСсылки = ТипЗнч(СсылкаНаДокумент);
	Если ТипСсылки = Тип("ДокументСсылка.ВводИзменениеОстатка") Тогда
		Возврат "ВводИзменениеОстатка";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.МыВзялиВДолг") Тогда
		Возврат "МыВзялиВДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.МыДалиВДолг") Тогда
		Возврат "МыДалиВДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.НамВернулиДолг") Тогда
		Возврат "НамВернулиДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОбменВалюты") Тогда
		Возврат "ОбменВалюты";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Расход") Тогда
		Возврат "Расход";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Перемещение") Тогда
		Возврат "Перемещение";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.Доход") Тогда
		Возврат "Доход";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.МыВернулиДолг") Тогда
		Возврат "МыВернулиДолг";
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.УниверсальнаяОперация") Тогда
		Возврат "УниверсальнаяОперация";
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура СоздатьОперациюПоШаблону(СтруктураОперации)

	ПараметрыФормыНовогоДокумента = Новый Структура;
	ПараметрыФормыНовогоДокумента.Вставить("ЗначениеКопирования", СтруктураОперации.ШаблонОперации);
	СтруктураЗаполнения = Новый Структура("ЭтоШаблон,Дата,СуммаДолга,СуммаПроцентов,СуммаКомиссии", 
		Ложь, СтруктураОперации.АктуальнаяДата, СтруктураОперации.СуммаДолга, СтруктураОперации.СуммаПроцентов,
		СтруктураОперации.СуммаКомиссии);
	ПараметрыФормыНовогоДокумента.Вставить("ЗначенияЗаполнения", СтруктураЗаполнения);
	ПараметрыФормыНовогоДокумента.Вставить("ВладелецРасписания", СтруктураОперации.ШаблонОперации);
	ПараметрыФормыНовогоДокумента.Вставить("ПлановаяДата",       СтруктураОперации.ПлановаяДата);
	ПараметрыФормыНовогоДокумента.Вставить("АктуальнаяДата",     СтруктураОперации.АктуальнаяДата);
	
	ИмяФормыДокумента = ПолучитьИмяВидаДокумента(СтруктураОперации.ШаблонОперации); 
	ОткрытьФорму("Документ." + ИмяФормыДокумента + ".ФормаОбъекта", ПараметрыФормыНовогоДокумента, ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперации(ПлановаяОперация)

	ИмяВидаДокумента = ПолучитьИмяВидаДокумента(ПлановаяОперация);
	Если ЗначениеЗаполнено(ИмяВидаДокумента) Тогда
		ОткрытьФорму("Документ." + ИмяВидаДокумента + ".ФормаОбъекта", Новый Структура("Ключ", ПлановаяОперация), ЭтаФорма, ПлановаяОперация);
	КонецЕсли; 

КонецПроцедуры
 

&НаКлиенте
Процедура ИзменитьДатуОперацииНаПроизвольную(СтруктураОперации)

	Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
		ДатаОперации = СтруктураОперации.АктуальнаяДата;
		ДополнительныеПараметры = Новый Структура("СтруктураОперации", СтруктураОперации);
		ОбработчикВыбора = Новый ОписаниеОповещения("ОперацииОтложитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводДаты(ОбработчикВыбора, ДатаОперации, НСтр("ru = 'Укажите новую дату'"), ЧастиДаты.Дата);
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ИзменитьДатуОперации(СтруктураОперации, НоваяДата, ПереходитьНаНовуюДату = Истина)

	ИзменитьДатуОперацииСервер(СтруктураОперации, НоваяДата, ПереходитьНаНовуюДату);
	
 	Оповестить("Изменился список операций на период", 
		Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуОперацииСервер(СтруктураОперации, НоваяДата, ПереходитьНаНовуюДату = Истина)

	ТекДата = ВыделеннаяДатаКалендаря;
	ПланДата = СтруктураОперации.АктуальнаяДата;
	Если ТипЗнч(НоваяДата) = Тип("Строка") Тогда
		Если НоваяДата = "ПредыдущийДень" Тогда
			НоваяДата = НачалоДня(ПланДата - 1);
		ИначеЕсли НоваяДата = "СледующийДень" Тогда
			НоваяДата = КонецДня(ПланДата) + 1;
		ИначеЕсли НоваяДата = "СледующаяНеделя" Тогда
			НоваяДата = НачалоДня(ПланДата + 7*24*60*60);
		ИначеЕсли НоваяДата = "СледующийМесяц" Тогда
			НоваяДата = ДобавитьМесяц(ПланДата, 1);
		Иначе 
			НоваяДата = ПланДата;
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
	
		ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
		ЗаписьДаты.ВладелецРасписания = СтруктураОперации.ШаблонОперации;
		ЗаписьДаты.ПлановаяДата = СтруктураОперации.ПлановаяДата;
		ЗаписьДаты.Прочитать();
		Если ЗначениеЗаполнено(ЗаписьДаты.ПлановаяОперация) Тогда
			ОбъектОперации = ЗаписьДаты.ПлановаяОперация.ПолучитьОбъект();
			ОбъектПроведен = ОбъектОперации.Проведен;
		Иначе
			ОбъектОперации = Неопределено;
			ОбъектПроведен = Ложь;
		КонецЕсли; 

		ЗаписьДаты.АктуальнаяДата   = НоваяДата;
		ЗаписьДаты.Записать(Истина);
		Если ОбъектОперации <> Неопределено Тогда
			ОбъектОперации.Дата = НоваяДата + (ОбъектОперации.Дата - НачалоДня(ОбъектОперации.Дата));
			РежимЗаписи = ?(ОбъектОперации.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ОбъектОперации.Записать(РежимЗаписи);
			ОбъектПроведен = ОбъектОперации.Проведен;
		КонецЕсли; 
		ПлановыеОперации.СформироватьОборотыШаблонаДокументов(ЗаписьДаты.ВладелецРасписания);
	
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось изменить дату операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
			+ ":" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить(); 
		ОтменитьТранзакцию();
		
	КонецПопытки; 
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	

	// Обновим информацию в строке операции:
	Если СтруктураОперации.Свойство("ИДСтрокиТаблицыОпераций") И СтруктураОперации.ИДСтрокиТаблицыОпераций <> Неопределено Тогда
		
		СтрокаОперации = ТаблицаОпераций.НайтиПоИдентификатору(СтруктураОперации.ИДСтрокиТаблицыОпераций);
		СтрокаОперации.АктуальнаяДата = НоваяДата;
		СтрокаОперации.Выполнена = ОбъектПроведен;
		СтрокаОперации.Просрочена = СтрокаОперации.АктуальнаяДата < НачалоДня(ТекущаяДатаСеанса()) И НЕ СтрокаОперации.Пропустить И НЕ СтрокаОперации.Выполнена;
		СтрокаОперации.ВВыбранномМесяце = СтрокаОперации.АктуальнаяДата >= ВыбранныйМесяц.ДатаНачала И СтрокаОперации.АктуальнаяДата <= ВыбранныйМесяц.ДатаОкончания;
		Если НоваяДата < НачалоНедели(ВыбранныйМесяц.ДатаНачала) Тогда
			ДатаПерехода = НачалоНедели(ВыбранныйМесяц.ДатаНачала);
		ИначеЕсли НоваяДата > КонецНедели(ВыбранныйМесяц.ДатаОкончания) Тогда
			ДатаПерехода = КонецНедели(ВыбранныйМесяц.ДатаОкончания);
		Иначе
			ДатаПерехода = НоваяДата;
		КонецЕсли; 
		
		Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела1 Тогда
			
			Если СтрокаОперации.АктуальнаяДата < НачалоНедели(ВыбранныйМесяц.ДатаНачала) И НЕ СтрокаОперации.Просрочена ИЛИ СтрокаОперации.АктуальнаяДата > КонецНедели(ВыбранныйМесяц.ДатаОкончания) Тогда
				ТаблицаОпераций.Удалить(СтрокаОперации);
			КонецЕсли; 
			ОбновитьСодержимоеФормы(Ложь, ДатаПерехода);
			
		ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела2 Тогда
			
			СтрокаПросроченных = ТаблицаПросроченныхОпераций.НайтиСтроки(Новый Структура("ИДСтрокиТаблицыОпераций", СтруктураОперации.ИДСтрокиТаблицыОпераций));
			Если СтрокаПросроченных.Количество() > 0 И ЗаписьДаты.АктуальнаяДата > НачалоПрогноза Тогда
				ТаблицаПросроченныхОпераций.Удалить(СтрокаПросроченных[0]);
			ИначеЕсли НЕ ЗаписьДаты.Пропустить И ЗаписьДаты.АктуальнаяДата < НачалоПрогноза Тогда 
				Если СтрокаПросроченных.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаПросроченныхОпераций.Добавить();
				Иначе
					НоваяСтрока = СтрокаПросроченных[0];
				КонецЕсли; 
				СтрокаОригинала = ТаблицаОпераций.НайтиПоИдентификатору(СтруктураОперации.ИДСтрокиТаблицыОпераций);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОригинала);
				НоваяСтрока.ИДСтрокиТаблицыОпераций = СтруктураОперации.ИДСтрокиТаблицыОпераций;
				НоваяСтрока.ОписаниеПлановойОперации = ПолучитьОписаниеПлановойОперации(СтрокаОригинала.ПлановаяОперация, НоваяСтрока.АктуальнаяДата,
						СтрокаОригинала.Выполнена, СтрокаОригинала.Пропустить);
				ТаблицаПросроченныхОпераций.Сортировать("АктуальнаяДата");
			КонецЕсли;
			
		ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела3 Тогда
			
			ОбновитьСодержимоеФормы(Истина);
			
		КонецЕсли; 
		
		КоличествоОперацийПросроченных = ТаблицаОпераций.НайтиСтроки(Новый Структура("Просрочена", Истина)).Количество();
		КоличествоОперацийЗаМесяц      = ТаблицаОпераций.НайтиСтроки(Новый Структура("ВВыбранномМесяце", Истина)).Количество();
		
	Иначе
		
		ОбновитьСодержимоеФормы(Истина);
		СтруктураОперации.АктуальнаяДата = НоваяДата;
		
	КонецЕсли; 
	
	Если ТаблицаОперацийЗаПериод.Количество() > 0 Тогда
		ОбновитьТаблицуОперацийЗаПериод();
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьПлановуюОперацию(СтруктураОперации)

	Если ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации, Истина) Тогда
		ПропуститьПлановуюОперациюСервер(СтруктураОперации);
	КонецЕсли;
	
 	Оповестить("Изменился список операций на период", 
		Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));
	Оповестить("Изменилась дата плановой операции", 
		Новый Структура("ПлановаяОперация,ШаблонОперации", СтруктураОперации.ПлановаяОперация, СтруктураОперации.ШаблонОперации), ЭтаФорма);

КонецПроцедуры
 
&НаСервере
Процедура ПропуститьПлановуюОперациюСервер(СтруктураОперации)

	НачатьТранзакцию();
	
	Попытка
	
		ЗаписьДаты = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
		ЗаписьДаты.ВладелецРасписания = СтруктураОперации.ШаблонОперации;
		ЗаписьДаты.ПлановаяДата = СтруктураОперации.ПлановаяДата;
		ЗаписьДаты.Прочитать();
		Если ЗначениеЗаполнено(ЗаписьДаты.ПлановаяОперация) Тогда
			ОбъектОперации = ЗаписьДаты.ПлановаяОперация.ПолучитьОбъект();
			ОбъектПроведен = ОбъектОперации.Проведен;
		Иначе
			ОбъектОперации = Неопределено;
			ОбъектПроведен = Ложь;
		КонецЕсли; 

		ЗаписьДаты.Пропустить   = НЕ ЗаписьДаты.Пропустить;
		ЗаписьДаты.Записать(Истина);
		
		// Проверяем актуальность расписания
		ЗаписьРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
		ЗаписьРасписания.ВладелецРасписания = СтруктураОперации.ШаблонОперации;
		ЗаписьРасписания.Прочитать();
		Если ЗаписьРасписания.Выбран() И ЗаписьРасписания.Периодичность = Перечисления.СпособыПовторовСобытий.ВУказанныеДаты Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВладелецРасписания", СтруктураОперации.ШаблонОперации);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ДатыРасписаний.АктуальнаяДата) КАК АктуальнаяДата
			|ИЗ
			|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
			|ГДЕ
			|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
			|	И ДатыРасписаний.Пропустить = ЛОЖЬ";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.АктуальнаяДата) И Выборка.АктуальнаяДата <> ЗаписьРасписания.ДатаОкончанияРасписания Тогда
				ЗаписьРасписания.КоличествоПовторов = 0;
				ЗаписьРасписания.ДатаОкончанияРасписания = Выборка.АктуальнаяДата;
				ЗаписьРасписания.Записать(Истина);
			КонецЕсли; 
		КонецЕсли; 
		
		
		Если ОбъектОперации <> Неопределено Тогда
			Если ЗаписьДаты.Пропустить Тогда
				РежимЗаписи = ?(ОбъектОперации.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			ОбъектОперации.Записать(РежимЗаписи);
			ОбъектПроведен = ОбъектОперации.Проведен;
		КонецЕсли; 

		ПлановыеОперации.СформироватьОборотыШаблонаДокументов(СтруктураОперации.ШаблонОперации);
	
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось пропустить операцию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
			+ ":" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить(); 
		ОтменитьТранзакцию();
		
	КонецПопытки; 
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	// Изменяем данные в таблицах операций
	Если СтруктураОперации.ИДСтрокиТаблицыОпераций <> Неопределено Тогда
		
		СтрокаТаблицы = ТаблицаОпераций.НайтиПоИдентификатору(СтруктураОперации.ИДСтрокиТаблицыОпераций);
		СтрокаТаблицы.Пропустить = ЗаписьДаты.Пропустить;
		СтрокаТаблицы.Выполнена  = ОбъектПроведен;
		СтрокаТаблицы.Просрочена = СтруктураОперации.АктуальнаяДата < НачалоДня(ТекущаяДатаСеанса()) И НЕ СтрокаТаблицы.Выполнена И НЕ СтрокаТаблицы.Пропустить;
		
		Если СтрокаТаблицы.АктуальнаяДата < НачалоНедели(ВыбранныйМесяц.ДатаНачала) И НЕ СтрокаТаблицы.Просрочена ИЛИ СтрокаТаблицы.АктуальнаяДата > КонецНедели(ВыбранныйМесяц.ДатаОкончания) Тогда
			ТаблицаОпераций.Удалить(СтрокаТаблицы);
		КонецЕсли; 
		
	КонецЕсли; 
	
	КоличествоОперацийПросроченных = ТаблицаОпераций.НайтиСтроки(Новый Структура("Просрочена", Истина)).Количество();
	
	Если Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела1 Тогда
		
		ОбновитьСодержимоеФормы(Ложь, СтруктураОперации.АктуальнаяДата);
		
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела2 Тогда
		
		СтрокаПросроченных = ТаблицаПросроченныхОпераций.НайтиСтроки(Новый Структура("ИДСтрокиТаблицыОпераций", СтруктураОперации.ИДСтрокиТаблицыОпераций));
		Если СтрокаПросроченных.Количество() > 0 И ЗаписьДаты.Пропустить Тогда
			ТаблицаПросроченныхОпераций.Удалить(СтрокаПросроченных[0]);
		ИначеЕсли СтрокаПросроченных.Количество() = 0 И НЕ ЗаписьДаты.Пропустить И ЗаписьДаты.АктуальнаяДата < НачалоДня(ДеньгиКлиентСервер.ЗначениеТекущейДаты()) Тогда
			НоваяСтрока = ТаблицаПросроченныхОпераций.Добавить();
			СтрокаОригинала = ТаблицаОпераций.НайтиПоИдентификатору(СтруктураОперации.ИДСтрокиТаблицыОпераций);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОригинала);
			НоваяСтрока.ИДСтрокиТаблицыОпераций = СтруктураОперации.ИДСтрокиТаблицыОпераций;
			НоваяСтрока.ОписаниеПлановойОперации = ПолучитьОписаниеПлановойОперации(СтрокаОригинала.ПлановаяОперация, НоваяСтрока.АктуальнаяДата,
					СтрокаОригинала.Выполнена, СтрокаОригинала.Пропустить);
			ТаблицаПросроченныхОпераций.Сортировать("АктуальнаяДата");
		КонецЕсли;
		
		Если ТаблицаОперацийЗаПериод.Количество() > 0 Тогда
			ОбновитьТаблицуОперацийЗаПериод();
		КонецЕсли; 
		
	ИначеЕсли Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.ГруппаСтраницаРаздела3 Тогда
		
		ОбновитьСодержимоеФормы(Истина);
		
	КонецЕсли; 
	

КонецПроцедуры

&НаСервере
Процедура ПрекратитьПовторениеОпераций(СтруктураОперации)

	НачатьТранзакцию();
	
	Попытка
	
		// Завершаем само расписание:
		ЗаписьРасписания = РегистрыСведений.Расписания.СоздатьМенеджерЗаписи();
		ЗаписьРасписания.ВладелецРасписания = СтруктураОперации.ШаблонОперации;
		ЗаписьРасписания.Прочитать();
		ЗаписьРасписания.ДатаОкончанияРасписания = СтруктураОперации.ПлановаяДата;
		ЗаписьРасписания.Активность = ложь;
		ЗаписьРасписания.Записать(Истина);
		
		// Удаляем лишние даты расписания:
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВладелецРасписания", СтруктураОперации.ШаблонОперации);
		Запрос.УстановитьПараметр("ДатаПрекращения", СтруктураОперации.ПлановаяДата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыРасписаний.ВладелецРасписания,
		|	ДатыРасписаний.ПлановаяДата,
		|	ДатыРасписаний.ПлановаяОперация,
		|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ) КАК ОперацияУчтена
		|ИЗ
		|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
		|ГДЕ
		|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
		|	И ДатыРасписаний.ПлановаяДата >= &ДатаПрекращения";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		ТребуетсяОбновление = Выборка.Количество() > 0;
		Пока Выборка.Следующий() Цикл
			
			// Удаяем плановую операцию, если она не проведена
			Если ЗначениеЗаполнено(Выборка.ПлановаяОперация) И НЕ Выборка.ОперацияУчтена Тогда
				ДокументОбъект = Выборка.ПлановаяОперация.ПолучитьОбъект();
				ДокументОбъект.Удалить();
			КонецЕсли; 
			
			// Удаляем дату в календаре
			МенеджерЗаписи = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
			
		КонецЦикла; 
		
		ПлановыеОперации.СформироватьОборотыШаблонаДокументов(СтруктураОперации.ШаблонОперации);
	
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось прекратить повторение операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())
			+ ":" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить(); 
		ОтменитьТранзакцию();
		
	КонецПопытки; 
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	
	ОбновитьСодержимоеФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьПовторы(СтруктураОперации)

	Если НЕ ДопускаетсяВыполнениеКомандыНадОперацией(СтруктураОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Прекратить повторение операций по шаблону <%1> начиная с %2?'"); 
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, 
			СтруктураОперации.ШаблонОперации, Формат(СтруктураОперации.АктуальнаяДата, "ДФ=дд.ММ.гггг") );
	ДополнительныеПараметры = Новый Структура("СтруктураОперации", СтруктураОперации);
	ОбработчикОтвета = Новый ОписаниеОповещения("ОперацииПрекратитьПовторыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры
 

#КонецОбласти


// Завершения процедур с интерактивным функиционалом
#Область ЗавершениеРаботыСДиалогами

&НаКлиенте
Функция ОбновитьСодержимоеФормыКлиент() Экспорт

	ОбновитьСодержимоеФормы(Истина);
	Возврат ТаблицаОперацийЗаПериод;

КонецФункции

&НаКлиенте
Процедура ПериодВыбратьЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		ВыбранныйМесяц.ДатаНачала    = НачалоМесяца(Выбор);
		ВыбранныйМесяц.ДатаОкончания = КонецМесяца(ВыбранныйМесяц.ДатаНачала);
		ОбновитьСодержимоеФормы(Истина, ВыделеннаяДатаКалендаря);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура СпособОтбораКошельковПриИзмененииЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		СписокКошельковДляПрогноза.Очистить();
		СписокКошельковДляПрогноза.ЗагрузитьЗначения(Выбор.ВыгрузитьЗначения());
		ОбновитьСодержимоеФормы(Истина);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ШаблоныДобавитьШаблонЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		ЗначенияЗаполнения = Новый Структура("ЭтоШаблон, Дата", Истина, ВыделеннаяДатаКалендаря);
		ОткрытьФорму("Документ." + Выбор.Значение + ".ФормаОбъекта", Новый Структура("ЗначенияЗаполнения, ПлановаяДата", ЗначенияЗаполнения, ВыделеннаяДатаКалендаря), ЭтаФорма);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОперацийЗаПериодЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		ТаблицаОперацийЗаПериод.Очистить();
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаВыбораВопросПрекратитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПрекратитьПовторениеОпераций(ДополнительныеПараметры.СтруктураОперации);
	КонецЕсли; 
	
 	Оповестить("Изменился список операций на период", 
		Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));

КонецПроцедуры
 
&НаКлиенте
Процедура ОперацииОтложитьЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		ИзменитьДатуОперации(ДополнительныеПараметры.СтруктураОперации, Выбор);
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПлановаяОперация", ДополнительныеПараметры.СтруктураОперации.ПлановаяОперация);
		ПараметрыОповещения.Вставить("ШаблонОперации", ДополнительныеПараметры.СтруктураОперации.ШаблонОперации);
 		Оповестить("Изменился список операций на период", 
			Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ОперацииПрекратитьПовторыЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПрекратитьПовторениеОпераций(ДополнительныеПараметры.СтруктураОперации);
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ПлановаяОперация", ДополнительныеПараметры.СтруктураОперации.ПлановаяОперация);
		ПараметрыОповещения.Вставить("ШаблонОперации", ДополнительныеПараметры.СтруктураОперации.ШаблонОперации);
		Оповестить("Изменилась дата плановой операции", ПараметрыОповещения, ЭтаФорма);
	 	Оповестить("Изменился список операций на период", 
			Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ШаблоныИзменитьШаблонЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьСодержимоеФормы(Истина);
 	Оповестить("Изменился список операций на период", 
		Новый Структура("ТаблицаОперацийЗаПериод", ТаблицаОперацийЗаПериод));

КонецПроцедуры
 

#КонецОбласти


// Настройка автоматического открытия формы при начале работы порграммы

&НаСервереБезКонтекста
Процедура ИзменитьНастройкуОткрытияПриЗапускеПрограммы(НоваяНастройка)

	ПользовательскиеНастройкиДеньгиСервер.ЗаписатьПриЗапускеОткрыватьРаздел(НоваяНастройка);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммыЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор = КодВозвратаДиалога.Да Тогда
		ЗначениеНастройки = ?(ДополнительныеПараметры.Открывать, "", "Календарь");
		ИзменитьНастройкуОткрытияПриЗапускеПрограммы(ЗначениеНастройки);
		Элементы.ОткрыватьПриЗапускеПрограммы.Пометка = НЕ ДополнительныеПараметры.Открывать;
		Оповестить("Изменилась настройка", Новый Структура("ПриЗапускеОткрыватьРаздел", ЗначениеНастройки))
	КонецЕсли; 

КонецПроцедуры
 

#КонецОбласти


