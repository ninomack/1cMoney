////////////////////////////////////////////////////////////////////////////////
// Модуль менеджера обработки ПлановыеОперации: 
//	* Заполняет данными таблицы значений для использования в календаре и прогнозе
//	
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// Заполняет просроченными операциями и операциями за указанный месяц таблицу значений и помещает 
//	ее во временное хранилище.
//	
//Параметры:
//	ПараметрыВыполнения - Структура - содержит параметры для запроса
//		* ТекущийМомент - Дата - для определения просроченных операций 
//		* ВыбранныйМесяц - СтандартныйПериод - месяц, рассматриваемый в календаре плановых операций
//		* ВалютаУчета - Валюта - соответствует валюте учета
//	АдресХранилища - Строка - адрес временного хранилища, в которое помещается результат запроса
//
Процедура ПрочитатьОперацииЗаМесяцИПросроченные(ПараметрыВыполнения, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийМомент", ПараметрыВыполнения.ТекущийМомент);
	Запрос.УстановитьПараметр("Дата1",         НачалоНедели(ПараметрыВыполнения.ВыбранныйМесяц.ДатаНачала));
	Запрос.УстановитьПараметр("НачалоМесяца",  ПараметрыВыполнения.ВыбранныйМесяц.ДатаНачала);
	Запрос.УстановитьПараметр("КонецМесяца",   ПараметрыВыполнения.ВыбранныйМесяц.ДатаОкончания);
	Запрос.УстановитьПараметр("Дата2",         КонецНедели(ПараметрыВыполнения.ВыбранныйМесяц.ДатаОкончания));
	Запрос.УстановитьПараметр("ВалютаУчета",   ПараметрыВыполнения.ВалютаУчета);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания КАК ШаблонОперации,
	|	ДатыРасписаний.ПлановаяДата,
	|	ВЫБОР
	|		КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДатыРасписаний.ПлановаяДата
	|		ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|	КОНЕЦ КАК АктуальнаяДата,
	|	ВЫБОР
	|			КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДатыРасписаний.ПлановаяДата
	|			ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|		КОНЕЦ < &ТекущийМомент
	|		И НЕ ДатыРасписаний.Выполнено
	|		И НЕ ДатыРасписаний.Пропустить КАК Просрочена,
	|	ВЫБОР
	|		КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДатыРасписаний.ПлановаяДата
	|		ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|	КОНЕЦ МЕЖДУ &НачалоМесяца И &КонецМесяца КАК ВВыбранномМесяце,
	|	ДатыРасписаний.Пропустить КАК Пропустить,
	|	ДатыРасписаний.Выполнено КАК Выполнена,
	|	ДатыРасписаний.СуммаДохода КАК СуммаПоступления,
	|	ДатыРасписаний.ВалютаДохода КАК ВалютаПоступления,
	|	ДатыРасписаний.СуммаРасхода КАК СуммаСписания,
	|	ДатыРасписаний.ВалютаРасхода КАК ВалютаСписания,
	|	ДатыРасписаний.ПлановаяОперация,
	|	ДатыРасписаний.СуммаДолга,
	|	ДатыРасписаний.СуммаПроцентов,
	|	ДатыРасписаний.СуммаКомиссии
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Расписания КАК Расписания
	|		ПО (Расписания.ВладелецРасписания = ДатыРасписаний.ВладелецРасписания)
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДатыРасписаний.ПлановаяДата
	|				ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|			КОНЕЦ МЕЖДУ &Дата1 И &Дата2
	|			ИЛИ НЕ ДатыРасписаний.Выполнено
	|				И НЕ ДатыРасписаний.Пропустить
	|				И ВЫБОР
	|					КОГДА ДатыРасписаний.АктуальнаяДата = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ДатыРасписаний.ПлановаяДата
	|					ИНАЧЕ ДатыРасписаний.АктуальнаяДата
	|				КОНЕЦ < &ТекущийМомент)
	|	И (ЕСТЬNULL(Расписания.НеИспользовать, ЛОЖЬ) = ЛОЖЬ
	|			ИЛИ ДатыРасписаний.Выполнено
	|			ИЛИ ДатыРасписаний.Пропустить)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АктуальнаяДата,
	|	ДатыРасписаний.Выполнено УБЫВ,
	|	Пропустить УБЫВ";

	ДанныеНаМесяц = Новый Структура;
	ДанныеНаМесяц.Вставить("ТаблицаОпераций", Запрос.Выполнить().Выгрузить());
	
	Просроченные = ДанныеНаМесяц.ТаблицаОпераций.НайтиСтроки(Новый Структура("Просрочена", Истина));
	ДанныеНаМесяц.Вставить("КоличествоПросроченных", Просроченные.Количество());
	
	ЗаМесяц = ДанныеНаМесяц.ТаблицаОпераций.НайтиСтроки(Новый Структура("ВВыбранномМесяце", Истина));
	ДанныеНаМесяц.Вставить("КоличествоЗаМесяц", ЗаМесяц.Количество());
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеНаМесяц, АдресХранилища);
	
КонецПроцедуры

// Заполняет суммами плановых оборотов таблицу значений, которую помещает 
//	во временное хранилище.
//	
//Параметры:
//	ПараметрыВыполнения - Структура - содержит параметры для запроса
//		* НачалоПрогноза - Дата - с которой начинается построение прогноза 
//		* ОкончаниеПрогноза - Дата - предел прогнозирования
//		* ВалютаУчета - Валюта - соответствует валюте учета
//		* ВалютаОтчета - Валюта - в которой требуется построить прогноз
//		* СписокКошельковДляПрогноза - СписокЗначений - выбранные пользователем кошельки 
//		* ВидСрокаПрогноза - Число - вид периода (Неделя(0), 2 недели(1), Месяц(3), 2 месяца(4), 3 месяца(5), 6 месяцев(6), год(7))
//		* СпособГруппировкиПрогноза - Число - Способ группировки итогов (Общие(0), По типам счетов/кошельков(2), По группам кошельков(3), По  кошелькам(6))
//		* СпособОтбораКошельков - Число - вид фильтра для кошельков (Все кошельки(0), Свободные деньги(1), Накопления(2), Выбранные кошельки...(6))
//	АдресХранилища - Строка - адрес временного хранилища, в которое помещается результат запроса
//
Процедура ПрочитатьТаблицуПрогнозаОстатков(ПараметрыВыполнения, АдресХранилища) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекДата",      ПараметрыВыполнения.НачалоПрогноза);
	Запрос.УстановитьПараметр("Дата1",        ДобавитьМесяц(ПараметрыВыполнения.НачалоПрогноза, -12));
	Запрос.УстановитьПараметр("Дата2",        КонецДня(ПараметрыВыполнения.ОкончаниеПрогноза));
	Запрос.УстановитьПараметр("ВалютаОтчета", ПараметрыВыполнения.ВалютаОтчета);
	Запрос.УстановитьПараметр("ВалютаУчета",  ПараметрыВыполнения.ВалютаУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания КАК Шаблон,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДатыРасписаний.ПлановаяДата
	|			ИНАЧЕ ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата)
	|		КОНЕЦ, ДЕНЬ) КАК Дата,
	|	ДатыРасписаний.ПлановаяОперация КАК ПлановаяОперация,
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|	ДатыРасписаний.Пропустить КАК Пропустить,
	|	ДатыРасписаний.Выполнено КАК Выполнена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) < &ТекДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПланОбороты.Кошелек
	|	КОНЕЦ КАК Кошелек,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПланОбороты.ТипПоказателя, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЕСТЬNULL(ПланОбороты.Сумма, 0)) КАК СуммаПланВВалюте,
	|	ЕСТЬNULL(ПланОбороты.Валюта, &ВалютаУчета) КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПланОбороты.ТипПоказателя, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание) ИЛИ ЕСТЬNULL(ПланОбороты.ТипПоказателя, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО И ПланОбороты.Сумма < 0
	|				ТОГДА ЕСТЬNULL(ПланОбороты.Сумма, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСписанияВВалюте,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПланОбороты.ТипПоказателя, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление) ИЛИ ЕСТЬNULL(ПланОбороты.ТипПоказателя, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО И ПланОбороты.Сумма > 0
	|				ТОГДА ЕСТЬNULL(ПланОбороты.Сумма, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПоступленияВВалюте,
	|	ЕСТЬNULL(ПланОбороты.Валюта, &ВалютаУчета) КАК ВалютаСписания,
	|	ЕСТЬNULL(ПланОбороты.Валюта, &ВалютаУчета) КАК ВалютаПоступления,
	|	СУММА(ДатыРасписаний.СуммаДолга) КАК СуммаДолга,
	|	СУММА(ДатыРасписаний.СуммаПроцентов) КАК СуммаПроцентов,
	|	СУММА(ДатыРасписаний.СуммаКомиссии) КАК СуммаКомиссии
	|ПОМЕСТИТЬ ПланОбороты
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОборотыПлановыхОпераций КАК ПланОбороты
	|		ПО ДатыРасписаний.ВладелецРасписания = ПланОбороты.Регистратор
	|			И ДатыРасписаний.ПлановаяДата = ПланОбороты.ПлановаяДата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Расписания КАК Расписания
	|		ПО (Расписания.ВладелецРасписания = ДатыРасписаний.ВладелецРасписания)
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДатыРасписаний.ПлановаяДата
	|				ИНАЧЕ ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата)
	|			КОНЕЦ МЕЖДУ &Дата1 И &Дата2
	|		И НЕ ДатыРасписаний.Пропустить
	|		И (ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) >= &ТекДата
	|				ИЛИ ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) < &ТекДата
	|					И НЕ ДатыРасписаний.Выполнено))
	|	И (ЕСТЬNULL(Расписания.НеИспользовать, ЛОЖЬ) = ЛОЖЬ
	|		ИЛИ ДатыРасписаний.Выполнено)
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДатыРасписаний.ПлановаяДата
	|			ИНАЧЕ ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата)
	|		КОНЕЦ, ДЕНЬ),
	|	ДатыРасписаний.ВладелецРасписания,
	|	ДатыРасписаний.Пропустить,
	|	ДатыРасписаний.ПлановаяДата,
	|	ЕСТЬNULL(ПланОбороты.Валюта, &ВалютаУчета),
	|	ДатыРасписаний.ПлановаяОперация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Дата, ДатыРасписаний.АктуальнаяДата) < &ТекДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация.Проведен, ЛОЖЬ)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПланОбороты.Кошелек
	|	КОНЕЦ,
	|	ДатыРасписаний.Выполнено,
	|	ЕСТЬNULL(ПланОбороты.Валюта, &ВалютаУчета),
	|	ЕСТЬNULL(ПланОбороты.Валюта, &ВалютаУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	жОстатки.Субконто1 КАК Кошелек,
	|	жОстатки.Валюта,
	|	жОстатки.ВалютнаяСуммаОстаток КАК ОстатокНаНачалоВВалюте,
	|	ВЫРАЗИТЬ(жОстатки.ВалютнаяСуммаОстаток * (КурсыВалютОборота.Курс * КурсВалютыОтчета.Кратность) / (КурсВалютыОтчета.Курс * КурсыВалютОборота.Кратность) КАК ЧИСЛО(16,2)) КАК ОстатокНаНачало
	|ПОМЕСТИТЬ ОстаткиНаНачало
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(&ТекДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.КошелькиИСчета), ) КАК жОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &ВалютаУчета) КАК КурсыВалютОборота
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &ВалютаУчета) КАК КурсВалютыОтчета
	|			ПО КурсыВалютОборота.БазоваяВалюта = КурсВалютыОтчета.БазоваяВалюта
	|				И (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|		ПО жОстатки.Валюта = КурсыВалютОборота.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.Шаблон КАК Шаблон,
	|	ВЫБОР
	|		КОГДА Подзапрос.Дата < &ТекДата
	|			ТОГДА &ТекДата
	|		ИНАЧЕ Подзапрос.Дата
	|	КОНЕЦ КАК Дата,
	|	Подзапрос.Дата КАК ДатаПлановойОперации,
	|	Подзапрос.ЭтоПлановаяОперация,
	|	Подзапрос.ПлановаяОперация КАК ПлановаяОперация,
	|	Подзапрос.ПлановаяДата КАК ПлановаяДата,
	|	Подзапрос.Пропустить,
	|	Подзапрос.Выполнена,
	|	Подзапрос.Просрочена,
	|	Подзапрос.Кошелек КАК Кошелек,
	|	Подзапрос.Валюта,
	|	Подзапрос.СуммаОборотаВВалюте КАК СуммаОборотаВВалюте,
	|	ВЫРАЗИТЬ(Подзапрос.СуммаОборотаВВалюте * (КурсыВалютОборота.Курс * КурсВалютыОтчета.Кратность) / (КурсВалютыОтчета.Курс * КурсыВалютОборота.Кратность) КАК ЧИСЛО(16,2)) КАК СуммаОборота,
	|	Подзапрос.СуммаСписанияВВалюте,
	|	ВЫРАЗИТЬ(Подзапрос.СуммаСписанияВВалюте * (КурсыВалютОборота.Курс * КурсВалютыОтчета.Кратность) / (КурсВалютыОтчета.Курс * КурсыВалютОборота.Кратность) КАК ЧИСЛО(16,2)) КАК СуммаСписания,
	|	Подзапрос.СуммаПоступленияВВалюте,
	|	ВЫРАЗИТЬ(Подзапрос.СуммаПоступленияВВалюте * (КурсыВалютОборота.Курс * КурсВалютыОтчета.Кратность) / (КурсВалютыОтчета.Курс * КурсыВалютОборота.Кратность) КАК ЧИСЛО(16,2)) КАК СуммаПоступления,
	|	Подзапрос.ВалютаСписания,
	|	Подзапрос.ВалютаПоступления,
	|	Подзапрос.СуммаДолга,
	|	Подзапрос.СуммаПроцентов,
	|	Подзапрос.СуммаКомиссии
	|ПОМЕСТИТЬ ВсеОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланОбороты.Шаблон КАК Шаблон,
	|		ВЫБОР
	|			КОГДА ПланОбороты.Шаблон ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ЭтоПлановаяОперация,
	|		ЕСТЬNULL(НАЧАЛОПЕРИОДА(ФактОбороты.Период, ДЕНЬ), ПланОбороты.Дата) КАК Дата,
	|		ЕСТЬNULL(ФактОбороты.Регистратор, ПланОбороты.ПлановаяОперация) КАК ПлановаяОперация,
	|		ЕСТЬNULL(ПланОбороты.ПлановаяДата, НАЧАЛОПЕРИОДА(ФактОбороты.Период, ДЕНЬ)) КАК ПлановаяДата,
	|		ЕСТЬNULL(ПланОбороты.Пропустить, ЛОЖЬ) КАК Пропустить,
	|		ЕСТЬNULL(ПланОбороты.Выполнена, ИСТИНА) КАК Выполнена,
	|		ЕСТЬNULL(ПланОбороты.Просрочена, ЛОЖЬ) КАК Просрочена,
	|		ЕСТЬNULL(ФактОбороты.Субконто1, ПланОбороты.Кошелек) КАК Кошелек,
	|		ЕСТЬNULL(ФактОбороты.Валюта, ПланОбороты.Валюта) КАК Валюта,
	|		ЕСТЬNULL(ФактОбороты.ВалютнаяСуммаОборот, ПланОбороты.СуммаПланВВалюте) КАК СуммаОборотаВВалюте,
	|		ЕСТЬNULL(ФактОбороты.ВалютнаяСуммаОборотКт, ЕСТЬNULL(ПланОбороты.СуммаСписанияВВалюте, 0)) КАК СуммаСписанияВВалюте,
	|		ЕСТЬNULL(ФактОбороты.ВалютнаяСуммаОборотДт, ЕСТЬNULL(ПланОбороты.СуммаПоступленияВВалюте, 0)) КАК СуммаПоступленияВВалюте,
	|		ВЫБОР 
	|			КОГДА ФактОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL ТОГДА ЕСТЬNULL(ПланОбороты.ВалютаПоступления, &ВалютаУчета) 
	|			КОГДА ФактОбороты.ВалютнаяСуммаОборотДт = 0 ТОГДА Значение(Справочник.Валюты.ПустаяСсылка)
	|			ИНАЧЕ ЕСТЬNULL(ФактОбороты.Валюта, &ВалютаУчета)
	|		КОНЕЦ КАК ВалютаПоступления,
	|		ВЫБОР 
	|			КОГДА ФактОбороты.ВалютнаяСуммаОборотКт ЕСТЬ NULL ТОГДА ЕСТЬNULL(ПланОбороты.ВалютаСписания, &ВалютаУчета) 
	|			КОГДА ФактОбороты.ВалютнаяСуммаОборотКт = 0 ТОГДА Значение(Справочник.Валюты.ПустаяСсылка)
	|			ИНАЧЕ ЕСТЬNULL(ФактОбороты.Валюта, &ВалютаУчета)
	|		КОНЕЦ КАК ВалютаСписания,
	|		ЕСТЬNULL(ПланОбороты.СуммаДолга, 0) КАК СуммаДолга,
	|		ЕСТЬNULL(ПланОбороты.СуммаПроцентов, 0) КАК СуммаПроцентов,
	|		ЕСТЬNULL(ПланОбороты.СуммаКомиссии, 0) КАК СуммаКомиссии
	|	ИЗ
	|		ПланОбороты КАК ПланОбороты
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналОпераций.Обороты(&ТекДата, &Дата2, Регистратор, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.КошелькиИСчета), , , ) КАК ФактОбороты
	|			ПО (ФактОбороты.Регистратор = ПланОбороты.ПлановаяОперация)
	|			//	И ВЫБОР КОГДА ФактОбороты.Регистратор ССЫЛКА Документ.УниверсальнаяОперация ИЛИ ФактОбороты.Регистратор ССЫЛКА Документ.Доход ТОГДА (ФактОбороты.Субконто1 = ПланОбороты.Кошелек) ИНАЧЕ ИСТИНА КОНЕЦ
	|				) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &ВалютаУчета) КАК КурсыВалютОборота
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &ВалютаУчета) КАК КурсВалютыОтчета
	|			ПО КурсыВалютОборота.БазоваяВалюта = КурсВалютыОтчета.БазоваяВалюта
	|				И (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|		ПО Подзапрос.Валюта = КурсыВалютОборота.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Шаблон,
	|	ПлановаяОперация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КошелькиИСчета.Ссылка КАК Кошелек,
	|	ИтоговаяТаблица.Валюта КАК Валюта,
	|	ИтоговаяТаблица.Дата КАК Дата,
	|	ИтоговаяТаблица.ДатаПлановойОперации КАК АктуальнаяДата,
	|	ИтоговаяТаблица.ПлановаяДата КАК ПлановаяДата,
	|	СУММА(ИтоговаяТаблица.СуммаОборота) КАК СуммаОборота,
	|	СУММА(ИтоговаяТаблица.СуммаОборотаВВалюте) КАК СуммаОборотаВВалюте,
	|	ИтоговаяТаблица.ЭтоПлановаяОперация,
	|	ИтоговаяТаблица.ШаблонОперации,
	|	ИтоговаяТаблица.ПлановаяОперация,
	|	ИтоговаяТаблица.Выполнена,
	|	ИтоговаяТаблица.Просрочена,
	|	КошелькиИСчета.Родитель КАК Группа,
	|	КошелькиИСчета.ТипСчета,
	|	КошелькиИСчета.ИспользоватьДляНакоплений КАК ДляНакоплений,
	|	СУММА(ИтоговаяТаблица.ОстатокНаНачалоВВалюте) КАК ОстатокНаНачалоВВалюте,
	|	СУММА(ИтоговаяТаблица.ОстатокНаНачало) КАК ОстатокНаНачало,
	|	СУММА(ИтоговаяТаблица.СуммаСписанияВВалюте) КАК СуммаСписанияВВалюте,
	|	СУММА(ИтоговаяТаблица.СуммаПоступленияВВалюте) КАК СуммаПоступленияВВалюте,
	|	СУММА(ИтоговаяТаблица.СуммаСписания) КАК СуммаСписания,
	|	СУММА(ИтоговаяТаблица.СуммаПоступления) КАК СуммаПоступления,
	|	ИтоговаяТаблица.ВалютаСписания,
	|	ИтоговаяТаблица.ВалютаПоступления,
	|	СУММА(ИтоговаяТаблица.СуммаДолга) КАК СуммаДолга,
	|	СУММА(ИтоговаяТаблица.СуммаПроцентов) КАК СуммаПроцентов,
	|	СУММА(ИтоговаяТаблица.СуммаКомиссии) КАК СуммаКомиссии
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(ОстаткиНаНачало.Кошелек КАК Справочник.КошелькиИСчета) КАК Кошелек,
	|		ОстаткиНаНачало.Валюта КАК Валюта,
	|		0 КАК СуммаОборота,
	|		0 КАК СуммаОборотаВВалюте,
	|		&ТекДата КАК Дата,
	|		&ТекДата КАК ПлановаяДата,
	|		&ТекДата КАК ДатаПлановойОперации,
	|		ЛОЖЬ КАК ЭтоПлановаяОперация,
	|		НЕОПРЕДЕЛЕНО КАК ПлановаяОперация,
	|		НЕОПРЕДЕЛЕНО КАК ШаблонОперации,
	|		ИСТИНА КАК Выполнена,
	|		ЛОЖЬ КАК Просрочена,
	|		ЕСТЬNULL(ОстаткиНаНачало.ОстатокНаНачалоВВалюте, 0) КАК ОстатокНаНачалоВВалюте,
	|		ЕСТЬNULL(ОстаткиНаНачало.ОстатокНаНачало, 0) КАК ОстатокНаНачало,
	|		0 КАК СуммаСписанияВВалюте,
	|		0 КАК СуммаСписания,
	|		0 КАК СуммаПоступленияВВалюте,
	|		0 КАК СуммаПоступления,
	|		&ВалютаУчета КАК ВалютаПоступления,
	|		&ВалютаУчета КАК ВалютаСписания,
	|		0 КАК СуммаДолга,
	|		0 КАК СуммаПроцентов,
	|		0 КАК СуммаКомиссии
	|	ИЗ
	|		ОстаткиНаНачало КАК ОстаткиНаНачало
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(ВсеОбороты.Кошелек КАК Справочник.КошелькиИСчета),
	|		ВсеОбороты.Валюта,
	|		ЕСТЬNULL(ВсеОбороты.СуммаОборота, 0),
	|		ЕСТЬNULL(ВсеОбороты.СуммаОборотаВВалюте, 0),
	|		ЕСТЬNULL(ВсеОбороты.Дата, &ТекДата),
	|		ЕСТЬNULL(ВсеОбороты.ПлановаяДата, &ТекДата),
	|		ЕСТЬNULL(ВсеОбороты.ДатаПлановойОперации, &ТекДата),
	|		ЕСТЬNULL(ВсеОбороты.ЭтоПлановаяОперация, ЛОЖЬ),
	|		ЕСТЬNULL(ВсеОбороты.ПлановаяОперация, НЕОПРЕДЕЛЕНО),
	|		ЕСТЬNULL(ВсеОбороты.Шаблон, НЕОПРЕДЕЛЕНО),
	|		ЕСТЬNULL(ВсеОбороты.Выполнена, ИСТИНА),
	|		ЕСТЬNULL(ВсеОбороты.Просрочена, ЛОЖЬ),
	|		0,
	|		0,
	|		ЕСТЬNULL(ВсеОбороты.СуммаСписанияВВалюте, 0),
	|		ЕСТЬNULL(ВсеОбороты.СуммаСписания, 0),
	|		ЕСТЬNULL(ВсеОбороты.СуммаПоступленияВВалюте, 0),
	|		ЕСТЬNULL(ВсеОбороты.СуммаПоступления, 0),
	|		ЕСТЬNULL(ВсеОбороты.ВалютаПоступления, &ВалютаУчета),
	|		ЕСТЬNULL(ВсеОбороты.ВалютаСписания, &ВалютаУчета),
	|		ЕСТЬNULL(ВсеОбороты.СуммаДолга, 0),
	|		ЕСТЬNULL(ВсеОбороты.СуммаПроцентов, 0),
	|		ЕСТЬNULL(ВсеОбороты.СуммаКомиссии, 0)
	|	ИЗ
	|		ВсеОбороты КАК ВсеОбороты) КАК ИтоговаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КошелькиИСчета КАК КошелькиИСчета
	|		ПО ИтоговаяТаблица.Кошелек = КошелькиИСчета.Ссылка
	|
	|ГДЕ
	|	КошелькиИСчета.Активность
	|	//отбор
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	КошелькиИСчета.Ссылка,
	|	ИтоговаяТаблица.Валюта,
	|	ИтоговаяТаблица.Дата,
	|	ИтоговаяТаблица.ДатаПлановойОперации,
	|	ИтоговаяТаблица.ПлановаяДата,
	|	ИтоговаяТаблица.ЭтоПлановаяОперация,
	|	ИтоговаяТаблица.Выполнена,
	|	ИтоговаяТаблица.Просрочена,
	|	ИтоговаяТаблица.ВалютаСписания,
	|	ИтоговаяТаблица.ВалютаПоступления,
	|	ИтоговаяТаблица.ШаблонОперации,
	|	ИтоговаяТаблица.ПлановаяОперация,
	|	КошелькиИСчета.Родитель,
	|	КошелькиИСчета.ТипСчета,
	|	КошелькиИСчета.ИспользоватьДляНакоплений
	|
	|УПОРЯДОЧИТЬ ПО // ДАТА
	|	//упорядочивание
	|ИТОГИ
	|	МАКСИМУМ(ИтоговаяТаблица.Валюта),
	|	МАКСИМУМ(ИтоговаяТаблица.ВалютаСписания),
	|	МАКСИМУМ(ИтоговаяТаблица.ВалютаПоступления),
	|	СУММА(ОстатокНаНачало),
	|	СУММА(СуммаОборота),
	|	СУММА(ОстатокНаНачалоВВалюте),
	|	СУММА(СуммаОборотаВВалюте)
	|ПО
	|	ОБЩИЕ
	|	//Итоги
	|	//Периоды";

	
	Если ПараметрыВыполнения.СпособГруппировкиПрогноза = 0 Тогда // Общие итоги
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//упорядочивание", "Дата");
		ИмяГруппировки = "ОБЩИЕ";
		
	ИначеЕсли ПараметрыВыполнения.СпособГруппировкиПрогноза = 1 Тогда // Свободные/накопления
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//упорядочивание", "ДляНакоплений УБЫВ, Дата");
		ИмяГруппировки = "ДляНакоплений";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Итоги", ", " + ИмяГруппировки);
		
	ИначеЕсли ПараметрыВыполнения.СпособГруппировкиПрогноза = 2 Тогда // Тип счета
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//упорядочивание", "ТипСчета, Дата");
		ИмяГруппировки = "ТипСчета";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Итоги", ", " + ИмяГруппировки);
		
	ИначеЕсли ПараметрыВыполнения.СпособГруппировкиПрогноза = 3 Тогда // Группа
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//упорядочивание", "КошелькиИСчета.Родитель.Наименование, Дата");
		ИмяГруппировки = "Группа";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Итоги", ", " + ИмяГруппировки);
		
	ИначеЕсли ПараметрыВыполнения.СпособГруппировкиПрогноза = 4 Тогда // Только свободные деньги
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//упорядочивание", "КошелькиИСчета.Наименование, Дата");
		ИмяГруппировки = "Кошелек";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Итоги", ", " + ИмяГруппировки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//отбор", "И ДляНакоплений = ЛОЖЬ
			|	//отбор");
		
	ИначеЕсли ПараметрыВыполнения.СпособГруппировкиПрогноза = 5 Тогда // Только накопления
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//упорядочивание", "КошелькиИСчета.Наименование, Дата");
		ИмяГруппировки = "Кошелек";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Итоги", ", " + ИмяГруппировки);
		
	ИначеЕсли ПараметрыВыполнения.СпособГруппировкиПрогноза = 6 Тогда // Только указанные кошельки
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//упорядочивание", "КошелькиИСчета.Наименование, Дата");
		ИмяГруппировки = "Кошелек";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Итоги", ", " + ИмяГруппировки);
		Запрос.УстановитьПараметр("СписокКошельков",  ПараметрыВыполнения.СписокКошельковДляПрогноза);
		
	КонецЕсли;
	
	Если ПараметрыВыполнения.СпособОтбораКошельков = 1 Тогда // только свободные деньги
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//отбор", "И КошелькиИСчета.ИспользоватьДляНакоплений = ЛОЖЬ
			|	//отбор");
		
	ИначеЕсли ПараметрыВыполнения.СпособОтбораКошельков = 2 Тогда // только свободные деньги
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//отбор", "И КошелькиИСчета.ИспользоватьДляНакоплений
			|	//отбор");
		
	ИначеЕсли ПараметрыВыполнения.СпособОтбораКошельков = 6 Тогда // только свободные деньги
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//отбор", "И КошелькиИСчета.Ссылка В (&СписокКошельков)
			|	//отбор");
		Запрос.УстановитьПараметр("СписокКошельков", ПараметрыВыполнения.СписокКошельковДляПрогноза);
		
	КонецЕсли; 
	
	Если ПараметрыВыполнения.ВидСрокаПрогноза > 5 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Периоды", ",Дата ПЕРИОДАМИ(МЕСЯЦ, &ТекДата, &Дата2)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИтоговаяТаблица.Дата КАК Дата", "НАЧАЛОПЕРИОДА(ИтоговаяТаблица.Дата, МЕСЯЦ) КАК Дата");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Периоды", ",Дата ПЕРИОДАМИ(ДЕНЬ, &ТекДата, &Дата2)");
	КонецЕсли; 
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ВыборкаИтогов = ПакетРезультатов[ПакетРезультатов.Количество() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяГруппировки);
	
	ТаблицаОперацийПрогноза = Новый ТаблицаЗначений;
	ТаблицаОперацийПрогноза.Колонки.Добавить("КлючевоеПоле");
	ТаблицаОперацийПрогноза.Колонки.Добавить("Кошелек");
	ТаблицаОперацийПрогноза.Колонки.Добавить("ШаблонОперации");
	ТаблицаОперацийПрогноза.Колонки.Добавить("ПлановаяОперация");
	ТаблицаОперацийПрогноза.Колонки.Добавить("ЭтоПлановаяОперация");
	ТаблицаОперацийПрогноза.Колонки.Добавить("Выполнена");
	ТаблицаОперацийПрогноза.Колонки.Добавить("Просрочена");
	ТаблицаОперацийПрогноза.Колонки.Добавить("АктуальнаяДата");
	ТаблицаОперацийПрогноза.Колонки.Добавить("Дата");
	ТаблицаОперацийПрогноза.Колонки.Добавить("ПлановаяДата");
	ТаблицаОперацийПрогноза.Колонки.Добавить("Валюта");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаОборота");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаДолга");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаПроцентов");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаКомиссии");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаПоступленияВВалюте");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаСписанияВВалюте");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаПоступления");
	ТаблицаОперацийПрогноза.Колонки.Добавить("СуммаСписания");
	ТаблицаОперацийПрогноза.Колонки.Добавить("ВалютаПоступления");
	ТаблицаОперацийПрогноза.Колонки.Добавить("ВалютаСписания");
	
	// Сохраним полученные значения для обновления диаграммы
	ДанныеДляДиаграммы   = Новый Структура("ВыборкаИтогов,ТаблицаОперацийПрогноза,ИмяГруппировки", ВыборкаИтогов, ТаблицаОперацийПрогноза, ИмяГруппировки);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеДляДиаграммы, АдресХранилища);
	
КонецПроцедуры


#КонецОбласти



#КонецЕсли
