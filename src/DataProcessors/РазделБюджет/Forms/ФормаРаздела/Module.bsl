////////////////////////////////////////////////////////////////////////////////
//Обработка.РазделБюджет.Форма.РедакторБюджета
//  Просмотр и редактирование бюджета за выбранный период времени
//  
//Параметры формы:
//	ВариантБюджета
//	РазделБюджета
//	ДатаПросмотра
//	КоличествоПериодовПросмотра
//  
////////////////////////////////////////////////////////////////////////////////

&НаСервере 
Перем ОбработкаОбъект;
&НаСервере 
Перем Макеты;
&НаСервере 
Перем НомерТекущегоПериода;
&НаСервере 
Перем ШаблонТаблицыОстатковПоПериодам;

&НаКлиенте 
Перем ТекущаяОбласть;
&НаКлиенте 
Перем ВОжиданииОбновления;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполняем значениями по умолчанию
	ОбновитьПараметрыПланирования();
	ЗаполнитьРеквизитыФормыЗначениямиПоУмолчанию();
	
	// Обработка параметров формы
	Если Параметры.Свойство("ВариантБюджета") 
			И ЗначениеЗаполнено(Параметры.ВариантБюджета) 
			И ОбщегоНазначения.СсылкаСуществует(Параметры.ВариантБюджета) Тогда
		КлючНазначенияИспользования = "Расшифровка";
		ВариантБюджета = Параметры.ВариантБюджета;
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "Расшифровка" Тогда
		
		Если Параметры.Свойство("РазделБюджета") Тогда
			РазделБюджета = Параметры.Разделбюджета;
		КонецЕсли;
		
		Если Параметры.Свойство("ДатаПросмотра") Тогда
			ДатаПросмотра = Параметры.ДатаПросмотра;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Не ЕстьСохраненныеНастройкиФормы(ЭтотОбъект.ИмяФормы, КлючНазначенияИспользования) Тогда
		ОбновитьВсеДанные();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки["ДатаПросмотра"] = ПериодПросмотра.НачальныйПериод.Начало;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если КлючНазначенияИспользования = "Расшифровка" Тогда
		УстановитьЗначениеРеквизитаИзНастроек(Настройки, "КоличествоПериодовПросмотра");
		УстановитьЗначениеРеквизитаИзНастроек(Настройки, "КоличествоПериодовСтатистики");
	Иначе
		
		
		Для каждого КлючИЗначение Из Настройки Цикл
			УстановитьЗначениеРеквизитаИзНастроек(Настройки, КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	КолонкиСтатистики = Настройки["КолонкиСтатистики"];
	Если КолонкиСтатистики = Неопределено Тогда
		КолонкиСтатистики = НастройкаКолонокСтатистикиПоУмолчанию();
	КонецЕсли;
	
	ОбновитьВсеДанные();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если КлючНазначенияИспользования = "Расшифровка" Тогда
		Настройки.Удалить("ВариантБюджета");
		Настройки.Удалить("РазделБюджета");
		Настройки.Удалить("ДатаПросмотра");
	Иначе
		
		Вариант = Настройки["ВариантБюджета"];
		Если Не ЗначениеЗаполнено(Вариант) Или Не ОбщегоНазначения.СсылкаСуществует(Вариант) Тогда
			Настройки.Удалить("ВариантБюджета");
		КонецЕсли;
		
		Раздел = Настройки["РазделБюджета"];
		Если ЗначениеЗаполнено(Раздел) И Не ОбщегоНазначения.СсылкаСуществует(Раздел) Тогда
			Настройки.Удалить("ВариантБюджета");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТребуетсяОбновление = СтрНайти("ВыполненОбменДанными,Изменено расписание,Записан элемент справочника,Записана операция,
				|Выполнена синхронизация,Изменилась дата плановой операции,Изменены параметры бюджетрования,", ИмяСобытия + ",") > 0;
	
	Если ТребуетсяОбновление И (ВводДоступен() Или 
			ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ВладелецФормы") И Параметр.ВладелецФормы = УникальныйИдентификатор) Тогда
		ОбновитьВсеДанные();
	Иначе
		ПодключитьОбработчикОжидания("ОбновитьДанныеПриДоступностиВвода", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеВыбранногоПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДиалога     = Новый Структура("ВариантБюджета,ПериодПланирования,МаксимальноеКоличествоПериодов", 
				ВариантБюджета, ПериодПросмотра, 24);
	Оповещение           = Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект);
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ВыборПериодовБюджета"), ПараметрыДиалога, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантБюджетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ВариантБюджета) Тогда
		ВариантБюджета = ПараметрыПланированияОбщие.ОсновнойВариантБюджета;
	КонецЕсли;
	
	ВариантБюджетаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РазделБюджетаПриИзменении(Элемент)
	
	РазделБюджетаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрыватьКороткиеВзаиморасчетыПриИзменении(Элемент)
	КороткиеВзаиморасчетыПриИзмененииСервер();
КонецПроцедуры




#КонецОбласти


#Область ОбработчикиСобытийТаблицыБюджета

&НаКлиенте
Процедура ТаблицаБюджетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ТекущаяОбласть = Область;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБюджетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Расшифровка = Неопределено  Или ТипЗнч(Расшифровка) <> Тип("Структура") Или Не Расшифровка.Свойство("ИмяГруппы") Тогда
		Возврат;
		
	ИначеЕсли Расшифровка.ИмяГруппы = "Статистика"  И Расшифровка.ИмяКолонки = "Период" И Расшифровка.ТипСтроки = "Период" Тогда
		// Открываем настройку среднего значения
		ОткрытьДиалогНастройкиСреднего();
		
	ИначеЕсли Расшифровка.ТипСтроки = "ОстатокНаКонец" Или Расшифровка.ТипСтроки = "ОстатокНаНачало" Тогда
		// Открываем настройку среднего значения
		
		Если Расшифровка.ИмяГруппы = "Статистика" Или Расшифровка.ИмяКолонки = "Статья" Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПериода = СтрокаПериодаПоНомеру(ТаблицаБюджетныхПериодов, Расшифровка.НомерПериода);
		Если СтрокаПериода = Неопределено Тогда
			Возврат;
		КонецЕсли;
		 
		Если СтрокаПериода.Актуальность <= 0 Тогда
			ОткрытьОтчетПоКошелькам(ТекущаяОбласть);
		Иначе
			//ОткрытьОтчетПоСтатьеБюджета(ТекущаяОбласть);
		КонецЕсли;
		
	ИначеЕсли Расшифровка.ИмяГруппы = "Период" Тогда
		
		Если (Расшифровка.ИмяКолонки = "СуммаПлан" Или Расшифровка.ИмяКолонки = "КартинкаПлан") 
			И Расшифровка.ТипСтроки = "Статья" Тогда
			ОткрытьРедакторПоказателя(ТекущаяОбласть);
		Иначе
			// Отчет по статье бюджета за выбраный период
			ОткрытьОтчетПоСтатьеБюджета(ТекущаяОбласть);
		КонецЕсли;
		
	ИначеЕсли Расшифровка.ИмяГруппы = "Итоги" Или Расшифровка.ИмяГруппы = "Статистика" Тогда
			// Отчет по статье бюджета за выбраный период
			ОткрытьОтчетПоСтатьеБюджета(ТекущаяОбласть);
		
	КонецЕсли;
	 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБюджетаОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если Расшифровка = Неопределено Или ТипЗнч(Расшифровка) <> Тип("Структура") Или Не Расшифровка.Свойство("ТипСтроки") Тогда
		Возврат;
	КонецЕсли;
	
	Меню = Новый СписокЗначений;
	
	Если Расшифровка.ТипСтроки = "Статья" Тогда
		
		Если РазделБюджета <> "" Тогда
			Меню.Добавить("СдвинутьВверх", НСтр("ru='Вверх'"), , БиблиотекаКартинок.ПереместитьВверх);
			Меню.Добавить("СдвинутьВниз",  НСтр("ru='Вниз'"), , БиблиотекаКартинок.ПереместитьВниз);
		КонецЕсли;
		
		Если Расшифровка.ИмяГруппы = "Период" И (Расшифровка.ИмяКолонки = "СуммаПлан" Или Расшифровка.ИмяКолонки = "СуммаФакт") Тогда
			Меню.Добавить("Редактировать", ?(РазделБюджета = "", НСтр("ru='Посмотреть показатель и комментарий (F4)'"),НСтр("ru='Редактировать показатель и комментарий (F4)'")),
					, БиблиотекаКартинок.Изменить);
		КонецЕсли;
		
		Если Расшифровка.ИмяКолонки = "СуммаПлан" И 
				(Расшифровка.ИмяГруппы = "Итоги" Или Расшифровка.ИмяГруппы = "Статистика") Тогда
		ИначеЕсли Расшифровка.ИмяКолонки = "СуммаФакт" Тогда
			Меню.Добавить("ОтчетПоСтатьеФакт", НСтр("ru='Отчет по фактическим операциям'"), , БиблиотекаКартинок.Отчет);
		ИначеЕсли Расшифровка.ИмяКолонки = "ОсталосьПоСтатье" Или Расшифровка.ИмяКолонки = "Превышение" Тогда
			Меню.Добавить("ОтчетПоСтатьеПланФакт", НСтр("ru='Отчет план/факт по бюджету'"), , БиблиотекаКартинок.Отчет);
		КонецЕсли;
		
	ИначеЕсли Расшифровка.ТипСтроки = "ИтогДоходы" Или Расшифровка.ТипСтроки = "ИтогРасходы" Тогда
		
		Если Расшифровка.ИмяКолонки = "СуммаФакт" Тогда
			Меню.Добавить("ОтчетПоСтатьеФакт", НСтр("ru='Отчет по фактическим операциям'"), , БиблиотекаКартинок.Отчет);
		ИначеЕсли Расшифровка.ИмяКолонки = "ОсталосьПоСтатье" Или Расшифровка.ИмяКолонки = "Превышение" Тогда
			Меню.Добавить("ОтчетПоСтатьеПланФакт", НСтр("ru='Отчет план/факт по бюджету'"), , БиблиотекаКартинок.Отчет);
		КонецЕсли;
		
	ИначеЕсли Расшифровка.ТипСтроки = "ОстатокНаНачало" Или Расшифровка.ТипСтроки = "ОстатокНаКонец" Тогда
		
		Если Расшифровка.ИмяКолонки = "ОстатокДенегФакт" Тогда
			Меню.Добавить("ОтчетПоОстаткамФакт", НСтр("ru='Отчет остаткам денег'"), , БиблиотекаКартинок.Отчет);
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяОбласть = Элементы.ТаблицаБюджета.ТекущаяОбласть;
	ДополнительныеПараметры = Новый Структура;
	Если ТекущаяОбласть = Неопределено Тогда
		ДополнительныеПараметры.Вставить("НомерСтроки",  0);
		ДополнительныеПараметры.Вставить("НомерКолонки", 0);
	Иначе
		ДополнительныеПараметры.Вставить("НомерСтроки",  ТекущаяОбласть.Верх);
		ДополнительныеПараметры.Вставить("НомерКолонки", ТекущаяОбласть.Лево);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыборКонтекстногоМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(Оповещение, Меню);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБюджетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если РазделБюджета = "" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЯчейки = ПараметрыТекущейЯчейкиБюджета(Область);
	Если ПараметрыЯчейки = Неопределено Тогда
		Область.Значение = 0;
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПланаКлиент(ПараметрыЯчейки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБюджетаПриАктивизацииОбласти(Элемент)
	
	// Сумма выделенных ячеек
	Если Не СкрыватьСуммуВыделенныхЯчеек Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РассчитатьСуммуЯчеек", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьВсеДанные();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПредыдущий(Команда)
	СдвинутьПериодПросмотраКлиент(-1);
КонецПроцедуры

&НаКлиенте
Процедура ПериодСледующий(Команда)
	СдвинутьПериодПросмотраКлиент(1);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставСтатей(Команда)
	
	Если РазделБюджета = "" Тогда
		ПоказатьПредупреждение(, НСтр("ru='В сводном бюджете состав статей не настраивается'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВариантБюджета",              ВариантБюджета);
	ПараметрыФормы.Вставить("РазделБюджета",               РазделБюджета);
	Если НужныКолонкиСтатистики() Тогда
		ПараметрыФормы.Вставить("МинимальнаяДата",             ТаблицаБюджетныхПериодов[ТаблицаБюджетныхПериодов.Количество() - 1].НачалоКалендарногоПериода);
	Иначе
		ПараметрыФормы.Вставить("МинимальнаяДата",             ТаблицаБюджетныхПериодов[0].НачалоКалендарногоПериода);
	КонецЕсли;
	ПараметрыФормы.Вставить("МинимальнаяДатаПросмотра",    ПериодПросмотра.НачальныйПериод.Начало);
	ПараметрыФормы.Вставить("МаксимальнаяДата",            ПериодПросмотра.КонечныйПериод.Окончание);
	ПараметрыФормы.Вставить("КалендарноеОкончаниеВыборки", ПериодПросмотра.КонечныйПериод.КалендарноеОкончание);
	
	ПараметрыФормы.Вставить("ГрафаБюджета");
	ПараметрыФормы.Вставить("СтатьяБюджета");
	ДанныеСтроки = ПараметрыТекущейСтрокиБюджета();
	Если ДанныеСтроки <> Неопределено Тогда
		ПараметрыФормы.ГрафаБюджета   = ДанныеСтроки.ГрафаБюджета;
		ПараметрыФормы.СтатьяБюджета  = ДанныеСтроки.СтатьяБюджета;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьСоставСтатейЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(ПолучитьПолноеИмяФормы("РедакторСоставаСтатей"), ПараметрыФормы, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСреднего(Команда)
	ОткрытьДиалогНастройкиСреднего();
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	ОткрытьРедакторПоказателя(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВверх(Команда)
	СдвинутьСтатьюКлиент(-1);
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьВниз(Команда)
	СдвинутьСтатьюКлиент(1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзДругогоВарианта(Команда)
	ПодтвердитьЗаполнениеБюджета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланомПредыдущегоМесяца(Команда)
	ПодтвердитьЗаполнениеБюджета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСреднимПланом(Команда)
	ПодтвердитьЗаполнениеБюджета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСреднимФактом(Команда)
	ПодтвердитьЗаполнениеБюджета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактомПредыдущегоМесяца(Команда)
	ПодтвердитьЗаполнениеБюджета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКлючиСтатей(Команда)
	Состояние(НСтр("ru='Обновляются ключи всех статей...'"));
	ОбновитьКлючиСтатейНаСервере();
	Состояние(НСтр("ru='Ключи всех статей обновлены.'"));
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбъектОбработки()

	Если ОбработкаОбъект = Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбработкаОбъект;

КонецФункции

// Проверяет, имеются ли настройки пользователя для данной формы и ключа назначения
&НаСервереБезКонтекста
Функция ЕстьСохраненныеНастройкиФормы(ИмяФормы, КлючНазначенияИспользования)

	Возврат ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + ?(КлючНазначенияИспользования = "", "", "/" + КлючНазначенияИспользования) + "/ТекущиеДанные", ) <> Неопределено;

КонецФункции

&НаСервере
Процедура УстановитьЗначениеРеквизитаИзНастроек(Настройки, ИмяСвойства)

	ЗначениеСвойства = Настройки.Получить(ИмяСвойства);
	Если ЗначениеСвойства <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ЗначениеСвойства) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ЗначениеСвойства))
			И Не ОбщегоНазначения.СсылкаСуществует(ЗначениеСвойства) Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ЭтотОбъект[ИмяСвойства] = ЗначениеСвойства;
		Исключение
			// Обработка исключения не требуется
		КонецПопытки; 
		
	КонецЕсли;

КонецПроцедуры

// Строковое представление периода, за который получается статистика
&НаСервере
Функция ПредставлениеСтатистики(ТаблицаПериодов)

	НачДата = ТаблицаПериодов[1].НачалоПериода;
	КонДата = ПериодПросмотра.НачальныйПериод.Начало - 1;
	ПредставлениеПериодов = БюджетированиеКлиентСервер.ПредставлениеБюджетногоПериода(НачДата, КонДата, 
								ПериодПросмотра.ВидПериодаСтрокой);
	ПредсавлениеКоличества = БюджетированиеКлиентСервер.ПредставлениеКоличестваБюджетныхПериодов(КоличествоПериодовСтатистики, ПериодПросмотра.ВидПериодаСтрокой);
	СтрокаПредставления = НСтр("ru='Среднее за %1 (%2)'");
	Возврат СтрШаблон(СтрокаПредставления, ПредсавлениеКоличества, ПредставлениеПериодов);

КонецФункции

// Возвращает имя формы текущей обработки безотносительно ее встроенности в конфигурацию
&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы)

	Возврат СтрЗаменить(ЭтотОбъект.ИмяФормы, "ФормаРаздела", ИмяФормы);

КонецФункции

// Заполняет серверную переменную Макеты табличными документами из макета обработки
&НаСервере
Процедура ПрочитатьМакеты()

	Если ТипЗнч(Макеты) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаОбработка = ОбъектОбработки();
	МакетОбработки = ЭтаОбработка.ПолучитьМакет("Бюджет");
	Макеты = Новый Структура;
	
	СписокСтрок   = Новый Массив;
	СписокКолонок = Новый Массив;
	Для каждого Область Из МакетОбработки.Области Цикл
		Если Лев(Область.Имя, 6) = "Строка" Тогда
			СписокСтрок.Добавить(Область.Имя);
		ИначеЕсли Лев(Область.Имя, 7) = "Колонка" Тогда
			СписокКолонок.Добавить(Область.Имя);
		Иначе
			Макеты.Вставить(Область.Имя, Область);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяСтроки Из СписокСтрок Цикл
		
		СтруктураКолонок = Новый Структура;
		Для каждого ИмяКолонки Из СписокКолонок Цикл
			СтруктураКолонок.Вставить(Сред(ИмяКолонки, 8), МакетОбработки.ПолучитьОбласть(ИмяСтроки + "|" + ИмяКолонки));
		КонецЦикла;
		
		Макеты.Вставить(Сред(ИмяСтроки, 7), СтруктураКолонок);
		
	КонецЦикла;

	Картинка1 = МакетОбработки.Рисунки.Картинка1.Картинка;
	Картинка2 = МакетОбработки.Рисунки.Картинка2.Картинка;
	Макеты.Вставить("Картинка1", Картинка1);
	Макеты.Вставить("Картинка2", Картинка2);
	
КонецПроцедуры

// Заполняет структуру ПараметрыПланированияОбщие значениями констант
&НаСервере
Процедура ОбновитьПараметрыПланирования()

	НаборКонстант = Константы.СоздатьНабор("ВалютаУчета,ОсновнойВариантБюджета,ПределПланирования");
	НаборКонстант.Прочитать();
	
	ПараметрыПланированияОбщие = Новый Структура;
	ПараметрыПланированияОбщие.Вставить("ВалютаУчета", НаборКонстант.ВалютаУчета);
	ПараметрыПланированияОбщие.Вставить("ОсновнойВариантБюджета", НаборКонстант.ОсновнойВариантБюджета);
	ПараметрыПланированияОбщие.Вставить("ПределПланирования", НаборКонстант.ПределПланирования);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыЗначениямиПоУмолчанию()

	ВариантБюджета               = ПараметрыПланированияОбщие.ОсновнойВариантБюджета;
	РазделБюджета                = Справочники.ФинансовыеЦели.ПустаяСсылка();
	КоличествоПериодовПросмотра  = 1;
	ДатаПросмотра                = НачалоДня(ТекущаяДатаКлиентСервер());
	КоличествоПериодовСтатистики = 3;
	
	КолонкиСтатистики = НастройкаКолонокСтатистикиПоУмолчанию();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаКолонокСтатистикиПоУмолчанию()

	Возврат Новый Структура("СуммаПлан,СуммаФакт,ОсталосьПоСтатье,Превышение", Истина, Истина, Истина, Истина);

КонецФункции
 

// Прверяет корректность заполненных параметров
&НаСервере
Функция ВариантБюджетаЗаполненКорректно()

	Ошибки = Неопределено;
	Если Не ЗначениеЗаполнено(ВариантБюджета) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , НСтр("ru='Не выбран вариант бюджета!'"), ""); 
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Результат = Истина;
	Если ВариантБюджета.НачалоПланирования >= ПараметрыПланированияОбщие.ПределПланирования Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , НСтр("ru='Для выбранного варианта начало планирования задано позже даты, по которую расчитаны плановые операции.'"), Неопределено); 
		Результат = Ложь;
		
	КонецЕсли;
	
	Если ВариантБюджета.ЧислоМесяца = 0 Или ВариантБюджета.НомерМесяца = 0 Или Не ЗначениеЗаполнено(ВариантБюджета.ДетальностьПланирования) Тогда
		
		ВариантОбъект = ВариантБюджета.ПолучитьОбъект();
		ВариантОбъект.ЧислоМесяца = ?(ЗначениеЗаполнено(ВариантОбъект.ЧислоМесяца), ВариантОбъект.ЧислоМесяца, 1);
		ВариантОбъект.НомерМесяца = ?(ЗначениеЗаполнено(ВариантОбъект.НомерМесяца), ВариантОбъект.НомерМесяца, 1);
		ВариантОбъект.ДетальностьПланирования = ?(ЗначениеЗаполнено(ВариантОбъект.ДетальностьПланирования), ВариантОбъект.ДетальностьПланирования, Перечисления.ПериодичностьПланирования.Месяц);
		ВариантОбъект.Записать();
		
	КонецЕсли;
	
	Если Не Результат Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Добавляет в структуру свойство с указанным именем, наличие значения проверяется в источнике
&НаКлиенте
Процедура ДобавитьВСтруктуруСвойство(ИмяСвойства, СтруктураНазначения, Источник, ЗначениеПоУмолчанию)

	Если Источник.Свойство(ИмяСвойства) Тогда
		ДобавитьВСтруктуруЗначениеКоллекции(ИмяСвойства, СтруктураНазначения, Источник, ЗначениеПоУмолчанию);
	Иначе
		СтруктураНазначения.Вставить(ИмяСвойства, ЗначениеПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

// Добавляет в структуру ключ с указанным именем, непустое значение берется из Коллекции, а пустое заменяется на значение по умолчанию
&НаКлиентеНаСервереБезКонтекста 
Процедура ДобавитьВСтруктуруЗначениеКоллекции(ИмяЗначения, СтруктураНазначения, Коллекция, ЗначениеПоУмолчанию = 0)

	СтруктураНазначения.Вставить(ИмяЗначения, ?(ЗначениеЗаполнено(Коллекция[ИмяЗначения]), Коллекция[ИмяЗначения], ЗначениеПоУмолчанию));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматСтрокаОстатка(СуммаОстатка, ТипОстатка)

	Результат = "";
	СтрокаФормата = "ЧЦ=15; ЧДЦ=2; ЧН=";
	
	Если ТипОстатка = "План" Тогда
		Результат = НСтр("ru='План: %1'"); 
		Результат = СтрШаблон(Результат, Формат(СуммаОстатка, СтрокаФормата));
	ИначеЕсли ТипОстатка = "Факт" Тогда
		Результат = НСтр("ru='Факт: %1'"); 
		Результат = СтрШаблон(Результат, Формат(СуммаОстатка, СтрокаФормата));
	Иначе
		Результат = Формат(СуммаОстатка, СтрокаФормата);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


#Область ПериодБюджета

// Создает и возвращает структуру, заполненную значениями по умолчанию для заданного варианта бюджета
//	НачальныйПериод - Структура - первый рассматриваемый в редакторе период бюджета
//	КонечныйПериод - Структура - последний рассматриваемый в редакторе период бюджета
//	КоличествоПериодов - Число - количество рассматриваемых периодов (не может быть менее 1)
//Например, при рассмотрении квартала по месяцам, значениями будут:
//	НачальныйПериод = январь
//	КонечныйПериод = март
//	КоличествоПериодов = 3
&НаСервереБезКонтекста
Функция СтруктураПериодаПросмотра(ВариантБюджета, НачальнаяДата = Неопределено, КоличествоПериодов = Неопределено)
	
	Возврат БюджетированиеСервер.НоваяСтруктураПросмотраБюджетныхПериодов(ВариантБюджета, НачальнаяДата, КоличествоПериодов);
	
КонецФункции

&НаКлиенте
Процедура СдвинутьПериодПросмотраКлиент(Направление)

	
	ТекстСообщения = "";
	Если Не СдвинутьПериодПросмотра(Направление, ТекстСообщения) И ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СдвинутьПериодПросмотра(Направление, ТекстСообщения)

	ТекущееКоличествоПериодов = ПериодПросмотра.КоличествоПериодов;
	
	Если Направление < 0 Тогда
		// Проверяем начальный период
		
		НачальныйПериод = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ПериодПросмотра.НачальныйПериод);
		БюджетированиеСервер.СдвинутьБюджетныйПериод(НачальныйПериод, ВариантБюджета, Направление);
		Пока НачальныйПериод.КалендарноеНачало < ПериодПросмотра.НачалоПланированияВарианта И ТекущееКоличествоПериодов > 1 Цикл
			БюджетированиеСервер.СдвинутьБюджетныйПериод(НачальныйПериод, ВариантБюджета, 1);
			ТекущееКоличествоПериодов = ТекущееКоличествоПериодов - 1;
		КонецЦикла;
		
		Если НачальныйПериод.КалендарноеНачало < ПериодПросмотра.НачалоПланированияВарианта Тогда
			ТекстСообщения = НСтр("ru='Выбранный вариант бюджета начинается с %1 года. Более ранних планов не предусмотрено.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Год(ПериодПросмотра.НачалоПланированияВарианта), "ЧГ=") );
			Возврат Ложь;
		КонецЕсли;
		
		ДатаПросмотра   = НачальныйПериод.Начало;
		ПериодПросмотра = СтруктураПериодаПросмотра(ВариантБюджета, ДатаПросмотра, ТекущееКоличествоПериодов);
		
	Иначе
		// проверяем конечный период
		
		КонечныйПериод = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ПериодПросмотра.КонечныйПериод);
		БюджетированиеСервер.СдвинутьБюджетныйПериод(КонечныйПериод, ВариантБюджета, Направление);
		Пока КонечныйПериод.Окончание > ПараметрыПланированияОбщие.ПределПланирования И ТекущееКоличествоПериодов > 1 Цикл
			БюджетированиеСервер.СдвинутьБюджетныйПериод(КонечныйПериод, ВариантБюджета, -1);
			ТекущееКоличествоПериодов = ТекущееКоличествоПериодов - 1;
		КонецЦикла;
		
		Если КонечныйПериод.Окончание > ПараметрыПланированияОбщие.ПределПланирования Тогда
			ТекстСообщения = НСтр("ru='Плановые операции рассчитаны только до конца %1 года. Измените предел планирования для составления более отдаленных планов'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Год(ПараметрыПланированияОбщие.ПределПланирования), "ЧГ=") );
			Возврат Ложь;
		КонецЕсли;
		
		Если ТекущееКоличествоПериодов > 1 Тогда
			БюджетированиеСервер.СдвинутьБюджетныйПериод(КонечныйПериод, ВариантБюджета, -ТекущееКоличествоПериодов+1);
		КонецЕсли;
		ДатаПросмотра   = КонечныйПериод.Начало;
		
		ПериодПросмотра = СтруктураПериодаПросмотра(ВариантБюджета, ДатаПросмотра, ТекущееКоличествоПериодов);
		
	КонецЕсли;

	ПериодПросмотраПриИзмененииСервер();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПериодПросмотра = Результат;
		ПериодПросмотраПриИзмененииСервер();
	КонецЕсли;

КонецПроцедуры

// Возвращает таблицу значений для использования в запросах бюджетных показателей
&НаСервереБезКонтекста
Функция ТаблицаБюджетныхПериодов(ВариантБюджета, НачальнаяДатаРедактирования, КоличествоПеродовРедактирования, КоличествоПериодовСтатистики)

	ТипДата    = Новый ОписаниеТипов("Дата");
	ТипСтрока  = Новый ОписаниеТипов("Строка");
	ТипЧисло   = Новый ОписаниеТипов("Число");
	ТипБулево  = Новый ОписаниеТипов("Булево");
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерПериода",              ТипЧисло);
	ТаблицаПериодов.Колонки.Добавить("НачалоПериода",             ТипДата);
	ТаблицаПериодов.Колонки.Добавить("ОкончаниеПериода",          ТипДата);
	ТаблицаПериодов.Колонки.Добавить("ПредставлениеПериода",      ТипСтрока);
	ТаблицаПериодов.Колонки.Добавить("НачалоКалендарногоПериода", ТипДата);
	ТаблицаПериодов.Колонки.Добавить("Редактируется", ТипБулево);
	ТаблицаПериодов.Колонки.Добавить("ТекущийПериод", ТипБулево);
	ТаблицаПериодов.Колонки.Добавить("Актуальность",  ТипЧисло);
	ТаблицаПериодов.Колонки.Добавить("НомерКолонки",  ТипЧисло);
	
	ПериодНачалаРедактирования = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, НачальнаяДатаРедактирования);
	
	ПериодОкончанияРедактирования = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ПериодНачалаРедактирования);
	БюджетированиеСервер.СдвинутьБюджетныйПериод(ПериодОкончанияРедактирования, ВариантБюджета, КоличествоПеродовРедактирования - 1);
	
	Если КоличествоПеродовРедактирования = 1 И КоличествоПериодовСтатистики > 0 Тогда
		ДатаПериода = БюджетированиеСервер.ДобавитьПериодУказанногоТипа(ПериодНачалаРедактирования.Начало, ВариантБюджета.ДетальностьПланирования, -КоличествоПериодовСтатистики);
	Иначе
		ДатаПериода = ПериодНачалаРедактирования.Начало;
	КонецЕсли;
	 
	ТекущийДень = НачалоДня(ТекущаяДатаКлиентСервер());
	Счетчик = 1;
	Пока ДатаПериода <= ПериодОкончанияРедактирования.Окончание Цикл
		
		СтруктураПериода = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
		
		СтрокаТаблицы = ТаблицаПериодов.Добавить();
		СтрокаТаблицы.НачалоПериода = СтруктураПериода.Начало;
		СтрокаТаблицы.ОкончаниеПериода = СтруктураПериода.Окончание;
		СтрокаТаблицы.ПредставлениеПериода = СтруктураПериода.Представление;
		СтрокаТаблицы.НачалоКалендарногоПериода = СтруктураПериода.КалендарноеНачало;
		
		Если СтрокаТаблицы.НачалоПериода >= ПериодНачалаРедактирования.Начало 
			И СтрокаТаблицы.ОкончаниеПериода <= ПериодОкончанияРедактирования.Окончание Тогда
			
			СтрокаТаблицы.Редактируется = Истина;
			СтрокаТаблицы.НомерПериода = Счетчик;
			Счетчик = Счетчик + 1;
			СтрокаТаблицы.ТекущийПериод = ТекущийДень >= СтрокаТаблицы.НачалоПериода 
						И ТекущийДень <= СтрокаТаблицы.ОкончаниеПериода;
			
		ИначеЕсли СтрокаТаблицы.ОкончаниеПериода < ПериодНачалаРедактирования.Начало Тогда
			
			СтрокаТаблицы.НомерПериода = -1;
			
		ИначеЕсли СтрокаТаблицы.НачалоПериода > ПериодОкончанияРедактирования.Окончание Тогда
			
			СтрокаТаблицы.НомерПериода = 9999;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ОкончаниеПериода < ТекущийДень Тогда
			СтрокаТаблицы.Актуальность = -1;
		ИначеЕсли СтрокаТаблицы.НачалоПериода > ТекущийДень Тогда
			СтрокаТаблицы.Актуальность = 1;
		Иначе
			СтрокаТаблицы.Актуальность = 0;
		КонецЕсли;
		
		ДатаПериода = СтруктураПериода.Окончание + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;

КонецФункции

&НаСервере
Процедура ОбновитьХарактеристикиБюджетногоПериода()

	ПериодПросмотра             = СтруктураПериодаПросмотра(ВариантБюджета, ДатаПросмотра, ПериодПросмотра.КоличествоПериодов);
	ДатаПросмотра               = ПериодПросмотра.НачальныйПериод.Начало;
	КоличествоПериодовПросмотра = ПериодПросмотра.КоличествоПериодов;
	
	ОбновитьИнформациюОпериоде();

КонецПроцедуры

// обновляет информацию о периоде редактирования бюджета
&НаСервере
Процедура ОбновитьИнформациюОпериоде()

	ПредставлениеВыбранногоПериода = ПериодПросмотра.Представление;
	
	Если ПериодПросмотра.КоличествоПериодов = 1 Тогда
		// Редактируется единственный период
		
		Актуальность = АктуальностьПериодаПоНомеру(ТаблицаБюджетныхПериодов, 1);
		Элементы.ГруппаЗаполнениеСредним.Видимость    = РазделБюджета <> "" И КоличествоПериодовСтатистики > 0; // средним
		Элементы.ГруппаЗаполнениеПредыдущим.Видимость = Ложь; //прошлым периодом
		
	Иначе
		
		ПредставлениеВыбранногоПериода = ПредставлениеВыбранногоПериода + " (" + ПериодПросмотра.ПредставлениеКоличестваПериодов + ")";
		
		Элементы.ГруппаЗаполнениеСредним.Видимость    = Ложь;   // средним
		Элементы.ГруппаЗаполнениеПредыдущим.Видимость = РазделБюджета <> ""; //прошлым периодом
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОРазделе()

	РазделРедкатируется = РазделБюджета <> "";
	Элементы.СдвинутьВверх.Доступность        = РазделРедкатируется;
	Элементы.СдвинутьВниз.Доступность         = РазделРедкатируется;
	Элементы.ИзменитьСоставСтатей.Доступность = РазделРедкатируется;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АктуальностьПериодаПоНомеру(ТаблицаПериодов, НомерПериода)

	СтрокаПериода = ТаблицаПериодов.НайтиСтроки(Новый Структура("НомерПериода", НомерПериода));
	Если СтрокаПериода.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаПериода[0].Актуальность;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаПоНомеру(ТаблицаПериодов, НомерПериода)

	СтрокаПериода = ТаблицаПериодов.НайтиСтроки(Новый Структура("НомерПериода", НомерПериода));
	Если СтрокаПериода.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаПериода[0].ПредставлениеПериода;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПериодаПоНомеру(ТаблицаПериодов, НомерПериода)

	СтрокаПериода = ТаблицаПериодов.НайтиСтроки(Новый Структура("НомерПериода", НомерПериода));
	Если СтрокаПериода.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаПериода[0];

КонецФункции

// Возвращает Истина, если в периоде просмотра хотя бы один период еще не завершился
&НаКлиентеНаСервереБезКонтекста
Функция ВПросмотреЕстьАктуальныеПериоды(Форма)

	Если Форма.ПериодПросмотра = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Форма.ПериодПросмотра.КонечныйПериод.Окончание > НачалоДня(ТекущаяДатаКлиентСервер());

КонецФункции
 

#КонецОбласти



#Область ОбновлениеТаблицыБюджета


// Выполняет обновление, если ввод доступен, либо подключает обработчик ожидания
&НаКлиенте
Процедура ОбновитьДанныеПриДоступностиВвода()

	Если ВводДоступен() Тогда
		
		ОбновитьВсеДанные();
		
	Иначе
		
		ВОжиданииОбновления = Истина;
		Заголовок = НСтр("ru='Бюджет (обновляется...)'"); 
		ПодключитьОбработчикОжидания("ОбновитьДанныеПриДоступностиВвода", 0.5, Истина);
		
	КонецЕсли;

КонецПроцедуры

// Принудительное обновление всех данных редактора
&НаСервере
Процедура ОбновитьВсеДанные()

	// Сбрасываем ожидание обновления
	Заголовок = НСтр("ru='Бюджет'");
	ВОжиданииОбновления = Неопределено;
	
	Если Не ВариантБюджетаЗаполненКорректно() Тогда
		ТаблицаБюджета.Очистить();
		Возврат;
	КонецЕсли;
	
	ПериодПросмотра = СтруктураПериодаПросмотра(ВариантБюджета, ДатаПросмотра, КоличествоПериодовПросмотра);
	ОбновитьИнформациюОпериоде();
	ОбновитьИнформациюОРазделе();
	ОбновитьСписокВыбораФинансовыхЦелей();
	ПроверитьЗаполнениеСтатьями();
	ОбновитьТаблицуБюджета();
	
КонецПроцедуры

// Обновление редактора при изменении периода
&НаСервере
Процедура ПериодПросмотраПриИзмененииСервер()

	Если Не ВариантБюджетаЗаполненКорректно() Тогда
		ТаблицаБюджета.Очистить();
		Возврат;
	КонецЕсли;
	
	ДатаПросмотра               = ПериодПросмотра.НачальныйПериод.Начало;
	КоличествоПериодовПросмотра = ПериодПросмотра.КоличествоПериодов;
	ОбновитьИнформациюОпериоде();
	ПроверитьЗаполнениеСтатьями();
	ОбновитьТаблицуБюджета();

КонецПроцедуры

// Обновление редактора при изменении варианта бюджета
&НаСервере
Процедура ВариантБюджетаПриИзмененииСервер()

	Если Не ВариантБюджетаЗаполненКорректно() Тогда
		ТаблицаБюджета.Очистить();
		Возврат;
	КонецЕсли;
	
	ОбновитьХарактеристикиБюджетногоПериода();
	ОбновитьСписокВыбораФинансовыхЦелей();
	ПроверитьЗаполнениеСтатьями();
	ОбновитьТаблицуБюджета();

КонецПроцедуры

// Обновление редактора при изменении раздела бюджета
&НаСервере
Процедура РазделБюджетаПриИзмененииСервер()

	ПроверитьЗаполнениеСтатьями();
	ОбновитьИнформациюОРазделе();
	ОбновитьТаблицуБюджета();

КонецПроцедуры

// Обновление редактора при изменении порядка статей
&НаСервере
Процедура ПорядокСтатейПриИзмененииСервер()

	ОбновитьТаблицуБюджета();

КонецПроцедуры

&НаСервере
Процедура НастройкиСреднегоПриИзмененииСервер()

	ПроверитьЗаполнениеСтатьями();
	ОбновитьТаблицуБюджета();

КонецПроцедуры

&НаСервере
Процедура КороткиеВзаиморасчетыПриИзмененииСервер()

	ОбновитьТаблицуБюджета();

КонецПроцедуры
 
// Проверяет наличие статей для варианта/раздела/перида
&НаСервере
Процедура ПроверитьЗаполнениеСтатьями()

	БюджетированиеСервер.ПроверитьЗаполнениеСтатьямибюджетаЗаПериод(ВариантБюджета, РазделБюджета, 
			ПериодПросмотра.НачальныйПериод.Начало, ПериодПросмотра.КонечныйПериод.Окончание);

КонецПроцедуры

// Обновляет список выбора финансовых целей (разделы бюджета)
&НаСервере
Процедура ОбновитьСписокВыбораФинансовыхЦелей()

	СписокВыбора = Элементы.РазделБюджета.СписокВыбора;
	Дата1 = ПериодПросмотра.НачальныйПериод.КалендарноеНачало;
	Дата2 = ПериодПросмотра.КонечныйПериод.КалендарноеОкончание;
	
	СписокВыбора.Очистить();
	
	ПредставлениеБюджета = Новый ФорматированнаяСтрока(НСтр("ru='Сводный бюджет (только просмотр)'"), Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина), );
	СписокВыбора.Добавить("", ПредставлениеБюджета);
	
	ПредставлениеБюджета = Новый ФорматированнаяСтрока(НСтр("ru='Бюджет свободных денег'"), ,);
	СписокВыбора.Добавить(Справочники.ФинансовыеЦели.ПустаяСсылка(), ПредставлениеБюджета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинансовыеЦели.Ссылка,
	|	ФинансовыеЦели.Наименование,
	|	ФинансовыеЦели.ПометкаУдаления,
	|	ФинансовыеЦели.Предопределенный,
	|	ФинансовыеЦели.Активность
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК ФинансовыеЦели
	|ГДЕ
	|	(ФинансовыеЦели.Активность
	|			ИЛИ ФинансовыеЦели.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПоказателиБюджета.РазделБюджета
	|				ИЗ
	|					РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|				ГДЕ
	|					ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|					И ПоказателиБюджета.НачалоПериода МЕЖДУ &Дата1 И &Дата2))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФинансовыеЦели.Предопределенный УБЫВ,
	|	ФинансовыеЦели.Активность УБЫВ,
	|	ФинансовыеЦели.РеквизитДопУпорядочивания";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШрифтЦели = Новый Шрифт (ШрифтыСтиля.ОбычныйШрифтТекста, , , , , Выборка.ПометкаУдаления, );
		ЦветЦели = ?(Выборка.Активность, ЦветаСтиля.ЦветТекстаФормы, ЦветаСтиля.ВторостепеннаяНадписьЦвет);
		Если Выборка.Предопределенный Тогда
			ТекстЦели = Новый ФорматированнаяСтрока(Выборка.Наименование, ШрифтЦели, ЦветЦели);
		Иначе
			ТекстЦели = Новый ФорматированнаяСтрока(НСтр("ru='Цель'"),
				": ",
				 Новый ФорматированнаяСтрока(Выборка.Наименование, ШрифтЦели, ЦветЦели));
		КонецЕсли;
		
		СписокВыбора.Добавить(Выборка.Ссылка, ТекстЦели);
	КонецЦикла;
	
	Если СписокВыбора.НайтиПоЗначению(РазделБюджета) = Неопределено Тогда
		РазделБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры


//Подготовка структур расшифровки
&НаСервере
Функция НоваяСтруктураРасшифровки(ТипСтроки, ИмяГруппы, ИмяКолонки, знач ЗначениеЗаполнения, знач ЗначенияПоказателей)

	Результат = Новый Структура;
	Результат.Вставить("ТипСтроки",  ТипСтроки);
	Результат.Вставить("ИмяГруппы",  ИмяГруппы);
	Результат.Вставить("ИмяКолонки", ИмяКолонки);

	Если ТипСтроки = "Период" Тогда
		
		Результат.Вставить("НомерПериода", ЗначениеЗаполнения);
		
	ИначеЕсли ТипСтроки = "ОстатокНаНачало" И ЗначениеЗаполнения <> Неопределено Тогда
		
		Если ИмяГруппы = "Период" Тогда
			Результат.Вставить("НомерПериода", ЗначениеЗаполнения.НомерПериода);
		КонецЕсли;
		Результат.Вставить("ОстатокДенегПлан", ЗначениеЗаполнения.ОстатокНаНачалоПлан);
		Результат.Вставить("ОстатокДенегФакт", ЗначениеЗаполнения.ОстатокНаНачалоФакт);
		
	ИначеЕсли ТипСтроки = "ОстатокНаКонец" И ЗначениеЗаполнения <> Неопределено Тогда
		
		Если ИмяГруппы = "Период" Тогда
			Результат.Вставить("НомерПериода", ЗначениеЗаполнения.НомерПериода);
		КонецЕсли;
		Результат.Вставить("ОстатокДенегПлан", ЗначениеЗаполнения.ОстатокНаКонецПлан);
		Результат.Вставить("ОстатокДенегФакт", ЗначениеЗаполнения.ОстатокНаКонецФакт);
		Результат.Вставить("КурсоваяРазница",  ЗначениеЗаполнения.КурсоваяРазница);
		
	ИначеЕсли ТипСтроки = "Статья" Тогда
		
		Если ИмяКолонки = "Статья" И ЗначениеЗаполнения <> Неопределено Тогда
			
			Результат.Вставить("СтатьяБюджета",      ЗначениеЗаполнения.СтатьяБюджета);
			Результат.Вставить("РодительскаяСтатья", ЗначениеЗаполнения.РодительскаяСтатья);
			Результат.Вставить("ТипПоказателя",      ЗначениеЗаполнения.ТипПоказателя);
			Результат.Вставить("ГрафаБюджета",       ЗначениеЗаполнения.ГрафаБюджета);
			Результат.Вставить("Порядок",            ЗначениеЗаполнения.Порядок);
			
		ИначеЕсли (ИмяГруппы = "Период" ИЛИ ИмяГруппы = "Итоги") И ЗначениеЗаполнения <> Неопределено Тогда
			
			Если ИмяГруппы = "Период" Тогда
				Результат.Вставить("НомерПериода", ЗначениеЗаполнения.НомерПериода);
			КонецЕсли;
			
			Если ТипЗнч(ЗначенияПоказателей) = Тип("Число") Тогда
				Результат.Вставить("Смещение", ЗначенияПоказателей);
			Иначе
				Результат.Вставить("Смещение", 0);
				ДополнитьСтруктуруРасшифровкиСуммами(Результат, ЗначенияПоказателей);
			КонецЕсли;
			
		ИначеЕсли ИмяГруппы = "Статистика" И ЗначениеЗаполнения <> Неопределено Тогда
			
			Если ТипЗнч(ЗначенияПоказателей) = Тип("Число") Тогда
				Результат.Вставить("Смещение", ЗначенияПоказателей);
			Иначе
				Результат.Вставить("Смещение", 0);
				ДополнитьСтруктуруРасшифровкиПрошлымиСуммами(Результат, ЗначенияПоказателей);
			КонецЕсли;
			
		КонецЕсли;
		 
	ИначеЕсли (ТипСтроки = "ИтогДоходы" Или ТипСтроки = "ИтогРасходы")  Тогда
		
		Если ИмяГруппы = "Период" И ЗначениеЗаполнения <> Неопределено Тогда
			
			Результат.Вставить("НомерПериода", ЗначениеЗаполнения.НомерПериода);
			
			Если ТипЗнч(ЗначенияПоказателей) = Тип("Число") Тогда
				
				Результат.Вставить("Смещение", ЗначенияПоказателей);
				
			ИначеЕсли ЗначенияПоказателей <> Неопределено Тогда
				
				Результат.Вставить("Смещение", 0);
				
				Если ТипСтроки = "ИтогДоходы" Тогда
					Результат.Вставить("СуммаПлан",        ЗначениеЗаполнения.ПланДоход);
					Результат.Вставить("СуммаФакт",        ЗначениеЗаполнения.ФактДоход);
					Результат.Вставить("ОсталосьПоСтатье", ЗначениеЗаполнения.ОстатокПоСтатьямДохода);
					Результат.Вставить("Превышение",       ЗначениеЗаполнения.ПревышениеДохода);
					Результат.Вставить("Разница",          ЗначениеЗаполнения.РазницаДохода);
					
				Иначе
					Результат.Вставить("СуммаПлан",        ЗначениеЗаполнения.ПланРасход);
					Результат.Вставить("СуммаФакт",        ЗначениеЗаполнения.ФактРасход);
					Результат.Вставить("ОсталосьПоСтатье", ЗначениеЗаполнения.ОстатокПоСтатьямРасхода);
					Результат.Вставить("Превышение",       ЗначениеЗаполнения.ПревышениеРасхода);
					Результат.Вставить("Разница",          ЗначениеЗаполнения.РазницаРасхода);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяГруппы = "Статистика" Или ИмяГруппы = "Итоги" Тогда
			
			Если ТипЗнч(ЗначенияПоказателей) = Тип("Число") Тогда
				
				Результат.Вставить("Смещение", ЗначенияПоказателей);
				
			ИначеЕсли ТипЗнч(ЗначенияПоказателей) = Тип("Структура") Тогда
				
				Результат.Вставить("Смещение", 0);
				ДобавитьВСтруктуруЗначениеКоллекции("СуммаПлан", Результат, ЗначенияПоказателей);
				ДобавитьВСтруктуруЗначениеКоллекции("СуммаФакт", Результат, ЗначенияПоказателей);
				ДобавитьВСтруктуруЗначениеКоллекции("ОсталосьПоСтатье", Результат, ЗначенияПоказателей);
				ДобавитьВСтруктуруЗначениеКоллекции("Превышение", Результат, ЗначенияПоказателей);
				ДобавитьВСтруктуруЗначениеКоллекции("Разница", Результат, ЗначенияПоказателей);
				
			КонецЕсли;
			
		КонецЕсли;
		 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруРасшифровкиСуммами(Расшифровка, ЗначенияПоказателей)

	Если ЗначенияПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВСтруктуруЗначениеКоллекции("Комментарий", Расшифровка, ЗначенияПоказателей, "");
	
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаПлановыхОпераций", Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаПоБюджету",        Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаПлан",             Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаФакт",             Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("Разница",               Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ОсталосьПоСтатье",      Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("Превышение",            Расшифровка, ЗначенияПоказателей);
	
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаПлановыхОперацийПоСамойСтатье", Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаПоБюджетуПоСамойСтатье",        Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаПланПоСамойСтатье",             Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаФактПоСамойСтатье",             Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("РазницаПоСамойСтатье",               Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ОсталосьПоСтатьеПоСамойСтатье",      Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПревышениеПоСамойСтатье",            Расшифровка, ЗначенияПоказателей);
	
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаПланПоПодстатьям",              Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("СуммаФактПоПодстатьям",              Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("РазницаПоПодстатьям",                Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ОсталосьПоСтатьеПоПодстатьям",       Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПревышениеПоПодстатьям",             Расшифровка, ЗначенияПоказателей);
	

КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруРасшифровкиПрошлымиСуммами(Расшифровка, ЗначенияПоказателей)

	Если ЗначенияПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеСуммаПлановыхОпераций", Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеСуммаПоБюджету",        Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеСуммаПлан",             Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеСуммаФакт",             Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеРазница",               Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеОсталосьПоСтатье",      Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеПревышение",            Расшифровка, ЗначенияПоказателей);
	
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеСуммаПланПоСамойСтатье", Расшифровка, ЗначенияПоказателей);
	ДобавитьВСтруктуруЗначениеКоллекции("ПрошлоеСуммаФактПоСамойСтатье", Расшифровка, ЗначенияПоказателей);

КонецПроцедуры

&НаСервере
Функция НужныКолонкиСтатистики()

	Возврат ПериодПросмотра.КоличествоПериодов = 1 И КоличествоПериодовСтатистики > 0;

КонецФункции

&НаСервере
Функция НужныКолонкиИтогов()

	Возврат ПериодПросмотра.КоличествоПериодов > 1;

КонецФункции

&НаСервере
Функция ИмяМакетаДляПериода(ТаблицаПериодов, НомерПериода)

	СтрокаПериода = ТаблицаПериодов.Найти(НомерПериода, "НомерПериода");
	Если СтрокаПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НомерПериода < 0 И НужныКолонкиСтатистики() Тогда
		Возврат "Статистика";
	ИначеЕсли ПериодПросмотра.КоличествоПериодов = 1 Или СтрокаПериода.Актуальность = 0 Тогда
		Возврат "ТекущийПериод";
	ИначеЕсли СтрокаПериода.Актуальность < 0 Тогда 
		Возврат "ПрошлыйПериод";
	ИначеЕсли СтрокаПериода.Актуальность > 0 Тогда 
		Возврат "БудущийПериод";
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции



&НаСервере
Процедура ВывестиЗаголовкиПериодовВТаблицу(ТаблицаПериодов)

	ДокументДляВывода = Новый ТабличныйДокумент;
	ТипСтроки = "Период";
	СтрокаМакетов  = Макеты[ТипСтроки];
	
	// Колонка статьи
	МакетДляВывода  = СтрокаМакетов.Статья;
	МакетДляВывода.Параметры.РасшифровкаСтатья = НоваяСтруктураРасшифровки(ТипСтроки, "Статья", "Статья", Неопределено, Неопределено);
	ДокументДляВывода.Вывести(МакетДляВывода);

	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		// Колонки для каждого периода 
		
		Если СтрокаПериода.НомерПериода < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МакетДляВывода = СтрокаМакетов[ИмяМакетаДляПериода(ТаблицаПериодов, СтрокаПериода.НомерПериода)];
		
		ОбластьЗаголовка = МакетДляВывода.Область(1,1,1,МакетДляВывода.ШиринаТаблицы);
		Если СтрокаПериода.Актуальность = 0 Тогда
			ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина);
			ОбластьЗаголовка.ЦветТекста = WebЦвета.Синий;
		Иначе
			ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Ложь);
			ОбластьЗаголовка.ЦветТекста = Новый Цвет;
		КонецЕсли;
		
		МакетДляВывода.Параметры.Период = СтрокаПериода.ПредставлениеПериода;
		МакетДляВывода.Параметры.РасшифровкаПериод = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "Период", СтрокаПериода.НомерПериода, Неопределено);
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
		СтрокаПериода.НомерКолонки = ДокументДляВывода.ШиринаТаблицы - МакетДляВывода.ШиринаТаблицы + 1;
		
	КонецЦикла;
	
	Если НужныКолонкиСтатистики() Тогда
		// Выводим колонки статитстики
		
		МакетДляВывода = СтрокаМакетов.Статистика;
		МакетДляВывода.Параметры.Период = ПредставлениеСтатистики(ТаблицаПериодов);
		МакетДляВывода.Параметры.РасшифровкаПериод = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "Период", -1, Неопределено);
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	ИначеЕсли НужныКолонкиИтогов() Тогда
		// Выводим колонки итогов
		
		МакетДляВывода = СтрокаМакетов.Итоги;
		МакетДляВывода.Параметры.Период = НСтр("ru='За все периоды'"); ;
		МакетДляВывода.Параметры.РасшифровкаПериод = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "Период", Неопределено, Неопределено);
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	КонецЕсли;
	
	ДокументДляВывода.Присоединить(СтрокаМакетов.ГраницаСправа);
	ТаблицаБюджета.Вывести(ДокументДляВывода);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиШапкуТаблицы(ТаблицаПериодов)

	ДокументДляВывода = Новый ТабличныйДокумент;
	ТипСтроки = "ШапкаТаблицы";
	СтрокаМакетов  = Макеты[ТипСтроки];
	
	// Колонка статьи
	МакетДляВывода  = СтрокаМакетов.Статья;
	ДокументДляВывода.Вывести(МакетДляВывода);

	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		// Колонки для каждого периода 
		
		Если СтрокаПериода.НомерПериода < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МакетДляВывода = СтрокаМакетов[ИмяМакетаДляПериода(ТаблицаПериодов, СтрокаПериода.НомерПериода)];
		
		ОбластьЗаголовка = МакетДляВывода.Область(1,1,1,МакетДляВывода.ШиринаТаблицы);
		Если СтрокаПериода.Актуальность = 0 Тогда
			//ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина);
			ОбластьЗаголовка.ЦветТекста = WebЦвета.Синий;
		Иначе
			//ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Ложь);
			ОбластьЗаголовка.ЦветТекста = Новый Цвет;
		КонецЕсли;
		
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	КонецЦикла;
	
	НужнаСтатистика = НужныКолонкиСтатистики();
	
	Если НужнаСтатистика Тогда
		// Выводим колонки статитстики
		
		МакетДляВывода = СтрокаМакетов.Статистика;
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	ИначеЕсли НужныКолонкиИтогов() Тогда
		// Выводим колонки итогов
		
		МакетДляВывода = СтрокаМакетов.Итоги;
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	КонецЕсли;
	
	ДокументДляВывода.Присоединить(СтрокаМакетов.ГраницаСправа);
	ТаблицаБюджета.Вывести(ДокументДляВывода);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОстаткиНаНачало(ТаблицаОстатков, ТаблицаПериодов)

	ДокументДляВывода = Новый ТабличныйДокумент;
	ТипСтроки = "ОстатокНаНачало";
	СтрокаМакетов  = Макеты[ТипСтроки];
	
	
	// Колонка статьи
	МакетДляВывода  = СтрокаМакетов.Статья;
	МакетДляВывода.Параметры.РасшифровкаСтатья = НоваяСтруктураРасшифровки(ТипСтроки, "Статья", "Статья", Неопределено, Неопределено);
	ДокументДляВывода.Вывести(МакетДляВывода);
	
	Для каждого СтрокаПериода Из ТаблицаОстатков Цикл
		
		ИмяМакетаПериода = ИмяМакетаДляПериода(ТаблицаПериодов, СтрокаПериода.НомерПериода);
		МакетДляВывода = СтрокаМакетов[ИмяМакетаПериода];
		
		Если ИмяМакетаПериода = "ТекущийПериод" Тогда
			// Выводим колонки текущего (или единственного) периода
			
			ОбластьЗаголовка = МакетДляВывода.Область(1,1,1,4);
			Если СтрокаПериода.Актуальность = 0 Тогда
				//ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина);
				ОбластьЗаголовка.ЦветТекста = WebЦвета.Синий;
			Иначе
				//ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Ложь);
				ОбластьЗаголовка.ЦветТекста = Новый Цвет;
			КонецЕсли;
			
			МакетДляВывода.Параметры.ОстатокДенег    = ФорматСтрокаОстатка(СтрокаПериода.ОстатокНаНачалоФакт, "Факт");
			МакетДляВывода.Параметры.РасшифровкаОстатокДенег   = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОстатокДенег", 
																СтрокаПериода, Неопределено); 
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		ИначеЕсли ИмяМакетаПериода = "ПрошлыйПериод" Тогда
			
			// Выводим колонки прошлого периода
			МакетДляВывода.Параметры.ОстатокДенег    = ФорматСтрокаОстатка(СтрокаПериода.ОстатокНаНачалоФакт, "");
			МакетДляВывода.Параметры.РасшифровкаОстатокДенег   = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОстатокДенег", 
																СтрокаПериода, Неопределено); 
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		ИначеЕсли ИмяМакетаПериода = "БудущийПериод" Тогда
			
			// Выводим колонки будущего периода
			МакетДляВывода.Параметры.ОстатокДенег    = ФорматСтрокаОстатка(СтрокаПериода.ОстатокНаНачалоПлан, "");
			МакетДляВывода.Параметры.РасшифровкаОстатокДенег   = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОстатокДенег", 
																СтрокаПериода, Неопределено); 
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если НужныКолонкиСтатистики() Тогда
		// Выводим колонки статитстики
		
		МакетДляВывода = СтрокаМакетов.Статистика;
		МакетДляВывода.Параметры.РасшифровкаОстатокДенег = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "Период", Неопределено, Неопределено);
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	ИначеЕсли НужныКолонкиИтогов() Тогда
		// Выводим колонки итогов
		
		МакетДляВывода = СтрокаМакетов.Итоги;
		МакетДляВывода.Параметры.РасшифровкаОстатокДенег = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "ОстатокДенег", Неопределено, Неопределено);
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	КонецЕсли;
	
	// добавляем правую границу
	ДокументДляВывода.Присоединить(Макеты.Статья.ГраницаСправа);
	
	// Выводим строку в отчет
	ТаблицаБюджета.Вывести(ДокументДляВывода, 1);
	
	НомерСтрокиНачальныхОстатков = ТаблицаБюджета.ВысотаТаблицы;

КонецПроцедуры

&НаСервере
Процедура ВывестиОстаткиНаКонец(ТаблицаОстатков, ТаблицаПериодов)

	ДокументДляВывода = Новый ТабличныйДокумент;
	ТипСтроки = "ОстатокНаКонец";
	СтрокаМакетов  = Макеты[ТипСтроки];
	
	// Колонка статьи
	МакетДляВывода  = СтрокаМакетов.Статья;
	МакетДляВывода.Параметры.РасшифровкаСтатья = НоваяСтруктураРасшифровки(ТипСтроки, "Статья", "Статья", Неопределено, Неопределено);
	ДокументДляВывода.Вывести(МакетДляВывода);
	
	Для каждого СтрокаПериода Из ТаблицаОстатков Цикл
		
		ИмяМакетаПериода = ИмяМакетаДляПериода(ТаблицаПериодов, СтрокаПериода.НомерПериода);
		МакетДляВывода = СтрокаМакетов[ИмяМакетаПериода];
		
		Если ИмяМакетаПериода = "ТекущийПериод" Тогда
			// Выводим колонки текущего или единственного периода
			
			Если СтрокаПериода.Актуальность >= 0 Тогда
				МакетДляВывода.Параметры.ОстатокДенегПлан    = ФорматСтрокаОстатка(СтрокаПериода.ОстатокНаКонецПлан, "План");
			КонецЕсли;
			МакетДляВывода.Параметры.ОстатокДенегФакт    = ФорматСтрокаОстатка(СтрокаПериода.ОстатокНаКонецФакт, "Факт");
			МакетДляВывода.Параметры.КурсоваяРазница = СтрокаПериода.КурсоваяРазница;
			
			МакетДляВывода.Параметры.РасшифровкаОстатокДенегПлан  = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОстатокДенегПлан", 
																СтрокаПериода, СтрокаПериода); 
			МакетДляВывода.Параметры.РасшифровкаОстатокДенегФакт  = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОстатокДенегФакт", 
																СтрокаПериода, СтрокаПериода); 
			МакетДляВывода.Параметры.РасшифровкаКурсоваяРазница   = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "КурсоваяРазница", 
																СтрокаПериода, СтрокаПериода); 
																
			ОбластьПрогноза = МакетДляВывода.Область(3,1,5,5);
			Если СтрокаПериода.Актуальность = 0 Тогда
				МакетДляВывода.Параметры.РасшифровкаОптимистичныйОстаток   = СтрокаПериода.ОстатокНаНачалоПлан + СтрокаПериода.ФактДоход + СтрокаПериода.ОстатокПоСтатьямДохода
							- СтрокаПериода.ФактРасход - СтрокаПериода.ОстатокПоСтатьямРасхода;
				МакетДляВывода.Параметры.ОптимистичныйОстаток   = МакетДляВывода.Параметры.РасшифровкаОптимистичныйОстаток;
				МакетДляВывода.Параметры.РасшифровкаПессимистичныйОстаток  = СтрокаПериода.ОстатокНаНачалоПлан + СтрокаПериода.ФактДоход 
							- СтрокаПериода.ФактРасход - СтрокаПериода.ОстатокПоСтатьямРасхода;
				МакетДляВывода.Параметры.ПессимистичныйОстаток  = МакетДляВывода.Параметры.РасшифровкаПессимистичныйОстаток;
				МакетДляВывода.Область(3,3).Примечание.Текст = НСтр("ru='Если все доходы будут получены
									|и все расходы оплачены
									|(остаток на начало + факт.доход + остаток по статьям дохода
									|   - факт.расход - остаток по статьям расхода)'");
				МакетДляВывода.Область(4,3).Примечание.Текст = НСтр("ru='Если использовать только фактически полученные доходы
									|на оплату всех оставшихся расходов
									|(остаток на начало + факт.доход 
									|   - факт.расход - остаток по статьям расхода)'");
				ЛинияИтога = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				ОбластьПрогноза.Обвести(ЛинияИтога, , ЛинияИтога, ЛинияИтога);
			Иначе
				ОбластьПрогноза.Текст = "";
				ЛинияИтога = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				ОбластьПрогноза.Обвести(ЛинияИтога, , ЛинияИтога, ЛинияИтога);
				МакетДляВывода.Область(3,3).Примечание.Текст = "";
				МакетДляВывода.Область(4,3).Примечание.Текст = "";
			КонецЕсли;
			 
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		ИначеЕсли ИмяМакетаПериода = "ПрошлыйПериод" Тогда
			// Выводим колонки прошлого периода
			
			МакетДляВывода.Параметры.ОстатокДенегФакт    = ФорматСтрокаОстатка(СтрокаПериода.ОстатокНаКонецФакт, "");
			МакетДляВывода.Параметры.КурсоваяРазница = СтрокаПериода.КурсоваяРазница;
			
			МакетДляВывода.Параметры.РасшифровкаОстатокДенегФакт   = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОстатокДенегФакт", 
																СтрокаПериода, СтрокаПериода); 
			МакетДляВывода.Параметры.РасшифровкаКурсоваяРазница   = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "КурсоваяРазница", 
																СтрокаПериода, СтрокаПериода); 
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		ИначеЕсли ИмяМакетаПериода = "БудущийПериод" Тогда
			// Выводим колонки будущего периода
			
			МакетДляВывода = Макеты.ОстатокНаКонец.БудущийПериод;
			МакетДляВывода.Параметры.ОстатокДенегПлан    = ФорматСтрокаОстатка(СтрокаПериода.ОстатокНаКонецПлан, "План");
			
			МакетДляВывода.Параметры.РасшифровкаОстатокДенегПлан   = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОстатокДенегПлан", 
																СтрокаПериода, СтрокаПериода); 
			
			МакетДляВывода.Параметры.РасшифровкаОптимистичныйОстаток = СтрокаПериода.ОстатокНаНачалоПлан + СтрокаПериода.ФактДоход + СтрокаПериода.ОстатокПоСтатьямДохода
						- СтрокаПериода.ФактРасход - СтрокаПериода.ОстатокПоСтатьямРасхода;
			МакетДляВывода.Параметры.ОптимистичныйОстаток   = МакетДляВывода.Параметры.РасшифровкаОптимистичныйОстаток;
			
			МакетДляВывода.Параметры.РасшифровкаПессимистичныйОстаток = СтрокаПериода.ОстатокНаНачалоФакт + СтрокаПериода.ФактДоход 
						- СтрокаПериода.ФактРасход - СтрокаПериода.ОстатокПоСтатьямРасхода;
			МакетДляВывода.Параметры.ПессимистичныйОстаток  = МакетДляВывода.Параметры.РасшифровкаПессимистичныйОстаток;
			МакетДляВывода.Область(3,1).Примечание.Текст = НСтр("ru='Если все доходы будут получены
								|и все расходы оплачены
								|(план.остаток на начало + факт.доход + остаток по статьям дохода
								|   - факт.расход - остаток по статьям расхода)'");
			МакетДляВывода.Область(4,1).Примечание.Текст = НСтр("ru='Если использовать только фактически полученные доходы
								|на оплату всех оставшихся расходов
								|(факт.остаток на начало + факт.доход 
								|   - факт.расход - остаток по статьям расхода)'");
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если НужныКолонкиСтатистики() Тогда
		// Выводим колонки статитстики
		
		МакетДляВывода = СтрокаМакетов.Статистика;
		//МакетДляВывода.Параметры.РасшифровкаОстатокДенег = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "Период", Неопределено, Неопределено);
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	ИначеЕсли НужныКолонкиИтогов() Тогда
		// Выводим колонки итогов
		
		МакетДляВывода = СтрокаМакетов.Итоги;
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	КонецЕсли;
	
	// добавляем правую границу
	ДокументДляВывода.Присоединить(Макеты.Статья.ГраницаСправа);
	
	// Выводим строку в отчет
	ТаблицаБюджета.Вывести(ДокументДляВывода, 1);

	НомерСтрокиКонечныхОстатков = ТаблицаБюджета.ВысотаТаблицы - 3;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВТаблицуУзелДерева(УзелДерева, ТаблицаПериодов, ПоказателиСтатистики, Уровень = 1)

	ТипСтроки             = "Статья";
	СтрокаМакетов         = Макеты[ТипСтроки];
	ДокументДляВывода     = Новый ТабличныйДокумент;
	ЗапретРедактирования  = РазделБюджета = "";
	ПустаяКартинка        = Новый Картинка;
	ЦветПоУмолчанию       = Новый Цвет;
	ЦветИтоговПоУмолчанию = Новый Цвет(245, 245, 245);
	ЦветНеактивнойСтатьи  = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	
	ЦветГруппыДоходов          = Новый Цвет(245, 255, 229);
	ЦветГруппыДоходовВИтогах   = Новый Цвет(235, 245, 219);
	ЦветГруппыРасходов         = Новый Цвет(255, 242, 242);
	ЦветГруппыРасходовВИтогах  = Новый Цвет(245, 232, 232);
	
	НужнаСтатистика = НужныКолонкиСтатистики();
	
	Для каждого СтрокаДерева Из УзелДерева.Строки Цикл
		
		ДокументДляВывода.Очистить();
		
		ЭтоГруппа = СтрокаДерева.Строки.Количество() > 0;
		
		// Колонка статьи
		МакетДляВывода  = СтрокаМакетов.Статья;
		ОбластьПоказателя = МакетДляВывода.Область(1,1,1,МакетДляВывода.ШиринаТаблицы);
		Если ЭтоГруппа Тогда
			ОбластьПоказателя.ЦветФона = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление,
										ЦветГруппыДоходов, ЦветГруппыРасходов);
		Иначе
			ОбластьПоказателя.ЦветФона = ЦветПоУмолчанию;
		КонецЕсли;
		МакетДляВывода.Параметры.Статья            = ПредставлениеСтатьи(СтрокаДерева);
		МакетДляВывода.Параметры.РасшифровкаСтатья = НоваяСтруктураРасшифровки(ТипСтроки, "Статья", "Статья", СтрокаДерева, СтрокаДерева.ИтоговыеПоказатели);
		ДокументДляВывода.Вывести(МакетДляВывода);
	
		// Присоединяем колонки для каждого периода
		Для каждого СтрокаПериода Из СтрокаДерева.ПоказателиПоПериодам Цикл
			
			ИмяМакетаПериода = ИмяМакетаДляПериода(ТаблицаПериодов, СтрокаПериода.НомерПериода);
			МакетДляВывода = СтрокаМакетов[ИмяМакетаПериода];
			ОбластьПоказателя = МакетДляВывода.Область(1,1,1,МакетДляВывода.ШиринаТаблицы);
			Если ЭтоГруппа Тогда
				ОбластьПоказателя.ЦветФона = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление,
											ЦветГруппыДоходов, ЦветГруппыРасходов);
			Иначе
				ОбластьПоказателя.ЦветФона = ЦветПоУмолчанию;
			КонецЕсли;
			
			Если ИмяМакетаПериода = "Статистика" Тогда
				// Выводим колонки статистики
				
				Если ЭтоГруппа Тогда
					ОбластьПоказателя.ЦветФона = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление,
												ЦветГруппыДоходовВИтогах, ЦветГруппыРасходовВИтогах);
				Иначе
					ОбластьПоказателя.ЦветФона = ЦветИтоговПоУмолчанию;
				КонецЕсли;
				
				Если СтрокаПериода.Показатели = Неопределено Тогда
					МакетДляВывода.Параметры.СуммаПлан    = 0; 
					МакетДляВывода.Параметры.СуммаФакт    = 0; 
					МакетДляВывода.Параметры.ОсталосьПоСтатье  = 0; 
					МакетДляВывода.Параметры.Превышение   = 0; 
				Иначе
					МакетДляВывода.Параметры.СуммаПлан    = Окр(СтрокаПериода.Показатели.ПрошлоеСуммаПлан / КоличествоПериодовСтатистики, 2); 
					МакетДляВывода.Параметры.СуммаФакт    = Окр(СтрокаПериода.Показатели.ПрошлоеСуммаФакт / КоличествоПериодовСтатистики, 2); 
					МакетДляВывода.Параметры.ОсталосьПоСтатье  = Окр(СтрокаПериода.Показатели.ПрошлоеОсталосьПоСтатье / КоличествоПериодовСтатистики, 2); 
					МакетДляВывода.Параметры.Превышение   = Окр(-СтрокаПериода.Показатели.ПрошлоеПревышение / КоличествоПериодовСтатистики, 2); 
				КонецЕсли;
				
				// Заполняем расшифровки
				МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "СуммаПлан", 
										СтрокаДерева, СтрокаПериода.Показатели);
				МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "СуммаФакт", 
										СтрокаДерева, 1);
				МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "ОсталосьПоСтатье", 
										СтрокаДерева, 2);
				МакетДляВывода.Параметры.РасшифровкаПревышение = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "Превышение", 
										СтрокаДерева, 3);
				
				// Присоединяем колонки
				ДокументДляВывода.Присоединить(МакетДляВывода);
				
				// Увеличиваем показатели итогов по статистике
				Если Уровень = 1 Тогда
					ПоказателиСтатистики.СуммаПлан   = ПоказателиСтатистики.СуммаПлан     + МакетДляВывода.Параметры.СуммаПлан;
					ПоказателиСтатистики.СуммаФакт   = ПоказателиСтатистики.СуммаФакт     + МакетДляВывода.Параметры.СуммаФакт;
					ПоказателиСтатистики.ОсталосьПоСтатье = ПоказателиСтатистики.ОсталосьПоСтатье + МакетДляВывода.Параметры.ОсталосьПоСтатье;
					ПоказателиСтатистики.Превышение  = ПоказателиСтатистики.Превышение   + МакетДляВывода.Параметры.Превышение;
					ПоказателиСтатистики.Разница     = ПоказателиСтатистики.Разница + ?(СтрокаПериода.Показатели = Неопределено, 0, СтрокаПериода.Показатели.ПрошлоеРазница);
				КонецЕсли;
				
			ИначеЕсли ИмяМакетаПериода = "ТекущийПериод" Тогда
				
				// Выводим колонки текущего или единственного периода
				Если СтрокаПериода.Показатели = Неопределено Тогда
					МакетДляВывода.Параметры.СуммаПлан    = 0; 
					МакетДляВывода.Области.ПланТекущий.Значение = 0;
					МакетДляВывода.Параметры.СуммаФакт    = 0; 
					МакетДляВывода.Параметры.ОсталосьПоСтатье  = 0; 
					МакетДляВывода.Параметры.Превышение   = 0; 
					МакетДляВывода.Область(1,1).Примечание.Текст = ""; 
					МакетДляВывода.Область(1,2).Картинка = ПустаяКартинка;
				Иначе
					МакетДляВывода.Параметры.СуммаПлан           = СтрокаПериода.Показатели.СуммаПлан; 
					МакетДляВывода.Области.ПланТекущий.Значение  = МакетДляВывода.Параметры.СуммаПлан;
					МакетДляВывода.Параметры.СуммаФакт           = СтрокаПериода.Показатели.СуммаФакт; 
					МакетДляВывода.Параметры.ОсталосьПоСтатье    = СтрокаПериода.Показатели.ОсталосьПоСтатье; 
					МакетДляВывода.Параметры.Превышение          = -СтрокаПериода.Показатели.Превышение; 
					МакетДляВывода.Область(1,1).Примечание.Текст = СтрокаПериода.Показатели.Комментарий; 
					Если ЗначениеЗаполнено(СтрокаПериода.Показатели.Комментарий) Или СтрокаПериода.Показатели.СуммаПлановыхОперацийПоСамойСтатье <> 0 Тогда
						Если СтрокаПериода.Показатели.СуммаПлановыхОперацийПоСамойСтатье > СтрокаПериода.Показатели.СуммаПланПоСамойСтатье Тогда
							МакетДляВывода.Область(1,2).Картинка = Макеты.Картинка2;
						Иначе
							МакетДляВывода.Область(1,2).Картинка = Макеты.Картинка1;
						КонецЕсли;
					Иначе
						МакетДляВывода.Область(1,2).Картинка = ПустаяКартинка;
					КонецЕсли;
				КонецЕсли;
				МакетДляВывода.Область(1,1).Защита = ЗапретРедактирования;
				
				// Заполняем расшифровки
				МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаПлан", 
										СтрокаПериода, СтрокаПериода.Показатели);
				МакетДляВывода.Параметры.РасшифровкаКартинкаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "КартинкаПлан", 
										СтрокаПериода, 1);
				МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаФакт", 
										СтрокаПериода, 2);
				МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОсталосьПоСтатье", 
										СтрокаПериода, 3);
				МакетДляВывода.Параметры.РасшифровкаПревышение = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "Превышение", 
										СтрокаПериода, 4);
				
				// Присоединяем колонки
				ДокументДляВывода.Присоединить(МакетДляВывода);
				
			ИначеЕсли ИмяМакетаПериода = "ПрошлыйПериод" Тогда
				
				// Выводим колонки прошлого периода
				Если СтрокаПериода.Показатели = Неопределено Тогда
					МакетДляВывода.Параметры.СуммаФакт    = 0; 
					МакетДляВывода.Параметры.ОсталосьПоСтатье  = 0; 
				Иначе
					МакетДляВывода.Параметры.СуммаФакт           = СтрокаПериода.Показатели.СуммаФакт; 
					МакетДляВывода.Параметры.ОсталосьПоСтатье    = СтрокаПериода.Показатели.Разница; 
					МакетДляВывода.Область(1,2).Примечание.Текст = СтрокаПериода.Показатели.Комментарий; 
				КонецЕсли;
				
				// Заполняем расшифровки
				МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаФакт", 
										СтрокаПериода, СтрокаПериода.Показатели);
				МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОсталосьПоСтатье", 
										СтрокаПериода, 1);
										
				// Присоединяем колонки
				ДокументДляВывода.Присоединить(МакетДляВывода);
				
			ИначеЕсли ИмяМакетаПериода = "БудущийПериод" Тогда
				
				// Выводим колонки будущего периода
				Если СтрокаПериода.Показатели = Неопределено Тогда
					МакетДляВывода.Параметры.СуммаПлан    = 0; 
					МакетДляВывода.Области.ПланБудущий.Значение = 0;
					МакетДляВывода.Область(1,1).Примечание.Текст = ""; 
					МакетДляВывода.Область(1,2).Картинка = ПустаяКартинка;
				Иначе
					МакетДляВывода.Параметры.СуммаПлан           = СтрокаПериода.Показатели.СуммаПлан; 
					МакетДляВывода.Области.ПланБудущий.Значение  = МакетДляВывода.Параметры.СуммаПлан;
					МакетДляВывода.Область(1,1).Примечание.Текст = СтрокаПериода.Показатели.Комментарий; 
					Если ЗначениеЗаполнено(СтрокаПериода.Показатели.Комментарий) Или СтрокаПериода.Показатели.СуммаПлановыхОперацийПоСамойСтатье <> 0 Тогда
						Если СтрокаПериода.Показатели.СуммаПлановыхОперацийПоСамойСтатье > СтрокаПериода.Показатели.СуммаПланПоСамойСтатье Тогда
							МакетДляВывода.Область(1,2).Картинка = Макеты.Картинка2;
						Иначе
							МакетДляВывода.Область(1,2).Картинка = Макеты.Картинка1;
						КонецЕсли;
					Иначе
						МакетДляВывода.Область(1,2).Картинка = ПустаяКартинка;
					КонецЕсли;
				КонецЕсли;
				МакетДляВывода.Область(1,1).Защита = ЗапретРедактирования;
				
				// Заполняем расшифровки
				МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаПлан", 
										СтрокаПериода, СтрокаПериода.Показатели);
				МакетДляВывода.Параметры.РасшифровкаКартинкаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "КартинкаПлан", 
										СтрокаПериода, 1);
				
				// Присоединяем колонки
				ДокументДляВывода.Присоединить(МакетДляВывода);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НужныКолонкиИтогов() Тогда
			// Выводим колонки итогов
			
			МакетДляВывода = СтрокаМакетов.Итоги;
			ОбластьПоказателя = МакетДляВывода.Область(1,1,1,МакетДляВывода.ШиринаТаблицы);
			Если ЭтоГруппа Тогда
				ОбластьПоказателя.ЦветФона = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление,
											ЦветГруппыДоходовВИтогах, ЦветГруппыРасходовВИтогах);
			Иначе
				ОбластьПоказателя.ЦветФона = ЦветИтоговПоУмолчанию;
			КонецЕсли;
			МакетДляВывода.Параметры.СуммаПлан         = СтрокаДерева.ИтоговыеПоказатели.СуммаПлан; 
			МакетДляВывода.Параметры.СуммаФакт         = СтрокаДерева.ИтоговыеПоказатели.СуммаФакт; 
			МакетДляВывода.Параметры.ОсталосьПоСтатье  = СтрокаДерева.ИтоговыеПоказатели.ОсталосьПоСтатье; 
			МакетДляВывода.Параметры.Превышение        = -СтрокаДерева.ИтоговыеПоказатели.Превышение; 
			
			// Заполняем расшифровки
			МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "СуммаПлан", 
									СтрокаДерева, СтрокаДерева.ИтоговыеПоказатели);
			МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "СуммаФакт", 
									СтрокаДерева, 1);
			МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "ОсталосьПоСтатье", 
									СтрокаДерева, 2);
			МакетДляВывода.Параметры.РасшифровкаПревышение = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "Превышение", 
									СтрокаДерева, 3);
			
			// Присоединяем колонки
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		КонецЕсли;
		
		// добавляем правую границу
		ДокументДляВывода.Присоединить(Макеты.Статья.ГраницаСправа);
		
		// отмечаем активность/неактивность статьи
		ОбластьСтатьи = ДокументДляВывода.Область(1, 1, 1, ДокументДляВывода.ШиринаТаблицы);
		Если СтрокаДерева.АктивностьСтатьи = Ложь Тогда
			ОбластьСтатьи.ЦветТекста = ЦветНеактивнойСтатьи;
		Иначе
			ОбластьСтатьи.ЦветТекста = ЦветПоУмолчанию;
		КонецЕсли;
		
		// Выводим строку в отчет
		ТаблицаБюджета.Вывести(ДокументДляВывода, Уровень);
		
		Если ЭтоГруппа Тогда
			ВывестиВТаблицуУзелДерева(СтрокаДерева, ТаблицаПериодов, Неопределено, Уровень + 1);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПредставлениеСтатьи(СтрокаДерева)

	ТипСтатьи = ТипЗнч(СтрокаДерева.СтатьяБюджета);
	Если ТипСтатьи = Тип("СправочникСсылка.ФинансовыеЦели") Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.РодительскаяСтатья) Тогда
		
			Если ЗначениеЗаполнено(РазделБюджета) Тогда
				Если Не ЗначениеЗаполнено(СтрокаДерева.СтатьяБюджета) Тогда
					ТекстНаименования = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, 
								 НСтр("ru='Перевод в свободные деньги'"), НСтр("ru='Перевод из свободных денег'"));
				Иначе
					ТекстНаименования = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, 
								НСтр("ru='Перевод в накопление: %1'"), НСтр("ru='Перевод из накопления: %1'"));
					ТекстНаименования = СтрШаблон(ТекстНаименования, Строка(СтрокаДерева.СтатьяБюджета));
				КонецЕсли;
				 
			Иначе
				ТекстНаименования = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, 
							НСтр("ru='Перевод в накопление: %1'"), НСтр("ru='Возврат из накопления: %1'"));
				ТекстНаименования = СтрШаблон(ТекстНаименования, Строка(СтрокаДерева.СтатьяБюджета));
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.СтатьяБюджета) Тогда 
			
			ТекстНаименования = Строка(СтрокаДерева.СтатьяБюджета); 
			
		Иначе
			ТекстНаименования = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, 
								 НСтр("ru='Перевод в свободные деньги'"), НСтр("ru='Перевод из свободных денег'"));
			
		КонецЕсли;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.КошелькиИСчета") И Не ЗначениеЗаполнено(СтрокаДерева.РодительскаяСтатья)  Тогда
		
		ТекстНаименования = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, 
						НСтр("ru='Возврат на кредитную карту: %1'"), НСтр("ru='Использование кредитной карты: %1'"));
		ТекстНаименования = СтрШаблон(ТекстНаименования, Строка(СтрокаДерева.СтатьяБюджета));
			
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.Долги") И Не ЗначениеЗаполнено(СтрокаДерева.РодительскаяСтатья)  Тогда
		
		ТекстНаименования = ?(СтрокаДерева.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание, 
						НСтр("ru='Погашение нашего долга: %1'"), НСтр("ru='Возврат долга нам: %1'"));
		ТекстНаименования = СтрШаблон(ТекстНаименования, Строка(СтрокаДерева.СтатьяБюджета));
		
	Иначе
		
		ТекстНаименования = СтрокаДерева.СтатьяБюджета;
		
	КонецЕсли;
	
	Возврат ТекстНаименования;

КонецФункции

&НаСервере
Процедура ВывестиВТаблицуИтогиОборотов(ТаблицаОстатков, ТипСтроки, ПоказателиСтатистики, ТаблицаПериодов)

	ДокументДляВывода = Новый ТабличныйДокумент;
	СтрокаМакетов = Макеты[ТипСтроки];
	ТипПоказателя = ?(ТипСтроки = "ИтогДоходы", Перечисления.ТипыБюджетныхПоказателей.Поступление, Перечисления.ТипыБюджетныхПоказателей.Списание);
	
	// Начальная колонка
	СтрокаМакетов.Статья.Параметры.РасшифровкаСтатья = НоваяСтруктураРасшифровки(ТипСтроки, "Статья", "Статья", Неопределено, Неопределено);
	ДокументДляВывода.Вывести(СтрокаМакетов.Статья);
	
	Для каждого СтрокаПериода Из ТаблицаОстатков Цикл
		
		ИмяМакетаПериода = ИмяМакетаДляПериода(ТаблицаПериодов, СтрокаПериода.НомерПериода);
		МакетДляВывода = СтрокаМакетов[ИмяМакетаПериода];
		
		Если ИмяМакетаПериода = "ТекущийПериод" Тогда
			// Выводим колонки текущего или единственного периода
			
			// Сначала получаем расшифровки
			МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаПлан", 
									СтрокаПериода, СтрокаПериода);
			МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаФакт", 
									СтрокаПериода, 1);
			МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОсталосьПоСтатье", 
									СтрокаПериода, 2);
			МакетДляВывода.Параметры.РасшифровкаПревышение = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "Превышение", 
									СтрокаПериода, 3);
			
			// Значения подставляем из расшифровки первой колонки группы
			МакетДляВывода.Параметры.СуммаПлан    = МакетДляВывода.Параметры.РасшифровкаСуммаПлан.СуммаПлан; 
			МакетДляВывода.Параметры.СуммаФакт    = МакетДляВывода.Параметры.РасшифровкаСуммаПлан.СуммаФакт; 
			МакетДляВывода.Параметры.ОсталосьПоСтатье  = МакетДляВывода.Параметры.РасшифровкаСуммаПлан.ОсталосьПоСтатье; 
			МакетДляВывода.Параметры.Превышение   = -МакетДляВывода.Параметры.РасшифровкаСуммаПлан.Превышение; 
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		ИначеЕсли ИмяМакетаПериода = "ПрошлыйПериод" Тогда
			// Выводим колонки прошлого периода
			
			// Сначала получаем расшифровки
			МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаФакт", 
									СтрокаПериода, СтрокаПериода);
			МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "ОсталосьПоСтатье", 
									СтрокаПериода, 1);
			
			// Значения подставляем из расшифровки первой колонки группы
			МакетДляВывода.Параметры.СуммаФакт    = МакетДляВывода.Параметры.РасшифровкаСуммаФакт.СуммаФакт; 
			МакетДляВывода.Параметры.ОсталосьПоСтатье  = МакетДляВывода.Параметры.РасшифровкаСуммаФакт.Разница; 
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		ИначеЕсли ИмяМакетаПериода = "БудущийПериод" Тогда
			// Выводим колонки будущего периода
			
			// Сначала получаем расшифровки
			МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Период", "СуммаПлан", 
									СтрокаПериода, СтрокаПериода);
			
			МакетДляВывода.Параметры.СуммаПлан    = МакетДляВывода.Параметры.РасшифровкаСуммаПлан.СуммаПлан;
			
			ДокументДляВывода.Присоединить(МакетДляВывода);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если НужныКолонкиСтатистики() Тогда
		// Выводим колонки статистики
		
		МакетДляВывода = СтрокаМакетов.Статистика;
		
		// Значения 
		МакетДляВывода.Параметры.СуммаПлан         = ПоказателиСтатистики.СуммаПлан; 
		МакетДляВывода.Параметры.СуммаФакт         = ПоказателиСтатистики.СуммаФакт; 
		МакетДляВывода.Параметры.ОсталосьПоСтатье  = ПоказателиСтатистики.ОсталосьПоСтатье; 
		МакетДляВывода.Параметры.Превышение        = ПоказателиСтатистики.Превышение; 
		
		// Заполняем расшифровки
		МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "СуммаПлан", 
								Неопределено, ПоказателиСтатистики);
		МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "СуммаФакт", 
								Неопределено, 1);
		МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "ОсталосьПоСтатье", 
								Неопределено, 2);
		МакетДляВывода.Параметры.РасшифровкаПревышение = НоваяСтруктураРасшифровки(ТипСтроки, "Статистика", "Превышение", 
								Неопределено, 3);
		
		// Присоединяем колонки
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	ИначеЕсли НужныКолонкиИтогов() Тогда
		// Выводим колонки итогов
		
		МакетДляВывода = СтрокаМакетов.Итоги;
		
		Если ТипСтроки = "ИтогДоходы" Тогда
			ВсегоПлан = ТаблицаОстатков.Итог("ПланДоход");
			ВсегоФакт = ТаблицаОстатков.Итог("ФактДоход");
			ВсегоОстатокПоСтатьям = ТаблицаОстатков.Итог("ОстатокПоСтатьямДохода");
			ВсегоПревышение       = ТаблицаОстатков.Итог("ПревышениеДохода");
		Иначе
			ВсегоПлан = ТаблицаОстатков.Итог("ПланРасход");
			ВсегоФакт = ТаблицаОстатков.Итог("ФактРасход");
			ВсегоОстатокПоСтатьям = ТаблицаОстатков.Итог("ОстатокПоСтатьямРасхода");
			ВсегоПревышение       = ТаблицаОстатков.Итог("ПревышениеРасхода");
		КонецЕсли;
		
		// Значения 
		МакетДляВывода.Параметры.СуммаПлан    = ВсегоПлан; 
		МакетДляВывода.Параметры.СуммаФакт    = ВсегоФакт; 
		МакетДляВывода.Параметры.ОсталосьПоСтатье  = ВсегоОстатокПоСтатьям; 
		МакетДляВывода.Параметры.Превышение   = -ВсегоПревышение; 
		СтруктураИтогов = Новый Структура("НомерПериода,СуммаПлан,СуммаФакт,ОсталосьПоСтатье,Превышение,Разница",
				0, ВсегоПлан, ВсегоФакт, ВсегоОстатокПоСтатьям, ВсегоПревышение, ВсегоПлан - ВсегоФакт);
		
		// Получаем расшифровки
		МакетДляВывода.Параметры.РасшифровкаСуммаПлан = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "СуммаПлан", 
								СтруктураИтогов, СтруктураИтогов);
		МакетДляВывода.Параметры.РасшифровкаСуммаФакт = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "СуммаФакт", 
								СтруктураИтогов, 1);
		МакетДляВывода.Параметры.РасшифровкаОсталосьПоСтатье = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "ОсталосьПоСтатье", 
								СтруктураИтогов, 2);
		МакетДляВывода.Параметры.РасшифровкаПревышение = НоваяСтруктураРасшифровки(ТипСтроки, "Итоги", "Превышение", 
								СтруктураИтогов, 3);
		
		ДокументДляВывода.Присоединить(МакетДляВывода);
		
	КонецЕсли;
	
	// добавляем правую границу
	ДокументДляВывода.Присоединить(Макеты.Статья.ГраницаСправа);
	
	// Выводим строку в отчет
	ТаблицаБюджета.Вывести(ДокументДляВывода, 1);
	
	// Запоминаем номер строки
	Если ТипСтроки = "ИтогДоходы" Тогда
		НомерСтрокиИтогаДоходов  = ТаблицаБюджета.ВысотаТаблицы;
	Иначе
		НомерСтрокиИтогаРасходов = ТаблицаБюджета.ВысотаТаблицы;
	КонецЕсли;
	 

КонецПроцедуры

&НаСервере
Процедура ВывестиПоказателиВТаблицу(ДеревоДоходов, ДеревоРасходов, ТаблицаОстатков, ТаблицаПериодов)

	ПоказателиСтатистики = Новый Структура("СуммаПлан,СуммаФакт,Разница,ОсталосьПоСтатье,Превышение",
				0,0,0,0,0);
	
	// Доходная часть бюджета
	ТаблицаБюджета.НачатьАвтогруппировкуСтрок();
	ВывестиВТаблицуУзелДерева(ДеревоДоходов, ТаблицаПериодов, ПоказателиСтатистики);
	ТаблицаБюджета.ЗакончитьАвтогруппировкуСтрок();

	// Итоги доходной части
	ВывестиВТаблицуИтогиОборотов(ТаблицаОстатков, "ИтогДоходы", ПоказателиСтатистики, ТаблицаПериодов);
	
	ПоказателиСтатистики = Новый Структура("СуммаПлан,СуммаФакт,Разница,ОсталосьПоСтатье,Превышение",
				0,0,0,0,0);
				
	ТаблицаБюджета.НачатьАвтогруппировкуСтрок();
	ВывестиВТаблицуУзелДерева(ДеревоРасходов, ТаблицаПериодов, ПоказателиСтатистики);
	ТаблицаБюджета.ЗакончитьАвтогруппировкуСтрок();

	// Итоги расходной части
	ВывестиВТаблицуИтогиОборотов(ТаблицаОстатков, "ИтогРасходы", ПоказателиСтатистики, ТаблицаПериодов);
	
КонецПроцедуры



// Формирует запрос показателей бюджета и возвращает структуру, заполненную его результатами
&НаСервере
Функция РезультатыЗапросаПоказателей() Экспорт

	СтруктураЗапроса  = Новый Структура;
	ТаблицаПериодов   = ТаблицаБюджетныхПериодов(ВариантБюджета, ДатаПросмотра, КоличествоПериодовПросмотра, КоличествоПериодовСтатистики);
	
	Запрос = Новый Запрос;
	
	// Параметры запроса
	Запрос.УстановитьПараметр("ВалютаУчета",                             ПараметрыСеанса.ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаВарианта",                          ВариантБюджета.Валюта);
	Запрос.УстановитьПараметр("ВариантБюджета",                          ВариантБюджета);
	Запрос.УстановитьПараметр("РазделБюджета",                           РазделБюджета);
	Запрос.УстановитьПараметр("ПараметрТаблицыПериодов",                 ТаблицаПериодов);
	Запрос.УстановитьПараметр("ПараметрТаблицыПериодов",                 ТаблицаПериодов);
	Запрос.УстановитьПараметр("БюджетноеНачалоВыборки",                  ТаблицаПериодов[0].НачалоПериода);
	Запрос.УстановитьПараметр("БюджетноеОкончаниеВыборки",               ПериодПросмотра.КонечныйПериод.Окончание);
	Запрос.УстановитьПараметр("КалендарноеНачалоВыборки",                ТаблицаПериодов[0].НачалоКалендарногоПериода);
	Запрос.УстановитьПараметр("КалендарноеОкончаниеВыборки",             ПериодПросмотра.КонечныйПериод.КалендарноеНачало);
	Запрос.УстановитьПараметр("БюджетноеНачалоРедактируемогоПериода",    ПериодПросмотра.НачальныйПериод.Начало);
	Запрос.УстановитьПараметр("КалендарноеНачалоРедактируемогоПериода",  ПериодПросмотра.НачальныйПериод.КалендарноеНачало);
	Запрос.УстановитьПараметр("ДатаОстатков", 
				Мин(НачалоДня(ТекущаяДатаКлиентСервер()), НачалоДня(ПериодПросмотра.НачальныйПериод.Начало)));
	Запрос.УстановитьПараметр("ДатаПоследнихКурсов",
				Мин(НачалоДня(ТекущаяДатаКлиентСервер()), НачалоДня(ПериодПросмотра.КонечныйПериод.Окончание)));
	Запрос.УстановитьПараметр("ДатаОтбораСоставаСтатей",  
				БюджетированиеСервер.МаксимальноеКалендарноеНачалоВарианта(ВариантБюджета, РазделБюджета, ПериодПросмотра.КонечныйПериод.КалендарноеНачало));

	ПрефиксИмен = "";
	БюджетированиеСервер.ДобавитьВЗапросКлючиСтатейБюджета(Запрос.Текст, СтруктураЗапроса);
	БюджетированиеСервер.ДобавитьВЗапросГотовуюТаблицуПериодов(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен);
	БюджетированиеСервер.ДобавитьВЗапросАктуальныеСтатьиБюджета(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен);
	БюджетированиеСервер.ДобавитьВЗапросПоследниеКурсыВалют(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен);
	БюджетированиеСервер.ДобавитьВЗапросОборотыОпераций(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен, Не РаскрыватьКороткиеВзаиморасчеты);
	БюджетированиеСервер.ДобавитьВЗапросПоказателиПланФакт(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен);
	
	БюджетированиеСервер.ДобавитьВЗапросВыборкуПоказателейБюджета(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен);
	
	БюджетированиеСервер.ДобавитьВЗапросВыборкуОстатковПоБюджетнымПериодам(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен);
	БюджетированиеСервер.ДобавитьВЗапросВыборкуДполненийОборотов(Запрос.Текст, СтруктураЗапроса, ПрефиксИмен);
	
	СтруктураРезультатов = ОтчетыСервер.ПолучитьВыборкиИзПакетногоЗапроса(Запрос, СтруктураЗапроса);
	
	Если НужныКолонкиСтатистики() Тогда
		// Для вывода периода статитсики после редактируемого периода изменим сортировку таблицы периодов
		ТаблицаПериодов.Сортировать("ОкончаниеПериода УБЫВ");
	КонецЕсли;
	СтруктураРезультатов.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	Возврат СтруктураРезультатов;
	
КонецФункции

// Считыввает из базы показатели бюджета и заполняет табличный документ
&НаСервере
Процедура ОбновитьТаблицуБюджета()

	// Получаем результаты запроса
	Результаты = РезультатыЗапросаПоказателей();
	
	// Таблица остатков и итоговых оборотов по периодам
	ТаблицаОстатков = ПодготовитьТаблицуИтогов(Результаты);
	
	// Заполняем деревья оборотами
	ДеревоДоходов      = Неопределено;
	ДеревоРасходов     = Неопределено;
	ПрочитатьОборотыИОстаткиБюджета(Результаты, ТаблицаОстатков, ДеревоДоходов, ДеревоРасходов);

	// Выводим результаты в табличный документ
	ВывестиСтатьиИПериодыВТаблицуОтчета(Результаты, ТаблицаОстатков, ДеревоДоходов, ДеревоРасходов);
	
	// Обновляем таблицу периодов для использования на клиенте
	ТаблицаБюджетныхПериодов.Загрузить(Результаты.ТаблицаПериодов);
	
	// Сбрасываем ожидание обновления
	Заголовок = НСтр("ru='Бюджет'");
	ВОжиданииОбновления = Неопределено;
	
КонецПроцедуры

// Возвращает таблицу значений, заполненную факт.остатками на начало и конец каждого бюджетного периода
&НаСервере
Функция ПодготовитьТаблицуИтогов(РезультатыЗапроса)

	ТипЧисло = Новый ОписаниеТипов("Число");
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("НомерПериода", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("Актуальность", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ОстатокНаНачалоФакт", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ОстатокНаНачалоПлан", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ОстатокНаКонецФакт", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ОстатокНаКонецПлан", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("КурсоваяРазница",    ТипЧисло);
	
	ТаблицаОстатков.Колонки.Добавить("ПланДоход", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ПланРасход", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ФактДоход", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ФактРасход", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ОстатокПоСтатьямДохода", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ПревышениеДохода", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("РазницаДохода", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ОстатокПоСтатьямРасхода", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("ПревышениеРасхода", ТипЧисло);
	ТаблицаОстатков.Колонки.Добавить("РазницаРасхода", ТипЧисло);
	
	ВыборкаДополнения = РезультатыЗапроса.Выборка_ДополнениеОборотов.Выбрать();
	СуммаДополнения = 0;
	Пока ВыборкаДополнения.Следующий() Цикл
		СуммаДополнения = СуммаДополнения + ?(ЗначениеЗаполнено(ВыборкаДополнения.ПланПоступлений), ВыборкаДополнения.ПланПоступлений, 0);
	КонецЦикла;
	
	ТекущийДень = НачалоДня(ТекущаяДатаКлиентСервер());
	ВыборкаОстатков = РезультатыЗапроса.Выборка_ОстаткиПоПериодам.Выбрать();
	Пока ВыборкаОстатков.Следующий() Цикл
		
		СтрокаОстатка = ТаблицаОстатков.Добавить();
		СтрокаОстатка.НомерПериода = ВыборкаОстатков.НомерПериода;
		Если ВыборкаОстатков.ОкончаниеПериода < ТекущийДень Тогда
			СтрокаОстатка.Актуальность = -1;
		ИначеЕсли ВыборкаОстатков.НачалоПериода > ТекущийДень Тогда
			СтрокаОстатка.Актуальность = 1;
		Иначе
			СтрокаОстатка.Актуальность = 0;
		КонецЕсли;
		
		СтрокаОстатка.ОстатокНаНачалоФакт = ВыборкаОстатков.НаНачало;
		СтрокаОстатка.ОстатокНаКонецФакт  = ВыборкаОстатков.НаКонец;
		СтрокаОстатка.КурсоваяРазница     = ВыборкаОстатков.КурсоваяРазница;
		
		Если СтрокаОстатка.НомерПериода = 1 Тогда 
			// Остаток на первый редактируемый период равен фактическому остатку
			СтрокаОстатка.ОстатокНаНачалоПлан = СтрокаОстатка.ОстатокНаНачалоФакт;
			Если СтрокаОстатка.Актуальность > 0 Тогда
				// первый редактируемый период отстоит от текущей даты.
				// дополняем остаток плановыми оборотами
				СтрокаОстатка.ОстатокНаНачалоПлан = СтрокаОстатка.ОстатокНаНачалоПлан + СуммаДополнения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТаблицаОстатков;
	
КонецФункции

// Заполняет деревья значений и таблицу остатков оборотами из выборок запроса
&НаСервере
Процедура ПрочитатьОборотыИОстаткиБюджета(РезультатыЗапроса, ТаблицаОстатков, ДеревоДоходов, ДеревоРасходов)

	// Выгружаем показатели в деревья, для обработки иерархии статей
	ДеревоДоходов      = ДеревоПоказателейБюджета();
	РодителиДоходов    = Новый Соответствие;
	ДеревоРасходов     = ДеревоПоказателейБюджета();
	РодителиРасходов   = Новый Соответствие;
	
	ВыборкаТиповПоказателей = РезультатыЗапроса.Выборка_ПоказателиБюджета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ТипПоказателя");
	Пока ВыборкаТиповПоказателей.Следующий() Цикл
		
		Если ВыборкаТиповПоказателей.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление Тогда
			ДеревоПоказателей  = ДеревоДоходов;
			РодительскиеСтроки = РодителиДоходов;
		Иначе
			ДеревоПоказателей  = ДеревоРасходов;
			РодительскиеСтроки = РодителиРасходов;
		КонецЕсли;
		
		ВыборкаСтатей = ВыборкаТиповПоказателей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СтатьяБюджета");
		Пока ВыборкаСтатей.Следующий() Цикл
			
			СтрокаРодителя = РодительскиеСтроки.Получить(ВыборкаСтатей.РодительскаяСтатья);
			Если СтрокаРодителя = Неопределено Тогда
				СтрокаСтатьи = НоваяСтрокаДереваПоказателей(ДеревоПоказателей, ВыборкаСтатей, РезультатыЗапроса.ТаблицаПериодов);
			Иначе
				СтрокаСтатьи = НоваяСтрокаДереваПоказателей(СтрокаРодителя, ВыборкаСтатей, РезультатыЗапроса.ТаблицаПериодов);
			КонецЕсли;
			
			РодительскиеСтроки.Вставить(СтрокаСтатьи.СтатьяБюджета, СтрокаСтатьи);
			
			ВыборкаПериодов = ВыборкаСтатей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерПериода");
			ВсегоПланДоход  = 0;
			ВсегоПланРасход = 0;
			Пока ВыборкаПериодов.Следующий() Цикл
				
				Если ВыборкаПериодов.НомерПериода = NULL Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПериода = СтрокаСтатьи.ПоказателиПоПериодам.Найти(ВыборкаПериодов.НомерПериода, "НомерПериода");
				Если СтрокаПериода = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПериода.Показатели = СтруктураПоказателей();
				ЗаполнитьЗначенияСвойствСПроверкой(СтрокаПериода.Показатели, ВыборкаПериодов);
				
				// Добавляем итоги
				Если СтрокаРодителя = Неопределено Тогда
					
					СтрокаОстатка = ТаблицаОстатков.Найти(ВыборкаПериодов.НомерПериода, "НомерПериода");
					Если СтрокаОстатка = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаТиповПоказателей.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление Тогда
						СтрокаОстатка.ПланДоход              = СтрокаОстатка.ПланДоход + СтрокаПериода.Показатели.СуммаПлан;
						СтрокаОстатка.ФактДоход              = СтрокаОстатка.ФактДоход + СтрокаПериода.Показатели.СуммаФакт;
						СтрокаОстатка.ОстатокПоСтатьямДохода = СтрокаОстатка.ОстатокПоСтатьямДохода + СтрокаПериода.Показатели.ОсталосьПоСтатье;
						СтрокаОстатка.ПревышениеДохода       = СтрокаОстатка.ПревышениеДохода + СтрокаПериода.Показатели.Превышение;
						СтрокаОстатка.РазницаДохода          = СтрокаОстатка.РазницаДохода + СтрокаПериода.Показатели.Разница;
					Иначе
						СтрокаОстатка.ПланРасход              = СтрокаОстатка.ПланРасход + СтрокаПериода.Показатели.СуммаПлан;
						СтрокаОстатка.ФактРасход              = СтрокаОстатка.ФактРасход + СтрокаПериода.Показатели.СуммаФакт;
						СтрокаОстатка.ОстатокПоСтатьямРасхода = СтрокаОстатка.ОстатокПоСтатьямРасхода + СтрокаПериода.Показатели.ОсталосьПоСтатье;
						СтрокаОстатка.ПревышениеРасхода       = СтрокаОстатка.ПревышениеРасхода + СтрокаПериода.Показатели.Превышение;
						СтрокаОстатка.РазницаРасхода          = СтрокаОстатка.РазницаРасхода + СтрокаПериода.Показатели.Разница;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Вычисляем плановые остатки на начало/конец
	ОсталосьПоСтатье = 0;
	Для каждого СтрокаОстатка Из ТаблицаОстатков Цикл
		
		Если СтрокаОстатка.НомерПериода = 1 Тогда
			СтрокаОстатка.ОстатокНаКонецПлан = ?(СтрокаОстатка.Актуальность > 0, СтрокаОстатка.ОстатокНаНачалоПлан, СтрокаОстатка.ОстатокНаНачалоФакт) 
						+ СтрокаОстатка.ПланДоход - СтрокаОстатка.ПланРасход;
			ОсталосьПоСтатье = СтрокаОстатка.ОстатокНаКонецПлан;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОстатка.Актуальность <= 0 Тогда
			ОсталосьПоСтатье = СтрокаОстатка.ОстатокНаНачалоФакт;
		КонецЕсли;
		
		СтрокаОстатка.ОстатокНаНачалоПлан = ОсталосьПоСтатье;
		ОсталосьПоСтатье = ОсталосьПоСтатье + СтрокаОстатка.ПланДоход - СтрокаОстатка.ПланРасход;
		СтрокаОстатка.ОстатокНаКонецПлан = ОсталосьПоСтатье;
		
	КонецЦикла;
	

КонецПроцедуры

&НаСервере
Функция НоваяСтрокаДереваПоказателей(УзелДерева, Выборка, ТаблицаПериодов)

	НоваяСтрокаПоказателей = УзелДерева.Строки.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, Выборка);
	НоваяСтрокаПоказателей.РодительскаяСтатья = ?(НоваяСтрокаПоказателей.РодительскаяСтатья = NULL, Неопределено, НоваяСтрокаПоказателей.РодительскаяСтатья);
	НоваяСтрокаПоказателей.СтатьяБюджета      = ?(НоваяСтрокаПоказателей.СтатьяБюджета = NULL, Неопределено, НоваяСтрокаПоказателей.СтатьяБюджета);
	
	НоваяСтрокаПоказателей.ИтоговыеПоказатели = СтруктураПоказателей();
	ЗаполнитьЗначенияСвойствСПроверкой(НоваяСтрокаПоказателей.ИтоговыеПоказатели, Выборка);
	НоваяСтрокаПоказателей.ПоказателиПоПериодам = ТаблицаПоказателейПоПериодам(ТаблицаПериодов);
	
	Возврат НоваяСтрокаПоказателей;

КонецФункции

&НаСервереБезКонтекста
Функция ДеревоПоказателейБюджета()

	ДеревоПоказателей = Новый ДеревоЗначений;
	ДеревоПоказателей.Колонки.Добавить("ТипПоказателя");
	ДеревоПоказателей.Колонки.Добавить("ГрафаБюджета");
	ДеревоПоказателей.Колонки.Добавить("СтатьяБюджета");
	ДеревоПоказателей.Колонки.Добавить("Порядок");
	ДеревоПоказателей.Колонки.Добавить("ИтоговыеПоказатели");
	ДеревоПоказателей.Колонки.Добавить("ПоказателиПоПериодам");
	ДеревоПоказателей.Колонки.Добавить("РодительскаяСтатья");
	ДеревоПоказателей.Колонки.Добавить("АктивностьСтатьи");
	ДеревоПоказателей.Колонки.Добавить("ПометкаУдаления");
	
	Возврат ДеревоПоказателей;
	
КонецФункции

&НаСервере
Функция ТаблицаПоказателейПоПериодам(ТаблицаПериодов)

	Если ШаблонТаблицыОстатковПоПериодам = Неопределено Тогда
		
		ТипЧисло = Новый ОписаниеТипов("Число");
		ШаблонТаблицыОстатковПоПериодам = Новый ТаблицаЗначений;
		ШаблонТаблицыОстатковПоПериодам.Колонки.Добавить("НомерПериода", ТипЧисло);
		ШаблонТаблицыОстатковПоПериодам.Колонки.Добавить("Показатели");
		
		ПериодСтатистикиДобавлен = Ложь;
		Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
			
			Если СтрокаПериода.НомерПериода < 0 И ПериодСтатистикиДобавлен Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ШаблонТаблицыОстатковПоПериодам.Добавить();
			НоваяСтрока.НомерПериода = СтрокаПериода.НомерПериода;
			НоваяСтрока.Показатели   = СтруктураПоказателей();
			
			Если СтрокаПериода.НомерПериода < 0 Тогда
				ПериодСтатистикиДобавлен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ШаблонТаблицыОстатковПоПериодам);
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураПоказателей()

	Результат = Новый Структура;
	
	Результат.Вставить("Комментарий", "");
	
	// Итоги по статье включая подчиненные статьи
	Результат.Вставить("СуммаПлановыхОпераций", 0);
	Результат.Вставить("СуммаПоБюджету", 0);
	Результат.Вставить("СуммаПлан", 0);
	Результат.Вставить("СуммаФакт", 0);
	Результат.Вставить("Разница", 0);
	Результат.Вставить("ОсталосьПоСтатье", 0);
	Результат.Вставить("Превышение", 0);
	
	// Суммы по самой статье без учета подчиненных статей
	Результат.Вставить("СуммаПлановыхОперацийПоСамойСтатье", 0);
	Результат.Вставить("СуммаПоБюджетуПоСамойСтатье", 0);
	Результат.Вставить("СуммаПланПоСамойСтатье", 0);
	Результат.Вставить("СуммаФактПоСамойСтатье", 0);
	Результат.Вставить("РазницаПоСамойСтатье", 0);
	Результат.Вставить("ОсталосьПоСтатьеПоСамойСтатье", 0);
	Результат.Вставить("ПревышениеПоСамойСтатье", 0);
	
	// Суммы по подчиненным статьям
	Результат.Вставить("СуммаПланПоПодстатьям", 0);
	Результат.Вставить("СуммаФактПоПодстатьям", 0);
	Результат.Вставить("РазницаПоПодстатьям", 0);
	Результат.Вставить("ОсталосьПоСтатьеПоПодстатьям", 0);
	Результат.Вставить("ПревышениеПоПодстатьям", 0);
	
	// Суммы прошлых периодов для расчета средних показателей
	Результат.Вставить("ПрошлоеСуммаПлановыхОпераций", 0);
	Результат.Вставить("ПрошлоеСуммаПоБюджету", 0);
	Результат.Вставить("ПрошлоеСуммаПлан", 0);
	Результат.Вставить("ПрошлоеСуммаФакт", 0);
	Результат.Вставить("ПрошлоеРазница", 0);
	Результат.Вставить("ПрошлоеОсталосьПоСтатье", 0);
	Результат.Вставить("ПрошлоеПревышение", 0);

	Результат.Вставить("ПрошлоеСуммаПланПоСамойСтатье", 0);
	Результат.Вставить("ПрошлоеСуммаФактПоСамойСтатье", 0);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВывестиСтатьиИПериодыВТаблицуОтчета(РезультатыЗапроса, ТаблицаОстатков, ДеревоДоходов, ДеревоРасходов)

	// Выводим подготовленные результаты в табличный документ
	ТаблицаБюджета.Очистить();
	ПрочитатьМакеты();
	
	// Заголовки периодов
	ВывестиЗаголовкиПериодовВТаблицу(РезультатыЗапроса.ТаблицаПериодов);
	
	// Остатки на начало
	ВывестиОстаткиНаНачало(ТаблицаОстатков, РезультатыЗапроса.ТаблицаПериодов);
	
	// Шапка таблицы
	ВывестиШапкуТаблицы(РезультатыЗапроса.ТаблицаПериодов);
	
	// Выводим статьи в таблицу
	ВывестиПоказателиВТаблицу(ДеревоДоходов, ДеревоРасходов, ТаблицаОстатков, РезультатыЗапроса.ТаблицаПериодов);
	
	// Остатки на конец
	ВывестиОстаткиНаКонец(ТаблицаОстатков, РезультатыЗапроса.ТаблицаПериодов);
	
	// Настраиваем видимость колонок статистики
	Если НужныКолонкиСтатистики() И КолонкиСтатистики <> Неопределено Тогда
		
		ТаблицаБюджета.Область(,7,,7).Видимость = КолонкиСтатистики.СуммаПлан;
		ТаблицаБюджета.Область(,8,,8).Видимость = КолонкиСтатистики.СуммаФакт;
		ТаблицаБюджета.Область(,9,,9).Видимость = КолонкиСтатистики.ОсталосьПоСтатье;
		ТаблицаБюджета.Область(,10,,10).Видимость = КолонкиСтатистики.Превышение;
		
	КонецЕсли;
	
	ТаблицаБюджета.ФиксацияСверху = 3;
	ТаблицаБюджета.ФиксацияСлева  = 1;
	
КонецПроцедуры

// Обновляет значение в "Назначении" только если это значение в "Источнике" не NULL
&НаСервереБезКонтекста
Процедура ЗаполнитьЗначенияСвойствСПроверкой(Назначение, Источник)

	Для каждого КлючИЗнчачение Из Назначение Цикл
		
		Если Источник[КлючИЗнчачение.Ключ] = NULL Тогда
			Продолжить;
		КонецЕсли;
		Назначение[КлючИЗнчачение.Ключ] = Источник[КлючИЗнчачение.Ключ];
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти



#Область Диалоги

&НаКлиенте
Процедура ЗаполнитьИзДругогоВариантаКлиент(ПараметрыЯчейки)

	СтрокаПериода = СтрокаПериодаПоНомеру(ТаблицаБюджетныхПериодов, ПараметрыЯчейки.НомерПериода);
	Если СтрокаПериода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьИзДругогоВариантаЗавершение", ЭтотОбъект, ПараметрыЯчейки);
	
	ПараметрыФормы = Новый Структура("ВариантПриемник,НачальнаяДата,РазделБюджета", ВариантБюджета, СтрокаПериода.НачалоПериода, РазделБюджета);
	ОткрытьФорму(ПолучитьПолноеИмяФормы("КопированиеПоказателей"), ПараметрыФормы, ЭтотОбъект, , , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзДругогоВариантаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ОбновитьВсеДанные();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставСтатейЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ОбновитьВсеДанные();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДиалогНастройкиСреднего()

	Оповещение = Новый ОписаниеОповещения("ДиалогНастройкиСреднегоЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("КоличествоПериодовСтатистики, КолонкиСтатистики", КоличествоПериодовСтатистики, КолонкиСтатистики);
	
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ВыборСтатистики"), ПараметрыФормы, ЭтотОбъект, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ДиалогНастройкиСреднегоЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПериодовСтатистики = Результат.КоличествоПериодовСтатистики;
	КолонкиСтатистики = Результат.КолонкиСтатистики;
	НастройкиСреднегоПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗаполнениеБюджета(ИмяКоманды)

	ПараметрыЯчейки = ПараметрыТекущейЯчейкиБюджета();
	Если ПараметрыЯчейки = Неопределено Или Не ПараметрыЯчейки.Свойство("НомерПериода")
		Или Не ЗначениеЗаполнено(ПараметрыЯчейки.НомерПериода) Или ПараметрыЯчейки.НомерПериода <= 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Не выбран заполняемый период.
			|Установите курсор в колонку того периода, который хотите заполнить, и повторите попытку'"));
		Возврат;
		
	КонецЕсли;
	
	// Прверяем корректность выбранной колонки
	Актуальность = АктуальностьПериодаПоНомеру(ТаблицаБюджетныхПериодов, ПараметрыЯчейки.НомерПериода);
	Если Актуальность = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не удалось определить заполняемый выбранный.
			|Установите курсор в колонку текущего или будущего бюджетного периода и повторите попытку'"), , Заголовок);
		Возврат;
	ИначеЕсли Актуальность < 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Прошлые бюджетные периоды не заполняются.
			|Установите курсор в колонку текущего или будущего бюджетного периода и повторите попытку'"), , Заголовок);
		Возврат;
	ИначеЕсли ПараметрыЯчейки.НомерПериода = 1 И 
		(ИмяКоманды = "ЗаполнитьПланомПредыдущегоМесяца" Или ИмяКоманды = "ЗаполнитьФактомПредыдущегоМесяца") Тогда 
		ПоказатьПредупреждение(, НСтр("ru='Нет предыдущих периодов для заполнения показателей.
			|Измените период просмотра, чтобы отобразить предыдыщий период, и повторите попытку'"), , Заголовок);
		Возврат;
	ИначеЕсли (ИмяКоманды = "ЗаполнитьСреднимПланом" Или ИмяКоманды = "ЗаполнитьСреднимФактом") И КоличествоПериодовСтатистики = 0 Тогда 
		ПоказатьПредупреждение(, НСтр("ru='Статистика по предыдущим периодам отсутствует.
			|Для сбора статистики настройте ""Расчет среднего"" в меню ""Еще...""'"), , Заголовок);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполняемойЯчейки", ПараметрыЯчейки);
	Если ИмяКоманды = "ЗаполнитьПланомПредыдущегоМесяца" Или ИмяКоманды = "ЗаполнитьФактомПредыдущегоМесяца" Тогда
		ДополнительныеПараметры.Вставить("ПараметрыЯчейкиИсточника", ПараметрыЯчейкиСоседнегоПериода(ПараметрыЯчейки));
	ИначеЕсли ИмяКоманды = "ЗаполнитьСреднимПланом" Или ИмяКоманды = "ЗаполнитьСреднимФактом" Тогда
		ДополнительныеПараметры.Вставить("ПараметрыЯчейкиИсточника", ПараметрыТекущейЯчейкиБюджета(ТаблицаБюджета.Область(ПараметрыЯчейки.НомерСтроки, 2)));
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Заменить все показатели в бюджетном периоде %1?'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, ПредставлениеПериодаПоНомеру(ТаблицаБюджетныхПериодов, ПараметрыЯчейки.НомерПериода));
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗаполнениеБюджетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Заголовок);

КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗаполнениеБюджетаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Состояние(НСтр("ru='Заполнение плановых показателей...'"));
	Если ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьИзДругогоВарианта" Тогда
		ЗаполнитьИзДругогоВариантаКлиент(ДополнительныеПараметры.ПараметрыЗаполняемойЯчейки);
	ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьПланомПредыдущегоМесяца" Тогда
		ЗаполнитьИзПредыдущегоМесяцаСервер(ДополнительныеПараметры.ПараметрыЗаполняемойЯчейки, 
						ДополнительныеПараметры.ПараметрыЯчейкиИсточника, "План");
	ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьФактомПредыдущегоМесяца" Тогда
		ЗаполнитьИзПредыдущегоМесяцаСервер(ДополнительныеПараметры.ПараметрыЗаполняемойЯчейки, 
						ДополнительныеПараметры.ПараметрыЯчейкиИсточника, "Факт");
	ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьСреднимПланом" Тогда
		ЗаполнитьСреднимиПредыдущегоПериодаСервер(ДополнительныеПараметры.ПараметрыЗаполняемойЯчейки, 
						ДополнительныеПараметры.ПараметрыЯчейкиИсточника, "План");
	ИначеЕсли ДополнительныеПараметры.ИмяКоманды = "ЗаполнитьСреднимФактом" Тогда
		ЗаполнитьСреднимиПредыдущегоПериодаСервер(ДополнительныеПараметры.ПараметрыЗаполняемойЯчейки, 
						ДополнительныеПараметры.ПараметрыЯчейкиИсточника, "Факт");
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 



#Область ЗаписьИзмененийВРегистрах

// Сохраняет в регистре сведений новое значение суммы для указанной бюджетной строки
&НаСервере
Процедура ЗаписатьПоказательБюджета(ПараметрыЯчейки, СуммаПоБюджету)

	СтрокаПериода = СтрокаПериодаПоНомеру(ТаблицаБюджетныхПериодов, ПараметрыЯчейки.НомерПериода);
	Если СтрокаПериода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоКалендарногоПериода = СтрокаПериода.НачалоКалендарногоПериода;
	Если Не ЗначениеЗаполнено(НачалоКалендарногоПериода) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПеремещениеПоРазделам = ЭтоПеремещениеПоРазделамБюджета(ПараметрыЯчейки.ГрафаБюджета);
	Если Не ЗначениеЗаполнено(ПараметрыЯчейки.СтатьяБюджета) И ЭтоПеремещениеПоРазделам Тогда
		СтатьяБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка();
	Иначе
		СтатьяБюджета = ПараметрыЯчейки.СтатьяБюджета;
	КонецЕсли;
	
	Запись = РегистрыСведений.ПоказателиБюджета.СоздатьМенеджерЗаписи();
	Запись.ВариантБюджета = ВариантБюджета;
	Запись.РазделБюджета  = РазделБюджета;
	Запись.НачалоПериода  = НачалоКалендарногоПериода;
	Запись.ТипПоказателя  = ПараметрыЯчейки.ТипПоказателя;
	Запись.ГрафаБюджета   = ПараметрыЯчейки.ГрафаБюджета;
	Запись.СтатьяБюджета  = СтатьяБюджета;
	Запись.Сумма          = СуммаПоБюджету;
	Запись.Порядок        = ПараметрыЯчейки.Порядок;
	Запись.Комментарий    = ПараметрыЯчейки.Комментарий;
	
	Запись.Записать(Истина);
	
	Если ЭтоПеремещениеПоРазделам Тогда
		// Для перемещений между разделами бюджета автоматически добавляется зеркальная запись
		
		БюджетированиеСервер.ДобавитьСвязаннуюЗаписьПоРазделуБюджета(Запись);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПеремещениеПоРазделамБюджета(ГрафаБюджета)

	Возврат ГрафаБюджета = Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления
		Или ГрафаБюджета = Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление
		Или ГрафаБюджета = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления
		Или ГрафаБюджета = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление;

КонецФункции
 

// Сохраняет изменения порядка для указанных в списке статей бюджета
&НаСервере
Процедура ЗаписатьИзмененияПорядка(СписокСтатей, СкопироватьНабудущее)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", ПериодПросмотра.НачальныйПериод.КалендарноеНачало);
	Запрос.УстановитьПараметр("СкопироватьНабудущее", СкопироватьНабудущее);
	Запрос.УстановитьПараметр("ИзмененныеСтатьи", СписокСтатей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокСтатей.ВариантБюджета КАК ВариантБюджета,
	|	СписокСтатей.РазделБюджета КАК РазделБюджета,
	|	СписокСтатей.ГрафаБюджета КАК ГрафаБюджета,
	|	СписокСтатей.ТипПоказателя КАК ТипПоказателя,
	|	СписокСтатей.СтатьяБюджета КАК СтатьяБюджета,
	|	СписокСтатей.Порядок КАК Порядок
	|ПОМЕСТИТЬ СписокСтатей
	|ИЗ
	|	&ИзмененныеСтатьи КАК СписокСтатей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиБюджета.ВариантБюджета КАК ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|	ПоказателиБюджета.ГрафаБюджета КАК ГрафаБюджета,
	|	ПоказателиБюджета.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиБюджета.СтатьяБюджета КАК СтатьяБюджета,
	|	ПоказателиБюджета.Сумма КАК Сумма,
	|	СписокСтатей.Порядок КАК Порядок,
	|	ПоказателиБюджета.Комментарий КАК Комментарий
	|ИЗ
	|	СписокСтатей КАК СписокСтатей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО (ПоказателиБюджета.ВариантБюджета = СписокСтатей.ВариантБюджета
	|				И ПоказателиБюджета.РазделБюджета = СписокСтатей.РазделБюджета
	|				И ПоказателиБюджета.ГрафаБюджета = СписокСтатей.ГрафаБюджета
	|				И ПоказателиБюджета.ТипПоказателя = СписокСтатей.ТипПоказателя
	|				И ПоказателиБюджета.СтатьяБюджета = СписокСтатей.СтатьяБюджета
	|				И (ПоказателиБюджета.НачалоПериода = &НачалоПериода 
	|					ИЛИ &СкопироватьНабудущее И ПоказателиБюджета.НачалоПериода >= &НачалоПериода)
	|				 )
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписатьПоказатель(Выборка);
	КонецЦикла;

КонецПроцедуры

// Сохраняет в регистре сведений переданные значения показателя
&НаСервере
Процедура ЗаписатьПоказатель(ЗначенияПоказателя)

	Запись = РегистрыСведений.ПоказателиБюджета.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ЗначенияПоказателя);
	Запись.Записать(Истина);

КонецПроцедуры

// Заполняет выбранный период показателями предыдущего периода
&НаСервере
Процедура ЗаполнитьИзПредыдущегоМесяцаСервер(ПараметрыЯчейкиЗаполнения, ПараметрыЯчейкиИсточника, ТипПоказателей)

	НомерКолонкиЗаполняемогоПериода = ПараметрыЯчейкиЗаполнения.НомерКолонки - ПараметрыЯчейкиЗаполнения.Смещение;
	НомерКолонкиПериодаИсточника    = ПараметрыЯчейкиИсточника.НомерКолонки - ПараметрыЯчейкиИсточника.Смещение;
	
	СтрокаПериода = СтрокаПериодаПоНомеру(ТаблицаБюджетныхПериодов, ПараметрыЯчейкиЗаполнения.НомерПериода);
	Если СтрокаПериода = Неопределено Или Не ЗначениеЗаполнено(СтрокаПериода.НачалоКалендарногоПериода) Тогда
		Возврат;
	КонецЕсли;
	
	НаборРегистра = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
	ТаблицаЗаписей = наборРегистра.ВыгрузитьКолонки();
	
	ТекущаяСтрока = 3;
	КонечнаяСтрока  = НомерСтрокиИтогаРасходов;
	
	Пока ТекущаяСтрока < КонечнаяСтрока Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ОбластьСтатьи = ТаблицаБюджета.Область(ТекущаяСтрока, 1);
		Если ОбластьСтатьи = Неопределено Или ОбластьСтатьи.Расшифровка = Неопределено 
			Или Не ОбластьСтатьи.Расшифровка.Свойство("ТипСтроки") Или ОбластьСтатьи.Расшифровка.ТипСтроки <> "Статья" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьНазначения = ТаблицаБюджета.Область(ТекущаяСтрока, НомерКолонкиЗаполняемогоПериода);
		Если ОбластьНазначения = Неопределено Или ОбластьНазначения.Расшифровка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьИсточника = ТаблицаБюджета.Область(ТекущаяСтрока, НомерКолонкиПериодаИсточника);
		Если ОбластьИсточника = Неопределено Или ОбластьИсточника.Расшифровка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаписи = ТаблицаЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, ОбластьСтатьи.Расшифровка, "ТипПоказателя,ГрафаБюджета,СтатьяБюджета,Порядок");
		СтрокаЗаписи.Комментарий = ОбластьНазначения.Расшифровка.Комментарий;
		Если ТипПоказателей = "Факт" Тогда
			СтрокаЗаписи.Сумма       = ОбластьИсточника.Расшифровка.СуммаФактПоСамойСтатье 
									- ОбластьНазначения.Расшифровка.СуммаПлановыхОперацийПоСамойСтатье;
		Иначе
			СтрокаЗаписи.Сумма       = ОбластьИсточника.Расшифровка.СуммаПланПоСамойСтатье 
									- ОбластьНазначения.Расшифровка.СуммаПлановыхОперацийПоСамойСтатье;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗаписей.ЗаполнитьЗначения(ВариантБюджета, "ВариантБюджета");
	ТаблицаЗаписей.ЗаполнитьЗначения(РазделБюджета, "РазделБюджета");
	ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаПериода.НачалоКалендарногоПериода, "НачалоПериода");
	
	НаборРегистра.Отбор.ВариантБюджета.Установить(ВариантБюджета);
	НаборРегистра.Отбор.НачалоПериода.Установить(СтрокаПериода.НачалоКалендарногоПериода);
	НаборРегистра.Отбор.РазделБюджета.Установить(РазделБюджета);
	НаборРегистра.Загрузить(ТаблицаЗаписей);
	НаборРегистра.Записать(Истина);
	
	ОбновитьТаблицуБюджета();

КонецПроцедуры

// Заполняет выбранный период средними показателями предыдущих периода
&НаСервере
Процедура ЗаполнитьСреднимиПредыдущегоПериодаСервер(ПараметрыЯчейкиЗаполнения, ПараметрыЯчейкиИсточника, ТипПоказателей)

	Если КоличествоПериодовСтатистики = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерКолонкиЗаполняемогоПериода = ПараметрыЯчейкиЗаполнения.НомерКолонки - ПараметрыЯчейкиЗаполнения.Смещение;
	НомерКолонкиПериодаИсточника    = 7;
	
	СтрокаПериода = СтрокаПериодаПоНомеру(ТаблицаБюджетныхПериодов, ПараметрыЯчейкиЗаполнения.НомерПериода);
	Если СтрокаПериода = Неопределено Или Не ЗначениеЗаполнено(СтрокаПериода.НачалоКалендарногоПериода) Тогда
		Возврат;
	КонецЕсли;
	
	НаборРегистра  = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
	ТаблицаЗаписей = наборРегистра.ВыгрузитьКолонки();
	
	ТекущаяСтрока = 3;
	КонечнаяСтрока  = НомерСтрокиИтогаРасходов;
	
	Пока ТекущаяСтрока < КонечнаяСтрока Цикл
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ОбластьСтатьи = ТаблицаБюджета.Область(ТекущаяСтрока, 1);
		Если ОбластьСтатьи = Неопределено Или ОбластьСтатьи.Расшифровка = Неопределено 
			Или Не ОбластьСтатьи.Расшифровка.Свойство("ТипСтроки") Или ОбластьСтатьи.Расшифровка.ТипСтроки <> "Статья" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьНазначения = ТаблицаБюджета.Область(ТекущаяСтрока, НомерКолонкиЗаполняемогоПериода);
		Если ОбластьНазначения = Неопределено Или ОбластьНазначения.Расшифровка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьИсточника = ТаблицаБюджета.Область(ТекущаяСтрока, НомерКолонкиПериодаИсточника);
		Если ОбластьИсточника = Неопределено Или ОбластьИсточника.Расшифровка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаписи = ТаблицаЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, ОбластьСтатьи.Расшифровка, "ТипПоказателя,ГрафаБюджета,СтатьяБюджета,Порядок");
		СтрокаЗаписи.Комментарий = ОбластьНазначения.Расшифровка.Комментарий;
		Если ТипПоказателей = "Факт" Тогда
			СтрокаЗаписи.Сумма       = (ОбластьИсточника.Расшифровка.ПрошлоеСуммаФактПоСамойСтатье / КоличествоПериодовСтатистики)
									- ОбластьНазначения.Расшифровка.СуммаПлановыхОперацийПоСамойСтатье;
		Иначе
			СтрокаЗаписи.Сумма       = (ОбластьИсточника.Расшифровка.ПрошлоеСуммаПланПоСамойСтатье / КоличествоПериодовСтатистики)
									- ОбластьНазначения.Расшифровка.СуммаПлановыхОперацийПоСамойСтатье;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗаписей.ЗаполнитьЗначения(ВариантБюджета, "ВариантБюджета");
	ТаблицаЗаписей.ЗаполнитьЗначения(РазделБюджета, "РазделБюджета");
	ТаблицаЗаписей.ЗаполнитьЗначения(СтрокаПериода.НачалоКалендарногоПериода, "НачалоПериода");
	
	НаборРегистра.Отбор.ВариантБюджета.Установить(ВариантБюджета);
	НаборРегистра.Отбор.НачалоПериода.Установить(СтрокаПериода.НачалоКалендарногоПериода);
	НаборРегистра.Отбор.РазделБюджета.Установить(РазделБюджета);
	НаборРегистра.Загрузить(ТаблицаЗаписей);
	НаборРегистра.Записать(Истина);
	
	ОбновитьТаблицуБюджета();

КонецПроцедуры

#КонецОбласти 



#Область РаботаСТабличнымДокументом


#Область СуммаВыделенныхЯчеек

&НаКлиенте
Процедура Подключаемый_РассчитатьСуммуЯчеек()
	
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ТаблицаБюджета, Неопределено);
	Если ТипЗнч(Сумма) = Тип("Число") Тогда
		СуммаЯчеек = Формат(Сумма, "ЧН=0");
		Элементы.СуммаЯчеек.Доступность = Истина;
		//Элементы.ВычислитьСумму.Доступность = Ложь;
	Иначе
		СуммаЯчеек = "Выделите ячейки с суммами"; //"-";
		Элементы.СуммаЯчеек.Доступность = Ложь;
		//Элементы.ВычислитьСумму.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуВыделенныхЯчеек(ТабличныйДокумент, ВыделенныеОбласти)
	
	#Если Клиент Тогда
		ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
	#КонецЕсли
	
	#Если Клиент И Не ТолстыйКлиентУправляемоеПриложение И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат 0;
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат Неопределено; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = 0;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентУправляемоеПриложение И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат Неопределено; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Сумма = Сумма + Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Сумма = Сумма + СтрокаВЧисло(Ячейка.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(Знач ИсходнаяСтрока)
	// Превращает строку в число без вызова исключений. Стандартная функция преобразования
	//   Число() строго контролирует отсутствие каких-либо символов кроме числовых.
	
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "План: ", "");
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, "Факт: ", "");
	
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Тогда // Минус
			Если Результат <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 


// Обработка изменения суммы в реквизите табличного документа
&НаКлиенте
Процедура ПриИзмененииПланаКлиент(ПараметрыЯчейки)

	// Проверяем корректность новой суммы
	// Сумма плана не должна быть меньше суммы подстатей
	СуммаПодстатей = ПараметрыЯчейки.СуммаПланПоПодстатьям;
	Если ПараметрыЯчейки.Значение < СуммаПодстатей Тогда
		ПараметрыЯчейки.Значение = СуммаПодстатей;
		ТекстСостояния = НСтр("ru='Невозможно установить сумму меньше сумм подчиненных статей!'"); 
		ТекстПояснения = НСтр("ru='Сумма подчиненных статей: %1'"); 
		ТекстПояснения = СтрШаблон(ТекстПояснения, Формат(СуммаПодстатей, "ЧЦ=15; ЧДЦ=2"));
		Состояние(ТекстСостояния, , ТекстПояснения);
		ТаблицаБюджета.Область(ПараметрыЯчейки.НомерСтроки, ПараметрыЯчейки.НомерКолонки - ПараметрыЯчейки.Смещение).Значение = ПараметрыЯчейки.Значение;
	КонецЕсли;

	// Величина изменения плановой суммы:
	СуммаИзменения = ПараметрыЯчейки.СуммаПлан - ПараметрыЯчейки.Значение;
	
	Если СуммаИзменения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Записываем новое значение в регистр
	ЗаписатьПоказательБюджета(ПараметрыЯчейки, ПараметрыЯчейки.СуммаПоБюджетуПоСамойСтатье - СуммаИзменения);
	
	// Величины изменения остатка и превышения по статье
	ИзменениеОстатка    = 0;
	ИзменениеПревышения = 0;
	
	// Изменяем сумму в ячейках статьи
	ОбластьТаблицы = ТаблицаБюджета.Область(ПараметрыЯчейки.НомерСтроки, ПараметрыЯчейки.НомерКолонки - ПараметрыЯчейки.Смещение);
	ИзменитьСуммуПланЗаПериодВСтатье(ОбластьТаблицы, СуммаИзменения, ПараметрыЯчейки.НомерПериода, ИзменениеОстатка, ИзменениеПревышения);
	
	ЕстьИтоги = НужныКолонкиИтогов();
	
	Если ЕстьИтоги Тогда
		// Изменяем итоги по строке
		ОбластьТаблицы = ТаблицаБюджета.Область(ПараметрыЯчейки.НомерСтроки, ТаблицаБюджета.ШиринаТаблицы - 4); // ячейка из первой колонки итогов
		ИзменитьСуммуПланЗаПериодВСтатье(ОбластьТаблицы, СуммаИзменения, 0, 0, 0);
	КонецЕсли;
	
	// Изменяем значения в родительских строках
	РодительскаяСтатья = ПараметрыЯчейки.РодительскаяСтатья;
	Пока ЗначениеЗаполнено(РодительскаяСтатья) Цикл
		
		НомерСтрокиРодителя = НомерРодительскойСтатьиБюджета(РодительскаяСтатья, ПараметрыЯчейки.ТипПоказателя, ПараметрыЯчейки.НомерСтроки);
		Если ЗначениеЗаполнено(НомерСтрокиРодителя) Тогда
			
			// Изменяем сумму по родительской строке
			ОбластьТаблицы = ТаблицаБюджета.Область(НомерСтрокиРодителя, ПараметрыЯчейки.НомерКолонки - ПараметрыЯчейки.Смещение);
			ИзменитьСуммуПланЗаПериодВРодительскойСтатье(ОбластьТаблицы, СуммаИзменения, ПараметрыЯчейки.НомерПериода, ИзменениеОстатка, ИзменениеПревышения);
			
			Если ЕстьИтоги Тогда
				// Изменяем итоги по родительской строке
				ОбластьТаблицы = ТаблицаБюджета.Область(НомерСтрокиРодителя, ТаблицаБюджета.ШиринаТаблицы - 4); // ячейка из первой колонки итогов
				ИзменитьСуммуПланЗаПериодВРодительскойСтатье(ОбластьТаблицы, СуммаИзменения, 0, ИзменениеОстатка, ИзменениеПревышения);
			КонецЕсли;
			
			ПарметрыСтрокиРодителя = ПараметрыТекущейСтрокиБюджета(ТаблицаБюджета.Область(НомерСтрокиРодителя,1));
			Если ПарметрыСтрокиРодителя <> Неопределено И ПарметрыСтрокиРодителя.Свойство("РодительскаяСтатья") Тогда
				РодительскаяСтатья = ПарметрыСтрокиРодителя.РодительскаяСтатья;
			Иначе
				РодительскаяСтатья = Неопределено;
			КонецЕсли;
			
		Иначе
			РодительскаяСтатья = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Изменяем итоги доходов/расходов
	Если ПараметрыЯчейки.ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыБюджетныхПоказателей.Поступление") Тогда
		НомерСтрокиИтога = НомерСтрокиИтогаДоходов;
	Иначе
		НомерСтрокиИтога = НомерСтрокиИтогаРасходов;
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерСтрокиИтога) Тогда
		
		ОбластьТаблицы = ТаблицаБюджета.Область(НомерСтрокиИтога, ПараметрыЯчейки.НомерКолонки - ПараметрыЯчейки.Смещение);
		ИзменитьСуммуПланЗаПериодВИтогах(ОбластьТаблицы, СуммаИзменения, ПараметрыЯчейки.НомерПериода, ИзменениеОстатка, ИзменениеПревышения);
		
		Если ЕстьИтоги Тогда
			ОбластьТаблицы = ТаблицаБюджета.Область(НомерСтрокиИтога, ТаблицаБюджета.ШиринаТаблицы - 4);
			ИзменитьСуммуПланЗаПериодВИтогах(ОбластьТаблицы, СуммаИзменения, ПараметрыЯчейки.НомерПериода, ИзменениеОстатка, ИзменениеПревышения);
		КонецЕсли;
		
	КонецЕсли;
	
	// Изменяем плановые остатки на конец текущего и будущих периодов
	ОбновитьПлановыеОстаткиТаблицы();
	
КонецПроцедуры

// Изменяет значения расшифровки статьи и текст в указанной области и связанных с ней областях
&НаКлиенте
Процедура ИзменитьСуммуПланЗаПериодВСтатье(ОбластьТаблицы, СуммаИзменения, НомерПериода, ИзменениеОстатка, ИзменениеПревышения)

	Если СуммаИзменения = 0 Или ОбластьТаблицы = Неопределено Или ОбластьТаблицы.Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьТаблицы.Расшифровка.СуммаПоБюджетуПоСамойСтатье = ОбластьТаблицы.Расшифровка.СуммаПоБюджетуПоСамойСтатье - СуммаИзменения;
	ОбластьТаблицы.Расшифровка.СуммаПланПоСамойСтатье      = ОбластьТаблицы.Расшифровка.СуммаПланПоСамойСтатье - СуммаИзменения;
	ОбластьТаблицы.Расшифровка.СуммаПлан                   = ОбластьТаблицы.Расшифровка.СуммаПлан - СуммаИзменения;
	
	ОбластьТаблицы.Расшифровка.РазницаПоСамойСтатье        = ОбластьТаблицы.Расшифровка.СуммаПланПоСамойСтатье - ОбластьТаблицы.Расшифровка.СуммаФактПоСамойСтатье;
	
	Если ОбластьТаблицы.Расшифровка.РазницаПоСамойСтатье > 0 Тогда
		ОбластьТаблицы.Расшифровка.ПревышениеПоСамойСтатье       = 0;
		ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоСамойСтатье = ОбластьТаблицы.Расшифровка.РазницаПоСамойСтатье;
	Иначе
		ОбластьТаблицы.Расшифровка.ПревышениеПоСамойСтатье       = ОбластьТаблицы.Расшифровка.РазницаПоСамойСтатье;
		ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоСамойСтатье = 0;
	КонецЕсли;
	
	ОбластьТаблицы.Расшифровка.Разница          = ОбластьТаблицы.Расшифровка.РазницаПоСамойСтатье + ОбластьТаблицы.Расшифровка.РазницаПоПодстатьям;
	
	НовыйОстатокПоСтатье = ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоСамойСтатье + ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоПодстатьям;
	ИзменениеОстатка     = ОбластьТаблицы.Расшифровка.ОсталосьПоСтатье - НовыйОстатокПоСтатье; //сохранили величину изменения для обновления итога
	ОбластьТаблицы.Расшифровка.ОсталосьПоСтатье = НовыйОстатокПоСтатье;
	
	НовоеПревышение     = ОбластьТаблицы.Расшифровка.ПревышениеПоСамойСтатье + ОбластьТаблицы.Расшифровка.ПревышениеПоПодстатьям;
	ИзменениеПревышения = ОбластьТаблицы.Расшифровка.Превышение - НовоеПревышение; //сохранили величину изменения для обновления итога
	ОбластьТаблицы.Расшифровка.Превышение  = НовоеПревышение;
	
	// Изменяем значения в ячейках
	Если ОбластьТаблицы.СодержитЗначение Тогда
		ОбластьТаблицы.Значение = ОбластьТаблицы.Расшифровка.СуммаПлан;
		ОбновитьКартинкуОбласти(ОбластьТаблицы, ОбластьТаблицы.Расшифровка.Комментарий, 
					ОбластьТаблицы.Расшифровка.СуммаПлановыхОперацийПоСамойСтатье, ОбластьТаблицы.Расшифровка.СуммаПланПоСамойСтатье);
	Иначе
		ОбластьТаблицы.Текст = Формат(ОбластьТаблицы.Расшифровка.СуммаПлан, "ЧЦ=15; ЧДЦ=2; ЧН=' '");
	КонецЕсли;
	
	Если НомерПериода = 0 Или ЕстьКолонкиОстаткаИПревышения(НомерПериода) Тогда
		// Обновлям отображение в связанных ячейках того-же периода (Осталось по статье и Превышение)
		ОбновитьТекстВСвязанныхЯчейках(ОбластьТаблицы);
	КонецЕсли;

КонецПроцедуры

// Изменяет значения расшифровки родительской статьи и текст в указанной области и связанных с ней областях
&НаКлиенте
Процедура ИзменитьСуммуПланЗаПериодВРодительскойСтатье(ОбластьТаблицы, СуммаИзменения, НомерПериода, ИзменениеОстатка, ИзменениеПревышения)

	Если СуммаИзменения = 0 Или ОбластьТаблицы = Неопределено Или ОбластьТаблицы.Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЯчейки = ПараметрыТекущейЯчейкиБюджета(ОбластьТаблицы);
	Если ПараметрыЯчейки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ОбластьТаблицы.Расшифровка.СуммаПоБюджетуПоПодстатьям  = ОбластьТаблицы.Расшифровка.СуммаПоБюджетуПоПодстатьям - СуммаИзменения;
	ОбластьТаблицы.Расшифровка.СуммаПланПоПодстатьям  = ОбластьТаблицы.Расшифровка.СуммаПланПоПодстатьям - СуммаИзменения;
	ОбластьТаблицы.Расшифровка.СуммаПлан              = ОбластьТаблицы.Расшифровка.СуммаПлан - СуммаИзменения;
	ОбластьТаблицы.Расшифровка.РазницаПоПодстатьям    = ОбластьТаблицы.Расшифровка.СуммаПланПоПодстатьям - ОбластьТаблицы.Расшифровка.СуммаФактПоПодстатьям;
	
	ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоПодстатьям  = Макс(0, ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоПодстатьям - ИзменениеОстатка);
	ОбластьТаблицы.Расшифровка.ОсталосьПоСтатье              = ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоСамойСтатье + ОбластьТаблицы.Расшифровка.ОсталосьПоСтатьеПоПодстатьям;
	
	ОбластьТаблицы.Расшифровка.ПревышениеПоПодстатьям   = Мин(0, ОбластьТаблицы.Расшифровка.ПревышениеПоПодстатьям - ИзменениеПревышения);
	ОбластьТаблицы.Расшифровка.Превышение               = ОбластьТаблицы.Расшифровка.ПревышениеПоСамойСтатье + ОбластьТаблицы.Расшифровка.ПревышениеПоПодстатьям;
	
	// Изменяем значения в ячейках
	Если ОбластьТаблицы.СодержитЗначение Тогда
		ОбластьТаблицы.Значение = ОбластьТаблицы.Расшифровка.СуммаПлан;
		ОбновитьКартинкуОбласти(ОбластьТаблицы, ОбластьТаблицы.Расшифровка.Комментарий, 
					ОбластьТаблицы.Расшифровка.СуммаПлановыхОперацийПоСамойСтатье, ОбластьТаблицы.Расшифровка.СуммаПланПоСамойСтатье);
	Иначе
		ОбластьТаблицы.Текст = Формат(ОбластьТаблицы.Расшифровка.СуммаПлан, "ЧЦ=15; ЧДЦ=2; ЧН=' '");
	КонецЕсли;
	
	Если НомерПериода = 0 Или ЕстьКолонкиОстаткаИПревышения(НомерПериода) Тогда
		// Обновлям отображение в связанных ячейках того-же периода (Осталось по статье и Превышение)
		ОбновитьТекстВСвязанныхЯчейках(ОбластьТаблицы);
	КонецЕсли;

КонецПроцедуры

// Изменяет значения расшифровки и текст итогов
&НаКлиенте
Процедура ИзменитьСуммуПланЗаПериодВИтогах(ОбластьТаблицы, СуммаИзменения, НомерПериода, ИзменениеОстатка, ИзменениеПревышения)

	Если СуммаИзменения = 0 Или ОбластьТаблицы = Неопределено Или ОбластьТаблицы.Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьТаблицы.Расшифровка.СуммаПлан             = ОбластьТаблицы.Расшифровка.СуммаПлан - СуммаИзменения;
	ОбластьТаблицы.Расшифровка.Разница               = ОбластьТаблицы.Расшифровка.СуммаПлан - ОбластьТаблицы.Расшифровка.СуммаФакт;
	ОбластьТаблицы.Расшифровка.ОсталосьПоСтатье      = ОбластьТаблицы.Расшифровка.ОсталосьПоСтатье - ИзменениеОстатка;
	ОбластьТаблицы.Расшифровка.Превышение            = ОбластьТаблицы.Расшифровка.Превышение - ИзменениеПревышения;
	
	
	// Изменяем текст в ячейках
	ОбластьТаблицы.Текст = Формат(ОбластьТаблицы.Расшифровка.СуммаПлан, "ЧЦ=15; ЧДЦ=2; ЧН=' '");
	
	Если НомерПериода = 0 Или ЕстьКолонкиОстаткаИПревышения(НомерПериода) Тогда
		// Обновлям отображение в связанных ячейках того-же периода (Осталось по статье и Превышение)
		ОбновитьТекстВСвязанныхЯчейках(ОбластьТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстВСвязанныхЯчейках(ОбластьТаблицы)

	КолонкаОстатка = ?(ОбластьТаблицы.Расшифровка.ИмяГруппы = "Итоги", 2, 3);
	СвязаннаяОбласть = ТаблицаБюджета.Область(ОбластьТаблицы.Верх, ОбластьТаблицы.Лево + КолонкаОстатка);
	Если СвязаннаяОбласть.Расшифровка <> Неопределено И СвязаннаяОбласть.Расшифровка.ИмяКолонки = "ОсталосьПоСтатье" Тогда
		СвязаннаяОбласть.Текст = Формат(ОбластьТаблицы.Расшифровка.ОсталосьПоСтатье, "ЧЦ=15; ЧДЦ=2; ЧН=' '");
	КонецЕсли;
	
	СвязаннаяОбласть = ТаблицаБюджета.Область(ОбластьТаблицы.Верх, ОбластьТаблицы.Лево + КолонкаОстатка + 1);
	Если СвязаннаяОбласть.Расшифровка <> Неопределено И СвязаннаяОбласть.Расшифровка.ИмяКолонки = "Превышение" Тогда
		СвязаннаяОбласть.Текст = Формат(-ОбластьТаблицы.Расшифровка.Превышение, "ЧЦ=15; ЧДЦ=2; ЧН=' '");
	КонецЕсли;

КонецПроцедуры


// Обновляет остатки план в табличном документе
&НаКлиенте
Процедура ОбновитьПлановыеОстаткиТаблицы()

	ТекущийОстаток = 0;
	
	Для каждого СтрокаПериода Из ТаблицаБюджетныхПериодов Цикл
		
		Если СтрокаПериода.НомерПериода < 1 Или СтрокаПериода.Актуальность < 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьНачальногоОстатка = ТаблицаБюджета.Область(НомерСтрокиНачальныхОстатков, СтрокаПериода.НомерКолонки);
		ОбластьКонечногоОстатка  = ТаблицаБюджета.Область(НомерСтрокиКонечныхОстатков, СтрокаПериода.НомерКолонки);
		ОбластьИтогаДоходов      = ТаблицаБюджета.Область(НомерСтрокиИтогаДоходов, СтрокаПериода.НомерКолонки);
		ОбластьИтогаРасходов     = ТаблицаБюджета.Область(НомерСтрокиИтогаРасходов, СтрокаПериода.НомерКолонки);
		
		Если СтрокаПериода.Актуальность = 0 Или СтрокаПериода.НомерПериода = 1 Тогда
			ТекущийОстаток = ОбластьНачальногоОстатка.Расшифровка.ОстатокДенегПлан;
		ИначеЕсли СтрокаПериода.Актуальность = 1 Тогда
			ОбластьНачальногоОстатка.Расшифровка.ОстатокДенегПлан = ТекущийОстаток;
			ОбластьНачальногоОстатка.Текст = НСтр("ru='%1'"); 
			ОбластьНачальногоОстатка.Текст = СтрШаблон(ОбластьНачальногоОстатка.Текст, Формат(ТекущийОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=")); 
		КонецЕсли;
		
		ТекущийОстаток = ТекущийОстаток + ОбластьИтогаДоходов.Расшифровка.СуммаПлан - ОбластьИтогаРасходов.Расшифровка.СуммаПлан;
		
		ОбластьКонечногоОстатка.Расшифровка.ОстатокДенегПлан = ТекущийОстаток;
		ОбластьКонечногоОстатка.Текст = НСтр("ru='План: %1'"); 
		ОбластьКонечногоОстатка.Текст = СтрШаблон(ОбластьКонечногоОстатка.Текст, Формат(ТекущийОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=")); 
		Если СтрокаПериода.Актуальность >= 0 Тогда
			
			НомерКолонкиПрогноза = СтрокаПериода.НомерКолонки + ?(СтрокаПериода.Актуальность = 0, 2, 0);
			
			// Оптимистичный прогноз
			ОбластьПрогноза =  ТаблицаБюджета.Область(НомерСтрокиКонечныхОстатков + 1, НомерКолонкиПрогноза);
			Если ОбластьПрогноза.Расшифровка <> Неопределено Тогда
				Прогноз = ОбластьНачальногоОстатка.Расшифровка.ОстатокДенегПлан 
						+ ОбластьИтогаДоходов.Расшифровка.СуммаФакт 
						+ ОбластьИтогаДоходов.Расшифровка.ОсталосьПоСтатье
						- ОбластьИтогаРасходов.Расшифровка.СуммаФакт 
						- ОбластьИтогаРасходов.Расшифровка.ОсталосьПоСтатье;
				ОбластьПрогноза.Расшифровка = Прогноз;
				ОбластьПрогноза.Текст = ФорматСтрокаОстатка(Прогноз, "");
			КонецЕсли;
			
			// Пессимистичный прогноз
			ОбластьПрогноза =  ТаблицаБюджета.Область(НомерСтрокиКонечныхОстатков + 2, НомерКолонкиПрогноза);
			Если ОбластьПрогноза.Расшифровка <> Неопределено Тогда
				Прогноз = ОбластьНачальногоОстатка.Расшифровка.ОстатокДенегФакт 
						+ ОбластьИтогаДоходов.Расшифровка.СуммаФакт 
						- ОбластьИтогаРасходов.Расшифровка.СуммаФакт 
						- ОбластьИтогаРасходов.Расшифровка.ОсталосьПоСтатье;
				ОбластьПрогноза.Расшифровка = Прогноз;
				ОбластьПрогноза.Текст = ФорматСтрокаОстатка(Прогноз, "");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Проверяет возможность и выполняет сдвиг статьи вверх или вниз
&НаКлиенте
Процедура СдвинутьСтатьюКлиент(Направление, ОбластьТаблицы = Неопределено)

	Если РазделБюджета = "" Тогда
		ПоказатьПредупреждение(, НСтр("ru='Сводный бюджет можно только просматривать'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыСдвигаемойЯчейки = ПараметрыТекущейЯчейкиБюджета(ОбластьТаблицы);
	Если ПараметрыСдвигаемойЯчейки = Неопределено Или ПараметрыСдвигаемойЯчейки.ТипСтроки <> "Статья" Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьНабудущее = ВПросмотреЕстьАктуальныеПериоды(ЭтотОбъект);
	Если СкопироватьНабудущее Тогда
		Состояние(НСтр("ru='Обновление порядка статей в текущем и будущих периодах...'"));
	КонецЕсли;
	
	СдвинутьСтатьюСервер(Направление, ПараметрыСдвигаемойЯчейки, СкопироватьНабудущее);
	//Если ТекущаяОбласть <> Неопределено Тогда
	//	Элементы.ТаблицаБюджета.ТекущаяОбласть = ТекущаяОбласть;
	//КонецЕсли;
	
	 

КонецПроцедуры

// Выполняет сдвиг статьи и запись изменений в регистре сведений на текущий и будущие периоды
&НаСервере
Процедура СдвинутьСтатьюСервер(Направление, ПараметрыСдвигаемойЯчейки, СкопироватьНабудущее)

	ТипПоказателя = ПараметрыСдвигаемойЯчейки.ТипПоказателя;
	СтатьяБюджета = ПараметрыСдвигаемойЯчейки.СтатьяБюджета;
	СписокСтатей = СписокСтатейСУчетомРодителя(ТипПоказателя, ПараметрыСдвигаемойЯчейки.РодительскаяСтатья);
	СтрокаСтатьи = СписокСтатей.Найти(СтатьяБюджета, "СтатьяБюджета");
	Если СтрокаСтатьи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = СписокСтатей.Индекс(СтрокаСтатьи);
	Если ИндексСтроки = 0 И Направление < 0
		Или ИндексСтроки + 1 = СписокСтатей.Количество() И Направление > 0
		Тогда
		Возврат;
	КонецЕсли;
	
	СоседняяСтрока = СписокСтатей[ИндексСтроки + Направление];
	СоседняяСтрока.Порядок = СоседняяСтрока.Порядок - Направление;
	СтрокаСтатьи.Порядок   = СтрокаСтатьи.Порядок + Направление;

	СписокСтатей.ЗаполнитьЗначения(ВариантБюджета, "ВариантБюджета");
	СписокСтатей.ЗаполнитьЗначения(РазделБюджета,  "РазделБюджета");
	ЗаписатьИзмененияПорядка(СписокСтатей, СкопироватьНабудущее);
	
	ПорядокСтатейПриИзмененииСервер();
	
	СтрокаСтатьи = НайтиСтрокуПоСтатьеБюджета(ЭтотОбъект, ТипПоказателя, СтатьяБюджета);
	Если ЗначениеЗаполнено(СтрокаСтатьи) Тогда
		ТекущаяОбласть = ТаблицаБюджета.Область(СтрокаСтатьи, ПараметрыСдвигаемойЯчейки.НомерКолонки);
		ТаблицаБюджета.ВыделенныеОбласти.Очистить();
		ТаблицаБюджета.ВыделенныеОбласти.Добавить(ТекущаяОбласть);
		Элементы.ТаблицаБюджета.ТекущаяОбласть = ТекущаяОбласть;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает номер строки с указанной статьей бюджета или неопределено
&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуПоСтатьеБюджета(Форма, ТипПоказателя, СтатьяБюджета)

	ТаблицаБюджета = Форма.ТаблицаБюджета;
	НомерСтрокиПоиска = ?(ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыБюджетныхПоказателей.Поступление"), 
				4, Форма.НомерСтрокиИтогаДоходов + 1);
	КонечныйНомерПоиска = ?(ТипПоказателя = ПредопределенноеЗначение("Перечисление.ТипыБюджетныхПоказателей.Поступление"), 
				Форма.НомерСтрокиИтогаДоходов, Форма.НомерСтрокиКонечныхОстатков);
				
	Для Счетчик = НомерСтрокиПоиска По КонечныйНомерПоиска Цикл
		
		ОбластьТаблицы = ТаблицаБюджета.Область(Счетчик, 1);
		Если ОбластьТаблицы = Неопределено Тогда
			Возврат Неопределено;
		ИначеЕсли ОбластьТаблицы.Расшифровка <> Неопределено 
				И ОбластьТаблицы.Расшифровка.Свойство("СтатьяБюджета")
				И ОбластьТаблицы.Расшифровка.Свойство("ТипПоказателя")
				И ОбластьТаблицы.Расшифровка.СтатьяБюджета = СтатьяБюджета
				И ОбластьТаблицы.Расшифровка.ТипПоказателя = ТипПоказателя Тогда
			Возврат Счетчик;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает номер последней строки, сгруппированной в строке с номером НачальныйНомерСтроки
&НаКлиентеНаСервереБезКонтекста 
Функция НомерПоследнейСтрокиГруппыСтатей(ТаблицаБюджета, РодительскаяСтатья, Знач НачальныйНомерСтроки)

	Пока РодительскаяСтатья <> Неопределено Цикл
		
		ОбластьСтатьи = ТаблицаБюджета.Область(НачальныйНомерСтроки + 1, 1);
		Если ОбластьСтатьи = Неопределено Или ОбластьСтатьи.Расшифровка = Неопределено 
			Или Не ОбластьСтатьи.Расшифровка.Свойство("ТипСтроки") Или ОбластьСтатьи.Расшифровка.ТипСтроки <> "Статья"
			Или ОбластьСтатьи.Расшифровка.РодительскаяСтатья <> РодительскаяСтатья Тогда
			
			Возврат НачальныйНомерСтроки;
			
		КонецЕсли;
		
		НачальныйНомерСтроки = НомерПоследнейСтрокиГруппыСтатей(ТаблицаБюджета, ОбластьСтатьи.Расшифровка.СтатьяБюджета, НачальныйНомерСтроки + 1);
		
	КонецЦикла;
	
	Возврат НачальныйНомерСтроки;
	
КонецФункции

// Возвращает номер строки, в которой находится указаннвя родительская статья
&НаКлиенте
Функция НомерРодительскойСтатьиБюджета(РодительскаяСтатья, ТипПоказателя, Знач НачальнаяСтрока)

	НачальнаяСтрока = НачальнаяСтрока - 1;
	Пока НачальнаяСтрока > 3 Цикл
		
		ОбластьТаблицы = ТаблицаБюджета.Область(НачальнаяСтрока, 1);
		Если Не ЗначениеЗаполнено(ОбластьТаблицы.Расшифровка) Тогда
			НачальнаяСтрока = НачальнаяСтрока - 1;
			Продолжить;
		КонецЕсли;
		
		Если ОбластьТаблицы.Расшифровка.Свойство("ТипПоказателя") И ОбластьТаблицы.Расшифровка.ТипПоказателя <> ТипПоказателя Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ОбластьТаблицы.Расшифровка.Свойство("СтатьяБюджета") И ОбластьТаблицы.Расшифровка.СтатьяБюджета = РодительскаяСтатья Тогда
			Возврат НачальнаяСтрока;
		КонецЕсли;
		
		НачальнаяСтрока = НачальнаяСтрока - 1;
		
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции


// Возвращает таблицу занчений со статьями, подчиненным указанной родительской статье (только один уровень, без подстатей)
&НаСервере
Функция СписокСтатейСУчетомРодителя(ТипПоказателя, РодительскаяСтатья)

	СписокСтатей = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей().ВыгрузитьКолонки("ВариантБюджета,РазделБюджета,ТипПоказателя,ГрафаБюджета,СтатьяБюджета,Порядок");
	СписокСтатей.Колонки.Добавить("НомерСтроки");
	
	НачальнаяСтрока = ?(ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление, 4, НомерСтрокиИтогаДоходов + 1);
	КонечнаяСтрока  = ?(ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление, НомерСтрокиИтогаДоходов, НомерСтрокиКонечныхОстатков);
	Счетчик = 0;
	Для НомерСтроки = НачальнаяСтрока По КонечнаяСтрока Цикл
		
		ОбластьСтатьи = ТаблицаБюджета.Область(НомерСтроки, 1);
		Если ОбластьСтатьи = Неопределено Или ОбластьСтатьи.Расшифровка = Неопределено 
			Или ОбластьСтатьи.Расшифровка.ТипСтроки <> "Статья" 
			Или ЗначениеЗаполнено(ОбластьСтатьи.Расшифровка.РодительскаяСтатья) <> ЗначениеЗаполнено(РодительскаяСтатья)
			Или ОбластьСтатьи.Расшифровка.РодительскаяСтатья <> РодительскаяСтатья
			Тогда
			Продолжить;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		СтрокаСтатьи = СписокСтатей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтатьи, ОбластьСтатьи.Расшифровка);
		СтрокаСтатьи.Порядок = Счетчик;
		СтрокаСтатьи.НомерСтроки = НомерСтроки;
		
	КонецЦикла;

	Возврат СписокСтатей;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКартинкуОбласти(Область, Комментарий, СуммаПлановыхОпераций, СуммаПлан)

	ОбластьКартинки = ТаблицаБюджета.Область(Область.Верх, Область.Лево + 1);
	Если ЗначениеЗаполнено(Комментарий) Или СуммаПлановыхОпераций <> 0 Тогда
		Если СуммаПлановыхОпераций > СуммаПлан Тогда
			ОбластьКартинки.Картинка = Картинка2;
		Иначе
			ОбластьКартинки.Картинка = Картинка1;
		КонецЕсли;
	Иначе
		ОбластьКартинки.Картинка = Новый Картинка;
	КонецЕсли;

КонецПроцедуры

// Возвращает Истину, если для периода с указанным номером выводятся колонки остатка и превышения
&НаКлиенте
Функция ЕстьКолонкиОстаткаИПревышения(НомерПериода)

	Если ПериодПросмотра.КоличествоПериодов = 1 И НомерПериода = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокиПериодов = ТаблицаБюджетныхПериодов.НайтиСтроки(Новый Структура("НомерПериода", НомерПериода));
	Если СтрокиПериодов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрокиПериодов[0].Актуальность = 0;

КонецФункции


#КонецОбласти 



#Область ОтчетыИРасшифровки

// Возвращает структуру, заполненную статьей, графой, типом показателя и др. бюджетными параметрами
&НаКлиенте
Функция ПараметрыТекущейСтрокиБюджета(ТекущаяОбласть = Неопределено)

	Если ТекущаяОбласть = Неопределено Тогда
		ТекущаяОбласть = Элементы.ТаблицаБюджета.ТекущаяОбласть;
	КонецЕсли;
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбластьСтатьи = ТаблицаБюджета.Область(ТекущаяОбласть.Верх,1);
	Если ОбластьСтатьи.Расшифровка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура();
	ДобавитьВСтруктуруСвойство("ТипСтроки", Результат, ОбластьСтатьи.Расшифровка, Неопределено);
	ДобавитьВСтруктуруСвойство("ТипПоказателя", Результат, ОбластьСтатьи.Расшифровка, Неопределено);
	ДобавитьВСтруктуруСвойство("ГрафаБюджета", Результат, ОбластьСтатьи.Расшифровка, Неопределено);
	ДобавитьВСтруктуруСвойство("СтатьяБюджета", Результат, ОбластьСтатьи.Расшифровка, Неопределено);
	ДобавитьВСтруктуруСвойство("РодительскаяСтатья", Результат, ОбластьСтатьи.Расшифровка, Неопределено);
	ДобавитьВСтруктуруСвойство("Порядок", Результат, ОбластьСтатьи.Расшифровка, 0);
	
	Результат.Вставить("ПредставлениеСтатьи", ОбластьСтатьи.Текст);
	
	Возврат Результат;

КонецФункции

// Возвращает результат ПараметрыТекущейСтрокиБюджета() дополненный номером бюджетного периода и суммами
&НаКлиенте
Функция ПараметрыТекущейЯчейкиБюджета(ТекущаяОбласть = Неопределено)

	Результат = ПараметрыТекущейСтрокиБюджета(ТекущаяОбласть);
	Если Результат = Неопределено Или ТекущаяОбласть = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбластьЯчейки = ТаблицаБюджета.Область(ТекущаяОбласть.Верх, ТекущаяОбласть.Лево);
	Если ОбластьЯчейки.Расшифровка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	// Обязательные значения:
	Результат.Вставить("НомерСтроки",  ТекущаяОбласть.Верх);
	Результат.Вставить("НомерКолонки", ТекущаяОбласть.Лево);
	ДобавитьВСтруктуруСвойство("ИмяГруппы",    Результат, ОбластьЯчейки.Расшифровка, Неопределено);
	ДобавитьВСтруктуруСвойство("ИмяКолонки",   Результат, ОбластьЯчейки.Расшифровка, Неопределено);
	ДобавитьВСтруктуруСвойство("Смещение",     Результат, ОбластьЯчейки.Расшифровка, 0);
	ДобавитьВСтруктуруСвойство("НомерПериода", Результат, ОбластьЯчейки.Расшифровка, Неопределено);
	Если ОбластьЯчейки.СодержитЗначение Тогда
		Результат.Вставить("Значение", ОбластьЯчейки.Значение);
	КонецЕсли;
	
	// опеределяем ячейку с данными
	ОбластьДанных = ТаблицаБюджета.Область(Результат.НомерСтроки, Результат.НомерКолонки - Результат.Смещение);
	Если ОбластьДанных = Неопределено Или ОбластьДанных.Расшифровка = Неопределено
		Или Не ОбластьДанных.Расшифровка.Свойство("ИмяГруппы") Или ОбластьДанных.Расшифровка.ИмяГруппы <> Результат.ИмяГруппы Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Остальные значения добаляются при их наличии
	Для каждого КлючИЗначение Из ОбластьДанных.Расшифровка Цикл
		
		Если СтрНайти("ИмяГруппы,ИмяКолонки,Смещение,НомерПериода,", КлючИЗначение.Ключ +",") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЯчейкиСоседнегоПериода(ПараметрыЯчейки, Направление = -1)

	Если ПараметрыЯчейки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяОбласть = ТаблицаБюджета.Область(ПараметрыЯчейки.НомерСтроки, ПараметрыЯчейки.НомерКолонки - ПараметрыЯчейки.Смещение);
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если направление < 1 Тогда
		НомерКолонкиСоседнейОбласти = ТекущаяОбласть.Лево - 1;
	Иначе
		Если ЕстьКолонкиОстаткаИПревышения(ПараметрыЯчейки.НомерПериода) Тогда
			НомерКолонкиСоседнейОбласти = ТекущаяОбласть.Лево + 4;
		ИначеЕсли АктуальностьПериодаПоНомеру(ТаблицаБюджетныхПериодов, ПараметрыЯчейки.НомерПериода) < 0 Тогда 
			НомерКолонкиСоседнейОбласти = ТекущаяОбласть.Лево + 2;
		Иначе
			НомерКолонкиСоседнейОбласти = ТекущаяОбласть.Лево + 1;
		КонецЕсли;
	КонецЕсли;
	
	СоседняяОбласть = ТаблицаБюджета.Область(ПараметрыЯчейки.НомерСтроки, НомерКолонкиСоседнейОбласти);
	Если СоседняяОбласть = Неопределено Или СоседняяОбласть.Расшифровка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыТекущейЯчейкиБюджета(СоседняяОбласть);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетПоСтатьеБюджета(ОбластьТаблицы)

	ПараметрыЯчейки = ПараметрыТекущейЯчейкиБюджета(ОбластьТаблицы);
	Если ПараметрыЯчейки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказыватьОперации = ПараметрыЯчейки.ТипСтроки = "Статья";
	СоставПоказателей = Неопределено;
	Если ПараметрыЯчейки.ИмяКолонки = "СуммаПлан" Тогда
		СоставПоказателей = 1;
	ИначеЕсли ПараметрыЯчейки.ИмяКолонки = "СуммаФакт" Тогда
		СоставПоказателей = 2;
	КонецЕсли;
	
	ПараметрыОтчета = ПолучитьПараметрыОтчетаПоБюджету(ПараметрыЯчейки, ПоказыватьОперации, СоставПоказателей);
	ОткрытьФорму("Отчет.ОтчетПоБюджету.Форма", ПараметрыОтчета, ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция НастройкиПериодаДляОтчета(Форма, ПараметрыЯчейки)

	
	Если ПараметрыЯчейки <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЯчейки.НомерПериода) Тогда
		
			СтрокаПериода = СтрокаПериодаПоНомеру(Форма.ТаблицаБюджетныхПериодов, ПараметрыЯчейки.НомерПериода);
			Если СтрокаПериода <> Неопределено Тогда
				
				Результат = Новый Структура;
				Результат.Вставить("ПериодОтчета", Новый СтандартныйПериод(СтрокаПериода.НачалоПериода, СтрокаПериода.ОкончаниеПериода));
				Результат.Вставить("КоличествоПериодовОтчета", 1);
				
				Возврат Результат;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЯчейки.ИмяГруппы = "Статистика" Тогда
		
				Результат = Новый Структура;
				Результат.Вставить("ПериодОтчета", Новый СтандартныйПериод(Форма.ТаблицаБюджетныхПериодов[Форма.ТаблицаБюджетныхПериодов.Количество() - 1].НачалоПериода, 
								Форма.ТаблицаБюджетныхПериодов[0].ОкончаниеПериода));
				Результат.Вставить("КоличествоПериодовОтчета", Форма.КоличествоПериодовСтатистики);
				
				Возврат Результат;
				
		КонецЕсли;
		
	КонецЕсли;

	Возврат ОбщиеНастройкиПериодаДляОтчета(Форма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ОбщиеНастройкиПериодаДляОтчета(Форма)

	Результат = Новый Структура;
	Результат.Вставить("ПериодОтчета", Новый СтандартныйПериод(Форма.ПериодПросмотра.НачальныйПериод.Начало, 
							Форма.ПериодПросмотра.КонечныйПериод.Окончание));
	Результат.Вставить("КоличествоПериодовОтчета", Форма.ПериодПросмотра.КоличествоПериодов);
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьПараметрыОтчетаПоБюджету(ПараметрыЯчейки, ПоказыватьОперации = Истина, СоставПоказателей = Неопределено)

	НастройкиПериода = НастройкиПериодаДляОтчета(ЭтотОбъект, ПараметрыЯчейки);
	 
	ПараметрыОтчета = Новый Структура("СкрыватьНастройкиПриФормировании,СформироватьПриОткрытии,ПериодОтчета,ВалютаОтчета",
				Истина, Истина, НастройкиПериода.ПериодОтчета, ВариантБюджета.Валюта);

	Схема = Отчеты.ОтчетПоБюджету.ПолучитьМакет(Метаданные.Отчеты.ОтчетПоБюджету.ОсновнаяСхемаКомпоновкиДанных.Имя);
	
	// Создаем компоновщик настроек и  загружаем в него настройки варианта:
	Вариант = Схема.ВариантыНастроек[0];
	КомпоновщикНКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНКД.ЗагрузитьНастройки(Вариант.Настройки);
	ОтборКомпоновщика = КомпоновщикНКД.Настройки.Отбор;
	
	// Устанавливаем параметры:
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ПериодОтчета",   НастройкиПериода.ПериодОтчета, , Ложь);
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ВариантБюджета", ВариантБюджета, , Ложь);
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "РазделБюджета", РазделБюджета, , Ложь);
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "КоличествоПериодовПросмотра", НастройкиПериода.КоличествоПериодовОтчета, , Ложь);
	
	Если ТипЗнч(ПараметрыЯчейки) = Тип("Структура") Тогда
		
		ПоказыватьОстатки = Истина;
		
		Если ПараметрыЯчейки.Свойство("СтатьяБюджета") И ЗначениеЗаполнено(ПараметрыЯчейки.СтатьяБюджета) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "Статья.СтатьяБюджета", ПараметрыЯчейки.СтатьяБюджета, 
					ВидСравненияКомпоновкиДанных.ВИерархии, , Истина);
			ПоказыватьОстатки = Ложь;
		КонецЕсли;
		
		Если ПараметрыЯчейки.Свойство("ТипПоказателя") И ЗначениеЗаполнено(ПараметрыЯчейки.ТипПоказателя) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "ТипПоказателя", ПараметрыЯчейки.ТипПоказателя, 
					ВидСравненияКомпоновкиДанных.Равно, , Истина);
			ПоказыватьОстатки = Ложь;
		КонецЕсли;
		
		// Включаем показ операций:
		ОтчетыСервер.ИзменитьНастройкиГруппировкиПоИмени(КомпоновщикНКД.Настройки, "ДетальныеЗаписи", Новый Структура("Использование", ПоказыватьОперации), КомпоновщикНКД.ПользовательскиеНастройки);
		
		Если СоставПоказателей <> Неопределено Тогда
			
			ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "СоставПоказателей", СоставПоказателей, , Ложь);
			
			Если СоставПоказателей = 1 Тогда
				
				// Только плановые показатели
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "Обороты.СуммаПлан", 0, 
						ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
				
			ИначеЕсли СоставПоказателей = 2 Тогда
				
				// Только фактические показатели
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "Обороты.СуммаФакт", 0, 
						ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
				
			КонецЕсли;
			
			ПоказыватьОстатки = Ложь;
			
		КонецЕсли;
		
		// Отображение остатка
		ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ПоказыватьОстатки", ПоказыватьОстатки, , Ложь);
		
		// Заголовок отчета
		ЗаголовокОтчета = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
		ЗаголовокОтчетаРасшифровки               = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
		ЗаголовокОтчетаРасшифровки.Использование = ЗаголовокОтчета.Использование;
		ЗаголовокОтчетаРасшифровки.Значение      = ЗаголовокОтчета.Значение;
		
		// Представление варианта
		ПредставлениеВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаБезСтандартногоПрефикса(Вариант.Представление);
		ПредставлениеВарианта = ПредставлениеВарианта + НСтр("ru = ' - расшифровка по статье'");
		
	КонецЕсли;
	
	
	// Представление варианта
	ПредставлениеВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаБезСтандартногоПрефикса(Вариант.Представление);
	//ПредставлениеВарианта = ПредставлениеВарианта + НСтр("ru = ' - расшифровка показателей бюджета'");
	
	ПараметрыОтчета.Вставить("Вариант", ПоместитьВоВременноеХранилище(КомпоновщикНКД.Настройки));
	//ПараметрыОтчета.Вставить("ПредставлениеВарианта", ПредставлениеВарианта);

	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетПоКошелькам(ОбластьТаблицы)

	ПараметрыЯчейки = ПараметрыТекущейЯчейкиБюджета(ОбластьТаблицы);
	Если ПараметрыЯчейки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = ПолучитьПараметрыОтчетаПоКошелькам(ПараметрыЯчейки);
	ОткрытьФорму("Отчет.ОтчетПоКошелькам.ФормаОбъекта", ПараметрыОтчета, ЭтаФорма, ПараметрыОтчета.ПериодОтчета);

КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОтчетаПоКошелькам(ПараметрыЯчейки)

	НастройкиПериода = НастройкиПериодаДляОтчета(ЭтотОбъект, ПараметрыЯчейки);
	
	ПараметрыОтчета = Новый Структура("СкрыватьНастройкиПриФормировании,СформироватьПриОткрытии,ПериодОтчета,ВалютаОтчета",
				Истина, Истина, НастройкиПериода.ПериодОтчета, ВариантБюджета.Валюта);
	
	// Получаем схему и вариант:
	Схема = Отчеты.ОтчетПоКошелькам.ПолучитьМакет(Метаданные.Отчеты.ОтчетПоКошелькам.ОсновнаяСхемаКомпоновкиДанных.Имя);
	
	// Создаем компоновщик настроек и  загружаем в него настройки варианта:
	Вариант = Схема.ВариантыНастроек[3];
	КомпоновщикНКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНКД.ЗагрузитьНастройки(Вариант.Настройки);
	ОтборКомпоновщика = КомпоновщикНКД.Настройки.Отбор;
	
	// Устанавливаем параметры:
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ПериодОтчета", НастройкиПериода.ПериодОтчета, , Ложь);
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ВалютаОтчета", ВариантБюджета.Валюта, Истина, Ложь);
	
	// Устанавливаем отборы:
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "Кошелек.ТипСчета", Перечисления.ТипыСчетов.БанковскаяКартаКредитная, 
					ВидСравненияКомпоновкиДанных.НеРавно, , Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный 
					, Строка(Новый УникальныйИдентификатор));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "Кошелек.Активность", Истина, 
					ВидСравненияКомпоновкиДанных.Равно, , Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный 
					, Строка(Новый УникальныйИдентификатор));
	
	Если РазделБюджета <> "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "ВидДенег", 
						?(ЗначениеЗаполнено(РазделБюджета), ПланыСчетов.РазделыУчета.Накопления, ПланыСчетов.РазделыУчета.СвободныеДеньги), 
						ВидСравненияКомпоновкиДанных.Равно, , Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный 
						, Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	 
	Если ЗначениеЗаполнено(РазделБюджета) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборКомпоновщика, "ФинансоваяЦель", РазделБюджета, 
				ВидСравненияКомпоновкиДанных.Равно, , Истина, 
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный, Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	
	// Заголовок отчета
	ЗаголовокОтчета = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	ЗаголовокОтчетаРасшифровки = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	ЗаголовокОтчетаРасшифровки.Использование = ЗаголовокОтчета.Использование;
	ЗаголовокОтчетаРасшифровки.Значение = ЗаголовокОтчета.Значение + НСтр("ru = ' (детализация показателей бюджета)'");
	
	// Представление варианта
	ПредставлениеВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаБезСтандартногоПрефикса(Вариант.Представление);
	ПредставлениеВарианта = ПредставлениеВарианта + НСтр("ru = ' - детализация фактических показателей бюджета'");
	
	ПараметрыОтчета.Вставить("Вариант", ПоместитьВоВременноеХранилище(КомпоновщикНКД.Настройки));
	ПараметрыОтчета.Вставить("ПредставлениеВарианта", ПредставлениеВарианта);

	Возврат ПараметрыОтчета;
			
КонецФункции

&НаКлиенте
Процедура ОткрытьРедакторПоказателя(ОбластьТаблицы)

	ПараметрыЯчейки = ПараметрыТекущейЯчейкиБюджета(ОбластьТаблицы);
	Если ПараметрыЯчейки = Неопределено Или ПараметрыЯчейки.ТипСтроки <> "Статья" Тогда
		Возврат;
	КонецЕсли;

	СтрокаПериода = ТаблицаБюджетныхПериодов.НайтиСтроки(Новый Структура("НомерПериода", ПараметрыЯчейки.НомерПериода));
	Если СтрокаПериода.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПериода = Новый Структура;
	ПараметрыПериода.Вставить("НомерПериода",              СтрокаПериода[0].НомерПериода);
	ПараметрыПериода.Вставить("НачалоПериода",             СтрокаПериода[0].НачалоПериода);
	ПараметрыПериода.Вставить("ОкончаниеПериода",          СтрокаПериода[0].ОкончаниеПериода);
	ПараметрыПериода.Вставить("НачалоКалендарногоПериода", СтрокаПериода[0].НачалоКалендарногоПериода);
	ПараметрыПериода.Вставить("ПредставлениеПериода",      СтрокаПериода[0].ПредставлениеПериода);
	ПараметрыПериода.Вставить("Актуальность",              СтрокаПериода[0].Актуальность);
	
	ПараметрыРедактора = Новый Структура("ВариантБюджета, РазделБюджета, ПараметрыЯчейки, ПараметрыПериода", 
				ВариантБюджета, РазделБюджета, ПараметрыЯчейки, ПараметрыПериода);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НомерПериода", ПараметрыПериода.НомерПериода);
	ДопПараметры.Вставить("НомерСтроки", ПараметрыЯчейки.НомерСтроки);
	ДопПараметры.Вставить("НомерКолонки", ПараметрыЯчейки.НомерКолонки);
	Оповещение = Новый ОписаниеОповещения("ОткрытьРедакторПоказателяЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму(ПолучитьПолноеИмяФормы("РедакторПоказателя"), ПараметрыРедактора, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторПоказателяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПриДоступностиВвода();

КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтекстногоМенюЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор = Неопределено Или ДополнительныеПараметры.НомерСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьТаблицы = ТаблицаБюджета.Область(ДополнительныеПараметры.НомерСтроки, ДополнительныеПараметры.НомерКолонки);
	Если ОбластьТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Выбор.Значение = "ОтчетПоСтатьеПланФакт" Или Выбор.Значение = "ОтчетПоСтатьеПлан" Или Выбор.Значение = "ОтчетПоСтатьеФакт" Тогда
		ОткрытьОтчетПоСтатьеБюджета(ОбластьТаблицы);
	ИначеЕсли Выбор.Значение = "ОтчетПоОстаткамФакт" Тогда
		ОткрытьОтчетПоКошелькам(ОбластьТаблицы);
	ИначеЕсли Выбор.Значение = "Редактировать" Тогда
		ОткрытьРедакторПоказателя(ОбластьТаблицы);
	ИначеЕсли Выбор.Значение = "СдвинутьВверх" Тогда
		СдвинутьСтатьюКлиент(-1, ОбластьТаблицы);
	ИначеЕсли Выбор.Значение = "СдвинутьВниз" Тогда
		СдвинутьСтатьюКлиент(1, ОбластьТаблицы);
	КонецЕсли;

КонецПроцедуры


#КонецОбласти 

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

&НаСервере
Процедура ОбновитьКлючиСтатейНаСервере()
	БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	РегистрыСведений.СтатистикаСправочников.ОбновитьВсюСтатистикуСправочников();
	ОбновитьВсеДанные();
КонецПроцедуры

#КонецОбласти
