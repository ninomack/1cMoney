////////////////////////////////////////////////////////////////////////////////
// Модуль формы <Обработка.РазделОперации.СписокДокументовИОстатки>
//  
//  Основная форма для ведения учета и управлением справочниками
//  
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте 
Перем ИзмененныйОбъект;
&НаКлиенте 
Перем ОбновляемыеДанные;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещенияПодключаемыхКоманд(Элементы.ГруппаДополнительныеКоманды));
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Дата") Тогда
		Период.ДатаНачала = НачалоМесяца(ВыбранноеЗначение);
		Период.ДатаОкончания = КонецМесяца(Период.ДатаНачала);
		ПериодПриИзмененииСервер();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.ТипВыбранногоЗначения = "ПараметрыОтбораСпискаОпераций" Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
			УстановитьОтборСпискаОпераций();
			ОбновитьОтображениеДанных();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбновляемыеДанные = Неопределено Тогда
		ОбновляемыеДанные = Новый Структура("СписокОбъектовСтатей,ВалютаУчета", Ложь, Ложь);
	КонецЕсли; 
	НужноОбновлятьДанные = Ложь;
	
	Если ИмяСобытия = "Записан элемент справочника" 
		ИЛИ ИмяСобытия = "Запись_КурсыВалют" ИЛИ ИмяСобытия = "Запись_ЗагрузкаКурсовВалют" Тогда
		
		// Если справочник добавлен командой из этой формы, то нужно установить курсор на созданный элемент
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ВладелецФормы") И Параметр.ВладелецФормы = УникальныйИдентификатор Тогда
			ИзмененныйОбъект = Параметр.Ссылка;
		Иначе
			ИзмененныйОбъект = Неопределено;
		КонецЕсли; 
		//ОбновитьСписокОбъектовСтатейСервер(СсылкаИзмененного);
		ОбновляемыеДанные.СписокОбъектовСтатей = Истина;
		НужноОбновлятьДанные = Истина;
		
	ИначеЕсли ИмяСобытия = "Изменена валюта учета" Тогда
		
		//ОбработатьИзменениеВалютыУчета();
		ОбновляемыеДанные.ВалютаУчета = Истина;
		НужноОбновлятьДанные = Истина;
		
	ИначеЕсли ИмяСобытия = "Изменилась настройка" Тогда
		
		Если Параметр.Свойство("ПриЗапускеОткрыватьРаздел") Тогда
			Элементы.ОткрыватьПриЗапускеПрограммы.Пометка =  Параметр.ПриЗапускеОткрыватьРаздел = "Операции";
		КонецЕсли;
		
		Если Параметр.Свойство("ОсновнойКошелек") Тогда
			ОсновнойКошелек =  Параметр.ОсновнойКошелек;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НужноОбновлятьДанные Тогда
		ОбновитьДанныеПоОбработкеОповещения();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрокаРазворота <> Неопределено Тогда
		Элементы.СписокОбъектов.Развернуть(СтрокаРазворота);
		Для Каждого УзелДерева Из СписокОбъектов.ПолучитьЭлементы() Цикл
			Если УзелДерева.ПолучитьИдентификатор() <> СтрокаРазворота Тогда
				Элементы.СписокОбъектов.Свернуть(УзелДерева.ПолучитьИдентификатор());
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	СтрокаРазворота = Неопределено;
	
	// Проверим необходимость открыть подсказку о начале работы:
	Если НЕ ДопНастройкиФормы.ПоказалиПодсказкуНачалоРаботы Тогда
		Если СписокОбъектов.ПолучитьЭлементы().Количество() = 0 Тогда
			КоличествоКошельков = 0;
		Иначе
			КоличествоКошельков = СписокОбъектов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество();
		КонецЕсли; 
		Если КоличествоКошельков < 2 Тогда
			ПодключитьОбработчикОжидания("ПоказатьПодсказкуНачалоРаботы", 0.8, Истина);
		КонецЕсли; 
	ИначеЕсли НЕ ДопНастройкиФормы.ПоказалиПодсказкуВедениеУчета Тогда
		// Возможно, он еще не смотрел подсказку по ведению учета
		Если ВсегоФинансовоеСостояние = 0 Тогда
			ПодключитьОбработчикОжидания("ПоказатьПодсказкуНачалоФормаОперации", 0.8, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки <> Неопределено ИЛИ Настройки.Количество() > 0 Тогда
		Если Настройки.Получить("ДопНастройкиФормы") <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДопНастройкиФормы, Настройки["ДопНастройкиФормы"], , "ПоказалиПодсказкуВедениеУчета,ПоказалиПодсказкуНачалоРаботы");
		КонецЕсли; 
		УстановитьОтборСпискаОпераций();
		ИзменитьВидФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПовторноеОткрытиеСервер();
	
	Если СтрокаРазворота <> Неопределено Тогда
		Элементы.СписокОбъектов.Развернуть(СтрокаРазворота);
		Для Каждого УзелДерева Из СписокОбъектов.ПолучитьЭлементы() Цикл
			Если УзелДерева.ПолучитьИдентификатор() <> СтрокаРазворота Тогда
				Элементы.СписокОбъектов.Свернуть(УзелДерева.ПолучитьИдентификатор());
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	СтрокаРазворота = Неопределено;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыСписковПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьСписокОбъектовСтатейСервер();
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей Тогда
		ВывестиДиаграммуСтатей();
	Иначе
		ВывестиДиаграммуОбъектов();
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Период, ЗакрыватьПриВыборе, ОповеститьОВыборе", Период, Истина, Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Период = ВыбранноеЗначение;
	Если Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Период.ДатаНачала    = ?(ЗначениеЗаполнено(Период.ДатаНачала), НачалоДня(Период.ДатаНачала), '00010101');
		Период.ДатаОкончания = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), КонецГода(ТекущаяДатаКлиентСервер()));
	КонецЕсли;
	ПериодПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	Отбор_ИспользоватьРазделУчета = Ложь;
	Отбор_ИспользоватьОбъектУчета = Ложь;
	Отбор_ИспользоватьВидОперации = Ложь;
	УстановитьОтборСпискаОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("ТипВыбранногоЗначения,ИспользоватьРазделУчета,НомерРаздела,ИспользоватьОбъектУчета,ОбъектУчета,ИспользоватьВидОперации,ВидОперации", 
		"ПараметрыОтбораСпискаОпераций", Отбор_ИспользоватьРазделУчета, Отбор_НомерРаздела, Отбор_ИспользоватьОбъектУчета, Отбор_ОбъектУчета, Отбор_ИспользоватьВидОперации, Отбор_ВидОперации);

	ОткрытьФорму("Обработка.РазделОперации.Форма.УстановкаОтбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокОпераций

&НаКлиенте
Процедура СписокОперацийПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПриИзменении(Элемент)
	
	СписокОперацийПриИзмененииСервер();
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей Тогда
		ВывестиДиаграммуСтатей();
	Иначе
		ВывестиДиаграммуОбъектов();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли; 
	
	Отказ = истина;
	ВыбратьВидОперации();
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокОбъектов

&НаКлиенте
Процедура СписокОбъектовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов Тогда
		Если ИДСтрокиОбъектов = Элементы.СписокОбъектов.ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли; 
		
		ВывестиДиаграммуОбъектов();
		
		ИДСтрокиОбъектов = Элементы.СписокОбъектов.ТекущаяСтрока;
		
		Если ИспользоватьАвтоотборОперацийПоОбъектам И ИДСтрокиСтатей <> Элементы.СписокОбъектов.ТекущаяСтрока Тогда
			ПодключитьОбработчикОжидания("УстановитьОтборОперацийПоОбъекту", 0.1, Истина);
			ИДСтрокиСтатей = Элементы.СписокОбъектов.ТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.Предопределенный Тогда
		// Повторим системное предупреждение
		ПоказатьПредупреждение(, НСтр("ru = 'Пометка на удаление предопределенного элемента справочника запрещена'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять с %1 пометку на удаление?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить %1 на удаление?'");
	КонецЕсли; 
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, "<" + СсылкаНаОбъект + ">");
	ДополнительныеПараметры = Новый Структура("ТекущиеДанные, СсылкаНаОбъект", ТекущиеДанные, СсылкаНаОбъект);
	ОбработчикОтвета = Новый ОписаниеОповещения("СписокОбъектовПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(, СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела = ?(ТекущиеДанные = Неопределено, 1, ТекущиеДанные.НомерРаздела);
	Если Копирование Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования, ЗначенияЗаполнения", СсылкаНаОбъект, Новый Структура);
		Группа = НомерРаздела < 4 И ТекущиеДанные.ЭтоГруппа;
	Иначе
		СсылкаНаРодитель = Неопределено;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.ЭтоГруппа Тогда
				СсылкаНаРодитель = ТекущиеДанные.Ссылка;
			Иначе
				СтрокаРодителя = ТекущиеДанные.ПолучитьРодителя();
				Если СтрокаРодителя <> Неопределено Тогда
					СсылкаНаРодитель = СтрокаРодителя.Ссылка;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		ЗначенияЗаполнения = Новый Структура("Родитель,ЭтоГруппа", СсылкаНаРодитель, Группа);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли; 
	
	
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 2 Тогда
		Если Группа Тогда
			ИмяФормыОбъекта = "Справочник.КошелькиИСчета.ФормаГруппы";
		Иначе
			ИмяФормыОбъекта = "Обработка.ПомощникСозданияКошелька.Форма.Форма";
			Если НомерРаздела = 2 Тогда
				ПараметрыФормы.ЗначенияЗаполнения.Вставить("ТипСчета", ПредопределенноеЗначение("Перечисление.ТипыСчетов.БанковскаяКартаКредитная"));
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли НомерРаздела = 3 Тогда
		Если Группа Тогда
			ИмяФормыОбъекта = "Справочник.Имущество.ФормаГруппы";
		Иначе
			ИмяФормыОбъекта = "Обработка.ПомощникСозданияИмущества.Форма.Форма";
		КонецЕсли; 
	ИначеЕсли НомерРаздела = 4 ИЛИ НомерРаздела = 5 Тогда
		ИмяФормыОбъекта = "Обработка.ПомощникСозданияДолга.Форма.Форма";
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВыданныхДолгов", НомерРаздела = 4);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВзятыхДолгов",   НомерРаздела = 5);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		// Стандартная обработка события
		Возврат;
	КонецЕсли;
	
	// Действие зависит от выбранного раздела учета и его содержимого
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		Если Элементы.СписокОбъектов.Развернут(Элементы.СписокОбъектов.ТекущаяСтрока) Тогда
			Элементы.СписокОбъектов.Свернуть(Элементы.СписокОбъектов.ТекущаяСтрока);
		Иначе
			Элементы.СписокОбъектов.Развернуть(Элементы.СписокОбъектов.ТекущаяСтрока);
		КонецЕсли; 
	Иначе
		Если ТекущиеДанные.НомерРаздела = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Добавить в раздел учета новый кошелек?'");
		ИначеЕсли ТекущиеДанные.НомерРаздела = 2 Тогда
			ТекстВопроса = НСтр("ru = 'Добавить в раздел учета новый кошелек типа ""Кредитная карта""?'");
		ИначеЕсли ТекущиеДанные.НомерРаздела = 3 Тогда
			ТекстВопроса = НСтр("ru = 'Добавить в раздел учета новый объект имущества?'");
		ИначеЕсли ТекущиеДанные.НомерРаздела = 4 Тогда
			ТекстВопроса = НСтр("ru = 'Добавить в раздел учета новый выданный долг?'");
		ИначеЕсли ТекущиеДанные.НомерРаздела = 5 Тогда
			ТекстВопроса = НСтр("ru = 'Добавить в раздел учета новый полученный долг (кредит)?'");
		Иначе
			Возврат;
		КонецЕсли;
		
		ЭтоГруппа = ТекущиеДанные.НомерРаздела < 4 И ТекущиеДанные.ЭтоГруппа;
		ДополнительныеПараметры = Новый Структура("НомерРаздела,Родитель,ЭтоГруппа", ТекущиеДанные.НомерРаздела, СсылкаНаОбъект, ЭтоГруппа);
		ОбработчикОтвета = Новый ОписаниеОповещения("СозданиеОбъектаЗавершение", ЭтаФорма, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Выбранный раздел учета пуст.'") + Символы.ПС + ТекстВопроса;
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Добавление объекта учета'") );
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(, СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстГруппыДиаграммы0РасширеннаяПодсказкаОбработкаНавигационнойСссылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДопНастройкиФормы.ВидимостьДиаграммыОстатков = НЕ ДопНастройкиФормы.ВидимостьДиаграммыОстатков;
	ИзменитьВидФормы();
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокСтатей

&НаКлиенте
Процедура СписокСтатейПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей Тогда
		ВывестиДиаграммуСтатей();
		Если ИспользоватьАвтоотборОперацийПоСтатьям И ИДСтрокиСтатей <> Элементы.СписокСтатей.ТекущаяСтрока Тогда
			ПодключитьОбработчикОжидания("УстановитьОтборОперацийПоОбъекту", 0.1, Истина);
			ИДСтрокиСтатей = Элементы.СписокСтатей.ТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные  = Элементы.СписокСтатей.ТекущиеДанные;
	ДанныеРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела = ?(ТекущиеДанные = Неопределено, 6, ТекущиеДанные.НомерРаздела);
	ВыбранаГруппа = ТекущиеДанные.ПолучитьЭлементы().Количество() > 0;
	Если Копирование Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования, ЗначенияЗаполнения", СсылкаНаОбъект, Новый Структура);
	Иначе
		СсылкаНаРодитель = ?(ДанныеРодителя = Неопределено, Неопределено, ДанныеРодителя.Ссылка);
		Если СсылкаНаРодитель = Неопределено И ВыбранаГруппа Тогда
			СсылкаНаРодитель = СсылкаНаОбъект;
		КонецЕсли;
		ЗначенияЗаполнения = Новый Структура("Родитель", СсылкаНаРодитель);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли; 
	
	Если НомерРаздела = 6 Тогда
		ИмяФормыОбъекта = "Справочник.СтатьиДоходов.ФормаОбъекта";
	Иначе
		ИмяФормыОбъекта = "Справочник.СтатьиРасходов.ФормаОбъекта";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		// Стандартная обработка события
		Возврат;
	КонецЕсли;
	
	// Действие зависит от выбранного раздела учета и его содержимого
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		Если Элементы.СписокСтатей.Развернут(Элементы.СписокСтатей.ТекущаяСтрока) Тогда
			Элементы.СписокСтатей.Свернуть(Элементы.СписокСтатей.ТекущаяСтрока);
		Иначе
			Элементы.СписокСтатей.Развернуть(Элементы.СписокСтатей.ТекущаяСтрока);
		КонецЕсли; 
	Иначе
		Если ТекущиеДанные.НомерРаздела = 6 Тогда
			ТекстВопроса = НСтр("ru = 'Добавить в раздел учета новую статью доходов?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Добавить в раздел учета новую статью расходов?'");
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("НомерРаздела", ТекущиеДанные.НомерРаздела);
		ОбработчикОтвета = Новый ОписаниеОповещения("СозданиеСтатьиЗавершение", ЭтаФорма, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Выбранный раздел учета пуст.'") + Символы.ПС + ТекстВопроса;
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru = 'Добавление статьи'") );
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(, СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.Предопределенный Тогда
		// Повторим системное предупреждение
		ПоказатьПредупреждение(, НСтр("ru = 'Пометка на удаление предопределенного элемента справочника запрещена'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'Снять с %1 пометку на удаление?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Пометить %1 на удаление?'");
	КонецЕсли; 
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, "<" + СсылкаНаОбъект + ">");
	ДополнительныеПараметры = Новый Структура("ТекущиеДанные, СсылкаНаОбъект", ТекущиеДанные, СсылкаНаОбъект);
	ОбработчикОтвета = Новый ОписаниеОповещения("СписокСтатейПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстГруппыДиаграммы1РасширеннаяПодсказкаОбработкаНавигационнойСссылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДопНастройкиФормы.ВидимостьДиаграммыОборотов = НЕ ДопНастройкиФормы.ВидимостьДиаграммыОборотов;
	ИзменитьВидФормы();
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПодсказку(Команда)
	
	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма.ФормаОперацииТакси",,ЭтаФорма,);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуНачалоРаботы(Команда)
	
	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма.НачалоРаботыТакси",,ЭтаФорма,);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляОтбора(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	Если НомерРаздела = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор_ИспользоватьРазделУчета = Истина;
	Отбор_НомерРаздела = НомерРаздела;
	Отбор_ОбъектУчета = СсылкаНаОбъект;
	Отбор_ИспользоватьОбъектУчета = ЗначениеЗаполнено(Отбор_ОбъектУчета);
	УстановитьОтборСпискаОпераций();
	
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Неопределено ИЛИ Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов Тогда
		ВывестиДиаграммуОбъектов();
	Иначе
		ВывестиДиаграммуСтатей();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОчистить(Команда)
	
	Отбор_ИспользоватьРазделУчета = Ложь;
	Отбор_ИспользоватьОбъектУчета = Ложь;
	Отбор_ИспользоватьВидОперации = Ложь;
	Отбор_НомерРаздела = 0;
	Отбор_ОбъектУчета = Неопределено;
	УстановитьОтборСпискаОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПереместитьВГруппу(Команда)
	
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов Тогда
		ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.СписокСтатей.ТекущиеДанные;
	КонецЕсли;
	
	ИмяФормыСправочника = "";
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Если ТекущиеДанные.НомерРаздела = 1 ИЛИ ТекущиеДанные.НомерРаздела = 2 Тогда
			ИмяФормыСправочника = "КошелькиИСчета.ФормаВыбораГруппы";
		ИначеЕсли ТекущиеДанные.НомерРаздела = 3 Тогда
			ИмяФормыСправочника = "Имущество.ФормаВыбораГруппы";
		ИначеЕсли ТекущиеДанные.НомерРаздела = 6 Тогда
			ИмяФормыСправочника = "СтатьиДоходов.ФормаВыбора";
		ИначеЕсли ТекущиеДанные.НомерРаздела = 7 Тогда
			ИмяФормыСправочника = "СтатьиРасходов.ФормаВыбора";
		КонецЕсли; 
	КонецЕсли;
	
	Если ИмяФормыСправочника = "" Тогда
		ТекстПредупреждения  = НСтр("ru = 'Выбранный объект невозможно переместить в другую группу'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	ОбработчикВыбора = Новый ОписаниеОповещения("СписокОбъектовПереместитьВГруппуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник." + ИмяФормыСправочника,,,,,,ОбработчикВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюВозвратВыданногоЗайма(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		ЗначенияЗаполнения = Новый Структура("Кошелек", СсылкаНаОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Долги") И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВыданныхДолгов")  Тогда
		ЗначенияЗаполнения = Новый Структура("Долг", СсылкаНаОбъект);
	КонецЕсли; 
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("НамВернулиДолг", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюВыдачаВзаймы(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		ЗначенияЗаполнения = Новый Структура("Кошелек", СсылкаНаОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Долги") И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВыданныхДолгов")  Тогда
		ЗначенияЗаполнения = Новый Структура("Долг", СсылкаНаОбъект);
	КонецЕсли; 
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("МыДалиВДолг", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюОбменВалют(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	ЗначенияЗаполнения = Новый Структура("КошелекОткуда,КошелекКуда", СсылкаНаОбъект, Неопределено);
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("ОбменВалюты", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюПеревод(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	ЗначенияЗаполнения = Новый Структура("КошелекОткуда,КошелекКуда", СсылкаНаОбъект, СсылкаНаОбъект);
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("Перемещение", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюМыВернулиДолг(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		ЗначенияЗаполнения = Новый Структура("Кошелек", СсылкаНаОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Долги") И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВзятыхДолгов")  Тогда
		ЗначенияЗаполнения = Новый Структура("Кредит", СсылкаНаОбъект);
	КонецЕсли; 
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("МыВернулиДолг", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюМыВзялиВДолг(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		ЗначенияЗаполнения = Новый Структура("Кошелек", СсылкаНаОбъект);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Долги") И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВзятыхДолгов") Тогда
		ЗначенияЗаполнения = Новый Структура("Кредит", СсылкаНаОбъект);
	КонецЕсли; 
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("МыВзялиВДолг", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюПоступление(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		ЗначенияЗаполнения = Новый Структура("Кошелек", СсылкаНаОбъект);
	КонецЕсли; 
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("Доход", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюСписание(Команда)
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.КошелькиИСчета") ИЛИ
		ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Долги") И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВзятыхДолгов")
		Тогда
		ЗначенияЗаполнения = Новый Структура("КошелекДолг", СсылкаНаОбъект);
	КонецЕсли; 
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("Расход", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОперациюУниверсальнаяОперация(Команда)
	
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов Тогда
		НомерРаздела = ?(Элементы.СписокОбъектов.ТекущиеДанные = Неопределено, 0, Элементы.СписокОбъектов.ТекущиеДанные.НомерРаздела);
	Иначе
		ТекущиеДанные = ?(Элементы.СписокСтатей.ТекущиеДанные = Неопределено, 0, Элементы.СписокСтатей.ТекущиеДанные.НомерРаздела);
	КонецЕсли;
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина);
	ЗначенияЗаполнения = Новый Структура("ОбъектУчета", СсылкаНаОбъект);
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("УниверсальнаяОперация", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОстаток(Команда)
	
	СсылкаНаОбъект = ПолучитьТекущийОбъектДерева(Истина);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗначенияЗаполнения = Новый Структура("ОбъектУчета", СсылкаНаОбъект);
	
	ПараметрыДокумента = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СоздатьДокументПоИмени("ВводИзменениеОстатка", ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоПоступлениюДенег(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ПараметрыФормы.Отбор.Вставить("Кошелек", СсылкаНаОбъект);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", "ИсточникиДенег");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	
	ОткрытьФорму("Отчет.ОтчетПоПоступлениямДенег.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоРасходуДенег(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ПараметрыФормы.Отбор.Вставить("Кошелек", СсылкаНаОбъект);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	
	ОткрытьФорму("Отчет.ОтчетПоСписаниямДенег.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетДляСверки(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	
	СсылкаНаОбъект = ?(НомерРаздела = 1 ИЛИ НомерРаздела = 2, СсылкаНаОбъект, Неопределено);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ПараметрыФормы.Отбор.Вставить("Кошелек", СсылкаНаОбъект);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", "ПоДатам");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	ОткрытьФорму("Отчет.СверкаСВыпискойБанка.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоКошелькам(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	СсылкаНаОбъект = ?(НомерРаздела = 1 ИЛИ НомерРаздела = 2, СсылкаНаОбъект, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ПараметрыФормы.Отбор.Вставить("Кошелек", СсылкаНаОбъект);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", "ОперацииПоКошелькам");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	
	ОткрытьФорму("Отчет.ОтчетПоКошелькам.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоИмуществу(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	СсылкаНаОбъект = ?(НомерРаздела = 3, СсылкаНаОбъект, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ПараметрыФормы.Отбор.Вставить("Имущество", СсылкаНаОбъект);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", "ОперацииПоИмуществу");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	
	ОткрытьФорму("Отчет.ОтчетПоИмуществу.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоДолгам(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	СсылкаНаОбъект = ?(НомерРаздела = 4 ИЛИ НомерРаздела = 5, СсылкаНаОбъект, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ПараметрыФормы.Отбор.Вставить("Долг", СсылкаНаОбъект);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", "Основной");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	
	ОткрытьФорму("Отчет.ОтчетПоДолгам.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОбИзмененииФинансовогоСостояния(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаИзменения");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ОтчетОбИзмененииФинансовогоСостояния.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСтруктураДоходов(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ПараметрыФормы.Отбор.Вставить("СтатьяДохода", СсылкаНаОбъект);
	КонецЕсли;
	//ПараметрыФормы.Отбор.Вставить("ВыводитьДиаграмму", Истина);  // Диаграмма выводится по умолчанию, устанавливать параметр не обязательно.
	ПараметрыФормы.Вставить("КлючВарианта", "ДоходыПоСтатьям");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	ОткрытьФорму("Отчет.СтруктураДоходов.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСтруктураРасходов(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	Если ТипЗнч(СсылкаНаОбъект) = тип("СправочникСсылка.СтатьиРасходов") Тогда
		ПараметрыФормы.Отбор.Вставить("СтатьяРасхода", СсылкаНаОбъект);
	КонецЕсли; 
	//ПараметрыФормы.Отбор.Вставить("ВыводитьДиаграмму", Истина);  // Диаграмма выводится по умолчанию, устанавливать параметр не обязательно.
	ПараметрыФормы.Вставить("КлючВарианта", "РасходыПоСтатьям");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
	
	ОткрытьФорму("Отчет.СтруктураРасходов.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСравнениеДоходовИРасходов(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("Период", Период);
	ПараметрыФормы.Отбор.Вставить("ВыводитьДиаграмму", Истина);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.СравнениеДоходовИРасходовЗа2Периода.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетДинамикаДоходовИРасходов(Команда)
	
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
	ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
	ПараметрыФормы.Вставить("КлючВарианта", "Сопоставление");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ДинамикаДоходовИРасходов.ФормаОбъекта", ПараметрыФормы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектов(Команда)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	НомерРаздела = ?(ТекущиеДанные = Неопределено, 0, ТекущиеДанные.НомерРаздела);
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 2 Тогда
		ИмяФормыСписка = "Справочник.КошелькиИСчета.ФормаСписка";
	ИначеЕсли НомерРаздела = 3 Тогда
		ИмяФормыСписка = "Справочник.Имущество.ФормаСписка";
	ИначеЕсли НомерРаздела = 4 ИЛИ НомерРаздела = 5 Тогда
		ИмяФормыСписка = "Справочник.Долги.ФормаСписка";
	КонецЕсли; 
	ТекущийОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	
	ОткрытьФорму(ИмяФормыСписка, Новый Структура("ТекущаяСтрока", ТекущийОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовСоздатьГруппу(Команда)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела = ?(ТекущиеДанные = Неопределено, 0, ТекущиеДанные.НомерРаздела);
	СсылкаНаРодитель = Неопределено;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоГруппа Тогда
			СсылкаНаРодитель = ТекущиеДанные.Ссылка;
		Иначе
			СтрокаРодителя = ТекущиеДанные.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда
				СсылкаНаРодитель = СтрокаРодителя.Ссылка;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	ЗначенияЗаполнения = Новый Структура("Родитель,ЭтоГруппа", СсылкаНаРодитель, Истина);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 2  Тогда
		ИмяФормыОбъекта = "Справочник.КошелькиИСчета.ФормаГруппы";
	ИначеЕсли НомерРаздела = 3 Тогда
		ИмяФормыОбъекта = "Справочник.Имущество.ФормаГруппы";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналОпераций(Команда)
	
	ТекущийОбъект = Элементы.СписокОпераций.ТекущаяСтрока;
	ОткрытьФорму("ЖурналДокументов.ОбщийЖурналДокументов.ФормаСписка", Новый Структура("ТекущаяСтрока", ТекущийОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСоздатьГруппуПоКонтексту(Команда)
	
	ТекущиеДанные  = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 1, ТекущиеДанные.НомерРаздела);
	Если НомерРаздела > 3 Тогда
		ТекстВопроса = НСтр("ru = 'Для долгов невозможно создать группу. Хотите создать новый долг?'");
		ДополнительныеПараметры = Новый Структура("ТекущиеДанные, СсылкаНаОбъект, НомерРаздела", ТекущиеДанные, СсылкаНаОбъект, НомерРаздела);
		ОбработчикОтвета = Новый ОписаниеОповещения("ОбъектыСоздатьГруппуПоКонтекстуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли; 
	ЭтоГруппа      = ?(НомерРаздела < 4, Истина, Ложь);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	
	СсылкаНаРодитель = Неопределено;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоГруппа Тогда
			СсылкаНаРодитель = ТекущиеДанные.Ссылка;
		Иначе
			СтрокаРодителя = ТекущиеДанные.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда
				СсылкаНаРодитель = СтрокаРодителя.Ссылка;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	ЗначенияЗаполнения = Новый Структура("Родитель,ЭтоГруппа", СсылкаНаРодитель, ЭтоГруппа);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 2 Тогда
		Если ЭтоГруппа Тогда
			ИмяФормыОбъекта = "Справочник.КошелькиИСчета.ФормаГруппы";
		Иначе
			ИмяФормыОбъекта = "Обработка.ПомощникСозданияКошелька.Форма.Форма";
			Если НомерРаздела = 2 Тогда
				ПараметрыФормы.ЗначенияЗаполнения.Вставить("ТипСчета", ПредопределенноеЗначение("Перечисление.ТипыСчетов.БанковскаяКартаКредитная"));
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли НомерРаздела = 3 Тогда
		Если ЭтоГруппа Тогда
			ИмяФормыОбъекта = "Справочник.Имущество.ФормаГруппы";
		Иначе
			ИмяФормыОбъекта = "Обработка.ПомощникСозданияИмущества.Форма.Форма";
		КонецЕсли; 
	ИначеЕсли НомерРаздела = 4 ИЛИ НомерРаздела = 5 Тогда
		ИмяФормыОбъекта = "Обработка.ПомощникСозданияДолга.Форма.Форма";
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВыданныхДолгов", НомерРаздела = 4);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВзятыхДолгов",   НомерРаздела = 5);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения,ЭтоГруппа", ЗначенияЗаполнения, Истина), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСоздатьГруппуИмущества(Команда)
	
	ТекущиеДанные  = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 1, ТекущиеДанные.НомерРаздела);
	ЭтоГруппа      = ?(ТекущиеДанные = Неопределено, Ложь, ТекущиеДанные.ЭтоГруппа);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Справочник.Имущество.ФормаГруппы";
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ЭтоГруппа", Истина);
	Если НомерРаздела = 3 Тогда
		Если ЭтоГруппа Тогда
			ЗначенияЗаполнения.Вставить("Родитель", СсылкаНаОбъект);
		ИначеЕсли СтрокаРодителя <> Неопределено И ЗначениеЗаполнено(СтрокаРодителя.Ссылка) ТОГДА 
			ЗначенияЗаполнения.Вставить("Родитель", СтрокаРодителя.Ссылка);
		КонецЕсли; 
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения,ЭтоГруппа", ЗначенияЗаполнения, Истина), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСоздатьГруппуКошельков(Команда)
	
	ТекущиеДанные  = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 1, ТекущиеДанные.НомерРаздела);
	ЭтоГруппа      = ?(ТекущиеДанные = Неопределено, Ложь, ТекущиеДанные.ЭтоГруппа);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Справочник.КошелькиИСчета.ФормаГруппы";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 2 Тогда
		Если ЭтоГруппа Тогда
			ЗначенияЗаполнения.Вставить("Родитель", СсылкаНаОбъект);
		ИначеЕсли СтрокаРодителя <> Неопределено И ЗначениеЗаполнено(СтрокаРодителя.Ссылка) ТОГДА 
			ЗначенияЗаполнения.Вставить("Родитель", СтрокаРодителя.Ссылка);
		КонецЕсли; 
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения,ЭтоГруппа", ЗначенияЗаполнения, Истина), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСоздатьДолг(Команда)
	
	ТекущиеДанные  = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 1, ТекущиеДанные.НомерРаздела);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Обработка.ПомощникСозданияДолга.Форма.Форма";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 4 ИЛИ НомерРаздела = 5 Тогда
		ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВыданныхДолгов", НомерРаздела = 4);
		ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВзятыхДолгов",   НомерРаздела = 5);
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Долги.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСоздатьИмущество(Команда)
	
	ТекущиеДанные  = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 1, ТекущиеДанные.НомерРаздела);
	ЭтоГруппа      = ?(ТекущиеДанные = Неопределено, Ложь, ТекущиеДанные.ЭтоГруппа);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Обработка.ПомощникСозданияИмущества.Форма.Форма";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 3 Тогда
		Если ЭтоГруппа Тогда
			ЗначенияЗаполнения.Вставить("Родитель", СсылкаНаОбъект);
		ИначеЕсли СтрокаРодителя <> Неопределено И ЗначениеЗаполнено(СтрокаРодителя.Ссылка) ТОГДА 
			ЗначенияЗаполнения.Вставить("Родитель", СтрокаРодителя.Ссылка);
		КонецЕсли; 
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Имущество.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСоздатьКошелек(Команда)
	
	ТекущиеДанные  = Элементы.СписокОбъектов.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 1, ТекущиеДанные.НомерРаздела);
	ЭтоГруппа      = ?(ТекущиеДанные = Неопределено, Ложь, ТекущиеДанные.ЭтоГруппа);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Обработка.ПомощникСозданияКошелька.Форма.Форма";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 2 Тогда
		Если ЭтоГруппа Тогда
			ЗначенияЗаполнения.Вставить("Родитель", СсылкаНаОбъект);
		ИначеЕсли СтрокаРодителя <> Неопределено И ЗначениеЗаполнено(СтрокаРодителя.Ссылка) ТОГДА 
			ЗначенияЗаполнения.Вставить("Родитель", СтрокаРодителя.Ссылка);
		КонецЕсли; 
	КонецЕсли; 
	Если НомерРаздела = 2 Тогда
		ЗначенияЗаполнения.Вставить("ТипСчета", ПредопределенноеЗначение("Перечисление.ТипыСчетов.БанковскаяКартаКредитная"));
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.КошелькиИСчета.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыОтчеты(Команда)
	
	Меню = Новый СписокЗначений;
	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	ЭлементКнопки = ?(Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей, 
			Элементы.СписокСтатейОтчеты, Элементы.СписокОбъектовОтчеты);
	
	Если НомерРаздела = 0 Тогда
		
		Возврат;
		
	ИначеЕсли НомерРаздела = 1 ИЛИ НомерРаздела = 2 Тогда
		Меню.Добавить("ОтчетПоПоступлениямДенег",             НСтр("ru = 'Отчет по поступлению денег'"));
		Меню.Добавить("ОтчетПоСписаниямДенег",                НСтр("ru = 'Отчет по расходу денег'"));
		Меню.Добавить("СверкаСВыпискойБанка",                 НСтр("ru = 'Сверка с банковской выпиской'"));
	ИначеЕсли НомерРаздела = 3 Тогда
		Меню.Добавить("ОтчетПоИмуществу",                     НСтр("ru = 'Отчет по имуществу'"));
		Меню.Добавить("ОтчетОбИзмененииФинансовогоСостояния", НСтр("ru = 'Отчет об изменении финансового состояния'"));
	ИначеЕсли НомерРаздела = 4 ИЛИ НомерРаздела = 5 Тогда
		Меню.Добавить("ОтчетПоДолгам",                         НСтр("ru = 'Отчет по долгам'"));
		Меню.Добавить("ОтчетОбИзмененииФинансовогоСостояния",  НСтр("ru = 'Отчет об изменении финансового состояния'"));
	ИначеЕсли НомерРаздела = 6 Тогда
		Меню.Добавить("СтруктураДоходов",                      НСтр("ru = 'Структура доходов'"));
		Меню.Добавить("ДинамикаДоходовИРасходов",              НСтр("ru = 'Динамика доходов и расходов'"));
		Меню.Добавить("СравнениеДоходовИРасходовЗа2Периода",   НСтр("ru = 'Сравнение доходов и расходов за 2 периода'"));
		Меню.Добавить("ОтчетОбИзмененииФинансовогоСостояния",  НСтр("ru = 'Отчет об изменении финансового состояния'"));
	ИначеЕсли НомерРаздела = 7 Тогда
		Меню.Добавить("СтруктураРасходов",                      НСтр("ru = 'Структура расходов'"));
		Меню.Добавить("ДинамикаДоходовИРасходов",              НСтр("ru = 'Динамика доходов и расходов'"));
		Меню.Добавить("СравнениеДоходовИРасходовЗа2Периода",   НСтр("ru = 'Сравнение доходов и расходов за 2 периода'"));
		Меню.Добавить("ОтчетОбИзмененииФинансовогоСостояния",  НСтр("ru = 'Отчет об изменении финансового состояния'"));
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("СсылкаНаОбъект", СсылкаНаОбъект);
	ОбработчикВыбора = Новый ОписаниеОповещения("ОбъектыОтчетыЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОбработчикВыбора, Меню, ЭлементКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиСоздатьПодстатьюПоКонтексту(Команда)
	
	ТекущиеДанные  = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 7, ТекущиеДанные.НомерРаздела);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Родитель", СсылкаНаОбъект);
	
	Если НомерРаздела = 6 И ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СтатьиДоходов") Тогда
		ИмяФормыОбъекта = "Справочник.СтатьиДоходов.ФормаОбъекта";
	Иначе
		ИмяФормыОбъекта = "Справочник.СтатьиРасходов.ФормаОбъекта";
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиСоздатьПодстатьюДоходов(Команда)
	
	ТекущиеДанные  = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 7, ТекущиеДанные.НомерРаздела);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Справочник.СтатьиДоходов.ФормаОбъекта";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 6 И ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СтатьиДоходов") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", СсылкаНаОбъект);
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиСоздатьСтатьюДоходов(Команда)
	
	ТекущиеДанные  = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 7, ТекущиеДанные.НомерРаздела);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Справочник.СтатьиДоходов.ФормаОбъекта";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 6 И ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СтатьиДоходов") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", ?(СтрокаРодителя = Неопределено, СсылкаНаОбъект, СтрокаРодителя.Ссылка));
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиСоздатьПодстатьюРасходов(Команда)
	
	ТекущиеДанные  = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 7, ТекущиеДанные.НомерРаздела);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Справочник.СтатьиРасходов.ФормаОбъекта";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 7 И ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СтатьиРасходов") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", СсылкаНаОбъект);
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиСоздатьСтатьюРасходов(Команда)
	
	ТекущиеДанные  = Элементы.СписокСтатей.ТекущиеДанные;
	СсылкаНаОбъект = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	НомерРаздела   = ?(ТекущиеДанные = Неопределено, 7, ТекущиеДанные.НомерРаздела);
	СтрокаРодителя = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПолучитьРодителя());
	ИмяФормыОбъекта = "Справочник.СтатьиРасходов.ФормаОбъекта";
	
	ЗначенияЗаполнения = Новый Структура;
	Если НомерРаздела = 7 И ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СтатьиРасходов") Тогда
		ЗначенияЗаполнения.Вставить("Родитель", ?(СтрокаРодителя = Неопределено, СсылкаНаОбъект, СтрокаРодителя.Ссылка));
	КонецЕсли; 
	
	ОткрытьФорму(ИмяФормыОбъекта, Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммаОборотов(Команда)
	
	ДопНастройкиФормы.ВидимостьДиаграммыОборотов = НЕ ДопНастройкиФормы.ВидимостьДиаграммыОборотов;
	ИзменитьВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДиаграммаОстатков(Команда)
	
	ДопНастройкиФормы.ВидимостьДиаграммыОстатков = НЕ ДопНастройкиФормы.ВидимостьДиаграммыОстатков;
	ИзменитьВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПанельОстатков(Команда)
	
	ДопНастройкиФормы.ВидимостьПанелиОстатков = НЕ ДопНастройкиФормы.ВидимостьПанелиОстатков;
	ИзменитьВидФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Элементы.СписокОпераций.Обновить();
	СписокОперацийПриИзмененииСервер();
	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей Тогда
		ВывестиДиаграммуСтатей();
	Иначе
		ВывестиДиаграммуОбъектов();
	КонецЕсли; 

КонецПроцедуры
  
// Настройка автоматического открытия формы при начале работы порграммы
&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммы(Команда)
	
	Если Элементы.ОткрыватьПриЗапускеПрограммы.Пометка Тогда
		ТекстВопроса = НСтр("ru = 'Отключить автоматическое открытие этой формы при запуске программы?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		ТекстВопроса = НСтр("ru = 'Октрывать эту форму при каждом запуске программы?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли; 
	ДополнительныеПараметры = Новый Структура("Открывать", Элементы.ОткрыватьПриЗапускеПрограммы.Пометка);
	ОбработчикОтвета = Новый ОписаниеОповещения("ОткрыватьПриЗапускеПрограммыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗагрузитьВыпискуБанка(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьВыпискуБанкаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗагрузкаВыпискиБанка.Форма.ЗагрузкаВыписки", , , , , , Оповещение);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, СписокОпераций);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, СписокОпераций);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, СписокОпераций);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Подготовка реквизитов формы
	ВыбранныйРаздел = 0;
	ВалютаУчета     = Константы.ВалютаУчета.Получить();
	ВалютаОтчета    = ВалютаУчета;
	ОсновнойКошелек = ПользовательскиеНастройкиДеньгиСервер.ОсновнойКошелек();
	// Настройка автоматического открытия формы при начале работы порграммы
	Элементы.ОткрыватьПриЗапускеПрограммы.Пометка = ПользовательскиеНастройкиДеньгиСервер.ПриЗапускеОткрыватьРаздел() = "Операции";
	
	ТекстОтбора = НСтр("ru = 'Отбор по разделам учета не установлен'") ;
	ИДСтрокиОбъектов = -100;
	
	ПараметрыСеанса.ДатаПоследнейОперации = ТекущаяДатаСеанса();
	
	ДопНастройкиФормы = Новый Структура;
	ДопНастройкиФормы.Вставить("ВидимостьПанелиОстатков",    Истина);
	ДопНастройкиФормы.Вставить("ВидимостьДиаграммыОстатков", Истина);
	ДопНастройкиФормы.Вставить("ВидимостьДиаграммыОборотов", Истина);
	ДопНастройкиФормы.Вставить("ЦветПодсветки", WebЦвета.Желтый);
	ДопНастройкиФормы.Вставить("Отбор_ЦветФона", Элементы.ТекстОтбора.ЦветФона);
	ДопНастройкиФормы.Вставить("РежимУстановкиОтбора", 0);
	ДопНастройкиФормы.Вставить("ПоказалиПодсказкуНачалоРаботы", РаботаСФормамиСправочников.ПользовательСмотрелПодсказку("НачалоРаботы"));
	ДопНастройкиФормы.Вставить("ПоказалиПодсказкуВедениеУчета", РаботаСФормамиСправочников.ПользовательСмотрелПодсказку("ФормаОперации"));

	ЗаполнитьРеквизитыФормыПоУмолчанию();
	
	КоллекцияКартинок = Новый Структура("Группа,ГруппаУдалить,Элемент,ЭлементУдалить", 
			БиблиотекаКартинок.ПиктограммаГруппаЭлементов,
			БиблиотекаКартинок.ПиктограммаГруппаЭлементовСПометкойУдаления, 
			БиблиотекаКартинок.ПиктограммаЭлемент,
			БиблиотекаКартинок.ПиктограммаЭлементСПометкойУдаления);
	
	ПодготовитьДиаграмму();
	
	ПараметрыПереходаПоСсылке = ДеньгиВызовСервера.ПолучитьПараметрПереходаПоСсылке();
	Если ТипЗнч(ПараметрыПереходаПоСсылке) = Тип("Структура") 
		И ПараметрыПереходаПоСсылке.НазначениеПерехода = "ФормаСпискаОпераций" Тогда
		УстановитьОтборПоПараметрам(ПараметрыПереходаПоСсылке.Отбор);
	Иначе
		ОбновитьСписокОбъектовСтатейСервер();
	КонецЕсли;
	
	Элементы.СписокОперацийОписаниеОперации.ТекстПодвала = НСтр("ru = 'Итоги по колонкам:'");
	
	Если НЕ ДеньгиВызовСервераПовтИсп.ИспользуетсяВариантИнтерфейсаТакси() Тогда
		// Для обычного интерфейса заменим шрифт на обычный
		РаботаСФормамиСправочников.ИзменитьШрифтПанелиОтбораСпискаВыбора(Элементы.ГруппаБыстрыеОтборы, ШрифтыСтиля.ОбычныйШрифтТекста);
	КонецЕсли; 
	
	УстановитьУсловноеОформление();
	
	УстановитьОтборСпискаОпераций();
	
	ИзменитьВидФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоОбработкеОповещенияСервер(ОбновляемыеДанные, ИзмененныйОбъект)

	Если ОбновляемыеДанные.Свойство("СписокОбъектовСтатей") И ОбновляемыеДанные.СписокОбъектовСтатей Тогда
		ОбновитьСписокОбъектовСтатейСервер(ИзмененныйОбъект);
		ИзмененныйОбъект = Неопределено;
		ОбновляемыеДанные.СписокОбъектовСтатей = Ложь;
		ОбновитьИтогиСпискаОпераций();
	КонецЕсли; 
	
	Если ОбновляемыеДанные.Свойство("ВалютаУчета") И ОбновляемыеДанные.ВалютаУчета Тогда
		ОбработатьИзменениеВалютыУчета();
		ОбновляемыеДанные.ВалютаУчета = Ложь;
	КонецЕсли; 
	Заголовок = НСтр("ru = 'Операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВалютыУчета()

	ВалютаУчета = Константы.ВалютаУчета.Получить();
	ВалютаОтчета = ВалютаУчета;
	СписокОбъектов.ПолучитьЭлементы().Очистить();
	СписокСтатей.ПолучитьЭлементы().Очистить();
	Элементы.СписокОбъектов.ТекущаяСтрока = Неопределено;
	Элементы.СписокСтатей.ТекущаяСтрока = Неопределено;
	
	ОбновитьСписокОбъектовСтатейСервер();
	УстановитьУсловноеОформление();
	УстановитьОтборСпискаОпераций();
	ИзменитьВидФормы();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПоУмолчанию()

	ВалютаОтчета = ВалютаУчета;
	Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);
	ИспользоватьАвтоотборОперацийПоОбъектам = Ложь;
	ИспользоватьАвтоотборОперацийПоСтатьям  = Ложь;

КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьДиаграмму()

	// Остатки денег по кошелькам:
	ДиаграммаИтогов.Обновление = Ложь;
	ДиаграммаИтогов.ТипДиаграммы                    = ТипДиаграммы.Круговая;
	ДиаграммаИтогов.Рамка                           = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	ДиаграммаИтогов.ЦветФона                        = ЦветаСтиля.ЦветФонаФормы;
	ДиаграммаИтогов.ПрозрачныйФон                   = Истина;
	ДиаграммаИтогов.ОтображатьЛегенду               = Ложь;
	ДиаграммаИтогов.ОтображатьЗаголовок             = Ложь;
	ДиаграммаИтогов.ВидПодписей                     = ВидПодписейКДиаграмме.СерияПроцент;
	ДиаграммаИтогов.ПоложениеПодписей               = ПоложениеПодписейКДиаграмме.Край;
	ДиаграммаИтогов.ФорматПроцентовВПодписях        = "ЧДЦ=1; ЧН=0; ЧГ=";
	ДиаграммаИтогов.Градиент                        = Истина;
	ДиаграммаИтогов.ОбластьПостроения.ПрозрачныйФон = Истина;
	ДиаграммаИтогов.БазовоеЗначение                 = 0;
	ДиаграммаИтогов.ПропускатьБазовоеЗначение       = Истина;
	
	ДиаграммаИтогов.ОбластьПостроения.Верх          = 0; // Привязана к верхнему краю
	ДиаграммаИтогов.ОбластьПостроения.Низ           = 1; // Привязана к нижнему краю
	ДиаграммаИтогов.ОбластьПостроения.Право         = 1; // Привязана к правому краю
	ДиаграммаИтогов.ОбластьПостроения.Лево          = 0; // Привязана к левому краю
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидФормы()

	Если ДопНастройкиФормы.ВидимостьПанелиОстатков Тогда
		Элементы.ВидПанельОстатков.Заголовок = НСтр("ru = 'Скрыть панель остатков'") ;
	Иначе
		Элементы.ВидПанельОстатков.Заголовок = НСтр("ru = 'Показать панель остатков'") ;
	КонецЕсли; 

	ТекстПодсказки = ?(ДопНастройкиФормы.ВидимостьДиаграммыОстатков, НСтр("ru = 'Скрыть диаграмму'") , НСтр("ru = 'Показать диаграмму'"));
	Элементы.ТекстГруппыДиаграммы.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ТекстПодсказки, , , , "ИзменитьВидимость");
	ТекстПодсказки = ?(ДопНастройкиФормы.ВидимостьДиаграммыОборотов, НСтр("ru = 'Скрыть диаграмму'") , НСтр("ru = 'Показать диаграмму'"));
	Элементы.ТекстГруппыДиаграммы1.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ТекстПодсказки, , , , "ИзменитьВидимость");
	
	Элементы.ГруппаСпискаОбъектов.Видимость   = ДопНастройкиФормы.ВидимостьПанелиОстатков;
	Если Элементы.ГруппаСпискаОбъектов.Видимость Тогда
		Элементы.ДиаграммаОстатков.Видимость      = ДопНастройкиФормы.ВидимостьДиаграммыОстатков;
		Элементы.ДиаграммаОборотов.Видимость      = ДопНастройкиФормы.ВидимостьДиаграммыОборотов;
	КонецЕсли; 
	
	ДоступностьКнопокОчисткиОтборов = (Отбор_НомерРаздела <> 0);
	Элементы.СписокОбъектовОтборОчистить.Доступность = ДоступностьКнопокОчисткиОтборов;
	Элементы.СписокОбъектовОтборОчистить1.Доступность = ДоступностьКнопокОчисткиОтборов;
	Элементы.СписокОбъектовОтборОчистить2.Доступность = ДоступностьКнопокОчисткиОтборов;
	Элементы.СписокОбъектовОтборОчистить3.Доступность = ДоступностьКнопокОчисткиОтборов;
	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьПодсказкуНачалоРаботы()

	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма.НачалоРаботыТакси", , ЭтаФорма);

КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьПодсказкуНачалоФормаОперации()

	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма.ФормаОперацииТакси", , ЭтаФорма);

КонецПроцедуры
 
&НаСервере
Процедура УстановитьОтборПоПараметрам(СтруктураОтбора)

	ЗначениеРаздел = Неопределено;
	Если НЕ СтруктураОтбора.Свойство("РазделУчета", ЗначениеРаздел) Тогда
		ОбновитьСписокОбъектовСтатейСервер();
		Возврат;
	КонецЕсли; 
	
	Если СтруктураОтбора.Свойство("ОстатокДебетовый") Тогда
		ВыбранныйОстатокДебетовый = СтруктураОтбора.ОстатокДебетовый;
	Иначе
		ВыбранныйОстатокДебетовый = Истина;
	КонецЕсли; 
	Если СтруктураОтбора.Свойство("ОстатокКредитовый") Тогда
		ВыбранныйОстатокКредитовый = СтруктураОтбора.ОстатокКредитовый;
	Иначе
		ВыбранныйОстатокКредитовый = Ложь;
	КонецЕсли; 
	
	// Выбираем список для показа итогов:
	Если ЗначениеРаздел = ПланыСчетов.РазделыУчета.Капитал Тогда
		Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей;
	Иначе
		Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов;
	КонецЕсли; 
	ОбновитьСписокОбъектовСтатейСервер();
	
	// Определяем настройки отбора
	Отбор_ИспользоватьРазделУчета = ЗначениеЗаполнено(ЗначениеРаздел);
	Если ЗначениеРаздел = ПланыСчетов.РазделыУчета.Деньги Тогда
		Если ВыбранныйОстатокКредитовый Тогда
			Отбор_НомерРаздела = 2;
		Иначе
			Отбор_НомерРаздела = 1;
		КонецЕсли; 
	ИначеЕсли ЗначениеРаздел = ПланыСчетов.РазделыУчета.Имущество Тогда
		Отбор_НомерРаздела = 3;
	ИначеЕсли ЗначениеРаздел = ПланыСчетов.РазделыУчета.Долги Тогда
		Если ВыбранныйОстатокКредитовый Тогда
			Отбор_НомерРаздела = 5;
		Иначе
			Отбор_НомерРаздела = 4;
		КонецЕсли; 
	ИначеЕсли ЗначениеРаздел = ПланыСчетов.РазделыУчета.Капитал Тогда
		Отбор_НомерРаздела = 6;
	КонецЕсли; 
	
	// Выбираем узел дерева, который нужно раскрыть:
	СтрокаРазворота = Неопределено;
	ЭлементыСписка = СписокОбъектов.ПолучитьЭлементы();
	Если ЗначениеРаздел = ПланыСчетов.РазделыУчета.Деньги ИЛИ ЗначениеРаздел.Родитель = ПланыСчетов.РазделыУчета.Деньги Тогда
		Если ВыбранныйОстатокКредитовый Тогда
			СтрокаРазворота = ЭлементыСписка[1].ПолучитьИдентификатор();
		Иначе
			СтрокаРазворота = ЭлементыСписка[0].ПолучитьИдентификатор();
		КонецЕсли; 
	ИначеЕсли ЗначениеРаздел = ПланыСчетов.РазделыУчета.Имущество Тогда
		СтрокаРазворота = ЭлементыСписка[2].ПолучитьИдентификатор();
	ИначеЕсли ЗначениеРаздел = ПланыСчетов.РазделыУчета.Долги Тогда
		Если ВыбранныйОстатокКредитовый Тогда
			СтрокаРазворота = ЭлементыСписка[4].ПолучитьИдентификатор();
		Иначе
			СтрокаРазворота = ЭлементыСписка[3].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
	Если СтрокаРазворота <> Неопределено Тогда
		Элементы.СписокОбъектов.ТекущаяСтрока = СтрокаРазворота;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокОбъектовСтатейСервер(СсылкаИзмененногоЭлемента = Неопределено)

	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов Тогда
		ОбновитьСписокОбъектов(СсылкаИзмененногоЭлемента);
	ИначеЕсли Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей Тогда
		ОбновитьСписокСтатей(СсылкаИзмененногоЭлемента);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте 
Функция ОпределитьОбъектДляОперации(УчитыватьЗначениеОтбора, УзелДерева = Неопределено, НомерРаздела = Неопределено)

	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов Тогда
		СписокДляПоиска  = СписокОбъектов;
		ЭлементСписка = Элементы.СписокОбъектов;
	ИначеЕсли Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей Тогда
		СписокДляПоиска = СписокСтатей;
		ЭлементСписка = Элементы.СписокСтатей;
	КонецЕсли; 
	
	Если УчитыватьЗначениеОтбора И Отбор_ИспользоватьОбъектУчета Тогда
		
		// Получаем объетк из условий фильтра
		ВыбранныйОбъект = Отбор_ОбъектУчета;
		Если ЗначениеЗаполнено(ВыбранныйОбъект) Тогда
			УзелДерева = НайтиСтрокуДерева(СписокДляПоиска, Новый Структура("Ссылка", ВыбранныйОбъект));
			Если УзелДерева <> Неопределено Тогда
				НомерРаздела = УзелДерева.НомерРаздела;
				Если УзелДерева.ЭтоГруппа Тогда
					ВыбранныйОбъект = ПолучитьПервыйЭлементГруппы(УзелДерева);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	Иначе
		
		// Определяем значение по умолчанию 
		ТекущиеДанные = ЭлементСписка.ТекущиеДанные;
		ВыбранныйОбъект = Неопределено;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			НомерРаздела = ТекущиеДанные.НомерРаздела;
			Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
				Если ТекущиеДанные.ЭтоГруппа Тогда
					ВыбранныйОбъект = ПолучитьПервыйЭлементГруппы(ТекущиеДанные);
				Иначе
					ВыбранныйОбъект = ТекущиеДанные.Ссылка;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		Если ТекущиеДанные = Неопределено ИЛИ (НЕ ЗначениеЗаполнено(ВыбранныйОбъект) И (ТекущиеДанные.НомерРаздела = 1 ИЛИ ТекущиеДанные.НомерРаздела = 2)) Тогда
			ВыбранныйОбъект = ОсновнойКошелек;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ВыбранныйОбъект;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийОбъектДерева(ТолькоЭлементы = Истина)

	ТекДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТолькоЭлементы И ТекДанные.ЭтоГруппа Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТекДанные.Ссылка;
	КонецЕсли; 

КонецФункции
 

&НаКлиенте 
Функция ПолучитьПервыйЭлементГруппы(УзелДерева)

	ВыбранныйОбъект = Неопределено;
	МассивГрупп = Новый Массив;
	Для каждого СтрокаДерева Из УзелДерева.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) И СтрокаДерева.ЭтоГруппа Тогда
			ВыбранныйОбъект = ПолучитьПервыйЭлементГруппы(СтрокаДерева);
		Иначе
			ВыбранныйОбъект = СтрокаДерева.Ссылка;
		КонецЕсли;
		
		Возврат ВыбранныйОбъект;
		
	КонецЦикла;

КонецФункции
 

&НаКлиенте 
Функция ОпределитьОбъектДляОтчета(НомерРаздела, УзелДерева)

	Если Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Неопределено ИЛИ Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаОбъектов Тогда
		СписокДляПоиска  = СписокОбъектов;
		ЭлементСписка = Элементы.СписокОбъектов;
	ИначеЕсли Элементы.ГруппаСтраницыСписков.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатей Тогда
		СписокДляПоиска = СписокСтатей;
		ЭлементСписка = Элементы.СписокСтатей;
	КонецЕсли; 
	
	УзелДерева = ЭлементСписка.ТекущиеДанные;
	Если УзелДерева <> Неопределено Тогда
		ВыбранныйОбъект =  УзелДерева.Ссылка;
		НомерРаздела    = УзелДерева.НомерРаздела;
	КонецЕсли; 
	
	Возврат ВыбранныйОбъект;
	
КонецФункции

&НаСервере
Процедура ПереместитьЭлементВГруппуНаСервере(Ссылка, НоваяГруппа)

	ОбъектСправочника = Ссылка.ПолучитьОбъект();
	ОбъектСправочника.Родитель = НоваяГруппа;
	Обновлять = Истина;
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		Информация = ИнформацияОбОшибке();
		Сообщить(НСтр("ru='Невозможно переместить в указанную группу'") + ": " + Информация.Причина.Описание);
		Обновлять = Ложь;
	КонецПопытки; 
	
	Если Обновлять = Истина Тогда
		ОбновитьСписокОбъектовСтатейСервер();
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура СоздатьДокументПоИмени(ИмяВидаДокумента, ПараметрыДокумента)

	ПараметрыДокумента.Вставить("ИмяВидаДокумента", ИмяВидаДокумента);
	РаботаСФормамиДокументовКлиент.ОткрытьФормуНовогоДокументаСУчетомШаблона(ИмяВидаДокумента, ПараметрыДокумента, Элементы.СписокОпераций);
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Знач Ссылка, Знач ИмяРеквизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);

КонецФункции

&НаКлиенте
Функция ВыбратьВидОперации()

	Оповещение = Новый ОписаниеОповещения("ВыбратьВидОперацииЗавершение", ЭтотОбъект);
	РаботаСФормамиДокументовКлиент.ПоказатьВыборВидаОперации("ВводИзменениеОстатка", Оповещение);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыНовогоДокумента(ИмяВидаДокумента, ПараметрыФормы, ВыбранныйРаздел)

	// Общие параметры для вызова формы выбора шаблонов:
	ПараметрыФормы.Вставить("ИмяВидаДокумента", ИмяВидаДокумента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	
	СсылкаНаОбъект = ОпределитьОбъектДляОперации(Истина, , ВыбранныйРаздел);
	
	// В зависимости от выбранного вида операции:
	Если ИмяВидаДокумента = "НамВернулиДолг" Тогда
		
		Если ВыбранныйРаздел = 1 Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", СсылкаНаОбъект);
		ИначеЕсли ВыбранныйРаздел = 3 И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВыданныхДолгов")  Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Долг", СсылкаНаОбъект);
		КонецЕсли; 
		
	ИначеЕсли ИмяВидаДокумента = "МыДалиВДолг" Тогда
		
		Если ВыбранныйРаздел = 1 Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", СсылкаНаОбъект);
		ИначеЕсли ВыбранныйРаздел = 3 И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВыданныхДолгов")  Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Долг", СсылкаНаОбъект);
		КонецЕсли; 
		
	ИначеЕсли ИмяВидаДокумента = "ОбменВалюты" Тогда
		
		ПараметрыФормы.Вставить("ИмяВидаДокумента", "ОбменВалюты");
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("КошелекОткуда,КошелекКуда", СсылкаНаОбъект, Неопределено));
		
	ИначеЕсли ИмяВидаДокумента = "Перемещение" Тогда
		
		ПараметрыФормы.Вставить("ИмяВидаДокумента", "Перемещение");
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("КошелекОткуда,КошелекКуда", СсылкаНаОбъект, СсылкаНаОбъект));
		
	ИначеЕсли ИмяВидаДокумента = "МыВернулиДолг" Тогда
		
		Если ВыбранныйРаздел = 1 Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", СсылкаНаОбъект);
		ИначеЕсли ВыбранныйРаздел = 3 И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВыданныхДолгов")  Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кредит", СсылкаНаОбъект);
		КонецЕсли; 
		
	ИначеЕсли ИмяВидаДокумента = "МыВзялиВДолг" Тогда
		
		Если ВыбранныйРаздел = 1 Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", СсылкаНаОбъект);
		ИначеЕсли ВыбранныйРаздел = 3 И ЗначениеЗаполнено(СсылкаНаОбъект) И ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "ИспользоватьДляУчетаВыданныхДолгов")  Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кредит", СсылкаНаОбъект);
		КонецЕсли; 
		
	ИначеЕсли ИмяВидаДокумента = "Доход" Тогда
		
		Если ВыбранныйРаздел = 1 Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", СсылкаНаОбъект);
		КонецЕсли; 
		
	ИначеЕсли ИмяВидаДокумента = "Расход" Тогда
		
		Если ВыбранныйРаздел = 1 ИЛИ ВыбранныйРаздел = 3 Тогда
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("КошелекДолг", СсылкаНаОбъект);
		Иначе
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("СтатьяРасходаИмущество", СсылкаНаОбъект);
		КонецЕсли; 
		
	ИначеЕсли ИмяВидаДокумента = "УниверсальнаяОперация" Тогда
		
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ОбъектУчета", СсылкаНаОбъект);
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	ПараметрыПереходаПоСсылке = ДеньгиВызовСервера.ПолучитьПараметрПереходаПоСсылке();
	Если ТипЗнч(ПараметрыПереходаПоСсылке) = Тип("Структура") 
		И ПараметрыПереходаПоСсылке.НазначениеПерехода = "ФормаСпискаОпераций" Тогда
		Отбор_НомерРаздела = 0;
		Отбор_ИспользоватьОбъектУчета = Ложь;
		Отбор_ОбъектУчета = Неопределено;
		УстановитьОтборПоПараметрам(ПараметрыПереходаПоСсылке.Отбор);
		УстановитьОтборСпискаОпераций();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СписокОперацийПриИзмененииСервер()

	ОбновитьСписокОбъектовСтатейСервер();
	ОбновитьИтогиСпискаОпераций();
	ТекущийЭлемент = Элементы.СписокОпераций;
	Заголовок = НСтр("ru = 'Операции'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоОбработкеОповещения()

	Если ВводДоступен() Тогда
		
		ОбновитьДанныеПоОбработкеОповещенияСервер(ОбновляемыеДанные, ИзмененныйОбъект);
		
	Иначе
		
		Заголовок = НСтр("ru = 'Операции (обновляется...)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ПодключитьОбработчикОжидания("ОбновитьДанныеПоОбработкеОповещения", 1, Истина);
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПриИзмененииСпискаОпераций()

	Если ВводДоступен() Тогда
		
		СписокОперацийПриИзмененииСервер(); 
		
	Иначе
		
		Заголовок = НСтр("ru = 'Операции (обновляется...)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ПодключитьОбработчикОжидания("ОбновитьДанныеПриИзмененииСпискаОпераций", 1, Истина);
		
	КонецЕсли; 

КонецПроцедуры
 

// Общий функционал по обслуживанию списков

&НаСервере
Процедура ПериодПриИзмененииСервер()

	УстановитьОтборСпискаОпераций();
	ОбновитьСписокОбъектовСтатейСервер();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция НайтиСтрокуДерева(УзелДерева, СтруктураОтбора)

	Для Каждого СтрокаДерева Из УзелДерева.ПолучитьЭлементы() Цикл
		КоличествоСовпадений = 0;
		Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
			Если СтрокаДерева[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				КоличествоСовпадений = КоличествоСовпадений + 1;
			КонецЕсли; 
		КонецЦикла; 
		Если КоличествоСовпадений = СтруктураОтбора.Количество() Тогда
			Возврат СтрокаДерева;
		Иначе
			ПодСтрока = НайтиСтрокуДерева(СтрокаДерева, СтруктураОтбора);
			Если ПодСтрока <> Неопределено Тогда
				Возврат ПодСтрока;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

	Возврат Неопределено;

КонецФункции

&НаСервере
Функция ПолучитьСтрокуСпискаПоВыборке(КоллекцияФормы, УзелДерева, Данные, СоответствиеСтрок)

	Если УзелДерева.НомерРаздела <> 4 И УзелДерева.НомерРаздела <> 5 Тогда
		РодительЭлемента = ?(ЗначениеЗаполнено(Данные.Родитель), Данные.Родитель, Неопределено);
	Иначе
		РодительЭлемента = Неопределено;
	КонецЕсли;
	
	СтрокаДерева = ПолучитьСтрокуСпискаИзСоответствия(КоллекцияФормы, СоответствиеСтрок, Данные.Ссылка, УзелДерева, РодительЭлемента);
	
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДобавитьСтрокуВСписок(УзелДерева, Данные, СоответствиеСтрок);
	Иначе
		ЗаполнитьСтрокуСпискаДанными(СтрокаДерева, Данные);
	КонецЕсли; 

	Возврат СтрокаДерева;
	
КонецФункции

&НаСервере
Функция ДобавитьСтрокуВСписок(УзелДерева, Данные, СоответствиеСтрок)

	СтрокаДерева = УзелДерева.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Данные);
	Если ТипЗнч(УзелДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		СтрокаДерева.НомерРаздела = УзелДерева.НомерРаздела;
	КонецЕсли; 

	ЗаполнитьСтрокуСпискаДанными(СтрокаДерева, Данные);
	
	ДобавитьСтрокуСпискаВСоответствие(СоответствиеСтрок, СтрокаДерева);
	
	Возврат СтрокаДерева;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуСпискаДанными(СтрокаДерева, Данные)

	Если Данные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Данные.Ссылка) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Данные.Ссылка);
			СтрокаДерева.Представление = Данные.Ссылка;
		КонецЕсли;
		
		Если ТипЗнч(Данные) <> тип("Структура") Тогда
			
			Если СтрокаДерева.НомерРаздела < 6 Тогда
				
				
				Если Данные.КоличествоВалют = 1 Тогда
					СтрокаДерева.Остаток        = Данные.ОстатокВВалюте;
					СтрокаДерева.ОстатокВВалюте = Данные.ОстатокВВалюте;
					СтрокаДерева.Валюта         = Данные.Валюта;
				Иначе
					СтрокаДерева.Остаток        = Данные.Остаток;
					СтрокаДерева.ОстатокВВалюте = Данные.Остаток;
					СтрокаДерева.Валюта         = ВалютаУчета;
				КонецЕсли;
				СтрокаДерева.ОстатокВВалютеОтчета = Данные.Остаток;
				
				Если СтрокаДерева.ЭтоГруппа Тогда
					СтрокаДерева.КартинкаСтроки = ?(СтрокаДерева.ПометкаУдаления, КоллекцияКартинок.ГруппаУдалить, КоллекцияКартинок.Группа);;
				Иначе
					СтрокаДерева.КартинкаСтроки = ?(СтрокаДерева.ПометкаУдаления, КоллекцияКартинок.ЭлементУдалить, КоллекцияКартинок.Элемент);
				КонецЕсли;
				
			Иначе
				
				СтрокаДерева.КартинкаСтроки = ?(СтрокаДерева.ПометкаУдаления, БиблиотекаКартинок.ПиктограммаЭлементСПометкойУдаления, БиблиотекаКартинок.ПиктограммаЭлемент);
				СтрокаДерева.Родитель = ?(ЗначениеЗаполнено(Данные.Ссылка.Родитель), Данные.Ссылка.Родитель, Неопределено);
				Если Данные.КоличествоВалют = 1 Тогда
					СтрокаДерева.Сумма        = Данные.СуммаВВалюте;
					СтрокаДерева.Валюта       = Данные.Валюта;
				Иначе
					СтрокаДерева.Сумма        = Данные.Сумма;
					СтрокаДерева.СуммаВВалюте = Данные.Сумма;
					СтрокаДерева.Валюта       = ВалютаУчета;
				КонецЕсли;
				СтрокаДерева.СуммаВВалютеОтчета = Данные.Сумма;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура УдалитьСтрокиЛишнихОбъектов(КоллекцияФормы, СоответствиеСтрок, ВременноеСоответствиеСтрок)

	Для Каждого ЭлементСссылки Из СоответствиеСтрок Цикл
		Если ЭлементСссылки <> Неопределено Тогда
			
			Для Каждого ЭлементРаздела Из ЭлементСссылки.Значение Цикл
				
				Если ЭлементРаздела <> Неопределено Тогда
					
					ЭлементСтроки = ВременноеСоответствиеСтрок.Получить(ЭлементРаздела.Значение.ИДСтрокиЭлемента);
					Если ЭлементСтроки = Неопределено Тогда
						
						// Удаляем строку, ставшую лишней:
						СтрокаСписка = КоллекцияФормы.НайтиПоИдентификатору(ЭлементРаздела.Значение.ИДСтрокиЭлемента);
						Если СтрокаСписка <> Неопределено Тогда
							РодительСтроки = СтрокаСписка.ПолучитьРодителя();
							Если РодительСтроки = Неопределено Тогда
								КоллекцияФормы.ПолучитьЭлементы().Удалить(СтрокаСписка);
							Иначе
								РодительСтроки.ПолучитьЭлементы().Удалить(СтрокаСписка);
							КонецЕсли; 
						КонецЕсли; 
						
						//Удаляем лишнюю запись из соответствия:
						ЭлементСссылки.Значение.Удалить(ЭлементРаздела.Ключ);
						
					КонецЕсли; 
					
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если ЭлементСссылки.Значение.Количество()= 0 Тогда
				СоответствиеСтрок.Удалить(ЭлементСссылки.Ключ);
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьСтрокуСпискаВСоответствие(СоответствиеСтрок, СтрокаСписка)

	// Ключем соответствия является ссылка на элемент справочника
	// Значение является вложенным соответствием, в котором:
	//		ключ = номер раздела, значение = Структура("СсылкаНаРодителя, ИДСтрокиРодителя, ИДСтрокиЭлемента")
	
	// Определяем корневое соответствие, в котором ключем является ссылка:
	Ссылка = ?(ЗначениеЗаполнено(СтрокаСписка.Ссылка), СтрокаСписка.Ссылка, "Пусто");
	ЭлементСссылки = СоответствиеСтрок.Получить(Ссылка);
	Если ЭлементСссылки = Неопределено Тогда
		СоответствиеСтрок.Вставить(Ссылка, Новый Соответствие());
		ЭлементСссылки = СоответствиеСтрок.Получить(Ссылка);
	КонецЕсли;
	
	// Некоторые ссылки могут использоваться в разных разделах учета (например, кредитки, долги)
	// По этому каждой ссылке соответствует номер (номера) разделов:
	ЭлементРаздела = ЭлементСссылки.Получить(СтрокаСписка.НомерРаздела);
	Если ЭлементРаздела = Неопределено Тогда
		ЭлементСссылки.Вставить(СтрокаСписка.НомерРаздела, Новый Структура("СсылкаНаРодителя, ИДСтрокиРодителя, ИДСтрокиЭлемента"));
		ЭлементРаздела = ЭлементСссылки.Получить(СтрокаСписка.НомерРаздела);
	КонецЕсли; 
	
	// Для контроля изменения непосредственных родителей запоминаемой строки, а так же родителей ее родителей
	//	в соответствии записываем ссылку на родителя и идентификатор родительской строки:
	РодительскаяСтрока = СтрокаСписка.ПолучитьРодителя();
	Если РодительскаяСтрока <> Неопределено Тогда
		ЭлементРаздела.ИДСтрокиЭлемента = СтрокаСписка.ПолучитьИдентификатор();
		ЭлементРаздела.СсылкаНаРодителя = РодительскаяСтрока.Ссылка;
	КонецЕсли;
	
	// И наконец, запоминаем ИД самой строки:
	ЭлементРаздела.ИДСтрокиЭлемента = СтрокаСписка.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуСпискаИзСоответствия(КоллекцияФормы, СоответствиеСтрок, Ссылка, УзелДерева, Родитель, УдалятьНеверныеСссылкиИзСоответствия = Истина)

	
	// Получаем из соответствия значение по ссылке на элемент:
	СсылкаПоиска = ?(ЗначениеЗаполнено(Ссылка), Ссылка, "Пусто");
	ЭлементСссылки = СоответствиеСтрок.Получить(СсылкаПоиска);
	Если ЭлементСссылки <> Неопределено Тогда
		
		// Получаем из подчиненного соответствия значение по номеру раздела:
		НомерРаздела   = УзелДерева.НомерРаздела;
		ЭлементРаздела = ЭлементСссылки.Получить(НомерРаздела);
		Если ЭлементРаздела <> Неопределено Тогда
			
			// Элемент раздела - это Структура("СсылкаНаРодителя, ИДСтрокиРодителя, ИДСтрокиЭлемента"), 
			//	в которой нужно проверить соответствие прежнего родителя новому:
			ИскомаяСтрока = КоллекцияФормы.НайтиПоИдентификатору(ЭлементРаздела.ИДСтрокиЭлемента);
			ИДУзлаРодителя = УзелДерева.ПолучитьИдентификатор();
			Если ЭлементРаздела.СсылкаНаРодителя = Родитель И ЭлементРаздела.ИДСтрокиРодителя = ИДУзлаРодителя Тогда
				Возврат ИскомаяСтрока;
			Иначе
				// Если родитель элемента изменился, удалим из коллекции старую строку
				Если УдалятьНеверныеСссылкиИзСоответствия = Истина И ИскомаяСтрока <> Неопределено Тогда
					ПрежняяРодительскаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
					Если ПрежняяРодительскаяСтрока = Неопределено Тогда
						КоллекцияФормы.ПолучитьЭлементы().Удалить(ИскомаяСтрока);
					Иначе
						ПрежняяРодительскаяСтрока.ПолучитьЭлементы().Удалить(ИскомаяСтрока);
					КонецЕсли;
					ЭлементСссылки.Удалить(НомерРаздела);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 

	// Возвращаем Неопределено если в соответствии не найдена ссылка, или если у нее изменился родитель
	Возврат Неопределено;
	
КонецФункции
 
&НаСервере
Функция НайтиСтрокуСпискаВСоответствииПоСсылке(КоллекцияФормы, СоответствиеСтрок, Ссылка, НомерРаздела)

	// Получаем из соответствия значение по ссылке на элемент:
	СсылкаПоиска = ?(ЗначениеЗаполнено(Ссылка), Ссылка, "Пусто");
	ЭлементСссылки = СоответствиеСтрок.Получить(СсылкаПоиска);
	Если ЭлементСссылки <> Неопределено Тогда
		
		// Получаем из подчиненного соответствия значение по номеру раздела:
		ЭлементРаздела = ЭлементСссылки.Получить(НомерРаздела);
		Если ЭлементРаздела <> Неопределено Тогда
			Возврат ЭлементРаздела.ИДСтрокиЭлемента;
		КонецЕсли; 
		
	КонецЕсли; 

	Возврат Неопределено;
	
КонецФункции
 
&НаСервере
Функция ИзменитьПометкуУдаленияОбъекта(Ссылка)

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ОбъектСссылки = Ссылка.ПолучитьОбъект();
	ОбъектСссылки.УстановитьПометкуУдаления(НЕ Ссылка.ПометкаУдаления, Истина);
	
	ОбновитьСписокОбъектовСтатейСервер(Ссылка);
	
	Возврат ОбъектСссылки.ПометкаУдаления;

КонецФункции


// Обслуживание списка операций

&НаСервере
Процедура УстановитьОтборСпискаОпераций()

	Если Отбор_ИспользоватьРазделУчета Тогда
		Если Отбор_НомерРаздела = 1 Тогда
			ТекстОтбора = НСтр("ru = 'Раздел учета: <Деньги>'") + ", " + 
				?(Отбор_ИспользоватьОбъектУчета, НСтр("ru='кошелек'") + ": <" + Отбор_ОбъектУчета + ">", НСтр("ru='все кошельки'"));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета",              ПланыСчетов.РазделыУчета.Деньги);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки", "");
		ИначеЕсли Отбор_НомерРаздела = 2 Тогда
			ТекстОтбора = НСтр("ru = 'Раздел учета: <Кредитные карты>'") + ", " + 
				?(Отбор_ИспользоватьОбъектУчета, НСтр("ru='кошелек: <'") + Отбор_ОбъектУчета + ">", НСтр("ru='все кошельки'"));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета",              ПланыСчетов.РазделыУчета.Деньги);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки", "");
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки", Истина);
		ИначеЕсли Отбор_НомерРаздела = 3 Тогда
			ТекстОтбора = НСтр("ru = 'Раздел учета: <Имущество>'") + ", " + 
				?(Отбор_ИспользоватьОбъектУчета, НСтр("ru='объект имущества'") + ": <" + Отбор_ОбъектУчета + ">", НСтр("ru='все объекты имущества'"));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета",              ПланыСчетов.РазделыУчета.Имущество);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки",  Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки", Ложь);
		ИначеЕсли Отбор_НомерРаздела = 4 Тогда
			ТекстОтбора = НСтр("ru = 'Раздел учета: <Нам должны>'") + ", " + 
				?(Отбор_ИспользоватьОбъектУчета, НСтр("ru='долг: <'") + Отбор_ОбъектУчета + ">", НСтр("ru='все долги'"));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета",              ПланыСчетов.РазделыУчета.Долги);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки",  Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки", ?(ЗначениеЗаполнено(Отбор_ОбъектУчета), Отбор_ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов, ""));
		ИначеЕсли Отбор_НомерРаздела = 5 Тогда
			ТекстОтбора = НСтр("ru = 'Раздел учета: <Мы должны>'") + ", " + 
				?(Отбор_ИспользоватьОбъектУчета, НСтр("ru='долг: <'") + Отбор_ОбъектУчета + ">", НСтр("ru='все долги'"));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета",              ПланыСчетов.РазделыУчета.Долги);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки",  ?(ЗначениеЗаполнено(Отбор_ОбъектУчета), Отбор_ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов, ""));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки", Истина);
		ИначеЕсли Отбор_НомерРаздела = 6 Тогда
			ТекстОтбора = НСтр("ru = 'Раздел учета: <Доходы и расходы>'") + ", " + 
				?(Отбор_ИспользоватьОбъектУчета, НСтр("ru='статья: <'") + Отбор_ОбъектУчета + ">", НСтр("ru='все статьи доходов'"));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета",              ПланыСчетов.РазделыУчета.Капитал);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки", Ложь);
		ИначеЕсли Отбор_НомерРаздела = 7 Тогда
			ТекстОтбора = НСтр("ru = 'Раздел учета: <Доходы и расходы>'") + ", " + 
				?(Отбор_ИспользоватьОбъектУчета, НСтр("ru='статья: <'") + Отбор_ОбъектУчета + ">", НСтр("ru='все статьи расходов'"));
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета",              ПланыСчетов.РазделыУчета.Капитал);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки", Истина);
		КонецЕсли;
	Иначе
		ТекстОтбора = НСтр("ru = 'Не установлен'");
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазделУчета", "");
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки",  Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки",  Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "ПредметУчета",  ?(Отбор_ИспользоватьОбъектУчета, Отбор_ОбъектУчета, "")); 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "ВалютаОтчета",  ВалютаУчета);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "БазоваяВалюта", ВалютаУчета);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "Дата1",         Период.ДатаНачала);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОпераций, "Дата2",         ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецГода(ТекущаяДатаСеанса())));
	
	ДоступностьКнопокОчисткиОтборов = (Отбор_НомерРаздела <> 0);
	Элементы.СписокОбъектовОтборОчистить.Доступность = ДоступностьКнопокОчисткиОтборов;
	Элементы.СписокОбъектовОтборОчистить1.Доступность = ДоступностьКнопокОчисткиОтборов;
	Элементы.СписокОбъектовОтборОчистить2.Доступность = ДоступностьКнопокОчисткиОтборов;
	Элементы.СписокОбъектовОтборОчистить3.Доступность = ДоступностьКнопокОчисткиОтборов;
	
	
	ОбновитьИтогиСпискаОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиСпискаОпераций()
	
	Запрос =  Новый Запрос;
	Запрос.УстановитьПараметр("Дата1",         ПараметрДинамическогоСписка(СписокОпераций, "Дата1").Значение);
	Запрос.УстановитьПараметр("Дата2",         ПараметрДинамическогоСписка(СписокОпераций, "Дата2").Значение);
	Запрос.УстановитьПараметр("ВалютаОтчета",  ПараметрДинамическогоСписка(СписокОпераций, "ВалютаОтчета").Значение);
	Запрос.УстановитьПараметр("БазоваяВалюта", ПараметрДинамическогоСписка(СписокОпераций, "БазоваяВалюта").Значение);
	Запрос.УстановитьПараметр("РазделУчета",   ПараметрДинамическогоСписка(СписокОпераций, "РазделУчета").Значение);
	Запрос.УстановитьПараметр("ПредметУчета",  ПараметрДинамическогоСписка(СписокОпераций, "ПредметУчета").Значение);
	Запрос.УстановитьПараметр("РазрешеныПоложительныеОстатки", ПараметрДинамическогоСписка(СписокОпераций, "РазрешеныПоложительныеОстатки").Значение); 
	Запрос.УстановитьПараметр("РазрешеныОтрицательныеОстатки", ПараметрДинамическогоСписка(СписокОпераций, "РазрешеныОтрицательныеОстатки").Значение); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.БазоваяВалюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЖурналОперацийОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютОборота.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсыВалютОборота.Кратность, 1))) КАК ФинансовоеСостояние
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(&Дата2, Счет <> ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Капитал), , ЕСТЬNULL(Субконто1.Активность, ЛОЖЬ) = ИСТИНА) КАК ЖурналОперацийОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОборота
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютыОтчета
	|			ПО КурсыВалютОборота.БазоваяВалюта = КурсВалютыОтчета.БазоваяВалюта
	|				И (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|		ПО ЖурналОперацийОстатки.Валюта = КурсыВалютОборота.Валюта	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Обороты.Поступление КАК ЧИСЛО(15, 2)) КАК Поступление,
	|	ВЫРАЗИТЬ(Обороты.Списание КАК ЧИСЛО(15, 2)) КАК Списание
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(СписокОпераций.СуммаПоступленияВВалютеОтчета) КАК Поступление,
	|		СУММА(СписокОпераций.СуммаСписанияВВалютеОтчета) КАК Списание
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ОбъектыОпераций.Операция КАК Операция,
	|			ОбъектыОпераций.РазделУчета КАК РазделУчета,
	|			ОбъектыОпераций.ПредметУчета КАК ПредметУчета,
	|			ВЫБОР
	|				КОГДА ОбъектыОпераций.ПредметУчета ССЫЛКА Справочник.СтатьиРасходов
	|					ТОГДА ЛОЖЬ
	|				КОГДА ВЫРАЗИТЬ(ОбъектыОпераций.ПредметУчета КАК Справочник.КошелькиИСчета).ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ВЫРАЗИТЬ(ОбъектыОпераций.ПредметУчета КАК Справочник.Долги).ИспользоватьДляУчетаВыданныхДолгов = ЛОЖЬ
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ КАК РазрешеныПоложительныеОстатки,
	|			ВЫБОР
	|				КОГДА ОбъектыОпераций.ПредметУчета ССЫЛКА Справочник.СтатьиРасходов
	|					ТОГДА ИСТИНА
	|				КОГДА ВЫРАЗИТЬ(ОбъектыОпераций.ПредметУчета КАК Справочник.КошелькиИСчета).ТипСчета В (ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная), ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная))
	|					ТОГДА ИСТИНА
	|				КОГДА ВЫРАЗИТЬ(ОбъектыОпераций.ПредметУчета КАК Справочник.Долги).ИспользоватьДляУчетаВзятыхДолгов = ИСТИНА
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК РазрешеныОтрицательныеОстатки,
	|			ОбъектыОпераций.Валюта КАК Валюта,
	|			ОбъектыОпераций.СуммаПоступления КАК СуммаПоступленияВИсходнойВалюте,
	|			ОбъектыОпераций.СуммаПоступления * ЕСТЬNULL(КурсВалютыОперации.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсВалютыОперации.Кратность, 1)) КАК СуммаПоступленияВВалютеОтчета,
	|			ОбъектыОпераций.СуммаСписания КАК СуммаСписанияВИсходнойВалюте,
	|			ОбъектыОпераций.СуммаСписания * ЕСТЬNULL(КурсВалютыОперации.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсВалютыОперации.Кратность, 1)) КАК СуммаСписанияВВалютеОтчета
	|		ИЗ
	|			РегистрСведений.ОбъектыОпераций КАК ОбъектыОпераций
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЖурналДокументов.ОбщийЖурналДокументов КАК ОбщийЖурналДокументов
	|				ПО ОбъектыОпераций.Операция = ОбщийЖурналДокументов.Ссылка
	|					И (ОбщийЖурналДокументов.Проведен)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыОтчета
	|				ПО (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыОперации
	|				ПО ОбъектыОпераций.Валюта = КурсВалютыОперации.Валюта
	|		ГДЕ
	|			ОбъектыОпераций.Дата МЕЖДУ &Дата1 И &Дата2
	|			И &РазделУчета <> """"
	|			И ОбъектыОпераций.РазделУчета В ИЕРАРХИИ(&РазделУчета)
	|			И (&ПредметУчета = """"
	|					ИЛИ ОбъектыОпераций.ПредметУчета В ИЕРАРХИИ (&ПредметУчета))
	|			И ОбъектыОпераций.ЭтоШаблон = ЛОЖЬ) КАК СписокОпераций
	|	ГДЕ
	|		(&РазрешеныПоложительныеОстатки = """"
	|				ИЛИ &РазрешеныПоложительныеОстатки = СписокОпераций.РазрешеныПоложительныеОстатки)
	|		И (&РазрешеныОтрицательныеОстатки = """"
	|				ИЛИ &РазрешеныОтрицательныеОстатки = СписокОпераций.РазрешеныОтрицательныеОстатки)
	|	
	|	ИМЕЮЩИЕ
	|		(СУММА(СписокОпераций.СуммаПоступленияВИсходнойВалюте) <> 0
	|			ИЛИ СУММА(СписокОпераций.СуммаСписанияВИсходнойВалюте) <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ЖурналОпераций.СуммаПоступления * ЕСТЬNULL(КурсВалютыПоступления.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсВалютыПоступления.Кратность, 1))),
	|		СУММА(ЖурналОпераций.СуммаСписания * ЕСТЬNULL(КурсВалютыСписания.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсВалютыСписания.Кратность, 1)))
	|	ИЗ
	|		ЖурналДокументов.ОбщийЖурналДокументов КАК ЖурналОпераций
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыОтчета
	|			ПО (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыПоступления
	|			ПО ЖурналОпераций.ВалютаПоступления = КурсВалютыПоступления.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыСписания
	|			ПО ЖурналОпераций.ВалютаСписания = КурсВалютыСписания.Валюта
	|	ГДЕ
	|		ЖурналОпераций.Дата МЕЖДУ &Дата1 И &Дата2
	|		И ЖурналОпераций.ЭтоШаблон = ЛОЖЬ
	|		И ЖурналОпераций.Проведен
	|		И &РазделУчета = """") КАК Обороты";
	
	ПакетРезультатов = запрос.ВыполнитьПакет();
	Выборка = ПакетРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ВсегоФинансовоеСостояние = ?(ЗначениеЗаполнено(Выборка.ФинансовоеСостояние), Выборка.ФинансовоеСостояние, 0);
	Иначе
		ВсегоФинансовоеСостояние = 0;
	КонецЕсли; 
	Элементы.СписокОбъектовОстатокВВалюте.ТекстПодвала   = Формат(ВсегоФинансовоеСостояние, "ЧДЦ=2; ЧН=0");
	Элементы.СписокОбъектовПредставление.ТекстПодвала    = НСтр("ru = 'Финансовое состояние на '") + Формат(Период.ДатаОкончания, "ДФ=дд.ММ.гггг") ;
	Если ВсегоФинансовоеСостояние >= 0 Тогда
		Элементы.СписокОбъектовОстатокВВалюте.ЦветТекстаПодвала = Новый Цвет();
	Иначе
		Элементы.СписокОбъектовОстатокВВалюте.ЦветТекстаПодвала = ЦветаСтиля.ЦветОтрицательногоЧисла;
	КонецЕсли; 

	Выборка = ПакетРезультатов[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ВсегоПоступление = ?(ЗначениеЗаполнено(Выборка.Поступление), Выборка.Поступление, 0);
		ВсегоСписание    = ?(ЗначениеЗаполнено(Выборка.Списание), Выборка.Списание, 0);
	Иначе
		ВсегоПоступление = 0;
		ВсегоСписание    = 0;
	КонецЕсли; 
	Элементы.СписокОперацийПоступление.ТекстПодвала       = Формат(ВсегоПоступление, "ЧДЦ=2; ЧН=0");
	Элементы.СписокОперацийСписание.ТекстПодвала          = Формат(ВсегоСписание, "ЧДЦ=2; ЧН=0");
	Если Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод	Тогда
		ТекстПериода = НСтр("ru = 'Всего за период '") + НРег(Период);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.ПрошлаяНеделя Тогда
		ТекстПериода = НСтр("ru = 'Всего за прошлую неделю'");
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СледующаяНеделя Тогда
		ТекстПериода = НСтр("ru = 'Всего за следующую неделю'");
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.ЭтаНеделя Тогда
		ТекстПериода = НСтр("ru = 'Всего за эту неделю'");
	Иначе
		ТекстПериода = НСтр("ru = 'Всего за '") + НРег(Период);
	КонецЕсли; 
	ТекстПодвала = ТекстПериода + " " 
		+ ?(Отбор_ИспользоватьРазделУчета, НСтр("ru = 'с учетом отбора'"), НСтр("ru = 'по всем разделам учета'")) + ":";
	Элементы.СписокОперацийОписаниеОперации.ТекстПодвала = ТекстПодвала;
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьОтборОперацийПоОбъекту()

	НомерРаздела = 0;
	СсылкаНаОбъект = ОпределитьОбъектДляОтчета(НомерРаздела, Неопределено);
	Если НомерРаздела = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор_ИспользоватьРазделУчета = Истина;
	Отбор_НомерРаздела = НомерРаздела;
	Отбор_ОбъектУчета = СсылкаНаОбъект;
	Отбор_ИспользоватьОбъектУчета = ЗначениеЗаполнено(Отбор_ОбъектУчета);
	УстановитьОтборСпискаОпераций();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрДинамическогоСписка(Список, ИмяПараметра)
	
	Возврат Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
КонецФункции
 

// Обслуживание списка объектов

&НаСервере
Функция ПолучитьЗапросСпискаОбъектов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаОтчета", ВалютаОтчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.БазоваяВалюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &ВалютаУчета) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЖурналОперацийОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|		ИНАЧЕ ЖурналОперацийОстатки.Счет
	|	КОНЕЦ КАК Счет,
	|	ЖурналОперацийОстатки.Счет.Родитель КАК СчетРодитель,
	|	ЖурналОперацийОстатки.Субконто1 КАК Субконто1,
	|	ЖурналОперацийОстатки.Валюта,
	|	СУММА(ЖурналОперацийОстатки.ВалютнаяСуммаОстаток) КАК ОстатокВВалюте,
	|	СУММА(ВЫРАЗИТЬ(ЖурналОперацийОстатки.ВалютнаяСуммаОстаток * ЕСТЬNULL(КурсыВалютОборота.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсыВалютОборота.Кратность, 1)) КАК ЧИСЛО(14, 2))) КАК Остаток
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(&Дата2, , , ) КАК ЖурналОперацийОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОборота
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютыОтчета
	|			ПО КурсыВалютОборота.БазоваяВалюта = КурсВалютыОтчета.БазоваяВалюта
	|				И (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|		ПО ЖурналОперацийОстатки.Валюта = КурсыВалютОборота.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОперацийОстатки.Счет.Родитель,
	|	ВЫБОР
	|		КОГДА ЖурналОперацийОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)
	|		ИНАЧЕ ЖурналОперацийОстатки.Счет
	|	КОНЕЦ,
	|	ЖурналОперацийОстатки.Субконто1,
	|	ЖурналОперацийОстатки.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Субконто1,
	|	Счет,
	|	СчетРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги) КАК РазделУчета,
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.ЭтоГруппа,
	|	Спр.ПометкаУдаления,
	|	ИСТИНА КАК РазрешеныПоложительныеОстатки,
	|	ВЫБОР
	|		КОГДА Спр.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеныОтрицательныеОстатки,
	|	ЕСТЬNULL(Остатки.Валюта, Спр.Валюта) КАК Валюта,
	|	Спр.Валюта КАК КоличествоВалют,
	|	ВЫБОР
	|		КОГДА Спр.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
	|				И ЕСТЬNULL(Остатки.Остаток, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.Остаток, 0)
	|	КОНЕЦ КАК Остаток,
	|	ВЫБОР
	|		КОГДА Спр.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
	|				И ЕСТЬNULL(Остатки.Остаток, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.ОстатокВВалюте, 0)
	|	КОНЕЦ КАК ОстатокВВалюте,
	|	Спр.Родитель
	|ИЗ
	|	Справочник.КошелькиИСчета КАК Спр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Спр.Ссылка = Остатки.Субконто1
	|ГДЕ
	|	Спр.Активность
	|	И (Спр.ЭтоГруппа
	|			ИЛИ Спр.ТипСчета <> ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.ЭтоГруппа УБЫВ,
	|	Спр.Наименование
	|ИТОГИ
	|	МАКСИМУМ(РазрешеныПоложительныеОстатки),
	|	МАКСИМУМ(РазрешеныОтрицательныеОстатки),
	|	МАКСИМУМ(Валюта),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВалют),
	|	СУММА(Остаток),
	|	СУММА(ОстатокВВалюте)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги) КАК РазделУчета,
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.ЭтоГруппа,
	|	Спр.ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА Спр.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеныПоложительныеОстатки,
	|	ИСТИНА КАК РазрешеныОтрицательныеОстатки,
	|	ЕСТЬNULL(Остатки.Валюта, Спр.Валюта) КАК Валюта,
	|	Спр.Валюта КАК КоличествоВалют,
	|	ВЫБОР
	|		КОГДА Спр.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
	|				И ЕСТЬNULL(Остатки.Остаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.Остаток, 0)
	|	КОНЕЦ КАК Остаток,
	|	ВЫБОР
	|		КОГДА Спр.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная)
	|				И ЕСТЬNULL(Остатки.Остаток, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.ОстатокВВалюте, 0)
	|	КОНЕЦ КАК ОстатокВВалюте,
	|	Спр.Родитель
	|ИЗ
	|	Справочник.КошелькиИСчета КАК Спр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Спр.Ссылка = Остатки.Субконто1
	|ГДЕ
	|	Спр.Активность
	|	И Спр.ТипСчета В (ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная), ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаУниверсальная))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.ЭтоГруппа,
	|	Спр.Наименование
	|ИТОГИ
	|	МАКСИМУМ(РазрешеныПоложительныеОстатки),
	|	МАКСИМУМ(РазрешеныОтрицательныеОстатки),
	|	МАКСИМУМ(Валюта),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВалют),
	|	СУММА(Остаток),
	|	СУММА(ОстатокВВалюте)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Имущество) КАК РазделУчета,
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.ЭтоГруппа,
	|	Спр.ПометкаУдаления,
	|	ИСТИНА КАК РазрешеныПоложительныеОстатки,
	|	ЛОЖЬ КАК РазрешеныОтрицательныеОстатки,
	|	ЕСТЬNULL(Остатки.Валюта, Спр.Валюта) КАК Валюта,
	|	Спр.Валюта КАК КоличествоВалют,
	|	ЕСТЬNULL(Остатки.Остаток, 0) КАК Остаток,
	|	ЕСТЬNULL(Остатки.ОстатокВВалюте, 0) КАК ОстатокВВалюте,
	|	Спр.Родитель
	|ИЗ
	|	Справочник.Имущество КАК Спр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Спр.Ссылка = Остатки.Субконто1
	|ГДЕ
	|	Спр.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.ЭтоГруппа,
	|	Спр.Наименование
	|ИТОГИ
	|	МАКСИМУМ(РазрешеныПоложительныеОстатки),
	|	МАКСИМУМ(РазрешеныОтрицательныеОстатки),
	|	МАКСИМУМ(Валюта),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВалют),
	|	СУММА(Остаток),
	|	СУММА(ОстатокВВалюте)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги) КАК РазделУчета,
	|	Спр.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	Спр.ПометкаУдаления,
	|	ИСТИНА КАК РазрешеныПоложительныеОстатки,
	|	Спр.ИспользоватьДляУчетаВзятыхДолгов КАК РазрешеныОтрицательныеОстатки,
	|	ВЫБОР
	|		КОГДА Спр.ИспользоватьДляУчетаВзятыхДолгов
	|				И ЕСТЬNULL(Остатки.ОстатокВВалюте, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.ОстатокВВалюте, 0)
	|	КОНЕЦ КАК ОстатокВВалюте,
	|	ЕСТЬNULL(Остатки.Валюта, Спр.Валюта) КАК Валюта,
	|	ВЫБОР
	|		КОГДА Спр.ИспользоватьДляУчетаВзятыхДолгов
	|				И ЕСТЬNULL(Остатки.ОстатокВВалюте, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.Остаток, 0)
	|	КОНЕЦ КАК Остаток,
	|	Спр.Валюта КАК КоличествоВалют,
	|	НЕОПРЕДЕЛЕНО КАК Родитель
	|ИЗ
	|	Справочник.Долги КАК Спр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Спр.Ссылка = Остатки.Субконто1
	|ГДЕ
	|	Спр.Активность
	|	И Спр.ИспользоватьДляУчетаВыданныхДолгов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Наименование
	|ИТОГИ
	|	МАКСИМУМ(РазрешеныПоложительныеОстатки),
	|	МАКСИМУМ(РазрешеныОтрицательныеОстатки),
	|	СУММА(ОстатокВВалюте),
	|	МАКСИМУМ(Валюта),
	|	СУММА(Остаток),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВалют)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги) КАК РазделУчета,
	|	Спр.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	Спр.ПометкаУдаления,
	|	Спр.ИспользоватьДляУчетаВыданныхДолгов КАК РазрешеныПоложительныеОстатки,
	|	ИСТИНА КАК РазрешеныОтрицательныеОстатки,
	|	ВЫБОР
	|		КОГДА Спр.ИспользоватьДляУчетаВыданныхДолгов
	|				И ЕСТЬNULL(Остатки.ОстатокВВалюте, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.ОстатокВВалюте, 0)
	|	КОНЕЦ КАК ОстатокВВалюте,
	|	ЕСТЬNULL(Остатки.Валюта, Спр.Валюта) КАК Валюта,
	|	ВЫБОР
	|		КОГДА Спр.ИспользоватьДляУчетаВыданныхДолгов
	|				И ЕСТЬNULL(Остатки.ОстатокВВалюте, 0) > 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Остатки.Остаток, 0)
	|	КОНЕЦ КАК Остаток,
	|	Спр.Валюта КАК КоличествоВалют,
	|	НЕОПРЕДЕЛЕНО КАК Родитель
	|ИЗ
	|	Справочник.Долги КАК Спр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО Спр.Ссылка = Остатки.Субконто1
	|ГДЕ
	|	Спр.Активность
	|	И Спр.ИспользоватьДляУчетаВзятыхДолгов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Наименование
	|ИТОГИ
	|	МАКСИМУМ(РазрешеныПоложительныеОстатки),
	|	МАКСИМУМ(РазрешеныОтрицательныеОстатки),
	|	СУММА(ОстатокВВалюте),
	|	МАКСИМУМ(Валюта),
	|	СУММА(Остаток),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВалют)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Субконто1,
	|	Остатки.Валюта,
	|	Остатки.ОстатокВВалюте,
	|	Остатки.Остаток
	|ИЗ
	|	Остатки КАК Остатки";
	

	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции
 
&НаСервере
Процедура ОбновитьСписокОбъектов(СсылкаИзмененногоЭлемента)

	ПакетЗапроса = ПолучитьЗапросСпискаОбъектов();
	
	//Запоминаем текущую строку или ссылку на объект:
	НомерРазделаТекущегоЗначения = 0;
	Если Элементы.СписокОбъектов.ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрокаСсылка    = Неопределено;
	Иначе
		ДанныеСписка = СписокОбъектов.НайтиПоИдентификатору(Элементы.СписокОбъектов.ТекущаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСписка.Ссылка) Тогда
			ТекущаяСтрокаСсылка = ДанныеСписка.Ссылка;
			УзелТекущегоЗначения = ДанныеСписка.ПолучитьРодителя();
			Пока УзелТекущегоЗначения.ПолучитьРодителя() <> Неопределено Цикл
				УзелТекущегоЗначения = УзелТекущегоЗначения.ПолучитьРодителя();
			КонецЦикла;
			НомерРазделаТекущегоЗначения = ?(УзелТекущегоЗначения = Неопределено, 0, УзелТекущегоЗначения.НомерРаздела);
		Иначе
			ТекущаяСтрокаСсылка = Элементы.СписокОбъектов.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	 
	
	Если ЗначениеЗаполнено(АдресСоответствияОбъектов) Тогда
		СоответствиеСтрок = ПолучитьИзВременногоХранилища(АдресСоответствияОбъектов);
		Если СоответствиеСтрок = Неопределено Тогда
			СоответствиеСтрок = Новый Соответствие;
			СписокОбъектов.ПолучитьЭлементы().Очистить();
		КонецЕсли; 
	Иначе
		СоответствиеСтрок = Новый Соответствие;
	КонецЕсли; 
	ВременноеСоответствиеСтрок = Новый Соответствие;
	
	ЭлементыСписка = СписокОбъектов.ПолучитьЭлементы();
	Если ЭлементыСписка.Количество() = 0 Тогда
		
		Данные = Новый Структура("ТипСтроки,ИмяСправочника,Представление,НомерРаздела,Ссылка,Родитель", 
			"РазделУчета", "КошелькиИСчета", НСтр("ru='Деньги'"), 1, "", "");
		СтрокаСписка = ДобавитьСтрокуВСписок(СписокОбъектов, Данные, СоответствиеСтрок);
		СтрокаСписка.КартинкаСтроки                   = БиблиотекаКартинок.Кошелек16;
		СтрокаСписка.РазрешеныПоложительныеОстатки    = Истина;
		СтрокаСписка.РазрешеныОтрицательныеОстатки    = Ложь;
		СтрокаСписка.Валюта                           = ВалютаОтчета;
		ИДСтроки = СтрокаСписка.ПолучитьИдентификатор();
		ВременноеСоответствиеСтрок.Вставить(ИДСтроки, Истина);
		
		Данные = Новый Структура("ТипСтроки,ИмяСправочника,Представление,НомерРаздела,Ссылка,Родитель", 
			"РазделУчета", "КошелькиИСчета", НСтр("ru='Кредитные карты'"), 2, "", "");
		СтрокаСписка = ДобавитьСтрокуВСписок(СписокОбъектов, Данные, СоответствиеСтрок);
		СтрокаСписка.КартинкаСтроки                   = БиблиотекаКартинок.БанковскаяКартаСиняя16;
		СтрокаСписка.РазрешеныПоложительныеОстатки    = Ложь;
		СтрокаСписка.РазрешеныОтрицательныеОстатки    = Истина;
		СтрокаСписка.Валюта                           = ВалютаОтчета;
		ИДСтроки = СтрокаСписка.ПолучитьИдентификатор();
		ВременноеСоответствиеСтрок.Вставить(ИДСтроки, Истина);
		
		Данные = Новый Структура("ТипСтроки,ИмяСправочника,Представление,НомерРаздела,Ссылка,Родитель", 
			"РазделУчета", "Имущество", НСтр("ru='Имущество'"), 3, "", "");
		СтрокаСписка = ДобавитьСтрокуВСписок(СписокОбъектов, Данные, СоответствиеСтрок);
		СтрокаСписка.КартинкаСтроки                   = БиблиотекаКартинок.Имущество16;
		СтрокаСписка.РазрешеныПоложительныеОстатки    = Истина;
		СтрокаСписка.РазрешеныОтрицательныеОстатки    = Ложь;
		СтрокаСписка.Валюта                           = ВалютаОтчета;
		ИДСтроки = СтрокаСписка.ПолучитьИдентификатор();
		ВременноеСоответствиеСтрок.Вставить(ИДСтроки, Истина);
		
		Данные = Новый Структура("ТипСтроки,ИмяСправочника,Представление,НомерРаздела,Ссылка,Родитель", 
			"РазделУчета", "Долги", НСтр("ru='Нам должны'"), 4, "", "");
		СтрокаСписка = ДобавитьСтрокуВСписок(СписокОбъектов, Данные, СоответствиеСтрок);
		СтрокаСписка.КартинкаСтроки                   = БиблиотекаКартинок.ВыданныйЗаем16;
		СтрокаСписка.РазрешеныПоложительныеОстатки    = Истина;
		СтрокаСписка.РазрешеныОтрицательныеОстатки    = Ложь;
		СтрокаСписка.Валюта                           = ВалютаОтчета;
		ИДСтроки = СтрокаСписка.ПолучитьИдентификатор();
		ВременноеСоответствиеСтрок.Вставить(ИДСтроки, Истина);
		
		Данные = Новый Структура("ТипСтроки,ИмяСправочника,Представление,НомерРаздела,Ссылка,Родитель", 
			"РазделУчета", "Долги", НСтр("ru='Мы должны'"), 5, "", "");
		СтрокаСписка = ДобавитьСтрокуВСписок(СписокОбъектов, Данные, СоответствиеСтрок);
		СтрокаСписка.КартинкаСтроки                   = БиблиотекаКартинок.ПолученныйКредит16;
		СтрокаСписка.РазрешеныПоложительныеОстатки    = Ложь;
		СтрокаСписка.РазрешеныОтрицательныеОстатки    = Истина;
		СтрокаСписка.Валюта                           = ВалютаОтчета;
		ИДСтроки = СтрокаСписка.ПолучитьИдентификатор();
		ВременноеСоответствиеСтрок.Вставить(ИДСтроки, Истина);
		
	Иначе
		ВременноеСоответствиеСтрок.Вставить(ЭлементыСписка[0].ПолучитьИдентификатор(), Истина);
		ВременноеСоответствиеСтрок.Вставить(ЭлементыСписка[1].ПолучитьИдентификатор(), Истина);
		ВременноеСоответствиеСтрок.Вставить(ЭлементыСписка[2].ПолучитьИдентификатор(), Истина);
		ВременноеСоответствиеСтрок.Вставить(ЭлементыСписка[3].ПолучитьИдентификатор(), Истина);
		ВременноеСоответствиеСтрок.Вставить(ЭлементыСписка[4].ПолучитьИдентификатор(), Истина);
	КонецЕсли; 
	
	Для Счетчик = 2 По 6 Цикл
		
		ПорядокОбхода = ?(Счетчик < 5, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка = ПакетЗапроса[Счетчик].Выбрать(ПорядокОбхода, "Ссылка");
		УзелДерева = ЭлементыСписка[Счетчик - 2];
		
		ЗаполнитьДеревоОбъектовВыборкой(УзелДерева, Выборка, ПорядокОбхода, СоответствиеСтрок, ВременноеСоответствиеСтрок, СсылкаИзмененногоЭлемента);
		
		Выборка = ПакетЗапроса[Счетчик].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		Если Выборка.Следующий() Тогда
			УзелДерева.ОстатокВВалюте = Выборка.Остаток;
		КонецЕсли; 
		
	КонецЦикла; 

	УдалитьСтрокиЛишнихОбъектов(СписокОбъектов, СоответствиеСтрок, ВременноеСоответствиеСтрок);
	
	// Восстанавливаем текущую строку:
	Если ТипЗнч(ТекущаяСтрокаСсылка) = Тип("Число") Тогда
		Элементы.СписокОбъектов.ТекущаяСтрока = ТекущаяСтрокаСсылка;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрокаСсылка) Тогда
		Элементы.СписокОбъектов.ТекущаяСтрока = НайтиСтрокуСпискаВСоответствииПоСсылке(СписокОбъектов, СоответствиеСтрок, ТекущаяСтрокаСсылка, НомерРазделаТекущегоЗначения);
	КонецЕсли;
	 
	
	АдресСоответствияОбъектов = ПоместитьВоВременноеХранилище(СоответствиеСтрок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбъектовВыборкой(УзелДерева, Выборка, ПорядокОбхода, СоответствиеСтрок, ВременноеСоответствиеСтрок, СсылкаИзмененногоЭлемента)

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке И Выборка.Ссылка = УзелДерева.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка = NULL Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаОстатка = ПолучитьСтрокуСпискаПоВыборке(СписокОбъектов, УзелДерева, Выборка, СоответствиеСтрок);
		ВременноеСоответствиеСтрок.Вставить(СтрокаОстатка.ПолучитьИдентификатор(), Истина);
		
		ЗаполнитьДеревоОбъектовВыборкой(СтрокаОстатка, Выборка.Выбрать(ПорядокОбхода, "Ссылка"), ПорядокОбхода, СоответствиеСтрок, ВременноеСоответствиеСтрок, СсылкаИзмененногоЭлемента);
		
		Если ЗначениеЗаполнено(СсылкаИзмененногоЭлемента) И СтрокаОстатка.Ссылка = СсылкаИзмененногоЭлемента Тогда
			Элементы.СписокОбъектов.ТекущаяСтрока = СтрокаОстатка.ПолучитьИдентификатор();
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДиаграммуОбъектов()

	СтрокаДерева = Элементы.СписокОбъектов.ТекущиеДанные;
	
	Если СтрокаДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
		УзелДерева = СтрокаДерева.ПолучитьРодителя();
		Если УзелДерева = Неопределено Тогда 
			УзелДерева = СтрокаДерева;
		КонецЕсли;
	Иначе
		УзелДерева = СтрокаДерева;
	КонецЕсли;
	ОбъектСтроки = СтрокаДерева.Ссылка;
	КоличествоВГруппе = УзелДерева.ПолучитьЭлементы().Количество();
	
	Если УзелДерева.НомерРаздела = 1 ИЛИ УзелДерева.НомерРаздела = 2 Тогда
		Если ЗначениеЗаполнено(УзелДерева.Ссылка) Тогда
			ТекстГруппыДиаграммы = НСтр("ru = 'Остатки по кошелькам группы <'") + УзелДерева.Ссылка + ">";
		Иначе
			ТекстГруппыДиаграммы = НСтр("ru = 'Остатки по кошелькам верхнего уровня'") ;
		КонецЕсли; 
	ИначеЕсли УзелДерева.НомерРаздела = 3 Тогда
		Если ЗначениеЗаполнено(УзелДерева.Ссылка) Тогда
			ТекстГруппыДиаграммы = НСтр("ru = 'Остатки имущества группы <'") + УзелДерева.Ссылка + ">";
		Иначе
			ТекстГруппыДиаграммы = НСтр("ru = 'Остатки по имуществу верхнего уровня'") ;
		КонецЕсли; 
	ИначеЕсли УзелДерева.НомерРаздела = 4 Тогда
		ТекстГруппыДиаграммы = НСтр("ru = 'Остатки сумм, выданных в долг'");
	ИначеЕсли УзелДерева.НомерРаздела = 5 Тогда
		ТекстГруппыДиаграммы = НСтр("ru = 'Остатки сумм, взятых в долг'");
	КонецЕсли; 
	
	ДиаграммаИтогов.Обновление = Ложь;
	ДиаграммаИтогов.Очистить();
	
	ТочкаДиаграммы = ДиаграммаИтогов.УстановитьТочку("Остаток");
	
	Счетчик = 0;
	Для каждого СтрокаДанных Из УзелДерева.ПолучитьЭлементы() Цикл
		
		Счетчик = Счетчик + 1;
		СерияДиаграммы = ДиаграммаИтогов.УстановитьСерию(СтрокаДанных.Ссылка);
		СерияДиаграммы.Текст = "";
		ДиаграммаИтогов.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, 
				СтрокаДанных.ОстатокВВалютеОтчета, СтрокаДанных.Ссылка, 
				"" + СтрокаДанных.Ссылка + " (" + Формат(СтрокаДанных.ОстатокВВалюте, "ЧДЦ=2; ЧГ=3,0") + " " + СтрокаДанных.Валюта + " )");
		Если ЗначениеЗаполнено(ОбъектСтроки) И ОбъектСтроки = СтрокаДанных.Ссылка И КоличествоВГруппе > 2 Тогда
			СерияДиаграммы.Раздвигать = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	ДиаграммаИтогов.Обновление = Истина;

КонецПроцедуры



// Обслуживание списка статей

&НаСервере
Функция ПолучитьЗапросСпискаСтатей()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", Период.ДатаНачала);
	Запрос.УстановитьПараметр("Дата2", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаОтчета", ВалютаУчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.БазоваяВалюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата2, БазоваяВалюта = &ВалютаУчета) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статьи.Ссылка КАК Ссылка,
	|	Статьи.Предопределенный,
	|	Статьи.ПометкаУдаления,
	|	ЕСТЬNULL(Обороты.ВалютнаяСуммаОборотКт, 0) КАК СуммаВВалюте,
	|	ЕСТЬNULL(Обороты.Валюта, &ВалютаОтчета) КАК Валюта,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(Обороты.ВалютнаяСуммаОборотКт, 0) * ЕСТЬNULL(КурсыВалютОборота.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсыВалютОборота.Кратность, 1)) КАК ЧИСЛО(14, 2)) КАК Сумма,
	|	ЕСТЬNULL(Обороты.Валюта, &ВалютаОтчета) КАК КоличествоВалют,
	|	Статьи.Родитель
	|ИЗ
	|	Справочник.СтатьиДоходов КАК Статьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналОпераций.Обороты(&Дата1, &Дата2, Период, Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Капитал), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов), , , ) КАК Обороты
	|		ПО Статьи.Ссылка = Обороты.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОборота
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютыОтчета
	|			ПО КурсыВалютОборота.БазоваяВалюта = КурсВалютыОтчета.БазоваяВалюта
	|				И (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|		ПО (Обороты.Валюта = КурсыВалютОборота.Валюта)
	|ГДЕ
	|	Статьи.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статьи.Наименование
	|ИТОГИ
	|	СУММА(СуммаВВалюте),
	|	МАКСИМУМ(Валюта),
	|	СУММА(Сумма),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВалют)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статьи.Ссылка КАК Ссылка,
	|	Статьи.Предопределенный,
	|	Статьи.ПометкаУдаления,
	|	ЕСТЬNULL(Обороты.ВалютнаяСуммаОборотДт, 0) КАК СуммаВВалюте,
	|	ЕСТЬNULL(Обороты.Валюта, &ВалютаОтчета) КАК Валюта,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(Обороты.ВалютнаяСуммаОборотДт, 0) * ЕСТЬNULL(КурсыВалютОборота.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсыВалютОборота.Кратность, 1)) КАК ЧИСЛО(14, 2)) КАК Сумма,
	|	ЕСТЬNULL(Обороты.Валюта, &ВалютаОтчета) КАК КоличествоВалют,
	|	Статьи.Родитель
	|ИЗ
	|	Справочник.СтатьиРасходов КАК Статьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналОпераций.Обороты(&Дата1, &Дата2, Период, Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Капитал), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов), , , ) КАК Обороты
	|		ПО Статьи.Ссылка = Обороты.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОборота
	|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютыОтчета
	|			ПО КурсыВалютОборота.БазоваяВалюта = КурсВалютыОтчета.БазоваяВалюта
	|				И (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|		ПО (Обороты.Валюта = КурсыВалютОборота.Валюта)
	|ГДЕ
	|	Статьи.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статьи.Наименование
	|ИТОГИ
	|	СУММА(СуммаВВалюте),
	|	МАКСИМУМ(Валюта),
	|	СУММА(Сумма),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоВалют)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка ИЕРАРХИЯ";

	Возврат Запрос.ВыполнитьПакет();

КонецФункции
 
&НаСервере
Процедура ОбновитьСписокСтатей(СсылкаИзмененногоЭлемента)

	ПакетЗапроса = ПолучитьЗапросСпискаСтатей();
	
	//Запоминаем текущую строку или ссылку на объект:
	НомерРазделаТекущегоЗначения = 0;
	Если Элементы.СписокСтатей.ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрокаСсылка    = Неопределено;
	Иначе
		ДанныеСписка = СписокСтатей.НайтиПоИдентификатору(Элементы.СписокСтатей.ТекущаяСтрока);
		Если ЗначениеЗаполнено(ДанныеСписка.Ссылка) Тогда
			ТекущаяСтрокаСсылка = ДанныеСписка.Ссылка;
			УзелТекущегоЗначения = ДанныеСписка.ПолучитьРодителя();
			Пока УзелТекущегоЗначения.ПолучитьРодителя() <> Неопределено Цикл
				УзелТекущегоЗначения = УзелТекущегоЗначения.ПолучитьРодителя();
			КонецЦикла;
			НомерРазделаТекущегоЗначения = ?(УзелТекущегоЗначения = Неопределено, 0, УзелТекущегоЗначения.НомерРаздела);
		Иначе
			ТекущаяСтрокаСсылка = Элементы.СписокСтатей.ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСоответствияСтатей) Тогда
		СоответствиеСтрок = ПолучитьИзВременногоХранилища(АдресСоответствияСтатей);
		Если СоответствиеСтрок = Неопределено Тогда
			СоответствиеСтрок = Новый Соответствие;
			СписокСтатей.ПолучитьЭлементы().Очистить();
		КонецЕсли; 
	Иначе
		СоответствиеСтрок = Новый Соответствие;
	КонецЕсли; 
	ВременноеСоответствиеСтрок = Новый Соответствие;
	
	ЭлементыСписка = СписокСтатей.ПолучитьЭлементы();
	Если ЭлементыСписка.Количество() = 0 Тогда
		
		Данные = Новый Структура("ТипСтроки,ИмяСправочника,Представление,НомерРаздела,Ссылка,Родитель", 
			"РазделУчета", "СтатьиДоходов", НСтр("ru='Статьи доходов'"), 6, Неопределено, Неопределено);
		СтрокаСписка = ДобавитьСтрокуВСписок(СписокСтатей, Данные, СоответствиеСтрок);
		СтрокаСписка.КартинкаСтроки                   = БиблиотекаКартинок.Доходы16;
		СтрокаСписка.Валюта                           = ВалютаОтчета;
		ИДСтроки = СтрокаСписка.ПолучитьИдентификатор();
		ВременноеСоответствиеСтрок.Вставить(ИДСтроки, Истина);
		
		Данные = Новый Структура("ТипСтроки,ИмяСправочника,Представление,НомерРаздела,Ссылка,Родитель", 
			"СтатьиРасходов", "СтатьиДоходов", НСтр("ru='Статьи расходов'"), 7, Неопределено, Неопределено);
		СтрокаСписка = ДобавитьСтрокуВСписок(СписокСтатей, Данные, СоответствиеСтрок);
		СтрокаСписка.КартинкаСтроки                   = БиблиотекаКартинок.Расходы16;
		СтрокаСписка.Валюта                           = ВалютаОтчета;
		ИДСтроки = СтрокаСписка.ПолучитьИдентификатор();
		ВременноеСоответствиеСтрок.Вставить(ИДСтроки, Истина);
		
	Иначе
		ВременноеСоответствиеСтрок.Вставить(ЭлементыСписка[0].ПолучитьИдентификатор(), Истина);
		ВременноеСоответствиеСтрок.Вставить(ЭлементыСписка[1].ПолучитьИдентификатор(), Истина);
	КонецЕсли; 
	
	Для Счетчик = 1 По 2 Цикл
		
		ПорядокОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		Выборка = ПакетЗапроса[Счетчик].Выбрать(ПорядокОбхода, "Ссылка");
		УзелДерева = ЭлементыСписка[Счетчик - 1];
		
		ЗаполнитьДеревоСтатейВыборкой(УзелДерева, Выборка, ПорядокОбхода, СоответствиеСтрок, ВременноеСоответствиеСтрок, СсылкаИзмененногоЭлемента);
		
		Выборка = ПакетЗапроса[Счетчик].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
		Если Выборка.Следующий() Тогда
			УзелДерева.СуммаВВалюте = Выборка.Сумма;
		КонецЕсли; 
		
	КонецЦикла; 

	УдалитьСтрокиЛишнихОбъектов(СписокСтатей, СоответствиеСтрок, ВременноеСоответствиеСтрок);
	
	// Восстанавливаем текущую строку:
	Если ТипЗнч(ТекущаяСтрокаСсылка) = Тип("Число") Тогда
		Элементы.СписокСтатей.ТекущаяСтрока = ТекущаяСтрокаСсылка;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрокаСсылка) Тогда
		Элементы.СписокСтатей.ТекущаяСтрока = НайтиСтрокуСпискаВСоответствииПоСсылке(СписокСтатей, СоответствиеСтрок, ТекущаяСтрокаСсылка, НомерРазделаТекущегоЗначения);
	КонецЕсли;
	
	АдресСоответствияСтатей = ПоместитьВоВременноеХранилище(СоответствиеСтрок, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтатейВыборкой(УзелДерева, Выборка, ПорядокОбхода, СоответствиеСтрок, ВременноеСоответствиеСтрок, СсылкаИзмененногоЭлемента)

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке И Выборка.Ссылка = УзелДерева.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка = NULL Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаОстатка = ПолучитьСтрокуСпискаПоВыборке(СписокСтатей, УзелДерева, Выборка, СоответствиеСтрок);
		ВременноеСоответствиеСтрок.Вставить(СтрокаОстатка.ПолучитьИдентификатор(), Истина);
		
		ЗаполнитьДеревоСтатейВыборкой(СтрокаОстатка, Выборка.Выбрать(ПорядокОбхода, "Ссылка"), ПорядокОбхода, СоответствиеСтрок, ВременноеСоответствиеСтрок, СсылкаИзмененногоЭлемента);
		
		Если ЗначениеЗаполнено(СсылкаИзмененногоЭлемента) И СтрокаОстатка.Ссылка = СсылкаИзмененногоЭлемента Тогда
			Элементы.СписокСтатей.ТекущаяСтрока = СтрокаОстатка.ПолучитьИдентификатор();
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДиаграммуСтатей()

	СтрокаДерева = Элементы.СписокСтатей.ТекущиеДанные;
	
	Если СтрокаДерева = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) И НЕ СтрокаДерева.ЭтоГруппа Тогда
		УзелДерева = СтрокаДерева.ПолучитьРодителя();
		Если УзелДерева = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		УзелДерева = СтрокаДерева;
	КонецЕсли;
	ОбъектСтроки = СтрокаДерева.Ссылка;
	КоличествоВГруппе = УзелДерева.ПолучитьЭлементы().Количество();
	
	Если УзелДерева.НомерРаздела = 6 Тогда
		Если ЗначениеЗаполнено(УзелДерева.Ссылка) Тогда
			ТекстГруппыДиаграммы = НСтр("ru = 'Доходы по статьям уровня <'") + УзелДерева.Ссылка + ">"
		Иначе
			ТекстГруппыДиаграммы = НСтр("ru = 'Доходы по статьям верхнего уровня'") 
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(УзелДерева.Ссылка) Тогда
			ТекстГруппыДиаграммы = НСтр("ru = 'Расходы по статьям уровня <'") + УзелДерева.Ссылка + ">"
		Иначе
			ТекстГруппыДиаграммы = НСтр("ru = 'Расходы по статьям верхнего уровня'") 
		КонецЕсли; 
	КонецЕсли; 
	
	ДиаграммаИтогов.Обновление = Ложь;
	ДиаграммаИтогов.Очистить();
	
	ТочкаДиаграммы = ДиаграммаИтогов.УстановитьТочку("Остаток");
	
	Счетчик = 0;
	Для каждого СтрокаДанных Из УзелДерева.ПолучитьЭлементы() Цикл
		
		Счетчик = Счетчик + 1;
		СерияДиаграммы = ДиаграммаИтогов.УстановитьСерию(СтрокаДанных.Ссылка);
		ДиаграммаИтогов.УстановитьЗначение(ТочкаДиаграммы, СерияДиаграммы, 
				СтрокаДанных.СуммаВВалютеОтчета, СтрокаДанных.Ссылка, 
				"" + СтрокаДанных.Ссылка + " (" + Формат(СтрокаДанных.СуммаВВалюте, "ЧДЦ=2; ЧГ=3,0") + " " + СтрокаДанных.Валюта + " )");
		Если ЗначениеЗаполнено(ОбъектСтроки) И ОбъектСтроки = СтрокаДанных.Ссылка И КоличествоВГруппе > 2 Тогда
			СерияДиаграммы.Раздвигать = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	ДиаграммаИтогов.Обновление = Истина;

КонецПроцедуры


// Установка условного оформления

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
#Область ОформлениеСпискаОпераций

	СтандартныйШрифт = Элементы.СписокОпераций.Шрифт;
	
	// Пометка удаления операции
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОпераций"), // Имена полей
			Новый Структура("Шрифт", Новый Шрифт(СтандартныйШрифт, , , , , , Истина)) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОпераций.ПометкаУдаления");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	// неучтенные операции
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОпераций"), // Имена полей
			Новый Структура("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОпераций.Проведен");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	
	//Очистим валюту поступления при нулевой сумме поступления
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОперацийПоступление, СписокОперацийВалютаПоступления"), // Имена полей
			Новый Структура("Текст", "") // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОпераций.Поступление");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	//Очистим валюту списания при нулевой сумме списания
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОперацийСписание, СписокОперацийВалютаСписания"), // Имена полей
			Новый Структура("Текст", "") // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОпераций.Списание");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	
#КонецОбласти

#Область ОформлениеСпискаОбъектов

	СтандартныйШрифт = Элементы.СписокОбъектов.Шрифт;
	
	// Пометка удаления объекта
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОбъектов"), // Имена полей
			Новый Структура("Шрифт", Новый Шрифт(СтандартныйШрифт, , , , , , Истина)) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.ПометкаУдаления");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;

	// Отрицательное число красным
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОбъектовОстатокВВалюте"), // Имена полей
			Новый Структура("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.РазрешеныОтрицательныеОстатки");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.Остаток");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение  = 0;

	// Положительное число красным
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОбъектовОстатокВВалюте"), // Имена полей
			Новый Структура("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.РазрешеныПоложительныеОстатки");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.Остаток");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение  = 0;

	// Объект, по которому установлен отбор
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОбъектов"), // Имена полей
			Новый Структура("Шрифт", Новый Шрифт(СтандартныйШрифт, , , Истина, , , )) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Отбор_ИспользоватьОбъектУчета"); 
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.Ссылка");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.Ссылка");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор_ОбъектУчета"); 

	// Если отбор установлен только по разделу
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокОбъектов"), // Имена полей
			Новый Структура("Шрифт", Новый Шрифт(СтандартныйШрифт, , , Истина, , , )) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Отбор_ИспользоватьРазделУчета"); 
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Отбор_ИспользоватьОбъектУчета"); 
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.НомерРаздела");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор_НомерРаздела");  
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокОбъектов.ТипСтроки");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = "РазделУчета";  


#КонецОбласти
 
#Область ОформлениеСпискаСтатей

	СтандартныйШрифт = Элементы.СписокСтатей.Шрифт;
	
	// Пометка удаления объекта
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокСтатей"), // Имена полей
			Новый Структура("Шрифт", Новый Шрифт(СтандартныйШрифт, , , , , , Истина)) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокСтатей.ПометкаУдаления");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;

	// Объект, по которому установлен отбор
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокСтатей"), // Имена полей
			Новый Структура("Шрифт", Новый Шрифт(СтандартныйШрифт, , , Истина, , , )) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Отбор_ИспользоватьОбъектУчета"); 
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокСтатей.Ссылка");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокСтатей.Ссылка");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор_ОбъектУчета"); 

	// Если отбор установлен только по разделу
	Элемент = ДобавитьЭлементУсловногоОформления(УсловноеОформление, 
			Новый Структура("СписокСтатей"), // Имена полей
			Новый Структура("Шрифт", Новый Шрифт(СтандартныйШрифт, , , Истина, , , )) // структура параметров
			);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Отбор_ИспользоватьРазделУчета"); 
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Отбор_ИспользоватьОбъектУчета"); 
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокСтатей.НомерРаздела");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Новый ПолеКомпоновкиДанных("Отбор_НомерРаздела");  
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("СписокСтатей.ТипСтроки");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = "РазделУчета";  



#КонецОбласти
 

КонецПроцедуры

// Добавляет и возвращает элемент условного оформления
//	Условия оформления задаются для каждого элемента после его получения по месту вызова этой функции.
//
//Параметры:
//	Оформление - <УсловноеОформление>, в которое нужно добавить элемент
//	СтруктураПолей - <Структура>, ключем которой является имя поля. Если имя поля использует точку, то его нужно записать в значения этой структуры
//	СтруктураПолей - <Структура>, ключем которой является имя поля. Если имя поля использует точку, то его нужно записать в значения этой структуры
//	СтруктураПараметровОформления - <Структура>, состоящая из пар имен и значений параметров элемента условного оформления 
//
//Возвращаемое значение:
//	ЭлементУсловногоОформления
&НаСервере
Функция ДобавитьЭлементУсловногоОформления(Оформление, СтруктураПолей, СтруктураПараметровОформления)

	Элемент = Оформление.Элементы.Добавить();

	Для каждого ЭлементСтруктурыПолей Из СтруктураПолей Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементСтруктурыПолей.Ключ);
	КонецЦикла;
	
	Для каждого ЭлементСтруктурыПараметров Из СтруктураПараметровОформления Цикл
		Элемент.Оформление.УстановитьЗначениеПараметра(ЭлементСтруктурыПараметров.Ключ, ЭлементСтруктурыПараметров.Значение);
	КонецЦикла;

	Возврат Элемент;
	
КонецФункции


// Завершения процедур с интерактивным функиционалом

&НаКлиенте
Процедура СозданиеОбъектаЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СсылкаНаРодитель = ?(ДопПараметры.ЭтоГруппа, ДопПараметры.Родитель, Неопределено);
		
		ЗначенияЗаполнения = Новый Структура("Родитель,ЭтоГруппа", СсылкаНаРодитель, Ложь);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		Если ДопПараметры.НомерРаздела = 1 ИЛИ ДопПараметры.НомерРаздела = 2 Тогда
			ИмяФормыОбъекта = "Справочник.КошелькиИСчета.ФормаОбъекта";
			Если ДопПараметры.НомерРаздела = 2 Тогда
				ПараметрыФормы.ЗначенияЗаполнения.Вставить("ТипСчета", ПредопределенноеЗначение("Перечисление.ТипыСчетов.БанковскаяКартаКредитная"));
			КонецЕсли; 
		ИначеЕсли ДопПараметры.НомерРаздела = 3 Тогда
			ИмяФормыОбъекта = "Справочник.Имущество.ФормаОбъекта";
		ИначеЕсли ДопПараметры.НомерРаздела = 4 ИЛИ ДопПараметры.НомерРаздела = 5 Тогда
			ИмяФормыОбъекта = "Справочник.Долги.ФормаОбъекта";
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВыданныхДолгов", ДопПараметры.НомерРаздела = 4);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВзятыхДолгов",   ДопПараметры.НомерРаздела = 5);
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы, ЭтаФорма, Истина);
		
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура СозданиеСтатьиЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ДопПараметры.НомерРаздела = 6 Тогда
			ИмяФормыОбъекта = "Справочник.СтатьиДоходов.ФормаОбъекта";
		ИначеЕсли ДопПараметры.НомерРаздела = 7 Тогда
			ИмяФормыОбъекта = "Справочник.СтатьиРасходов.ФормаОбъекта";
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыОбъекта, , ЭтаФорма, Истина);
		
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура СписокОбъектовПереместитьВГруппуЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Если Выбор <> Неопределено И Выбор <> ТекущиеДанные.Ссылка Тогда
		ПереместитьЭлементВГруппуНаСервере(ТекущиеДанные.Ссылка, Выбор);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура СписокОбъектовПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИзменитьПометкуУдаленияОбъекта(ДополнительныеПараметры.СсылкаНаОбъект);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура СписокСтатейПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
		ИзменитьПометкуУдаленияОбъекта(ДополнительныеПараметры.СсылкаНаОбъект);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ОбъектыСоздатьГруппуПоКонтекстуЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		НомерРаздела = ДополнительныеПараметры.НомерРаздела;
		ЗначенияЗаполнения = Новый Структура("Родитель,ЭтоГруппа", Неопределено, Ложь);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВыданныхДолгов", НомерРаздела = 4);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДляУчетаВзятыхДолгов",   НомерРаздела = 5);
		ОткрытьФорму("Обработка.ПомощникСозданияДолга.Форма.Форма", ПараметрыФормы, ЭтаФорма, Истина);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыОтчетыЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	СсылкаНаОбъект = ДополнительныеПараметры.СсылкаНаОбъект;
	Если Выбор.Значение = "ОтчетПоПоступлениямДенег" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПараметрыФормы.Отбор.Вставить("Кошелек", СсылкаНаОбъект);
		КонецЕсли;
		ПараметрыФормы.Вставить("КлючВарианта", "ИсточникиДенег");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
		
		ОткрытьФорму("Отчет.ОтчетПоПоступлениямДенег.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	ИначеЕсли Выбор.Значение = "ОтчетПоСписаниямДенег" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПараметрыФормы.Отбор.Вставить("Кошелек", СсылкаНаОбъект);
		КонецЕсли;
		ПараметрыФормы.Вставить("КлючВарианта", "Основной");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
		
		ОткрытьФорму("Отчет.ОтчетПоСписаниямДенег.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	ИначеЕсли Выбор.Значение = "СверкаСВыпискойБанка" Тогда
		
		ПараметрыОтчета = Новый Структура("Период,ВалютаОтчета,Кошелек,Периодичность,СкрыватьНастройкиПриФормировании,СформироватьПриОткрытии",
			Период, ВалютаУчета, СсылкаНаОбъект, 6, Истина, ЗначениеЗаполнено(СсылкаНаОбъект));
		ОткрытьФорму("Отчет.СверкаСВыпискойБанка.ФормаОбъекта", ПараметрыОтчета, , Истина);
		
	ИначеЕсли Выбор.Значение = "ОтчетПоИмуществу" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПараметрыФормы.Отбор.Вставить("Имущество", СсылкаНаОбъект);
		КонецЕсли;
		ПараметрыФормы.Вставить("КлючВарианта", "ОперацииПоИмуществу");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
		
		ОткрытьФорму("Отчет.ОтчетПоИмуществу.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	ИначеЕсли Выбор.Значение = "ОтчетПоДолгам" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПараметрыФормы.Отбор.Вставить("Долг", СсылкаНаОбъект);
		КонецЕсли;
		ПараметрыФормы.Вставить("КлючВарианта", "Основной");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
		
		ОткрытьФорму("Отчет.ОтчетПоДолгам.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	ИначеЕсли Выбор.Значение = "СтруктураДоходов" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПараметрыФормы.Отбор.Вставить("СтатьяДохода", СсылкаНаОбъект);
		КонецЕсли;
		//ПараметрыФормы.Отбор.Вставить("ВыводитьДиаграмму", Истина);  // Диаграмма выводится по умолчанию
		ПараметрыФормы.Вставить("КлючВарианта", "ДоходыПоСтатьям");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
		ОткрытьФорму("Отчет.СтруктураДоходов.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	ИначеЕсли Выбор.Значение = "СтруктураРасходов" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПараметрыФормы.Отбор.Вставить("СтатьяРасхода", СсылкаНаОбъект);
		КонецЕсли;
		//ПараметрыФормы.Отбор.Вставить("ВыводитьДиаграмму", Истина);  // Диаграмма выводится по умолчанию
		ПараметрыФормы.Вставить("КлючВарианта", "РасходыПоСтатьям");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(СсылкаНаОбъект));
		ОткрытьФорму("Отчет.СтруктураРасходов.ФормаОбъекта", ПараметрыФормы, , Истина);
	
	ИначеЕсли Выбор.Значение = "ДинамикаДоходовИРасходов" Тогда
			
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		ПараметрыФормы.Вставить("КлючВарианта", "Сопоставление");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.ДинамикаДоходовИРасходов.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	ИначеЕсли Выбор.Значение = "СравнениеДоходовИРасходовЗа2Периода" Тогда
		
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("Период", Период);
		ПараметрыФормы.Отбор.Вставить("ВыводитьДиаграмму", Истина);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.СравнениеДоходовИРасходовЗа2Периода.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	ИначеЕсли Выбор.Значение = "ОтчетОбИзмененииФинансовогоСостояния" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура);
		ПараметрыФормы.Отбор.Вставить("ПериодОтчета", Период);
		ПараметрыФормы.Отбор.Вставить("ВалютаОтчета", ВалютаУчета);
		ПараметрыФормы.Вставить("КлючВарианта", "ДинамикаИзменения");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму("Отчет.ОтчетОбИзмененииФинансовогоСостояния.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидОперацииЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НомерРаздела = 0;
	
	ПараметрыФормыНовогоДокумента = Новый Структура;
	ЗаполнитьПараметрыНовогоДокумента(Выбор.Значение, ПараметрыФормыНовогоДокумента, НомерРаздела);
	РаботаСФормамиДокументовКлиент.ОткрытьФормуНовогоДокументаСУчетомШаблона(Выбор.Значение, ПараметрыФормыНовогоДокумента, Элементы.СписокОпераций);

КонецПроцедуры

// Настройка автоматического открытия формы при начале работы порграммы

&НаСервереБезКонтекста
Процедура ИзменитьНастройкуОткрытияПриЗапускеПрограммы(НоваяНастройка)

	ПользовательскиеНастройкиДеньгиСервер.ЗаписатьПриЗапускеОткрыватьРаздел(НоваяНастройка);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммыЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор = КодВозвратаДиалога.Да Тогда
		ЗначениеНастройки = ?(ДополнительныеПараметры.Открывать, "", "Операции");
		ИзменитьНастройкуОткрытияПриЗапускеПрограммы(ЗначениеНастройки);
		Элементы.ОткрыватьПриЗапускеПрограммы.Пометка = НЕ ДополнительныеПараметры.Открывать;
		Оповестить("Изменилась настройка", Новый Структура("ПриЗапускеОткрыватьРаздел", ЗначениеНастройки))
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыпискуБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновляемыеДанные = Новый Структура("СписокОбъектовСтатей,ВалютаУчета", Истина, Ложь);
	НужноОбновлятьДанные = Истина;
	ОбновитьДанныеПоОбработкеОповещения();

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервереБезКонтекста
Функция ПараметрыРазмещенияПодключаемыхКоманд(КоманднаяПанель) 
	
	Параметры = ПодключаемыеКоманды.ПараметрыРазмещения();
	
	Параметры.Источники = Новый Массив;
	Параметры.Источники.Добавить(Метаданные.Документы.ВводИзменениеОстатка);
	Параметры.Источники.Добавить(Метаданные.Документы.Доход);
	Параметры.Источники.Добавить(Метаданные.Документы.МыВернулиДолг);
	Параметры.Источники.Добавить(Метаданные.Документы.МыВзялиВДолг);
	Параметры.Источники.Добавить(Метаданные.Документы.МыДалиВДолг);
	Параметры.Источники.Добавить(Метаданные.Документы.НамВернулиДолг);
	Параметры.Источники.Добавить(Метаданные.Документы.ОбменВалюты);
	Параметры.Источники.Добавить(Метаданные.Документы.Перемещение);
	Параметры.Источники.Добавить(Метаданные.Документы.Расход);
	Параметры.Источники.Добавить(Метаданные.Документы.УниверсальнаяОперация);
	
	Параметры.КоманднаяПанель = КоманднаяПанель;
	
	Возврат Параметры;
	
КонецФункции
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти


