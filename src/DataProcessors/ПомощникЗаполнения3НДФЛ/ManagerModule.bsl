#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	Возврат Неопределено;
	// Конец ДЕНЬГИ
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусУплаты(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает дату, с которой используется помощник заполнения 3-НДФЛ.
// Функция используется, чтобы открывать помощник заполнения из списка задач.
//
// Возвращаемое значение:
//    Дата - Дата, с которой применяется помощник заполнения 3-НДФЛ
//
Функция ДатаНачалаПрименения() Экспорт
	
	// Помощник можно использовать для декларации за 2014 год и позднее.
	Возврат '20140101';
	
КонецФункции

// Функция проверяет, поддерживает ли Помощник заполнение выбранной формы декларации.
//
// Параметры:
//   ВыбраннаяФорма - Строка - форма декларации 3-НДФЛ
//
// Возвращаемое значение:
//    Булево - Истина, если поддерживается заполнение выбранной формы отчета
//
Функция ФормаЗаполняетсяПомощником(ВыбраннаяФорма) Экспорт
	
	ПоддерживаемыеФормы = Новый Массив;
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2015кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2016кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2017кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2018кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2019кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2020кв1"));
	
	Возврат (ПоддерживаемыеФормы.Найти(НРег(СокрЛП(ВыбраннаяФорма))) <> Неопределено);
	
КонецФункции

// Возвращает список документов на уплату НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ПериодУплаты - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ДокументыУплаты(Организация, ПериодУплаты, ПравилоУплаты) Экспорт
	
	// ДЕНЬГИ
	Возврат Неопределено;
	// Конец ДЕНЬГИ 
	
КонецФункции

// Возвращает ссылку на декларацию 3-НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НалоговыйПериод - Дата - дата в пределах налогового периода
//   ФормаОтчета - Строка - форма декларации
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет
//
Функция НайтиДекларацию3НДФЛ(Организация, НалоговыйПериод, ФормаОтчета = "") Экспорт
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет("РегламентированныйОтчет3НДФЛ", Организация, КонецГода(НалоговыйПериод), , ФормаОтчета);
	
	Возврат Декларация;
	
КонецФункции

// Возвращает ссылку на декларацию 4-НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НалоговыйПериод - Дата - дата в пределах налогового периода
//   ФормаОтчета - Строка - форма декларации
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет
//
Функция НайтиДекларацию4НДФЛ(Организация, НалоговыйПериод, ФормаОтчета = "") Экспорт
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет("РегламентированныйОтчет4НДФЛ", Организация, КонецГода(НалоговыйПериод), , ФормаОтчета);
	
	Возврат Декларация;
	
КонецФункции

// Процедура заполняет декларацию 3-НДФЛ.
//
// Параметры:
//   СтруктураПараметров - Структура
//   АдресРезультата - УникальныйИдентификатор
//
Процедура ЗаполнитьДекларацию(СтруктураПараметров, АдресРезультата) Экспорт
	
	Период = СтруктураПараметров.Период;
	Организация = СтруктураПараметров.Организация;
	НомерКорректировки = СтруктураПараметров.НомерКорректировки;
	НомерКорректировки4НДФЛ = СтруктураПараметров.НомерКорректировки4НДФЛ;
	ДоходыВычеты = СтруктураПараметров.ДоходыВычеты;
	ДанныеПомощникаЗаполнения = СтруктураПараметров.ДанныеПомощникаЗаполнения;
	Декларация3НДФЛ = СтруктураПараметров.Декларация3НДФЛ;
	ВыбраннаяФорма3НДФЛ = СтруктураПараметров.Декларация3НДФЛВыбраннаяФорма;
	
	СформироватьДекларацию4НДФЛ = СтруктураПараметров.СформироватьДекларацию4НДФЛ;
	ПредполагаемаяСуммаДоходов = СтруктураПараметров.ПредполагаемаяСуммаДоходов;
	Декларация4НДФЛ = СтруктураПараметров.Декларация4НДФЛ;
	ВыбраннаяФорма4НДФЛ = СтруктураПараметров.Декларация4НДФЛВыбраннаяФорма;
	
	Если Не ФормаЗаполняетсяПомощником(ВыбраннаяФорма3НДФЛ) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Заполнение декларации за %1 год будет реализовано в будущих версиях программы'"),
			Формат(Период, "ДФ=yyyy"));
	КонецЕсли;
	
	КодыВидовДоходовРФ          = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовДоходовРФ(ВыбраннаяФорма3НДФЛ);
	
	КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации(ВыбраннаяФорма3НДФЛ);
	ПризнакиУплатыВозврата = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУплатыВозврата(ВыбраннаяФорма3НДФЛ);
	ВидыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма3НДФЛ);
	НалоговыеСтавки = Отчеты.РегламентированныйОтчет3НДФЛ.НалоговыеСтавки(ВыбраннаяФорма3НДФЛ);
	СписокКБК = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ);
	ПределыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.ПределыВычетов(ВыбраннаяФорма3НДФЛ);
	НеоблагаемыеСуммыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.НеоблагаемыеСуммыДоходов(ВыбраннаяФорма3НДФЛ);
	КодыВидовПредпринимательскойДеятельности =
		Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовПредпринимательскойДеятельности(ВыбраннаяФорма3НДФЛ);
	
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	ОКТМОналогоплательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПоОКТМО");
	
	ПоказателиИмущественногоВычета = ОписаниеПоказателейИмущественногоВычета(ВыбраннаяФорма3НДФЛ);
	КодыИсточниковДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.КодыИсточниковДоходов(ВыбраннаяФорма3НДФЛ);
	
	ТаблицаДанныхЗаполнения = Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхЗаполнения();
	
	// Добавляем служебную колонку
	МассивТиповВида = Новый Массив;
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц"));
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	
	ВидДоходаВычета = ТаблицаДанныхЗаполнения.Колонки.Добавить("Вид", Новый ОписаниеТипов(МассивТиповВида));
	
	Для Каждого СтрокаТаблицы Из ДоходыВычеты Цикл
		
		Если СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = ОКТМОналогоплательщика;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПредпринимательскаяДеятельность(СтрокаТаблицы.СтруктураДоходовВычетов, КодыВидовПредпринимательскойДеятельности.ПредпринимательскаяДеятельность);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества
			Или СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПродажаИмущества(СтрокаТаблицы.СтруктураДоходовВычетов, 
						НоваяСтрока.НалоговаяСтавка, Период, КодыВидовДоходовРФ);
			НоваяСтрока.ОКТМО = НоваяСтрока.СтруктураДанных.ОКТМОИсточникаДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
			ДобавитьДанныеЗаполненияИмущественногоВычета(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы.СтруктураДоходовВычетов,
				НоваяСтрока.ВидДохода,
				НоваяСтрока.НалоговаяСтавка,
				ПоказателиИмущественногоВычета,
				КодыИсточниковДоходов, 
				ПределыВычетов); // ДЕНЬГИ
			
			ДобавитьДанныеКадастровойИнформации(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СдачаИмуществаВАренду(СтрокаТаблицы.СтруктураДоходовВычетов, 
						НоваяСтрока.НалоговаяСтавка, ВыбраннаяФорма3НДФЛ);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_Подарок(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = СтрокаТаблицы.СтруктураДоходовВычетов.СтавкаНалога;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Дивиденды;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.Дивиденды;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх
			Или СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(
				СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеОтчетности.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ОплатаТруда(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеОтчетности, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ОперацииСЦеннымиБумагами(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, 
							НоваяСтрока.НалоговаяСтавка, КодыВидовДоходовРФ);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ДоходЗаПределамиРФ(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка, ВыбраннаяФорма3НДФЛ);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаПодлежащаяЗачетуВРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СтандартныйВычет(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ВычетНаДетей(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СоциальныеВычеты(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПенсионныеВзносыСтрахованиеЖизни(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ИнвестиционныйВычет(СтрокаТаблицы.СтруктураДоходовВычетов);
			НоваяСтрока.СуммаНалогаИсчисленная = СуммаНалогаИсчисленная(
				НоваяСтрока.СтруктураДанных.ИнвестиционныйВычетКВосстановлению, НоваяСтрока.НалоговаяСтавка);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ВычетНаПриобретениеИлиСтроительствоНедвижимости(
				СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(
				СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьИтоговыеПоказателиПредпринимательскойДеятельности(ДанныеПомощникаЗаполнения, ТаблицаДанныхЗаполнения);
	ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	РассчитатьСуммуДоходовНеПодлежащуюНалогообложению(ТаблицаДанныхЗаполнения, ВидыДоходов.Иное, НалоговыеСтавки.ПоУмолчанию, НеоблагаемыеСуммыДоходов);
	
	ТаблицаНалоговойБазы = ТаблицаНалоговойБазы(ТаблицаДанныхЗаполнения, ПределыВычетов, ВидыДоходов.Иное, НалоговыеСтавки.ПоУмолчанию, ДанныеПомощникаЗаполнения);
	НалогКУплате = ТаблицаНалоговойБазы.Итог("СуммаНалогаПодлежащаяУплате");
	НалогКВозврату = ТаблицаНалоговойБазы.Итог("СуммаНалогаПодлежащаяВозврату");
	СведенияОСуммахНалога = ТаблицаСведенийОСуммахНалога(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ПризнакиУплатыВозврата, СписокКБК, ОКТМОналогоплательщика);
	
	// Объединяем таблицы и удаляем служебную колонку.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНалоговойБазы, ТаблицаДанныхЗаполнения);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОСуммахНалога, ТаблицаДанныхЗаполнения);
	ТаблицаДанныхЗаполнения.Колонки.Удалить(ВидДоходаВычета);
	
	// Дополним данные помощника рассчитанными налогами.
	// Это нужно, чтобы сразу сохранить правильные данные в отчете и не вызывать повторное сохранение.
	ДанныеПомощникаЗаполнения.НалогКУплате   = НалогКУплате;
	ДанныеПомощникаЗаполнения.НалогКВозврату = НалогКВозврату;
	
	Отчеты.РегламентированныйОтчет3НДФЛ.СоздатьЗаполнитьОтчет(
		Декларация3НДФЛ,
		Организация,
		Период,
		ВыбраннаяФорма3НДФЛ,
		НомерКорректировки,
		ТаблицаДанныхЗаполнения,
		ДанныеПомощникаЗаполнения);
		
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		Статус3НДФЛ = Новый Структура("СсылкаНаОбъект, Статус", Декларация3НДФЛ, НСтр("ru = 'Подготовлено'"));
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(Статус3НДФЛ);
	КонецЕсли;
	
	// ДЕНЬГИ
	// Удалено заполнение 4-НДФЛ
	// Конец ДЕНЬГИ
	
	Результат = Новый Структура;
	Результат.Вставить("Декларация3НДФЛ", Декларация3НДФЛ);
	Результат.Вставить("Декларация4НДФЛ", Декларация4НДФЛ);
	Результат.Вставить("НалогКУплате",    НалогКУплате);
	Результат.Вставить("НалогКВозврату",  НалогКВозврату);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Функция возвращает дату, с которой используется помощник заполнения 3-НДФЛ.
// Функция используется, чтобы открывать помощник заполнения из списка задач.
//
// Возвращаемое значение:
//    Дата - Дата, с которой применяется помощник заполнения 3-НДФЛ
//
Функция ДатаСКоторойПрименяетсяПомощник() Экспорт
	
	// ДЕНЬГИ
	// Помощник можно использовать для декларации за 2016 год и позднее.
	Возврат '20160101';
	// Конец ДЕНЬГИ 
	
КонецФункции

// Определяет наличие декларации 3-НДФЛ, заполненной из помощника.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило представления декларации или уплаты налога по ней.
//   Организация - СправочникСсылка.Организации - организация.
//   ОтчетныйПериод - Дата - период заполнения декларации.
//
// Возвращаемое значение:
//   Булево - Истина, если есть декларация, заполненная из помощника. Ложь в обратном случае.
//
Функция Декларация3НДФЛЗаполненаИзПомощника(Правило, Организация, ОтчетныйПериод) Экспорт
	
	Декларация3НДФЛ = НайтиДекларацию3НДФЛ(Правило, Организация, ОтчетныйПериод);
	
	Возврат ЗначениеЗаполнено(Декларация3НДФЛ)
		И ДанныеПомощникаСохраненныеВДекларации3НДФЛ(Декларация3НДФЛ) <> Неопределено;
	
КонецФункции

///////////////////////////////////////////////////////////////
// ДЕНЬГИ

// Возвращает структуру данных помощника, заполненную значениями по умолчанию
//
//Параметры:
//	Год - Чсло - на какой год получаем структуру
//
//Возвращаемое значение:
//	Структура
//
Функция НоваяСтруктураДанныхПомощника(Год) Экспорт

	Если Год < 2017 Тогда
		ВызватьИсключение НСтр("ru='Для деклараций за 2016 год и ранее используйте другие версии помощника заполнения'");
	КонецЕсли;
	
	Результат = Новый Структура;
	
	// Версия данных помощника заполнения
	Результат.Вставить("ВерсияПомощника",           НомерВерсииПомощника(Год));
	Результат.Вставить("АдресВРФОКТМО",             "");
	Результат.Вставить("ГодОтчета",                 Год);
	Результат.Вставить("ДокументДатаВыдачи",        "");
	Результат.Вставить("ДокументКемВыдан",          "");
	Результат.Вставить("ДокументКодВида",           "21");
	Результат.Вставить("ДокументСерияИНомер",       "");
	Результат.Вставить("КодИФНС",                   "");
	Результат.Вставить("НаименованиеИФНС",          "");
	
	Результат.Вставить("НалогоплательщикДатаРождения",  Дата(1,1,1));
	Результат.Вставить("НалогоплательщикФамилия",       "");
	Результат.Вставить("НалогоплательщикИмя",           "");
	Результат.Вставить("НалогоплательщикОтчество",      "");
	Результат.Вставить("НалогоплательщикИНН",           "");
	Результат.Вставить("НалогоплательщикКатегория",     "760");
	Результат.Вставить("НалогоплательщикМестоРождения", "");
	Результат.Вставить("НалогоплательщикНомерТелефона", "");
	Результат.Вставить("НалогоплательщикСтатус",        1);
	Результат.Вставить("НалогоплательщикСтрана",        Справочники.СтраныМира.Россия);
	
	Результат.Вставить("ВидДекларации",          0);
	Результат.Вставить("НомерКорректировки",     0);
	Результат.Вставить("ЯвляетсяОпекуном",       Ложь);
	Результат.Вставить("ДатаПодписи",            ТекущаяДатаСеанса());
	
	Результат.Вставить("ПредпринимательВычетПодтвержденДокументами",  0);
	Результат.Вставить("ПредпринимательГодОбразованияКФХ",            0);
	Результат.Вставить("ПредпринимательНачисленоАвансовыхПлатежей",   0);
	Результат.Вставить("ПредпринимательНеоблагаемыйДоходКФХ",         0);
	Результат.Вставить("ПредпринимательСкорректированнаяБаза",        0);
	Результат.Вставить("ПредпринимательСкорректированныйНалог",       0);
	Результат.Вставить("ПредпринимательСуммаПатента",                 0);
	Результат.Вставить("ПредпринимательТорговыйСбор",                 0);
	Результат.Вставить("ПредпринимательУплаченоФактическихПлатежей",  0);
	Результат.Вставить("ФиксированныеПлатежиИностранца",              0);

	Результат.Вставить("ЖильеПредоставленоВПрошлыеГодыНаПриобретение", 0);
	Результат.Вставить("ЖильеПредоставленоВПрошлыеГодыПоПроцентам", 0);
	Результат.Вставить("ЖильеПредоставленоАгентомНаПриобретение", 0);
	Результат.Вставить("ЖильеПредоставленоАгентомПоПроцентам", 0);
	
	Результат.Вставить("НалогКУплате",    0);
	Результат.Вставить("НалогКВозврату",  0);
		
	Результат.Вставить("СписокДокументов",       НоваяТаблицаПомощникаДокументы(Год));
	
	Возврат Результат;

КонецФункции

// Таблица значений для хранения документов
//
//Параметры:
//	Год - Чсло - на какой год получаем структуру
//
//Возвращаемое значение:
//	ТаблицаЗначений
//
Функция НоваяТаблицаПомощникаДокументы(Год) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидДокумента",       ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Результат.Колонки.Добавить("Представление",      ОбщегоНазначения.ОписаниеТипаСтрока(200));
	Результат.Колонки.Добавить("СуммаДохода",        ОбщегоНазначения.ОписаниеТипаЧисло(19,2));
	Результат.Колонки.Добавить("СуммаВычета",        ОбщегоНазначения.ОписаниеТипаЧисло(19,2));
	Результат.Колонки.Добавить("СтавкаНалога",       ОбщегоНазначения.ОписаниеТипаЧисло(19,2));
	Результат.Колонки.Добавить("СтруктураДокумента", Новый ОписаниеТипов("Структура"));
	
	Возврат Результат;

КонецФункции

// Возвращает номер версии помощника для указанного года
//
//Параметры:
//	Год - Чсло - на какой год получаем структуру
//
//Возвращаемое значение:
//	Строка - представление версии помощника заполнения
//
Функция НомерВерсииПомощника(Год) Экспорт

	Если Год = "2017" Тогда
		Возврат "02/01/2017";
	КонецЕсли;

	Возврат "01/01/" + Формат(Год, "ЧЦ=4; ЧГ=");
	
КонецФункции

// Возвращает структуру для записи в строку таблицы "СписокДокументов" помощника заполнения
//
//Параметры:
//	ВидДокумента - Строка - вид вычета или дохода
//	Год - Число - номер года отчета
//
//Возвращаемое значение:
//	Структура
//
Функция НоваяСтруктураДокументаДоходаВычета(ВидДокумента, ВыбраннаяФорма, ИИС = Ложь, ДляПередачиНаКлиент = Ложь) Экспорт

	СтруктураДокумента = Неопределено;
	
	Если ВидДокумента = "ВычетИИС" Тогда
		СтруктураДокумента = НоваяСтруктураВычетИИС();
	ИначеЕсли ВидДокумента = "ВычетИмущественный" Тогда
		СтруктураДокумента = НоваяСтруктураВычетИмущественный(ВыбраннаяФорма);
	ИначеЕсли ВидДокумента = "ВычетНаДетей" Тогда
		СтруктураДокумента = НоваяСтруктураВычетНаДетей();
	ИначеЕсли ВидДокумента = "ВычетНаНалогоплательщика" Тогда
		СтруктураДокумента = НоваяСтруктураВычетНаНалогоплательщика(ВыбраннаяФорма);
	ИначеЕсли ВидДокумента = "ВычетСоциальный" Тогда
		СтруктураДокумента = НоваяСтруктураВычетСоциальный();
	ИначеЕсли ВидДокумента = "ВычетСтрахования" Тогда
		СтруктураДокумента = НоваяСтруктураВычетСтрахования();
	ИначеЕсли ВидДокумента = "ВычетУбыткиПрошлыхЛет" Тогда
		СтруктураДокумента = НоваяСтруктураВычетУбыткиПрошлыхЛет(ВыбраннаяФорма, ИИС);

	// Доходы -----------------------
	ИначеЕсли ВидДокумента = "ДоходСправка2НДФЛ" Или ВидДокумента = "ДоходЦенныеБумаги" Тогда
		СтруктураДокумента = НоваяСтруктураДоходСправка2НДФЛ();
	ИначеЕсли ВидДокумента = "ДоходДивиденды" Тогда
		СтруктураДокумента = НоваяСтруктураДоходДивиденды();
	ИначеЕсли ВидДокумента = "ДоходЗаПределамиРФ" Тогда
		СтруктураДокумента = НоваяСтруктураДоходЗаПределамиРФ();
	ИначеЕсли ВидДокумента = "ДоходПодарок" Тогда
		СтруктураДокумента = НоваяСтруктураДоходОднойСуммойБезВычетов("Подарок");
	ИначеЕсли ВидДокумента = "ДоходПредпринимателя" Тогда
		СтруктураДокумента = НоваяСтруктураДоходПредпринимателя();
	ИначеЕсли ВидДокумента = "ДоходПродажаАвто" Тогда
		СтруктураДокумента = НоваяСтруктураДоходПродажаИмущества("Автомобиль");
	ИначеЕсли ВидДокумента = "ДоходПродажаНедвижимости" Тогда
		СтруктураДокумента = НоваяСтруктураДоходПродажаИмущества("Жилая");
	ИначеЕсли ВидДокумента = "ДоходПродажаПрочегоИмущества" Тогда
		СтруктураДокумента = НоваяСтруктураДоходПродажаИмущества("Прочее");
	ИначеЕсли ВидДокумента = "ДоходПрочиеДоходыВРФ" Тогда
		СтруктураДокумента = НоваяСтруктураДоходПрочиеДоходыВРФ();
	ИначеЕсли ВидДокумента = "ДоходСдачаВАренду" Тогда
		СтруктураДокумента = НоваяСтруктураДоходОднойСуммойБезВычетов("Аренда");
	КонецЕсли;

	Если СтруктураДокумента = Неопределено Тогда
		ВызватьИсключение "Невозможно получить структуру для документа вида """ + ВидДокумента + """";
	КонецЕсли;

	Если ДляПередачиНаКлиент Тогда
		Возврат СтруктураДокументаСХранилищамиТаблиц(СтруктураДокумента);
	КонецЕсли;
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Возвращает имя формы для редактирования документа дохода/вычета указанного вида
//
//Параметры:
//	ВидДокумента - Строка - вид вычета или дохода
//	Год - Число - номер года отчета
//
//Возвращаемое значение:
//	Структура
//
Функция ИмяФормыДокументаДоходаВычета(ВидДокумента, Декларация3НДФЛВыбраннаяФорма = Неопределено, ПараметрыФормы = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Декларация3НДФЛВыбраннаяФорма) Тогда
		Декларация3НДФЛВыбраннаяФорма = "ФормаОтчета2020кв1";
	КонецЕсли;
	
	ИмяФормы = "";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента",                  ВидДокумента);
	ПараметрыФормы.Вставить("Декларация3НДФЛВыбраннаяФорма", Декларация3НДФЛВыбраннаяФорма);
	
	Если ВидДокумента = "ДоходПрочиеДоходыВРФ" Или ВидДокумента = "ДоходДивиденды" Тогда
		ИмяФормы = "ДоходВРФПрочий2018кв1";
	ИначеЕсли ВидДокумента = "ДоходПредпринимателя" Тогда
		ИмяФормы = "ДоходПредпринимателя2018кв1";
	ИначеЕсли ВидДокумента = "ДоходЦенныеБумаги" Или ВидДокумента = "ДоходСправка2НДФЛ" Тогда
		ИмяФормы = "ДоходПоСправке2НДФЛ2018кв1";
	ИначеЕсли ВидДокумента = "ДоходПродажаНедвижимости" Или ВидДокумента = "ДоходПродажаАвто" Или ВидДокумента = "ДоходПродажаПрочегоИмущества" Тогда
		ИмяФормы = "ДоходПродажаИмущства";
	ИначеЕсли ВидДокумента = "ДоходСдачаВАренду" Или ВидДокумента = "ДоходПодарок" Тогда
		ИмяФормы = "ДоходОднойСуммойБезВычетов";
	ИначеЕсли ВидДокумента = "ДоходЗаПределамиРФ" Тогда
		ИмяФормы = "ДоходВВалюте2018кв1";
	ИначеЕсли ВидДокумента = "ВычетИмущественный" Тогда
		Если Декларация3НДФЛВыбраннаяФорма = "ФормаОтчета2020кв1" Тогда
			ИмяФормы = "ОбъектИмущественногоВычета2020кв1";
		Иначе
			ИмяФормы = "ОбъектИмущественногоВычета2018кв1";
		КонецЕсли;
	Иначе
		ИмяФормы = ВидДокумента;
	КонецЕсли;

	Возврат ИмяФормы;
	
КонецФункции


// Возвращает истина, если документ помощника заполнения не содержит ошибок.
//Иначе будет заполнен массив СписокОшибок и возвращена Ложь
//
//Параметры:
//	ВидДокумента - Строка - вид вычета или дохода
//	Год - Число - номер года отчета
//	СтруктураДокумента - Структура - см.  НоваяСтруктураДокументаДоходаВычета()
//	СписокОшибок - Массив или Неопределено - при наличии ошибок в массив будут добавлена информация об ошибке
//
//Возвращаемое значение:
//	Булево - Истина, если документ не содержит ошибок и Ложь в ином случае
//
Функция ДокументНеСодержитОшибок(ВидДокумента, Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт

	Если ТипЗнч(СписокОшибок) <> Тип("Массив") Тогда
		СписокОшибок = Новый Массив;
	КонецЕсли;
	РезультатПроверки = Ложь;
	
	Если ВидДокумента = "ВычетИИС" Тогда
		РезультатПроверки = КорректныйДокументВычетИИС(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ВычетИмущественный" Тогда
		РезультатПроверки = КорректныйДокументВычетНаПокупкуЖилья(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента, ВыбраннаяФорма);
	ИначеЕсли ВидДокумента = "ВычетНаДетей" Тогда
		РезультатПроверки = КорректныйДокументВычетНаДетей(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ВычетНаНалогоплательщика" Тогда
		РезультатПроверки = КорректныйДокументВычетНаНалогоплательщика(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ВычетСоциальный" Тогда
		РезультатПроверки = Истина;
	ИначеЕсли ВидДокумента = "ВычетСтрахования" Тогда
		РезультатПроверки = КорректныйДокументВычетСтрахования(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ВычетУбыткиПрошлыхЛет" Тогда
		РезультатПроверки = Истина;

	// Доходы -----------------------
	ИначеЕсли ВидДокумента = "ДоходСправка2НДФЛ" Или ВидДокумента = "ДоходЦенныеБумаги" Тогда
		РезультатПроверки = КорректныйДокументДоходСправка2НДФЛ(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ДоходДивиденды" Или ВидДокумента = "ДоходПрочиеДоходыВРФ"  Тогда
		РезультатПроверки = КорректныйДокументДоходВРФПрочий(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ДоходЗаПределамиРФ" Тогда
		РезультатПроверки = КорректныйДокументДоходЗаПределамиРФ(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ДоходПредпринимателя" Тогда
		РезультатПроверки = КорректныйДокументДоходПредпринимателя(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ДоходПродажаАвто" Или ВидДокумента = "ДоходПродажаНедвижимости" Или ВидДокумента = "ДоходПродажаПрочегоИмущества" Тогда
		РезультатПроверки = КорректныйДокументДоходПродажиИмущества(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	ИначеЕсли ВидДокумента = "ДоходСдачаВАренду" Или ВидДокумента = "ДоходПодарок" Тогда
		РезультатПроверки = КорректныйДокументДоходОднойСуммой(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента);
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

// Возвращает ссылку на организацию с указанными имени-фамилии-отчеству и ИНН
//	Если такой орнаизации нет, будет создана новая. Если изменились кодИФНС, или ОКТМО, значения реквизитов 
//	будут автоматически обновлены.
Функция ПолучитьСсылкуНалогоплательщика(Фамилия, Имя, Отчество, ИНН, КодИФНС, КодОКТМО, 
			ДатаРождения, МестоРождения, КодВидаДокумента, ДокументСерияНомер, ДокументДатаВыдачи, ДокументМестоВыдачи, Гражданство) Экспорт

	НаименованиеОрганизации = СокрЛП(СокрЛП(Фамилия));
	Если ЗначениеЗаполнено(Имя) Тогда
		НаименованиеОрганизации = НаименованиеОрганизации + ?(ЗначениеЗаполнено(НаименованиеОрганизации), " ", "") + СокрЛП(Имя);
		Если ЗначениеЗаполнено(Отчество) Тогда
			НаименованиеОрганизации = НаименованиеОрганизации + ?(ЗначениеЗаполнено(НаименованиеОрганизации), " ", "") + СокрЛП(Отчество);
		КонецЕсли;
	КонецЕсли;
	
	// В отчетах старых форматов отсутствсующие цифры заменяются прочерками
	ИННпоиска = СтрЗаменить(ИНН, "-", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеОрганизации);
	Запрос.УстановитьПараметр("ИНН", ИННпоиска);
	Запрос.УстановитьПараметр("КодИФНС", КодИФНС);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка,
	|	ВЫБОР
	|		КОГДА Организации.ИНН = &ИНН
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СоответствиеИНН,
	|	ВЫБОР
	|		КОГДА Организации.КодНалоговогоОргана = &КодИФНС
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СоответствиеИФНС
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование,
	|	СоответствиеИНН,
	|	СоответствиеИФНС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СсылкаНаОрганизацию = Неопределено;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СсылкаНаОрганизацию = Выборка.Ссылка;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОрганизацию) Тогда
		ОбъектОрганизация = Справочники.Организации.СоздатьЭлемент();
	Иначе
		ОбъектОрганизация = СсылкаНаОрганизацию.ПолучитьОбъект();
	КонецЕсли; 
	
	Если ОбъектОрганизация.Наименование <> НаименованиеОрганизации Тогда
		ОбъектОрганизация.Наименование = НаименованиеОрганизации;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ИННпоиска) И ОбъектОрганизация.ИНН <> ИННпоиска Тогда
		ОбъектОрганизация.ИНН = ИННпоиска;
	КонецЕсли; 
	Если ЗначениеЗаполнено(КодИФНС) И ОбъектОрганизация.КодНалоговогоОргана <> КодИФНС Тогда
		ОбъектОрганизация.КодНалоговогоОргана = КодИФНС;
	КонецЕсли; 
	Если ЗначениеЗаполнено(КодОКТМО) И ОбъектОрганизация.КодПоОКАТО <> КодОКТМО Тогда
		ОбъектОрганизация.КодПоОКАТО = КодОКТМО;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДатаРождения) И ОбъектОрганизация.ДатаРождения <> ДатаРождения Тогда
		ОбъектОрганизация.ДатаРождения = ДатаРождения;
	КонецЕсли; 
	Если ЗначениеЗаполнено(МестоРождения) И ОбъектОрганизация.МестоРождения <> МестоРождения Тогда
		ОбъектОрганизация.МестоРождения = МестоРождения;
	КонецЕсли; 
	Если ЗначениеЗаполнено(Гражданство) И ОбъектОрганизация.Гражданство <> Гражданство Тогда
		ОбъектОрганизация.Гражданство = Гражданство;
	КонецЕсли; 
	Если ЗначениеЗаполнено(КодВидаДокумента) И ОбъектОрганизация.КодВидаДокумента <> КодВидаДокумента Тогда
		ОбъектОрганизация.КодВидаДокумента = КодВидаДокумента;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДокументСерияНомер) И ОбъектОрганизация.ДокументСерияНомер <> ДокументСерияНомер Тогда
		ОбъектОрганизация.ДокументСерияНомер = ДокументСерияНомер;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДокументДатаВыдачи) И ОбъектОрганизация.ДокументДатаВыдачи <> ДокументДатаВыдачи Тогда
		ОбъектОрганизация.ДокументДатаВыдачи = ДокументДатаВыдачи;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДокументМестоВыдачи) И ОбъектОрганизация.ДокументМестоВыдачи <> ДокументМестоВыдачи Тогда
		ОбъектОрганизация.ДокументМестоВыдачи = ДокументМестоВыдачи;
	КонецЕсли; 
	
	Если ОбъектОрганизация.Модифицированность() Тогда
		ОбъектОрганизация.Записать();
		СсылкаНаОрганизацию = ОбъектОрганизация.Ссылка;
	КонецЕсли; 
	
	Возврат СсылкаНаОрганизацию;
	
КонецФункции

// Сохраняет данные помощника заполнения в регламентированный отчет
//
//Параметры:
//	ФормаПомощника - УправляемаяФорма помощника заполнения
//	ЗаполнитьОтчет - Булево - нужно ли при записи заполнить отчет данными помощника
//	ОтказатьсяОтПомощника - Булево - нужно ли отказаться от помощника, чтобы продолжить работу с отчетом вручную
//
Процедура ЗаписатьДанныеПомощникаВОтчет(ФормаПомощника, ЗаполнитьОтчет = Ложь, ОтказатьсяОтПомощника = Ложь) Экспорт
	
	ДанныеПомощника   = ДанныеПомощникаИзФормы(ФормаПомощника);
	
	// Обновление информации о налогоплательщике
	Налогоплательщик = ПолучитьСсылкуНалогоплательщика(
												ДанныеПомощника.НалогоплательщикФамилия, ДанныеПомощника.НалогоплательщикИмя, ДанныеПомощника.НалогоплательщикОтчество,
												ДанныеПомощника.НалогоплательщикИНН, ДанныеПомощника.КодИФНС, ДанныеПомощника.АдресВРФОКТМО,
												ДанныеПомощника.НалогоплательщикДатаРождения, ДанныеПомощника.НалогоплательщикМестоРождения, 
												ДанныеПомощника.ДокументКодВида, ДанныеПомощника.ДокументСерияИНомер, ДанныеПомощника.ДокументДатаВыдачи,
												ДанныеПомощника.ДокументКемВыдан, ДанныеПомощника.НалогоплательщикСтрана);
	ДанныеПомощника.Вставить("Налогоплательщик", Налогоплательщик);
	ФормаПомощника.Налогоплательщик = Налогоплательщик;
	Период = Дата(ДанныеПомощника.ГодОтчета, 1, 1);
	Если ЗначениеЗаполнено(ФормаПомощника.ДопРеквизитыФормы.мСохраненныйДок) И Не ЗначениеЗаполнено(ФормаПомощника.ДопРеквизитыФормы.мСкопированаФорма) Тогда
		СсылкаРеглОтчета = ФормаПомощника.ДопРеквизитыФормы.мСохраненныйДок;
	Иначе
		ФормаПомощника.ДопРеквизитыФормы.мСохраненныйДок   = Неопределено;
		ФормаПомощника.ДопРеквизитыФормы.мСкопированаФорма = Неопределено;
		СсылкаРеглОтчета = Неопределено;
	КонецЕсли;
	
	Если ЗаполнитьОтчет Тогда
		// Таблица, по которой заполняются листы отчета
		ДанныеЗаполнения = ДанныеДляЗаполненияОтчетаИзПомощника(ДанныеПомощника, Налогоплательщик, Период, СсылкаРеглОтчета);
	Иначе
		ДанныеЗаполнения = Неопределено;
	КонецЕсли;
	
	// Заполнение отчета подготовленными данными
	Отчеты.РегламентированныйОтчет3НДФЛ.СоздатьЗаполнитьОтчет(СсылкаРеглОтчета, 
					Налогоплательщик, 
					Период,
					ФормаПомощника.ДопРеквизитыФормы.мВыбраннаяФорма, 
					ДанныеПомощника.НомерКорректировки, 
					ДанныеЗаполнения, 
					ДанныеПомощника, 
					ОтказатьсяОтПомощника);
	
	ФормаПомощника.ДопРеквизитыФормы.мСохраненныйДок = СсылкаРеглОтчета;
	ФормаПомощника.Модифицированность = Ложь;
	
КонецПроцедуры

// Возвращает таблицу значений, заполненную из таблицы формы. Все вложенные табличные части восстановлены из хранилищ значений
Функция СписокДокументовИзТаблицыФормы(ТаблицаФормы, Год) Экспорт

	Результат = ТаблицаФормы.Выгрузить();
	
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.СтруктураДокумента = СтруктураДокументаСТаблицамиИзХранилищ(СтрокаРезультата.СтруктураДокумента);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

//Возвращает структуру документа, в которой все табличные части восстановлены из хранилищ значений
Функция СтруктураДокументаСТаблицамиИзХранилищ(СтруктураДокумента) Экспорт

	Результат = Новый Структура;
	Для каждого КлючИЗначение Из СтруктураДокумента Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ХранилищеЗначения") Тогда
			Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Получить());
		Иначе
			Результат.Вставить(КлючИЗначение.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

//Возвращает структуру документа, в которой все табличные части помещены в хранилища значений
Функция СтруктураДокументаСХранилищамиТаблиц(СтруктураДокумента) Экспорт

	Результат = Новый Структура;
	Для каждого КлючИЗначение Из СтруктураДокумента Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			Результат.Вставить(КлючИЗначение.Ключ, Новый ХранилищеЗначения(КлючИЗначение.Значение));
		Иначе
			Результат.Вставить(КлючИЗначение.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет структуру ДопРеквизитыФормы параметрами и вспомогательными значениями
//Реквизит формы "ДопРеквизитыФормы" заполняется структурой:
//	* ГодОтчета - Число - для корректного заполнения списков выборов, расчетов и т.д.
//	* НалогоплательщикКатегория - Число - для уточения некоторых парамтеров рассчетов
//	* НалогоплательщикСтатус - Строка - для уточения некоторых парамтеров рассчетов
//	* НалогоплательщикСтрана - СправочникСсылка.СтраныМира - для уточения некоторых парамтеров рассчетов
//	* ВидДокумента - Строка - см. команды "Доход..." и "Вычет..." в форме помощника заполнения
//	* ИИС - Булево - является ли операция операцией по ИИС
//	* СтруктураДокумента - Структура - содержимое документа для заполнения формы
//	* СтавкаНалогаПоУмолчанию - Число - ставка налога, применяемая по умолчанию
//	* СписокСтавокНалога - СписокЗначений - ставки налога, допустимые для указанного статуса налогоплательщика
//
//
//Параметры:
//	Форма - управляемая форма документа, добавляемого в список помощника заполнения
//
Процедура ЗаполнитьДопРеквизитыФормыДокументаПомощника(Форма) Экспорт
	
	// Обязательные параметры формы документа:
	Форма.ДопРеквизитыФормы = Новый Структура("ГодОтчета,НалогоплательщикКатегория,НалогоплательщикСтатус,
		|НалогоплательщикСтрана,ВидДокумента,ИИС,Период");
	ЗаполнитьЗначенияСвойств(Форма.ДопРеквизитыФормы, Форма.Параметры);
	
	Если Форма.Параметры.Свойство("СтруктураДокумента") И ЗначениеЗаполнено(Форма.Параметры.СтруктураДокумента) Тогда
		// звгрузка структуры документа из параметров формы
		Форма.ДопРеквизитыФормы.Вставить("СтруктураДокумента", Форма.Параметры.СтруктураДокумента);
	Иначе
		// заполнение структуры документа значениями по умолчанию
		Форма.ДопРеквизитыФормы.Вставить("СтруктураДокумента", 
				СтруктураДокументаСХранилищамиТаблиц(
						НоваяСтруктураДокументаДоходаВычета(Форма.ДопРеквизитыФормы.ВидДокумента, 
												Форма.ДопРеквизитыФормы.мВыбраннаяФорма, 
												Форма.ДопРеквизитыФормы.ИИС)));
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("СписокОшибок") И ЗначениеЗаполнено(Форма.Параметры.СписокОшибок) Тогда
		Форма.ДопРеквизитыФормы.Вставить("СписокОшибок", Форма.Параметры.СписокОшибок);
	Иначе
		Форма.ДопРеквизитыФормы.Вставить("СписокОшибок", Неопределено);
	КонецЕсли;
	
	Форма.ДопРеквизитыФормы.Вставить("СтавкаНалогаПоУмолчанию", ?(Форма.ДопРеквизитыФормы.НалогоплательщикСтатус = 2, 30, 13));
	
	СписокСтавок = Новый СписокЗначений;
	Если Форма.ДопРеквизитыФормы.НалогоплательщикСтатус = 2 Тогда
		СписокСтавок.Добавить(30, "30 %");
		СписокСтавок.Добавить(15, "15 %");
		СписокСтавок.Добавить(13, "13 %");
	Иначе
		СписокСтавок.Добавить(13, "13 %");
		СписокСтавок.Добавить(35, "35 %");
		СписокСтавок.Добавить(9, " 9 %");
	КонецЕсли;
	Форма.ДопРеквизитыФормы.Вставить("СписокСтавокНалога", СписокСтавок);
	
	
КонецПроцедуры

// Проверяет наличие ошибок во всей декларации, заполняет список ошибок
//
//Параметры:
//	
//
//Возвращаемое значение:
//	_Тип_ - _Описание_
//
Функция ДекларацияНеСодержитОшибок(ФормаПомощника, СписокОшибок) Экспорт

	РезультатПроверки = Истина;
	СписокОшибок      = Новый Массив;
	
	ДанныеПомощника   = ДанныеПомощникаИзФормы(ФормаПомощника);
	ПроверитьРеквизитДекларации(ДанныеПомощника, "ГодОтчета", РезультатПроверки, СписокОшибок, НСтр("ru='Не указан год получения доходов'"));
	Если ДанныеПомощника.ВидДекларации <> 0 Тогда
		ПроверитьРеквизитДекларации(ДанныеПомощника, "НомерКорректировки", РезультатПроверки, СписокОшибок, НСтр("ru='Не указан номер корректировки'"));
	КонецЕсли;
	ПроверитьРеквизитДекларации(ДанныеПомощника, "НалогоплательщикФамилия", РезультатПроверки, СписокОшибок, НСтр("ru='Не указана фамилия налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "НалогоплательщикИмя", РезультатПроверки, СписокОшибок, НСтр("ru='Не указано имя налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "НалогоплательщикДатаРождения", РезультатПроверки, СписокОшибок, НСтр("ru='Не указана дата рождения налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "НалогоплательщикМестоРождения", РезультатПроверки, СписокОшибок, НСтр("ru='Не указано место рождения налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "НалогоплательщикСтрана", РезультатПроверки, СписокОшибок, НСтр("ru='Не указано гражданство налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "ДокументКодВида", РезультатПроверки, СписокОшибок, НСтр("ru='Не указан вид документа налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "ДокументСерияИНомер", РезультатПроверки, СписокОшибок, НСтр("ru='Не указана серия-номер документа налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "ДокументДатаВыдачи", РезультатПроверки, СписокОшибок, НСтр("ru='Не указана дата выдачи документа налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "ДокументКемВыдан", РезультатПроверки, СписокОшибок, НСтр("ru='Не указано место выдачи документа налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "НалогоплательщикСтатус", РезультатПроверки, СписокОшибок, НСтр("ru='Не указан статус налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "НалогоплательщикКатегория", РезультатПроверки, СписокОшибок, НСтр("ru='Не указана категория налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "АдресВРФОКТМО", РезультатПроверки, СписокОшибок, НСтр("ru='Не указан ОКТМО налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "КодИФНС", РезультатПроверки, СписокОшибок, НСтр("ru='Не указан код налоговой инспекции (ИФНС) налогоплательщика'"));
	ПроверитьРеквизитДекларации(ДанныеПомощника, "ДатаПодписи", РезультатПроверки, СписокОшибок, НСтр("ru='Не указана дата подписания декларации'"));
	
	Если ДанныеПомощника.СписокДокументов.Количество() = 0 Тогда
		РезультатПроверки = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("ТитульныйЛист", Неопределено, "СписокДокументов", Неопределено, НСтр("ru='В декларации нет ни одного документа'")));
	КонецЕсли;
	
	ПроверитьКоличествоДокументовВида(ДанныеПомощника.СписокДокументов, "ВычетИИС", РезультатПроверки, СписокОшибок, "Вычет по ИИС");
	ПроверитьКоличествоДокументовВида(ДанныеПомощника.СписокДокументов, "ВычетНаДетей", РезультатПроверки, СписокОшибок, "Стандартный вычет на детей");
	ПроверитьКоличествоДокументовВида(ДанныеПомощника.СписокДокументов, "ВычетНаНалогоплательщика", РезультатПроверки, СписокОшибок, "Стандартный вычет на налогоплательщика");
	ПроверитьКоличествоДокументовВида(ДанныеПомощника.СписокДокументов, "ВычетСоциальный", РезультатПроверки, СписокОшибок, "Социальный вычет");
	
	Счетчик = 0;
	Для каждого СтрокаДокумента Из ДанныеПомощника.СписокДокументов Цикл
		
		ОшибкиДокумента = Новый Массив;
		Если Не ДокументНеСодержитОшибок(СтрокаДокумента.ВидДокумента, 
						ДанныеПомощника.ГодОтчета, СтрокаДокумента.СтруктураДокумента, 
						ОшибкиДокумента, Счетчик, ФормаПомощника.Декларация3НДФЛВыбраннаяФорма) Тогда
			РезультатПроверки = Ложь;
			ОшибкаДокумента = СтруктураОписанияОшибкиПомощника("Документ", Счетчик, "СписокДокументов", 
					Неопределено, СтрШаблон(НСтр("ru='Ошибка в документе ""%1""'"), СтрокаДокумента.Представление));
			ОшибкаДокумента.Вставить("СписокОшибокДокумента", ОшибкиДокумента);
			СписокОшибок.Добавить(ОшибкаДокумента);
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;

	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает таблицу значений с показателями для заполнения регламентированного отчета
Функция ДанныеДляЗаполненияОтчетаИзПомощника(ДанныеПомощника, Налогоплательщик, Период, Декларация3НДФЛ) Экспорт

	ДоходыВычеты               = ДанныеПомощника.СписокДокументов;
	
	ВыбраннаяФорма3НДФЛ = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
		"РегламентированныйОтчет3НДФЛ", Период, ?(ЗначениеЗаполнено(Декларация3НДФЛ), Декларация3НДФЛ, Неопределено));
	
	ПризнакиУплатыВозврата      = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУплатыВозврата(ВыбраннаяФорма3НДФЛ);
	ВидыДоходов                 = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма3НДФЛ);
	НалоговыеСтавки             = Отчеты.РегламентированныйОтчет3НДФЛ.НалоговыеСтавки(ВыбраннаяФорма3НДФЛ);
	КБК                         = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ);
	КодыВидовПредпринимательскойДеятельности = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовПредпринимательскойДеятельности(ВыбраннаяФорма3НДФЛ);
	КодыВидовДоходовРФ          = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовДоходовРФ(ВыбраннаяФорма3НДФЛ);
	ПределыВычетов              = Отчеты.РегламентированныйОтчет3НДФЛ.ПределыВычетов(ВыбраннаяФорма3НДФЛ);
	НеоблагаемыеСуммыДоходов    = Отчеты.РегламентированныйОтчет3НДФЛ.НеоблагаемыеСуммыДоходов(ВыбраннаяФорма3НДФЛ);
	ОКТМО                       = ДанныеПомощника.АдресВРФОКТМО;
	
	
	ТаблицаДанныхЗаполнения = Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхЗаполнения();
	
	// Добавление служебной колонки для анализа доходов/расходов
	МассивТиповВида = Новый Массив;
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц"));
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ВычетыФизическихЛиц"));

	ПоказателиИмущественногоВычета = ОписаниеПоказателейИмущественногоВычета(ВыбраннаяФорма3НДФЛ);
	КодыИсточниковДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.КодыИсточниковДоходов(ВыбраннаяФорма3НДФЛ);
	
	ВидДоходаВычета = ТаблицаДанныхЗаполнения.Колонки.Добавить("Вид", Новый ОписаниеТипов(МассивТиповВида));
	
	Для Каждого СтрокаТаблицы Из ДоходыВычеты Цикл
		
		
		Если СтрокаТаблицы.ВидДокумента = "ДоходПредпринимателя" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода          = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка    = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид                = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность;
			НоваяСтрока.КБК                = КБКИсточникаДохода(НоваяСтрока.Вид, КБК);
			НоваяСтрока.ОКТМО              = ОКТМО;
			НоваяСтрока.СтруктураДанных    = ДанныеЗаполнения_ПредпринимательскаяДеятельность(СтрокаТаблицы.СтруктураДокумента, КодыВидовПредпринимательскойДеятельности.ПредпринимательскаяДеятельность);
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ДоходПродажаПрочегоИмущества"
			Или СтрокаТаблицы.ВидДокумента = "ДоходПродажаНедвижимости"
			Или СтрокаТаблицы.ВидДокумента = "ДоходПродажаАвто" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода       = ВидыДоходов.Иное;
			НоваяСтрока.Вид             = ?(СтрокаТаблицы.ВидДокумента = "ДоходПродажаНедвижимости", 
									Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости, 
									Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества);
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.КБК             = КБКИсточникаДохода(НоваяСтрока.Вид, КБК);
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПродажаИмущества(СтрокаТаблицы.СтруктураДокумента, 
						НоваяСтрока.НалоговаяСтавка, Период, КодыВидовДоходовРФ);
			НоваяСтрока.ОКТМО           = НоваяСтрока.СтруктураДанных.ОКТМОИсточникаДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная          = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
			// Добавление данных для учета на листе Д2 или Ж
			Если СтрокаТаблицы.СтруктураДокумента.ВидИмущества = "Стройка" Тогда
				// лист Ж
				ДобавитьДанныеЗаполненияДолевогоСтроительства(
					ТаблицаДанныхЗаполнения,
					СтрокаТаблицы.СтруктураДокумента,
					НоваяСтрока.ВидДохода,
					НоваяСтрока.НалоговаяСтавка,
					ПределыВычетов);
			Иначе
				// лист Д2
				ДобавитьДанныеЗаполненияИмущественногоВычета(
					ТаблицаДанныхЗаполнения,
					СтрокаТаблицы.СтруктураДокумента,
					НоваяСтрока.ВидДохода,
					НоваяСтрока.НалоговаяСтавка,
					ПоказателиИмущественногоВычета,
					КодыИсточниковДоходов, 
					ПределыВычетов); // ДЕНЬГИ
			КонецЕсли;
			
			// Добавление данных для учета в приложении к декларации
			Если НоваяСтрока.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
				ДобавитьДанныеКадастровойИнформации(
					ТаблицаДанныхЗаполнения,
					СтрокаТаблицы.СтруктураДокумента);
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ДоходСдачаВАренду" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка        = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид                    = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду;
			НоваяСтрока.КБК                    = КБКИсточникаДохода(НоваяСтрока.Вид, КБК);
			НоваяСтрока.ОКТМО                  = СтрокаТаблицы.СтруктураДокумента.ОКТМО;
			НоваяСтрока.СтруктураДанных        = ДанныеЗаполнения_СдачаИмуществаВАренду(СтрокаТаблицы.СтруктураДокумента, 
					НоваяСтрока.НалоговаяСтавка, КодыВидовДоходовРФ);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ДоходПодарок" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка        = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид                    = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок;
			НоваяСтрока.КБК                    = КБКИсточникаДохода(НоваяСтрока.Вид, КБК);
			НоваяСтрока.ОКТМО                  = СтрокаТаблицы.СтруктураДокумента.ОКТМО;
			НоваяСтрока.СтруктураДанных        = ДанныеЗаполнения_Подарок(СтрокаТаблицы.СтруктураДокумента, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
			ПараметрыРасчета = Новый Структура("КодДохода,СуммаДохода,КодВычета,СуммаВычета",
					"2720", СтрокаТаблицы.СтруктураДокумента.СуммаДохода,
					"501", ?(СтрокаТаблицы.СтруктураДокумента.Свойство("СуммаВычета"), СтрокаТаблицы.СтруктураДокумента.СуммаВычета, 0));
					
			// Добавление данных для учета на листе Г
			УчестьКодДоходаВНеоблагаемыхСуммах(ТаблицаДанныхЗаполнения, ПараметрыРасчета, НоваяСтрока, ВыбраннаяФорма3НДФЛ);
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ДоходПрочиеДоходыВРФ" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка        = СтрокаТаблицы.СтруктураДокумента.СтавкаНалога;
			НоваяСтрока.Вид                    = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ;
			НоваяСтрока.ОКТМО                  = СтрокаТаблицы.СтруктураДокумента.ОКТМО;
			НоваяСтрока.СтруктураДанных        = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДокумента, 
						НоваяСтрока.НалоговаяСтавка, КодыВидовДоходовРФ.ИнойДоходОтИсточникаРФ);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			НоваяСтрока.КБК                    = КБКИсточникаДохода(НоваяСтрока.Вид, КБК, 
							НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ);
			
			// Добавление данных для учета на листе Г
			УчестьКодДоходаВНеоблагаемыхСуммах(ТаблицаДанныхЗаполнения, СтрокаТаблицы.СтруктураДокумента, НоваяСтрока, ВыбраннаяФорма3НДФЛ);
			// Добавление данных для учета на листе Д2
			УчестьКодДоходаВИмущественномВычете(ТаблицаДанныхЗаполнения, СтрокаТаблицы.СтруктураДокумента, НоваяСтрока, 
						ПоказателиИмущественногоВычета, КодыИсточниковДоходов, ПределыВычетов); // ДЕНЬГИ
			// Добавление данных для учета на листе Ж
			УчестьКодДоходаВПрофессиональныхВычетах(ТаблицаДанныхЗаполнения, СтрокаТаблицы.СтруктураДокумента, НоваяСтрока);
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ДоходДивиденды" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода              = ВидыДоходов.Дивиденды;
			НоваяСтрока.НалоговаяСтавка        = НалоговыеСтавки.Дивиденды;
			НоваяСтрока.Вид                    = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды;
			НоваяСтрока.ОКТМО                  = СтрокаТаблицы.СтруктураДокумента.ОКТМО;
			НоваяСтрока.СтруктураДанных        = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДокумента, 
						НоваяСтрока.НалоговаяСтавка, КодыВидовДоходовРФ.Дивиденды);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			НоваяСтрока.КБК                    = КБКИсточникаДохода(НоваяСтрока.Вид, КБК, 
							НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ);
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ДоходСправка2НДФЛ" Тогда 
			// зарплата, операции с ЦБ, материальная выгода, дивиденды
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода              = СтрокаТаблицы.СтруктураДокумента.ВидДохода;
			НоваяСтрока.НалоговаяСтавка        = СтрокаТаблицы.СтруктураДокумента.СтавкаНалога;
			НоваяСтрока.Вид                    = СтрокаТаблицы.СтруктураДокумента.ИсточникиДоходов;
			НоваяСтрока.КБК                    = КБКИсточникаДохода(НоваяСтрока.Вид, КБК);
			НоваяСтрока.ОКТМО                  = СтрокаТаблицы.СтруктураДокумента.ОКТМО;
			Если СтрокаТаблицы.СтруктураДокумента.ИсточникиДоходов = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
				НоваяСтрока.СтруктураДанных        = ДанныеЗаполнения_ОперацииСЦеннымиБумагами(СтрокаТаблицы.СтруктураДокумента, 
									НоваяСтрока.НалоговаяСтавка, КодыВидовДоходовРФ);
			Иначе
				НоваяСтрока.СтруктураДанных        = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДокумента, 
							НоваяСтрока.НалоговаяСтавка, СтрокаТаблицы.СтруктураДокумента.КодВидаДохода);
				Если Год(Период) >= 2018 Тогда
					НоваяСтрока.СтруктураДанных.Вставить("ВычетыПредоставленныеАгентом", ДанныеЗаполнения_ВычетыПредоставленныеАгентом(СтрокаТаблицы.СтруктураДокумента));
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.СуммаНалогаИсчисленная = СтрокаТаблицы.СтруктураДокумента.СуммаНалогаНачисленая;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = СтрокаТаблицы.СтруктураДокумента.СуммаНалогаУдержанная;
			
			Если НоваяСтрока.Вид <> Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
				
				Для каждого СтрокаСправки Из СтрокаТаблицы.СтруктураДокумента.Строки2НДФЛ Цикл
					
					// Добавление данных для учета на листе Г
					УчестьКодДоходаВНеоблагаемыхСуммах(ТаблицаДанныхЗаполнения, СтрокаСправки, НоваяСтрока, ВыбраннаяФорма3НДФЛ);
					// Добавление данных для учета на листе Д2
					УчестьКодДоходаВИмущественномВычете(ТаблицаДанныхЗаполнения, СтрокаСправки, НоваяСтрока, 
								ПоказателиИмущественногоВычета, КодыИсточниковДоходов, ПределыВычетов); // ДЕНЬГИ
					// Добавление данных для учета на листе Ж
					УчестьКодДоходаВПрофессиональныхВычетах(ТаблицаДанныхЗаполнения, СтрокаСправки, НоваяСтрока);
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ДоходЗаПределамиРФ" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка        = СтрокаТаблицы.СтруктураДокумента.СтавкаНалога;
			НоваяСтрока.Вид                    = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ;
			НоваяСтрока.КБК                    = КБКИсточникаДохода(НоваяСтрока.Вид, КБК);
			НоваяСтрока.СтруктураДанных        = ДанныеЗаполнения_ДоходЗаПределамиРФ(СтрокаТаблицы.СтруктураДокумента, НоваяСтрока.НалоговаяСтавка, ВыбраннаяФорма3НДФЛ);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаПодлежащаяЗачетуВРФ;
			
			ПараметрыРасчета = Новый Структура("КодДохода,СуммаДохода,КодВычета,СуммаВычета",
					СтрокаТаблицы.СтруктураДокумента.КодДохода, СтрокаТаблицы.СтруктураДокумента.СуммаДоходаВРублях,
					СтрокаТаблицы.СтруктураДокумента.КодВычета, СтрокаТаблицы.СтруктураДокумента.СуммаВычета);
			
			// Добавление данных для учета на листе Г
			УчестьКодДоходаВНеоблагаемыхСуммах(ТаблицаДанныхЗаполнения, ПараметрыРасчета, НоваяСтрока, ВыбраннаяФорма3НДФЛ);
			// Добавление данных для учета на листе Д2
			УчестьКодДоходаВИмущественномВычете(ТаблицаДанныхЗаполнения, ПараметрыРасчета, НоваяСтрока,
						ПоказателиИмущественногоВычета, КодыИсточниковДоходов, ПределыВычетов); // ДЕНЬГИ
			// Добавление данных для учета на листе Ж
			УчестьКодДоходаВПрофессиональныхВычетах(ТаблицаДанныхЗаполнения, ПараметрыРасчета, НоваяСтрока);
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ВычетНаНалогоплательщика" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.Вид  = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СтандартныйВычет(СтрокаТаблицы.СтруктураДокумента);
			
			НоваяСтрока.НалоговаяСтавка        = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное;
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ВычетНаДетей" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.Вид  = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ВычетНаДетей(СтрокаТаблицы.СтруктураДокумента);
			
			НоваяСтрока.НалоговаяСтавка        = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное; //?
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ВычетСоциальный" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.Вид  = Перечисления.ВычетыФизическихЛиц.Социальный;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СоциальныеВычеты(СтрокаТаблицы.СтруктураДокумента);
			
			НоваяСтрока.НалоговаяСтавка        = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное; //?
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ВычетСтрахования" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.Вид  = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПенсионныеВзносыСтрахованиеЖизни(СтрокаТаблицы.СтруктураДокумента);
			
			НоваяСтрока.НалоговаяСтавка        = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.ВидДохода              = ВидыДоходов.Иное; //?
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ВычетИИС" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода        = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка  = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид              = Перечисления.ВычетыФизическихЛиц.Инвестиционный;
			НоваяСтрока.КБК              = КБКИсточникаДохода(Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ, КБК);
			НоваяСтрока.ОКТМО            = ОКТМО;
			НоваяСтрока.СтруктураДанных  = ДанныеЗаполнения_ИнвестиционныйВычет(СтрокаТаблицы.СтруктураДокумента);
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ВычетИмущественный" Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода        = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка  = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид              = Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости;
			НоваяСтрока.СтруктураДанных  = ДанныеЗаполнения_ВычетНаПриобретениеИлиСтроительствоНедвижимости(СтрокаТаблицы.СтруктураДокумента.СтруктураДанныхДекларации // ДЕНЬГИ
							, НоваяСтрока.НалоговаяСтавка);
			
		ИначеЕсли СтрокаТаблицы.ВидДокумента = "ВычетУбыткиПрошлыхЛет" Тогда
			
			КодВидаОперации = ?(СтрокаТаблицы.СтруктураДокумента.ИИС, "1", "2");
			Если СтрокаТаблицы.СтруктураДокумента.Свойство("ОстатокУбыткаЦБ") И ЗначениеЗаполнено(СтрокаТаблицы.СтруктураДокумента.ОстатокУбыткаЦБ)
				Или СтрокаТаблицы.СтруктураДокумента.Свойство("ОстатокУбыткаПФИ") И ЗначениеЗаполнено(СтрокаТаблицы.СтруктураДокумента.ОстатокУбыткаПФИ) Тогда
				
				НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
				НоваяСтрока.ВидДохода        = ВидыДоходов.Иное;
				НоваяСтрока.НалоговаяСтавка  = НалоговыеСтавки.ПоУмолчанию;
				НоваяСтрока.Вид              = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
				НоваяСтрока.СтруктураДанных  = Новый Структура;
				НоваяСтрока.СтруктураДанных.Вставить("КодВидаОперации", КодВидаОперации);
				НоваяСтрока.СтруктураДанных.Вставить("Год",             СтрокаТаблицы.СтруктураДокумента.ГодУбытка);
				НоваяСтрока.СтруктураДанных.Вставить("ВидСчета",        ?(СтрокаТаблицы.СтруктураДокумента.ИИС, "ИндивидуальныйИнвестиционныйСчет", "ПрочиеСчета"));
				НоваяСтрока.СтруктураДанных.Вставить("СуммаУбыткаЦБ",   ?(СтрокаТаблицы.СтруктураДокумента.Свойство("ОстатокУбыткаЦБ"), СтрокаТаблицы.СтруктураДокумента.ОстатокУбыткаЦБ, 0));
				НоваяСтрока.СтруктураДанных.Вставить("СуммаУбыткаПФИ",  ?(СтрокаТаблицы.СтруктураДокумента.Свойство("ОстатокУбыткаПФИ"), СтрокаТаблицы.СтруктураДокумента.ОстатокУбыткаПФИ, 0));
				
			Иначе
				
				ТабличнаяЧасть = ?(ТипЗнч(СтрокаТаблицы.СтруктураДокумента.ТабличнаяЧасть) = Тип("ХранилищеЗначения"), 
							СтрокаТаблицы.СтруктураДокумента.ТабличнаяЧасть.Получить, СтрокаТаблицы.СтруктураДокумента.ТабличнаяЧасть);
				Для каждого СтрокаТЧ Из СтрокаТаблицы.СтруктураДокумента.ТабличнаяЧасть Цикл
					
					Если СтрокаТЧ.УбытокПоЦеннымБумагам = 0 И СтрокаТЧ.УбытокПоФинансовымИнстументам = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
					НоваяСтрока.ВидДохода        = ВидыДоходов.Иное;
					НоваяСтрока.НалоговаяСтавка  = НалоговыеСтавки.ПоУмолчанию;
					НоваяСтрока.Вид              = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
					НоваяСтрока.СтруктураДанных  = ДанныеЗаполнения_УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(СтрокаТЧ, НоваяСтрока.НалоговаяСтавка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьИтоговыеПоказателиПредпринимательскойДеятельности(ДанныеПомощника, ТаблицаДанныхЗаполнения);
	ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	// ДЕНЬГИ РассчитатьСуммуДоходовНеПодлежащуюНалогообложению(ТаблицаДанныхЗаполнения, ВидыДоходов.Иное, НалоговыеСтавки.ПоУмолчанию, НеоблагаемыеСуммыДоходов);
	
	ТаблицаНалоговойБазы  = ТаблицаНалоговойБазы(ТаблицаДанныхЗаполнения, 
						ПределыВычетов, ВидыДоходов.Иное, 
						НалоговыеСтавки.ПоУмолчанию, ДанныеПомощника);
	НалогКУплате          = ТаблицаНалоговойБазы.Итог("СуммаНалогаПодлежащаяУплате");
	НалогКВозврату        = ТаблицаНалоговойБазы.Итог("СуммаНалогаПодлежащаяВозврату");
	СведенияОСуммахНалога = ТаблицаСведенийОСуммахНалога(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ПризнакиУплатыВозврата, 
			Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ), ОКТМО);
	
	// Объединяем таблицы и удаляем служебную колонку.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНалоговойБазы, ТаблицаДанныхЗаполнения);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОСуммахНалога, ТаблицаДанныхЗаполнения);
	ТаблицаДанныхЗаполнения.Колонки.Удалить(ВидДоходаВычета);
	
	// Дополним данные помощника рассчитанными налогами
	// Это нужно, чтобы сразу сохранить правильные данные в отчете и не вызывать повторное сохранение.
	ДанныеПомощника.НалогКУплате   = НалогКУплате;
	ДанныеПомощника.НалогКВозврату = НалогКВозврату;
	
	Возврат ТаблицаДанныхЗаполнения;

КонецФункции

// Заполняет список значений ссылками на налогоплательщиков
//
//Параметры:
//	СписокВыбора - СписокЗначений
//
Процедура ЗаполнитьСписокВыбораНалогоплательщиков(СписокВыбора) Экспорт
	
	Если СписокВыбора = Неопределено Тогда
		СписокВыбора = Новый СписокЗначений;
	КонецЕсли;
	
	СписокВыбора.Очистить();
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоддерживаемыеНалоговыеПериоды() Экспорт
	
	ПоддерживаемыеНалоговыеПериоды = Новый Массив;
	
	Период = НачалоГода(ДатаНачалаПрименения());
	Пока Период <= НачалоГода(ТекущаяДатаСеанса()) Цикл
		ПоддерживаемыеНалоговыеПериоды.Добавить(Период);
		Период = ДобавитьМесяц(Период, 12);
	КонецЦикла;
	
	Возврат ПоддерживаемыеНалоговыеПериоды;
	
КонецФункции

Функция ДанныеПомощникаЗаполнения(Декларация) Экспорт
	
	Если Не ЗначениеЗаполнено(Декларация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеДанныхОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "ДанныеОтчета");
	Если ТипЗнч(ХранилищеДанныхОтчета) <> Тип("ХранилищеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ХранилищеДанныхОтчета.Получить();
	Если ДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения")
		И ДанныеОтчета.ДанныеПомощникаЗаполнения.Количество() > 0 Тогда
		Возврат ДанныеОтчета.ДанныеПомощникаЗаполнения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТаблицаПлатежейДляФормированияПлатежныхПоручений(НалогиКУплате, ПериодУплаты) Экспорт
	
	// ДЕНЬГИ
	Возврат Неопределено;
	// Конец ДЕНЬГИ 
	
КонецФункции

Функция СтруктураНавигации() Экспорт
	
	// ДЕНЬГИ
	Возврат Неопределено;
	// Конец ДЕНЬГИ 
	
КонецФункции

Функция СтруктураШагаДоходыВычеты(НомерШага)
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	Возврат Неопределено;
	// Конец ДЕНЬГИ
	
КонецФункции

Функция СтруктураШагаДекларация(НомерШага)
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	Возврат Неопределено;
	// Конец ДЕНЬГИ
	
КонецФункции

Функция СтруктураШагаОплатаНалога(НомерШага)
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	Возврат Неопределено;
	// Конец ДЕНЬГИ
	
КонецФункции

Процедура ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага)
	
	// Ключевые параметры формы помощника.
	СтруктураШага.СтруктураПараметровФормы.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураШага.СтруктураПараметровФормы.Вставить("Период", Дата(1, 1, 1));
	
КонецПроцедуры

Функция ТаблицаДоходовОтПредпринимательскойДеятельности(Организация, НачалоПериода, КонецПериода) Экспорт
	
	// ДЕНЬГИ
	Возврат Неопределено;
	// Конец ДЕНЬГИ 
	
КонецФункции

Функция ТорговыйСборУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	
	// ДЕНЬГИ
	Возврат Неопределено;
	// Конец ДЕНЬГИ 
	
КонецФункции

Функция АвансовыеПлатежиПоНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	// ДЕНЬГИ
	Возврат Неопределено;
	// Конец ДЕНЬГИ 
	
КонецФункции

Функция НомерКорректировки(Декларация) Экспорт
	
	Если ЗначениеЗаполнено(Декларация) Тогда
		НомерКорректировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "Вид");
	Иначе
		НомерКорректировки = 0;
	КонецЕсли;
	
	Возврат НомерКорректировки;
	
КонецФункции

Функция СтатусУплаты(ПараметрыЗадачи)
	
	Статус = "";
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
	Возврат Статус;
	
КонецФункции

#Область СохранениеДекларации

Функция ТаблицаНалоговойБазы(ТаблицаДанныхЗаполнения, ПределыВычетов, ВидДоходаПоУмолчанию, НалоговаяСтавкаПоУмолчанию, ДанныеПомощника)
	
	ТаблицаНалоговойБазы = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяУплате", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяВозврату", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	КолонкиГруппировок = ("ВидДохода, НалоговаяСтавка");
	ВидыДоходов = ТаблицаДанныхЗаполнения.Скопировать(, КолонкиГруппировок);
	ВидыДоходов.Свернуть(КолонкиГруппировок, );
	ВидыДоходов.Сортировать(КолонкиГруппировок);
	ТаблицаДанныхЗаполнения.Индексы.Добавить(КолонкиГруппировок);
	
	ОтборДанныхЗаполнения = Новый Структура(КолонкиГруппировок);
	Для Каждого ВидДохода Из ВидыДоходов Цикл
		
		Если Не ЗначениеЗаполнено(ВидДохода.ВидДохода) Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетНалоговойБазы = НоваяСтруктураРасчетаНалоговойБазы(ВидДохода.НалоговаяСтавка, ВидДохода.ВидДохода);
		
		ЗаполнитьЗначенияСвойств(ОтборДанныхЗаполнения, ВидДохода);
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхЗаполнения) Цикл
			ДобавитьРасчетНалоговойБазыПоВидуДохода(СтрокаТаблицы.Вид, СтрокаТаблицы.СтруктураДанных, РасчетНалоговойБазы);
		КонецЦикла;
		
		РассчитатьИтогиРасчетаНалоговойБазы(РасчетНалоговойБазы, ТаблицаДанныхЗаполнения, ПределыВычетов, ДанныеПомощника);
		
		// Раздел 2 заполняется только при наличии доходов с таким же видом и налоговой ставкой.
		Если РасчетНалоговойБазы.ОбщаяСуммаДоходов <> 0 Тогда
			НоваяСтрока = ТаблицаНалоговойБазы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидДохода);
			НоваяСтрока.СтруктураДанных = РасчетНалоговойБазы;
			НоваяСтрока.СуммаНалогаПодлежащаяУплате   = РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате;
			НоваяСтрока.СуммаНалогаПодлежащаяВозврату = РасчетНалоговойБазы.СуммаНалогаПодлежащаяВозврату;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если нет ни одного дохода или вычета, подается нулевая декларация.
	// Добавляем пустую строку данных для заполнения раздела 2.
	Если ТаблицаНалоговойБазы.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = ВидДоходаПоУмолчанию;
		НоваяСтрока.НалоговаяСтавка = НалоговаяСтавкаПоУмолчанию;
		НоваяСтрока.СтруктураДанных = НоваяСтруктураРасчетаНалоговойБазы(НалоговаяСтавкаПоУмолчанию, ВидДоходаПоУмолчанию);
	КонецЕсли;
	
	Возврат ТаблицаНалоговойБазы;
	
КонецФункции

Функция ДанныеЗаполнения_ПродажаИмущества(ДанныеФормы, НалоговаяСтавка, Период, КодыВидовДоходовРФ)
	
	Если ДанныеФормы.ВидИмущества = "Жилая" Или ДанныеФормы.ВидИмущества = "Доля" Или ДанныеФормы.ВидИмущества = "Стройка" Тогда
		КодВидаДохода = КодыВидовДоходовРФ.ПродажаНедвижимости;
	Иначе
		КодВидаДохода = КодыВидовДоходовРФ.ПродажаИмущества;
	КонецЕсли;
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ",       НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ",               КодВидаДохода);
	ДанныеДекларации.Вставить("ВидВычета",                     ДанныеФормы.ВидВычета);
	ДанныеДекларации.Вставить("СуммаВычета",                   ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ",          ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ",          ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ",        ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ",                 ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ",      ДанныеФормы.СуммаДохода - ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",      СуммаНалогаИсчисленная(ДанныеДекларации.СуммаОблагаемогоДоходаРФ, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",       0);
	
	ДанныеДекларации.Вставить("ВидИмущества",       ДанныеФормы.ВидИмущества);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СдачаИмуществаВАренду(ДанныеФормы, НалоговаяСтавка, КодыВидовДоходовРФ)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ",    НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ",            КодыВидовДоходовРФ.СдачаИмуществаВАренду);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ",       ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ",       ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ",     ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ",              ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ",   ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",   СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",    0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_Подарок(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПрочиеДоходы(ДанныеФормы, НалоговаяСтавка, КодВидаДохода)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ",       ДанныеФормы.СтавкаНалога);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ",               КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ",          ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ",          ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ",        ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ",                 ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ",      ДанныеФормы.СуммаДоходаОблагаемая);
	ДанныеДекларации.Вставить("СуммаВычета",                   ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",  ?(ДанныеФормы.Свойство("СуммаНалогаНачисленая"), 
					ДанныеФормы.СуммаНалогаНачисленая, 
					СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка)));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",       ДанныеФормы.СуммаНалогаУдержанная);
	
	ДанныеДекларации.Вставить("КодДохода",      ?(ДанныеФормы.Свойство("КодДохода"), ДанныеФормы.КодДохода, ""));
	ДанныеДекларации.Вставить("СуммаДохода",    ?(ДанныеФормы.Свойство("СуммаДохода"), ДанныеФормы.СуммаДохода, 0));
	ДанныеДекларации.Вставить("КодВычета",      ?(ДанныеФормы.Свойство("КодВычета"), ДанныеФормы.КодВычета, ""));
	
	Если ЭтоОперацияСЦБ(ДанныеДекларации.КодДохода) Тогда
		ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами();
		СтрокаТаблицы = ТаблицаДоходовВычетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДекларации);
		ДанныеДекларации.Вставить("ТаблицаДоходовВычетов", ТаблицаДоходовВычетов);
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СтандартныйВычет(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("СтандартныйВычетПо218_1_1", ДанныеФормы.СуммаВычета_3000);
	ДанныеДекларации.Вставить("СтандартныйВычетПо218_1_2", ДанныеФормы.СуммаВычета_500);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ВычетНаДетей(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КоличествоМесяцевСуммаДоходаМеньшеПорога",      ДанныеФормы.КоличествоМесяцев);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетей",                       ДанныеФормы.СтандартныйВычет);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейЕдинственномуРодителю",  ДанныеФормы.ДвойнойВычет);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейИнвалидов",              ДанныеФормы.ВычетНаИнвалидов);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю",  ДанныеФормы.ДвойнойВычетНаИнвалидов);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СоциальныеВычеты(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("СоциальныйВычетПожертвования", ДанныеФормы.Пожертвования);
	ДанныеДекларации.Вставить("СоциальныйВычетОбучениеДетей", ДанныеФормы.ОбучениеДетей);
	ДанныеДекларации.Вставить("СоциальныйВычетДорогостоящееЛечение", ДанныеФормы.ДорогостоящееЛечение);
	ДанныеДекларации.Вставить("СоциальныйВычетОбучениеСвое", ДанныеФормы.ОбучениеСвое);
	ДанныеДекларации.Вставить("СоциальныйВычетЛечениеМедикаменты", ДанныеФормы.ЛечениеМедикаменты);
	ДанныеДекларации.Вставить("СоциальныйВычетМедикаменты",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "Медикаменты", 0));
	ДанныеДекларации.Вставить("СоциальныйВычетОбычноеЛечение",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ОбычноеЛечение", 0));
	ДанныеДекларации.Вставить("СоциальныйВычетМедицинскоеСтрахование", ДанныеФормы.МедицинскоеСтрахование);
	ДанныеДекларации.Вставить("СтраховыеВзносыНаПенсиюВсего", ДанныеФормы.СтраховыеВзносыНаПенсию);
	ДанныеДекларации.Вставить("СтраховыеВзносыНаПенсиюКВычету", ДанныеФормы.СтраховыеВзносыНаПенсию);
	ДанныеДекларации.Вставить("РасходыНаПрохождениеНезависимойОценкиКвалификации", ДанныеФормы.ОценкаКвалификации);
	ДанныеДекларации.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПенсионныеВзносыСтрахованиеЖизни(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("ИННПенсионногоФонда", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КПППенсионногоФонда", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ВидДоговораПенсионногоОбеспечения", ДанныеФормы.ВидДоговора);
	ДанныеДекларации.Вставить("НаименованиеПенсионногоФонда", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("ДатаДоговораПенсионногоОбеспечения", ДанныеФормы.ДатаДоговора);
	ДанныеДекларации.Вставить("НомерДоговораПенсионногоОбеспечения", ДанныеФормы.НомерДоговора);
	ДанныеДекларации.Вставить("СуммаВзносовПенсионныйФондВсего", 
			?(ДанныеФормы.Свойство("СуммаВзноса"), ДанныеФормы.СуммаВзноса, 0));
	ДанныеДекларации.Вставить("СуммаВзносовПенсионныйФондКВычету", 
			?(ДанныеФормы.Свойство("СуммаВычета"), ДанныеФормы.СуммаВычета, ДанныеФормы.СуммаВзноса));
	ДанныеДекларации.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ИнвестиционныйВычет(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("ИнвестиционныйВычет", ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("ИнвестиционныйВычетКВосстановлению", ДанныеФормы.СуммаДохода);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПредпринимательскаяДеятельность(ДанныеФормы, КодВидаДеятельности)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КодВидаДеятельностиИП",  Формат(Число(ДанныеФормы.ВидДеятельностиИндекс), "ЧЦ=2; ЧВН="));
	ДанныеДекларации.Вставить("ОКВЭДИП",                ДанныеФормы.ВидДеятельностиКод);
	ДанныеДекларации.Вставить("СуммаДоходаИП",          ДанныеФормы.СуммаДохода);
	Если Не ДанныеФормы.РасходыПодтвержденыДокументами Тогда
		ДанныеДекларации.Вставить("СуммаРасходовВПределахНормативаИП", ДанныеФормы.СуммаВычета);
		ДанныеДекларации.Вставить("СуммаРасходовИП",               0);
		ДанныеДекларации.Вставить("МатериальныеРасходыИП",         0);
		ДанныеДекларации.Вставить("АмортизацияИП",                 0);
		ДанныеДекларации.Вставить("ЗарплатаИП",                    0);
		ДанныеДекларации.Вставить("ЗарплатаПоТрудовымДоговорамИП", 0);
		ДанныеДекларации.Вставить("ПрочиеРасходыИП",               0);
	Иначе
		ДанныеДекларации.Вставить("СуммаРасходовВПределахНормативаИП", 0);
		ДанныеДекларации.Вставить("СуммаРасходовИП",        ДанныеФормы.СуммаВычета);
		ДанныеДекларации.Вставить("МатериальныеРасходыИП",  ДанныеФормы.МатериальныеРасходы);
		ДанныеДекларации.Вставить("АмортизацияИП",          ДанныеФормы.АмортизацияОС);
		ДанныеДекларации.Вставить("ЗарплатаИП",             ДанныеФормы.НаОплатуТрудаВсего);
		Если ДанныеФормы.Свойство("ПоТрудовымДоговорам") Тогда
			ДанныеДекларации.Вставить("ЗарплатаПоТрудовымДоговорамИП", ДанныеФормы.ПоТрудовымДоговорам);
		Иначе
			ДанныеДекларации.Вставить("ЗарплатаПоТрудовымДоговорамИП", 0);
		КонецЕсли;
		ДанныеДекларации.Вставить("ПрочиеРасходыИП",        ДанныеФормы.ПрочиеРасходы);
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ВычетНаПриобретениеИлиСтроительствоНедвижимости(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КодНаименованияОбъектаНедвижимости", ДанныеФормы.КодНаименованияОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ВидСобственностиНаОбъектНедвижимости", ДанныеФормы.ФормаСобственности);
	ДанныеДекларации.Вставить("СпособПриобретенияНедвижимости",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "СпособПриобретенияНедвижимости", ""));
	ДанныеДекларации.Вставить("ПризнакНалогоплательщикаОбъектаНедвижимости", ДанныеФормы.ПризнакНалогоплательщикаОбъектаНедвижимости);
	ДанныеДекларации.Вставить("НалогоплательщикПенсионер", ДанныеФормы.НалогоплательщикПенсионер);
	ДанныеДекларации.Вставить("КодНомераОбъектаНедвижимости", ДанныеФормы.КодНомераОбъектаНедвижимости);
	ДанныеДекларации.Вставить("КадастровыйНомерОбъектаНедвижимости", ДанныеФормы.КадастровыйНомерОбъектаНедвижимости);
	ДанныеДекларации.Вставить("АдресОбъектаНедвижимости", ДанныеФормы.АдресОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ДатаАктаОПередачеОбъектаНедвижимости", ДанныеФормы.ДатаАктаОПередачеОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ДатаРегистрацииПравСобственностиНаЖилье", ДанныеФормы.ДатаРегистрацииПравСобственностиНаЖилье);
	ДанныеДекларации.Вставить("ДатаРегистрацииПравСобственностиНаЗемлю", ДанныеФормы.ДатаРегистрацииПравСобственностиНаЗемлю);
	ДанныеДекларации.Вставить("ДатаЗаявленияОРаспределенииВычета", ДанныеФормы.ДатаЗаявленияОРаспределенииВычета);
	ДанныеДекларации.Вставить("ДоляВПравеСобственностиЧислитель", ДанныеФормы.ДоляВПравеСобственностиЧислитель);
	ДанныеДекларации.Вставить("ДоляВПравеСобственностиЗнаменатель", ДанныеФормы.ДоляВПравеСобственностиЗнаменатель);
	ДанныеДекларации.Вставить("ГодНачалаИспользованияВычета", ДанныеФормы.ГодНачалаИспользованияВычета);
	ДанныеДекларации.Вставить("СуммаРасходовНаПриобретениеНедвижимости", ДанныеФормы.СуммаРасходовНаПриобретениеНедвижимости);
	ДанныеДекларации.Вставить("СуммаПроцентовПоКредитуНаНедвижимость", ДанныеФормы.СуммаПроцентовПоКредитуНаНедвижимость);
	
	// Временные ключи для расчета итогов по данному вычету.
	ДанныеДекларации.Вставить("ОбъектПриобретенДо2014Года", ДанныеФормы.ОбъектПриобретенДо2014Года);
	ДанныеДекларации.Вставить("КредитОформленДо2014Года", ДанныеФормы.КредитОформленДо2014Года);
	ДанныеДекларации.Вставить("ВычетПрошлыхЛетСтоимость",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ВычетПрошлыхЛетСтоимость", 0));
	ДанныеДекларации.Вставить("ВычетПрошлыхЛетПроценты",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ВычетПрошлыхЛетПроценты", 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ОперацииСЦеннымиБумагами(ДанныеФормы, НалоговаяСтавка, КодыВидовДоходовРФ)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДоходаОблагаемая);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДоходаОблагаемая, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",  Окр(ДанныеФормы.СуммаНалогаУдержанная, 0));
	
	// Временные поля для расчета данных декларации.
	ДанныеДекларации.Вставить("ТаблицаДоходовВычетов", ДанныеФормы.Строки2НДФЛ);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ОплатаТруда(ДанныеФормы, НалоговаяСтавка, КлючиПоказателей)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ",       НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ",               ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ",          ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ",          ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ",        ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ",                 ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ",      ДанныеФормы.СуммаДоходаОблагаемая);
	Если КлючиПоказателей.Найти("СуммаОблагаемогоДоходаРФ") <> Неопределено Тогда
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",  СуммаНалогаИсчисленная(ДанныеФормы.СуммаДоходаОблагаемая, НалоговаяСтавка));
	Иначе
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",  СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	КонецЕсли;
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",       Окр(ДанныеФормы.СуммаНалога, 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ДоходЗаПределамиРФ(ДанныеФормы, НалоговаяСтавка, ВыбраннаяФорма3НДФЛ)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаЗаПределамиРФ",       НалоговаяСтавка);
	ДанныеДекларации.Вставить("ОКСМДоходаЗаПределамиРФ",                  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.Страна, "Код"));
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаЗаПределамиРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("ВалютаДоходаЗаПределамиРФ",                ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.ВалютаДохода, "Код"));
	ДанныеДекларации.Вставить("КодВидаДоходаЗаПределамиРФ",               ?(ДанныеФормы.Свойство("КодВидаДохода"), ДанныеФормы.КодВидаДохода, 
				КодПрочегоДоходаЗаПределамиРФ(ВыбраннаяФорма3НДФЛ, ДанныеФормы.КодДохода)));
	
	ДанныеДекларации.Вставить("ДатаПолученияДоходаЗаПределамиРФ",         ДанныеФормы.ДатаДохода);
	ДанныеДекларации.Вставить("КурсНаДатуДоходаЗаПределамиРФ",            ДанныеФормы.КурсНаДатуДохода / ДанныеФормы.КратностьНаДатуДохода);
	ДанныеДекларации.Вставить("СуммаДоходаЗаПределамиРФ",                 ДанныеФормы.СуммаДоходаВВалюте);
	ДанныеДекларации.Вставить("СуммаРубДоходаЗаПределамиРФ",              ДанныеФормы.СуммаДоходаВРублях);
	
	ДанныеДекларации.Вставить("ДатаУплатыНалогаЗаПределамиРФ",            ДанныеФормы.ДатаУплатыНалога);
	ДанныеДекларации.Вставить("КурсНаДатуУплатыНалогаЗаПределамиРФ",      ДанныеФормы.КурсНаДатуУплатыНалога / ДанныеФормы.КратностьНаДатуУплатыНалога);
	ДанныеДекларации.Вставить("СуммаНалогаУплаченнаяЗаПределамиРФ",       ДанныеФормы.СуммаНалогаВВалюте);
	ДанныеДекларации.Вставить("СуммаНалогаРубУплаченнаяЗаПределамиРФ",    ДанныеФормы.СуммаНалогаВРублях);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", Окр((ДанныеФормы.СуммаДоходаВРублях - ДанныеФормы.СуммаВычета) * ДанныеФормы.СтавкаНалога / 100, 2));
	Если ДанныеФормы.ДействуетДоговорОбИзбежанииДвойногоНалогообложения Тогда
		ДанныеДекларации.Вставить("СуммаПодлежащаяЗачетуВРФ",             Мин(ДанныеДекларации.СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ, ДанныеФормы.СуммаНалогаВРублях));
	Иначе
		ДанныеДекларации.Вставить("СуммаПодлежащаяЗачетуВРФ",             0);
	КонецЕсли;
	
	ДанныеДекларации.Вставить("КодДохода",      ДанныеФормы.КодДохода);
	ДанныеДекларации.Вставить("СуммаДохода",    ДанныеФормы.СуммаДоходаВРублях);
	ДанныеДекларации.Вставить("КодВычета",      ДанныеФормы.КодВычета);
	ДанныеДекларации.Вставить("СуммаВычета",    ДанныеФормы.СуммаВычета);
	
	Если ЭтоОперацияСЦБ(ДанныеДекларации.КодДохода) Тогда
		ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами();
		СтрокаТаблицы = ТаблицаДоходовВычетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеДекларации);
		ДанныеДекларации.Вставить("ТаблицаДоходовВычетов", ТаблицаДоходовВычетов);
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	
	// Временные поля для расчета данных декларации.
	ДанныеДекларации.Вставить("ВидСчета",        ДанныеФормы.ВидСчета);
	ДанныеДекларации.Вставить("Год",             ДанныеФормы.ГодУбытка);
	ДанныеДекларации.Вставить("СуммаУбыткаЦБ",   ДанныеФормы.УбытокЦБ);
	ДанныеДекларации.Вставить("СуммаУбыткаПФИ",  ДанныеФормы.УбытокПФИ);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КБК", РезультатРасчета.КБК);
	ДанныеДекларации.Вставить("ОКТМО", РезультатРасчета.ОКТМО);
	
	Если РезультатРасчета.СуммаНалога > 0 Тогда
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.Уплата);
		ДанныеДекларации.Вставить("СуммаНалога", РезультатРасчета.СуммаНалога);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", 0);
	ИначеЕсли РезультатРасчета.СуммаНалога < 0 Тогда
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.Возврат);
		ДанныеДекларации.Вставить("СуммаНалога", 0);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", -РезультатРасчета.СуммаНалога);
	Иначе
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.ОтсутствиеУплатыВозврата);
		ДанныеДекларации.Вставить("СуммаНалога", 0);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", 0);
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

#Область ОперацииСЦеннымиБумагами

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2018кв1" Тогда
		ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2018(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	Иначе
		ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2019(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаОтчета2018кв1

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2018(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	// ДЕНЬГИ: операции с ценными бумагами могут быть не только по справке 2-НДФЛ но и в доходах за рубежом
	// массив найденых строк заполняется с учетом вида дохода
	НайденныеСтроки   = Новый Массив;
	КБК               = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ);
	НалогУдержан      = Истина;
	ИсточникДляКБК    = Неопределено;
	
	Для каждого СтрокаДанных Из ТаблицаДанныхЗаполнения Цикл
		
		Если СтрокаДанных.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами
			Или (СтрокаДанных.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ
				Или СтрокаДанных.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ)
					И ЭтоОперацияСЦБ(СтрокаДанных.СтруктураДанных.КодДохода) Тогда
			
			НайденныеСтроки.Добавить(СтрокаДанных);
			ИсточникДляКБК = СтрокаДанных.Вид;
			Если СтрокаДанных.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ Тогда
				НалогУдержан = Ложь;
			КонецЕсли;
			Если СтрокаДанных.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ
				Или СтрокаДанных.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
				СтрокаДанных.СтруктураДанных.Вставить("ДоходУчтен", Истина);
				СтрокаДанных.СтруктураДанных.Вставить("ВычетУчтен", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	// Конец ДЕНЬГИ
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
	// ДЕНЬГИ НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Заполнение убытков зависит от наличия доходов по операциям с ценными бумагами.
		// Если нет доходов, то в строках с убытками нужно удалить служебные поля.
		ОтборСтрок.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаУбытков Из НайденныеСтроки Цикл
			СтрокаУбытков.СтруктураДанных.Очистить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ВидыОперацийСЦеннымиБумагами = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	
	// Соберем доходы и вычеты от всех брокеров в одну таблицу.
	ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденнаяСтрока.СтруктураДанных.ТаблицаДоходовВычетов, ТаблицаДоходовВычетов);
		НайденнаяСтрока.СтруктураДанных.Удалить("ТаблицаДоходовВычетов");
	КонецЦикла;
	
	ТаблицаДоходовВычетов.Свернуть("КодДохода, КодВычета", "СуммаДохода, СуммаВычета");
	
	// Инициализация структуры показателей листа декларации.
	ПоказателиОперацииНаИИС = НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС);
	ПоказателиИныеОперации  = НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидыОперацийСЦеннымиБумагами.ИныеОперации);
	
	// Заполнение части показателей по данным доходов/вычетов.
	СоответствиеПоказателейКодамДоходовВычетов = НовыйСоответствиеПоказателейОперацийСЦеннымиБумагамиКодамДоходовВычетов2НДФЛ();
	Для Каждого СтрокаДоходовВычетов Из ТаблицаДоходовВычетов Цикл
		ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(
			СтрокаДоходовВычетов, ПоказателиОперацииНаИИС, СоответствиеПоказателейКодамДоходовВычетов.ОперацииПоИИС);
		
		ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(
			СтрокаДоходовВычетов, ПоказателиИныеОперации, СоответствиеПоказателейКодамДоходовВычетов.ИныеОперации);
	КонецЦикла;
	
	// Учтем убытки прошлых лет.
	// Заполним таблицу убытков, чтобы отсортировать их в хронологическом порядке.
	ТаблицаУбытков = НовыйОписаниеТаблицыУбытков();
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид",
		Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами));
	ВидыИнвестиционныхСчетов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыИнвестиционныхСчетов();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаУбытков = ТаблицаУбытков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУбытков, НайденнаяСтрока.СтруктураДанных);
		Если НайденнаяСтрока.СтруктураДанных.Свойство("ВидСчета") Тогда
			Если НайденнаяСтрока.СтруктураДанных.ВидСчета = ВидыИнвестиционныхСчетов.ИндивидуальныйИнвестиционныйСчет Тогда
				СтрокаУбытков.КодВидаОперации = ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС;
			Иначе
				СтрокаУбытков.КодВидаОперации = ВидыОперацийСЦеннымиБумагами.ИныеОперации;
			КонецЕсли;
		КонецЕсли;
		
		// СтруктураДанных содержит только служебные ключи, которые больше не нужны. Удалим их.
		НайденнаяСтрока.СтруктураДанных.Очистить();
	КонецЦикла;
	
	ТаблицаУбытков.Сортировать("КодВидаОперации, Год");
	
	// Заполним показатели убытков по операциям на ИИС.
	УбыткиОперацииНаИИС = ТаблицаУбытков.НайтиСтроки(Новый Структура("КодВидаОперации", ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС));
	ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(УбыткиОперацииНаИИС, ПоказателиОперацииНаИИС);
	
	// Заполним показатели убытков по операциям на прочих счетах.
	УбыткиИныеОперации = ТаблицаУбытков.НайтиСтроки(Новый Структура("КодВидаОперации", ВидыОперацийСЦеннымиБумагами.ИныеОперации));
	ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(УбыткиИныеОперации, ПоказателиИныеОперации);
	
	// Расчет показателей листов декларации.
	РассчитатьПоказателиОперацийСЦеннымиБумагами(ПоказателиОперацииНаИИС);
	РассчитатьПоказателиОперацийСЦеннымиБумагами(ПоказателиИныеОперации);
	
	// Добавление итоговых строк в таблицу данных заполнения.
	Если ПоказателиОперацииНаИИС.ЦенныеБумагиИтогоСуммаДоходов <> 0 Тогда
		ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ПоказателиОперацииНаИИС);
	КонецЕсли;
	
	Если ПоказателиИныеОперации.ЦенныеБумагиИтогоСуммаДоходов <> 0 Тогда
		ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ПоказателиИныеОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОписаниеТаблицыУбытков()
	
	ТаблицаУбытков = Новый ТаблицаЗначений;
	ТаблицаУбытков.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаУбытков.Колонки.Добавить("Год",             ОбщегоНазначения.ОписаниеТипаЧисло(4));
	ТаблицаУбытков.Колонки.Добавить("СуммаУбыткаЦБ",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаУбытков.Колонки.Добавить("СуммаУбыткаПФИ",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ТаблицаУбытков.Индексы.Добавить("КодВидаОперации");
	
	Возврат ТаблицаУбытков;
	
КонецФункции

Функция НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидОперации)
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("ЦенныеБумагиВидОперации", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение2", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение3", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение4", ВидОперации);
	
	Показатели.Вставить("ЦБНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаРЕПО", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПоЗаймам", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаПроцентногоРасхода", 0);
	Показатели.Вставить("ЦБНаОРЦБОбщаяСуммаРасходов", 0);
	Показатели.Вставить("ЦБНаОРЦБНалоговаяБаза", 0);
	Показатели.Вставить("ЦБНаОРЦБОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ЦБНаОРЦБИнвестиционныйВычет", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПоПФИ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаДохода", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаРасходов", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБОбщаяСуммаРасходов", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаРасходов", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеНалоговаяБаза", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаРасходов", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеНалоговаяБаза", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("РЕПОСуммаДохода", 0);
	Показатели.Вставить("РЕПОСуммаРасходов", 0);
	Показатели.Вставить("РЕПОСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("РЕПОСуммаУбытка", 0);
	Показатели.Вставить("РЕПОСуммаУбыткаЦБНаОРЦБ", 0);
	Показатели.Вставить("РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ", 0);
	
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаДохода", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаРасходов", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбытка", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетОстатокНаНачало", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод1", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод2", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод3", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод4", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод5", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод6", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод7", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод8", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод9", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод10", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод1", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод2", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод3", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод4", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод5", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод6", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод7", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод8", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод9", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод10", 0);
	
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетОстатокНаНачало", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод1", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод2", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод3", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод4", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод5", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод6", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод7", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод8", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод9", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод10", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетНалоговаяБаза", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетНалоговаяБаза", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетОстатокНаКонец", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетОстатокНаКонец", 0);
	
	Показатели.Вставить("ЦБУбыткиПереходящиеНаБудущиеПериоды", 0);
	Показатели.Вставить("ПФИУбыткиПереходящиеНаБудущиеПериоды", 0);
	
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаДоходов", 0);
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаРасходовКВычету", 0);
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("КодДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КодВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("СуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция НовыйСоответствиеПоказателейОперацийСЦеннымиБумагамиКодамДоходовВычетов2НДФЛ(ИндивидуальныйИнвестиционныйСчет = Ложь)
	
	Результат = Новый Структура;
	
	// Операции на индивидуальном инвестиционном счете.
	Доходы = Новый Соответствие;
	Доходы.Вставить("1544", "ЦБНаОРЦБСуммаДохода");
	Доходы.Вставить("1545", "ЦБНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1546", "ПФИНаОРЦБФондовыеСуммаДохода");
	Доходы.Вставить("1547", "ПФИНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1548", "ПФИНаОРЦБНеФондовыеСуммаДохода");
	Доходы.Вставить("1549", "ЦБПрекратившиеОбращениеСуммаДохода");
	Доходы.Вставить("1551", "РЕПОСуммаДохода");
	Доходы.Вставить("1552", "ЗаймыЦеннымиБумагамиСуммаДохода");
	Доходы.Вставить("1553", "РЕПОСуммаДохода");
	Доходы.Вставить("1554", "РЕПОСуммаДохода");
	
	Вычеты = Новый Соответствие;
	Вычеты.Вставить("225", "ЦБНаОРЦБСуммаРасходов"); // 1544
	Вычеты.Вставить("226", "ЦБНеОбрНаОРЦБСуммаРасходов"); // 1545
	Вычеты.Вставить("227", "ЦБПрекратившиеОбращениеСуммаРасходов"); // 1549
	Вычеты.Вставить("228", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1546
	Вычеты.Вставить("229", "ПФИНаОРЦБНеФондовыеСуммаРасходов"); // 1548
	Вычеты.Вставить("230", "РЕПОСуммаРасходов"); // 1551
	Вычеты.Вставить("231", "РЕПОСуммаРасходов"); // 1553
	Вычеты.Вставить("232", "ЗаймыЦеннымиБумагамиСуммаРасходов"); // 1552
	Вычеты.Вставить("233", "ЦБНаОРЦБСуммаПроцентногоРасхода"); // 1544
	Вычеты.Вставить("234", "ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода"); // 1545
	Вычеты.Вставить("235", "ПФИНеОбрНаОРЦБСуммаРасходов"); // 1547
	Вычеты.Вставить("236", "ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ"); // 1549
	Вычеты.Вставить("237", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ"); // 1544
	Вычеты.Вставить("238", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1545
	Вычеты.Вставить("239", "РЕПОСуммаУбыткаЦБНаОРЦБ"); // 1544
	Вычеты.Вставить("240", "РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1545
	Вычеты.Вставить("241", "ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые"); // 1548
	Вычеты.Вставить("250", "ЦБНаОРЦБСуммаРасходов"); // 1546
	Вычеты.Вставить("251", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1546, 1544
	Вычеты.Вставить("252", "ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые"); // 1548
	Вычеты.Вставить("620", "РЕПОСуммаРасходов"); // 1554
	
	Результат.Вставить("ОперацииПоИИС", Новый Структура("Доходы, Вычеты", Доходы, Вычеты));
	
	// Операции на индивидуальном инвестиционном счете.
	Доходы = Новый Соответствие;
	Доходы.Вставить("1530", "ЦБНаОРЦБСуммаДохода");
	Доходы.Вставить("1531", "ЦБНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1532", "ПФИНаОРЦБФондовыеСуммаДохода");
	Доходы.Вставить("1533", "ПФИНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1535", "ПФИНаОРЦБНеФондовыеСуммаДохода");
	Доходы.Вставить("1536", "ЦБПрекратившиеОбращениеСуммаДохода");
	Доходы.Вставить("1537", "РЕПОСуммаДохода");
	Доходы.Вставить("1538", "ЗаймыЦеннымиБумагамиСуммаДохода");
	Доходы.Вставить("1539", "РЕПОСуммаДохода");
	Доходы.Вставить("1541", "РЕПОСуммаДохода");
	
	Вычеты = Новый Соответствие;
	Вычеты.Вставить("201", "ЦБНаОРЦБСуммаРасходов"); // 1530
	Вычеты.Вставить("202", "ЦБНеОбрНаОРЦБСуммаРасходов"); // 1531
	Вычеты.Вставить("203", "ЦБПрекратившиеОбращениеСуммаРасходов"); // 1536
	Вычеты.Вставить("205", "ЦБНаОРЦБСуммаРасходов"); // 1532
	Вычеты.Вставить("206", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1532
	Вычеты.Вставить("207", "ПФИНаОРЦБНеФондовыеСуммаРасходов"); // 1535
	Вычеты.Вставить("208", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1530, 1532
	Вычеты.Вставить("209", "ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые"); // 1535
	Вычеты.Вставить("210", "ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые"); // 1535
	Вычеты.Вставить("211", "РЕПОСуммаРасходов"); // 1537
	Вычеты.Вставить("213", "РЕПОСуммаРасходов"); // 1539
	Вычеты.Вставить("215", "ЗаймыЦеннымиБумагамиСуммаРасходов"); // 1538
	Вычеты.Вставить("216", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ"); // 1530
	Вычеты.Вставить("217", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1531
	Вычеты.Вставить("218", "ЦБНаОРЦБСуммаПроцентногоРасхода"); // 1530
	Вычеты.Вставить("219", "ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода"); // 1531
	Вычеты.Вставить("220", "ПФИНеОбрНаОРЦБСуммаРасходов"); // 1533
	Вычеты.Вставить("222", "РЕПОСуммаУбыткаЦБНаОРЦБ"); // 1530
	Вычеты.Вставить("223", "РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1531
	Вычеты.Вставить("224", "ЦБНаОРЦБСуммаРасходов"); // 1536
	Вычеты.Вставить("618", "ЦБНаОРЦБИнвестиционныйВычет"); // 1535
	Вычеты.Вставить("620", "РЕПОСуммаРасходов"); // 1541
	
	Результат.Вставить("ИныеОперации", Новый Структура("Доходы, Вычеты", Доходы, Вычеты));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(СтрокаДоходовВычетов, Показатели, СоответствиеПоказателейКодамДоходовВычетов)
	
	ИмяПоказателя = СоответствиеПоказателейКодамДоходовВычетов.Доходы.Получить(СокрЛП(СтрокаДоходовВычетов.КодДохода));
	Если ИмяПоказателя <> Неопределено Тогда
		Показатели[ИмяПоказателя] = Показатели[ИмяПоказателя] + СтрокаДоходовВычетов.СуммаДохода;
	КонецЕсли;
	
	ИмяПоказателя = СоответствиеПоказателейКодамДоходовВычетов.Вычеты.Получить(СокрЛП(СтрокаДоходовВычетов.КодВычета));
	Если ИмяПоказателя <> Неопределено Тогда
		Показатели[ИмяПоказателя] = Показатели[ИмяПоказателя] + СтрокаДоходовВычетов.СуммаВычета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(ТаблицаУбытки, Показатели)
	
	КоличествоСтрок = Мин(ТаблицаУбытки.Количество(), 10);
	СуммаУбыткаЦБВсего = 0;
	СуммаУбыткаПФИВсего = 0;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Если ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаЦБ = 0 И ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаПФИ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Показатели["ЦБУбыткиПрошлыхЛетГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].Год;
		Показатели["ЦБУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаЦБ;
		Показатели["ПФИУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаПФИ;
		
		СуммаУбыткаЦБВсего = СуммаУбыткаЦБВсего + Показатели["ЦБУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки];
		СуммаУбыткаПФИВсего = СуммаУбыткаПФИВсего + Показатели["ПФИУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки];
	КонецЦикла;
	
	Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало = СуммаУбыткаЦБВсего;
	Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало = СуммаУбыткаПФИВсего;
	
КонецПроцедуры

Процедура РассчитатьПоказателиОперацийСЦеннымиБумагами(Показатели)
	
	// 402
	Показатели.РЕПОСуммаРасходов = Показатели.РЕПОСуммаРасходов + Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ + Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 403
	Показатели.РЕПОСуммаНалогооблагаемогоДохода = Макс(0, Показатели.РЕПОСуммаДохода - Показатели.РЕПОСуммаРасходов);
	
	// 404
	Показатели.РЕПОСуммаУбытка = Макс(0, Показатели.РЕПОСуммаРасходов - Показатели.РЕПОСуммаДохода);
	
	// 405
	Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ = Макс(0, Показатели.РЕПОСуммаУбытка - Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 406
	Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ = Мин(Показатели.РЕПОСуммаУбытка, Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 103
	Показатели.ЦБНаОРЦБСуммаУбыткаРЕПО = Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ;
	
	// 207
	Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО = Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 408
	Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов = Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ + Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 409
	Показатели.ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаДохода - Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов);
	
	// 410
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов - Показатели.ЗаймыЦеннымиБумагамиСуммаДохода);
	
	// 411
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка - Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 412
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ = Мин(Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка, Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 104
	Показатели.ЦБНаОРЦБСуммаУбыткаПоЗаймам = Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ;
	
	// 208
	Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам = Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 106
	Показатели.ЦБНаОРЦБОбщаяСуммаРасходов =
		Показатели.ЦБНаОРЦБСуммаРасходов + Показатели.ЦБНаОРЦБСуммаУбыткаРЕПО
		+ Показатели.ЦБНаОРЦБСуммаУбыткаПоЗаймам + Показатели.ЦБНаОРЦБСуммаПроцентногоРасхода;
	
	// 107
	Показатели.ЦБНаОРЦБНалоговаяБаза = Макс(0, Показатели.ЦБНаОРЦБСуммаДохода - Показатели.ЦБНаОРЦБОбщаяСуммаРасходов);
	
	// 108
	Показатели.ЦБНаОРЦБОбщаяСуммаУбытка = Макс(0, Показатели.ЦБНаОРЦБОбщаяСуммаРасходов - Показатели.ЦБНаОРЦБСуммаДохода);
	
	// 113
	НалоговаяБаза = Показатели.ЦБПрекратившиеОбращениеСуммаДохода - Показатели.ЦБПрекратившиеОбращениеСуммаРасходов;
	Если НалоговаяБаза > 0 Тогда
		Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ = Мин(НалоговаяБаза, Показатели.ЦБНаОРЦБОбщаяСуммаУбытка);
	КонецЕсли;
	
	// 203
	Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ = Мин(Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ,
		Показатели.ЦБПрекратившиеОбращениеСуммаДохода - Показатели.ЦБПрекратившиеОбращениеСуммаРасходов);
	
	Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ = Макс(0, Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ);
	Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ = Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ;
	
	// 204
	Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода = 
		Показатели.ЦБПрекратившиеОбращениеСуммаДохода
		- Показатели.ЦБПрекратившиеОбращениеСуммаРасходов
		- Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода;
	
	// 211
	Показатели.ЦБНеОбрНаОРЦБОбщаяСуммаРасходов = Показатели.ЦБНеОбрНаОРЦБСуммаРасходов
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам
		+ Показатели.ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества;
	
	// 212
	Показатели.ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ЦБНеОбрНаОРЦБСуммаДохода - Показатели.ЦБНеОбрНаОРЦБОбщаяСуммаРасходов);
	
	// 303
	Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза = Макс(0, Показатели.ПФИНаОРЦБФондовыеСуммаДохода - Показатели.ПФИНаОРЦБФондовыеСуммаРасходов);
	
	// 304
	Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка = Макс(0, Показатели.ПФИНаОРЦБФондовыеСуммаРасходов - Показатели.ПФИНаОРЦБФондовыеСуммаДохода);
	
	Если Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза > 0 Тогда
		// 306
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ = Мин(Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза,
			Показатели.ЦБНаОРЦБОбщаяСуммаУбытка - Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ);
		
		// 308
		Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ;
		
		// 114
		Показатели.ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ = Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ;
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБНалоговаяБаза > 0 Тогда
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБНалоговаяБаза;
		
		// 109
		Показатели.ЦБНаОРЦБИнвестиционныйВычет = Мин(Показатели.ЦБНаОРЦБИнвестиционныйВычет, Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода);
		
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБИнвестиционныйВычет;
		
		Если Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка > 0 Тогда
			// 310
			Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ = Мин(Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода, Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка);
			
			// 110
			Показатели.ЦБНаОРЦБСуммаУбыткаПоПФИ = Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ;
			
			// 112
			Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБСуммаУбыткаПоПФИ;
		КонецЕсли;
	КонецЕсли;
	
	// 314
	Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза = Макс(0, Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода - Показатели.ПФИНаОРЦБНеФондовыеСуммаРасходов);
	
	// 315
	Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка = Макс(0, Показатели.ПФИНаОРЦБНеФондовыеСуммаРасходов - Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода);
	
	Если Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза > 0 Тогда
		// 317
		Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые = Мин(
			Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка, Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза);
		
		// 318
		Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые;
		
		// 309
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые = Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые;
		
		// 311
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод = Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка
			- Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ;
		
	ИначеЕсли Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка > 0 Тогда
		
		Если Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
			// 319
			Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые = 
				Мин(Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода, Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка);
			
			// 307
			Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые = Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые;
			
			// 308
			Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые;
		КонецЕсли;
		
		// 320
		Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод = Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые;
		
	КонецЕсли;
	
	// 323
	Показатели.ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ПФИНеОбрНаОРЦБСуммаДохода - Показатели.ПФИНеОбрНаОРЦБСуммаРасходов);
	
	// 115
	Если Показатели.ЦБНаОРЦБОбщаяСуммаУбытка > 0 Тогда
		Показатели.ЦБНаОРЦБСуммаУбыткаБудущийПериод = Показатели.ЦБНаОРЦБОбщаяСуммаУбытка
			- Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ
			- Показатели.ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ;
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБНалоговаяБаза > 0
		И Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало > 0 Тогда
		
		// 523
		Показатели.ЦБУбыткиПрошлыхЛетНалоговаяБаза = Показатели.ЦБНаОРЦБНалоговаяБаза;
		
		// 525
		Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету =
			Мин(Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало, Показатели.ЦБУбыткиПрошлыхЛетНалоговаяБаза);
		
	КонецЕсли;
	
	ПФИУбыткиПрошлыхЛетНалоговаяБаза = Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза
		+ Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза;
	
	Если ПФИУбыткиПрошлыхЛетНалоговаяБаза > 0
		И Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало > 0 Тогда
		
		// 524
		Показатели.ПФИУбыткиПрошлыхЛетНалоговаяБаза = ПФИУбыткиПрошлыхЛетНалоговаяБаза;
		
		// 526
		Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету =
			Мин(Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало, Показатели.ПФИУбыткиПрошлыхЛетНалоговаяБаза);
		
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода > 0 Тогда
		// 111
		Показатели.ЦБНаОРЦБСуммаУбыткаПрошлыхЛет = Мин(Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода, Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету);
		
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБСуммаУбыткаПрошлыхЛет;
	КонецЕсли;
	
	Если Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
		// 305
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет = Мин(Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету, Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода);
		
		// 308
		Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет;
	КонецЕсли;
	
	Если Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
		УбытокДоступныйКВычету = Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет;
		Если УбытокДоступныйКВычету > 0 Тогда
			//316
			Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет =
				Мин(УбытокДоступныйКВычету, Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода);
			
			//318
			Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода =
				Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет;
		КонецЕсли;
	КонецЕсли;
	
	// 527
	Показатели.ЦБУбыткиПрошлыхЛетОстатокНаКонец = Макс(0,
		Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало - Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету);
	
	// 528
	Показатели.ПФИУбыткиПрошлыхЛетОстатокНаКонец = Макс(0,
		Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало - Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету);
	
	// 529
	Показатели.ЦБУбыткиПереходящиеНаБудущиеПериоды = Показатели.ЦБУбыткиПрошлыхЛетОстатокНаКонец + Показатели.ЦБНаОРЦБСуммаУбыткаБудущийПериод;
	
	// 530
	Показатели.ПФИУбыткиПереходящиеНаБудущиеПериоды = Показатели.ПФИУбыткиПрошлыхЛетОстатокНаКонец
		+ Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод;
	
	// 531
	Показатели.ЦенныеБумагиИтогоСуммаДоходов = Показатели.ЦБНаОРЦБСуммаДохода
		+ Показатели.ЦБПрекратившиеОбращениеСуммаДохода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаДохода
		+ Показатели.ПФИНаОРЦБФондовыеСуммаДохода
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода
		+ Показатели.ПФИНеОбрНаОРЦБСуммаДохода
		+ Показатели.РЕПОСуммаДохода
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаДохода;
	
	// 532
	Показатели.ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.РЕПОСуммаНалогооблагаемогоДохода
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода;
	
	// 533
	Показатели.ЦенныеБумагиИтогоСуммаРасходовКВычету = Макс(0,
		Показатели.ЦенныеБумагиИтогоСуммаДоходов - Показатели.ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода);
	
КонецПроцедуры

Процедура ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, Показатели)
	
	СтрокаЭталон = ТаблицаДанныхЗаполнения.Найти(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, "Вид");
	
	НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
	НоваяСтрока.Вид = СтрокаЭталон.Вид;
	НоваяСтрока.ВидДохода = СтрокаЭталон.ВидДохода;
	НоваяСтрока.НалоговаяСтавка = СтрокаЭталон.НалоговаяСтавка;
	НоваяСтрока.КБК = СтрокаЭталон.КБК;
	НоваяСтрока.СтруктураДанных = Показатели;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОтчета2019кв1

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2019(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Заполнение убытков зависит от наличия доходов по операциям с ценными бумагами.
		// Если нет доходов, то в строках с убытками нужно удалить служебные поля.
		ОтборСтрок.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаУбытков Из НайденныеСтроки Цикл
			СтрокаУбытков.СтруктураДанных.Очистить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	КодыВидовОпераций = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	ПризнакиУчетаУбытков = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУчетаУбытковПоЦеннымБумагам(ВыбраннаяФорма3НДФЛ);
	
	// Соберем доходы и вычеты от всех брокеров в одну таблицу.
	// Заодно преобразуем коды видов доходов в коды видов операций.
	ТаблицаВидовОпераций = ТаблицаСоответствияВидовДоходовВычетовВидамОперацийСЦеннымиБумагами(КодыВидовОпераций);
	ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2019();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДополнитьОбщуюТаблицуДоходовВычетовПоОперациямСЦеннымиБумагами2019(
			ТаблицаДоходовВычетов, НайденнаяСтрока.СтруктураДанных.ТаблицаДоходовВычетов, ТаблицаВидовОпераций);
		НайденнаяСтрока.СтруктураДанных.Удалить("ТаблицаДоходовВычетов");
	КонецЦикла;
	
	ТаблицаДоходовВычетов.Свернуть("КодДохода, КодУбытка",
		"ЦенныеБумагиСуммаДохода, ЦенныеБумагиСуммаРасходовПоРеализации, ЦенныеБумагиСуммаУбытка,
		|ЦенныеБумагиСуммаПрибылиКВычету, ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету");
	
	// Дополним убытками прошлых лет
	ДополнитьОбщуюТаблицуДоходовВычетовУбыткамиПоОперациямСЦеннымиБумагами2019(
		ТаблицаДоходовВычетов, ТаблицаДанныхЗаполнения, КодыВидовОпераций);
	
	// Заполнение показателей декларации
	СтрокаЭталон = ТаблицаДанныхЗаполнения.Найти(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, "Вид");
	МассивКодовОпераций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоходовВычетов, "КодДохода", Истина);
	Для Каждого КодВидаОперации Из МассивКодовОпераций Цикл
		
		СуммаВычетов = 0;
		ИтогоУбыток = 0;
		
		СтруктураДанных = НовыйСтруктураДанныхСтрокиОперацийСЦеннымиБумагами();
		СтруктураДанных.ЦенныеБумагиВидОперации = КодВидаОперации;
		СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокНеУчитывается;
		
		СтрокиОперации = ТаблицаДоходовВычетов.НайтиСтроки(Новый Структура("КодДохода", КодВидаОперации));
		Для Каждого НайденнаяСтрока Из СтрокиОперации Цикл
			
			Для Каждого Колонка Из ТаблицаДоходовВычетов.Колонки Цикл
				
				Если СтруктураДанных.Свойство(Колонка.Имя) И ТипЗнч(СтруктураДанных[Колонка.Имя]) = Тип("Число") Тогда
					СтруктураДанных[Колонка.Имя] = СтруктураДанных[Колонка.Имя] + НайденнаяСтрока[Колонка.Имя];
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(НайденнаяСтрока.КодУбытка) Тогда
				СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокУчитывается;
				
				СтрокаКодУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.НайтиПоЗначению(НайденнаяСтрока.КодУбытка);
				Если СтрокаКодУбытка = Неопределено Тогда
					СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Добавить(НайденнаяСтрока.КодУбытка);
					СтруктураДанных.ЦенныеБумагиСуммаУбытка.Добавить(НайденнаяСтрока.ЦенныеБумагиСуммаУбытка);
				Иначе
					ИндексКодаУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Индекс(СтрокаКодУбытка);
					СтрокаСуммаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[ИндексКодаУбытка];
					СтрокаСуммаУбытка.Значение = СтрокаСуммаУбытка.Значение + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
				КонецЕсли;
				
				// Накапливаем сумму убытков
				СуммаВычетов = СуммаВычетов + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
				ИтогоУбыток = ИтогоУбыток + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = ИтогоУбыток;
		СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = СтруктураДанных.ЦенныеБумагиСуммаРасходовПоРеализации;
		
		// Учитываем ограничение - сумма вычетов не может превышать сумму дохода
		СуммаВычетов = СуммаВычетов
			+ СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы
			+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету
			+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
		
		Если СуммаВычетов > СтруктураДанных.ЦенныеБумагиСуммаДохода Тогда
			ДоступныйВычет = СтруктураДанных.ЦенныеБумагиСуммаДохода;
			
			СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = Мин(СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы;
			
			СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету;
			
			СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
			
			// Ограничим общую сумму убытка, принимаемую к вычету
			СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = Мин(СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка, ДоступныйВычет);
			
			// Распределим доступный вычет по строкам убытков
			КоличествоСтрокУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка.Количество() - 1;
			Для Индекс = 0 По КоличествоСтрокУбытка Цикл
				СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[Индекс];
				СтрокаУбытка.Значение = Мин(СтрокаУбытка.Значение, ДоступныйВычет);
				ДоступныйВычет = ДоступныйВычет - СтрокаУбытка.Значение;
			КонецЦикла;
			
			// Удалим пустые строки убытков
			Для Индекс = 0 По КоличествоСтрокУбытка Цикл
				СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[КоличествоСтрокУбытка - Индекс];
				Если Не ЗначениеЗаполнено(СтрокаУбытка.Значение) Тогда
					СтруктураДанных.ЦенныеБумагиСуммаУбытка.Удалить(СтрокаУбытка);
					СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Удалить(КоличествоСтрокУбытка - Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Запишем строку операций с ценными бумагами в ТаблицаДанныхЗаполнения
		Если СтруктураДанных.ЦенныеБумагиСуммаДохода <> 0 Тогда
			СтрокаДанныхЗаполнения = ТаблицаДанныхЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхЗаполнения, СтрокаЭталон);
			СтрокаДанныхЗаполнения.СтруктураДанных = СтруктураДанных;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2019()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("КодДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КодУбытка",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаРасходовПоРеализации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаУбытка", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаПрибылиКВычету", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ДополнитьОбщуюТаблицуДоходовВычетовПоОперациямСЦеннымиБумагами2019(Приемник, Источник, ТаблицаВидовОпераций)
	
	Для Каждого СтрокаИсточник Из Источник Цикл
		СтрокаПриемник = Приемник.Добавить();
		
		КлючДохода = ТаблицаВидовОпераций.Найти(СтрокаИсточник.КодДохода, "КодДоходаВычета");
		Если КлючДохода <> Неопределено Тогда
			СтрокаПриемник.КодДохода = КлючДохода.КодВидаОперации;
			СтрокаПриемник[КлючДохода.ИмяПоляСумма] = СтрокаПриемник[КлючДохода.ИмяПоляСумма] + СтрокаИсточник.СуммаДохода;
		КонецЕсли;
		
		КлючВычета = ТаблицаВидовОпераций.Найти(СтрокаИсточник.КодВычета, "КодДоходаВычета");
		Если КлючВычета <> Неопределено Тогда
			Если КлючВычета.ЭтоУбыток Тогда
				СтрокаПриемник.КодУбытка = КлючВычета.КодВидаОперации;
			КонецЕсли;
			СтрокаПриемник[КлючВычета.ИмяПоляСумма] = СтрокаПриемник[КлючВычета.ИмяПоляСумма] + СтрокаИсточник.СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОбщуюТаблицуДоходовВычетовУбыткамиПоОперациямСЦеннымиБумагами2019(ТаблицаДоходовВычетов, ТаблицаДанныхЗаполнения, КодыВидовОпераций)
	
	УчетУбытковПрошлыхЛет = ПараметрыУчетаУбытковПрошлыхЛет2019(КодыВидовОпераций);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид",
		Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		УчетУбытковПоСчету = Неопределено;
		Если Не УчетУбытковПрошлыхЛет.Свойство(НайденнаяСтрока.СтруктураДанных.ВидСчета, УчетУбытковПоСчету) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Параметры Из УчетУбытковПоСчету Цикл
			СтрокаВычета = ТаблицаДоходовВычетов.Добавить();
			СтрокаВычета.КодДохода = Параметры.КодДохода;
			СтрокаВычета.КодУбытка = Параметры.КодУбытка;
			СтрокаВычета.ЦенныеБумагиСуммаУбытка = НайденнаяСтрока.СтруктураДанных[Параметры.ИмяПоляСумма];
		КонецЦикла;
		
		// СтруктураДанных содержит только служебные ключи, которые больше не нужны
		НайденнаяСтрока.СтруктураДанных.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСоответствияВидовДоходовВычетовВидамОперацийСЦеннымиБумагами(КодыВидовОпераций)
	
	ТаблицаВидовОпераций = НовыйТаблицаВидовОперацийЦеннымиБумагами();
	
	// Операции на обычном брокерском счете и прочих инвестиционных счетах,
	// кроме индивидуальных инвестиционных счетов.
	ДобавитьСтрокуТаблицыВидовОпераций("1530", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1531", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1532", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1533", КодыВидовОпераций.ПФИнаПрочихРынках, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1535", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1536", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращение, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1537", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1538", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1539", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1541", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	
	ДобавитьСтрокуТаблицыВидовОпераций("201", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("202", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("203", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращение, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1536
	ДобавитьСтрокуТаблицыВидовОпераций("205", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1532
	ДобавитьСтрокуТаблицыВидовОпераций("206", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1532
	ДобавитьСтрокуТаблицыВидовОпераций("207", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("208", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530, 1532
	ДобавитьСтрокуТаблицыВидовОпераций("209", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("210", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("211", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1537
	ДобавитьСтрокуТаблицыВидовОпераций("213", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1539
	ДобавитьСтрокуТаблицыВидовОпераций("215", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1538
	ДобавитьСтрокуТаблицыВидовОпераций("216", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("217", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("218", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("219", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("220", КодыВидовОпераций.ПФИнаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1533
	ДобавитьСтрокуТаблицыВидовОпераций("222", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("223", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("224", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1536
	ДобавитьСтрокуТаблицыВидовОпераций("618", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаПрибылиКВычету", ТаблицаВидовОпераций); // 1530
	
	// Операции на индивидуальном инвестиционном счете
	ДобавитьСтрокуТаблицыВидовОпераций("1544", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1545", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1546", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1547", КодыВидовОпераций.ПФИнаПрочихРынкахИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1548", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1549", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращениеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1551", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1552", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1553", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1554", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	
	ДобавитьСтрокуТаблицыВидовОпераций("225", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("226", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("227", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращениеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1549
	ДобавитьСтрокуТаблицыВидовОпераций("228", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1546
	ДобавитьСтрокуТаблицыВидовОпераций("229", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("230", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1551
	ДобавитьСтрокуТаблицыВидовОпераций("231", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1553
	ДобавитьСтрокуТаблицыВидовОпераций("232", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1552
	ДобавитьСтрокуТаблицыВидовОпераций("233", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("234", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("235", КодыВидовОпераций.ПФИнаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1547
	ДобавитьСтрокуТаблицыВидовОпераций("236", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1549
	ДобавитьСтрокуТаблицыВидовОпераций("237", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("238", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("239", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("240", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("241", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("250", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1546
	ДобавитьСтрокуТаблицыВидовОпераций("251", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1546, 1544
	ДобавитьСтрокуТаблицыВидовОпераций("252", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("619", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", ТаблицаВидовОпераций); // 1544
	
	// Вычеты, общие для обоих видов счетов
	ДобавитьСтрокуТаблицыВидовОпераций("620", "", "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1541, 1554
	
	Возврат ТаблицаВидовОпераций;
	
КонецФункции

Функция НовыйТаблицаВидовОперацийЦеннымиБумагами()
	
	КлючиПоказателей = Новый ТаблицаЗначений;
	КлючиПоказателей.Колонки.Добавить("КодДоходаВычета", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ИмяПоляСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ЭтоУбыток", Новый ОписаниеТипов("Булево"));
	
	Возврат КлючиПоказателей;
	
КонецФункции

Процедура ДобавитьСтрокуТаблицыВидовОпераций(КодДоходаВычета, КодВидаОперации, ИмяПоляСумма, ТаблицаВидовОпераций, ЭтоУбыток = Ложь)
	
	Если ТаблицаВидовОпераций.Найти(КодДоходаВычета, "КодДоходаВычета") <> Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль кода вида доходов (вычетов) ""%1""'"), КодДоходаВычета);
	КонецЕсли;
	
	НоваяСтрока = ТаблицаВидовОпераций.Добавить();
	НоваяСтрока.ИмяПоляСумма = ИмяПоляСумма;
	НоваяСтрока.КодДоходаВычета = КодДоходаВычета;
	НоваяСтрока.КодВидаОперации = КодВидаОперации;
	НоваяСтрока.ЭтоУбыток = ЭтоУбыток;
	
КонецПроцедуры

Функция НовыйСтруктураДанныхСтрокиОперацийСЦеннымиБумагами()
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ЦенныеБумагиВидОперации", "");
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаДохода", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаРасходовПоРеализации", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиПризнакУчетаУбытков", "");
	СтруктураСтроки.Вставить("ЦенныеБумагиУчетУбытковВидОперации", Новый СписокЗначений);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаУбытка", Новый СписокЗначений);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаПрибылиКВычету", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиИтогоСуммаУбытка", 0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

Функция ПараметрыУчетаУбытковПрошлыхЛет2019(КодыВидовОпераций)
	
	Результат = Новый Структура;
	
	// Операции на индивидуальном инвестиционном счете
	УбыткиПоИИС = Новый Массив;
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоЦеннымБумагамНаИИС, "СуммаУбыткаЦБ"));
	
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоПФИнаИИС, "СуммаУбыткаПФИ"));
	
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоПФИнаИИС, "СуммаУбыткаПФИ"));
	
	// Операции на обычном брокерском счете и прочих инвестиционных счетах,
	// кроме индивидуальных инвестиционных счетов.
	УбыткиПоПрочимСчетам = Новый Массив;
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоЦеннымБумагам, "СуммаУбыткаЦБ"));
	
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоПФИ, "СуммаУбыткаПФИ"));
	
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоПФИ, "СуммаУбыткаПФИ"));
	
	ВидыИнвестиционныхСчетов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыИнвестиционныхСчетов();
	
	Результат.Вставить(ВидыИнвестиционныхСчетов.ИндивидуальныйИнвестиционныйСчет, УбыткиПоИИС);
	Результат.Вставить(ВидыИнвестиционныхСчетов.ПрочиеСчета, УбыткиПоПрочимСчетам);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДанныеЗаполненияИмущественногоВычета

Функция ОписаниеПоказателейИмущественногоВычета(ВыбраннаяФорма3НДФЛ)
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2018кв1" Тогда
		Возврат ОписаниеПоказателейИмущественногоВычета2018();
	Иначе
		Возврат ОписаниеПоказателейИмущественногоВычета2019();
	КонецЕсли;
	
КонецФункции

Функция ОписаниеПоказателейИмущественногоВычета2018()
	
	ТаблицаПоказателей = НовыйОписаниеПоказателейИмущественногоВычета();
	
	ВычетИмущественный = Перечисления.ВычетыФизическихЛиц.Имущественный;
	ВычетПрофессиональный = Перечисления.ВычетыФизическихЛиц.Профессиональный;
	
	КлючОбщейСуммыИмущественный = "ОбщаяСуммаИмущественногоВычета";
	КлючОбщейСуммыПрофессиональный = "ОбщаяСуммаПрофессиональногоВычета";
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Норматив", "ДоходыПродажаЖилойНедвижимости",
		"ИмущественныйВычетПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Норматив", "ДоходыПродажаДолиЖилойНедвижимости",
		"ИмущественныйВычетПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Норматив", "ДоходыПродажаИнойНедвижимости",
		"ИмущественныйВычетПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Расходы", "ДоходыСРасходамиПродажаИнойНедвижимости",
		"РасходыПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Норматив", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Расходы", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Норматив", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Расходы", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ОписаниеПоказателейИмущественногоВычета2019()
	
	ТаблицаПоказателей = НовыйОписаниеПоказателейИмущественногоВычета();
	
	ВычетИмущественный = Перечисления.ВычетыФизическихЛиц.Имущественный;
	
	КлючОбщейСуммыИмущественный = "ОбщаяСуммаИмущественногоВычета";
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Норматив", "ДоходыПродажаЖилойНедвижимости",
		"ИмущественныйВычетПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Норматив", "ДоходыПродажаДолиЖилойНедвижимости",
		"ИмущественныйВычетПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Расходы", "ДоходыСРасходамиПродажаДолиЖилойНедвижимости",
		"РасходыПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Норматив", "ДоходыПродажаИнойНедвижимости",
		"ИмущественныйВычетПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Расходы", "ДоходыСРасходамиПродажаИнойНедвижимости",
		"РасходыПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Норматив", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Расходы", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Норматив", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Расходы", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция НовыйОписаниеПоказателейИмущественногоВычета()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ВидИмущества",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ВидВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КлючДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КлючВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ВидВычетаСсылка",   Новый ОписаниеТипов("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	ТаблицаЗначений.Колонки.Добавить("КлючОбщейСуммыВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ДобавитьПоказательИмущественногоВычета(ВидИмущества, ВидВычета, КлючДохода, КлючВычета, ВычетСсылка, КлючОбщейСуммы, КлючиПоказателей)
	
	Если КлючиПоказателей.НайтиСтроки(Новый Структура("ВидИмущества, ВидВычета", ВидИмущества, ВидВычета)).Количество() > 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль показателя ""%1"" имущественного вычета при продаже недвижимости'"), ВидИмущества);
	КонецЕсли;
	
	НоваяСтрока = КлючиПоказателей.Добавить();
	НоваяСтрока.ВидИмущества = ВидИмущества;
	НоваяСтрока.ВидВычета = ВидВычета;
	НоваяСтрока.КлючДохода = КлючДохода;
	НоваяСтрока.КлючВычета = КлючВычета;
	НоваяСтрока.ВидВычетаСсылка = ВычетСсылка;
	НоваяСтрока.КлючОбщейСуммыВычета = КлючОбщейСуммы;
	
КонецПроцедуры

#КонецОбласти

Функция КБКИсточникаДохода(ИсточникДохода, СписокКБК, НалогУдержан = Ложь)
	
	Если ИсточникДохода = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
		Возврат СписокКБК.ДоходыОтПредпринимательскойДеятельности;
	ИначеЕсли НалогУдержан Тогда
		Возврат СписокКБК.ДоходыПолученныеОтНалоговыхАгентов;
	Иначе
		Возврат СписокКБК.ДоходыПриПолученииКоторыхНеУдержанНалог;
	КонецЕсли;
	
КонецФункции

Функция СуммаНалогаИсчисленная(НалоговаяБаза, НалоговаяСтавка)
	
	Возврат Окр(НалоговаяБаза * НалоговаяСтавка / 100, 0);
	
КонецФункции

Процедура ДобавитьДанныеКадастровойИнформации(ТаблицаДанныхЗаполнения, ДанныеФормы)
	
	НедвижимостьПриобретенаПосле01012016 = ДанныеФормы.Свойство("ГодПриобретения")
		И ДанныеФормы.ГодПриобретения >= 2016;
	Если НЕ НедвижимостьПриобретенаПосле01012016 Тогда
		Возврат;
	КонецЕсли;
	
	КадастроваяИнформация = ТаблицаДанныхЗаполнения.Добавить();
	СтруктураКадастровойИнформации = Новый Структура;
	СтруктураКадастровойИнформации.Вставить("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", ДанныеФормы.КадастровыйНомер);
	СтруктураКадастровойИнформации.Вставить("КадастроваяСтоимостьГодРегистрации", ДанныеФормы.КадастроваяСтоимость);
	СтруктураКадастровойИнформации.Вставить("ДоходПродажиЦенаДоговора", ДанныеФормы.СуммаДохода);
	Если ДанныеФормы.Свойство("КадастроваяСтоимостьИтого") Тогда
		СтруктураКадастровойИнформации.Вставить("КадастроваяСтоимостьКоэффициент", ДанныеФормы.КадастроваяСтоимостьИтого);
	Иначе
		СтруктураКадастровойИнформации.Вставить("КадастроваяСтоимостьКоэффициент", ДанныеФормы.КадастроваяСтоимость);
	КонецЕсли;
	СтруктураКадастровойИнформации.Вставить("ДоходПродажиНалогооблагаемый", 
			?(ДанныеФормы.Свойство("НалоговаяБазаИтого"), ДанныеФормы.НалоговаяБазаИтого, ДанныеФормы.СуммаДохода));
	
	КадастроваяИнформация.СтруктураДанных = СтруктураКадастровойИнформации;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеПоказателиПредпринимательскойДеятельности(ДанныеПомощникаЗаполнения, ТаблицаДанныхЗаполнения)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаДохода = 0;
	ОбщаяСуммаРасходов = 0;
	ОбщаяСуммаРасходовВПределахНорматива = 0;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		ОбщаяСуммаДохода = ОбщаяСуммаДохода + СтруктураДанных.СуммаДоходаИП;
		ОбщаяСуммаРасходов = ОбщаяСуммаРасходов + СтруктураДанных.СуммаРасходовИП;
		ОбщаяСуммаРасходовВПределахНорматива = ОбщаяСуммаРасходовВПределахНорматива + СтруктураДанных.СуммаРасходовВПределахНормативаИП;
	КонецЦикла;
	ОбщаяСуммаВычета = Макс(ОбщаяСуммаРасходов, ОбщаяСуммаРасходовВПределахНорматива);
	
	// В декларации заполняется либо вычет по нормативу, либо вычет по подтвержденным расходам.
	// Очистим поля в зависимости от применяемого вычета.
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		Если ОбщаяСуммаРасходовВПределахНорматива > ОбщаяСуммаРасходов Тогда
			СтруктураДанных.СуммаРасходовИП = 0;
			СтруктураДанных.МатериальныеРасходыИП = 0;
			СтруктураДанных.АмортизацияИП = 0;
			СтруктураДанных.ЗарплатаИП = 0;
			СтруктураДанных.ЗарплатаПоТрудовымДоговорамИП = 0;
			СтруктураДанных.ПрочиеРасходыИП = 0;
		Иначе
			СтруктураДанных.СуммаРасходовВПределахНормативаИП = 0;
		КонецЕсли;
	КонецЦикла;
	
	ИндексИтоговойСтроки = -1;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
	КонецЦикла;
	
	ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки];
	
	ИтоговаяСтрока.СтруктураДанных.Вставить("ОбщаяСуммаДоходаИП", ОбщаяСуммаДохода);
	ИтоговаяСтрока.СтруктураДанных.Вставить("ОбщаяСуммаВычетаИП", ОбщаяСуммаВычета);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаНачисленныхАвансовыхПлатежейИП", ДанныеПомощникаЗаполнения.ПредпринимательНачисленоАвансовыхПлатежей);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаУплаченныхАвансовыхПлатежейИП", ДанныеПомощникаЗаполнения.ПредпринимательУплаченоФактическихПлатежей);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаТорговогоСбора", ДанныеПомощникаЗаполнения.ПредпринимательТорговыйСбор);
	
	ИтоговаяСтрока.СуммаНалогаИсчисленная = Окр((ОбщаяСуммаДохода - ОбщаяСуммаВычета) * ИтоговаяСтрока.НалоговаяСтавка / 100, 0);
	ИтоговаяСтрока.СуммаНалогаУплаченнаяУдержанная = ДанныеПомощникаЗаполнения.ПредпринимательУплаченоФактическихПлатежей;
	
КонецПроцедуры

Процедура РассчитатьСуммуДоходовНеПодлежащуюНалогообложению(ТаблицаДанныхЗаполнения, ВидДохода, НалоговаяСтавка, НеоблагаемыеСуммыДоходов)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ВидДохода", ВидДохода);
	ОтборСтрок.Вставить("НалоговаяСтавка", НалоговаяСтавка);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетДоходовНеПодлежащихНалогообложению = НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению();
	
	ОбщаяСуммаВыигрышей = 0;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		Если СтрокаДанныхЗаполнения.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок
			И ЗначениеЗаполнено(СтруктураДанных.ИННИсточникаДоходаРФ) Тогда
			РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков =
				РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков + СтруктураДанных.СуммаДоходаРФ;
		ИначеЕсли СтрокаДанныхЗаполнения.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх Тогда
			ОбщаяСуммаВыигрышей = ОбщаяСуммаВыигрышей + СтруктураДанных.СуммаДоходаРФ;
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетДоходовНеПодлежащихНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению =
		Мин(РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков, НеоблагаемыеСуммыДоходов.Подарок);
	
	РасчетДоходовНеПодлежащихНалогообложению.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению =
		Мин(ОбщаяСуммаВыигрышей, НеоблагаемыеСуммыДоходов.Лотереи);
	
	РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению =
		РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению
		+ РасчетДоходовНеПодлежащихНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению
		+ РасчетДоходовНеПодлежащихНалогообложению.СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению;
	
	Если РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению <> 0 Тогда
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = ВидДохода;
		НоваяСтрока.НалоговаяСтавка = НалоговаяСтавка;
		НоваяСтрока.СтруктураДанных = РасчетДоходовНеПодлежащихНалогообложению;
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению()
	
	РасчетДоходовНеПодлежащихНалогообложению = Новый Структура;
	
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемаяМатПомощьПриРожденииРебенка", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемыеПризыКонкурсов", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемаяМатПомощьРаботодателей", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемоеВозмещениеЛечения", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемоеВозмещениеЛечения", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемыеВыигрышиРекламныхКонкрурсов", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемаяМатПомощьОбщественныхОрганизаций", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемыеВыигрышиВЛотерею", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемаяМатПомощьВетеранам", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СуммаДополнительныхПенсионныхВзносов", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("НеоблагаемыеИныеДоходы", 0);
	
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("ОбщаяСтоимостьПодарков", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СтоимостьПодарковНеПодлежащаяНалогообложению", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СуммаДоходовНеПодлежащаяНалогообложению", 0);
	
	Возврат РасчетДоходовНеПодлежащихНалогообложению;
	
КонецФункции

Функция ТаблицаСведенийОСуммахНалога(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ПризнакиУплатыВозврата, СписокКБК, ОКТМОналогоплательщика)
	
	ТаблицаРасчетов = Новый ТаблицаЗначений;
	ТаблицаРасчетов.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРасчетов.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТаблицаРасчетов.Колонки.Добавить("СуммаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Распределим результаты расчета Раздела 2 по доходам и вычетам.
	КолонкиПоиска = "ВидДохода, НалоговаяСтавка";
	ТаблицаДанныхЗаполнения.Индексы.Добавить(КолонкиПоиска);
	ОтборДанныхЗаполнения = Новый Структура(КолонкиПоиска);
	Для Каждого НалоговаяБаза Из ТаблицаНалоговойБазы Цикл
		
		СуммаНалогаПодлежащаяУплате   = НалоговаяБаза.СуммаНалогаПодлежащаяУплате;
		СуммаНалогаПодлежащаяВозврату = НалоговаяБаза.СуммаНалогаПодлежащаяВозврату;
		
		ПоследняяСтрока = Неопределено;
		
		ЗаполнитьЗначенияСвойств(ОтборДанныхЗаполнения, НалоговаяБаза);
		Для Каждого ДанныеЗаполнения Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхЗаполнения) Цикл
			
			Если СуммаНалогаПодлежащаяУплате > 0 Тогда
				СуммаНалога = Мин(СуммаНалогаПодлежащаяУплате, Окр(ДанныеЗаполнения.СуммаНалогаИсчисленная - ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная, 0));
				Если СуммаНалога <> 0 Тогда
					СтрокаРасчета = ТаблицаРасчетов.Добавить();
					СтрокаРасчета.КБК = КБКИсточникаДохода(ДанныеЗаполнения.Вид, СписокКБК, Ложь);
					СтрокаРасчета.ОКТМО = ОКТМОналогоплательщика; // доплата налога всегда по месту регистрации налогоплательщика
					СтрокаРасчета.СуммаНалога = СуммаНалога;
					СуммаНалогаПодлежащаяУплате = СуммаНалогаПодлежащаяУплате - СуммаНалога;
					ДанныеЗаполнения.СуммаНалогаИсчисленная = ДанныеЗаполнения.СуммаНалогаИсчисленная - СуммаНалога;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаНалогаПодлежащаяВозврату > 0 Тогда
				СуммаНалога = Мин(СуммаНалогаПодлежащаяВозврату, Окр(ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная, 0));
				Если СуммаНалога <> 0 Тогда
					СтрокаРасчета = ТаблицаРасчетов.Добавить();
					СтрокаРасчета.КБК = КБКИсточникаДохода(ДанныеЗаполнения.Вид, СписокКБК, Истина);
					СтрокаРасчета.ОКТМО = ДанныеЗаполнения.ОКТМО;
					СтрокаРасчета.СуммаНалога = -СуммаНалога;
					СуммаНалогаПодлежащаяВозврату = СуммаНалогаПодлежащаяВозврату - СуммаНалога;
					ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная = ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная - СуммаНалога;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Убеждаемся, что распределен весь результат расчетов.
		Если ТаблицаРасчетов.Количество() > 0 Тогда
			ПоследняяСтрока = ТаблицаРасчетов[ТаблицаРасчетов.Количество() - 1];
			Если СуммаНалогаПодлежащаяУплате <> 0 Тогда
				ПоследняяСтрока.СуммаНалога = ПоследняяСтрока.СуммаНалога + СуммаНалогаПодлежащаяУплате;
			КонецЕсли;
			Если СуммаНалогаПодлежащаяВозврату <> 0 Тогда
				ПоследняяСтрока.СуммаНалога = ПоследняяСтрока.СуммаНалога - СуммаНалогаПодлежащаяВозврату;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Свернем таблицу доходов по КБК и ОКТМО, чтобы получить итоги расчетов.
	КолонкиГруппировок = "КБК, ОКТМО";
	ТаблицаРасчетов.Свернуть(КолонкиГруппировок, "СуммаНалога");
	ТаблицаРасчетов.Сортировать(КолонкиГруппировок);
	
	// Если нет налога к уплате или возврату, то нужно выводить пустой раздел 1.
	Если ТаблицаРасчетов.Количество() = 0 Тогда
		СтрокаРасчета = ТаблицаРасчетов.Добавить();
		СтрокаРасчета.КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности;
		СтрокаРасчета.ОКТМО = ОКТМОналогоплательщика;
	КонецЕсли;
	
	ТаблицаСведенийОСуммахНалога = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	Для Каждого РезультатРасчета Из ТаблицаРасчетов Цикл
		НоваяСтрока = ТаблицаСведенийОСуммахНалога.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРасчета);
		НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата);
	КонецЦикла;
	
	Возврат ТаблицаСведенийОСуммахНалога;
	
КонецФункции

Функция НоваяСтруктураРасчетаНалоговойБазы(НалоговаяСтавка, ВидДохода)
	
	РасчетНалоговойБазы = Новый Структура;
	РасчетНалоговойБазы.Вставить("НалоговаяСтавка", НалоговаяСтавка);
	РасчетНалоговойБазы.Вставить("ВидДохода", ВидДохода);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходов", 0);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", 0);
	РасчетНалоговойБазы.Вставить("СуммаРасходов", 0);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовКИК", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалоговыхВычетов", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаУдержанная", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаУдержаннаяСМатериальнойВыгоды", 0);
	РасчетНалоговойБазы.Вставить("СуммаТорговогоСбора", 0);
	РасчетНалоговойБазы.Вставить("СуммаУплаченныхАвансовыхПлатежей", 0);
	РасчетНалоговойБазы.Вставить("СуммаФиксированныхАвансовыхПлатежей", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИностранногоГосударства", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПСН", 0);
	
	// ДЕНЬГИ
	РасчетНалоговойБазы.Вставить("СуммаПрофессиональныхВычетов", 0);
	
	РасчетНалоговойБазы.Вставить("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", 0);
	РасчетНалоговойБазы.Вставить("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", 0);
	// Конец ДЕНЬГИ

	Возврат РасчетНалоговойБазы;
	
КонецФункции

Функция НоваяСтруктураРасчетаСтандартныхИСоциальныхВычетов()
	
	РасчетСоциальныхВычетов = Новый Структура;
	РасчетСоциальныхВычетов.Вставить("СтраховыеВзносыНаПенсиюВсего", 0);
	РасчетСоциальныхВычетов.Вставить("СтраховыеВзносыНаПенсиюКВычету", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаВзносовПенсионныйФонд", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСтандартныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("СоциальныйВычетПожертвования", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСоциальныхВычетовБезОграничения", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСтандартныхСоциальныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("ИнвестиционныйВычет", 0);
	РасчетСоциальныхВычетов.Вставить("ИнвестиционныйВычетКВосстановлению", 0);
	
	РасчетСоциальныхВычетов.Вставить("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", 0); // ДЕНЬГИ
	РасчетСоциальныхВычетов.Вставить("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", 0); // ДЕНЬГИ
	
	Возврат РасчетСоциальныхВычетов;
	
КонецФункции

Процедура РассчитатьИтогиРасчетаНалоговойБазы(РасчетНалоговойБазы, ТаблицаДанныхЗаполнения, ПределыВычетов, ДанныеПомощника)
	
	// Расчет налоговой базы
	
	// Расчет суммы доходов, подлежащей налогообложению.
	ОбщаяСуммаДоходовПодлежащаяНалогообложению = Макс(0,
		РасчетНалоговойБазы.ОбщаяСуммаДоходов - РасчетНалоговойБазы.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению);
	
	// Расчет стандартных и социальных вычетов на листах Е1 и Е2.
	// Расчет вычета на пожертвования зависит от суммы доходов, подлежащей налогообложению.
	РассчитатьИтоговыеПоказателиСтандартныхИСоциальныхВычетов(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, ОбщаяСуммаДоходовПодлежащаяНалогообложению, ПределыВычетов, 
					ДанныеПомощника.ГодОтчета); // ДЕНЬГИ
	
	// В совокупности не может превышать значение показателя строки 030.
	СуммаРазницы = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетНалоговойБазы.СуммаРасходов - ОбщаяСуммаДоходовПодлежащаяНалогообложению;
	Если СуммаРазницы > 0 Тогда
		
		// Сначала уменьшаем сумму вычета по листам З и И - убытки могут быть перенесены на следующие годы.
		РасчетНалоговойБазы.СуммаРасходов = Макс(0, РасчетНалоговойБазы.СуммаРасходов - СуммаРазницы);
		СуммаРазницы = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетНалоговойБазы.СуммаРасходов - ОбщаяСуммаДоходовПодлежащаяНалогообложению;
		
		Если СуммаРазницы > 0 Тогда
			// Если вычетов все равно больше, уменьшаем сумму вычетов по строке 040.
			РасчетНалоговойБазы.СуммаНалоговыхВычетов = Макс(0, РасчетНалоговойБазы.СуммаНалоговыхВычетов - СуммаРазницы);
		КонецЕсли;
		
	КонецЕсли;
	
	// ДЕНЬГИ
	// Добавление вычетов на приобретение жилья, предоставленных налоговым агентом в текущем периоде
	РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов 
			+ ДанныеПомощника.ЖильеПредоставленоАгентомНаПриобретение
			+ ДанныеПомощника.ЖильеПредоставленоАгентомПоПроцентам;
	// Конец ДЕНЬГИ
	
	НалоговаяБаза = Макс(0,
		ОбщаяСуммаДоходовПодлежащаяНалогообложению
		+ РасчетНалоговойБазы.ОбщаяСуммаДоходовКИК
		- РасчетНалоговойБазы.СуммаНалоговыхВычетов
		- РасчетНалоговойБазы.СуммаРасходов);
	
	// Расчет имущественного вычета на приобретение недвижимости.
	РассчитатьПоказателиВычетаНаПриобретениеНедвижимости(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, НалоговаяБаза, ПределыВычетов, ДанныеПомощника);
	
	// Расчет суммы налога, подлежащей уплате (доплате) / возврату.
	
	СуммаНалогаИсчисленная = Окр(НалоговаяБаза * РасчетНалоговойБазы.НалоговаяСтавка / 100, 0);
	
	СуммаНалогаИсчисленнаяКУплате = Макс(0,
		СуммаНалогаИсчисленная
		- РасчетНалоговойБазы.СуммаНалогаУдержанная
		- РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды
		- РасчетНалоговойБазы.СуммаТорговогоСбора
		- РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей
		- РасчетНалоговойБазы.СуммаФиксированныхАвансовыхПлатежей
		- РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства);
	
	СуммаНалогаПодлежащаяУплате = Макс(0, СуммаНалогаИсчисленнаяКУплате - РасчетНалоговойБазы.СуммаНалогаПСН);
	
	МаксСуммаНалогаПодлежащаяВозврату = РасчетНалоговойБазы.СуммаНалогаУдержанная + РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды + РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей;
	РасчетнаяСуммаНалогаПодлежащаяВозврату =
		РасчетНалоговойБазы.СуммаНалогаУдержанная
		+ РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды
		+ РасчетНалоговойБазы.СуммаТорговогоСбора
		+ РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей
		+ РасчетНалоговойБазы.СуммаФиксированныхАвансовыхПлатежей
		+ РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства
		- СуммаНалогаИсчисленная;
	
	СуммаНалогаПодлежащаяВозврату = Макс(0, Мин(МаксСуммаНалогаПодлежащаяВозврату, РасчетнаяСуммаНалогаПодлежащаяВозврату));
	
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовПодлежащаяНалогообложению", ОбщаяСуммаДоходовПодлежащаяНалогообложению);
	РасчетНалоговойБазы.Вставить("НалоговаяБаза", НалоговаяБаза);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИсчисленная", СуммаНалогаИсчисленная);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИсчисленнаяКУплате", СуммаНалогаИсчисленнаяКУплате);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПодлежащаяУплате", СуммаНалогаПодлежащаяУплате);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПодлежащаяВозврату", СуммаНалогаПодлежащаяВозврату);
	
КонецПроцедуры

Процедура РассчитатьПоказателиВычетаНаПриобретениеНедвижимости(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, НалоговаяБаза, 
				ПределыВычетов, ДанныеПомощника)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Вид", Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости);
	ОтборСтрок.Вставить("ВидДохода", РасчетНалоговойБазы.ВидДохода);
	ОтборСтрок.Вставить("НалоговаяСтавка", РасчетНалоговойБазы.НалоговаяСтавка);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	ОбщаяСуммаСтоимость = 0;
	ОбщаяСуммаПроценты = 0;
	
	ПределВычетаНаПриобретениеНедвижимостиСтоимость = ПределыВычетов.НаПриобретениеНедвижимостиСтоимость;
	
	ЕстьВычетПоПроцентам = Ложь;
	
	СтрокаСНедвижимостьюДо2014Года = Неопределено;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		Если СтрокаДанныхЗаполнения.СтруктураДанных.ОбъектПриобретенДо2014Года Тогда
			СтрокаСНедвижимостьюДо2014Года = СтрокаДанныхЗаполнения;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		
		// Если недвижимость приобретена до 2014 года, то вычет предоставляется только по одному объекту недвижимости.
		// Используем первую найденную строку с такой недвижимостью.
		Если СтрокаСНедвижимостьюДо2014Года <> Неопределено И СтрокаДанныхЗаполнения <> СтрокаСНедвижимостьюДо2014Года Тогда
			СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = 0;
			СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 0;
			Продолжить;
		КонецЕсли;
		
		// Если объект приобретен до 2014 года в долевую собственность, то предел рассчитывается пропорционально доле.
		Если СтрокаДанныхЗаполнения = СтрокаСНедвижимостьюДо2014Года Тогда
			ПределВычетаНаПриобретениеНедвижимостиСтоимость =
				Окр(ПределВычетаНаПриобретениеНедвижимостиСтоимость
				* СтруктураДанных.ДоляВПравеСобственностиЧислитель
				/ СтруктураДанных.ДоляВПравеСобственностиЗнаменатель, 2);
		КонецЕсли;
		
		// Если объектов несколько, то общая сумма строк 120 листа Д1 не должна превышать предел вычета.
		// Поэтому рассчитываем значение строки 120 листа Д1 с учетом предела.
		СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = Мин(СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости,
			ПределВычетаНаПриобретениеНедвижимостиСтоимость - ОбщаяСуммаСтоимость);
		
		// Проверим, чтобы значение строки не стало отрицательным.
		СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = Макс(0,
			СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости);
		
		ОбщаяСуммаСтоимость = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость,
			ОбщаяСуммаСтоимость + СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости);
		
		// Вычет по процентам предоставляется только по одному объекту недвижимости.
		Если СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость > 0
			И НЕ ЕстьВычетПоПроцентам Тогда
			
			ЕстьВычетПоПроцентам = Истина;
			
			// По кредитам, оформленным после 2014 года, максимальная сумма вычета ограничена пределом вычета.
			Если Не СтруктураДанных.КредитОформленДо2014Года Тогда
				СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 
					Мин(ПределыВычетов.НаПриобретениеНедвижимостиПроценты, СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость);
			КонецЕсли;
			
			ОбщаяСуммаПроценты = СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость;
			
		ИначеЕсли СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость > 0
			И ЕстьВычетПоПроцентам Тогда
			
			СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// ДЕНЬГИ
	ВычетПрошлыхЛетСтоимость = ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыНаПриобретение;
	ВычетПрошлыхЛетПроценты  = ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыПоПроцентам;
	// Конец ДЕНЬГИ
	
	// Рассчитаем промежуточные итоги листа Д1.
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ИндексИтоговойСтроки = -1;
		Для Каждого Строка Из НайденныеСтроки Цикл
			ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
		КонецЦикла;
		
		ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки];
		СтруктураДанных = ИтоговаяСтрока.СтруктураДанных;
		
		СтруктураДанных.Вставить("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", НалоговаяБаза);
		
		// Вычет по стоимости, принятый к учету в предыдущие годы. Не может превышать предела.
		ВычетПрошлыхЛет = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость, ВычетПрошлыхЛетСтоимость); // ДЕНЬГИ
		
		МаксимальныйВычет = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость, ОбщаяСуммаСтоимость);
		ДоступныйВычет = Макс(0, МаксимальныйВычет - ВычетПрошлыхЛет);
		СтоимостьКВычету = Мин(ДоступныйВычет, НалоговаяБаза);
		
		// Остаток рассчитывается от общей стоимости, а не от предела вычета.
		ОстатокСтоимостиНаКонец = ОбщаяСуммаСтоимость - ВычетПрошлыхЛет - СтоимостьКВычету;
		
		СтруктураДанных.Вставить("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", ВычетПрошлыхЛет);
		СтруктураДанных.Вставить("СуммаРасходовНаПриобретениеНедвижимостиКВычету", СтоимостьКВычету);
		СтруктураДанных.Вставить("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", ОстатокСтоимостиНаКонец);
		
		ДоступныйВычет = Макс(0, ОбщаяСуммаПроценты - ВычетПрошлыхЛетПроценты); // ДЕНЬГИ
		ПроцентыКВычету = Мин(НалоговаяБаза - СтоимостьКВычету, ДоступныйВычет);
		ОстатокПроцентыНаКонец = Макс(0, ОбщаяСуммаПроценты - ВычетПрошлыхЛетПроценты - ПроцентыКВычету); // ДЕНЬГИ
		
		// Сумма процентов к вычету с учетом ограничения, но без учета размера налоговой базы.
		СтруктураДанных.Вставить("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", ВычетПрошлыхЛетПроценты); // ДЕНЬГИ
		СтруктураДанных.Вставить("СуммаПроцентовПоКредитуНаНедвижимостьКВычету",  ПроцентыКВычету);
		СтруктураДанных.Вставить("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", ОстатокПроцентыНаКонец);
		
		// Скорректируем налоговую базу и налоговые вычеты.
		НалоговаяБаза = НалоговаяБаза - СтоимостьКВычету - ПроцентыКВычету;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + СтоимостьКВычету + ПроцентыКВычету;
		
	КонецЕсли;
	
	// Удалим служебные ключи.
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ОбъектПриобретенДо2014Года");
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("КредитОформленДо2014Года");
		// ДЕНЬГИ
		//СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ВычетПрошлыхЛетСтоимость");
		//СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ВычетПрошлыхЛетПроценты");
		// Конец ДЕНЬГИ 
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеПоказателиСтандартныхИСоциальныхВычетов(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, ОблагаемыйДоход, ПределыВычетов, ГодОтчета) // ДЕНЬГИ
	
	МассивВычетов = Новый Массив;
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.Социальный);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.Инвестиционный);
	
	РасчетВычетов = НоваяСтруктураРасчетаСтандартныхИСоциальныхВычетов();
	
	ОтборДанныхВычета = Новый Структура("Вид, ВидДохода, НалоговаяСтавка");
	ОтборДанныхВычета.ВидДохода = РасчетНалоговойБазы.ВидДохода;
	ОтборДанныхВычета.НалоговаяСтавка = РасчетНалоговойБазы.НалоговаяСтавка;
	
	Для Каждого Вычет Из МассивВычетов Цикл
		ОтборДанныхВычета.Вид = Вычет;
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхВычета) Цикл
			ДобавитьРасчетСтандартныхИСоциальныхВычетов(СтрокаТаблицы.Вид, СтрокаТаблицы.СтруктураДанных, РасчетВычетов);
		КонецЦикла;
	КонецЦикла;
	
	// ДЕНЬГИ
	Если ГодОтчета >= 2018 Тогда
		
		ОтборДанныхВычета.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда;
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхВычета) Цикл
			
			Если СтрокаТаблицы.СтруктураДанных.Свойство("ВычетыПредоставленныеАгентом") Тогда
				РасчетВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами = 
					РасчетВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами 
					+ СтрокаТаблицы.СтруктураДанных.ВычетыПредоставленныеАгентом.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами;
				РасчетВычетов.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами = 
					РасчетВычетов.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами 
					+ СтрокаТаблицы.СтруктураДанных.ВычетыПредоставленныеАгентом.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами;
			КонецЕсли;
			
		КонецЦикла;
		
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов = РасчетВычетов.ОбщаяСуммаСтандартныхВычетов 
				- РасчетВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами;
		//РасчетВычетов.ОбщаяСуммаСтандартныхВычетов = РасчетВычетов.ОбщаяСуммаСтандартныхВычетов 
		//		- РасчетВычетов.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами;
		
	КонецЕсли;
	// Конец ДЕНЬГИ
	
	// Социальный вычет на пожертвования не может превышать 25% от общей суммы доходов, подлежащей налогообложению.
	РасчетВычетов.СоциальныйВычетПожертвования = Мин(
		РасчетВычетов.СоциальныйВычетПожертвования,
		Окр(ОблагаемыйДоход * ПределыВычетов.ПожертвованияПроцентДохода, 2));
	
	РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения =
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения + РасчетВычетов.СоциальныйВычетПожертвования;
	
	// Связанные показатели.
	РасчетВычетов.ОбщаяСуммаВзносовПенсионныйФонд = РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни;
	
	// Сумма отдельных социальных вычетов не должна превышать установленного предела.
	РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
		Мин(РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением, ПределыВычетов.СоциальныеВычеты);
	
	// Итоговые показатели групп.
	РасчетВычетов.ОбщаяЗаявляемаяСуммаСоциальныхВычетов =
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением + РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения;
	
	РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов =
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
		+ РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
		+ РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения;
	
	// Увеличиваем общую сумму налоговых вычетов.
	РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов 
					+ РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов
					+ РасчетВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами; // ДЕНЬГИ
	
	// Показатели расчета, которые переносятся на лист Е1 с последней страницы листа Е2
	ИтоговыеПоказателиЛистаЕ2 = Новый Массив;
	ИтоговыеПоказателиЛистаЕ2.Добавить("СтраховыеВзносыНаПенсиюВсего");
	ИтоговыеПоказателиЛистаЕ2.Добавить("СтраховыеВзносыНаПенсиюКВычету");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ОбщаяСуммаВзносовПенсионныйФонд");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ИнвестиционныйВычет");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ИнвестиционныйВычетКВосстановлению");
	ЗаполнитьИтовыеПоказателиЛистаЕ2 = Ложь;
	
	// ДЕНЬГИ
	РасчетНалоговойБазы.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами = РасчетВычетов.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами;
	РасчетНалоговойБазы.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами  = РасчетВычетов.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами;
	// Конец ДЕНЬГИ
	
	// Добавим итоговые показатели вычетов в таблицу данных, чтобы заполнить лист декларации.
	Если РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов <> 0 Тогда
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РасчетНалоговойБазы, "ВидДохода, НалоговаяСтавка");
		СтруктураДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасчетВычетов);
		Для Каждого ИмяПоказателяЛистаЕ2 Из ИтоговыеПоказателиЛистаЕ2 Цикл
			СтруктураДанных.Удалить(ИмяПоказателяЛистаЕ2);
			ЗаполнитьИтовыеПоказателиЛистаЕ2 = ЗаполнитьИтовыеПоказателиЛистаЕ2
				Или РасчетВычетов[ИмяПоказателяЛистаЕ2] <> 0;
		КонецЦикла;
		НоваяСтрока.СтруктураДанных = СтруктураДанных;
	ИначеЕсли РасчетВычетов.ИнвестиционныйВычет <> 0
		Или РасчетВычетов.ИнвестиционныйВычетКВосстановлению <> 0 Тогда
		ЗаполнитьИтовыеПоказателиЛистаЕ2 = Истина;
	КонецЕсли;
	
	Если ЗаполнитьИтовыеПоказателиЛистаЕ2 Тогда
		
		ОтборДанныхВычета.Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхВычета);
		
		ИндексИтоговойСтроки = -1;
		Для Каждого Строка Из НайденныеСтроки Цикл
			ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
		КонецЦикла;
		
		Если ИндексИтоговойСтроки >= 0 Тогда
			ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки]
		Иначе
			ИтоговаяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(ИтоговаяСтрока, РасчетНалоговойБазы, "ВидДохода, НалоговаяСтавка");
		КонецЕсли;
		
		Для Каждого ИмяПоказателяЛистаЕ2 Из ИтоговыеПоказателиЛистаЕ2 Цикл
			ИтоговаяСтрока.СтруктураДанных.Вставить(ИмяПоказателяЛистаЕ2, РасчетВычетов[ИмяПоказателяЛистаЕ2]);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасчетСтандартныхИСоциальныхВычетов(Вид, ДанныеВычета, РасчетВычетов)
	
	Если Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
		
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов =
			РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
			+ ДанныеВычета.СтандартныйВычетПо218_1_1
			+ ДанныеВычета.СтандартныйВычетПо218_1_2;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
		
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов =
			РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
			+ ДанныеВычета.СтандартныйВычетНаДетей
			+ ДанныеВычета.СтандартныйВычетНаДетейЕдинственномуРодителю
			+ ДанныеВычета.СтандартныйВычетНаДетейИнвалидов
			+ ДанныеВычета.СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
		
		РасчетВычетов.СоциальныйВычетПожертвования =
			РасчетВычетов.СоциальныйВычетПожертвования + ДанныеВычета.СоциальныйВычетПожертвования;
		
		РасчетВычетов.СтраховыеВзносыНаПенсиюВсего =
			РасчетВычетов.СтраховыеВзносыНаПенсиюВсего + ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
		
		РасчетВычетов.СтраховыеВзносыНаПенсиюКВычету =
			РасчетВычетов.СтраховыеВзносыНаПенсиюКВычету + ДанныеВычета.СтраховыеВзносыНаПенсиюКВычету;
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения = 
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения
			+ ДанныеВычета.СоциальныйВычетОбучениеДетей
			+ ДанныеВычета.СоциальныйВычетДорогостоящееЛечение;
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
			+ ДанныеВычета.СоциальныйВычетОбучениеСвое
			+ ДанныеВычета.СоциальныйВычетЛечениеМедикаменты
			+ ДанныеВычета.СоциальныйВычетМедикаменты
			+ ДанныеВычета.СоциальныйВычетОбычноеЛечение
			+ ДанныеВычета.СоциальныйВычетМедицинскоеСтрахование
			+ ДанныеВычета.РасходыНаПрохождениеНезависимойОценкиКвалификации
			+ ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
		
		РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни =
			РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни
			+ ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
		
		// Удалим временные ключи.
		ДанныеВычета.Удалить("СтраховыеВзносыНаПенсиюВсего");
		ДанныеВычета.Удалить("СтраховыеВзносыНаПенсиюКВычету");
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
			+ ДанныеВычета.СуммаВзносовПенсионныйФондКВычету;
		
		РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни =
			РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни
			+ ДанныеВычета.СуммаВзносовПенсионныйФондКВычету;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		
		РасчетВычетов.ИнвестиционныйВычет =
			РасчетВычетов.ИнвестиционныйВычет + ДанныеВычета.ИнвестиционныйВычет;
		
		РасчетВычетов.ИнвестиционныйВычетКВосстановлению =
			РасчетВычетов.ИнвестиционныйВычетКВосстановлению + ДанныеВычета.ИнвестиционныйВычетКВосстановлению;
		
		// Удалим временные ключи.
		ДанныеВычета.Удалить("ИнвестиционныйВычет");
		ДанныеВычета.Удалить("ИнвестиционныйВычетКВосстановлению");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасчетНалоговойБазыПоВидуДохода(Вид, ДоходВычет, РасчетНалоговойБазы)
	
	Если Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность
		И ДоходВычет.Свойство("ОбщаяСуммаДоходаИП") Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.ОбщаяСуммаДоходаИП;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаВычетаИП;
		РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей = РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей + ДоходВычет.СуммаУплаченныхАвансовыхПлатежейИП;
		
		РасчетНалоговойБазы.СуммаТорговогоСбора = РасчетНалоговойБазы.СуммаТорговогоСбора + ДоходВычет.СуммаТорговогоСбора;
		ДоходВычет.Удалить("СуммаТорговогоСбора");
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		//СуммаНалоговыхВычетов учтена при вычислении итогов
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
		
		КолонкиДоходов = "ЦенныеБумагиИтогоСуммаДоходов,ЦенныеБумагиСуммаДохода";
		Для Каждого КолонкаДохода Из Новый Структура(КолонкиДоходов) Цикл
			Если ДоходВычет.Свойство(КолонкаДохода.Ключ) Тогда
				РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет[КолонкаДохода.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		КолонкиРасходов = "ЦенныеБумагиИтогоСуммаРасходовКВычету,ЦенныеБумагиСуммаРасходовУменьшающаяДоходы,ЦенныеБумагиИтогоСуммаУбытка";
		Для Каждого КолонкаРасхода Из Новый Структура(КолонкиРасходов) Цикл
			Если ДоходВычет.Свойство(КолонкаРасхода.Ключ) Тогда
				РасчетНалоговойБазы.СуммаРасходов = РасчетНалоговойБазы.СуммаРасходов + ДоходВычет[КолонкаРасхода.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		Если ДоходВычет.Свойство("СуммаНалогаУдержаннаяРФ") Тогда
			РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		КонецЕсли;
		
		Если ДоходВычет.Свойство("ЦенныеБумагиСуммаПрибылиКВычету") Тогда
			РасчетНалоговойБазы.СуммаНалоговыхВычетов =
				РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ЦенныеБумагиСуммаПрибылиКВычету;
		КонецЕсли;
		
		Если ДоходВычет.Свойство("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету") Тогда
			РасчетНалоговойБазы.СуммаНалоговыхВычетов =
				РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
		
		Если ДоходВычет.Свойство("СуммаДоходаРФ") Тогда
			РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		КонецЕсли;
		Если ДоходВычет.Свойство("СуммаНалогаУдержаннаяРФ") Тогда
			РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ Тогда
		
		Если Не ДоходВычет.Свойство("ДоходУчтен") Тогда
			РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		КонецЕсли;
		Если Не ДоходВычет.Свойство("ВычетУчтен") Тогда
			РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.СуммаВычета;
		КонецЕсли;
		
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВыигрышВЛотерееАзартныхИграх Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ВознаграждениеНаследникуАвтора Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
		
		Если Не ДоходВычет.Свойство("ДоходУчтен") Тогда
			РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаРубДоходаЗаПределамиРФ;
		КонецЕсли;
		Если Не ДоходВычет.Свойство("ВычетУчтен") Тогда
			РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.СуммаВычета;
		КонецЕсли;
		
		РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства =
			РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства + Окр(ДоходВычет.СуммаПодлежащаяЗачетуВРФ, 0);
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.ИнвестиционныйВычетКВосстановлению;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ИнвестиционныйВычет;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Имущественный Тогда
		
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаИмущественногоВычета;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Профессиональный Тогда
		
		Если Не ДоходВычет.Свойство("ВычетУчтен") Тогда
			РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ПрофессиональныеВычетыВсего;
		КонецЕсли;
		РасчетНалоговойБазы.СуммаПрофессиональныхВычетов = РасчетНалоговойБазы.СуммаПрофессиональныхВычетов + ДоходВычет.ПрофессиональныеВычетыВсего;
		
	ИначеЕсли ДоходВычет.Свойство("СуммаДоходовНеПодлежащаяНалогообложению") Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению = ДоходВычет.СуммаДоходовНеПодлежащаяНалогообложению;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЗаполнения_ВычетыПредоставленныеАгентом(СтруктураСправки2НДФЛ) 
	Результат = Новый Структура;
	
	Результат.Вставить("СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами", 0);
	Результат.Вставить("СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами", 0);
	
	Для каждого СтрокаВычета Из СтруктураСправки2НДФЛ.Вычеты2НДФЛ Цикл
		
		Если СтрокаВычета.КодВычета >= "104" И СтрокаВычета.КодВычета <= "194" Тогда
			Результат.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами = 
				Результат.СуммаСтандартныхВычетовПредоставленныхНалоговымиАгентами + СтрокаВычета.СуммаВычета;
		ИначеЕсли СтрокаВычета.КодВычета >= "320" И СтрокаВычета.КодВычета <= "328" Тогда
			Результат.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами = 
				Результат.СуммаСоциальныхВычетовПредоставленныхНалоговымиАгентами + СтрокаВычета.СуммаВычета;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 


// Добавление данных для учета на листе Д2
Процедура ДобавитьДанныеЗаполненияИмущественногоВычета(ТаблицаДанныхЗаполнения, ДанныеФормы, ВидДохода, НалоговаяСтавка, ТаблицаПоказателей, 
				КодыИсточниковДоходов, ПределыВычетов) // ДЕНЬГИ
	
	Перем СуммаДохода, СуммаВычета, ОбщаяСуммаВычета;
	
	ИмущественныйВычет = ТаблицаДанныхЗаполнения.Найти(Перечисления.ВычетыФизическихЛиц.Имущественный, "Вид");
	Если ИмущественныйВычет = Неопределено Тогда
		ИмущественныйВычет = ТаблицаДанныхЗаполнения.Добавить();
		ИмущественныйВычет.ВидДохода = ВидДохода;
		ИмущественныйВычет.НалоговаяСтавка = НалоговаяСтавка;
		ИмущественныйВычет.Вид = Перечисления.ВычетыФизическихЛиц.Имущественный;
		СтруктураВычета = Новый Структура;
		ИмущественныйВычет.СтруктураДанных = СтруктураВычета;
	Иначе
		СтруктураВычета = ИмущественныйВычет.СтруктураДанных;
	КонецЕсли;
	
	ВидИмущества   = ДанныеФормы.ВидИмущества; // ДЕНЬГИ
	ВидВычета      = ДанныеФормы.ВидВычета; // ДЕНЬГИ
	Предел         = Неопределено; // ДЕНЬГИ
	
	ОтборПоказателей = Новый Структура("ВидИмущества, ВидВычета", ВидИмущества, ВидВычета);
	СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(ОтборПоказателей);
	
	Если СтрокиПоказателей.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВычетСсылка    = СтрокиПоказателей[0].ВидВычетаСсылка;
	
	Если ВидИмущества = "Жилая" И ВидВычета = "Норматив" Тогда
		
		КлючДохода = "ДоходыПродажаЖилойНедвижимости";
		КлючВычета = "ИмущественныйВычетПродажаЖилойНедвижимости";
		Предел = ПределыВычетов.ПродажаЖилойНедвижимости; // ДЕНЬГИ
		
	ИначеЕсли ВидИмущества = "Доля" И ВидВычета = "Норматив" Тогда
		
		КлючДохода = "ДоходыПродажаДолиЖилойНедвижимости";
		КлючВычета = "ИмущественныйВычетПродажаДолиЖилойНедвижимости";
		Предел = ПределыВычетов.ПродажаЖилойНедвижимости; // ДЕНЬГИ
		
	ИначеЕсли (ВидИмущества = "Жилая" Или ВидИмущества = "Доля") И ВидВычета = "Расходы" Тогда
		
		КлючДохода = "ДоходыСРасходамиПродажаЖилойНедвижимости";
		КлючВычета = "РасходыПродажаЖилойНедвижимости";
		
	ИначеЕсли ВидИмущества = "ИнаяНедвижимость" И ВидВычета = "Норматив" Тогда
		
		КлючДохода = "ДоходыПродажаИнойНедвижимости";
		КлючВычета = "ИмущественныйВычетПродажаИнойНедвижимости";
		Предел = ПределыВычетов.ПродажаЖилойНедвижимости; // ДЕНЬГИ
		
	ИначеЕсли ВидИмущества = "ИнаяНедвижимость" И ВидВычета = "Расходы" Тогда
		
		КлючДохода = "ДоходыСРасходамиПродажаИнойНедвижимости";
		КлючВычета = "РасходыПродажаИнойНедвижимости";
		
	ИначеЕсли (ВидИмущества = "Автомобиль" Или ВидИмущества = "Прочее") И ВидВычета = "Норматив" Тогда
		
		КлючДохода = "ДоходыПродажаИногоИмущества";
		КлючВычета = "ИмущественныйВычетПродажаИногоИмущества";
		Предел = ПределыВычетов.ПродажаИногоИмущества; // ДЕНЬГИ
		
	ИначеЕсли (ВидИмущества = "Автомобиль" Или ВидИмущества = "Прочее" Или ВидИмущества = "Стройка") И ВидВычета = "Расходы" Тогда
		
		КлючДохода = "ДоходыСРасходамиПродажаИногоИмущества";
		КлючВычета = "РасходыПродажаИногоИмущества";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	КлючОбщейСуммыВычета    = "ОбщаяСуммаИмущественногоВычета";
	
	Если Не СтруктураВычета.Свойство(КлючДохода, СуммаДохода) Тогда
		СуммаДохода = 0;
	КонецЕсли;
	Если Не СтруктураВычета.Свойство(КлючВычета, СуммаВычета) Тогда
		СуммаВычета = 0;
	КонецЕсли;
	Если Не СтруктураВычета.Свойство(КлючОбщейСуммыВычета, ОбщаяСуммаВычета) Тогда
		ОбщаяСуммаВычета = 0;
	КонецЕсли;
	
	СуммаДохода = СуммаДохода + ДанныеФормы.СуммаДохода;
	
	ВычетПоДокументу = 0;
	Если ВидВычета = "Норматив" Тогда
		
		ОстатокПредела = Макс(0, Предел - СуммаВычета);
		ВычетПоДокументу = Мин(ОстатокПредела, ДанныеФормы.СуммаВычета, ДанныеФормы.СуммаДохода);
		
	ИначеЕсли ВидВычета = "Расходы" Тогда
		
		ВычетПоДокументу = Мин(ДанныеФормы.СуммаДохода, ДанныеФормы.СуммаВычета);
		
	КонецЕсли;
	СуммаВычета      = СуммаВычета + ВычетПоДокументу;
	ОбщаяСуммаВычета = ОбщаяСуммаВычета + ВычетПоДокументу;
	
	СтруктураВычета.Вставить(КлючДохода, СуммаДохода);
	СтруктураВычета.Вставить(КлючВычета, СуммаВычета);
	СтруктураВычета.Вставить(КлючОбщейСуммыВычета, ОбщаяСуммаВычета);
	
	Если ВычетСсылка = Перечисления.ВычетыФизическихЛиц.Профессиональный Тогда
		СтруктураВычета.Вставить("ИсточникДоходовПрофессиональногоВычета", КодыИсточниковДоходов.ДоходРФ);
	КонецЕсли;
	
КонецПроцедуры

// Добавление данных для учета на листе Ж
Процедура ДобавитьДанныеЗаполненияДолевогоСтроительства(ТаблицаДанныхЗаполнения, ДанныеФормы, ВидДохода, НалоговаяСтавка, ПределыВычетов)
	
	Перем СуммаДохода, СуммаВычета, ОбщаяСуммаВычета;
	
	КодИсточника = "1";
	Вид          = Перечисления.ВычетыФизическихЛиц.Профессиональный;
	СтрокиВычета = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид", Вид));
	Для каждого СтрокаТаблицы Из СтрокиВычета Цикл
		Если СтрокаТаблицы.СтруктураДанных.ТипИсточникаДохода = КодИсточника Тогда
			СтрокаВычета = СтрокаТаблицы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаВычета = Неопределено Тогда
		СтрокаВычета = ТаблицаДанныхЗаполнения.Добавить();
		
		СтрокаВычета.ВидДохода       = ВидДохода;
		СтрокаВычета.НалоговаяСтавка = НалоговаяСтавка;
		СтрокаВычета.Вид             = Вид;
		СтрокаВычета.СтруктураДанных       = Отчеты.РегламентированныйОтчет3НДФЛ.НовыйСтруктураПоказателейПрофессиональныхВычетов(КодИсточника);
	КонецЕсли;
	
	СтрокаВычета.СтруктураДанных.УступкаПравТребования_Доход = СтрокаВычета.СтруктураДанных.УступкаПравТребования_Доход
			+ ДанныеФормы.СуммаДохода;
	СтрокаВычета.СтруктураДанных.УступкаПравТребования_Вычет = СтрокаВычета.СтруктураДанных.УступкаПравТребования_Вычет
			+ ДанныеФормы.СуммаВычета;
	
	// Подсчет итога
	СтрокаВычета.СтруктураДанных.ПрофессиональныеВычетыВсего = СтрокаВычета.СтруктураДанных.ПоДоговрамГПХ_Вычет + СтрокаВычета.СтруктураДанных.АвторскиеПоРасходам_Вычет
				+ СтрокаВычета.СтруктураДанных.АвторскиеПоНорме_Вычет + СтрокаВычета.СтруктураДанных.ПродажаУставногоКапитала_Вычет + СтрокаВычета.СтруктураДанных.ЛиквидацияОбщества_Вычет
				 + СтрокаВычета.СтруктураДанных.УменьшениеСтоимостиДоли_Вычет + СтрокаВычета.СтруктураДанных.УступкаПравТребования_Вычет;
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеПомощникаСохраненныеВДекларации3НДФЛ(Декларация) Экспорт
	
	ХранилищеДанныхОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "ДанныеОтчета");
	Если ТипЗнч(ХранилищеДанныхОтчета) <> Тип("ХранилищеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ХранилищеДанныхОтчета.Получить();
	Если ДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения")
		И ДанныеОтчета.ДанныеПомощникаЗаполнения.Количество() > 0 Тогда
		Возврат ДанныеОтчета.ДанныеПомощникаЗаполнения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


///////////////////////////////////////////////////////////////
// ДЕНЬГИ

Функция ДанныеПомощникаИзФормы(ФормаПомощника) 

	ДанныеПомощника = НоваяСтруктураДанныхПомощника(ФормаПомощника.ГодОтчета);
	Для каждого КлючИЗначение Из ДанныеПомощника Цикл
		
		Если КлючИЗначение.Ключ = "СписокДокументов" Тогда
			ДанныеПомощника[КлючИЗначение.Ключ] = СписокДокументовИзТаблицыФормы(ФормаПомощника[КлючИЗначение.Ключ], ФормаПомощника.ГодОтчета);
		ИначеЕсли КлючИЗначение.Ключ = "ВерсияПомощника" Тогда
			ДанныеПомощника[КлючИЗначение.Ключ] = НомерВерсииПомощника(ФормаПомощника.ГодОтчета);
		Иначе
			ДанныеПомощника[КлючИЗначение.Ключ] = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФормаПомощника[КлючИЗначение.Ключ]);
		КонецЕсли;
		 
	КонецЦикла;

	Возврат ДанныеПомощника;
	
КонецФункции

// Заполняет структуру данных титульного листа.
//
// Параметры:
//   ТитульныйЛист - струтура
//   Организация - СправочникСсылка.Организации
//   Период - Дата - Налоговый период
//
Процедура ЗаполнитьТитульныйЛистИзПомощника(ТитульныйЛист, ДанныеПомощника) Экспорт
	
	// Шапка
	ТитульныйЛист.Фамилия   = СокрЛП(ДанныеПомощника.НалогоплательщикФамилия);
	ТитульныйЛист.Имя       = СокрЛП(ДанныеПомощника.НалогоплательщикИмя);
	ТитульныйЛист.Отчество  = СокрЛП(ДанныеПомощника.НалогоплательщикОтчество);
	
	ТитульныйЛист.ИНН       = СокрЛП(ДанныеПомощника.НалогоплательщикИНН);
	ТитульныйЛист.Период    = "34";
	ТитульныйЛист.ОтчетГод  = Формат(ДанныеПомощника.ГодОтчета, "ЧГ=0");
	ТитульныйЛист.КодИМНС   = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ДанныеПомощника.КодИФНС, 4, " ", "Слева");
	ТитульныйЛист.КодСтраны = ДанныеПомощника.НалогоплательщикСтрана.Код; 
	
	ТитульныйЛист.ПоМесту                   = ДанныеПомощника.НалогоплательщикКатегория; 
	ТитульныйЛист.СтатусНалогоплательщика   = Строка(ДанныеПомощника.НалогоплательщикСтатус); 
	
	ТитульныйЛист.ДатаРождения  = ДанныеПомощника.НалогоплательщикДатаРождения;
	ТитульныйЛист.МестоРождения = ДанныеПомощника.НалогоплательщикМестоРождения;
	
	ТитульныйЛист.КодВидаДокумента     = СокрЛП(ДанныеПомощника.ДокументКодВида);
	ТитульныйЛист.СерияИНомерДокумента = СокрЛП(ДанныеПомощника.ДокументСерияИНомер);
	ТитульныйЛист.ДатаВыдачиДокумента  = ДанныеПомощника.ДокументДатаВыдачи;
	ТитульныйЛист.КемВыданДокумент     = СокрЛП(ДанныеПомощника.ДокументКемВыдан);
	
	ТитульныйЛист.ТелОрганизации     = СокрЛП(ДанныеПомощника.НалогоплательщикНомерТелефона);
	
	ТитульныйЛист.ДатаПодписи = ДанныеПомощника.ДатаПодписи;
	
КонецПроцедуры

Процедура УчестьКодДоходаВНеоблагаемыхСуммах_2018(ТаблицаДанныхЗаполнения, СтруктураДокумента, СтрокаДохода) 
	
	
	КодДохода     = СтруктураДокумента.КодДохода;
	СуммаДохода   = СтруктураДокумента.СуммаДохода;
	КодВычета     = СтруктураДокумента.КодВычета;
	СуммаВычета   = СтруктураДокумента.СуммаВычета;
	
	СуммаВычета    = Макс(0, Мин(СуммаВычета, СуммаДохода));
	Ограничение    = Неопределено;
	КлючДохода     = Неопределено;
	КлючВычета     = Неопределено;
	
	Если КодДохода = "2762" Или КодВычета = "508" Тогда	// Мат.помощь по рождению ребенка
		
		КлючДохода = "МатПомощьПриРождении";
		КлючВычета = "МатПомощьПриРожденииНеПодлежащаяНалогообложению";
		
	ИначеЕсли КодДохода = "2760" Или КодВычета = "503" Тогда //Мат помощь по выходу на пенсию
		
		КлючДохода = "МатПомощьПенсионерам";
		КлючВычета = "МатПомощьПенсионерамНеПодлежащаяНалогообложению";
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2761" Или КодВычета = "506" Тогда //Мат помощь от общественных организаций инвалидов
		
		КлючДохода = "МатПомощьИнвалидов"; //П000600001050
		КлючВычета = "МатПомощьИнвалидовНеПодлежащаяНалогообложению";  //П000600001060
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2720" Или КодВычета = "501" Тогда //Подарки
		
		КлючДохода = "ОбщаяСтоимостьПодарков"; //П000600001070
		КлючВычета = "СтоимостьВыигрышейЛотерейНеПодлежащаяНалогообложению"; //П000600001080
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2730" Или КодВычета = "502" Тогда //Призы в соревнованиях, проводимых по решению правительства РФ
		
		КлючДохода = "СтоимостьПризов";  //П000600001090
		КлючВычета = "СтоимостьПризовНеПодлежащаяНалогообложению"; //П000600001100
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2770" Тогда //Возмещение оплаты медикаментов
		
		КлючДохода = "СтоимостьМедикаментов"; //П000600001110
		КлючВычета = "СтоимостьМедикаментовНеПодлежащаяНалогообложению"; //П000600001120
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2790" Или КодВычета = "507" Тогда //Подарки ветеранам и приравненным к ним
		
		КлючДохода = "ПомощьВетеранам";  //П000600001130
		КлючВычета = "ПомощьВетеранамНеПодлежащаяНалогообложению"; //П000600001140
		Ограничение = 10000;
		
	ИначеЕсли КодДохода = "1211" Или КодВычета = "607" Или КодВычета = "510" Тогда //Взносы в ПФ выплачиваемые за работника
		
		КлючДохода = "ВзносыВПФ"; //П000600001150
		КлючВычета = "ВзносыВПФНеПодлежащаяНалогообложению"; //П000600001160
		Ограничение = 12000;
		
	ИначеЕсли КодДохода = "2791" Или КодВычета = "509" Тогда //Оплата труда в натруальной форме от с/х производителей
		
		КлючДохода = "ДоходВНатФорме";  //П000600001180
		КлючВычета = "ДоходВНатФормеНеПодлежащаяНалогообложению";
		
	ИначеЕсли КодДохода = "2740" Или КодВычета = "505" Тогда //Выигрыши в рекламе товаров (ставка 35%)
		
		КлючДохода = "РекламныеВыигрыши"; //П000600001210
		КлючВычета = "РекламныеВыигрышиНеПодлежащаяНалогообложению"; //П000600001220
		Ограничение = 12000;
		
	КонецЕсли;
	
	Если КлючДохода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДохода.СтруктураДанных.Вставить("ВычетУчтен", Истина);
	
	// Добавление/изменение записи для листа Г
	Вид = Перечисления.ВычетыФизическихЛиц.НеоблагаемыеСуммы;
	СтрокаВычета = ТаблицаДанныхЗаполнения.Найти(Вид, "Вид");
	Если СтрокаВычета = Неопределено Тогда
		
		СтрокаВычета = ТаблицаДанныхЗаполнения.Добавить();
		СтрокаВычета.ВидДохода       = СтрокаДохода.ВидДохода;
		СтрокаВычета.НалоговаяСтавка = СтрокаДохода.НалоговаяСтавка;
		СтрокаВычета.Вид             = Вид;
		СтрокаВычета.СтруктураДанных = Новый Структура;
		
	КонецЕсли;
	
	ДоходДоИзменения = Неопределено;
	Если Не СтрокаВычета.СтруктураДанных.Свойство(КлючДохода, ДоходДоИзменения) Тогда
		ДоходДоИзменения = 0;
	КонецЕсли;
	ВычетДоИзменения = Неопределено;
	Если Не СтрокаВычета.СтруктураДанных.Свойство(КлючВычета, ВычетДоИзменения) Тогда
		ВычетДоИзменения = 0;
	КонецЕсли;
	ВсегоДоИзменения = Неопределено;
	КлючИтогаВычетов = КлючИтоговЛистааГ();
	Если Не СтрокаВычета.СтруктураДанных.Свойство(КлючИтогаВычетов, ВсегоДоИзменения) Тогда
		ВсегоДоИзменения = 0;
	КонецЕсли;
	
	ДоходНарастающим = ДоходДоИзменения + СуммаДохода;
	СтрокаВычета.СтруктураДанных.Вставить(КлючДохода, ДоходНарастающим);
	
	ВычетНарастающим = ВычетДоИзменения + СуммаВычета;
	Если Ограничение = Неопределено Тогда
		Вычет = Мин(ВычетНарастающим, ДоходНарастающим);
	Иначе
		Вычет = Мин(?(ВычетНарастающим = 0, Ограничение, ВычетНарастающим), ДоходНарастающим, Ограничение);
	КонецЕсли;
	СтрокаВычета.СтруктураДанных.Вставить(КлючВычета, Вычет);
	
	СтрокаВычета.СтруктураДанных.Вставить(КлючИтогаВычетов, ВсегоДоИзменения + Макс(0, Вычет - ВычетДоИзменения));
	
КонецПроцедуры

Процедура УчестьКодДоходаВНеоблагаемыхСуммах_2019(ТаблицаДанныхЗаполнения, СтруктураДокумента, СтрокаДохода) 
	
	КодДохода     = СтруктураДокумента.КодДохода;
	СуммаДохода   = СтруктураДокумента.СуммаДохода;
	КодВычета     = СтруктураДокумента.КодВычета;
	СуммаВычета   = СтруктураДокумента.СуммаВычета;
	
	СуммаВычета    = Макс(0, Мин(СуммаВычета, СуммаДохода));
	Ограничение    = Неопределено;
	КлючВычета     = Неопределено;
	
	Если КодДохода = "2762" Или КодВычета = "508" Тогда	// Мат.помощь по рождению ребенка
		
		КлючВычета = "МатериальнаяПомощьРождениеРебенкаНеПодлежащаяНалогообложению";
		
	ИначеЕсли КодДохода = "2760" Или КодВычета = "503" Тогда //Мат помощь по выходу на пенсию
		
		КлючВычета = "МатериальнаяПомощьРаботникамНеПодлежащаяНалогообложению"; //П000600001040
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2761" Или КодВычета = "506" Тогда //Мат помощь от общественных организаций инвалидов
		
		КлючВычета = "МатериальнаяПомощьИнвалидамНеПодлежащаяНалогообложению";  //П000600001070
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2720" Или КодВычета = "501" Тогда //Подарки
		
		КлючВычета = "СтоимостьПодарковНеПодлежащаяНалогообложению"; //П000600001020
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2730" Или КодВычета = "502" Тогда //Призы в соревнованиях, проводимых по решению правительства РФ
		
		КлючВычета = "СтоимостьПризовНеПодлежащаяНалогообложению"; //П000600001030
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2770" Тогда //Возмещение оплаты медикаментов
		
		КлючВычета = "ОплатаЛекарственныхПрепаратовНеПодлежащаяНалогообложению"; //П000600001050
		Ограничение = 4000;
		
	ИначеЕсли КодДохода = "2790" Или КодВычета = "507" Тогда //Подарки ветеранам и приравненным к ним
		
		КлючВычета = "СуммаПомощиУчастникамВОВНеПодлежащаяНалогообложению"; //П000600001090
		Ограничение = 10000;
		
	ИначеЕсли КодДохода = "1211" Или КодВычета = "607" Или КодВычета = "510" Тогда //Взносы в ПФ выплачиваемые за работника
		
		КлючВычета = "ВзносыРаботодателяНеПодлежащиеНалогообложению"; //П000600001160
		Ограничение = 12000;
		
	ИначеЕсли КодДохода = "2791" Или КодВычета = "509" Тогда //Оплата труда в натруальной форме от с/х производителей
		
		//КлючВычета = "ДоходВНатФормеНеПодлежащаяНалогообложению";
		
	ИначеЕсли КодДохода = "2740" Или КодВычета = "505" Тогда //Выигрыши в рекламе товаров (ставка 35%)
		
		КлючВычета = "СтоимостьПризовРекламаТоваровНеПодлежащаяНалогообложению"; //П000600001060
		Ограничение = 12000;
		
	КонецЕсли;
	
	Если КлючВычета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДохода.СтруктураДанных.Вставить("ВычетУчтен", Истина);
	
	// Добавление/изменение записи для раздела 4
	Вид = Перечисления.ВычетыФизическихЛиц.НеоблагаемыеСуммы;
	СтрокаВычета = ТаблицаДанныхЗаполнения.Найти(Вид, "Вид");
	Если СтрокаВычета = Неопределено Тогда
		
		СтрокаВычета = ТаблицаДанныхЗаполнения.Добавить();
		СтрокаВычета.ВидДохода       = СтрокаДохода.ВидДохода;
		СтрокаВычета.НалоговаяСтавка = СтрокаДохода.НалоговаяСтавка;
		СтрокаВычета.Вид             = Вид;
		СтрокаВычета.СтруктураДанных = Новый Структура;
		
	КонецЕсли;
	
	ВычетДоИзменения = Неопределено;
	Если Не СтрокаВычета.СтруктураДанных.Свойство(КлючВычета, ВычетДоИзменения) Тогда
		СтрокаВычета.СтруктураДанных.Вставить( КлючВычета, 0 );
		ВычетДоИзменения = 0;
	КонецЕсли;
	
	КлючИтогаВычетов = КлючИтоговЛистааГ();
	ВсегоДоИзменения = Неопределено;
	Если Не СтрокаВычета.СтруктураДанных.Свойство(КлючИтогаВычетов, ВсегоДоИзменения) Тогда
		СтрокаВычета.СтруктураДанных.Вставить( КлючИтогаВычетов, 0 );
		ВсегоДоИзменения = 0;
	КонецЕсли;
	
	ВычетНарастающим = ВычетДоИзменения + СуммаВычета;
	Если Ограничение = Неопределено Тогда
		Вычет = Макс(ВычетНарастающим, 0);
	Иначе
		Вычет = Мин(Макс(ВычетНарастающим, 0), Ограничение);
	КонецЕсли;
	
	СтрокаВычета.СтруктураДанных.Вставить(КлючВычета, Вычет);
	СтрокаВычета.СтруктураДанных.Вставить(КлючИтогаВычетов, ВсегоДоИзменения + Макс(0, Вычет - ВычетДоИзменения));
	
КонецПроцедуры


// Добавление данных на лист Г
Процедура УчестьКодДоходаВНеоблагаемыхСуммах(ТаблицаДанныхЗаполнения, Знач СтруктураДокумента, СтрокаДохода, ВыбраннаяФорма3НДФЛ) 
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2019кв1" Или ВыбраннаяФорма3НДФЛ = "ФормаОтчета2020кв1" Тогда
		УчестьКодДоходаВНеоблагаемыхСуммах_2019(ТаблицаДанныхЗаполнения, СтруктураДокумента, СтрокаДохода);
	Иначе
		УчестьКодДоходаВНеоблагаемыхСуммах_2018(ТаблицаДанныхЗаполнения, СтруктураДокумента, СтрокаДохода);
	КонецЕсли;
	
КонецПроцедуры

// Добавление данных для учета на листе Ж
Процедура УчестьКодДоходаВПрофессиональныхВычетах(ТаблицаДанныхЗаполнения, Знач ПараметрыРассчета, СтрокаДохода) 
	
	КодДохода     = ПараметрыРассчета.КодДохода;
	СуммаДохода   = ПараметрыРассчета.СуммаДохода;
	КодВычета     = ПараметрыРассчета.КодВычета;
	СуммаВычета   = ПараметрыРассчета.СуммаВычета;
	
	Если СтрНайти("1540,1550,2010,2201,2202,2203,2204,2205,2206,2207,2208,2209,", КодДохода + ",") = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаДохода.СтруктураДанных.Вставить("ВычетУчтен", Истина);
	
	СтруктураДокумента = СтрокаДохода.СтруктураДанных;
	Если СтрокаДохода.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
		КодИсточника = "2";
	Иначе
		КодИсточника = "1";
	КонецЕсли;
	СтрокаВычета = Неопределено;
	
	Вид = Перечисления.ВычетыФизическихЛиц.Профессиональный;
	СтрокиВычета = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид",Вид));
	Для каждого СтрокаТаблицы Из СтрокиВычета Цикл
		Если СтрокаТаблицы.СтруктураДанных.ТипИсточникаДохода = КодИсточника Тогда
			СтрокаВычета = СтрокаТаблицы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВычетДляЗаписи = Мин(СуммаДохода, СуммаВычета);
	ДанныеЛиста    = ?(СтрокаВычета = Неопределено, 
				Отчеты.РегламентированныйОтчет3НДФЛ.НовыйСтруктураПоказателейПрофессиональныхВычетов(КодИсточника),
				СтрокаВычета.СтруктураДанных);
	ЕстьПоказатели = Ложь;
	
	Если КодДохода = "2210" Тогда // Авторские вознаграждения
		
		ДанныеЛиста.ПоДоговрамГПХ_Доход = ДанныеЛиста.ПоДоговрамГПХ_Доход + СуммаДохода;
		ДанныеЛиста.ПоДоговрамГПХ_Вычет = ДанныеЛиста.ПоДоговрамГПХ_Вычет + ВычетДляЗаписи;
		ЕстьПоказатели = Истина;
		
	ИначеЕсли СтрНайти("2201,2202,2203,2204,2205,2206,2207,2208,2209,", КодДохода + ",") > 0 Тогда  // Авторские вознаграждения
		
		Если КодВычета = "404" Тогда  // вычет по фактическим расходам
			
			ДанныеЛиста.АвторскиеПоРасходам_Доход = ДанныеЛиста.АвторскиеПоРасходам_Доход + СуммаДохода;
			ДанныеЛиста.АвторскиеПоРасходам_Вычет = ДанныеЛиста.АвторскиеПоРасходам_Вычет + ВычетДляЗаписи;
			ЕстьПоказатели = Истина;
			
		ИначеЕсли КодВычета = "405" Тогда  // вычет по нормам
			
			ДанныеЛиста.АвторскиеПоНорме_Доход = ДанныеЛиста.АвторскиеПоНорме_Доход + СуммаДохода;
			ДанныеЛиста.АвторскиеПоНорме_Вычет = ДанныеЛиста.АвторскиеПоНорме_Вычет + СуммаВычета;
			ЕстьПоказатели = Истина;
			
		КонецЕсли;
	
	ИначеЕсли СтрНайти("1540,1542,", КодДохода + ",") > 0 Тогда // Продажа доли в уставном капитале организации
		
		ДанныеЛиста.ПродажаУставногоКапитала_Доход = ДанныеЛиста.ПродажаУставногоКапитала_Доход + СуммаДохода;
		ДанныеЛиста.ПродажаУставногоКапитала_Вычет = ДанныеЛиста.ПродажаУставногоКапитала_Вычет + ВычетДляЗаписи;
		ЕстьПоказатели = Истина;
		
	ИначеЕсли КодДохода = "1550" Тогда // Устапка прав требования в договое долевого строительства
		
		ДанныеЛиста.УступкаПравТребования_Доход = ДанныеЛиста.УступкаПравТребования_Доход + СуммаДохода;
		ДанныеЛиста.УступкаПравТребования_Вычет = ДанныеЛиста.УступкаПравТребования_Вычет + ВычетДляЗаписи;
		ЕстьПоказатели = Истина;
		
	КонецЕсли; 
	
	Если Не ЕстьПоказатели Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаВычета = Неопределено Тогда
		
		СтрокаВычета = ТаблицаДанныхЗаполнения.Добавить();
		СтрокаВычета.Вид             = Вид;
		СтрокаВычета.ВидДохода       = СтрокаДохода.ВидДохода;
		СтрокаВычета.НалоговаяСтавка = СтрокаДохода.НалоговаяСтавка;
		СтрокаВычета.СтруктураДанных = ДанныеЛиста;
		
	КонецЕсли;
	
	// Подсчет итога
	ДанныеЛиста.ПрофессиональныеВычетыВсего = ДанныеЛиста.ПоДоговрамГПХ_Вычет + ДанныеЛиста.АвторскиеПоРасходам_Вычет
				+ ДанныеЛиста.АвторскиеПоНорме_Вычет + ДанныеЛиста.ПродажаУставногоКапитала_Вычет + ДанныеЛиста.ЛиквидацияОбщества_Вычет
				 + ДанныеЛиста.УменьшениеСтоимостиДоли_Вычет + ДанныеЛиста.УступкаПравТребования_Вычет;
	
КонецПроцедуры

// Добавление данных для учета на листе Д2 по коду дохода (справка 2-НДФЛ и произвольный доход)
Процедура УчестьКодДоходаВИмущественномВычете(ТаблицаДанныхЗаполнения, Знач СтруктураДокумента, СтрокаДохода, 
						ПоказателиИмущественногоВычета, КодыИсточниковДоходов, ПределыВычетов) // ДЕНЬГИ 
	
	Если СтрокаДохода.НалоговаяСтавка <> 13 Или СтрНайти("1510,1511,1512,1520,", СтруктураДокумента.КодДохода + ",") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДохода.СтруктураДанных.Вставить("ВычетУчтен", Истина);
	
	ПараметрыРасчета = Новый Структура("КодДохода,СуммаДохода,КодВычета,СуммаВычета");
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, СтруктураДокумента);
	
	Если ПараметрыРасчета.КодДохода = "1510" Тогда
		ПараметрыРасчета.Вставить("ВидИмущества", "Жилая");
	ИначеЕсли ПараметрыРасчета.КодДохода = "1511" Тогда
		ПараметрыРасчета.Вставить("ВидИмущества", "Доля");
	ИначеЕсли ПараметрыРасчета.КодДохода = "1512" Тогда
		ПараметрыРасчета.Вставить("ВидИмущества", "ИнаяНедвижимость");
	Иначе
		ПараметрыРасчета.Вставить("ВидИмущества", "Прочее");
	КонецЕсли;
	ПараметрыРасчета.Вставить("ВидВычета", "Норматив");
	
	ДобавитьДанныеЗаполненияИмущественногоВычета(
				ТаблицаДанныхЗаполнения, 
				ПараметрыРасчета, 
				СтрокаДохода.ВидДохода, 
				СтрокаДохода.НалоговаяСтавка, 
				ПоказателиИмущественногоВычета,
				КодыИсточниковДоходов, 
				ПределыВычетов); // ДЕНЬГИ
	
КонецПроцедуры

Функция ДоходыРасходыОтПредпринимательскойДеятельностиЗаПериод3НДФЛ(ПараметрыОтчета) Экспорт
	
	// ДЕНЬГИ
	ТаблицаДоходовРасходов = НоваяТаблицаДоходовРасходов();
	// Конец ДЕНЬГИ 
	
	Возврат ТаблицаДоходовРасходов;
	
КонецФункции

// Возвращает массив правил уплаты авансовых платежей по НДФЛ с доходов от предпринимательской деятельности ИП на ОСНО.
//
// Возвращаемое значение:
//   Массив - массив элементов с типом "СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов" или "Неопределено"
Функция ПравилаУплатыАвансовПоНДФЛ() Экспорт
	
	МассивПравил = Новый Массив;
	МассивПравил.Добавить("2013_ИП_Аванс_1Полугодие");
	МассивПравил.Добавить("2013_ИП_Аванс_2Полугодие");
	
	Возврат МассивПравил;
	
КонецФункции

Функция ЗаполнитьСписокТаблиц3НДФЛ(УникальныйИдентификатор)
	
	СписокТаблиц = Новый ТаблицаЗначений;
	СписокТаблиц.Колонки.Добавить("КодТаблицы",         ОбщегоНазначения.ОписаниеТипаЧисло(2));
	СписокТаблиц.Колонки.Добавить("Формировать",        Новый ОписаниеТипов("Булево"));
	СписокТаблиц.Колонки.Добавить("АдресХранилища",     Новый ОписаниеТипов("Строка"));
	СписокТаблиц.Колонки.Добавить("ИмяМакета",          ОбщегоНазначения.ОписаниеТипаСтрока(20));
	СписокТаблиц.Колонки.Добавить("ЗаголовокТаблицы",   ОбщегоНазначения.ОписаниеТипаСтрока(15));
	СписокТаблиц.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СписокТаблиц.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = СписокТаблиц.Добавить();
	НоваяСтрока.КодТаблицы         = 61;
	НоваяСтрока.Формировать        = Истина;
	НоваяСтрока.АдресХранилища     = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	НоваяСтрока.ИмяМакета          = "Т61";
	НоваяСтрока.ЗаголовокТаблицы   = НСтр("ru='Таблица № 6-1'");
	НоваяСтрока.Наименование       = НСтр("ru='Налоговая база'");
	НоваяСтрока.НаименованиеПолное = НСтр("ru='Определение налоговой базы по налогу на доходы физических лиц'");
	
	Возврат СписокТаблиц;
	
КонецФункции

Функция НоваяТаблицаДоходовРасходов()
	
	ТипЧисло15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ТаблицаДоходовРасходов = Новый ТаблицаЗначений;
	ТаблицаДоходовРасходов.Колонки.Добавить("Период",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДоходовРасходов.Колонки.Добавить("ИтогоДоходов",           ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("ИтогоРасходов",          ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("Доходы",                 ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("МатериальныеРасходы",    ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("Амортизация",            ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("РасходыНаОплатуТруда",   ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("ПрочиеРасходы",          ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("РасходыБудущихПериодов", ТипЧисло15_2);
	ТаблицаДоходовРасходов.Колонки.Добавить("ПрочиеДоходы",           ТипЧисло15_2);
	
	Возврат ТаблицаДоходовРасходов;
	
КонецФункции

#КонецОбласти

Функция КодПрочегоДоходаЗаПределамиРФ(Знач ВыбраннаяФорма, КодДохода) Экспорт
	Перем КодВидаДохода;
	
	КодыВидовДоходовЗаПределамиРФ = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовДоходовЗаПределамиРФ(ВыбраннаяФорма);
	Если ВыбраннаяФорма = "ФормаОтчета2019кв1" Или ВыбраннаяФорма = "ФормаОтчета2020кв1" Тогда
		Возврат КодВидаДохода2019ЗаПределамиРФ(КодыВидовДоходовЗаПределамиРФ, КодДохода);
	Иначе
		Если КодыВидовДоходовЗаПределамиРФ.Свойство("Иной", КодВидаДохода) Тогда
			Возврат КодВидаДохода;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция КодВидаДохода2019ЗаПределамиРФ(СтруктураВидовДоходов, КодДохода) 
	
	Если Обработки.ПомощникЗаполнения3НДФЛ.ЭтоОперацияСЦБ(КодДохода) Тогда
		Возврат СтруктураВидовДоходов.ПродажаАкций;
	ИначеЕсли КодДохода = "2010" Тогда
		Возврат СтруктураВидовДоходов.ТрудовыеДоговоры;
	ИначеЕсли Обработки.ПомощникЗаполнения3НДФЛ.ЭтоОплатаТруда(КодДохода) Тогда
		Возврат СтруктураВидовДоходов.Зарплата;
	ИначеЕсли Обработки.ПомощникЗаполнения3НДФЛ.ЭтоВознаграждениеДиректора(КодДохода) Тогда
		Возврат СтруктураВидовДоходов.ГонорарыДиректоров;
	КонецЕсли;
	
	Возврат СтруктураВидовДоходов.Иной;
	
КонецФункции

#Область СтруктурыДоходовИВычетов

Функция НоваяСтруктураВычетИИС()

	Результат = Новый Структура;
	Результат.Вставить("СуммаВычета", 0);
	Результат.Вставить("СуммаДохода", 0);
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураВычетУбыткиПрошлыхЛет(ВыбраннаяФорма, ИИС = Ложь)
	
	Год = НомерГодаИзИмениФормы(ВыбраннаяФорма);
	Если Не ЗначениеЗаполнено(Год) Тогда
		Год = Год(ТекущаяДата());
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИИС", ИИС);
	Результат.Вставить("ТабличнаяЧасть", Новый ТаблицаЗначений);
	Результат.ТабличнаяЧасть.Колонки.Добавить("Год",                           ОбщегоНазначения.ОписаниеТипаЧисло(4,0));
	Результат.ТабличнаяЧасть.Колонки.Добавить("УбытокПоЦеннымБумагам",         ОбщегоНазначения.ОписаниеТипаЧисло(19,2));
	Результат.ТабличнаяЧасть.Колонки.Добавить("УбытокПоФинансовымИнстументам", ОбщегоНазначения.ОписаниеТипаЧисло(19,2));
	
	Если ИИС Тогда
		НачальныйГод = 2015;
	Иначе
		НачальныйГод = Год - 10;
	КонецЕсли;
	
	Пока НачальныйГод < Год Цикл
		СтрокаУбытка = Результат.ТабличнаяЧасть.Добавить();
		СтрокаУбытка.Год = НачальныйГод;
		НачальныйГод = НачальныйГод + 1;
	КонецЦикла;
	
	Если Год >= 2018 Тогда
		Результат.Вставить("Период", Дата(Год, 1, 1));
		Результат.Вставить("ГодУбытка",        0);
		Результат.Вставить("ОстатокУбыткаПФИ", 0);
		Результат.Вставить("ОстатокУбыткаЦБ",  0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяСтруктураВычетСтрахования()

	Результат = Новый Структура;
	Результат.Вставить("ВидДоговора", 1);
	Результат.Вставить("НомерДоговора", "");
	Результат.Вставить("ДатаДоговора", Дата(1,1,1));
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("ОКТМО", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("СуммаВзноса", 0);
	Результат.Вставить("ВычетУНалоговогоАгента", 0);
	Результат.Вставить("СуммаВычета", 0);
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураВычетИмущественный(ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = "ФормаОтчета2020кв1" Тогда
		Возврат НоваяСтруктураВычетИмущественный2020(ВыбраннаяФорма);
	Иначе
		Возврат НоваяСтруктураВычетИмущественный2018();
	КонецЕсли;
	
КонецФункции

Функция НоваяСтруктураВычетИмущественный2018()

	Результат = Новый Структура;
	
	Результат.Вставить("ПредставлениеОбъекта",                "");
	Результат.Вставить("ОбъектНедвижимости",                  2);
	Результат.Вставить("АдресОбъектаНедвижимости",            "");
	Результат.Вставить("СтруктураАдреса",                     Неопределено);
	Результат.Вставить("ВычетПоПроцентамНедоступен",          Ложь);
	Результат.Вставить("ДатаАктаПередачиПрав",                Дата(1,1,1));
	Результат.Вставить("ДатаЗаявленияОРаспределенииРасходов", Дата(1,1,1));
	Результат.Вставить("ДатаРегистрацииПраваНаЗемлю",         Дата(1,1,1));
	Результат.Вставить("ДатаРегистрацииПраваСобственности",   Дата(1,1,1));
	Результат.Вставить("ДоляЗнаменатель",                     1);
	Результат.Вставить("ДоляЧислитель",                       1);
	Результат.Вставить("ЖильеПриобретеноНаВторичномРынке",    Ложь);
	Результат.Вставить("ИспользоватьВычетПоПроцентам",        Истина);
	Результат.Вставить("КадастровыйНомер",                    "");
	Результат.Вставить("КодНомераОбъекта",                    1);
	Результат.Вставить("КредитОформленДо2014Года",            Ложь);
	Результат.Вставить("НачалоПримененияВычета",              Отчеты.РегламентированныйОтчет3НДФЛ.ГодДекларацииПоУмолчанию());
	Результат.Вставить("ПоказыватьДоли",                      Ложь);
	Результат.Вставить("ПолНалогоплательщика",                "мужской");
	Результат.Вставить("СобственностьСупруга",                Ложь);
	Результат.Вставить("СредиСобственниковРебенок",           Ложь);
	Результат.Вставить("Стоимость",                           0);
	Результат.Вставить("СуммаПроцентовЗаВсеГоды",             0);
	Результат.Вставить("СуммаПроцентовПредоставлено",         0);
	Результат.Вставить("СуммаРасходов",                       0);
	Результат.Вставить("ФормаСобственности",                  1);	
	Результат.Вставить("ВычетПенсионера",                     Ложь);	
	Результат.Вставить("ОформленоЗаявлениеОРаспределенииВычета", Ложь);

	Результат.Вставить("ВычетПрименяетсяВпервые",             Истина);

	Возврат Результат;

КонецФункции

Функция НоваяСтруктураВычетИмущественный2020(ВыбраннаяФорма)
	
	Результат = Новый Структура;
	
	Результат.Вставить("АдресОбъектаНедвижимости",            "");
	Результат.Вставить("СтруктураАдреса",                     Неопределено);
	Результат.Вставить("ПредставлениеОбъекта",                "");
	Результат.Вставить("ВычетПоПроцентамНедоступен",          Ложь);
	Результат.Вставить("ВычетПрименяетсяВпервые",             Истина);
	Результат.Вставить("ВычетПрошлыхЛетПроценты",             0); // в объекте строительства не используется
	Результат.Вставить("ВычетПрошлыхЛетСтоимость",            0); // в объекте строительства не используется
	Результат.Вставить("ДатаАктаПередачиПрав",                Дата(1,1,1));
	Результат.Вставить("ДатаЗаявленияОРаспределенииРасходов", Дата(1,1,1));
	Результат.Вставить("ДатаРегистрацииПраваНаЗемлю",         Дата(1,1,1));
	Результат.Вставить("ДатаРегистрацииПраваСобственности",   Дата(1,1,1));
	Результат.Вставить("ДоляЗнаменатель",                     1);
	Результат.Вставить("ДоляЧислитель",                       1);
	Результат.Вставить("ИспользоватьВычетПоПроцентам",        Истина);
	Результат.Вставить("КадастровыйНомер",                    "");
	Результат.Вставить("КодНомераОбъекта",                    1);
	Результат.Вставить("КредитОформленДо2014Года",            Ложь);
	Результат.Вставить("НачалоПримененияВычета",              Отчеты.РегламентированныйОтчет3НДФЛ.ГодДекларацииПоУмолчанию());
	Результат.Вставить("ОбъектНедвижимости",                  "Квартира");
	Результат.Вставить("ОформленоЗаявлениеОРаспределенииВычета", Ложь);
	Результат.Вставить("Период",                              Макс(Дата(2019,1,1), НачалоГода(ТекущаяДата())));
	Результат.Вставить("СобственностьСупруга",                Ложь);
	Результат.Вставить("СпособПриобретенияНедвижимости",      "Покупка");
	Результат.Вставить("СредиСобственниковРебенок",           Ложь);
	Результат.Вставить("Стоимость",                           0);
	Результат.Вставить("СуммаПроцентовЗаВсеГоды",             0);
	Результат.Вставить("СуммаРасходов",                       0);
	Результат.Вставить("ФормаСобственности",                  1);	
	
	Результат.Вставить("КодНаименованияОбъектаНедвижимости", "0");
	Результат.Вставить("ПризнакНалогоплательщикаОбъектаНедвижимости", "");
	
	Результат.Вставить("КадастровыйНомер",                    "");
	Результат.Вставить("КодНомераОбъекта",                    1);
	Результат.Вставить("ПоказыватьДоли",                      Ложь);
	Результат.Вставить("ПолНалогоплательщика",                "мужской");
	Результат.Вставить("СуммаПроцентовПредоставлено",         0);
	Результат.Вставить("ВычетПенсионера",                     Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НоваяСтруктураВычетНаДетей()

	Результат = Новый Структура;
	
	Результат.Вставить("ВидДохода",                     "ОплатаТруда");
	Результат.Вставить("КоличествоМесяцев",             12);
	Результат.Вставить("ВсегоДетей",                    0);
	Результат.Вставить("Несовершеннолетних",            0);
	Результат.Вставить("ПриемныеДетиИнвалиды",          0);
	Результат.Вставить("ПрименяетсяДвойнойВычет",       Ложь);
	Результат.Вставить("РодныеДетиИнвалиды",            0);
	Результат.Вставить("СемейноеПоложениеНеИзменялось", Истина);
	
	Результат.Вставить("СтандартныйВычет",        0);
	Результат.Вставить("ДвойнойВычет",            0);
	Результат.Вставить("ВычетНаИнвалидов",        0);
	Результат.Вставить("ДвойнойВычетНаИнвалидов", 0);
	Результат.Вставить("СуммаВычета",             0);
	
	Результат.Вставить("ТабличнаяЧасть", Новый ТаблицаЗначений);
	Результат.ТабличнаяЧасть.Колонки.Добавить("НомерМесяца", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Результат.ТабличнаяЧасть.Колонки.Добавить("Месяц", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	Результат.ТабличнаяЧасть.Колонки.Добавить("ВсегоДетей", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Результат.ТабличнаяЧасть.Колонки.Добавить("Несовершеннолетних", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Результат.ТабличнаяЧасть.Колонки.Добавить("РодныеДетиИнвалиды", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Результат.ТабличнаяЧасть.Колонки.Добавить("ПриемныеДетиИнвалиды", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Результат.ТабличнаяЧасть.Колонки.Добавить("ПрименяетсяДвойнойВычет", Новый ОписаниеТипов("Булево"));
	Результат.ТабличнаяЧасть.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(19,2));
	
	Для Счетчик = 1 По 12 Цикл
		
		СтрокаМесяца = Результат.ТабличнаяЧасть.Добавить();
		СтрокаМесяца.НомерМесяца = Счетчик;
		СтрокаМесяца.Месяц       = Формат(Дата(2018, Счетчик, 1), "Л=ru_RU; ДФ=MMMM");
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураВычетНаНалогоплательщика(ВыбраннаяФорма)

	Результат = Новый Структура;

	Результат.Вставить("ПостоянныйВТечениеГода", Истина);
	Результат.Вставить("РазмерВычета", 500);
	Результат.Вставить("СуммаВычета", Результат.РазмерВычета * 12);
	Результат.Вставить("СуммаВычета_500",  0);
	Результат.Вставить("СуммаВычета_3000", 0);
	
	Результат.Вставить("ТабличнаяЧасть", Новый ТаблицаЗначений);
	Результат.ТабличнаяЧасть.Колонки.Добавить("НомерМесяца", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Результат.ТабличнаяЧасть.Колонки.Добавить("Месяц",       ОбщегоНазначения.ОписаниеТипаСтрока(25));
	Результат.ТабличнаяЧасть.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(19,2));
	
	Год = НомерГодаИзИмениФормы(ВыбраннаяФорма);
	Если Не ЗначениеЗаполнено(Год) Тогда
		Год = Год(ТекущаяДата());
	КонецЕсли;
	
	Для Счетчик = 1 По 12 Цикл
		СтрокаМесяца = Результат.ТабличнаяЧасть.Добавить();
		СтрокаМесяца.НомерМесяца = Счетчик;
		СтрокаМесяца.Месяц       = Формат(Дата(Год, Счетчик, 1), "Л=ru_RU; ДФ=MMMM");
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураВычетСоциальный()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДорогостоящееЛечение", 0);
	Результат.Вставить("ОбычноеЛечение", 0); // Действительно для ФормаОтчета2020кв1
	Результат.Вставить("ЛечениеМедикаменты", 0);
	Результат.Вставить("МедицинскоеСтрахование", 0);
	Результат.Вставить("ОбучениеДетей", 0);
	Результат.Вставить("ОбучениеСвое", 0);
	Результат.Вставить("ОценкаКвалификации", 0);
	Результат.Вставить("Пожертвования", 0);
	Результат.Вставить("СтраховыеВзносыНаПенсию", 0);
	
	Возврат Результат;
	
КонецФункции

Функция НоваяСтруктураДоходСправка2НДФЛ()

	Результат = Новый Структура;

	Результат.Вставить("СтавкаНалога",           13);
	Результат.Вставить("ВидКонтрагента",         0);
	Результат.Вставить("ИНН",                    "");
	Результат.Вставить("КПП",                    "");
	Результат.Вставить("Наименование",           "");
	Результат.Вставить("ОКТМО",                  "");
	
	Результат.Вставить("СуммаДохода",            0);
	Результат.Вставить("СуммаДоходаОблагаемая",  0);
	Результат.Вставить("СуммаНалогаНачисленая",   0);
	Результат.Вставить("СуммаНалогаУдержанная",  0);
	Результат.Вставить("СуммаВычета",            0);
	
	Результат.Вставить("ИспользоватьДляСтандартныхВычетов",  Истина);
	Результат.Вставить("ВидДохода",                          3);
	Результат.Вставить("КодВидаДохода",                      "");
	Результат.Вставить("ИсточникиДоходов",                   Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда);
	
	Результат.Вставить("Строки2НДФЛ", Новый ТаблицаЗначений());
	Результат.Строки2НДФЛ.Колонки.Добавить("Месяц", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	Результат.Строки2НДФЛ.Колонки.Добавить("КодДохода", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Результат.Строки2НДФЛ.Колонки.Добавить("СуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	Результат.Строки2НДФЛ.Колонки.Добавить("КодВычета", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Результат.Строки2НДФЛ.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Результат.Вставить("Вычеты2НДФЛ", Новый ТаблицаЗначений());
	Результат.Вычеты2НДФЛ.Колонки.Добавить("КодВычета", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Результат.Вычеты2НДФЛ.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(19, 2));
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураДоходПрочиеДоходыВРФ(ВидДоходов = Неопределено)

	Результат = Новый Структура;

	Результат.Вставить("ВидДохода", ?(ВидДоходов = Неопределено, "ПрочийДоход", ВидДоходов));
	Результат.Вставить("КодДохода", "");
	Результат.Вставить("ДопустимыеКодыВычетов", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ОКТМО", "");
	Результат.Вставить("СтавкаНалога", 13);
	Результат.Вставить("СуммаДохода", 0);
	Результат.Вставить("СуммаДоходаОблагаемая", 0);
	Результат.Вставить("СуммаНалога", 0);
	Результат.Вставить("СуммаНалогаУдержанная", 0);
	Результат.Вставить("КодВычета", "");
	Результат.Вставить("СуммаВычета", 0);
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураДоходДивиденды()

	Результат = НоваяСтруктураДоходПрочиеДоходыВРФ("Дивиденды");
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураДоходЗаПределамиРФ(ВидДоходов = Неопределено)

	Результат = Новый Структура;
	
	Результат.Вставить("КодДохода",             "");
	Результат.Вставить("КодВычета",             "");
	Результат.Вставить("ДопустимыеКодыВычетов", "");
	Результат.Вставить("СуммаНалогаВРублях",        0);
	Результат.Вставить("СуммаНалогаВВалюте",        0);
	Результат.Вставить("СуммаВычета",               0);
	Результат.Вставить("СуммаДоходаВРублях",        0);
	Результат.Вставить("СуммаДоходаВВалюте",        0);
	Результат.Вставить("Страна");
	Результат.Вставить("СтавкаНалога",              13);
	Результат.Вставить("Наименование",     "");
	Результат.Вставить("КурсНаДатуУплатыНалога",    0);
	Результат.Вставить("КурсНаДатуДохода", 0);
	
	Результат.Вставить("КратностьНаДатуУплатыНалога",     1);
	Результат.Вставить("КратностьНаДатуДохода",  1);
	Результат.Вставить("ДействуетДоговорОбИзбежанииДвойногоНалогообложения", Ложь);
	Результат.Вставить("ДатаУплатыНалога",                     Дата(1,1,1));
	Результат.Вставить("ДатаДохода",                           Дата(1,1,1));
	Результат.Вставить("ВалютаДохода");
	
	Результат.Вставить("КонтролируемаяОрганизация", Ложь);
	Результат.Вставить("НомерИностраннойОрганизации", "");
	Результат.Вставить("ОпределениеПрибылиИностраннойОрганизации", 1); 	//1 - по правилам финансовой отчетности иностранной компании
																		//2 - по правилам, установленным для Российских компаний

	Результат.Вставить("КодВидаДохода",    "");
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураДоходОднойСуммойБезВычетов(ВидДохода)

	Результат = Новый Структура;
	
	Результат.Вставить("ВидДохода", ВидДохода);
	Результат.Вставить("ВидКонтрагента",  0);
	Результат.Вставить("ИНН",             "");
	Результат.Вставить("КПП",             "");
	Результат.Вставить("ОКТМО",           "");
	Результат.Вставить("Наименование",    "");
	Результат.Вставить("СуммаДохода",     0);
	Результат.Вставить("СтавкаНалога",    13);
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураДоходПредпринимателя()

	Результат = Новый Структура;
	
	Результат.Вставить("ВидДеятельностиИндекс", 1);
	Результат.Вставить("ВидДеятельностиКод", "");
	Результат.Вставить("ВидДеятельностиНаименование", "");
	
	Результат.Вставить("РасходыПодтвержденыДокументами", Ложь);
	Результат.Вставить("АмортизацияОС",                  0);
	Результат.Вставить("МатериальныеРасходы",            0);
	Результат.Вставить("НаОплатуТрудаВсего",             0);
	Результат.Вставить("ПоТрудовымДоговорам",            0);
	Результат.Вставить("ПрочиеРасходы",                  0);

	Результат.Вставить("СуммаДохода",              0);
	Результат.Вставить("СуммаВычета",              0);
	Результат.Вставить("СуммаДоходаОблагаемая",    0);
	Результат.Вставить("СуммаНалогаНачисленая",    0);
	Результат.Вставить("СуммаНалогаУдержанная",    0);
	
	Результат.Вставить("ИспользоватьДляСтандартныхВычетов", Ложь);
	ТипСумма = ОбщегоНазначения.ОписаниеТипаЧисло(19,2);
	Результат.Вставить("СтрокиОтчетаПредпринимателя", Новый ТаблицаЗначений);
	Результат.СтрокиОтчетаПредпринимателя.Колонки.Добавить("Месяц", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	Результат.СтрокиОтчетаПредпринимателя.Колонки.Добавить("СуммаДохода", ТипСумма);
	Для Счетчик = 1 По 12 Цикл
		Строка = Результат.СтрокиОтчетаПредпринимателя.Добавить();
		Строка.Месяц = Счетчик;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НоваяСтруктураДоходПродажаИмущества(ВидИмущества)

	Результат = Новый Структура;
	
	Результат.Вставить("ВидКонтрагента",         0);
	Результат.Вставить("ВидВычета",              "Норматив");
	Результат.Вставить("ИНН",                    "");
	Результат.Вставить("КПП",                    "");
	Результат.Вставить("Наименование",           "");
	Результат.Вставить("ОКТМО",                  "");
	
	Результат.Вставить("ВидИмущества",          ВидИмущества);
	Результат.Вставить("ГодПриобретения",       2013);
	Результат.Вставить("СпособПриобретения",    "Покупка");
	Результат.Вставить("ДоляЧислитель",         1);
	Результат.Вставить("ДоляЗнаменатель",       1);
	Результат.Вставить("КадастровыйНомер",      "");
	Результат.Вставить("КадастроваяСтоимость",  0);
	Результат.Вставить("ПонижающийКоэффициент", 0.7);

	Результат.Вставить("РасходыПодтвержденыДокументами",        Ложь);
	Результат.Вставить("ПроданаТолькоЭтаДоля",                  Истина);
	Результат.Вставить("НедвижимостьПриобретенаПосле01012016",  Ложь);
	
	Результат.Вставить("СуммаДохода",            0);
	Результат.Вставить("СуммаДоходаОблагаемая",  0);
	Результат.Вставить("СуммаВычета",            0);
	
	Результат.Вставить("СуммаНалогаНачисленая",  0);
	Результат.Вставить("СуммаНалогаУдержанная",  0);
	
	Возврат Результат;

КонецФункции

Функция НомерГодаИзИмениФормы(ИмяФормы) Экспорт
	
	ГодСрокой = Сред(ИмяФормы, 12, 4); 
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодСрокой) Тогда
		Возврат Число(ГодСрокой);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции 

#КонецОбласти 

// Проверка документов помощника заполнения
#Область ПроверкаДокументовПомощника

Функция СтруктураОписанияОшибкиПомощника(МестоОшибки, СтрокаДокумента, ИмяРеквизита, СтрокаТабличнойЧастиДокумента, ОписаниеОшикби) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("МестоОшибки",       МестоОшибки); // Возможные значения: "ТитульныйЛист", "Документ"
	Результат.Вставить("СтрокаДокумента",   СтрокаДокумента); // ИД строки в списке документов помощника, если МестоОшибки = "Документ"
	Если СтрокаТабличнойЧастиДокумента = Неопределено Тогда
		Результат.Вставить("ИмяРеквизита",      ИмяРеквизита);
	Иначе
		Результат.Вставить("ИмяРеквизита",      СтрШаблон(ИмяРеквизита, Формат(СтрокаТабличнойЧастиДокумента, "ЧДЦ=; ЧГ=")));
	КонецЕсли;
	Результат.Вставить("СтрокаТабличнойЧастиДокумента", СтрокаТабличнойЧастиДокумента); // номер строки в табличной части "ИмяРеквизита", на которую нужно спозиционироваться
	Результат.Вставить("ОписаниеОшибки",    ОписаниеОшикби);

	Возврат Результат;
	
КонецФункции

Процедура ПроверитьРеквизитДокумента(Структура, ИмяЭлемента, РезультатПроверки, СписокОшибок, СтрокаДокумента, ОписаниеОшибки) 
	
	Если Не ЗначениеЗаполнено(Структура[ИмяЭлемента]) Тогда
		РезультатПроверки = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, ИмяЭлемента, Неопределено, ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРеквизитДекларации(Структура, ИмяЭлемента, РезультатПроверки, СписокОшибок, ОписаниеОшибки) 
	
	Если Не ЗначениеЗаполнено(Структура[ИмяЭлемента]) Тогда
		РезультатПроверки = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("ТитульныйЛист", Неопределено, ИмяЭлемента, Неопределено, ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКоличествоДокументовВида(СписокДокументов, ВидДокумента, РезультатПроверки, СписокОшибок, ПредставлениеДокумента) 
	
	СтрокиВида = СписокДокументов.НайтиСтроки(Новый Структура("ВидДокумента", ВидДокумента));
	Если СтрокиВида.Количество() > 1 Тогда
		РезультатПроверки = Ложь;
		ОписаниеОшибки = СтрШаблон(НСтр("ru='Допускается только 1 документ вида ""%1"", а в списке найдено %2 таких документов'")
				, ПредставлениеДокумента, СтрокиВида.Количество()); 
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("ТитульныйЛист", Неопределено, "СписокДокументов", Неопределено, ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПроверитьРеквизитыПлательщикаДохода(СтруктураДокумента, БезОшибок, СписокОшибок, СтрокаРеквизитов, СтрокаДокумента) 
	
	ЕстьИНН     = СтрНайти(СтрокаРеквизитов + ",", "ИНН,") > 0;
	ИННЗаполнен = СтруктураДокумента.Свойство("ИНН") И ЗначениеЗаполнено(СтруктураДокумента.ИНН);
	Если ЕстьИНН Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ИНН", БезОшибок, СписокОшибок, Неопределено, НСтр("ru='Не указан ИНН плательщика дохода'"));
	КонецЕсли;
	Если ИННЗаполнен И СтрДлина(СтруктураДокумента.ИНН) <> 10 И СтрДлина(СтруктураДокумента.ИНН) <> 12 Тогда
		БезОшибок = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "ИНН", Неопределено, НСтр("ru='Длина ИНН должна быть 10 или 12 символов'")));
	КонецЕсли;
	
	КППЗаполнен = СтруктураДокумента.Свойство("КПП") И ЗначениеЗаполнено(СтруктураДокумента.КПП);
	Если СтрНайти(СтрокаРеквизитов + ",", "КПП,") > 0 Тогда
		Если ИННЗаполнен И СтрДлина(СтруктураДокумента.ИНН) <= 10 Тогда
			ПроверитьРеквизитДокумента(СтруктураДокумента, "КПП", БезОшибок, СписокОшибок, Неопределено, НСтр("ru='Не указан КПП плательщика дохода'"));
		КонецЕсли;
	КонецЕсли;
	Если КППЗаполнен И СтрДлина(СтруктураДокумента.КПП) <> 9 Тогда
		БезОшибок = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "КПП", Неопределено, НСтр("ru='Длина КПП должна быть 9 символов'")));
	КонецЕсли;
	
	ОКТМОЗаполнен = СтруктураДокумента.Свойство("ОКТМО") И ЗначениеЗаполнено(СтруктураДокумента.ОКТМО);
	Если СтрНайти(СтрокаРеквизитов + ",", "ОКТМО,") > 0 Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ОКТМО", БезОшибок, СписокОшибок, Неопределено, НСтр("ru='Не указан ОКТМО плательщика дохода'"));
	КонецЕсли;
	Если ОКТМОЗаполнен И СтрДлина(СтруктураДокумента.ОКТМО) <> 8 И СтрДлина(СтруктураДокумента.ОКТМО) <> 11 Тогда
		БезОшибок = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "ОКТМО", Неопределено, НСтр("ru='длина ОКТМО должна быть 8 или 11 символов'")));
	КонецЕсли; 
	
	Если СтрНайти(СтрокаРеквизитов + ",", "Наименование,") > 0 Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "Наименование", БезОшибок, СписокОшибок, Неопределено, НСтр("ru='Не указано наименование плательщика дохода'"));
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЗемельныйУчасток(ОбъектНедвижимости, ВыбраннаяФорма)
	
	Если ВыбраннаяФорма = "ФормаОтчета2020кв1" Тогда
		Возврат ОбъектНедвижимости = "ЗемельныйУчасток"
			Или ОбъектНедвижимости = "ЗемельныйУчастокПодСтроительство"
			Или ОбъектНедвижимости = "ЖилойДомСЗемельнымУчастком"
			Или ОбъектНедвижимости = "ДоляВЗемельномУчастке";
	Иначе
		Возврат ОбъектНедвижимости > 4;
	КонецЕсли;
	
КонецФункции

Функция ЖильеПриобретеноНаВторичномРынке(СтруктураДокумента, ВыбраннаяФорма)
	
	Если СтруктураДокумента.Свойство("ЖильеПриобретеноНаВторичномРынке")
		И Не СтруктураДокумента.Свойство("СпособПриобретенияНедвижимости") Тогда
		// Совместимость со старыми версиями
		СтруктураДокумента.Вставить("СпособПриобретенияНедвижимости", 
			?(СтруктураДокумента.ЖильеПриобретеноНаВторичномРынке, "Покупка", "ДоговорДолевогоУчастия"));
		
	КонецЕсли;
	
	Возврат СтруктураДокумента.СпособПриобретенияНедвижимости <> "ДоговорДолевогоУчастия";
	
КонецФункции

Функция КорректныйДокументВычетНаПокупкуЖилья(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента, ВыбраннаяФорма) 

	Результат = Истина;
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ОбъектНедвижимости", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан объект недвижимости'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ФормаСобственности", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан вид собственности'"));
	Если СтруктураДокумента.КодНомераОбъекта = 0 Или СтруктураДокумента.КодНомераОбъекта = 4 Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "АдресОбъектаНедвижимости", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан адрес объекта недвижимости'"));
	Иначе
		ПроверитьРеквизитДокумента(СтруктураДокумента, "КадастровыйНомер", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан номер объекта недвижимости'"));
	КонецЕсли;
	Если ЭтоЗемельныйУчасток(СтруктураДокумента.ОбъектНедвижимости, ВыбраннаяФорма) Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ДатаРегистрацииПраваНаЗемлю", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана дата регистрации права на землю'"));
	Иначе
		Если ЖильеПриобретеноНаВторичномРынке(СтруктураДокумента, ВыбраннаяФорма) Тогда
			ПроверитьРеквизитДокумента(СтруктураДокумента, "ДатаРегистрацииПраваСобственности", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана дата регистрации права собственности'"));
		Иначе
			ПроверитьРеквизитДокумента(СтруктураДокумента, "ДатаАктаПередачиПрав", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана дата акта передачи жилья в собственность'"));
		КонецЕсли;
	КонецЕсли;
	ПроверитьРеквизитДокумента(СтруктураДокумента, "НачалоПримененияВычета", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан год начала применения вычета'"));
	Если СтруктураДокумента.ОформленоЗаявлениеОРаспределенииВычета Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ДатаЗаявленияОРаспределенииРасходов", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана дата заявления о распределении расходов'"));
	КонецЕсли;
	Если СтруктураДокумента.ПоказыватьДоли Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ДоляЧислитель", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана доля (числитель)'"));
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ДоляЗнаменатель", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана доля (знаменатель)'"));
	КонецЕсли;
	Если СтруктураДокумента.СуммаРасходов + СтруктураДокумента.Стоимость = 0 Тогда
		Результат = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "Стоимость", Неопределено, НСтр("ru='Не указана стоимость жилья'")));
	КонецЕсли;
	Если СтруктураДокумента.ИспользоватьВычетПоПроцентам Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаПроцентовЗаВсеГоды", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма процентов по кредиту'"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументВычетИИС(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(СтруктураДокумента.СуммаДохода) И Не ЗначениеЗаполнено(СтруктураДокумента.СуммаВычета) Тогда
		РезультатПроверки = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "СуммаВычета", Неопределено, НСтр("ru='Не указано ни суммы вычета, не суммы дохода'")));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументВычетСтрахования(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ВидДоговора", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан вид договора'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "НомерДоговора", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан номер договора'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ДатаДоговора", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана дата договора'"));
	ПроверитьРеквизитыПлательщикаДохода(СтруктураДокумента, Результат, СписокОшибок, "ИНН,КПП,ОКТМО,Наименование", СтрокаДокумента);
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаВычета", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма взносов'"));
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументВычетНаНалогоплательщика(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	Если СтруктураДокумента.ПостоянныйВТечениеГода Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "РазмерВычета", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан размер вычета'"));
	Иначе
		ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаВычета", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма вычета по месяцам'"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументВычетНаДетей(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	Если СтруктураДокумента.КоличествоМесяцев = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТабличнаяЧасть = ?(ТипЗнч(СтруктураДокумента.ТабличнаяЧасть) = Тип("ХранилищеЗначения"), СтруктураДокумента.ТабличнаяЧасть.Получить(), СтруктураДокумента.ТабличнаяЧасть);
	
	Если ТабличнаяЧасть.Итог("ВсегоДетей") = 0 Тогда
		Результат = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "ТабличнаяЧасть[0].ВсегоДетей", 0, 
				НСтр("ru='Указано некорректное количество детей'")));
	КонецЕсли;
	Если ТабличнаяЧасть.Итог("Несовершеннолетних") = 0 Тогда
		Результат = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "ТабличнаяЧасть[0].Несовершеннолетних", 0, 
				НСтр("ru='Не указано количество несовершеннолетних детей'")));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументДоходСправка2НДФЛ(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	Вычеты2НДФЛ = ?(ТипЗнч(СтруктураДокумента.Вычеты2НДФЛ) = Тип("ХранилищеЗначения"), СтруктураДокумента.Вычеты2НДФЛ.Получить(), СтруктураДокумента.Вычеты2НДФЛ);
	Строки2НДФЛ = ?(ТипЗнч(СтруктураДокумента.Строки2НДФЛ) = Тип("ХранилищеЗначения"), СтруктураДокумента.Строки2НДФЛ.Получить(), СтруктураДокумента.Строки2НДФЛ);
	
	Если Вычеты2НДФЛ.Количество() = 0 И Строки2НДФЛ.Количество() = 0 
		И СтруктураДокумента.СуммаДоходаОблагаемая = 0 И СтруктураДокумента.СуммаНалогаНачисленая Тогда
		Результат = Ложь;
		СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "СтавкаНалога", Неопределено, НСтр("ru='Справка 2-НДФЛ не заполнена (нет сумм)'")));
		Возврат Результат;
	КонецЕсли;
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СтавкаНалога", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана ставка налога'"));
	ПроверитьРеквизитыПлательщикаДохода(СтруктураДокумента, Результат, СписокОшибок, "ИНН,КПП,ОКТМО,Наименование", СтрокаДокумента);
	
	НомерСтроки = 0;
	Для каждого СтрокаТЧ Из Строки2НДФЛ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаДохода) И Не ЗначениеЗаполнено(СтрокаТЧ.КодДохода) Тогда
			Результат = Ложь;
			СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "Строки2НДФЛ[%1].КодДохода", НомерСтроки, НСтр("ru='Не указан код вида дохода'")));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаВычета) И Не ЗначениеЗаполнено(СтрокаТЧ.КодВычета) Тогда
			Результат = Ложь;
			СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "Строки2НДФЛ[%1].КодВычета", НомерСтроки, НСтр("ru='Не указан код вида вычета'")));
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	НомерСтроки = 0;
	Для каждого СтрокаТЧ Из Вычеты2НДФЛ Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СуммаВычета) И ЗначениеЗаполнено(СтрокаТЧ.КодВычета) Тогда
			Результат = Ложь;
			СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "Вычеты2НДФЛ[%1].СуммаВычета", НомерСтроки, НСтр("ru='Не указана сумма вычета'")));
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.СуммаВычета) И Не ЗначениеЗаполнено(СтрокаТЧ.КодВычета) Тогда
			Результат = Ложь;
			СписокОшибок.Добавить(СтруктураОписанияОшибкиПомощника("Документ", СтрокаДокумента, "Вычеты2НДФЛ[%1].КодВычета", НомерСтроки, НСтр("ru='Не указан код вида вычета'")));
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументДоходПредпринимателя(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ВидДеятельностиИндекс", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан вид деятельности'"));
	Если СтруктураДокумента.ВидДеятельностиИндекс = 1 Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ВидДеятельностиКод", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан ОКВЭД'"));
	КонецЕсли;
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма дохода'"));
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументДоходПродажиИмущества(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	ПроверитьРеквизитыПлательщикаДохода(СтруктураДокумента, Результат, СписокОшибок, "Наименование", СтрокаДокумента);
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма продажи'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ВидИмущества", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан вид проданного имущества'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ГодПриобретения", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан год приобретения имущества'"));
	
	ЭтоНедвижимость = СтруктураДокумента.ВидИмущества <> "Автомобиль" И СтруктураДокумента.ВидИмущества <> "Прочее";
	Если ЭтоНедвижимость Тогда
		
		ПроверитьРеквизитДокумента(СтруктураДокумента, "СпособПриобретения", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан способ приобретения имущества'"));
		Если СтруктураДокумента.ВидИмущества = "Доля" Тогда
			ПроверитьРеквизитДокумента(СтруктураДокумента, "ДоляЧислитель", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан числитель доли'"));
			ПроверитьРеквизитДокумента(СтруктураДокумента, "ДоляЗнаменатель", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан знаменатель доли'"));
		КонецЕсли;
		
		Если СтруктураДокумента.ГодПриобретения >= 2016 И СтруктураДокумента.ВидИмущества <> "Стройка" Тогда
			ПроверитьРеквизитДокумента(СтруктураДокумента, "КадастровыйНомер", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан кадастровый номер недвижимости'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументДоходОднойСуммой(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	ПроверитьРеквизитыПлательщикаДохода(СтруктураДокумента, Результат, СписокОшибок, "Наименование", СтрокаДокумента);
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма дохода'"));
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументДоходЗаПределамиРФ(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	ПроверитьРеквизитыПлательщикаДохода(СтруктураДокумента, Результат, СписокОшибок, "Наименование", СтрокаДокумента);
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "Страна", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана страна получения дохода'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ВалютаДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана валюта дохода '"));
	Если СтруктураДокумента.КонтролируемаяОрганизация Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "НомерИностраннойОрганизации", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан номер иностранной организации'"));
		ПроверитьРеквизитДокумента(СтруктураДокумента, "ОпределениеПрибылиИностраннойОрганизации", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан порядок определения прибыли иностранной организации'"));
	КонецЕсли;
	ПроверитьРеквизитДокумента(СтруктураДокумента, "КодДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан вид дохода'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "ДатаДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана дата получения дохода'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "КурсНаДатуДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан курс валюты на дату дохода'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "КратностьНаДатуДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана кратность валюты на дату дохода (за сколько единиц валюты назначен курс?)'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаДоходаВВалюте", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма дохода в валюте'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаДоходаВРублях", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма дохода в рублях'"));
	Если ЗначениеЗаполнено(СтруктураДокумента.ДатаУплатыНалога) Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "КурсНаДатуУплатыНалога", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан курс валюты на дату уплаты налога'"));
		ПроверитьРеквизитДокумента(СтруктураДокумента, "КратностьНаДатуУплатыНалога", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана кратность валюты на дату уплаты налога (за сколько единиц валюты назначен курс?)'"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КорректныйДокументДоходВРФПрочий(Год, СтруктураДокумента, СписокОшибок, СтрокаДокумента) 

	Результат = Истина;
	
	ПроверитьРеквизитыПлательщикаДохода(СтруктураДокумента, Результат, СписокОшибок, "Наименование", СтрокаДокумента);
	
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма дохода'"));
	ПроверитьРеквизитДокумента(СтруктураДокумента, "СтавкаНалога", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана ставка налога'"));
	Если СтруктураДокумента.ВидДохода <> "Дивиденды" Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "КодДохода", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указан вид дохода'"));
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДокумента.КодВычета) Тогда
		ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаВычета", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма вычета'"));
		Если СтруктураДокумента.СуммаВычета < СтруктураДокумента.СуммаДохода Тогда
			ПроверитьРеквизитДокумента(СтруктураДокумента, "СуммаНалога", Результат, СписокОшибок, Неопределено, НСтр("ru='Не указана сумма налога'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция КлючИтоговЛистааГ() 

	Возврат "СуммаДоходовНеПодлежащаяНалогообложению";

КонецФункции

Функция ЭтоОперацияСЦБ(КодДохода) Экспорт

	Если Не ЗначениеЗаполнено(КодДохода) Или СтрДлина(КодДохода) <> 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КодДохода <> "1540" И КодДохода >= "1530" И КодДохода <= "1549"
		Или КодДохода >= "1551" И КодДохода <= "1554"

КонецФункции

Функция ЭтоОплатаТруда(КодДохода) Экспорт
	
	Если Не ЗначениеЗаполнено(КодДохода) Или СтрДлина(КодДохода) <> 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КодДохода <> "2001" И КодДохода >= "2000" И КодДохода <= "2014";
	
КонецФункции

Функция ЭтоВознаграждениеДиректора(КодДохода) Экспорт
	
	Если Не ЗначениеЗаполнено(КодДохода) Или СтрДлина(КодДохода) <> 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КодДохода = "2001";
	
КонецФункции


#КонецОбласти 


#КонецЕсли

