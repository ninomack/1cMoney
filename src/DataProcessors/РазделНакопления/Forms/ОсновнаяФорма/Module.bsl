
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация реквизитов формы и объекта
	ВалютаУчета  = Константы.ВалютаУчета.Получить();
	ВалютаОтчета = ВалютаУчета;
	ЕдиницаИзмеренияМесяцСтрокой = НСтр("ru = 'мес.'");
	// Настройка автоматического открытия формы при начале работы порграммы
	Элементы.ОткрыватьПриЗапускеПрограммы.Пометка = ПользовательскиеНастройкиДеньгиСервер.ПриЗапускеОткрыватьРаздел() = "Накопления";
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконто.КошелькиИСчета);
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ФинансовыеЦели);
	МассивВидыСубконтоКошелькиИЦели = Новый ФиксированныйМассив(Массив);
	
	ДопНастройкиФормы = Новый Структура;
	ДопНастройкиФормы.Вставить("ПоказалиПодсказкуНакопления", РаботаСФормамиСправочников.ПользовательСмотрелПодсказку("ФормаНакопления"));
	
	ОбновитьСписокЦелей();
	ОбновитьНакопленияПоКошелькам();
	
	// Обработка перехода по ссылке
	ПараметрыПереходаПоСсылке = ДеньгиВызовСервера.ПолучитьПараметрПереходаПоСсылке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостьюКолонокКошельков(ЭтаФорма);
	
	// Обработка перехода по ссылке
	Если ТипЗнч(ПараметрыПереходаПоСсылке) = Тип("Структура") 
		И ПараметрыПереходаПоСсылке.НазначениеПерехода = "ОбработкаРазделНакопленияОсновнаяФорма" Тогда
		
		ЗначениеОтбора = Неопределено;
		Если ПараметрыПереходаПоСсылке.Отбор.Свойство("ФинансоваяЦель", ЗначениеОтбора) Тогда
			Элементы.ФинансовыеЦели.ТекущаяСтрока = ЗначениеОтбора;
		КонецЕсли;
		
		ЗначениеОтбора = Неопределено;
		Если ПараметрыПереходаПоСсылке.Отбор.Свойство("ТипПоказателя", ЗначениеОтбора) Тогда
			Если ЗначениеОтбора = "Накоплено" Тогда
				Элементы.ФинансовыеЦели.ТекущийЭлемент = Элементы.ФинансовыеЦелиПредставлениеНакопленоВсего;
				Элементы.НакопленияПоКошелькам.ТекущийЭлемент = Элементы.НакопленияПоКошелькамНакопленияВКошельках;
			ИначеЕсли ЗначениеОтбора = "Потрачено" Тогда
				Элементы.ФинансовыеЦели.ТекущийЭлемент = Элементы.ФинансовыеЦелиПредставлениеПотрачено;
				Элементы.НакопленияПоКошелькам.ТекущийЭлемент = Элементы.НакопленияПоКошелькамПотрачено;
			ИначеЕсли ЗначениеОтбора = "ОсталосьНакопить" Тогда
				Элементы.ФинансовыеЦели.ТекущийЭлемент = Элементы.ФинансовыеЦелиПредставлениеОсталосьНакопить;
				Элементы.НакопленияПоКошелькам.ТекущийЭлемент = Элементы.НакопленияПоКошелькамОсталосьНакопить;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим текущую строку таблицы НакопленияПоКошелькам по текущей ФинансовойЦели
	ОбработкаАктивизацииСтрокиФинансовыеЦели();
	
	Если НЕ ДопНастройкиФормы.ПоказалиПодсказкуНакопления Тогда
		ПодключитьОбработчикОжидания("ПоказатьПодсказкуФормы", 0.8, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" Или ИмяСобытия = "Записан элемент справочника" Или ИмяСобытия = "Изменена валюта учета" Тогда
		
		ОбновитьДанныеПоОбработкеОповещения();
		
	ИначеЕсли ИмяСобытия = "Изменилась настройка" И Параметр.Свойство("ПриЗапускеОткрыватьРаздел") Тогда
		
		Элементы.ОткрыватьПриЗапускеПрограммы.Пометка =  Параметр.ПриЗапускеОткрыватьРаздел = "Накопления";
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПлановНакопленийБезЦелиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьМенюПланирования(Элементы.ПредставлениеПлановНакопленийБезЦели, ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления"));
	
КонецПроцедуры



#КонецОбласти



#Область ОбработчикиСобытийЭлементовТаблицыФормы_ФинансовыеЦели

&НаКлиенте
Процедура ФинансовыеЦелиПриАктивизацииСтроки(Элемент)
	ОбработкаАктивизацииСтрокиФинансовыеЦели();
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыеЦелиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ФинЦельДляКопирования = ?(Копирование, Элементы.ФинансовыеЦели.ТекущиеДанные.ФинансоваяЦель, Неопределено);
	ОткрытьФормуФинансовойЦели(Неопределено, ФинЦельДляКопирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыеЦелиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ФинансовыеЦелиПредставлениеЗапланировано" Тогда
		ФинансовыеЦелиВыборЗапланированоОткладыватьВМесяц(Элемент);
	ИначеЕсли Поле.Имя = "ФинансовыеЦелиПредставлениеФинансоваяЦель" Тогда
		ОткрытьФормуФинансовойЦели(ФинансовыеЦели.НайтиПоИдентификатору(ВыбраннаяСтрока).ФинансоваяЦель, Неопределено);
	ИначеЕсли Поле.Имя = "ФинансовыеЦелиПредставлениеПотрачено" Тогда
		ОткрытьОтчетФинансовойЦели(ФинансовыеЦели.НайтиПоИдентификатору(ВыбраннаяСтрока).ФинансоваяЦель, "РасходыНаЦель");
	Иначе
		ОткрытьОтчетФинансовойЦели(ФинансовыеЦели.НайтиПоИдентификатору(ВыбраннаяСтрока).ФинансоваяЦель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыеЦелиПередУдалением(Элемент, Отказ)
	
	Отказ = истина;
	ИзменитьПометкуЦели();
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансовыеЦелиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПодключитьОбработчикОжидания("ОбработчикПеретаскиваяниФинансовыеЦели", 0.1, Истина);
	
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиСобытийЭлементовТаблицыФормы_НакопленияПоКошелькам

&НаКлиенте
Процедура НакопленияПоКошелькамПриАктивизацииСтроки(Элемент)
	
	Если ТекущийЭлемент.Имя <> "НакопленияПоКошелькам" Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработкаАктивизацииСтрокиНакопленияПоКошелькам", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленияПоКошелькамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = НакопленияПоКошелькам.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "НакопленияПоКошелькамПредставлениеФинансоваяЦель"
		Или Поле.Имя = "НакопленияПоКошелькамПредставлениеСуммы"
		Или Поле.Имя = "НакопленияПоКошелькамОсталосьНакопить"
		Или Поле.Имя = "НакопленияПоКошелькамОсталосьНакопитьВалюта"
		Или Поле.Имя = "НакопленияПоКошелькамОсталосьНакопитьВПроцентах"
		Или Поле.Имя = "НакопленияПоКошелькамОсталосьНакопитьСимволПроцента"
		Или Поле.Имя = "НакопленияПоКошелькамОсталосьМесяцев"
		Или Поле.Имя = "НакопленияПоКошелькамЕдиницаИзмеренияМесяц"
		Тогда
		
		ОткрытьФормуФинансовойЦели(ТекущиеДанные.ФинансоваяЦель, Неопределено);
		Возврат;
		
	ИначеЕсли Поле.Имя = "НакопленияПоКошелькамПотрачено" 
		Или Поле.Имя = "НакопленияПоКошелькамПотраченоВалюта"
		Или Поле.Имя = "НакопленияПоКошелькамПотраченоВПроцентах"
		Или Поле.Имя = "НакопленияПоКошелькамПотраченоСимволПроцента"
		Тогда
		
		ОткрытьОтчетФинансовойЦели(ТекущиеДанные.ФинансоваяЦель, "РасходыНаЦель");
		Возврат;
		
	ИначеЕсли Поле.Имя = "НакопленияПоКошелькамНакопленияВКошельках" 
		Или Поле.Имя = "НакопленияПоКошелькамНакопленияВКошелькахВалюта"
		Или Поле.Имя = "НакопленияПоКошелькамНакопленияВКошелькахВПроцентах"
		Или Поле.Имя = "НакопленияПоКошелькамНакопленияВКошелькахСимволПроцента"
		Тогда
		
		ОткрытьОтчетПокошелькам(Неопределено, ТекущиеДанные.ФинансоваяЦель);
		Возврат;
		
	КонецЕсли;
	
	ИДКошелька = ПолучитьИДКошелькаПоИмениКолонки(Элемент.ТекущийЭлемент.Имя);
	Если Не ЗначениеЗаполнено(ИДКошелька) Тогда
		Возврат;
	КонецЕсли;
	Кошелек = СписокИДКошельков.НайтиПоИдентификатору(ИДКошелька).Значение;
	ОткрытьОтчетПокошелькам(Кошелек, ТекущиеДанные.ФинансоваяЦель);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиНакопленияПоКошелькам()
	
	ТекущиеДанные = Элементы.НакопленияПоКошелькам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ФинансовыеЦели.ТекущаяСтрока = ТекущиеДанные.ФинансоваяЦель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленияПоКошелькамНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИДКошелька = ПолучитьИДКошелькаПоИмениКолонки(Элемент.ТекущийЭлемент.Имя);
	Если ИДКошелька = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуммОперации = ?(ИДКошелька = "", 0, Элемент.ТекущиеДанные["Кошелек_" + Формат(ИДКошелька, "ЧДЦ=; ЧН=0; ЧГ=")  + "_НакопленияВВалютеКошелька"]);
	 
	ПараметрыПеретаскивания.Значение = Новый Структура("ФинансоваяЦельОткуда, ИДКошелькаОткуда,СуммаОперации", 
		Элемент.ТекущиеДанные.ФинансоваяЦель, ИДКошелька, СуммОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленияПоКошелькамПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Проверим тип входящего значения
	ПеретаскиваетсяЦельИКошелек = (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура")
									И ПараметрыПеретаскивания.Значение.Свойство("ФинансоваяЦельОткуда")
									И ПараметрыПеретаскивания.Значение.Свойство("ИДКошелькаОткуда"));
	
	ПеретаскиваетсяЧисло = (ЗначениеВЧисло(ПараметрыПеретаскивания.Значение) <> Неопределено);
	
	Если НЕ (ПеретаскиваетсяЦельИКошелек ИЛИ ПеретаскиваетсяЧисло) ИЛИ (Строка = Неопределено ИЛИ Поле = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим входящее значение
	СтандартнаяОбработка = Ложь;
	
	ИДКошелькаКуда = ПолучитьИДКошелькаПоИмениКолонки(Поле.Имя);
	
	Если ПеретаскиваетсяЦельИКошелек Тогда
		
		Если ПараметрыПеретаскивания.Значение.ИДКошелькаОткуда = Неопределено И ИДКошелькаКуда = Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Иначе
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		КонецЕсли;
		
	ИначеЕсли ПеретаскиваетсяЧисло Тогда
		
		Если ИДКошелькаКуда = Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Иначе
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленияПоКошелькамПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Проверим тип входящего значения
	ПеретаскиваетсяЦельИКошелек = (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура")
									И ПараметрыПеретаскивания.Значение.Свойство("ФинансоваяЦельОткуда")
									И ПараметрыПеретаскивания.Значение.Свойство("ИДКошелькаОткуда"));
	
	ПеретаскиваетсяЧисло = (ЗначениеВЧисло(ПараметрыПеретаскивания.Значение) <> Неопределено);
	
	Если НЕ (ПеретаскиваетсяЦельИКошелек ИЛИ ПеретаскиваетсяЧисло) ИЛИ (Строка = Неопределено ИЛИ Поле = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Обработаем входящее значение
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = НакопленияПоКошелькам.НайтиПоИдентификатору(Строка);
	СуммаОперации = Неопределено;
	ПараметрыПеретаскивания.Значение.Свойство("СуммаОперации", СуммаОперации);
	СуммаОперации = ?(ЗначениеЗаполнено(СуммаОперации), СуммаОперации, 0);
	
	ФинансоваяЦельКуда = ТекущиеДанные.ФинансоваяЦель;
	ИДКошелькаКуда = ПолучитьИДКошелькаПоИмениКолонки(Поле.Имя);
	
	Если ПеретаскиваетсяЦельИКошелек Тогда
		
		Если ПараметрыПеретаскивания.Значение.ИДКошелькаОткуда = Неопределено И ИДКошелькаКуда = Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Возврат;
		КонецЕсли;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		
		// Если валюты совпадают, создаем Перевод, иначе ОбменВалюты
		ИДКошелькаОткуда = ПараметрыПеретаскивания.Значение.ИДКошелькаОткуда;
		КошелекОткуда = ?(ИДКошелькаОткуда <> Неопределено, СписокИДКошельков.НайтиПоИдентификатору(ИДКошелькаОткуда).Значение, Неопределено);
		КошелекОткудаВалюта = ?(ИДКошелькаОткуда <> Неопределено, ТекущиеДанные["Кошелек_" + ИДКошелькаОткуда + "_ВалютаКошелька"], Неопределено);
		КошелекКуда = ?(ИДКошелькаКуда <> Неопределено, СписокИДКошельков.НайтиПоИдентификатору(ИДКошелькаКуда).Значение, Неопределено);
		КошелекКудаВалюта = ?(ИДКошелькаКуда <> Неопределено, ТекущиеДанные["Кошелек_" + ИДКошелькаКуда + "_ВалютаКошелька"], Неопределено);
		
		Если КошелекОткудаВалюта = КошелекКудаВалюта ИЛИ КошелекОткуда = Неопределено ИЛИ КошелекКуда = Неопределено Тогда
			ТипДокумента = "Перемещение";
		Иначе
			ТипДокумента = "ОбменВалюты";
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("КошелекОткуда,КошелекКуда,ФинансоваяЦельОткуда,ФинансоваяЦельКуда,СуммаОперации", 
			КошелекОткуда, КошелекКуда, ПараметрыПеретаскивания.Значение.ФинансоваяЦельОткуда, ФинансоваяЦельКуда, СуммаОперации);
		ОткрытьФорму("Документ." + ТипДокумента + ".ФормаОбъекта", 
			Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения), ЭтаФорма, Ложь);
		
	ИначеЕсли ПеретаскиваетсяЧисло Тогда
		
		Если ИДКошелькаКуда = Неопределено Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Возврат;
		КонецЕсли;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Выбор;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		
		КошелекКуда = СписокИДКошельков.НайтиПоИдентификатору(ИДКошелькаКуда).Значение;
		СуммаОперации = ЗначениеВЧисло(ПараметрыПеретаскивания.Значение);
		
		// Создаем Доход, Перевод или ОбменВалюты
		СписокВидовОпераций = Новый СписокЗначений;
		СписокВидовОпераций.Добавить("Перемещение", НСтр("ru = 'Создать Перемещение'"), , ДеньгиКлиентСервер.ПолучитьКартинкуВидаОперации("Перевод"));
		СписокВидовОпераций.Добавить("ОбменВалюты", НСтр("ru = 'Создать Обмен валюты'"), , ДеньгиКлиентСервер.ПолучитьКартинкуВидаОперации("ОбменВалюты"));
		СписокВидовОпераций.Добавить("Доход", НСтр("ru = 'Создать Доход'"), , ДеньгиКлиентСервер.ПолучитьКартинкуВидаОперации("Доход"));
		
		ПараметрыЗаполнения = Новый Структура("Кошелек,КошелекКуда,ФинансоваяЦель,ФинансоваяЦельКуда,СуммаОперации,СуммаПолучено,СуммаДохода", 
			КошелекКуда, КошелекКуда, ФинансоваяЦельКуда, ФинансоваяЦельКуда, СуммаОперации, СуммаОперации, СуммаОперации);
		ДополнительныеПараметры = Новый Структура("Строка, Поле, ПараметрыЗаполнения", Строка, Поле, ПараметрыЗаполнения);
		ОбработчикВыбора = Новый ОписаниеОповещения("НакопленияПоКошелькамПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОбработчикВыбора, СписокВидовОпераций, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитыватьНакопленияВКошелькахВВалютуЦелейПриИзменении(Элемент)
	УправлениеВидимостьюКолонокКошельков(ЭтаФорма);
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьТаблицуНакопленияПоКошелькам(Команда)
	
	ТекущиеДанные = Элементы.НакопленияПоКошелькам.ТекущиеДанные;
	ФинансоваяЦель = ?(ТекущиеДанные <> Неопределено, ТекущиеДанные.ФинансоваяЦель, Неопределено);
	
	ОбновитьНакопленияПоКошелькам();
	
	Элементы.НакопленияПоКошелькам.ТекущаяСтрока = ПолучитьИдентификаторЭлементаКоллекцииПоОтбору(НакопленияПоКошелькам, Новый Структура("ФинансоваяЦель", ФинансоваяЦель));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокумент(Команда)
	
	ВидДокумента = СтрЗаменить(Команда.Имя, "Создать", "");
	
	ПараметрыФормыНовогоДокумента = Новый Структура;
	Отказ = Ложь;
	ЗаполнитьПараметрыНовогоДокумента(ВидДокумента, ПараметрыФормыНовогоДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФормамиДокументовКлиент.ОткрытьФормуНовогоДокументаСУчетомШаблона(ВидДокумента, ПараметрыФормыНовогоДокумента, Элементы.НакопленияПоКошелькам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоднятьПрииоритет(Команда)
	ПререместитьСтрокуСписка(-1);
КонецПроцедуры

&НаКлиенте
Процедура ОпуститьПриоритет(Команда)
	ПререместитьСтрокуСписка(1);
КонецПроцедуры

&НаКлиенте
Процедура Запланировать(Команда)
	
	Если Элементы.ФинансовыеЦели.ТекущиеДанные = Неопределено Тогда
		ОткрытьМенюПланирования(Элементы.ПредставлениеПлановНакопленийБезЦели, ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления"));
	Иначе
		ОткрытьМенюПланирования(Элементы.ФинансовыеЦелиПредставлениеЗапланировано, Элементы.ФинансовыеЦели.ТекущиеДанные.ФинансоваяЦель);
	КонецЕсли;
	
КонецПроцедуры
 

// Настройка автоматического открытия формы при начале работы порграммы

&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммы(Команда)
	
	Если Элементы.ОткрыватьПриЗапускеПрограммы.Пометка Тогда
		ТекстВопроса = НСтр("ru = 'Отключить автоматическое открытие этой формы при запуске программы?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Иначе
		ТекстВопроса = НСтр("ru = 'Октрывать эту форму при каждом запуске программы?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли; 
	ДополнительныеПараметры = Новый Структура("Открывать", Элементы.ОткрыватьПриЗапускеПрограммы.Пометка);
	ОбработчикОтвета = Новый ОписаниеОповещения("ОткрыватьПриЗапускеПрограммыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьФинансовыеЦели(Команда)
	ОбновитьСписокЦелей();
КонецПроцедуры


#КонецОбласти



#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживание таблицы ФинансовыеЦели

&НаСервере
Процедура ОбновитьСписокЦелей()

	ТекущаяЦель = ?(Элементы.ФинансовыеЦели.ТекущаяСтрока <> Неопределено, 
					ФинансовыеЦели.НайтиПоИдентификатору(Элементы.ФинансовыеЦели.ТекущаяСтрока).ФинансоваяЦель, 
					Неопределено);
	
	ФинансовыеЦели.Очистить();
	
	// Для пересчетов из валюты учета в валюты целей используем курсы валют
	КурсыВалют = Новый Соответствие;
	КурсИКратностьВалютыОтчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаОтчета, , ВалютаУчета);
	КурсыВалют.Вставить(ВалютаОтчета, КурсИКратностьВалютыОтчета);
	
	// Для пересчета ежемесячных сумм без указания срока ывчислим кол-во месяцев до предела планирования
	ВсегоМесяцевПланирования = КоличествоМесяцевПланированияПоФинансовымЦелям();
	
	НакопленияБезЦели      = ФинансовыеЦелиСервер.ИнформацияОНакопленииНаЦель(Неопределено, ВалютаОтчета);
	ОстатокНакопленийВВалютеОтчета = 0;
	
	ВыборкаЦелей = ФинансовыеЦелиСервер.РезультатЗапросаИнформацииОНакопленииНаЦель(4, 0, ВалютаОтчета, ВалютаОтчета, Неопределено);
	ВыборкаЦелей = ВыборкаЦелей.Выборка_Накопления.Выбрать();
	Пока ВыборкаЦелей.Следующий() Цикл
		
		Если ВыборкаЦелей.Предопределенный Тогда
			// Информация о накоплениях без цели выводится вне таблицы
			ЗаполнитьЗначенияСвойств(НакопленияБезЦели, ВыборкаЦелей);
			ОстатокНакопленийВВалютеОтчета = ВыборкаЦелей.ЗарезервированоВВалютеОтчета;
			Продолжить;
		КонецЕсли;
		
		Если Не ВыборкаЦелей.Активность И ВыборкаЦелей.Зарезервировано = 0 Тогда
			// В таблицу выводятся только актуальные цели, либо цели с ненулевым резервом накоплений
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ФинансовыеЦели.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаЦелей);
		СтрокаТаблицы.ПрежнийПриоритет = СтрокаТаблицы.Приоритет;
		
		СтрокаТаблицы.ПредставлениеФинансоваяЦель = Формат(СтрокаТаблицы.Приоритет, "ЧДЦ=; ЧГ=") + ". " + СтрокаТаблицы.ФинансоваяЦель;
		Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаЦели) Тогда
			СтрокаТаблицы.ПредставлениеСуммы = Формат(СтрокаТаблицы.СуммаЦели, "ЧДЦ=; ЧН=0") + " " + СтрокаТаблицы.ВалютаЦели;
		Иначе
			СтрокаТаблицы.ПредставлениеСуммы = НСтр("ru='Сумма не задана'");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Срок) Тогда
			ПредставлениеСрока = НСтр("ru='к %1'");
			ПредставлениеСрока = " " + СтрШаблон(ПредставлениеСрока, Формат(СтрокаТаблицы.Срок, "Л=ru_RU; ДФ=dd.MM.yyyy"));
		Иначе
			ПредставлениеСрока = ", " + НСтр("ru='<без срока>'");
		КонецЕсли;
		СтрокаТаблицы.ПредставлениеСуммы = "  " + СтрокаТаблицы.ПредставлениеСуммы + ПредставлениеСрока;
		
		Если СтрокаТаблицы.Активность Тогда
			// Вычисляем, сколько общих накоплений потрачено на цели, предшествующие заданной 
			Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаЦели) Тогда
				ИзОбщихНакопленийВВалютеОтчета  = Макс(0, ВыборкаЦелей.СуммаЦелиВВалютеОтчета - ВыборкаЦелей.ЗарезервированоВВалютеОтчета
										- ВыборкаЦелей.ПотраченоНаЦельВВалютеОтчета - ВыборкаЦелей.ПотраченоСвободныхДенегВВалютеОтчета);
				ИзОбщихНакопленийВВалютеОтчета  = Мин(ИзОбщихНакопленийВВалютеОтчета, ОстатокНакопленийВВалютеОтчета);
				
			Иначе
				ИзОбщихНакопленийВВалютеОтчета = Макс(0, ОстатокНакопленийВВалютеОтчета);
			КонецЕсли;
		Иначе
			ИзОбщихНакопленийВВалютеОтчета = 0;
		КонецЕсли;
		ОстатокНакопленийВВалютеОтчета = ОстатокНакопленийВВалютеОтчета - ИзОбщихНакопленийВВалютеОтчета;
		
		Если ИзОбщихНакопленийВВалютеОтчета <> 0 И СтрокаТаблицы.ВалютаЦели <> ВалютаУчета Тогда
			
			КурсИКратностьВалютыЦели = КурсыВалют[СтрокаТаблицы.ВалютаЦели];
			Если КурсИКратностьВалютыЦели = Неопределено Тогда
				КурсИКратностьВалютыЦели = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаТаблицы.ВалютаЦели, , ВалютаУчета);
				КурсыВалют.Вставить(СтрокаТаблицы.ВалютаЦели, КурсИКратностьВалютыЦели);
			КонецЕсли;
			
			ИзОбщихНакопленийВВалютеЦели = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ИзОбщихНакопленийВВалютеОтчета,
						КурсИКратностьВалютыОтчета,
						КурсИКратностьВалютыЦели);
			
		Иначе
			
			ИзОбщихНакопленийВВалютеЦели = ИзОбщихНакопленийВВалютеОтчета;
			
		КонецЕсли;
		
		СтрокаТаблицы.РаспределеноОбщихНакоплений = ИзОбщихНакопленийВВалютеЦели;
		СтрокаТаблицы.НакопленоВсего = СтрокаТаблицы.РаспределеноОбщихНакоплений + СтрокаТаблицы.Зарезервировано;
		Если ЗначениеЗаполнено(СтрокаТаблицы.СуммаЦели) Тогда
			
			СтрокаТаблицы.ОсталосьНакопить = СтрокаТаблицы.СуммаЦели - СтрокаТаблицы.НакопленоВсего - СтрокаТаблицы.ПотраченоНаЦель - СтрокаТаблицы.ПотраченоСвободныхДенег;
			
			ПроцентДоступности = СтрокаТаблицы.НакопленоВсего / СтрокаТаблицы.СуммаЦели * 100;
			Если ПроцентДоступности > 1000 Тогда
				ПроцентДоступности = "больше 1000%";
			ИначеЕсли ПроцентДоступности < -1000 Тогда
				ПроцентДоступности = "меньше -1000%";
			Иначе
				ПроцентДоступности = ?(ПроцентДоступности = 0, "", Формат(ПроцентДоступности, "ЧДЦ=; ЧН=0; ЧГ=") + "%") ;
			КонецЕсли;
			
			ПроцентПотрачено   = (СтрокаТаблицы.ПотраченоНаЦель + СтрокаТаблицы.ПотраченоСвободныхДенег) / СтрокаТаблицы.СуммаЦели * 100;
			Если ПроцентПотрачено > 1000 Тогда
				ПроцентПотрачено = "больше 1000%";
			ИначеЕсли ПроцентПотрачено < -1000 Тогда
				ПроцентПотрачено = "меньше -1000%";
			Иначе
				ПроцентПотрачено = ?(ПроцентПотрачено = 0, "", Формат(ПроцентПотрачено, "ЧДЦ=; ЧН=0; ЧГ=") + "%");
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицы.ОсталосьНакопить = 0;
			ПроцентДоступности = ?(ЗначениеЗаполнено(СтрокаТаблицы.НакопленоВсего), "100%", "");
			ПроцентПотрачено = ?(ЗначениеЗаполнено(СтрокаТаблицы.ПотраченоНаЦель), "100%", "");
			СтрокаТаблицы.ОткладыватьВМесяц = 0;
			
		КонецЕсли;
		
		СтрокаТаблицы.ПредставлениеНакопленоВсего     = ПредставлениеСуммыИВалюты(СтрокаТаблицы.НакопленоВсего, СтрокаТаблицы.ВалютаЦели);
		СтрокаТаблицы.ПредставлениеНакопленоВсего = СтрокаТаблицы.ПредставлениеНакопленоВсего + Символы.ПС + ПроцентДоступности;
					
		СтрокаТаблицы.ПредставлениеЗарезервировано    = ПредставлениеСуммыИВалюты(СтрокаТаблицы.Зарезервировано, СтрокаТаблицы.ВалютаЦели);
		СтрокаТаблицы.ПредставлениеРаспределено       = ПредставлениеСуммыИВалюты(СтрокаТаблицы.РаспределеноОбщихНакоплений, СтрокаТаблицы.ВалютаЦели);
		СтрокаТаблицы.ПредставлениеОсталосьНакопить   = ПредставлениеСуммыИВалюты(СтрокаТаблицы.ОсталосьНакопить, СтрокаТаблицы.ВалютаЦели);
		
		СтрокаТаблицы.ПредставлениеПотрачено          = ПредставлениеСуммыИВалюты(СтрокаТаблицы.ПотраченоНаЦель + СтрокаТаблицы.ПотраченоСвободныхДенег, СтрокаТаблицы.ВалютаЦели);
		СтрокаТаблицы.ПредставлениеПотрачено = СтрокаТаблицы.ПредставлениеПотрачено + Символы.ПС + ПроцентПотрачено;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Срок) И СтрокаТаблицы.ОсталосьНакопить > 0 Тогда
			
			Если СтрокаТаблицы.ОсталосьДней < 0 Тогда
				ОсталосьСрока = НСтр("ru='просрочено!'");
			ИначеЕсли СтрокаТаблицы.ОсталосьМесяцев > 12 Тогда
				ОсталосьСрока = НСтр("ru='осталось лет: %1'");
				ОсталосьСрока = СтрШаблон(ОсталосьСрока, Окр(СтрокаТаблицы.ОсталосьМесяцев / 12, 1));
			ИначеЕсли СтрокаТаблицы.ОсталосьМесяцев > 0 Тогда
				ОсталосьСрока = НСтр("ru='осталось мес: %1'");
				ОсталосьСрока = СтрШаблон(ОсталосьСрока, СтрокаТаблицы.ОсталосьМесяцев);
			ИначеЕсли СтрокаТаблицы.ОсталосьДней > 0 Тогда
				ОсталосьСрока = НСтр("ru='осталось дней: %1'");
				ОсталосьСрока = СтрШаблон(ОсталосьСрока, СтрокаТаблицы.ОсталосьДней);
			Иначе
				ОсталосьСрока = НСтр("ru='срок настал!'");
			КонецЕсли;
			
			СтрокаТаблицы.ПредставлениеСрока = ОсталосьСрока; 
			
		Иначе
			СтрокаТаблицы.ПредставлениеСрока = ""; 
		КонецЕсли;
		
		МесяцевОтДаты = 0;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Срок) Тогда
			МесяцевОтДаты = МесяцевОтТекущейДаты(СтрокаТаблицы.Срок);
		ИначеЕсли ЗначениеЗаполнено(ВсегоМесяцевПланирования) Тогда
			МесяцевОтДаты = ВсегоМесяцевПланирования;
		КонецЕсли;
		
		ПланНаМесяц = СтрокаТаблицы.ЗапланированоВМесяц;
		
		Если ПланНаМесяц = 0 Тогда
			СтрокаТаблицы.ПредставлениеЗапланировано = НСтр("ru='Запланировать...'"); 
		Иначе
			СтрокаТаблицы.ПредставлениеЗапланировано = ПредставлениеСуммыИВалюты(ПланНаМесяц, СтрокаТаблицы.ВалютаЦели); 
		КонецЕсли;
		
		СтрокаТаблицы.ОткладыватьВМесяц = 0;
		Если СтрокаТаблицы.ОсталосьНакопить > 0 И МесяцевОтДаты > 0 Тогда
			СтрокаТаблицы.ОткладыватьВМесяц = Окр(СтрокаТаблицы.ОсталосьНакопить / МесяцевОтДаты, 0);
		КонецЕсли;
		
		Если СтрокаТаблицы.ОткладыватьВМесяц = 0 Тогда
			СтрокаТаблицы.ПредставлениеОткладыватьВМесяц     = "--";
		Иначе
			СтрокаТаблицы.ПредставлениеОткладыватьВМесяц     = ПредставлениеСуммыИВалюты(СтрокаТаблицы.ОткладыватьВМесяц, СтрокаТаблицы.ВалютаЦели);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийПорядок.Очистить();
	ТекущийПорядок.ЗагрузитьЗначения(ФинансовыеЦели.Выгрузить(, "Приоритет").ВыгрузитьКолонку("Приоритет"));
	
	// Обновляем общие накопления
	ПредставлениеОбщихНакоплений = Формат(НакопленияБезЦели.Зарезервировано,      "ЧДЦ=; ЧН=0") + " " + НакопленияБезЦели.ВалютаЦели; 
	ПланНаМесяц = НакопленияБезЦели.ЗапланированоВМесяц;
	Если ПланНаМесяц <> 0 Тогда
		ПредставлениеПлановНакопленийБезЦели = Формат(ПланНаМесяц,      "ЧДЦ=; ЧН=0") + " " + НакопленияБезЦели.ВалютаЦели; 
	Иначе
		ПредставлениеПлановНакопленийБезЦели = "0 " + НакопленияБезЦели.ВалютаЦели; 
	КонецЕсли;
	
	// Восстанавливаем текущую строку
	Если ЗначениеЗаполнено(ТекущаяЦель) Тогда
		
		СтрокаТаблицы = ФинансовыеЦели.НайтиСтроки(Новый Структура("ФинансоваяЦель", ТекущаяЦель));
		Если СтрокаТаблицы.Количество() > 0 Тогда
			Элементы.ФинансовыеЦели.ТекущаяСтрока = СтрокаТаблицы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеСуммыИВалюты(Знач Сумма, Знач Валюта)

	Сумма = ?(ЗначениеЗаполнено(Сумма), Сумма, 0);
	Если Сумма = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Формат(Сумма,      "ЧДЦ=; ЧН=0") + " " + Валюта; 

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуФинансовойЦели(ФинансоваяЦель, ФинЦельДляКопирования)

	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ФинансоваяЦель) Тогда
		ПараметрыФормы.Вставить("Ключ", ФинансоваяЦель);
	ИначеЕсли ЗначениеЗаполнено(ФинЦельДляКопирования) Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", ФинЦельДляКопирования);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВнешниеДиалогиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ФинансовыеЦели.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ФинансоваяЦель, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВнешниеДиалогиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	ОбновитьСписокЦелей();

КонецПроцедуры

&НаКлиенте
Процедура ПререместитьСтрокуСписка(Направление)

	СтрокаСписка = Элементы.ФинансовыеЦели.ТекущиеДанные;
	Если СтрокаСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ФинансовыеЦели.Индекс(СтрокаСписка);
	Если Индекс = 0 И Направление < 0  Или Индекс + Направление = ФинансовыеЦели.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗамены = ФинансовыеЦели.Получить(Индекс + Направление);
	Если СтрокаЗамены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоменятьПриоритетыВСтроках(СтрокаСписка.ПолучитьИдентификатор(), СтрокаЗамены.ПолучитьИдентификатор());

КонецПроцедуры

&НаСервере
Процедура ПоменятьПриоритетыВСтроках(ИД1, ИД2)

	СтрокаСписка = ФинансовыеЦели.НайтиПоИдентификатору(ИД1);
	СтрокаЗамены = ФинансовыеЦели.НайтиПоИдентификатору(ИД2);
	ПоменятьПриоритетыЦелей(СтрокаСписка.ФинансоваяЦель, СтрокаЗамены.ФинансоваяЦель);
	
	ОбновитьСписокЦелей();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоменятьПриоритетыЦелей(Цель1, Цель2)

	Приоритет1 = Цель1.РеквизитДопУпорядочивания;
	
	Объект1 = Цель1.ПолучитьОбъект();
	Объект1.РеквизитДопУпорядочивания = Цель2.РеквизитДопУпорядочивания;
	Объект1.Записать();
	
	Объект2 = Цель2.ПолучитьОбъект();
	Объект2.РеквизитДопУпорядочивания = Приоритет1;
	Объект2.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ФинансовыеЦелиВыборЗапланированоОткладыватьВМесяц(Элемент)
	
	ТекущиеДанные = Элементы.ФинансовыеЦели.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
		
	Иначе 
		ОткрытьМенюПланирования(Элемент, ТекущиеДанные.ФинансоваяЦель)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиФинансовыеЦели()
	
	ТекущиеДанные = Элементы.ФинансовыеЦели.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.НакопленияПоКошелькам.ТекущаяСтрока = ПолучитьИдентификаторЭлементаКоллекцииПоОтбору(НакопленияПоКошелькам, Новый Структура("ФинансоваяЦель", ТекущиеДанные.ФинансоваяЦель));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюПланирования(Элемент, ФинансоваяЦель)

	СписокШаблонов = ПолучитьСписокШаблоновПоФинансовойЦели(ФинансоваяЦель);
	ДополнительныеПараметры = Новый Структура("ФинансоваяЦель", ФинансоваяЦель);
	 
	
	Если СписокШаблонов.Количество() = 0 Тогда
		// Создать новый шаблон
		СписокВидовОпераций = Новый СписокЗначений; 
		СписокВидовОпераций.Добавить("Перемещение", НСтр("ru = 'Запланировать Перемещение'"), , ДеньгиКлиентСервер.ПолучитьКартинкуВидаОперации("Перевод"));
		СписокВидовОпераций.Добавить("ОбменВалюты", НСтр("ru = 'Запланировать Обмен валюты'"), , ДеньгиКлиентСервер.ПолучитьКартинкуВидаОперации("ОбменВалюты"));
		СписокВидовОпераций.Добавить("Доход", НСтр("ru = 'Запланировать Доход'"), , ДеньгиКлиентСервер.ПолучитьКартинкуВидаОперации("Доход"));
		ОбработчикВыбора = Новый ОписаниеОповещения("СозданиеШаблонаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОбработчикВыбора, СписокВидовОпераций, Элемент);
		
	ИначеЕсли СписокШаблонов.Количество() >= 1 Тогда
		
		Для каждого ЭлементСписка Из СписокШаблонов Цикл
			ЭлементСписка.Представление = НСтр("ru = 'Открыть шаблон: '") + ЭлементСписка.Представление;
		КонецЦикла;
		ОбработчикВыбора = Новый ОписаниеОповещения("ВыборШаблонаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОбработчикВыбора, СписокШаблонов, ЭлементСписка);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПриоритетыПриПеретаскивании()

	Для Счетчик = 0 По ТекущийПорядок.Количество() - 1 Цикл
		
		СтрокаТаблицы = ФинансовыеЦели[Счетчик];
		СтрокаТаблицы.Приоритет = ТекущийПорядок[Счетчик].Значение;
		СтрокаТаблицы.ПредставлениеФинансоваяЦель = "" + СтрокаТаблицы.Приоритет +". " + СтрокаТаблицы.ФинансоваяЦель;
		
	КонецЦикла;
	
	ОбновлятьСписок = Ложь;
	Для каждого СтрокаТаблицы Из ФинансовыеЦели Цикл
		
		Если СтрокаТаблицы.ПрежнийПриоритет <> СтрокаТаблицы.Приоритет Тогда
			
			СправочникОбъект = СтрокаТаблицы.ФинансоваяЦель.ПолучитьОбъект();
			СправочникОбъект.РеквизитДопУпорядочивания = СтрокаТаблицы.Приоритет;
			СправочникОбъект.Записать();
			
			ОбновлятьСписок = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если ОбновлятьСписок Тогда
		ОбновитьСписокЦелей();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПеретаскиваяниФинансовыеЦели()

	ОбновитьПриоритетыПриПеретаскивании();
	Оповестить("Записан элемент справочника", Новый Структура("ИмяСправочника,Ссылка,ВладелецФормы", 
		"ФинансовыеЦели", Неопределено, 
		?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено)));

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуЦели()

	СтрокаЦели = Элементы.ФинансовыеЦели.ТекущаяСтрока;
	Если СтрокаЦели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьПометкуЦелиЗавершение", ЭтотОбъект, СтрокаЦели);
	Если Не Элементы.ФинансовыеЦели.ТекущиеДанные.ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru='Пометить ""%1"" на удаление?'"); 
	Иначе
		ТекстВопроса = НСтр("ru='Снять с ""%1"" пометку на удаление?'"); 
	КонецЕсли;
	ТекстВопроса = СтрШаблон(ТекстВопроса, Строка(Элементы.ФинансовыеЦели.ТекущиеДанные.ФинансоваяЦель));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Заголовок);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуЦелиЗавершение(Ответ, ИДСтроки) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицы = ФинансовыеЦели.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаТаблицы = Неопределено Или Не ЗначениеЗаполнено(СтрокаТаблицы.ФинансоваяЦель) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПометкуЦелиСервер(СтрокаТаблицы.ФинансоваяЦель);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуЦелиСервер(ФинансоваяЦель)

	ЦельОбъект = ФинансоваяЦель.ПолучитьОбъект();
	ЦельОбъект.УстановитьПометкуУдаления(НЕ ЦельОбъект.ПометкаУдаления);
	
	ОбновитьСписокЦелей();
	ОбновитьНакопленияПоКошелькам();

КонецПроцедуры
 


////////////////////////////////////////////////////////////////////////////////
// Заполнение таблицы НакопленияПоКошелькам

&НаКлиенте
Процедура ОбновитьДанныеПоОбработкеОповещения()

	Если ВводДоступен() Тогда
		
		ОбновитьСписокЦелей();
		ОбновитьНакопленияПоКошелькам();
		Заголовок = НСтр("ru = 'Накопления'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		
	Иначе
		
		Заголовок = НСтр("ru = 'Накопления (обновляется...)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ПодключитьОбработчикОжидания("ОбновитьДанныеПоОбработкеОповещения", 1, Истина);
		
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ОбновитьНакопленияПоКошелькам()

	РезультатЗапроса = ПолучитьНакопленияПоКошелькам();
	
	КатегорияСвободныеДеньги = Перечисления.КатегорииИсточниковФинансирования.СвободныеДеньги;
	
	ВыборкаИтогов = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если НЕ ВыборкаИтогов.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоговПоКошелькам = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОБЩИЕ");
	Если НЕ ВыборкаИтоговПоКошелькам.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьИУдалитьКолонкиКошельков(ВыборкаИтоговПоКошелькам);
	
	// Заполним таблицу НакопленияПоКошелькам
	НакопленияПоКошелькам.Очистить();
	
	ВыборкаПоКатегориям = ВыборкаИтоговПоКошелькам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Категория");
	Пока ВыборкаПоКатегориям.Следующий() Цикл
		
		Если ВыборкаПоКатегориям.Категория = КатегорияСвободныеДеньги Тогда
			
			НоваяСтрока = НакопленияПоКошелькам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоКатегориям);
			НоваяСтрока.НакопленияВКошельках = ВыборкаПоКатегориям.ОстатокНакопленийВВалютеКошелька;
			
			// Заполним колонки кошельков
			ВыборкаПоФинансовымЦелям = ВыборкаПоКатегориям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФинансоваяЦель");
			Пока ВыборкаПоФинансовымЦелям.Следующий() Цикл
				ВыборкаПоКошелькам = ВыборкаПоФинансовымЦелям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кошелек");
				Пока ВыборкаПоКошелькам.Следующий() Цикл
					
					ИДКошелька = СписокИДКошельков.НайтиПоЗначению(ВыборкаПоКошелькам.Кошелек).ПолучитьИдентификатор();
					
					НоваяСтрока["Кошелек_" + ИДКошелька + "_Накопления"]     = ВыборкаПоКошелькам.ОстатокНакопленийВВалютеЦели;
					НоваяСтрока["Кошелек_" + ИДКошелька + "_НакопленияВВалютеКошелька"] = ВыборкаПоКошелькам.ОстатокНакопленийВВалютеКошелька;
					
				КонецЦикла;
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ВыборкаПоКатегориям1 = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Категория");
		Если НЕ ВыборкаПоКатегориям1.НайтиСледующий(Новый Структура("Категория", ВыборкаПоКатегориям.Категория)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоФинансовымЦелям1 = ВыборкаПоКатегориям1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФинансоваяЦель,Валюта");
		Пока ВыборкаПоФинансовымЦелям1.Следующий() Цикл
			
			НоваяСтрока = НакопленияПоКошелькам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоФинансовымЦелям1);
			НоваяСтрока.ПредставлениеФинансоваяЦель = Формат(НоваяСтрока.Приоритет, "ЧДЦ=; ЧГ=") + ". " + НоваяСтрока.ФинансоваяЦель;
			Если ВыборкаПоФинансовымЦелям1.Предопределенный Тогда
				НоваяСтрока.ПредставлениеСуммы = "  " + НСтр("ru='Сумма для распределения по финансовым целям'");
			Иначе
				
				Если ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
					НоваяСтрока.ПредставлениеСуммы = Формат(НоваяСтрока.Сумма, "ЧДЦ=; ЧН=0") + " " + НоваяСтрока.Валюта;
				Иначе
					НоваяСтрока.ПредставлениеСуммы = НСтр("ru='<без суммы>'");
				КонецЕсли;
				Если ЗначениеЗаполнено(НоваяСтрока.Срок) Тогда
					ПредставлениеСрока = НСтр("ru='к %1'");
					ПредставлениеСрока = " " + СтрШаблон(ПредставлениеСрока, Формат(НоваяСтрока.Срок, "Л=ru_RU; ДФ=dd.MM.yyyy"));
				Иначе
					ПредставлениеСрока = ", " + НСтр("ru='<без срока>'");
				КонецЕсли;
				НоваяСтрока.ПредставлениеСуммы = "  " + НоваяСтрока.ПредставлениеСуммы + ПредставлениеСрока;
				
			КонецЕсли;
			
			// Заполним колонки кошельков
			ВыборкаПоФинансовымЦелям = ВыборкаПоКатегориям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФинансоваяЦель");
			Если ВыборкаПоФинансовымЦелям.НайтиСледующий(Новый Структура("ФинансоваяЦель", ВыборкаПоФинансовымЦелям1.ФинансоваяЦель)) Тогда
				ВыборкаПоКошелькам = ВыборкаПоФинансовымЦелям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кошелек");
				Пока ВыборкаПоКошелькам.Следующий() Цикл
					
					ИДКошелька = СписокИДКошельков.НайтиПоЗначению(ВыборкаПоКошелькам.Кошелек).ПолучитьИдентификатор();
					
					НоваяСтрока["Кошелек_" + ИДКошелька + "_Накопления"]     = ВыборкаПоКошелькам.ОстатокНакопленийВВалютеЦели;
					
					ВыборкаПоВалютамКошельков = ВыборкаПоКошелькам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВалютаКошелька");
					Пока ВыборкаПоВалютамКошельков.Следующий() Цикл
						НоваяСтрока["Кошелек_" + ИДКошелька + "_НакопленияВВалютеКошелька"] = ВыборкаПоВалютамКошельков.ОстатокНакопленийВВалютеКошелька;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним параметры кошельков во всех строках
	ВыборкаПоКошелькам = ВыборкаИтоговПоКошелькам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кошелек");
	Пока ВыборкаПоКошелькам.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаПоКошелькам.Кошелек) Тогда
			Продолжить;
		КонецЕсли;
		
		ИДКошелька = СписокИДКошельков.НайтиПоЗначению(ВыборкаПоКошелькам.Кошелек).ПолучитьИдентификатор();
		
		ВыборкаПоВалютамКошельков = ВыборкаПоКошелькам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВалютаКошелька");
		Пока ВыборкаПоВалютамКошельков.Следующий() Цикл
			
			ЭлементВалютаКошелька = Элементы["НакопленияПоКошелькамНакопленияВКошельке_" + ИДКошелька + "_ВалютаКошелька"];
			ЭлементВалютаКошелька.Заголовок = СтрЗаменить(ЭлементВалютаКошелька.Заголовок, "<ВалютаКошелька>", ?(ЗначениеЗаполнено(ВыборкаПоВалютамКошельков.ВалютаКошелька), ВыборкаПоВалютамКошельков.ВалютаКошелька, "<Пустая валюта>"));
			
			Для каждого Строка Из НакопленияПоКошелькам Цикл
				Строка["Кошелек_" + ИДКошелька + "_ЭтоГруппа"]      = ВыборкаПоВалютамКошельков.КошелекЭтоГруппа;
				Строка["Кошелек_" + ИДКошелька + "_ВалютаКошелька"] = ВыборкаПоВалютамКошельков.ВалютаКошелька;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним итоги в подвале
	ВысотаПодвала = 0;
	
	СуммаЦелейТекстПодвала = "";
	НакопленоТекстПодвала  = "";
	ПотраченоТекстПодвала  = "";
	НакопленияВКошелькахТекстПодвала = "";
	ОсталосьНакопитьТекстПодвала     = "";
	
	ВыборкаПоВалютамЦелей = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта", "Все");
	Пока ВыборкаПоВалютамЦелей.Следующий() Цикл
		
		ВысотаПодвала = ВысотаПодвала + 1;
		
		СуммаЦелейТекстПодвала = СуммаЦелейТекстПодвала + СуммаИВалютаСтрокой(ВыборкаПоВалютамЦелей.Сумма,     Строка(ВыборкаПоВалютамЦелей.Валюта)) + Символы.ПС;
		НакопленоТекстПодвала  = НакопленоТекстПодвала  + СуммаИВалютаСтрокой(ВыборкаПоВалютамЦелей.Накоплено, Строка(ВыборкаПоВалютамЦелей.Валюта)) + Символы.ПС;
		ПотраченоТекстПодвала  = ПотраченоТекстПодвала  + СуммаИВалютаСтрокой(ВыборкаПоВалютамЦелей.Потрачено, Строка(ВыборкаПоВалютамЦелей.Валюта)) + Символы.ПС;
		НакопленияВКошелькахТекстПодвала = НакопленияВКошелькахТекстПодвала + СуммаИВалютаСтрокой(ВыборкаПоВалютамЦелей.НакопленияВКошельках, Строка(ВыборкаПоВалютамЦелей.Валюта)) + Символы.ПС;
		ОсталосьНакопитьТекстПодвала     = ОсталосьНакопитьТекстПодвала     + СуммаИВалютаСтрокой(ВыборкаПоВалютамЦелей.ОсталосьНакопить,     Строка(ВыборкаПоВалютамЦелей.Валюта)) + Символы.ПС;
		
	КонецЦикла;
	
	Элементы.НакопленияПоКошелькам.ВысотаПодвала = Мин(ВысотаПодвала, 3);
	
	Элементы.НакопленияПоКошелькамНакоплено.ТекстПодвала = СокрЛП(НакопленоТекстПодвала);
	Элементы.НакопленияПоКошелькамПотрачено.ТекстПодвала = СокрЛП(ПотраченоТекстПодвала);
	Элементы.НакопленияПоКошелькамНакопленияВКошельках.ТекстПодвала = СокрЛП(НакопленияВКошелькахТекстПодвала);
	Элементы.НакопленияПоКошелькамОсталосьНакопить.ТекстПодвала     = СокрЛП(ОсталосьНакопитьТекстПодвала);
	
	// Итоги по кошелькам
	ВыборкаПоКошелькам = ВыборкаИтоговПоКошелькам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кошелек");
	Пока ВыборкаПоКошелькам.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаПоКошелькам.Кошелек) Тогда
			Продолжить;
		КонецЕсли;
		
		ИДКошелька = СписокИДКошельков.НайтиПоЗначению(ВыборкаПоКошелькам.Кошелек).ПолучитьИдентификатор();
		
		НакопленияВКошелькеТекстПодвала = "";
		НакопленияВКошелькеВВалютеКошелькаТекстПодвала = "";
		
		ВыборкаПоВалютамЦелей = ВыборкаПоКошелькам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВалютаЦели", "Все");
		Пока ВыборкаПоВалютамЦелей.Следующий() Цикл
			СуммаИВалютаСтрокой = СуммаИВалютаСтрокой(ВыборкаПоВалютамЦелей.ОстатокНакопленийВВалютеЦели, Строка(ВыборкаПоВалютамЦелей.ВалютаЦели));
			НакопленияВКошелькеТекстПодвала = НакопленияВКошелькеТекстПодвала + СуммаИВалютаСтрокой + Символы.ПС;
		КонецЦикла;
		
		ВыборкаПоВалютамКошельков = ВыборкаПоКошелькам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВалютаКошелька", "Все");
		Пока ВыборкаПоВалютамКошельков.Следующий() Цикл
			СуммаИВалютаСтрокой = СуммаИВалютаСтрокой(ВыборкаПоВалютамКошельков.ОстатокНакопленийВВалютеКошелька, Строка(ВыборкаПоВалютамКошельков.ВалютаКошелька));
			НакопленияВКошелькеВВалютеКошелькаТекстПодвала = НакопленияВКошелькеВВалютеКошелькаТекстПодвала + СуммаИВалютаСтрокой + Символы.ПС;
		КонецЦикла;
		
		Элементы["НакопленияПоКошелькамНакопленияВКошельке_" + ИДКошелька].ТекстПодвала = СокрЛП(НакопленияВКошелькеТекстПодвала);
		Элементы["НакопленияПоКошелькамНакопленияВКошельке_" + ИДКошелька + "_ВВалютеКошелька"].ТекстПодвала = НакопленияВКошелькеВВалютеКошелькаТекстПодвала;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьНакопленияПоКошелькам()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаКлиентСервер());
	Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	Запрос.УстановитьПараметр("ВидыСубконто", МассивВидыСубконтоКошелькиИЦели);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияМесяц", ЕдиницаИзмеренияМесяцСтрокой);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОперацийОстатки.ФинансоваяЦель КАК ФинансоваяЦель,
	|	ЖурналОперацийОстатки.Категория,
	|	ЖурналОперацийОстатки.ПорядокКатегории,
	|	ЖурналОперацийОстатки.Кошелек,
	|	ЖурналОперацийОстатки.Кошелек.ЭтоГруппа,
	|	СУММА(ЖурналОперацийОстатки.ОстатокНакопленийВВалютеОстатка) КАК ОстатокНакопленийВВалютеОстатка,
	|	СУММА(ЖурналОперацийОстатки.ОстатокНакопленийВВалютеКошелька) КАК ОстатокНакопленийВВалютеКошелька,
	|	СУММА(ЖурналОперацийОстатки.ОстатокНакопленийВВалютеЦели) КАК ОстатокНакопленийВВалютеЦели
	|ПОМЕСТИТЬ ОстаткиНакопленийВКошельках
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ЖурналОперацийОстатки.Субконто2 = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ОбщиеНакопления)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииИсточниковФинансирования.НакопленияБезКонкретнойЦели)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииИсточниковФинансирования.НакопленияНаКонкретныеЦели)
	|		КОНЕЦ КАК Категория,
	|		ВЫБОР
	|			КОГДА ЖурналОперацийОстатки.Субконто2 = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ОбщиеНакопления)
	|				ТОГДА 2
	|			ИНАЧЕ 3
	|		КОНЕЦ КАК ПорядокКатегории,
	|		ВЫРАЗИТЬ(ЖурналОперацийОстатки.Субконто1 КАК Справочник.КошелькиИСчета) КАК Кошелек,
	|		ВЫРАЗИТЬ(ЖурналОперацийОстатки.Субконто2 КАК Справочник.ФинансовыеЦели) КАК ФинансоваяЦель,
	|		ЖурналОперацийОстатки.ВалютнаяСуммаОстаток КАК ОстатокНакопленийВВалютеОстатка,
	|		ЖурналОперацийОстатки.ВалютнаяСуммаОстаток * (ЕСТЬNULL(КурсыОстатков.Курс, 0) * ЕСТЬNULL(КурсКошелька.Кратность, 0)) / (ЕСТЬNULL(КурсКошелька.Курс, 1) * ЕСТЬNULL(КурсыОстатков.Кратность, 1)) КАК ОстатокНакопленийВВалютеКошелька,
	|		ЖурналОперацийОстатки.ВалютнаяСуммаОстаток * (ЕСТЬNULL(КурсыОстатков.Курс, 0) * ЕСТЬNULL(КурсЦели.Кратность, 0)) / (ЕСТЬNULL(КурсЦели.Курс, 1) * ЕСТЬNULL(КурсыОстатков.Кратность, 1)) КАК ОстатокНакопленийВВалютеЦели
	|	ИЗ
	|		РегистрБухгалтерии.ЖурналОпераций.Остатки(, Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления), &ВидыСубконто, ) КАК ЖурналОперацийОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаУчета) КАК КурсыОстатков
	|			ПО ЖурналОперацийОстатки.Валюта = КурсыОстатков.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаУчета) КАК КурсКошелька
	|			ПО (ВЫРАЗИТЬ(ЖурналОперацийОстатки.Субконто1 КАК Справочник.КошелькиИСчета).Валюта = КурсКошелька.Валюта)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаУчета) КАК КурсЦели
	|			ПО (ВЫРАЗИТЬ(ЖурналОперацийОстатки.Субконто2 КАК Справочник.ФинансовыеЦели).Валюта = КурсЦели.Валюта)
	|	
	|			) КАК ЖурналОперацийОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОперацийОстатки.Категория,
	|	ЖурналОперацийОстатки.Кошелек,
	|	ЖурналОперацийОстатки.Кошелек.ЭтоГруппа,
	|	ЖурналОперацийОстатки.ФинансоваяЦель,
	|	ЖурналОперацийОстатки.ПорядокКатегории
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансоваяЦель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.ФинансоваяЦель КАК ФинансоваяЦель,
	|	СУММА(Обороты.ПотраченоВВалютеЦели) КАК ПотраченоВВалютеЦели
	|ПОМЕСТИТЬ ПотраченоОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИспользованиеОбороты.ФинансоваяЦель КАК ФинансоваяЦель,
	|		ИспользованиеОбороты.ИспользованоНакопленийОборот + ИспользованиеОбороты.ИспользованоСвободныхСредствОборот КАК ПотраченоВВалютеОстатка,
	|		(ИспользованиеОбороты.ИспользованоНакопленийОборот + ИспользованиеОбороты.ИспользованоСвободныхСредствОборот) * (ЕСТЬNULL(КурсыОстатков.Курс, 0) * ЕСТЬNULL(КурсЦели.Кратность, 0)) / (ЕСТЬNULL(КурсЦели.Курс, 1) * ЕСТЬNULL(КурсыОстатков.Кратность, 1)) КАК ПотраченоВВалютеЦели
	|	ИЗ
	|		РегистрНакопления.ИспользованиеСуммФинансовыхЦелей.Обороты(
	|				,
	|				,
	|				,
	|				ФинансоваяЦель.Активность
	|					ИЛИ ФинансоваяЦель В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ОстаткиНакопленийВКошельках.ФинансоваяЦель
	|						ИЗ
	|							ОстаткиНакопленийВКошельках)) КАК ИспользованиеОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаУчета) КАК КурсыОстатков
	|			ПО ИспользованиеОбороты.Валюта = КурсыОстатков.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, БазоваяВалюта = &ВалютаУчета) КАК КурсЦели
	|			ПО ИспользованиеОбороты.ФинансоваяЦель.Валюта = КурсЦели.Валюта) КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.ФинансоваяЦель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансоваяЦель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Ссылка = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ОбщиеНакопления)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииИсточниковФинансирования.НакопленияБезКонкретнойЦели)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииИсточниковФинансирования.НакопленияНаКонкретныеЦели)
	|	КОНЕЦ КАК Категория,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Ссылка = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ОбщиеНакопления)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокКатегории,
	|	ЕСТЬNULL(ОстаткиНакопленийВКошельках.Кошелек, ЗНАЧЕНИЕ(Справочник.КошелькиИСчета.ПустаяСсылка)) КАК Кошелек,
	|	ОстаткиНакопленийВКошельках.КошелекЭтоГруппа,
	|	ОстаткиНакопленийВКошельках.Кошелек.Валюта КАК ВалютаКошелька,
	|	ЕСТЬNULL(ОстаткиНакопленийВКошельках.ФинансоваяЦель, ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)) КАК ФинансоваяЦель,
	|	ОстаткиНакопленийВКошельках.ФинансоваяЦель.Валюта КАК ВалютаЦели,
	|	ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеКошелька КАК ОстатокНакопленийВВалютеКошелька,
	|	ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели КАК ОстатокНакопленийВВалютеЦели
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК СправочникФинансовыеЦели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНакопленийВКошельках КАК ОстаткиНакопленийВКошельках
	|		ПО СправочникФинансовыеЦели.Ссылка = ОстаткиНакопленийВКошельках.ФинансоваяЦель
	|ГДЕ
	|	(СправочникФинансовыеЦели.Активность
	|			ИЛИ ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокКатегории,
	|	ОстаткиНакопленийВКошельках.Кошелек.Наименование,
	|	ВалютаЦели,
	|	ВалютаКошелька
	|ИТОГИ
	|	ЕСТЬNULL(СУММА(ОстатокНакопленийВВалютеКошелька), 0) КАК ОстатокНакопленийВВалютеКошелька,
	|	ЕСТЬNULL(СУММА(ОстатокНакопленийВВалютеЦели), 0) КАК ОстатокНакопленийВВалютеЦели
	|ПО
	|	ОБЩИЕ,
	|	Категория,
	|	ФинансоваяЦель,
	|	ВалютаЦели,
	|	Кошелек,
	|	ВалютаКошелька
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Ссылка = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ОбщиеНакопления)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииИсточниковФинансирования.НакопленияБезКонкретнойЦели)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииИсточниковФинансирования.НакопленияНаКонкретныеЦели)
	|	КОНЕЦ КАК Категория,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Ссылка = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ОбщиеНакопления)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ПорядокКатегории,
	|	СправочникФинансовыеЦели.Ссылка КАК ФинансоваяЦель,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Предопределенный
	|			ТОГДА 5
	|		КОГДА СправочникФинансовыеЦели.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ИндексКартинкиЭлемента,
	|	СправочникФинансовыеЦели.ВерсияДанных,
	|	СправочникФинансовыеЦели.ПометкаУдаления,
	|	СправочникФинансовыеЦели.Предопределенный КАК Предопределенный,
	|	СправочникФинансовыеЦели.РеквизитДопУпорядочивания КАК Приоритет,
	|	СправочникФинансовыеЦели.Наименование КАК Наименование,
	|	СправочникФинансовыеЦели.Представление,
	|	СправочникФинансовыеЦели.Активность,
	|	СправочникФинансовыеЦели.Комментарий,
	|	СправочникФинансовыеЦели.Сумма КАК Сумма,
	|	СправочникФинансовыеЦели.Валюта КАК Валюта,
	|	СправочникФинансовыеЦели.Срок КАК Срок,
	|	СправочникФинансовыеЦели.ШаблонНакопления,
	|	ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) + ЕСТЬNULL(ПотраченоОбороты.ПотраченоВВалютеЦели, 0) КАК Накоплено,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Сумма <> 0
	|			ТОГДА (ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) + ЕСТЬNULL(ПотраченоОбороты.ПотраченоВВалютеЦели, 0)) / СправочникФинансовыеЦели.Сумма * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НакопленоВПроцентах,
	|	ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) КАК НакопленияВКошельках,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Сумма <> 0
	|			ТОГДА ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) / СправочникФинансовыеЦели.Сумма * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НакопленияВКошелькахВПроцентах,
	|	ЕСТЬNULL(ПотраченоОбороты.ПотраченоВВалютеЦели, 0) КАК Потрачено,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Сумма <> 0
	|			ТОГДА ЕСТЬNULL(ПотраченоОбороты.ПотраченоВВалютеЦели, 0) / СправочникФинансовыеЦели.Сумма * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПотраченоВПроцентах,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Сумма <> 0
	|			ТОГДА СправочникФинансовыеЦели.Сумма - (ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) + ЕСТЬNULL(ПотраченоОбороты.ПотраченоВВалютеЦели, 0))
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОсталосьНакопить,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Сумма <> 0
	|			ТОГДА (СправочникФинансовыеЦели.Сумма - (ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) + ЕСТЬNULL(ПотраченоОбороты.ПотраченоВВалютеЦели, 0))) / СправочникФинансовыеЦели.Сумма * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОсталосьНакопитьВПроцентах,
	|	ВЫБОР
	|		КОГДА СправочникФинансовыеЦели.Срок <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РАЗНОСТЬДАТ(&ТекущаяДата, СправочникФинансовыеЦели.Срок, МЕСЯЦ)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОсталосьМесяцев,
	|	&ЕдиницаИзмеренияМесяц КАК ЕдиницаИзмеренияМесяц,
	|	""%"" КАК СимволПроцента
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК СправочникФинансовыеЦели
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОстаткиНакопленийВКошельках.ФинансоваяЦель КАК ФинансоваяЦель,
	|			СУММА(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели) КАК ОстатокНакопленийВВалютеЦели
	|		ИЗ
	|			ОстаткиНакопленийВКошельках КАК ОстаткиНакопленийВКошельках
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ОстаткиНакопленийВКошельках.ФинансоваяЦель) КАК ОстаткиНакопленийВКошельках
	|		ПО СправочникФинансовыеЦели.Ссылка = ОстаткиНакопленийВКошельках.ФинансоваяЦель
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПотраченоОбороты КАК ПотраченоОбороты
	|		ПО СправочникФинансовыеЦели.Ссылка = ПотраченоОбороты.ФинансоваяЦель
	|ГДЕ
	|	(СправочникФинансовыеЦели.Активность
	|			ИЛИ ЕСТЬNULL(ОстаткиНакопленийВКошельках.ОстатокНакопленийВВалютеЦели, 0) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокКатегории,
	|	Предопределенный УБЫВ,
	|	Приоритет,
	|	Срок,
	|	Наименование,
	|	Валюта
	|ИТОГИ
	|	ЕСТЬNULL(ИндексКартинкиЭлемента, -1) КАК ИндексКартинкиЭлемента,
	|	ЕСТЬNULL(СУММА(Сумма), 0) КАК Сумма,
	|	ЕСТЬNULL(СУММА(Накоплено), 0) КАК Накоплено,
	|	ВЫБОР
	|		КОГДА СУММА(Сумма) <> 0
	|			ТОГДА ЕСТЬNULL(СУММА(Накоплено), 0) / СУММА(Сумма) * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НакопленоВПроцентах,
	|	ЕСТЬNULL(СУММА(НакопленияВКошельках), 0) КАК НакопленияВКошельках,
	|	ВЫБОР
	|		КОГДА СУММА(Сумма) <> 0
	|			ТОГДА ЕСТЬNULL(СУММА(НакопленияВКошельках), 0) / СУММА(Сумма) * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НакопленияВКошелькахВПроцентах,
	|	ЕСТЬNULL(СУММА(Потрачено), 0) КАК Потрачено,
	|	ВЫБОР
	|		КОГДА СУММА(Сумма) <> 0
	|			ТОГДА ЕСТЬNULL(СУММА(Потрачено), 0) / СУММА(Сумма) * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПотраченоВПроцентах,
	|	ЕСТЬNULL(СУММА(ОсталосьНакопить), 0) КАК ОсталосьНакопить,
	|	ВЫБОР
	|		КОГДА СУММА(Сумма) <> 0
	|			ТОГДА ЕСТЬNULL(СУММА(ОсталосьНакопить), 0) / СУММА(Сумма) * 100
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОсталосьНакопитьВПроцентах,
	|	ЕСТЬNULL(СУММА(ОсталосьМесяцев), 0) КАК ОсталосьМесяцев,
	|	&ЕдиницаИзмеренияМесяц КАК ЕдиницаИзмеренияМесяц,
	|	""%"" КАК СимволПроцента
	|ПО
	|	ОБЩИЕ,
	|	Категория,
	|	ФинансоваяЦель,
	|	Валюта";
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	// Удалим временные таблицы
	МассивРезультатовЗапроса.Удалить(0);
	МассивРезультатовЗапроса.Удалить(0);
	
	Возврат МассивРезультатовЗапроса;

КонецФункции

&НаСервере
// Добавляет, удаляет реквизиты и элементы формы для кошельков
//
Процедура ДобавитьИУдалитьКолонкиКошельков(ВыборкаИтогов)
	
	ОбрезатьНаименованияКошельков = Ложь;
	
	ЭлементыИДКошельковДляДобавления = Новый Массив;
	ЭлементыИДКошельковДляУдаления = Новый Массив;
	
	ДобавляемыеРеквизитыФормы = Новый Массив;
	УдаляемыеРеквизитыФормы   = Новый Массив;
	
	МассивШаблоновРеквизитовФормыДляКолонокКошельков = ПолучитьРеквизитыПоПолномуПути("НакопленияПоКошелькам.Кошелек_ИД_", Ложь);
	
	// Проверим изменения в составе кошельков
	СписокИДКошельков.ЗаполнитьПометки(Ложь);
	
	ВыборкаПоКошелькам = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Кошелек");
	Пока ВыборкаПоКошелькам.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаПоКошелькам.Кошелек) Тогда
			Продолжить;
		КонецЕсли;
		ЭлементИДКошельков = СписокИДКошельков.НайтиПоЗначению(ВыборкаПоКошелькам.Кошелек);
		Если ЭлементИДКошельков = Неопределено Тогда
			ЭлементИДКошельков = СписокИДКошельков.Добавить(ВыборкаПоКошелькам.Кошелек, ?(ЗначениеЗаполнено(ВыборкаПоКошелькам.Кошелек), ВыборкаПоКошелькам.Кошелек.ПолноеНаименование(), ""));
			ЭлементыИДКошельковДляДобавления.Добавить(ЭлементИДКошельков);
		КонецЕсли;
		ЭлементИДКошельков.Пометка = Истина;
	КонецЦикла;
	
	Для каждого ЭлементИДКошельков Из СписокИДКошельков Цикл
		Если НЕ ЭлементИДКошельков.Пометка Тогда
			ЭлементыИДКошельковДляУдаления.Добавить(ЭлементИДКошельков);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим колонки таблицы значений для новых кошельков
	Для каждого ЭлементИДКошельков Из ЭлементыИДКошельковДляДобавления Цикл
		ИДКошелька = ЭлементИДКошельков.ПолучитьИдентификатор();
		Для каждого Шаблон Из МассивШаблоновРеквизитовФормыДляКолонокКошельков Цикл
			НовыйРеквизит = Новый РеквизитФормы(
									СтрЗаменить(Шаблон.Имя, "ИД", ИДКошелька), 
									Шаблон.ТипЗначения, 
									Шаблон.Путь, 
									СтрЗаменить(Шаблон.Заголовок, "<Кошелек>", ВыборкаПоКошелькам.Кошелек), 
									Шаблон.СохраняемыеДанные);
			ДобавляемыеРеквизитыФормы.Добавить(НовыйРеквизит);
		КонецЦикла;
	КонецЦикла;
	
	// Удалим не нужные более колонки таблицы значений для кошельков
	Для каждого ЭлементИДКошельков Из ЭлементыИДКошельковДляУдаления Цикл
		ИДКошелька = ЭлементИДКошельков.ПолучитьИдентификатор();
		Для каждого Шаблон Из МассивШаблоновРеквизитовФормыДляКолонокКошельков Цикл
			УдаляемыеРеквизитыФормы.Добавить(Шаблон.Путь + "." + СтрЗаменить(Шаблон.Имя, "ИД", ИДКошелька));
		КонецЦикла;
	КонецЦикла;
	
	// Обновим реквизиты формы
	ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы, УдаляемыеРеквизитыФормы);
	
	// Добавим новые элементы формы
	Шаблон = Элементы.НакопленияПоКошелькамГруппаНакопленияВКошельке_Кошелек;
	Шаблон.Видимость = Истина;
	ШаблоныОформленияДляКошелька = НайтиЭлементыУсловногоОформленияПоПредставлению("ОформлениеДляКошелька_Кошелек");
	ШаблоныОформленияДляКошелькаВВалютеКошелька = НайтиЭлементыУсловногоОформленияПоПредставлению("ОформлениеДляКошелька_Кошелек_ВВалютеКошелька");
	Для каждого ЭлементИДКошельков Из ЭлементыИДКошельковДляДобавления Цикл
		
		ИДКошелька = ЭлементИДКошельков.ПолучитьИдентификатор();
		
		ДобавитьЭлементФормыДляКошелькаПоШаблону(Элементы.НакопленияПоКошелькамГруппаНакопленияВКошельке_Кошелек, ЭлементИДКошельков);
		
		// Подрежем заголовки
		Если ОбрезатьНаименованияКошельков Тогда
			ОграничитьДлиннуюСтрокуМноготочием(Элементы["НакопленияПоКошелькамНакопленияВКошельке_" + ИДКошелька].Заголовок);
			ОграничитьДлиннуюСтрокуМноготочием(Элементы["НакопленияПоКошелькамНакопленияВКошельке_" + ИДКошелька + "_ВВалютеКошелька"].Заголовок);
		КонецЕсли;
		
		// Добавим условное оформление 
		ДобавитьЭлементыУсловногоОформленияДляКошелькаПоШаблонам(ШаблоныОформленияДляКошелька, ИДКошелька);
		ДобавитьЭлементыУсловногоОформленияДляКошелькаПоШаблонам(ШаблоныОформленияДляКошелькаВВалютеКошелька, ИДКошелька);
		
	КонецЦикла;
	Шаблон.Видимость = Ложь;
	
	// Удалим не нужные более элементы формы
	Для каждого ЭлементИДКошельков Из ЭлементыИДКошельковДляУдаления Цикл
		ИДКошелька = ЭлементИДКошельков.ПолучитьИдентификатор();
		Элементы.Удалить(Элементы["НакопленияПоКошелькамГруппаНакопленияВКошельке_" + ИДКошелька]);
		Для каждого Элемент Из НайтиЭлементыУсловногоОформленияПоПредставлению("ОформлениеДляКошелька_" + ИДКошелька) Цикл
			УсловноеОформление.Элементы.Удалить(Элемент);
		КонецЦикла;
		Для каждого Элемент Из НайтиЭлементыУсловногоОформленияПоПредставлению("ОформлениеДляКошелька_" + ИДКошелька + "_ВВалютеКошелька") Цикл
			УсловноеОформление.Элементы.Удалить(Элемент);
		КонецЦикла;
	КонецЦикла;
	
	// Удалим не нужные более элементы из СписокИДКошельков
	Для каждого ЭлементИДКошельков Из ЭлементыИДКошельковДляУдаления Цикл
		СписокИДКошельков.Удалить(ЭлементИДКошельков);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементФормыДляКошелькаПоШаблону(Шаблон, ЭлементИДКошельков, Родитель = Неопределено)

	ИДКошелька = ЭлементИДКошельков.ПолучитьИдентификатор();
	
	Если Родитель = Неопределено Тогда
		Родитель = Шаблон.Родитель;
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(Шаблон);
	НовыйЭлемент = Элементы.Добавить(СтрЗаменить(Шаблон.Имя, "_Кошелек", "_" + ИДКошелька), ТипЭлемента, Родитель);
	
	НовыйЭлемент.Заголовок = СтрЗаменить(Шаблон.Заголовок, "<Кошелек>", ?(ЗначениеЗаполнено(ЭлементИДКошельков.Значение), ЭлементИДКошельков.Значение, "<Пустой кошелек>"));
	НовыйЭлемент.Подсказка = СтрЗаменить(Шаблон.Подсказка, "<Кошелек>", ?(ЗначениеЗаполнено(ЭлементИДКошельков.Значение), ЭлементИДКошельков.Значение, "<Пустой кошелек>"));
	
	Если ТипЭлемента = Тип("ГруппаФормы") Тогда
		
		НовыйЭлемент.Вид = Шаблон.Вид;
		
		ИсключаемыеРеквизиты = "Вид,Имя,Заголовок,Подсказка,Родитель,ПодчиненныеЭлементы,СочетаниеКлавиш";
		Если Шаблон.Вид = ВидГруппыФормы.ОбычнаяГруппа Тогда
			ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + ",Формат";
		ИначеЕсли Шаблон.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + ",ПутьКДаннымШапки";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Шаблон, , ИсключаемыеРеквизиты);
		
		Для каждого ПодчиненныйЭлемент Из Шаблон.ПодчиненныеЭлементы Цикл
			ДобавитьЭлементФормыДляКошелькаПоШаблону(ПодчиненныйЭлемент, ЭлементИДКошельков, НовыйЭлемент);
		КонецЦикла;
		
	ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда
		
		НовыйЭлемент.Вид = Шаблон.Вид;
		НовыйЭлемент.ПутьКДанным = СтрЗаменить(Шаблон.ПутьКДанным, "ИД", ИДКошелька);
		
		ИсключаемыеРеквизиты = "Вид,Имя,Заголовок,Подсказка,ПутьКДанным,Родитель,СочетаниеКлавиш,КонтекстноеМеню";
		Если Шаблон.Вид = ВидПоляФормы.ПолеВвода Тогда
			ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + ",СписокВыбора,ТекстРедактирования,ВыделенныйТекст,СвязьПоТипу";
		ИначеЕсли Шаблон.Вид = ВидПоляФормы.ПолеПереключателя Тогда
			ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + ",СписокВыбора";
		ИначеЕсли Шаблон.Вид = ВидПоляФормы.ПолеКалендаря Тогда
			ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + ",ВыделенныеДаты,РазрешитьПеретаскивание";
		ИначеЕсли Шаблон.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
			ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + ",ОтображатьГруппировки,ОтображениеСостояния,РазрешитьПеретаскивание";
		ИначеЕсли Шаблон.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
			ИсключаемыеРеквизиты = ИсключаемыеРеквизиты + ",Документ,ИнформацияПрограммыПросмотра";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Шаблон, , ИсключаемыеРеквизиты);
		
	Иначе
		ВызватьИсключение "Неизвестный тип элемента формы: " + ТипЭлемента;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыУсловногоОформленияДляКошелькаПоШаблонам(ШаблоныОформления, ИДКошелька)
	
	Если ШаблоныОформления.Количество() = 0 Тогда
		ВызватьИсключение "Не найдены шаблоны условного оформления"
	КонецЕсли;
	
	Для каждого ШаблонОформления Из ШаблоныОформления Цикл
		
		Если НЕ ШаблонОформления.Использование Тогда
			Возврат;
		КонецЕсли;
		
		НовыйЭлементУО = УсловноеОформление.Элементы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлементУО, ШаблонОформления);
		НовыйЭлементУО.Представление = СтрЗаменить(НовыйЭлементУО.Представление, "_Кошелек", "_" + ИДКошелька);
		
		ДобавитьЭлементОтбораДляКошелькаПоШаблону(НовыйЭлементУО.Отбор.Элементы, ШаблонОформления.Отбор.Элементы, ИДКошелька);
		
		Для каждого Элемент Из ШаблонОформления.Оформление.Элементы Цикл
			Если Элемент.Использование Тогда
				НовыйЭлемент = НовыйЭлементУО.Оформление.ПолучитьОбъектПоИдентификатору(ШаблонОформления.Оформление.ПолучитьИдентификаторПоОбъекту(Элемент));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Элемент Из ШаблонОформления.Поля.Элементы Цикл
			Если Элемент.Использование Тогда
				НовыйЭлемент = НовыйЭлементУО.Поля.Элементы.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				Если Найти(НовыйЭлемент.Поле, "_Кошелек") <> 0 Тогда
					НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(НовыйЭлемент.Поле, "_Кошелек", "_" + ИДКошелька));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементОтбораДляКошелькаПоШаблону(КоллекцияЭлементовОтбораПриемника, КоллекцияЭлементовОтбораИсточника, ИДКошелька)

	Для каждого Элемент Из КоллекцияЭлементовОтбораИсточника Цикл
		Если Элемент.Использование Тогда
			
			НовыйЭлемент = КоллекцияЭлементовОтбораПриемника.Добавить(ТипЗнч(Элемент));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			
			Если ТипЗнч(НовыйЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Найти(НовыйЭлемент.ЛевоеЗначение, "_ИД_") <> 0 Тогда
				НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(НовыйЭлемент.ЛевоеЗначение, "_ИД_", "_" + ИДКошелька + "_"));
			КонецЕсли;
			
			Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ДобавитьЭлементОтбораДляКошелькаПоШаблону(НовыйЭлемент.Элементы, Элемент.Элементы, ИДКошелька);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НайтиЭлементыУсловногоОформленияПоПредставлению(Представление)
	
	Массив = Новый Массив;
	
	Для каждого Элемент Из УсловноеОформление.Элементы Цикл
		Если Элемент.Представление = Представление Тогда
			Массив.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Выделяет ИД кошелька из имени колонки
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИДКошелькаПоИмениКолонки(ИмяКолонки)

	ИДКошелька = Неопределено;
	Если Лев(ИмяКолонки, 41) = "НакопленияПоКошелькамНакопленияВКошельке_" Тогда
		ИДКошелька = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяКолонки, "_")[1];
	КонецЕсли;
	
	Возврат ИДКошелька;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

&НаСервереБезКонтекста
Функция КоличествоМесяцевПланированияПоФинансовымЦелям()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДатаКлиентСервер()));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Подзапрос.Срок) КАК Срок
	|ПОМЕСТИТЬ МаксПериод
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ФинансовыеЦели.Срок) КАК Срок
	|	ИЗ
	|		Справочник.ФинансовыеЦели КАК ФинансовыеЦели
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПределПланирования.Значение
	|	ИЗ
	|		Константа.ПределПланирования КАК ПределПланирования) КАК Подзапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&ТекущаяДата, МаксПериод.Срок, МЕСЯЦ) КАК Результат
	|ИЗ
	|	МаксПериод КАК МаксПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.Результат), Выборка.Результат, 0);
	КонецЕсли;
	
	Возврат 0;

КонецФункции

&НаСервереБезКонтекста
Функция МесяцевОтТекущейДаты(Дата2)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", КонецДня(ТекущаяДатаКлиентСервер()));
	Запрос.УстановитьПараметр("Дата2", Дата2);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗНОСТЬДАТ(&ТекущаяДата, &Дата2, МЕСЯЦ) КАК Результат
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.Результат), Выборка.Результат, 0);
	КонецЕсли;
	
	Возврат 0;

КонецФункции

&НаКлиенте
Процедура ПоказатьПодсказкуФормы()

	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма.ФормаНакопленияТакси", , ЭтаФорма);

КонецПроцедуры
 
// Возвращает массив реквизитов формы по маске полного пути
//
// Параметры
//  ПолныйПуть         - Строка - <описание параметра>
//                     <продолжение описания параметра>
//  ТочноеСоответствие - Булево - Ложь - поиск по соответствию левой части полного пути
//                     Истина - поиск по точному соответствию
//
&НаСервере
Функция ПолучитьРеквизитыПоПолномуПути(Знач ПолныйПуть, ТочноеСоответствие = Истина)

	Массив = Новый Массив;
	
	ПолныйПуть = СтрЗаменить(ПолныйПуть, ".", Символы.ПС);
	КоличествоЭлементовПути = СтрЧислоСтрок(ПолныйПуть);
	
	ЧастьПутиДоТочки = "";
	Для Инд = 1 По КоличествоЭлементовПути Цикл
		
		Если Инд = КоличествоЭлементовПути Тогда
			
			Маска = ВРег(СтрПолучитьСтроку(ПолныйПуть, Инд));
			ДлинаМаски = СтрДлина(Маска);
			
			ВсеРеквизиты = ПолучитьРеквизиты(СтрЗаменить(СокрЛП(ЧастьПутиДоТочки), Символы.ПС, "."));
			
			Для каждого Реквизит Из ВсеРеквизиты Цикл
				Если ТочноеСоответствие И ВРег(Реквизит.Имя) = Маска ИЛИ Лев(ВРег(Реквизит.Имя), ДлинаМаски) = Маска Тогда
					Массив.Добавить(Реквизит);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ЧастьПутиДоТочки = ЧастьПутиДоТочки + СтрПолучитьСтроку(ПолныйПуть, Инд) + Символы.ПС;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Массив;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыНовогоДокумента(ВидДокумента, ПараметрыФормы, Отказ = Ложь)
	
	ТекущиеДанные = Элементы.НакопленияПоКошелькам.ТекущиеДанные;
	ИмяТекущейКолонки = Элементы.НакопленияПоКошелькам.ТекущийЭлемент.Имя;

	// Общие параметры для вызова формы выбора шаблонов:
	ПараметрыФормы.Вставить("ИмяВидаДокумента", ВидДокумента);
	
	ВыбранныйРаздел = ПредопределенноеЗначение("ПланСчетов.РазделыУчета.Накопления");
	ВыбраннаяЦель = ?(ТекущиеДанные <> Неопределено, ТекущиеДанные.ФинансоваяЦель, ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления"));
	
	ВыбранныйКошелек = Неопределено;
	ВыбранныйКошелекЭтоГруппа = Ложь;
	ИДКошелька = ПолучитьИДКошелькаПоИмениКолонки(ИмяТекущейКолонки);
	Если ИДКошелька <> Неопределено Тогда
		ВыбранныйКошелек = СписокИДКошельков.НайтиПоИдентификатору(ИДКошелька).Значение;
		ВыбранныйКошелекЭтоГруппа = ?(ТекущиеДанные <> Неопределено, НакопленияПоКошелькам.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор())["Кошелек_" + ИДКошелька + "_ЭтоГруппа"], Ложь);
	КонецЕсли;
	КошелекДляДокумента = ?(ЗначениеЗаполнено(ВыбранныйКошелек) И НЕ ВыбранныйКошелекЭтоГруппа, ВыбранныйКошелек, Неопределено);
	
	Если НЕ ЗначениеЗаполнено(КошелекДляДокумента) И ВидДокумента <> "УниверсальнаяОперация" Тогда
		
		ПустойКошелек = ПредопределенноеЗначение("Справочник.КошелькиИСчета.ПустаяСсылка");
		
		// Найдем первый кошелек с ненулевым остатком
		ПервыйНепустойКошелек = ПустойКошелек;
		Для каждого Элемент Из СписокИДКошельков Цикл
			ИДКошелька = Элемент.ПолучитьИдентификатор();
			Если ТекущиеДанные["Кошелек_" + ИДКошелька + "_Накопления"] <> 0 
				ИЛИ ТекущиеДанные["Кошелек_" + ИДКошелька + "_НакопленияВВалютеКошелька"] <> 0 Тогда
				ПервыйНепустойКошелек = Элемент.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//СписокКошельков = СписокИДКошельков.Скопировать();
		//Для каждого Элемент Из СписокКошельков Цикл
		//	Элемент.Представление = Строка(Элемент.Значение);
		//КонецЦикла;
		//СписокКошельков.Вставить(0, ПустойКошелек, НСтр("ru = '<Не выбирать, заполню в операции>'"));
		//
		//Выбор = СписокКошельков.ВыбратьЭлемент(НСтр("ru = 'Выберите кошелек'"), СписокКошельков.НайтиПоЗначению(ПервыйНепустойКошелек));
		//Если Выбор = Неопределено Тогда
		//	Отказ = Истина;
		//	Возврат;
		//КонецЕсли; 
		//КошелекДляДокумента = Выбор.Значение;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
		
	Если ВидДокумента = "Доход" Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ФинансоваяЦель", ВыбраннаяЦель);
	ИначеЕсли ВидДокумента = "Расход" 
			ИЛИ ВидДокумента = "ВводИзменениеОстатка" 
			ИЛИ ВидДокумента = "МыВернулиДолг" Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("РазделУчета", ВыбранныйРаздел);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ОбъектУчета", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ФинансоваяЦель", ВыбраннаяЦель);
	ИначеЕсли ВидДокумента = "Перемещение" ИЛИ ВидДокумента = "ОбменВалюты" Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("КошелекОткуда", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ФинансоваяЦельОткуда", ВыбраннаяЦель);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("КошелекКуда", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ФинансоваяЦельКуда", ВыбраннаяЦель);
	ИначеЕсли ВидДокумента = "МыВзялиВДолг" Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("РазделУчета", ВыбранныйРаздел);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ФинансоваяЦель", ВыбраннаяЦель);
	ИначеЕсли ВидДокумента = "МыДалиВДолг" Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ФинансоваяЦель", ВыбраннаяЦель);
	ИначеЕсли ВидДокумента = "НамВернулиДолг" Тогда
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("Кошелек", КошелекДляДокумента);
		ПараметрыФормы.ЗначенияЗаполнения.Вставить("ФинансоваяЦель", ВыбраннаяЦель);
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает строку вида "1,23 руб." или пустую строку при пустой сумме
&НаКлиентеНаСервереБезКонтекста
Функция СуммаИВалютаСтрокой(Сумма, СимволВалюты, ФорматнаяСтрока = "ЧДЦ=2")

	Возврат ?(ЗначениеЗаполнено(Сумма), Формат(Сумма, ФорматнаяСтрока) + " " + СимволВалюты, "");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИдентификаторЭлементаКоллекцииПоОтбору(ДанныеФормыКоллекция, СтруктураОтбора)

	Массив = ДанныеФормыКоллекция.НайтиСтроки(СтруктураОтбора);
	Если ЗначениеЗаполнено(Массив) Тогда
		Возврат Массив[0].ПолучитьИдентификатор()
	Иначе 
		Возврат Неопределено
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОграничитьДлиннуюСтрокуМноготочием(Стр, ДопустимаяДлина = 16)
	Если СтрДлина(Стр) > ДопустимаяДлина Тогда
		Стр = Лев(Стр, ДопустимаяДлина - 2) + "...";
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюКолонокКошельков(Форма)
	
	Форма.ВыводитьНакопленияВКошелькахВВалютеКошельков = НЕ Форма.ВыводитьНакопленияВКошелькахВВалютеЦелей;
	
	Для каждого ЭлементИДКошельков Из Форма.СписокИДКошельков Цикл
		ИДКошелька = ЭлементИДКошельков.ПолучитьИдентификатор();
		Форма.Элементы["НакопленияПоКошелькамГруппаНакопленияВКошельке_" + ИДКошелька + "_Валюта"].Видимость         = Форма.ВыводитьНакопленияВКошелькахВВалютеЦелей;
		Форма.Элементы["НакопленияПоКошелькамГруппаНакопленияВКошельке_" + ИДКошелька + "_ВалютаКошелька"].Видимость = Форма.ВыводитьНакопленияВКошелькахВВалютеКошельков;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокШаблоновПоФинансовойЦели(ФинансоваяЦель)

	СписокЗначений = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФинансоваяЦель", ФинансоваяЦель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщийЖурналДокументов.Ссылка КАК ШаблонОперации,
	|	ОбщийЖурналДокументов.ОписаниеОперации,
	|	ОбщийЖурналДокументов.Тип
	|ИЗ
	|	ЖурналДокументов.ОбщийЖурналДокументов КАК ОбщийЖурналДокументов
	|ГДЕ
	|	ОбщийЖурналДокументов.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ОборотыПлановыхОперацийОбороты.Регистратор КАК ШаблонОперации
	|			ИЗ
	|				РегистрНакопления.ОборотыПлановыхОпераций.Обороты(, , Авто, РазделБюджета = &ФинансоваяЦель) КАК ОборотыПлановыхОперацийОбороты
	|			ГДЕ
	|				НЕ(ОборотыПлановыхОперацийОбороты.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ОбщиеНакопления)
	|						И (ОборотыПлановыхОперацийОбороты.Регистратор ССЫЛКА Документ.НамВернулиДолг
	|							ИЛИ ОборотыПлановыхОперацийОбороты.Регистратор ССЫЛКА Документ.МыВернулиДолг)))";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектМД = Метаданные.НайтиПоТипу(Выборка.Тип);
		
		Картинка = Неопределено;
		Если ОбъектМД = Неопределено Тогда
			// картинка остается Неопределено
		ИначеЕсли ОбъектМД.Имя = "Перемещение" Тогда
			Картинка = БиблиотекаКартинок.Перемещение16;
		ИначеЕсли ОбъектМД.Имя = "ОбменВалюты" Тогда
			Картинка = БиблиотекаКартинок.Валюта16;
		ИначеЕсли ОбъектМД.Имя = "Доход" Тогда
			Картинка = БиблиотекаКартинок.ДоходВКошелек16;
		КонецЕсли;
		
		СписокЗначений.Добавить(Новый Структура("ИмяМетаданных, Значение", ОбъектМД.ПолноеИмя(), Выборка.ШаблонОперации), 
			Выборка.ОписаниеОперации + " (" + ОбъектМД.Представление() + ")", , Картинка);
		
	КонецЦикла;
	
	Возврат СписокЗначений;

КонецФункции

// Преобразует переданное значение в число или Неопределено при неудаче
&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВЧисло(Значение)

	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Значение;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Попытка
			Стр = СокрЛП(Значение);
			Стр = СтрЗаменить(Стр, " ", "");
			Стр = СтрЗаменить(Стр, Символы.НПП, "");
			Возврат Число(Стр);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетФинансовойЦели(ФинансоваяЦель, ИмяВарианта = "")
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	Если ЗначениеЗаполнено(ФинансоваяЦель) Тогда
		ПараметрыФормы.Отбор.Вставить("ФинансоваяЦель", ФинансоваяЦель);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", ?(ИмяВарианта = "", "ОстаткиИОборотыВВалютеЦелей", ИмяВарианта));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(ФинансоваяЦель));
	
	ОткрытьФорму("Отчет.ОтчетПоФинансовымЦелям.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ФинансоваяЦель, , );
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПокошелькам(Кошелек, ФинансоваяЦель, ИмяВарианта = "")
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	Если ЗначениеЗаполнено(Кошелек) Тогда
		ПараметрыФормы.Отбор.Вставить("Кошелек", Кошелек);
	КонецЕсли;
	Если ЗначениеЗаполнено(ФинансоваяЦель) Тогда
		ПараметрыФормы.Отбор.Вставить("ФинансоваяЦель", ФинансоваяЦель);
	КонецЕсли;
	ПараметрыФормы.Вставить("КлючВарианта", ?(ИмяВарианта = "", "ОперацииПоКошелькам", ИмяВарианта));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", ЗначениеЗаполнено(Кошелек) Или ЗначениеЗаполнено(ФинансоваяЦель));
	
	ОткрытьФорму("Отчет.ОтчетПоКошелькам.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, Строка(Кошелек) + Строка(ФинансоваяЦель), , );
	
КонецПроцедуры



// Завершения процедур с интерактивным функиционалом

&НаКлиенте
Процедура СозданиеШаблонаЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		
		ФинансоваяЦель = ДополнительныеПараметры.ФинансоваяЦель;
		НазваниеШаблона = НСтр("ru = 'Накопления на цель [%1]'");
		НазваниеШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НазваниеШаблона, Строка(ФинансоваяЦель));
		
		СтрокиФинцели = ФинансовыеЦели.НайтиСтроки(Новый Структура("ФинансоваяЦель", ФинансоваяЦель));
		Если СтрокиФинцели.Количество() = 1 Тогда
			СуммаНакоплений = СтрокиФинцели[0].ОткладыватьВМесяц;
		Иначе
			СуммаНакоплений = 0;
		КонецЕсли;
		
		ПараметрыШаблона = Новый Структура("ФинансоваяЦель,ФинансоваяЦельКуда,ОписаниеОперации,ЭтоШаблон,СуммаОперации,СуммаВыдано", 
			ФинансоваяЦель, ФинансоваяЦель, НазваниеШаблона, Истина, СуммаНакоплений, СуммаНакоплений);
		ОткрытьФорму("Документ." + Выбор.Значение + ".ФормаОбъекта", 
			Новый Структура("ЗначенияЗаполнения, ПлановаяДата", ПараметрыШаблона, ТекущаяДатаКлиентСервер()), ЭтаФорма, Ложь);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблонаЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Выбор.Значение.Значение);
		ОткрытьФорму(Выбор.Значение.ИмяМетаданных + ".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура НакопленияПоКошелькамПеретаскиваниеЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
		ОткрытьФорму("Документ." + Выбор.Значение + ".ФормаОбъекта", 
			Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения), ЭтаФорма, Ложь);
		
		// Спозиционирумся на выбранную ячейку
		Элементы.НакопленияПоКошелькам.ТекущаяСтрока  = ДополнительныеПараметры.Строка;
		Элементы.НакопленияПоКошелькам.ТекущийЭлемент = ДополнительныеПараметры.Поле;
	КонецЕсли; 

КонецПроцедуры
 
// Настройка автоматического открытия формы при начале работы порграммы

&НаСервереБезКонтекста
Процедура ИзменитьНастройкуОткрытияПриЗапускеПрограммы(НоваяНастройка)

	ПользовательскиеНастройкиДеньгиСервер.ЗаписатьПриЗапускеОткрыватьРаздел(НоваяНастройка);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрыватьПриЗапускеПрограммыЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор = КодВозвратаДиалога.Да Тогда
		ЗначениеНастройки = ?(ДополнительныеПараметры.Открывать, "", "Накопления");
		ИзменитьНастройкуОткрытияПриЗапускеПрограммы(ЗначениеНастройки);
		Элементы.ОткрыватьПриЗапускеПрограммы.Пометка = НЕ ДополнительныеПараметры.Открывать;
		Оповестить("Изменилась настройка", Новый Структура("ПриЗапускеОткрыватьРаздел", ЗначениеНастройки))
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти

