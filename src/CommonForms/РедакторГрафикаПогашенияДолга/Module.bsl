////////////////////////////////////////////////////////////////////////////////
// ОбщаяФорма.РедакторГрафикаПогашенияДолга: используется для редактирования графика 
//	погашения долга
//
// Данные на входе:
//	ПараметрыГрафика
//	ПараметрыРасписания, АдресПроизвольныхДатРасписания, ИДФормыВладельца
//	НазваниеШаблона
//
// Сохраняемые данные:
//	ПараметрыГрафика
//	ПараметрыРасписания, ПроизвольныеДатыРасписания, СуммаПроцентовДляРазовогоПлатежа
//  
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте 
Перем ВозможностьВыполнитьКоманду;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" ИЛИ ИмяСобытия = "Записан элемент справочника" Тогда
		ВидДокумента = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ВидДокумента", ВидДокумента) Тогда
			Если ВидДокумента = "МыВернулиДолг" ИЛИ ВидДокумента = "ВводИзменениеОстатка" ИЛИ ВидДокумента = "НамВернулиДолг" Тогда
				ОбновитьГрафикПлатежей();
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "Изменен список операций" И Параметр.ВладелецФормы = УникальныйИдентификатор Тогда
		ОбновитьГрафикПлатежей();
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаГрафикПлатежей Тогда
		
		Если ЗадатьСпособИГрафикПогашения
			И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную")
			И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж")
			И ПроизвольныеДатыРасписания.Количество() < 2 
			И ЗначениеЗаполнено(ПараметрыГрафика.СрокМесяцев) Тогда
			
			ТекстВопроса = НСтр("ru='Заполнить график платежей по указанным условиям погашения?'"); 
			ОбработчикОтвета = Новый ОписаниеОповещения("СтраницыФормыПриСменеСтраницыЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		ИначеЕсли Модифицированность И ЗадатьСпособИГрафикПогашения
			И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
			
			// Для разового платежа перезаполним график
			ПроизвольныеДатыРасписания.Очистить();
			СтрокаРасписания = ПроизвольныеДатыРасписания.Добавить();
			СтрокаРасписания.ПлановаяДата = ПараметрыГрафика.ПлановаяДатаПогашения;
			СтрокаРасписания.СуммаДолга      = ПараметрыГрафика.СуммаДолга;
			Если ЗадатьПроцентыИКомиссии Тогда
				СтрокаРасписания.СуммаПроцентов  = СуммаПроцентовДляРазовогоПлатежа;
				СтрокаРасписания.СуммаКомиссии   = ПараметрыГрафика.СуммаЕжемесячнойКомиссии;
			КонецЕсли;
			ЗаполнитьДобавленныеКолонки();
			
		КонецЕсли;
		
	КонецЕсли;
	 
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьПроцентыИКомиссииПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаПроцентнаяСтавкаПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьСпособИГрафикПогашенияПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли;
	
	СтрокиПлановыхОпераций = ПроизвольныеДатыРасписания.НайтиСтроки(Новый Структура("ВнеплановаяОперация", Ложь));
	КоличествоПлановыхОпераций = СтрокиПлановыхОпераций.Количество();
	Если НЕ ЗадатьСпособИГрафикПогашения И КоличествоПлановыхОпераций <> 0 
		И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		
		ТекстВопроса = НСтр("ru = 'Будет очищен график платежей. Все операции, созданные по графику, останутся в базе, но не будут отображаться в календаре.
			|Очистить график платежей и продолжить?'"); 
		ОбработчикОтвета = Новый ОписаниеОповещения("ЗадатьСпособИГрафикПогашенияПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаСпособПогашенияПриИзменении(Элемент)
	
	РазовыйПлатеж = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж");
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		ПараметрыГрафика.СпособПогашения = РазовыйПлатеж;
	КонецЕсли;
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = РазовыйПлатеж Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	Если ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную") Тогда
		ПараметрыГрафика.НеПересчитыватьПриРедактировании = Истина;
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаСпособПогашенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПараметрыГрафика.СпособПогашения Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		
		ПреобразоватьСпособПлатежаВРазовыйПлатеж = Ложь;
		СтрокиПлановыхОпераций = ПроизвольныеДатыРасписания.НайтиСтроки(Новый Структура("ВнеплановаяОперация", Ложь));
		КоличествоПлановыхОпераций = СтрокиПлановыхОпераций.Количество();
		Если КоличествоПлановыхОпераций = 1 Тогда
			ПреобразоватьСпособПлатежаВРазовыйПлатеж = Истина;
			
		ИначеЕсли КоличествоПлановыхОпераций > 1 Тогда
			
			СтандартнаяОбработка = Ложь;
			ТекстВопроса = НСтр("ru = 'Будет очищен график платежей. Все операции, созданные по графику, останутся в базе, но не будут отображаться в календаре.
				|Очистить график платежей и продолжить?'"); 
			ДополнительныеПараметры = Новый Структура("ВыбранноеЗначение, СтрокиПлановыхОпераций", ВыбранноеЗначение, СтрокиПлановыхОпераций);
			ОбработчикОтвета = Новый ОписаниеОповещения("ПараметрыГрафикаСпособПогашенияОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
			Возврат;
			
		КонецЕсли;
		
		// Преобразуем несколько платежей в один
		Если ПреобразоватьСпособПлатежаВРазовыйПлатеж Тогда
			ПреобразоватьНесколькоПлатежейВОдин(СтрокиПлановыхОпераций);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаСуммаДолгаПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПроизвольныеДатыРасписания) Тогда
		// Пересчитаем остатки
		ОстатокДолга = ПараметрыГрафика.СуммаДолга;
		Для каждого СтрокаГрафика Из ПроизвольныеДатыРасписания Цикл
			СтрокаГрафика.ОстатокНаНачало = ОстатокДолга;
			СтрокаГрафика.ОстатокНаКонец  = СтрокаГрафика.ОстатокНаНачало - СтрокаГрафика.СуммаДолга;
			ОстатокДолга = СтрокаГрафика.ОстатокНаКонец;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаДатаВозникновенияДолгаПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаДатаВозникновенияДолгаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
		ПараметрыГрафика.ДатаВозникновенияДолга = ТекущаяДатаКлиентСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаПлановаяДатаПогашенияПриИзменении(Элемент)
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		РассчитатьСуммуПроцентовДляРазовогоПлатежа();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаПлановаяДатаПогашенияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ПлановаяДатаПогашения) Тогда
		ПараметрыГрафика.ПлановаяДатаПогашения = ТекущаяДатаКлиентСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДолгЗакрытПриИзменении(Элемент)
	
	Если УдалитьДолгЗакрыт Тогда
		ПараметрыГрафика.ДатаЗакрытияДолга = ТекущаяДатаКлиентСервер();
	Иначе
		ПараметрыГрафика.ДатаЗакрытияДолга = Неопределено;
	КонецЕсли; 
	УдалитьУстановитьДатуЗакрытияДолга();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДатаЗакрытияДолгаПриИзменении(Элемент)
	
	УдалитьДолгЗакрыт = ЗначениеЗаполнено(ПараметрыГрафика.ДатаЗакрытияДолга); 
	УдалитьУстановитьДатуЗакрытияДолга();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаКошелекДляПогашенияПриИзменении(Элемент)
	
	КошелекДляНакоплений = ЭтоКошелекДляНакоплений(ПараметрыГрафика.КошелекДляПогашения);
	Если КошелекДляНакоплений И НЕ ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления");
	ИначеЕсли НЕ КошелекДляНакоплений И ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = Неопределено;
	КонецЕсли; 
	Элементы.ПараметрыГрафикаФинансоваяЦель.Доступность = КошелекДляНакоплений;
	
КонецПроцедуры
 
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПроизвольныеДатыРасписания

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если Поле.Имя = "ПроизвольныеДатыРасписанияОписаниеРегистратора" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ТекущиеДанные = Неопределено Тогда 
			
			Возврат;
			
		ИначеЕсли ТекущиеДанные.КоличествоРегистраторов = 0 И ТекущиеДанные.РазрешеноСоздаватьПлатеж Тогда
		
			ОткрытьФормуНовогоПлатежа(ТекущиеДанные);
			
		ИначеЕсли ТекущиеДанные.КоличествоРегистраторов = 1 И ЗначениеЗаполнено(ТекущиеДанные.ФактОперация) Тогда
			
			ИмяФормыДокумента = "Документ." + ПолучитьИмяВидаДокумента(ТекущиеДанные.ФактОперация) + ".ФормаОбъекта";
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ФактОперация);
			ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы, ЭтотОбъект);
			
		ИначеЕсли ТекущиеДанные.КоличествоРегистраторов > 1 Тогда
			
			ПараметрыФормы = Новый Структура("Начало, Окончание, Долг, ПлановаяОперация", 
					НачалоМесяца(ТекущиеДанные.ПлановаяДата), КонецМесяца(ТекущиеДанные.ПлановаяДата), 
					ПараметрыГрафика.Долг, ТекущиеДанные.ПлановаяОперация);
			СписокОпераций = ПолучитьСписокОперацийПоСтроке(ПараметрыФормы);
			Если СписокОпераций.Количество() > 0 Тогда
				
				ОбработчикВыбора = Новый ОписаниеОповещения("ПроизвольныеДатыРасписанияВыборЗавершение", ЭтотОбъект);
				ПоказатьВыборИзСписка(ОбработчикВыбора, СписокОпераций, Элемент);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	ИначеЕсли НЕ ЗадатьСпособИГрафикПогашения Тогда	
		ПоказатьПредупреждение(, НСтр("ru = 'Редактирование графика платежей недоступно. 
								  |Не задан способ погашения (закладка ""Условия погашения"").'"));
		
	ИначеЕсли ЗадатьСпособИГрафикПогашения 
		И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда	
		ПоказатьПредупреждение(, НСтр("ru = 'Для способа погашения ""Разовый платеж"" редактирование графика недоступно. 
								  |Параметры разового платежа можно изменить на закладке ""Условия погашения""'"));
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПередУдалением(Элемент, Отказ)
	
	СтрокаОперации = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если СтрокаОперации = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если СтрокаОперации.ЕстьОперации Тогда
		Отказ = Истина;
		СтрокаОперации.СуммаДолга     = 0;
		СтрокаОперации.СуммаПроцентов = 0;
		СтрокаОперации.СуммаКомиссии  = 0;
		СтрокаОперации.ВсегоКУплате   = 0;
		ПересчитатьГрафикСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПослеУдаления(Элемент)
	
	ОбновитьГрафикПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаОперации = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаОперации.НомерСтроки = ПроизвольныеДатыРасписания.Количество();
		Если Копирование Тогда
			СтрокаОперации.ЕстьОперации = Ложь;
			СтрокаОперации.КоличествоРегистраторов = 0;
			СтрокаОперации.ФактОперация = Неопределено;
			СтрокаОперации.ФактИзменениеДолга = 0;
			СтрокаОперации.ОписаниеРегистратора = НСтр("ru = 'Учесть платеж'") ;
			СтрокаОперации.ВнеплановаяОперация = Ложь;
			СтрокаОперации.ОстатокНаКонец  = 0;
			СтрокаОперации.ОстатокНаНачало = 0;
			СтрокаОперации.ФактическийОстатокНаНаначло = 0;
			СтрокаОперации.ФактическийОстатокНаКонец = 0;
			Если ЗначениеЗаполнено(СтрокаОперации.ПлановаяДата) Тогда
				СтрокаОперации.ПлановаяДата = ДобавитьМесяц(СтрокаОперации.ПлановаяДата, 1);
			КонецЕсли; 
		КонецЕсли; 
		ПересчитатьГрафикСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПлановаяДатаПриИзменении(Элемент)
	
	ПересчитатьГрафикСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияСуммаДолгаПриИзменении(Элемент)
	
	ПроизвольныеДатыРасписанияСуммаДолгаПриИзмененииСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияСуммаПроцентовПриИзменении(Элемент)
	
	ПроизвольныеДатыРасписанияСуммаПроцентовПриИзмененииСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияСуммаКомиссииПриИзменении(Элемент)
	
	ПроизвольныеДатыРасписанияСуммаКомиссииПриИзмененииСервер(Элементы.ПроизвольныеДатыРасписания.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПропуститьПриИзменении(Элемент)
	
	СтрокаОперации = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если СтрокаОперации = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Пропустить = СтрокаОперации.Пропустить;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПроизвольныеДатыРасписания.ВыделенныеСтроки Цикл
		СтрокаОперации = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаОперации.Пропустить = Пропустить;
	КонецЦикла; 
	
	//ЗаполнитьДобавленныеКолонки(Истина);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОк(Команда)
	
	Если СохранитьРезультат() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьПовторы(Команда)
	
	Если ЗначениеЗаполнено(ДатаПоследнегоВыполненияПлана) Тогда
		ТекстВопроса = НСтр("ru = 'После удаления графика все операции, созданные по нему, останутся в базе, но не будут отображаться в календаре.
			|Удалить график?'");
		
		ОбработчикОтвета = Новый ОписаниеОповещения("ПрекратитьПовторыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли; 
	
	ОчиститьИнформациюОПовторах();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНачальныйОстаток(Команда)
	
	Если ВозможностьВыполнитьКоманду <> "Изменить остаток долга" И НЕ МожноВыполнятьКоманды("Изменить остаток долга") Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасписания.ВладелецРасписания) Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаГрафика = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если СтрокаГрафика = Неопределено ИЛи Не ЗначениеЗаполнено(СтрокаГрафика.ПлановаяДата) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбрана строка с датой платежа.
			|Пожалуйста, выберите в графике строку с датой, на которую хотите изменить остаток, и повторите попытку'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата",               СтрокаГрафика.ПлановаяДата);
	ПараметрыЗаполнения.Вставить("РазделУчета",        ПредопределенноеЗначение("ПланСчетов.РазделыУчета.ОсновныеСуммыДолгов"));
	ПараметрыЗаполнения.Вставить("ОбъектУчета",        ПараметрыГрафика.Долг);
	
	ПараметрыЗаполнения.Вставить("СуммаНовогоОСтатка", -СтрокаГрафика.ОстатокНаНачало);
	
	ОткрытьФорму("Документ.ВводИзменениеОстатка.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения), , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОстатокПроцентов(Команда)
	
	Если ВозможностьВыполнитьКоманду <> "Изменить остаток процентов" И НЕ МожноВыполнятьКоманды("Изменить остаток процентов") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПараметрыГрафика.ПроцентнаяСтавка = 0 Тогда
		Возврат;
	КонецЕсли; 
	СтрокаГрафика = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если СтрокаГрафика = Неопределено ИЛи Не ЗначениеЗаполнено(СтрокаГрафика.ПлановаяДата) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбрана строка с датой платежа.
			|Пожалуйста, выберите в графике строку с датой, на которую хотите изменить остаток, и повторите попытку'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата",               СтрокаГрафика.ПлановаяДата);
	ПараметрыЗаполнения.Вставить("РазделУчета",        ПредопределенноеЗначение("ПланСчетов.РазделыУчета.ПроцентыПоДолгам"));
	ПараметрыЗаполнения.Вставить("ОбъектУчета",        ПараметрыГрафика.Долг);
	ПараметрыЗаполнения.Вставить("СуммаНовогоОСтатка", СтрокаГрафика.СуммаПроцентов);
	
	ОткрытьФорму("Документ.ВводИзменениеОстатка.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения), , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПропустить(Команда)
	
	СтрокаОперации = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	СтрокаОперации.Пропустить = НЕ СтрокаОперации.Пропустить;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьГрафик(Команда)
	
	Если НЕ ЗадатьСпособИГрафикПогашения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроизвольныеДатыРасписания.Количество() > 0 
			И ПроизвольныеДатыРасписания.Итог("ВсегоКУплате") > 0 
			И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную") Тогда
		ТекстВопроса = НСтр("ru = 'График платежа будет полностью заполнен новыми расчетными значениями. 
			|Пересчитать график?'");
		ОбработчикОтвета = Новый ОписаниеОповещения("ПересчитатьГрафикЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли; 
	
	ОбновитьВесьГрафик();
	ПроверитьокончаниеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура РасплатитьсяЗаМесяц(Команда)
	
	Если ВозможностьВыполнитьКоманду <> "Учесть платеж по графику" И НЕ МожноВыполнятьКоманды("Учесть платеж по графику") Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаГрафика = Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные;
	Если СтрокаГрафика = Неопределено ИЛи Не ЗначениеЗаполнено(СтрокаГрафика.ПлановаяДата) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбрана строка с датой платежа.
			|Пожалуйста, выберите в графике строку с датой, на которую хотите изменить остаток и повторите попытку'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНовогоПлатежа(СтрокаГрафика);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияПриИзменении(Элемент)
	ПроверитьокончаниеРасписания();
	ОбновитьИтогиТаблицы(ЭтотОбъект);
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	// Обрабатываем параметры, полученные из формы-владельца
	Параметры.Свойство("ИДФормыВладельца", ИДФормыВладельца);
	
	Если Параметры.Свойство("ПараметрыГрафика") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыГрафика, Параметры.ПараметрыГрафика);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыГрафика.Долг) Тогда
		Если ПараметрыГрафика.Долг.ИспользоватьДляУчетаВзятыхДолгов И ПараметрыГрафика.Долг.ИспользоватьДляУчетаВыданныхДолгов Тогда
			ВидДолга = Перечисления.ТипыДолгов.ВзаимныйРасчет;
		ИначеЕсли ПараметрыГрафика.Долг.ИспользоватьДляУчетаВыданныхДолгов Тогда
			ВидДолга = Перечисления.ТипыДолгов.ВыданныйЗаем;
		Иначе
			ВидДолга = Перечисления.ТипыДолгов.ПолученныйКредит;
		КонецЕсли; 
	ИначеЕсли Параметры.Свойство("ВидДолга") Тогда
		ВидДолга = Параметры.ВидДолга;
	КонецЕсли;
	
	ЗадатьПроцентыИКомиссии = ЗначениеЗаполнено(ПараметрыГрафика.ПроцентнаяСтавка) ИЛИ ЗначениеЗаполнено(ПараметрыГрафика.СтатьяДляУчетаПроцентов)
								ИЛИ ЗначениеЗаполнено(ПараметрыГрафика.СуммаЕжемесячнойКомиссии) ИЛИ ЗначениеЗаполнено(ПараметрыГрафика.СтатьяЕжемесячнойКомиссии);
	ЗадатьСпособИГрафикПогашения = ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения);
	
	Если Параметры.Свойство("ПараметрыРасписания") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыРасписания, Параметры.ПараметрыРасписания);
	КонецЕсли; 
	ДатаПоследнегоВыполненияПлана = ПлановыеОперации.ПолучитьДатуПоследнейВыполненнойОперации(ПараметрыРасписания.ВладелецРасписания);
	
	Параметры.Свойство("АдресПроизвольныхДатРасписания", АдресПроизвольныхДатРасписания);
	Если ЗначениеЗаполнено(АдресПроизвольныхДатРасписания) Тогда
		ПроизвольныеДатыРасписания.Загрузить(ПолучитьИзВременногоХранилища(АдресПроизвольныхДатРасписания));
	ИначеЕсли ЗначениеЗаполнено(ПараметрыРасписания.ВладелецРасписания) Тогда
		ТаблицаДат = ПлановыеОперации.ПолучитьТаблицуПроизвольныхДатДляРедактирования(ПараметрыРасписания.ВладелецРасписания,
				ПараметрыГрафика.ДатаВозникновенияДолга, 
				КонецГода(ДобавитьМесяц(ПараметрыГрафика.ДатаВозникновенияДолга, ПараметрыГрафика.СрокМесяцев)));
		ПроизвольныеДатыРасписания.Загрузить(ТаблицаДат);
	КонецЕсли; 
	Элементы.ПроизвольныеДатыРасписанияОписаниеРегистратора.Видимость = ЗначениеЗаполнено(ПараметрыГрафика.ШаблонОперации);
	Если ВидДолга = Перечисления.ТипыДолгов.ПолученныйКредит Тогда
		Элементы.ПроизвольныеДатыРасписанияОборотКт.Заголовок = НСтр("ru = 'Увеличение долга'"); 
		Элементы.ПроизвольныеДатыРасписанияОборотДт.Заголовок = НСтр("ru = 'Погашение долга'"); 
	Иначе
		Элементы.ПроизвольныеДатыРасписанияОборотКт.Заголовок = НСтр("ru = 'Погашение долга'"); 
		Элементы.ПроизвольныеДатыРасписанияОборотДт.Заголовок = НСтр("ru = 'Увеличение долга'"); 
	КонецЕсли; 
	
	Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = Перечисления.СпособыПогашенияКредита.РазовыйПлатеж
		И ПроизвольныеДатыРасписания.Количество() <> 0 Тогда
		СуммаПроцентовДляРазовогоПлатежа = ПроизвольныеДатыРасписания[0].СуммаПроцентов;
	КонецЕсли;
	
	Заголовок = НСтр("ru = 'График платежей [%1]'");
	Если ЗначениеЗаполнено(ПараметрыГрафика.Долг) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, Строка(ПараметрыГрафика.Долг));
	ИначеЕсли Параметры.Свойство("НазваниеШаблона", НазваниеШаблона) Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, НазваниеШаблона);
	КонецЕсли; 
	
	// Установим значения по умолчанию
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		ПараметрыГрафика.СпособПогашения = Перечисления.СпособыПогашенияКредита.Вручную;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) Тогда
		ПараметрыГрафика.ДатаВозникновенияДолга = ТекущаяДатаСеанса();
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.ДеньМесяцаДляРасчетов) Тогда
		ПараметрыГрафика.ДеньМесяцаДляРасчетов = День(ПараметрыГрафика.ДатаВозникновенияДолга);
	КонецЕсли; 
	
	Если Параметры.Свойство("АктивныйЭлементПриОткрытии") Тогда
		Элементы[Параметры.АктивныйЭлементПриОткрытии].АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	// Заполнение дополнительных колонок
	ЗаполнитьДобавленныеКолонки();
	
	КошелекДляНакоплений = ЭтоКошелекДляНакоплений(ПараметрыГрафика.КошелекДляПогашения);
	Если КошелекДляНакоплений И НЕ ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления");
	ИначеЕсли НЕ КошелекДляНакоплений И ЗначениеЗаполнено(ПараметрыГрафика.ФинансоваяЦель) Тогда
		ПараметрыГрафика.ФинансоваяЦель = Неопределено;
	КонецЕсли; 
	
	Если ПроизвольныеДатыРасписания.Количество() > 1 И ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаГрафикПлатежей;
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()

	УдалитьДолгЗакрыт = ЗначениеЗаполнено(ПараметрыГрафика.ДатаЗакрытияДолга);
	Элементы.ДатаЗакрытияДолга.Доступность = УдалитьДолгЗакрыт;
	
	ОбновитьГрафикПлатежей();
	ОбновитьИтогиТаблицы(ЭтотОбъект);

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Элементы                     = Форма.Элементы;
	ПараметрыГрафика             = Форма.ПараметрыГрафика;
	ПараметрыРасписания          = Форма.ПараметрыРасписания;
	ПроизвольныеДатыРасписания   = Форма.ПроизвольныеДатыРасписания;
	
	// СтраницаУсловияПогашения
	Элементы.ЗадатьПроцентыИКомиссии.Доступность = (Форма.ВидДолга <> ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВзаимныйРасчет"));
	Элементы.ГруппаПроценты.Доступность = Форма.ЗадатьПроцентыИКомиссии;
	Элементы.ГруппаКомиссии.Доступность = Форма.ЗадатьПроцентыИКомиссии;
	Элементы.ПараметрыГрафикаСтатьяДляУчетаПроцентов.Доступность    = ЗначениеЗаполнено(ПараметрыГрафика.ПроцентнаяСтавка);
	Элементы.ПараметрыГрафикаСтатьяЕжемесячнойКомиссии.Доступность  = ЗначениеЗаполнено(ПараметрыГрафика.СуммаЕжемесячнойКомиссии);
	
	Элементы.ПараметрыГрафикаСпособПогашения.Доступность     = Форма.ЗадатьСпособИГрафикПогашения;
	Элементы.ПараметрыГрафикаКошелекДляПогашения.Доступность = Форма.ЗадатьСпособИГрафикПогашения;
	Элементы.ГруппаУсловияРасчетаГрафика.Доступность         = Форма.ЗадатьСпособИГрафикПогашения;
	
	Элементы.ПараметрыГрафикаФинансоваяЦель.Доступность = Элементы.ПараметрыГрафикаКошелекДляПогашения.Доступность И Форма.КошелекДляНакоплений; 
	
	Если Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВыданныйЗаем") Тогда
		Элементы.ПараметрыГрафикаКошелекДляПогашения.Заголовок = НСтр("ru = 'В кошелек'");
	ИначеЕсли Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ПолученныйКредит") Тогда
		Элементы.ПараметрыГрафикаКошелекДляПогашения.Заголовок = НСтр("ru = 'Из кошелька'");
	Иначе
		Элементы.ПараметрыГрафикаКошелекДляПогашения.Заголовок = НСтр("ru = 'Кошелек погашения'");
	КонецЕсли;
	
	Если Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВыданныйЗаем") Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходов");
	ИначеЕсли Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ПолученныйКредит") Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов");
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов;
	КонецЕсли; 
	Элементы.ПараметрыГрафикаСтатьяДляУчетаПроцентов.ОграничениеТипа   = ОписаниеТипов;
	Элементы.ПараметрыГрафикаСтатьяЕжемесячнойКомиссии.ОграничениеТипа = ОписаниеТипов;
	
	Если ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница = Элементы.СтраницаРазовыйПлатеж;
		Элементы.ГруппаДатаВозникновенияДолгаПояснение.Видимость = Форма.ЗадатьПроцентыИКомиссии;
		Элементы.ГруппаСуммаПроцентовВалюта.Видимость            = Форма.ЗадатьПроцентыИКомиссии;
	
		Если Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВыданныйЗаем") Тогда
			Элементы.ПараметрыГрафикаДатаВозникновенияДолга1.Заголовок = НСтр("ru = 'Долг выдан'");
			Элементы.ПараметрыГрафикаПлановаяДатаПогашения.Заголовок   = НСтр("ru = 'Когда вернут'");
		ИначеЕсли Форма.ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ПолученныйКредит") Тогда
			Элементы.ПараметрыГрафикаДатаВозникновенияДолга1.Заголовок = НСтр("ru = 'Долг получен'");
			Элементы.ПараметрыГрафикаПлановаяДатаПогашения.Заголовок   = НСтр("ru = 'Когда верну'");
		Иначе
			Элементы.ПараметрыГрафикаДатаВозникновенияДолга1.Заголовок = НСтр("ru = 'Дата возникновения долга'");
			Элементы.ПараметрыГрафикаПлановаяДатаПогашения.Заголовок   = НСтр("ru = 'Плановая дата погашения'");
		КонецЕсли;
		
	ИначеЕсли ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Аннуитет")
			ИЛИ ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.ДифференцированныеПлатежи") Тогда
		
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница = Элементы.СтраницаЕжемесячныеПлатежи;
		
	ИначеЕсли ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную") Тогда
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница = Элементы.СтраницаПроизвольныеПлатежи;
		
	Иначе
		Элементы.СтраницыУсловияРасчетаГрафика.ТекущаяСтраница = Элементы.СтраницаУсловияРасчетаГрафикаПустая;
		
	КонецЕсли;
	
	// СтраницаГрафикПлатежей
	Элементы.ПроизвольныеДатыРасписания.ТолькоПросмотр = НЕ Форма.ЗадатьСпособИГрафикПогашения ИЛИ ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж");
	Элементы.СтраницаГрафикПлатежей.Заголовок = НСтр("ru='График платежей'");
	Если Элементы.ПроизвольныеДатыРасписания.ТолькоПросмотр Тогда
		Элементы.СтраницаГрафикПлатежей.Заголовок = Элементы.СтраницаГрафикПлатежей.Заголовок + НСтр("ru=' (только просмотр)'");
	КонецЕсли;
	
	Элементы.ПроизвольныеДатыРасписанияГруппаКУплате.Видимость = Форма.ЗадатьСпособИГрафикПогашения;
	
	ОбновитьИтогиТаблицы(Форма);
	
	Элементы.НеПересчитыватьПриРедактировании.Доступность = ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную")
															И НЕ Элементы.ПроизвольныеДатыРасписания.ТолькоПросмотр;
	
	Элементы.ПроизвольныеДатыРасписанияИзменитьОстатокДолга.Видимость = ЗначениеЗаполнено(ПараметрыГрафика.Долг) И ЗначениеЗаполнено(ПараметрыРасписания.ВладелецРасписания);
	Элементы.ПроизвольныеДатыРасписанияРасплатитьсяЗаМесяц.Видимость  = Элементы.ПроизвольныеДатыРасписанияИзменитьОстатокДолга.Видимость;
	Элементы.ГруппаЗакрытиеДолга.Видимость                            = Ложь;
	
	Элементы.ДатаЗакрытияДолга.Доступность = Форма.УдалитьДолгЗакрыт;
	
	Элементы.ПроизвольныеДатыРасписанияПересчитатьГрафик.Доступность = Форма.ЗадатьСпособИГрафикПогашения
	И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.Вручную")
	И ПараметрыГрафика.СпособПогашения <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж");
	#Если Сервер И НЕ Клиент Тогда
	Если Элементы.ПроизвольныеДатыРасписанияПересчитатьГрафик.Доступность Тогда
		Форма.Команды.ПересчитатьГрафик.Подсказка = НСтр("ru='Перезаполнить график по условиям погашения'");
	Иначе
		Форма.Команды.ПересчитатьГрафик.Подсказка = НСтр("ru='Пересчет доступен только для способов погашения ""Ануитет"" и ""Дифференцированные платежи""'"); ;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиТаблицы(Форма)

	Элементы                     = Форма.Элементы;
	ПроизвольныеДатыРасписания   = Форма.ПроизвольныеДатыРасписания;
	
	Элементы.ПроизвольныеДатыРасписанияВсегоКУплате.ТекстПодвала    = Формат(ПроизвольныеДатыРасписания.Итог("ВсегоКУплате"), "ЧДЦ=2; ЧГ=3,0"); 
	Элементы.ПроизвольныеДатыРасписанияСуммаДолга.ТекстПодвала      = Формат(ПроизвольныеДатыРасписания.Итог("СуммаДолга"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаПроцентов.ТекстПодвала  = Формат(ПроизвольныеДатыРасписания.Итог("СуммаПроцентов"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияСуммаКомиссии.ТекстПодвала   = Формат(ПроизвольныеДатыРасписания.Итог("СуммаКомиссии"), "ЧДЦ=2; ЧГ=3,0") ;
	Элементы.ПроизвольныеДатыРасписанияФактИзменениеДолга.ТекстПодвала   = Формат(ПроизвольныеДатыРасписания.Итог("ФактИзменениеДолга"), "ЧДЦ=2; ЧГ=3,0") ;

КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибкиВДатахРасписания(СписокОшибок)

	Результат = Ложь;
	МассивДат = Новый Массив;
	
	Для Каждого СтрокаДаты Из ПроизвольныеДатыРасписания Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДаты.ПлановаяДата) Тогда
			ТекстСообщения = НСтр("ru = 'График не может содержать пустые даты. Удалите строки с пустыми датами.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПроизвольныеДатыРасписания.ПлановаяДата", ТекстСообщения, "");
			Результат = Истина;
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаДаты.АктуальнаяДата) Тогда
			СтрокаДаты.АктуальнаяДата = СтрокаДаты.ПлановаяДата;
		КонецЕсли; 
		
		ДатаМесяц = НачалоМесяца(СтрокаДаты.ПлановаяДата);
		Если МассивДат.Найти(ДатаМесяц) = Неопределено Тогда
			МассивДат.Добавить(ДатаМесяц);
		Иначе
			ТекстСообщения = НСтр("ru = 'За каждый месяц может быть только одна дата. Удалите лишние даты за период %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(ДатаМесяц, "ДФ='ММММ гггг ""г.""'"));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(СписокОшибок, "ПроизвольныеДатыРасписания.ПлановаяДата", ТекстСообщения, "");
			Результат = Истина;
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции
 

&НаКлиенте
Функция СохранитьРезультат(СохранятьНезависимоОтВладельца = Ложь)
	
	ОчиститьСообщения();
	СписокОшибок = Неопределено;
	
	// Очистим ненужные данные
	СписокСвойств = "";
	Если НЕ ЗадатьПроцентыИКомиссии Тогда
		ОчищаемыеСвойства = Новый Структура("ПроцентнаяСтавка, СтатьяДляУчетаПроцентов, СуммаЕжемесячнойКомиссии, СтатьяЕжемесячнойКомиссии");
		ЗаполнитьЗначенияСвойств(ПараметрыГрафика, ОчищаемыеСвойства);
	КонецЕсли;
	
	Если НЕ ЗадатьСпособИГрафикПогашения Тогда
		
		ПараметрыГрафика.СпособПогашения = Неопределено;
		ПроизвольныеДатыРасписания.Очистить();
		
	Иначе
		
		Если ЕстьОшибкиВДатахРасписания(СписокОшибок) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(СписокОшибок);
			Возврат Ложь;
		Иначе
			ПроверитьокончаниеРасписания();
		КонецЕсли; 
		
	КонецЕсли;
	
	ЭтоРазовыйПлатеж = ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж");
	
	// График для разового платежа
	Если ЭтоРазовыйПлатеж Тогда
		ПроизвольныеДатыРасписания.Очистить();
		СтрокаРасписания = ПроизвольныеДатыРасписания.Добавить();
		СтрокаРасписания.ПлановаяДата = ПараметрыГрафика.ПлановаяДатаПогашения;
		СтрокаРасписания.СуммаДолга   = ПараметрыГрафика.СуммаДолга;
		Если ЗадатьПроцентыИКомиссии Тогда
			СтрокаРасписания.СуммаПроцентов  = СуммаПроцентовДляРазовогоПлатежа;
			СтрокаРасписания.СуммаКомиссии   = ПараметрыГрафика.СуммаЕжемесячнойКомиссии;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиПлановыхОпераций = ПроизвольныеДатыРасписания.НайтиСтроки(Новый Структура("ВнеплановаяОперация", Ложь));
	
	// Подготовим параметры графика
	Если ЗначениеЗаполнено(ПроизвольныеДатыРасписания) И НЕ ЭтоРазовыйПлатеж Тогда
		ПараметрыГрафика.ПлановаяДатаПогашения = Неопределено;
		Если ЗначениеЗаполнено(СтрокиПлановыхОпераций) Тогда
			ПараметрыГрафика.ПлановаяДатаПогашения = СтрокиПлановыхОпераций[СтрокиПлановыхОпераций.Количество()-1].ПлановаяДата;
		КонецЕсли;
	КонецЕсли;
	Если ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ВыданныйЗаем") Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходов");
	ИначеЕсли ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ПолученныйКредит") Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов");
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов;
	КонецЕсли; 
	ПараметрыГрафика.СтатьяДляУчетаПроцентов   = ОписаниеТипов.ПривестиЗначение(ПараметрыГрафика.СтатьяДляУчетаПроцентов);
	ПараметрыГрафика.СтатьяЕжемесячнойКомиссии = ОписаниеТипов.ПривестиЗначение(ПараметрыГрафика.СтатьяЕжемесячнойКомиссии);
	
    // Подготовим параметры расписания
	ПараметрыРасписания.ПорядокПериодов      = 0;
	ПараметрыРасписания.ПорядокДнейНедели    = 0;
	ПараметрыРасписания.ШаблонДнейНедели     = "";
	ПараметрыРасписания.ШаблонЧиселМесяца    = "";
	ПараметрыРасписания.ШаблонНомеровМесяцев = "";
	Если ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		ПараметрыРасписания.Периодичность = ПредопределенноеЗначение("Перечисление.СпособыПовторовСобытий.ВУказанныеДаты");
	Иначе
		ПараметрыРасписания.Периодичность = ПредопределенноеЗначение("Перечисление.СпособыПовторовСобытий.НеИспользовать");
	КонецЕсли; 
	ПараметрыРасписания.ОписаниеРасписания = ПлановыеОперацииКлиентСервер.ПредставлениеРасписания(ПараметрыРасписания, ПроизвольныеДатыРасписания);
	
	ПоместитьВХранилищеТаблицуПроизвольныхДат();
	
	// Сохраняем данные
	Если ВладелецФормы <> Неопределено Тогда
		ВладелецФормы.СохранитьРасписание = Истина;
	КонецЕсли; 
	ПлановыеОперацииКлиент.СохранитьИзмененияРедактораРасписания(ЭтотОбъект, ВладелецФормы, СохранятьНезависимоОтВладельца);
	
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПоместитьВХранилищеТаблицуПроизвольныхДат()

	АдресПроизвольныхДатРасписания = ПоместитьВоВременноеХранилище(ПроизвольныеДатыРасписания.Выгрузить(Новый Структура("ВнеплановаяОперация", Ложь)), ИДФормыВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоПлатежа(СтрокаГрафика)

	Если ВозможностьВыполнитьКоманду <> "Учесть новый платеж по графику" И НЕ МожноВыполнятьКоманды("Учесть новый платеж по графику") Тогда
		Возврат;
	КонецЕсли; 
	
	// Создаем документ по шаблону:
	ПараметрыФормыНовогоДокумента = Новый Структура;
	ПараметрыФормыНовогоДокумента.Вставить("ЗначениеКопирования", ПараметрыГрафика.ШаблонОперации);
	СтруктураЗаполнения = Новый Структура("ЭтоШаблон,Дата,СуммаДолга,СуммаПроцентов,СуммаКомиссии", 
		Ложь, СтрокаГрафика.ПлановаяДата, СтрокаГрафика.СуммаДолга, СтрокаГрафика.СуммаПроцентов, СтрокаГрафика.СуммаКомиссии);
	ПараметрыФормыНовогоДокумента.Вставить("ЗначенияЗаполнения",  СтруктураЗаполнения);
	ПараметрыФормыНовогоДокумента.Вставить("ВладелецРасписания",  ПараметрыГрафика.ШаблонОперации);
	ПараметрыФормыНовогоДокумента.Вставить("ПлановаяДата",        СтрокаГрафика.ПлановаяДата);
	ПараметрыФормыНовогоДокумента.Вставить("АктуальнаяДата",      СтрокаГрафика.ПлановаяДата);
	
	Если ВидДолга = ПредопределенноеЗначение("Перечисление.ТипыДолгов.ПолученныйКредит") Тогда
		ОткрытьФорму("Документ.МыВернулиДолг.ФормаОбъекта", ПараметрыФормыНовогоДокумента, ЭтотОбъект);
	Иначе
		ОткрытьФорму("Документ.НамВернулиДолг.ФормаОбъекта", ПараметрыФормыНовогоДокумента, ЭтотОбъект);
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Функция ПолучитьСписокОперацийПоСтроке(ПараметрыОтбора)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начало", ПараметрыОтбора.Начало);
	Запрос.УстановитьПараметр("Окончание", ПараметрыОтбора.Окончание);
	Запрос.УстановитьПараметр("Долг", ПараметрыОтбора.Долг);
	Запрос.УстановитьПараметр("ПлановаяОперация", ПараметрыОтбора.ПлановаяОперация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Свод.Регистратор,
	|	Свод.Дата,
	|	ВЫРАЗИТЬ(Свод.ОписаниеОперации КАК СТРОКА(1000)) КАК ОписаниеОперации,
	|	Свод.Тип
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подзапрос.Регистратор КАК Регистратор,
	|		ОбщийЖурналДокументов.Дата КАК Дата,
	|		ОбщийЖурналДокументов.СуммаПоступления КАК СуммаПоступления,
	|		ОбщийЖурналДокументов.ВалютаПоступления КАК ВалютаПоступления,
	|		ОбщийЖурналДокументов.СуммаСписания КАК СуммаСписания,
	|		ОбщийЖурналДокументов.ВалютаСписания КАК ВалютаСписания,
	|		ОбщийЖурналДокументов.ОписаниеОперации КАК ОписаниеОперации,
	|		ОбщийЖурналДокументов.Тип КАК Тип
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЖурналОперацийСубконто.Регистратор КАК Регистратор
	|		ИЗ
	|			РегистрБухгалтерии.ЖурналОпераций.Субконто КАК ЖурналОперацийСубконто
	|		ГДЕ
	|			ЖурналОперацийСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Долги)
	|			И ЖурналОперацийСубконто.Значение = &Долг
	|			И ЖурналОперацийСубконто.Период МЕЖДУ &Начало И &Окончание
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЖурналОперацийСубконто.Регистратор) КАК Подзапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ОбщийЖурналДокументов КАК ОбщийЖурналДокументов
	|			ПО Подзапрос.Регистратор = ОбщийЖурналДокументов.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбщийЖурналДокументов.Ссылка,
	|		ОбщийЖурналДокументов.Дата,
	|		ОбщийЖурналДокументов.СуммаПоступления,
	|		ОбщийЖурналДокументов.ВалютаПоступления,
	|		ОбщийЖурналДокументов.СуммаСписания,
	|		ОбщийЖурналДокументов.ВалютаСписания,
	|		ОбщийЖурналДокументов.ОписаниеОперации,
	|		ОбщийЖурналДокументов.Тип
	|	ИЗ
	|		ЖурналДокументов.ОбщийЖурналДокументов КАК ОбщийЖурналДокументов
	|	ГДЕ
	|		ОбщийЖурналДокументов.Ссылка = &ПлановаяОперация) КАК Свод
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(Свод.ОписаниеОперации КАК СТРОКА(1000)),
	|	Свод.Регистратор,
	|	Свод.Дата,
	|	Свод.Тип
	|
	|УПОРЯДОЧИТЬ ПО
	|	Свод.Регистратор,
	|	Свод.Дата";
	
	Результат = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Результат.Добавить(Новый Структура("ИмяМетаданных, Значение", Метаданные.НайтиПоТипу(Выборка.Тип).ПолноеИмя(), Выборка.Регистратор), 
			Формат(Выборка.Дата, "ДФ=дд.ММ.гг") + ": " + Выборка.ОписаниеОперации );
	
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции
 
&НаСервере
Процедура ПроизвольныеДатыРасписанияСуммаДолгаПриИзмененииСервер(ИДСтроки)

	СтрокаГрафика = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ИДСтроки);
	СтрокаГрафика.ВсегоКУплате   = СтрокаГрафика.СуммаПроцентов + СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаКомиссии;
	СтрокаГрафика.ОстатокНаКонец = СтрокаГрафика.ОстатокНаначало - СтрокаГрафика.СуммаДолга;
	
	// пересчет нужно начинать со следующей строки:
	Если СтрокаГрафика.НомерСтроки < ПроизвольныеДатыРасписания.Количество() Тогда
		ПересчитатьГрафикСервер(ПроизвольныеДатыРасписания[СтрокаГрафика.НомерСтроки].ПолучитьИдентификатор());
	КонецЕсли;
	 

КонецПроцедуры

&НаСервере
Процедура ПроизвольныеДатыРасписанияСуммаПроцентовПриИзмененииСервер(ИДСтроки)

	СтрокаГрафика = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ИДСтроки);
	СтрокаГрафика.ВсегоКУплате = СтрокаГрафика.СуммаПроцентов + СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаКомиссии;
	СтрокаГрафика.ОстатокНаКонец = СтрокаГрафика.ОстатокНаначало - СтрокаГрафика.СуммаДолга;
	
	// пересчет нужно начинать со следующей строки:
	Если СтрокаГрафика.НомерСтроки < ПроизвольныеДатыРасписания.Количество() Тогда
		ПересчитатьГрафикСервер(ПроизвольныеДатыРасписания[СтрокаГрафика.НомерСтроки].ПолучитьИдентификатор());
	КонецЕсли;
	 
КонецПроцедуры

&НаСервере
Процедура ПроизвольныеДатыРасписанияСуммаКомиссииПриИзмененииСервер(ИДСтроки)

	СтрокаГрафика = ПроизвольныеДатыРасписания.НайтиПоИдентификатору(ИДСтроки);
	СтрокаГрафика.ВсегоКУплате =  СтрокаГрафика.СуммаПроцентов + СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаКомиссии;
	// пересчет нужно начинать со следующей строки:
	Если СтрокаГрафика.НомерСтроки < ПроизвольныеДатыРасписания.Количество() Тогда
		ПересчитатьГрафикСервер(ПроизвольныеДатыРасписания[СтрокаГрафика.НомерСтроки].ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура УдалитьУстановитьДатуЗакрытияДолга()

	
	Для Каждого СтрокаРасписания Из ПроизвольныеДатыРасписания Цикл
		СтрокаРасписания.ДолгЗакрыт   = УдалитьДолгЗакрыт И СтрокаРасписания.ПлановаяДата >= ПараметрыГрафика.ДатаЗакрытияДолга;
		СтрокаРасписания.Пропустить   = СтрокаРасписания.ДолгЗакрыт;
	КонецЦикла; 

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьИмяВидаДокумента(Знач СсылкаНаДокумент) Экспорт

	Возврат СсылкаНаДокумент.Метаданные().Имя;

КонецФункции

&НаКлиенте
Функция МожноВыполнятьКоманды(ЗаголовокКоманды)

	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Для выполнения команды ""%1"" нужно записать изменения.
			|Записать изменения и выполнить команду?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ЗаголовокКоманды);
		
		ДополнительныеПарамтеры = Новый Структура("ЗаголовокКоманды", ЗаголовокКоманды);
		ОбработчикОтвета = Новый ОписаниеОповещения("МожноВыполнятьКомандыЗавершение", ЭтотОбъект, ДополнительныеПарамтеры);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат Ложь;
		
	КонецЕсли; 

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуПроцентовДляРазовогоПлатежа()

	Если ЗадатьПроцентыИКомиссии 
		И ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") 
		И ЗначениеЗаполнено(ПараметрыГрафика.ДатаВозникновенияДолга) И ЗначениеЗаполнено(ПараметрыГрафика.ПлановаяДатаПогашения)
		И ПараметрыГрафика.ДатаВозникновенияДолга < ПараметрыГрафика.ПлановаяДатаПогашения Тогда
		
		СуммаПроцентовДляРазовогоПлатежа = ПлановыеОперацииКлиентСервер.СуммаПроцентовЗаПериод(
												ПараметрыГрафика.СуммаДолга, 
												ПараметрыГрафика.ПроцентнаяСтавка, 
												ПараметрыГрафика.ДатаВозникновенияДолга, 
												ПараметрыГрафика.ПлановаяДатаПогашения);
		
	Иначе
		СуммаПроцентовДляРазовогоПлатежа = 0;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКошелекДляНакоплений(Кошелек)

	Возврат ЗначениеЗаполнено(Кошелек) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Кошелек, "ИспользоватьДляНакоплений");

КонецФункции
 

////////////////////////////////////////////////////////////////////////////////
// Пересчеты графика платежей

&НаСервере
Процедура ОбновитьВесьГрафик()

	ПараметрыГрафика.НеПересчитыватьПриРедактировании = Ложь;
	ПроизвольныеДатыРасписания.Очистить();
	ЗаполнитьГрафикДатами();
	ОбновитьГрафикПлатежей();
	ПересчитатьГрафикСервер();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьГрафикДатами()

	ГрафикПогашения          = ПроизвольныеДатыРасписания;
	СпособПогашения          = ПараметрыГрафика.СпособПогашения;
	ДатаПолучения            = ПараметрыГрафика.ДатаВозникновенияДолга;
	КоличествоМесяцев        = ПараметрыГрафика.СрокМесяцев;
	ДеньМесяцаДляРасчетов    = ПараметрыГрафика.ДеньМесяцаДляРасчетов;
	КонецСрока               = КонецМесяца(ДобавитьМесяц(ДатаПолучения, КоличествоМесяцев - 1));
	ДатаЗакрытияДолга        = ПараметрыГрафика.ДатаЗакрытияДолга;
	НачальнаяСуммаДолга      = ПараметрыГрафика.СуммаДолга;
	
	ПредыдущаяДата = ДатаПолучения;
	ДатаПлатежа    = ДатаПолучения;
	
	Пока КонецМесяца(ДатаПлатежа) <= КонецСрока  Цикл
		
		ПлановаяДата = Дата(Год(ДатаПлатежа), Месяц(ДатаПлатежа), Мин(ДеньМесяцаДляРасчетов, День(КонецМесяца(ДатаПлатежа))));
		ИскомаяДата  = ПлановаяДата;
		
		СтрокаРасписания = ГрафикПогашения.НайтиСтроки(Новый Структура("ПлановаяДата", ИскомаяДата));
		Если СтрокаРасписания.Количество() = 0 Тогда
			СтрокаРасписания = ГрафикПогашения.Добавить();
		Иначе
			СтрокаРасписания = СтрокаРасписания[0];
		КонецЕсли; 
		СтрокаРасписания.ПлановаяДата = ПлановаяДата;
		СтрокаРасписания.ДолгЗакрыт   = УдалитьДолгЗакрыт И ПлановаяДата >= ДатаЗакрытияДолга;
		
		ДатаПлатежа      = ДобавитьМесяц(ДатаПлатежа, 1);
		
	КонецЦикла;
	
	ГрафикПогашения.Сортировать("ПлановаяДата");
	
	ТелоДолга = -НачальнаяСуммаДолга;
	Счетчик = 0;
	СтрокиДляУдаления = Новый Массив;
	Для Каждого СтрокаГрафика Из ГрафикПогашения Цикл
		
		Если (СтрокаГрафика.ПлановаяДата < НачалоМесяца(ДатаПолучения) И НЕ СтрокаГрафика.ЕстьОперации)
				ИЛИ (СтрокаГрафика.ПлановаяДата > ДатаПлатежа И НЕ СтрокаГрафика.ЕстьОперации) Тогда
			СтрокиДляУдаления.Добавить(СтрокаГрафика);
			Продолжить;
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
		СтрокаГрафика.НомерСтроки = Счетчик;
		СтрокаГрафика.ОстатокНаначало = ТелоДолга;
		ТелоДолга                     = ТелоДолга - СтрокаГрафика.СуммаДолга;
		СтрокаГрафика.ОстатокНаКонец  = ТелоДолга;
		
	КонецЦикла; 
	
	Для Каждого УдаляемаяСтрока Из СтрокиДляУдаления Цикл
		ГрафикПогашения.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрафикПлатежей()

	Долг = ПараметрыГрафика.Долг;
	
	ДатаПоследнегоВыполненияПлана = ПлановыеОперации.ПолучитьДатуПоследнейВыполненнойОперации(ПараметрыРасписания.ВладелецРасписания);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Шаблон", ПараметрыРасписания.ВладелецРасписания);
	Запрос.УстановитьПараметр("Долг", Долг);
	Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	Запрос.УстановитьПараметр("ВалютаДолга", Долг.Валюта);
	ТаблицаГрафика = ПроизвольныеДатыРасписания.Выгрузить(, "ПлановаяДата,СуммаДолга,СуммаПроцентов,СуммаКомиссии,ВсегоКУплате,Пропустить,ПлановаяОперация");
	Запрос.УстановитьПараметр("ТаблицаГрафика", ТаблицаГрафика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаГрафика.ПлановаяДата, МЕСЯЦ) КАК МесяцПериода,
	|	ТаблицаГрафика.ПлановаяДата КАК Период,
	|	ТаблицаГрафика.СуммаДолга КАК СуммаДолга,
	|	ТаблицаГрафика.СуммаПроцентов КАК СуммаПроцентов,
	|	ТаблицаГрафика.СуммаКомиссии КАК СуммаКомиссии,
	|	ТаблицаГрафика.Пропустить КАК Пропустить,
	|	ТаблицаГрафика.ПлановаяОперация КАК ПлановаяОперация,
	|	ТаблицаГрафика.ВсегоКУплате КАК ВсегоКУплате
	|ПОМЕСТИТЬ ТаблицаГрафика
	|ИЗ
	|	&ТаблицаГрафика КАК ТаблицаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаГрафика.МесяцПериода КАК МесяцПериода,
	|	ТаблицаГрафика.Период КАК Период,
	|	ТаблицаГрафика.СуммаДолга КАК СуммаДолга,
	|	ТаблицаГрафика.СуммаПроцентов КАК СуммаПроцентов,
	|	ТаблицаГрафика.СуммаКомиссии КАК СуммаКомиссии,
	|	ТаблицаГрафика.Пропустить КАК Пропустить,
	|	ЕСТЬNULL(ДатыРасписаний.ПлановаяОперация, ТаблицаГрафика.ПлановаяОперация) КАК ПлановаяОперация,
	|	ТаблицаГрафика.ВсегоКУплате КАК ВсегоКУплате
	|ПОМЕСТИТЬ ДатыГрафика
	|ИЗ
	|	ТаблицаГрафика КАК ТаблицаГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ПО (ТаблицаГрафика.МесяцПериода = НАЧАЛОПЕРИОДА(ДатыРасписаний.ПлановаяДата, МЕСЯЦ))
	|			И (ДатыРасписаний.ВладелецРасписания = &Шаблон)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ДатыГрафика.Период, ЖурналОстаткиИОбороты.Период), МЕСЯЦ) КАК МесяцПериода,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(ДатыГрафика.Период, ЖурналОстаткиИОбороты.Период), ДЕНЬ)) КАК Период,
	|	МАКСИМУМ(ЖурналОстаткиИОбороты.Период) КАК МаксимальнаяДатаОперации,
	|	ЕСТЬNULL(ЖурналОстаткиИОбороты.Валюта, &ВалютаДолга) КАК Валюта,
	|	СУММА(ЕСТЬNULL(-ЖурналОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток, 0)) КАК ОстатокНаНачало,
	|	СУММА(ЕСТЬNULL(ЖурналОстаткиИОбороты.ВалютнаяСуммаОборотДт, 0)) КАК ОборотДт,
	|	СУММА(ЕСТЬNULL(ЖурналОстаткиИОбороты.ВалютнаяСуммаОборотКт, 0)) КАК ОборотКт,
	|	СУММА(ЕСТЬNULL(-ЖурналОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток, 0)) КАК ОстатокНаКонец,
	|	МАКСИМУМ(ЕСТЬNULL(ДатыГрафика.СуммаДолга, 0)) КАК СуммаДолга,
	|	МАКСИМУМ(ЕСТЬNULL(ДатыГрафика.СуммаПроцентов, 0)) КАК СуммаПроцентов,
	|	МАКСИМУМ(ЕСТЬNULL(ДатыГрафика.СуммаКомиссии, 0)) КАК СуммаКомиссии,
	|	МАКСИМУМ(ЕСТЬNULL(ДатыГрафика.Пропустить, ЛОЖЬ)) КАК Пропустить,
	|	МАКСИМУМ(ЕСТЬNULL(ДатыГрафика.ПлановаяОперация, НЕОПРЕДЕЛЕНО)) КАК ПлановаяОперация,
	|	МАКСИМУМ(ЕСТЬNULL(ДатыГрафика.ВсегоКУплате, 0)) КАК ВсегоКУплате,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЖурналОстаткиИОбороты.ВалютнаяСуммаОборотДт ЕСТЬ NULL 
	|					И ЖурналОстаткиИОбороты.ВалютнаяСуммаОборотКт ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьОперации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДатыГрафика.Период ЕСТЬ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВнеплановаяОперация
	|ПОМЕСТИТЬ ПолныйСписокОпераций
	|ИЗ
	|	ДатыГрафика КАК ДатыГрафика
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналОпераций.ОстаткиИОбороты(, , МЕСЯЦ, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Долги), Субконто1 = &Долг) КАК ЖурналОстаткиИОбороты
	|		ПО (НАЧАЛОПЕРИОДА(ДатыГрафика.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЖурналОстаткиИОбороты.Период, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ДатыГрафика.Период, ЖурналОстаткиИОбороты.Период), МЕСЯЦ),
	|	ЕСТЬNULL(ЖурналОстаткиИОбороты.Валюта, &ВалютаДолга)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.Период КАК Период,
	|	Подзапрос.Валюта КАК Валюта,
	|	Подзапрос.МаксПериод КАК МаксПериод,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыГрафика.Период КАК Период,
	|		ДатыГрафика.Валюта КАК Валюта,
	|		МАКСИМУМ(КурсыВалют.Период) КАК МаксПериод
	|	ИЗ
	|		ПолныйСписокОпераций КАК ДатыГрафика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО ДатыГрафика.Валюта = КурсыВалют.Валюта
	|				И ДатыГрафика.Период >= КурсыВалют.Период
	|				И (КурсыВалют.БазоваяВалюта = &ВалютаУчета)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыГрафика.Период,
	|		ДатыГрафика.Валюта) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Подзапрос.Валюта = КурсыВалют.Валюта
	|			И Подзапрос.МаксПериод = КурсыВалют.Период
	|			И (КурсыВалют.БазоваяВалюта = &ВалютаУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПолныйСписокОпераций.МаксимальнаяДатаОперации) КАК МаксимальнаяДатаОперации
	|ИЗ
	|	ПолныйСписокОпераций КАК ПолныйСписокОпераций
	|ГДЕ
	|	ПолныйСписокОпераций.МаксимальнаяДатаОперации < ДАТАВРЕМЯ(3999, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыГрафика.Период КАК Период,
	|	ДатыГрафика.МесяцПериода КАК МесяцПериода,
	|	СУММА(ВЫРАЗИТЬ(ДатыГрафика.ОстатокНаНачало * ЕСТЬNULL(КурсыВалют.Курс, 0) * ЕСТЬNULL(КурсВалютыДолга.Кратность, 0) / (ЕСТЬNULL(КурсВалютыДолга.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1)) КАК ЧИСЛО(14, 2))) КАК ФактическийОстатокНаНаначло,
	|	СУММА(ВЫРАЗИТЬ(ДатыГрафика.ОборотДт * ЕСТЬNULL(КурсыВалют.Курс, 0) * ЕСТЬNULL(КурсВалютыДолга.Кратность, 0) / (ЕСТЬNULL(КурсВалютыДолга.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1)) КАК ЧИСЛО(14, 2))) КАК ОборотДт,
	|	СУММА(ВЫРАЗИТЬ(ДатыГрафика.ОборотКт * ЕСТЬNULL(КурсыВалют.Курс, 0) * ЕСТЬNULL(КурсВалютыДолга.Кратность, 0) / (ЕСТЬNULL(КурсВалютыДолга.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1)) КАК ЧИСЛО(14, 2))) КАК ОборотКт,
	|	СУММА(ВЫРАЗИТЬ(ДатыГрафика.ОстатокНаКонец * ЕСТЬNULL(КурсыВалют.Курс, 0) * ЕСТЬNULL(КурсВалютыДолга.Кратность, 0) / (ЕСТЬNULL(КурсВалютыДолга.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1)) КАК ЧИСЛО(14, 2))) КАК ФактическийОстатокНаКонец,
	|	ДатыГрафика.СуммаДолга КАК СуммаДолга,
	|	МАКСИМУМ(ДатыГрафика.ЕстьОперации) КАК ЕстьОперации,
	|	МАКСИМУМ(ДатыГрафика.ВнеплановаяОперация) КАК ВнеплановаяОперация,
	|	ДатыГрафика.СуммаПроцентов КАК СуммаПроцентов,
	|	ДатыГрафика.СуммаКомиссии КАК СуммаКомиссии,
	|	ДатыГрафика.ВсегоКУплате КАК ВсегоКУплате,
	|	МАКСИМУМ(ДатыГрафика.Пропустить) КАК Пропустить,
	|	МАКСИМУМ(ДатыГрафика.ПлановаяОперация) КАК ПлановаяОперация,
	|	Подзапрос.Регистратор,
	|	Подзапрос.Регистратор.Дата КАК ДатаРегистратора,
	|	ЕСТЬNULL(Подзапрос.КоличествоРегистраторов, 0) КАК КоличествоРегистраторов,
	|	Подзапрос.ОписаниеОперации
	|ИЗ
	|	ПолныйСписокОпераций КАК ДатыГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО (НАЧАЛОПЕРИОДА(ДатыГрафика.Период, ДЕНЬ) = КурсыВалют.Период)
	|			И ДатыГрафика.Валюта = КурсыВалют.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютыДолга
	|		ПО (НАЧАЛОПЕРИОДА(ДатыГрафика.Период, ДЕНЬ) = КурсВалютыДолга.Период)
	|			И (КурсВалютыДолга.Валюта = &ВалютаДолга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НАЧАЛОПЕРИОДА(ЖурналОперацийСубконто.Период, МЕСЯЦ) КАК Период,
	|			МАКСИМУМ(ЖурналОперацийСубконто.Регистратор) КАК Регистратор,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналОперацийСубконто.Регистратор) КАК КоличествоРегистраторов,
	|			МАКСИМУМ(ВЫРАЗИТЬ(ЖурналОперацийСубконто.Регистратор.ОписаниеОперации КАК СТРОКА(200))) КАК ОписаниеОперации
	|		ИЗ
	|			РегистрБухгалтерии.ЖурналОпераций.Субконто КАК ЖурналОперацийСубконто
	|		ГДЕ
	|			ЖурналОперацийСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Долги)
	|			И ЖурналОперацийСубконто.Значение = &Долг
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НАЧАЛОПЕРИОДА(ЖурналОперацийСубконто.Период, МЕСЯЦ)) КАК Подзапрос
	|		ПО ДатыГрафика.МесяцПериода = Подзапрос.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыГрафика.Период,
	|	ДатыГрафика.МесяцПериода,
	|	ДатыГрафика.СуммаДолга,
	|	ДатыГрафика.СуммаПроцентов,
	|	ДатыГрафика.СуммаКомиссии,
	|	ДатыГрафика.ВсегоКУплате,
	|	Подзапрос.Регистратор,
	|	Подзапрос.ОписаниеОперации,
	|	ЕСТЬNULL(Подзапрос.КоличествоРегистраторов, 0),
	|	Подзапрос.Регистратор.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаСтатистики = ПакетРезультатов[ПакетРезультатов.Количество() - 2].Выбрать();
	Если ВыборкаСтатистики.Следующий() Тогда
		МаксимальнаяДатаОперации = ВыборкаСтатистики.МаксимальнаяДатаОперации;
	Иначе
		МаксимальнаяДатаОперации = ТекущаяДатаСеанса();
	КонецЕсли; 
	Если ЗначениеЗаполнено(МаксимальнаяДатаОперации) Тогда
		МаксимальнаяДатаОперации = КонецМесяца(МаксимальнаяДатаОперации);
	Иначе
		МаксимальнаяДатаОперации = КонецМесяца(ПараметрыГрафика.ДатаВозникновенияДолга);
	КонецЕсли; 
	
	ДатаЗакрытияДолга        = ПараметрыГрафика.ДатаЗакрытияДолга;
	
	ТаблицаДат = ПакетРезультатов[ПакетРезультатов.Количество() - 1].Выгрузить();
	ОстатокНаНачало = ПараметрыГрафика.СуммаДолга;
	Если ТаблицаДат.Количество() > 0 Тогда
		ФактОстатокНаНачало = ТаблицаДат[0].ФактическийОстатокНаНаначло;
	КонецЕсли; 
	Счетчик = 1;
	Для Каждого СтрокаДаты Из ТаблицаДат Цикл
		
		Если СтрокаДаты.Период >= '39990101' Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаРасписания = ПроизвольныеДатыРасписания.НайтиСтроки(Новый Структура("ПлановаяДата", СтрокаДаты.Период));
		Если СтрокаРасписания.Количество() = 0 Тогда
			СтрокаРасписания = ПроизвольныеДатыРасписания.Добавить();
			СтрокаРасписания.ПлановаяДата = СтрокаДаты.Период;
		Иначе
			СтрокаРасписания = СтрокаРасписания[0];
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(СтрокаРасписания, СтрокаДаты, , );
		
		
		СтрокаРасписания.ОстатокНаНачало = ОстатокНаначало;
		СтрокаРасписания.ВсегоКУплате  = СтрокаРасписания.СуммаПроцентов + СтрокаРасписания.СуммаКомиссии + СтрокаРасписания.СуммаДолга;
		СтрокаРасписания.ОстатокНаКонец = ОстатокНаНачало 
				- СтрокаРасписания.СуммаДолга; 
				
		// Плановая операция молга быть создана пользователем и не проведена!
		// Ссылка на нее сохраняется в датах расписания, но движений нет
		СписокРегистраторов = Новый Массив;
		Если ЗначениеЗаполнено(СтрокаДаты.ПлановаяОперация) Тогда
			СписокРегистраторов.Добавить(СтрокаДаты.ПлановаяОперация);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаДаты.Регистратор) И СтрокаДаты.ПлановаяОперация <> СтрокаДаты.Регистратор Тогда
			СписокРегистраторов.Добавить(СтрокаДаты.Регистратор);
		КонецЕсли; 
		
		КоличествоДокументов = Макс(СтрокаРасписания.КоличествоРегистраторов, СписокРегистраторов.Количество());
		
		Если КоличествоДокументов = 0 Тогда
			
			СтрокаРасписания.ФактОперация = Неопределено;
			СтрокаРасписания.ОписаниеРегистратора = "";
			СтрокаРасписания.РазрешеноСоздаватьПлатеж = СтрокаРасписания.Пропустить = Ложь И СтрокаРасписания.ПлановаяДата >= МаксимальнаяДатаОперации;
			
		ИначеЕсли КоличествоДокументов = 1 Тогда
			
			Если ЗначениеЗаполнено(СтрокаДаты.Регистратор) Тогда
				СтрокаРасписания.ФактОперация = СтрокаДаты.Регистратор;
				СтрокаРасписания.ОписаниеРегистратора = Формат(СтрокаДаты.ДатаРегистратора, "ДФ=дд.ММ.гг") + ": " + СтрокаДаты.ОписаниеОперации;
			Иначе
				СтрокаРасписания.ФактОперация = СписокРегистраторов[0];
				СтрокаРасписания.ОписаниеРегистратора = Формат(СтрокаРасписания.ФактОперация.Дата, "ДФ=дд.ММ.гг") + ": " + СтрокаРасписания.ФактОперация.ОписаниеОперации;
			КонецЕсли; 
			
		Иначе
			
			СтрокаРасписания.ФактОперация = Неопределено;
			СтрокаПрописью = ЧислоПрописью(КоличествоДокументов, "Л = ru_RU; НД = Ложь", "операция,операции,операций,ж");
			СтрокаРасписания.ОписаниеРегистратора = Строка(КоличествоДокументов) + " " + СтрЗаменить(Сред(СтрокаПрописью, Найти(ВРЕГ(СтрокаПрописью), "ОПЕРАЦ")), "00", "");
			
		КонецЕсли; 
		
		СтрокаРасписания.КоличествоРегистраторов = КоличествоДокументов;
		
		ОстатокНаНачало = СтрокаРасписания.ОстатокНаКонец;
		
		Если СтрокаРасписания.ЕстьОперации Тогда
			Если ВидДолга = Перечисления.ТипыДолгов.ПолученныйКредит Тогда
				СтрокаРасписания.ФактИзменениеДолга = СтрокаРасписания.ОборотДт - СтрокаРасписания.ОборотКт;
			Иначе
				СтрокаРасписания.ФактИзменениеДолга = СтрокаРасписания.ОборотКт - СтрокаРасписания.ОборотДт;
				СтрокаРасписания.ФактическийОстатокНаКонец = -СтрокаРасписания.ФактическийОстатокНаКонец;
			КонецЕсли; 
			ФактОстатокНаНачало = СтрокаРасписания.ФактическийОстатокНаКонец;
		ИначеЕсли СтрокаРасписания.ПлановаяДата <= МаксимальнаяДатаОперации Тогда
			СтрокаРасписания.ФактическийОстатокНаНаначло = ФактОстатокНаНачало;
			СтрокаРасписания.ФактическийОстатокНаКонец   = ФактОстатокНаНачало;
		КонецЕсли; 
		
		СтрокаРасписания.ДолгЗакрыт   = УдалитьДолгЗакрыт И СтрокаРасписания.ПлановаяДата >= ДатаЗакрытияДолга;
		
		СтрокаРасписания.НомерСтроки = Счетчик;
		Счетчик = Счетчик + 1;
		
	КонецЦикла; 
	
	ПроизвольныеДатыРасписания.Сортировать("ПлановаяДата");
	
КонецПроцедуры
 
&НаСервере
Процедура ПересчитатьГрафикСервер(ИДстрокиГрафика = Неопределено)

	ГрафикПогашения          = ПроизвольныеДатыРасписания;
	СпособПогашения          = ПараметрыГрафика.СпособПогашения;
	СуммаКредита             = ПараметрыГрафика.СуммаДолга;
	СтавкаГодовых            = ПараметрыГрафика.ПроцентнаяСтавка / 100;
	СтавкаМесяца             = СтавкаГодовых / 12;
	ДатаПолучения            = ПараметрыГрафика.ДатаВозникновенияДолга;
	КоличествоМесяцев        = ПараметрыГрафика.СрокМесяцев;
	ТекущийМесяц             = НачалоМесяца(ТекущаяДатаКлиентСервер());
	КонецСрока               = КонецМесяца(ДобавитьМесяц(ДатаПолучения, КоличествоМесяцев));
	ДеньМесяцаДляРасчетов    = ПараметрыГрафика.ДеньМесяцаДляРасчетов;
	ЕжемесячнаяКомиссия      = ПараметрыГрафика.СуммаЕжемесячнойКомиссии;
	НачислятьПроценты        = ПараметрыГрафика.ПроцентнаяСтавка <> 0;
	РазмерГода               = ПараметрыГрафика.ДнейВГоду;
	
	Если СпособПогашения = Перечисления.СпособыПогашенияКредита.Аннуитет Тогда
		Если СтавкаМесяца = 0 ИЛИ КоличествоМесяцев = 0 Тогда
			КоэффициентПлатежа = ?(КоличествоМесяцев = 0, СуммаКредита, СуммаКредита / (КоличествоМесяцев - 1));
			ЕжемесячныйПлатеж  = КоэффициентПлатежа;
		Иначе
			КоэффициентПлатежа = СтавкаМесяца / (1 - Pow( 1 + СтавкаМесяца, -((КоличествоМесяцев-1)-1) )); //СТЕПЕНЬ((1+Ставка/12);-((Срок-1)-1))
			ЕжемесячныйПлатеж  = Окр(СуммаКредита * КоэффициентПлатежа, 2, 1);
		КонецЕсли;
	ИначеЕсли СпособПогашения = Перечисления.СпособыПогашенияКредита.Вручную И ГрафикПогашения.Количество() = 0 Тогда
		ПерваяСтрока = ГрафикПогашения.Добавить();
		ПерваяСтрока.ПлановаяДата = ДатаПолучения;
	КонецЕсли; 
	
	ПредыдущаяДата       = ДатаПолучения;
	ТелоДолга            = СуммаКредита;
	
	Если ИДстрокиГрафика = Неопределено Тогда
		Если ГрафикПогашения.Количество() = 0 Тогда
			ТекущаяСтрокаГрафика = Неопределено;
			ДатаПлатежа          = ДатаПолучения;
		Иначе
			ТекущаяСтрокаГрафика = ГрафикПогашения[0];
			ДатаПлатежа          = ГрафикПогашения[0].ПлановаяДата;
		КонецЕсли; 
	Иначе
		ТекущаяСтрокаГрафика = ГрафикПогашения.НайтиПоИдентификатору(ИДстрокиГрафика);
		ДатаПлатежа          = ТекущаяСтрокаГрафика.ПлановаяДата;
	КонецЕсли;
	
	Если СпособПогашения = Перечисления.СпособыПогашенияКредита.Вручную ИЛИ ПараметрыГрафика.НеПересчитыватьПриРедактировании Тогда
		
		Для каждого СтрокаГрафика Из ГрафикПогашения Цикл
			
			Если ИДстрокиГрафика = Неопределено Тогда
				// пересчитывается весь график по порядку
			Иначе
				// пересчитывать нужно с указанной строки 
				Если СтрокаГрафика.НомерСтроки < ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					Продолжить;
				ИначеЕсли СтрокаГрафика.НомерСтроки = ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					// запомним предыдущую дату и остаток
					ПредыдущаяДата    = СтрокаГрафика.ПлановаяДата;
					ТелоДолга         = СтрокаГрафика.ОстатокНаКонец;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаГрафика.ОстатокНаначало = ТелоДолга;
			
			ТелоДолга                    = ТелоДолга - СтрокаГрафика.СуммаДолга;
			КоличествоМесяцев            = КоличествоМесяцев - 1;
			
			СтрокаГрафика.ОстатокНаКонец = ТелоДолга;
			
			ПредыдущаяДата   = СтрокаГрафика.ПлановаяДата;
			ДатаПлатежа      = ДобавитьМесяц(ДатаПлатежа, 1);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаГрафика Из ГрафикПогашения Цикл
			
			Если ИДстрокиГрафика = Неопределено Тогда
				// пересчитывается весь график по порядку
			Иначе
				// пересчитывать нужно с указанной строки 
				Если НЕ ЗначениеЗаполнено(СтрокаГрафика.НомерСтроки) И СтрокаГрафика.ЕстьОперации Тогда
					Продолжить;
				ИначеЕсли СтрокаГрафика.НомерСтроки < ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					Продолжить;
				ИначеЕсли СтрокаГрафика.НомерСтроки = ТекущаяСтрокаГрафика.НомерСтроки - 1 Тогда
					КоличествоМесяцев = КоличествоМесяцев - 1;
					// запомним предыдущую дату и остаток
					ПредыдущаяДата    = СтрокаГрафика.ПлановаяДата;
					ТелоДолга         = СтрокаГрафика.ОстатокНаКонец;
					Если НачалоМесяца(СтрокаГрафика.ПлановаяДата) > НачалоМесяца(ДатаПолучения) Тогда
						ЕжемесячныйПлатеж = ?(СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов <= 0, ЕжемесячныйПлатеж, СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов);
					КонецЕсли; 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаГрафика.ОстатокНаНачало = ТелоДолга;
			СтрокаГрафика.СуммаКомиссии   = ЕжемесячнаяКомиссия;
			
			РасчетнаяСуммаДолга = ТелоДолга;
			
			Если СпособПогашения = Перечисления.СпособыПогашенияКредита.ДифференцированныеПлатежи Тогда
				
				СтрокаГрафика.СуммаДолга = Окр(РасчетнаяСуммаДолга / ?(КоличествоМесяцев <> 0, КоличествоМесяцев, 1), 2, 1);
				Если РазмерГода = 0 Тогда
					ДнейВГоду = Окр((КонецГода(СтрокаГрафика.ПлановаяДата) - НачалоГода(СтрокаГрафика.ПлановаяДата)) / 86400, 2,1);
				Иначе
					ДнейВГоду = РазмерГода;
				КонецЕсли; 
				Дней = Окр((СтрокаГрафика.ПлановаяДата - ПредыдущаяДата) / 86400, 2,1);
				Если НачислятьПроценты Тогда
					СтрокаГрафика.СуммаПроцентов = Окр((РасчетнаяСуммаДолга * СтавкаГодовых * Дней) / ДнейВГоду, 2,1);
				Иначе
					СтрокаГрафика.СуммаПроцентов = 0;
				КонецЕсли;
				
				СтрокаГрафика.ВсегоКУплате     = СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов;
				
			ИначеЕсли СпособПогашения = Перечисления.СпособыПогашенияКредита.Аннуитет Тогда
				
				Если РазмерГода = 0 Тогда
					ДнейВГоду = Окр((КонецГода(СтрокаГрафика.ПлановаяДата) - НачалоГода(СтрокаГрафика.ПлановаяДата)) / 86400, 2,1);
				Иначе
					ДнейВГоду = РазмерГода;
				КонецЕсли; 
				Дней = (КонецМесяца(СтрокаГрафика.ПлановаяДата) - Макс(НачалоМесяца(СтрокаГрафика.ПлановаяДата), ДатаПолучения + 86400))  / 86400;
				Если НачислятьПроценты Тогда
					СтрокаГрафика.СуммаПроцентов = Макс(0, Окр(РасчетнаяСуммаДолга * СтавкаГодовых / ДнейВГоду * Дней, 2,1));
				Иначе
					СтрокаГрафика.СуммаПроцентов = 0;
				КонецЕсли;
				
				Если НачалоМесяца(СтрокаГрафика.ПлановаяДата) = НачалоМесяца(ДатаПолучения) Тогда
					// первый месяц обычно только проценты
					СтрокаГрафика.СуммаДолга = 0;
				Иначе
					СтрокаГрафика.СуммаДолга = Мин(Макс(0, ЕжемесячныйПлатеж - СтрокаГрафика.СуммаПроцентов), РасчетнаяСуммаДолга);
				КонецЕсли; 
				
				СтрокаГрафика.ВсегоКУплате = СтрокаГрафика.СуммаДолга + СтрокаГрафика.СуммаПроцентов + СтрокаГрафика.СуммаКомиссии;
				Если СтрокаГрафика.ВсегоКУплате = 0 Тогда
					СтрокаГрафика.Пропустить = Истина;
				КонецЕсли; 
				
			КонецЕсли;
			
			ТелоДолга                    = ТелоДолга - СтрокаГрафика.СуммаДолга;
			КоличествоМесяцев            = КоличествоМесяцев - 1;
			СтрокаГрафика.ОстатокНаКонец = ТелоДолга;
			
			ПредыдущаяДата   = СтрокаГрафика.ПлановаяДата;
			ДатаПлатежа      = ДобавитьМесяц(ДатаПлатежа, 1);
		
		КонецЦикла;
		 
		Если ТелоДолга <> 0 И СтрокаГрафика <> Неопределено Тогда
			СтрокаГрафика.СуммаДолга     = СтрокаГрафика.СуммаДолга + ТелоДолга;
			СтрокаГрафика.ВсегоКУплате   = СтрокаГрафика.ВсегоКУплате + ТелоДолга;
			СтрокаГрафика.ОстатокНаКонец = СтрокаГрафика.ОстатокНаНачало - СтрокаГрафика.СуммаДолга;
		КонецЕсли; 
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьокончаниеРасписания()

	МаксДата = '00010101';
	ПределПовторения = 2;
	Для Каждого СтрокаДаты Из ПроизвольныеДатыРасписания Цикл
		Если НЕ СтрокаДаты.Пропустить И СтрокаДаты.ПлановаяДата > МаксДата Тогда
			МаксДата = СтрокаДаты.ПлановаяДата;
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыРасписания.ДатаОкончанияРасписания = ?(ЗначениеЗаполнено(МаксДата), МаксДата, ТекущаяДатаКлиентСервер());

КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьНесколькоПлатежейВОдин(СтрокиПлановыхОпераций)

	СтрокаРасписания = СтрокиПлановыхОпераций[СтрокиПлановыхОпераций.Количество() - 1];
	ПараметрыГрафика.ПлановаяДатаПогашения = СтрокаРасписания.ПлановаяДата;
	Если ЗадатьПроцентыИКомиссии Тогда
		СуммаПроцентовДляРазовогоПлатежа          = ПроизвольныеДатыРасписания.Итог("СуммаПроцентов");
		ПараметрыГрафика.СуммаЕжемесячнойКомиссии = ПроизвольныеДатыРасписания.Итог("СуммаКомиссии");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИнформациюОПовторах()

	ПроизвольныеДатыРасписания.Очистить();
	ПараметрыГрафика.СпособПогашения = Неопределено;
	ПараметрыГрафика.СрокМесяцев = 1;
	СохранитьРезультат();
	Закрыть();

КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////
// Завершения процедур, использующих интерактивное взаимодействие с пользователем

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(Ответ = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Модифицированность = Ложь;
	
	СохранитьРезультат();
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницыЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьВесьГрафик();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадатьСпособИГрафикПогашенияПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроизвольныеДатыРасписания.Очистить();
		ЗаполнитьДобавленныеКолонки();
	Иначе
		ЗадатьСпособИГрафикПогашения = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыГрафикаСпособПогашенияОбработкаВыбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыГрафика.СпособПогашения = ДополнительныеПараметры.ВыбранноеЗначение;
		ПреобразоватьНесколькоПлатежейВОдин(ДополнительныеПараметры.СтрокиПлановыхОпераций);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьПовторыЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьИнформациюОПовторах();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьГрафикЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОбновитьВесьГрафик();
		ПроверитьокончаниеРасписания();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура МожноВыполнятьКомандыЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьРезультат(Истина);
		Если ЗадатьСпособИГрафикПогашения И ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж") Тогда
			ЗаполнитьДобавленныеКолонки();
		КонецЕсли;
		ВозможностьВыполнитьКоманду = ДополнительныеПараметры.ЗаголовокКоманды;
		Если ВозможностьВыполнитьКоманду = "Изменить остаток долга" Тогда
			ВвестиНачальныйОстаток(Неопределено);
		ИначеЕсли ВозможностьВыполнитьКоманду = "Изменить остаток процентов" Тогда
			ИзменитьОстатокПроцентов(Неопределено);
		ИначеЕсли ВозможностьВыполнитьКоманду = "Учесть платеж по графику" Тогда
			РасплатитьсяЗаМесяц(Неопределено);
		ИначеЕсли ВозможностьВыполнитьКоманду = "Учесть новый платеж по графику" Тогда
			ОткрытьФормуНовогоПлатежа(Элементы.ПроизвольныеДатыРасписания.ТекущиеДанные);
		КонецЕсли; 
	КонецЕсли; 

	ВозможностьВыполнитьКоманду = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольныеДатыРасписанияВыборЗавершение(Выбор, ДополнительныеПараметры) Экспорт

	Если Выбор <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ", Выбор.Значение.Значение);
		ОткрытьФорму(Выбор.Значение.ИмяМетаданных + ".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти


