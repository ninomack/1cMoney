
&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
// Переменная инициализируется в ОМ "ОнлайнСервисыРегламентированнойОтчетностиКлиент".
Перем ОписаниеОповещенияПослеПроверкиПодключенияКИПП Экспорт;

&НаКлиенте
// Переменная используется извне формы механизмом длительных операций алкоотчетности.
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияМОС;

&НаКлиенте
// Переменная инициализируется по первому запросу
Перем КонтекстЭДОКлиент, КонтекстУжеПодключался;

&НаКлиенте
Перем ФормаОтчета; // Обход ошибки в платформе.

&НаКлиенте
Перем ВыбранныеОрганизации; // для обмена.

&НаКлиенте
Перем НомерОбъекта; // для обмена.

&НаКлиенте
Перем ВыполняетсяЗакрытиеФормы; // флаг для отключения обработки оповещения при закрытии формы.

&НаКлиенте
// Переменная используется механизмом длительных операций алкоотчетности.
Перем СтруктураВспомДанныхДлитОперацииАЛКО;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ЭтоРежимВыбора", ЭтоРежимВыбора);
	Параметры.Свойство("ОтборОрган", ОтборОрган);
	Параметры.Свойство("ТолькоОтправленные", ТолькоОтправленные);
	
	#Область Используется1СОтчетность
	Используется1СОтчетность = РегламентированнаяОтчетность.Используется1СОтчетность();
	Если НЕ Используется1СОтчетность Тогда
		ПроверкаСостоянияИнтеграцииВФонеПриОткрытии
			= РегламентированнаяОтчетностьВызовСервера.СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
	КонецЕсли;
	#КонецОбласти 
	
	ОпределитьПоказыватьЛиПредложениеНаПодключение();
	
	// Инициализируем цвета
	Желтый	= Новый Цвет(251, 225, 81);
	Серый	= Новый Цвет(242, 242, 242);
	Черный	= Новый Цвет(0, 0, 0);
	
	// Определяем организацию по-умолчанию в случае использования одной организации
	Организация = Неопределено;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
			Организация = Модуль.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	// Если организаций больше одной, то используем основную организацию
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	СохраненныйСпособОтбораПериода = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ТолькоУказанныйПериод");
	Если СохраненныйСпособОтбораПериода <> Неопределено Тогда
		ТолькоУказанныйПериод = СохраненныйСпособОтбораПериода;
	КонецЕсли;
	СохраненныйПериодОтчета = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ПериодОтчета");
	Если СохраненныйПериодОтчета <> Неопределено Тогда
		ПериодОтчета = СохраненныйПериодОтчета;
	КонецЕсли;
	СохраненныйНачалоПериода = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_НачалоПериода");
	Если СохраненныйНачалоПериода <> Неопределено Тогда
		НачалоПериода = СохраненныйНачалоПериода;
	КонецЕсли;
	СохраненныйКонецПериода = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_КонецПериода");
	Если СохраненныйКонецПериода <> Неопределено Тогда
		КонецПериода = СохраненныйКонецПериода;
	КонецЕсли;
	
	СохраненнаяОрганизация = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_Организация");
	Если СохраненнаяОрганизация <> Неопределено И НЕ Параметры.Свойство("Организация") И НЕ Параметры.Свойство("ВидОтчета") Тогда
		Организация = СохраненнаяОрганизация;
	КонецЕсли;
	СохраненныйВидОтчета = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ВидОтчета");
	Если СохраненныйВидОтчета <> Неопределено И НЕ Параметры.Свойство("Организация") И НЕ Параметры.Свойство("ВидОтчета") Тогда
		МассивВидовОтчетов = ПолучитьСписокОтчетовИзРегистраСведений();
		Элементы.ОтборВидОтчета.СписокВыбора.ЗагрузитьЗначения(МассивВидовОтчетов);
		ВидОтчета = СохраненныйВидОтчета;
	КонецЕсли;
	
	СохраненныеПользовательскиеНастройкиОтчетов = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ПользовательскиеНастройкиОтчетов");
	Если ТипЗнч(СохраненныеПользовательскиеНастройкиОтчетов) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ВостановитьНастройкиОтборовИСортировкиОтчетов(ЭтаФорма, СохраненныеПользовательскиеНастройкиОтчетов);
	КонецЕсли;
	
	// Заполняем признак использования внешней программы для ведения персонифицированного учета
	ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме = РегламентированнаяОтчетность.ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме();
	
	// Заполняем список выбора для видов сверок
	СписокВыбораВидаСверки = Элементы.ОтборВидСверки.СписокВыбора;
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
	ИмяТипаДокументаРеестрДанныхЭЛН = "РеестрДанныхЭЛНЗаполняемыхРаботодателем";
	Если Метаданные.Документы.Найти(ИмяТипаДокументаРеестрДанныхЭЛН) = Неопределено Тогда
		ИмяТипаДокументаРеестрДанныхЭЛН = "";
	КонецЕсли;
	
	ОткрытьНаНужнойСтранице(Параметры);
	
	НазначитьВидУведомленияИзПараметра(Параметры);
	НазначитьВидОтчетаИзПараметра(Параметры);
	
	ДействияПриИзмененииОтборов(ЭтаФорма);
	
	СделатьВсеГиперссылкиНеактивными();
	Для каждого Раздел Из Разделы(ЭтотОбъект, Истина) Цикл
		Элементы["Гиперссылка" + Раздел].Заголовок = Раздел;
	КонецЦикла; 
	
	УправлениеЭУ(ЭтаФорма, Истина);
	
	УправлениеЭУВРежимеСервиса();
	
	РегламентированнаяОтчетность.ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(ЭтаФорма);
	
	// Обеспечим корректную работу при переопределении формы выбора вида отчета.
	Если Элементы.ОтборВидОтчета.РежимВыбораИзСписка Тогда
		// Преобразуем ВидОтчета к типу "Строка".
		Если ТипЗнч(ВидОтчета) = Тип("СписокЗначений") Тогда
			ВидОтчета = ?(ЗначениеЗаполнено(ВидОтчета), ВидОтчета[0].Значение, "");
		Иначе
			ВидОтчета = Строка(ВидОтчета);
		КонецЕсли;
	Иначе
		// Преобразуем ВидОтчета к типу "СписокЗначений".
		Если ТипЗнч(ВидОтчета) = Тип("СписокЗначений") Тогда
			ВидОтчета = ВидОтчета.Скопировать();
		Иначе
			СтрВидОтчета = Строка(ВидОтчета);
			ВидОтчета = Новый СписокЗначений;
			ВидОтчета.Добавить(СтрВидОтчета);
		КонецЕсли;
	КонецЕсли;
	
	// Запуск фонового задания для поиска объектов, не записанных в регистры
	РезультатПроверкиКоличестваНезаписанныхОбъектов = ПроверитьКоличествоОбъектовНеЗаписанныхВРегистр();
	
	// Скрываем некоторые элементы при отключенной 1С-Отчетности
	УправлениеВидимостьюЭлементовПриОтключенномЭДО();
	
	УправлениеВидимостьюЛичныхКабинетов();
	
	// Скрываем некоторые элементы для ИП на УСН 6%
	УпроститьФормуРегОтчетности();
	
	ЗаполнитьДеревоНовое(Истина);
	

	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтаФорма,
			"БП.ОбщаяФорма.РегламентированнаяОтчетность",
			"ОбщаяФорма",
			,
			НСтр("ru='Новости: Регламентированная отчетность'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	ОшибкиПоследнегоОбмена = Неопределено; // ДЕНЬГИ ДлительнаяОтправкаВызовСервера.ПолучитьОшибкиПоследнегоОбмена();
	Если ОшибкиПоследнегоОбмена <> Неопределено Тогда
		АдресСведенийПоОшибкам = ПоместитьВоВременноеХранилище(ОшибкиПоследнегоОбмена, Новый УникальныйИдентификатор);
	КонецЕсли;
	УстановитьВидимостьПанелиОшибокОбновления(ЭтотОбъект);
	
	ТекстОшибкиИнициализацииКонтекстаЭДО = НСтр("ru = 'Подождите, пожалуйста. Выполняется обновление модуля 1С-Отчетности...'");
	
	#Область Используется1СОтчетность
	Элементы.НастройкиЭлектронногоДокументооборота.Видимость = Используется1СОтчетность;
	
	Элементы.ОтчетыПроверитьВИнтернете.Видимость = Используется1СОтчетность;
	Элементы.ГиперссылкаПисьма.Видимость         = Используется1СОтчетность;
	Элементы.ГиперссылкаСверки.Видимость         = Используется1СОтчетность;
	Элементы.ГиперссылкаЕГРЮЛ.Видимость          = Используется1СОтчетность;
	Элементы.ГиперссылкаВходящие.Видимость       = Используется1СОтчетность;
	#КонецОбласти
	
	СкрытьЛишниеЭлементыВрежимеВыбора(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии()
	
	КонтекстУжеПодключался = Ложь;
	
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаНастройки Тогда
		УправлениеЭУГруппаНастройки();
	КонецЕсли;
	
	#Если ВебКлиент Тогда 
		ЭтоВебКлиент = Истина;
	#КонецЕсли
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияМОС);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПодсчетаКоличестваНезаписанныхОбъектов", 1, Истина);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьНадписьВремяОбновления", 500);
	ПодключитьОбработчикОжидания("Подключаемый_ПроизвестиДействияПослеПоказаФормы", 1, Истина);
	
	Если ЗначениеЗаполнено(СсылкаВКлюче) и ЗначениеЗаполнено(ОрганизацияВКлюче) Тогда
		СпозиционироватьсяНаСсылка(СсылкаВКлюче, ОрганизацияВКлюче, "Позиционирование");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКонтекстЭДО(ОповещениеЗавершения = Неопределено) Экспорт
	Перем ДополнительныеПараметры;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИнициализироватьКонтекстЭДОЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьКонтекстЭДОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ТекстОшибкиИнициализацииКонтекстаЭДО = Результат.ТекстОшибки;
	КонтекстУжеПодключался = Истина;
	Если ДополнительныеПараметры <> Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда 
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияПредварительная(Результат, ПараметрыОповещения) Экспорт
	
	ОбработкаОповещения(
		ПараметрыОповещения.ИмяСобытия, 
		ПараметрыОповещения.Параметр, 
		ПараметрыОповещения.Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ЭтоРежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполняетсяЗакрытиеФормы = Истина // отменяем выполнение обработчика в закрываемой форме.
	 ИЛИ ИмяСобытия = "Получение контекста ЭДО" Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИмяСобытия", ИмяСобытия);
		ПараметрыОповещения.Вставить("Параметр", Параметр);
		ПараметрыОповещения.Вставить("Источник", Источник);
		Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияПредварительная", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
		
	Если ИмяСобытия = "Открытие формы 1С-Отчетность" Тогда
		
		Раздел = Параметр.Раздел;
		Если Элементы.Разделы.ТекущаяСтраница <> Элементы["Страница" + ИмяСтраницы(Раздел)] Тогда
			ОткрытьНаНужнойСтранице(Параметр);
			СделатьВсеГиперссылкиНеактивными();
			УправлениеЭУ(ЭтаФорма, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекЭДООрганизации" ИЛИ ИмяСобытия = "ОбновитьУчетнуюЗапись" Тогда
		
		ОпределитьДоступностьЭДО();
		УправлениеВидимостьюЭлементовПриОтключенномЭДО();
		
		Если Параметр = Организация Тогда
			УправлениеЭУГруппаНастройки();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Завершение обновления"
		ИЛИ ИмяСобытия = "Завершение расшифровки" Тогда
		
		ТекущаяСтраница = ТекущаяСтраница(ЭтотОбъект);
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		ТекущаяТаблица = ТекущаяТаблица(ЭтотОбъект);
		ТекущаяТаблица.Обновить();
		// Конец ДЕНЬГИ
		
		ПереопределитьОформлениеСверки();
		
	ИначеЕсли ТипЗнч(Источник) <> Тип("УправляемаяФорма")
		И (СтрНайти(ИмяСобытия, "Запись_") > 0 
		ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФСС" 
		ИЛИ ИмяСобытия = "Запись_ОтправкиФСС" 
		ИЛИ ИмяСобытия = "Редактирование_ОтправкиФСС" 
		ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФСРАР" 
		ИЛИ ИмяСобытия = "Запись_ОтправкиФСРАР" 
		ИЛИ ИмяСобытия = "Редактирование_ОтправкиФСРАР"
		ИЛИ ИмяСобытия = "Завершение автообмена с сервером РПН" 
		ИЛИ ИмяСобытия = "Запись_ОтправкиРПН" 
		ИЛИ ИмяСобытия = "Редактирование_ОтправкиРПН"
		ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФТС" 
		ИЛИ ИмяСобытия = "Запись_ОтправкиФТС" 
		ИЛИ ИмяСобытия = "Редактирование_ОтправкиФТС"
		ИЛИ ИмяСобытия = "Завершение отправки в контролирующий орган"
		ИЛИ ИмяСобытия = "Завершение отправки"
		ИЛИ ИмяСобытия = "Изменение пометки удаления объекта"
		ИЛИ ИмяСобытия = "Скрытие/восстановление объекта"
		ИЛИ ИмяСобытия = "Позиционирование в списке отчетов"
		ИЛИ ИмяСобытия = "Пометка прочтенным"
		ИЛИ ИмяСобытия = "Пометка непрочтенным"
		ИЛИ ИмяСобытия = "Актуализация состояния отправки") Тогда
		
		ОрганизацияВКлюче = Неопределено;
		
		СсылкаВКлюче = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Организация") И Параметр.Свойство("Ссылка") Тогда
			ОрганизацияВКлюче 	= Параметр.Организация;
			СсылкаВКлюче 		= Параметр.Ссылка;
		ИначеЕсли Параметр = Неопределено Тогда
			Если ЗначениеЗаполнено(Организация) Тогда
				ОрганизацияВКлюче 	= Организация;
			КонецЕсли;
			СсылкаВКлюче = Источник;
		Иначе			
			Если КонтекстЭДОКлиент <> Неопределено И Источник <> Неопределено Тогда
				ОрганизацияВКлюче 	= КонтекстЭДОКлиент.СведенияПоОтправляемымОбъектам(Источник).Организация;
				СсылкаВКлюче 		= Источник;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительноеУсловиеТолстыйКлиент = Истина;
#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ОрганизацияВКлюче = Неопределено Тогда 
			Попытка
				ОрганизацияВКлюче = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
				ДополнительноеУсловиеТолстыйКлиент = (ОрганизацияВКлюче <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
			Исключение
			КонецПопытки;
		КонецЕсли;
#КонецЕсли

		СпозиционироватьсяНаСсылка(СсылкаВКлюче, ОрганизацияВКлюче, ИмяСобытия);
		
		Если ИмяСобытия = "Пометка прочтенным"
			ИЛИ ИмяСобытия = "Пометка непрочтенным"
			ИЛИ ИмяСобытия = "Скрытие/восстановление объекта" Тогда
			
			// Обновление количества непрочтенных.
			ОбновитьКоличествоНепрочтенныхОбъектов(ЭтаФорма);
			
			// Закладка Новое
			Если ИмяСобытия = "Пометка непрочтенным" ИЛИ ИмяСобытия = "Скрытие/восстановление объекта" Тогда
				ЗаполнитьДеревоНовое(Истина);
			Иначе
				СтрокиДерева = Новое.ПолучитьЭлементы();
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					Если СтрокаДерева.Группа = Вычислить("ПредопределенноеЗначение(""Перечисление.ГруппыНовыхСобытийДокументооборотаСКонтролирующимиОрганами.НезавершенныеОтправки"")") Тогда
						Прервать;				
					КонецЕсли;
					
					Если СтрокаДерева.Ссылка = Источник Тогда
						СтрокаДерева.НеПрочитано = Ложь;
						СписокСсылок = Новый Массив;
						СписокСсылок.Добавить(Источник);
						ОбновитьКоличествоНовых(ЭтаФорма);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяСобытия = "Завершение автообмена с сервером ФСС" ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФСРАР"
			ИЛИ ИмяСобытия = "Завершение автообмена с сервером РПН" ИЛИ ИмяСобытия = "Завершение автообмена с сервером ФТС"
			ИЛИ ИмяСобытия = "Завершение отправки в контролирующий орган" ИЛИ ИмяСобытия = "Завершение отправки"  Тогда
			
			ЗаполнитьДеревоНовое();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПриЗакрытии_ЭлектронныеПредставленияРегламентированныхОтчетов" Тогда	
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ЭтоУведомление") Тогда
			ШаблонПредупреждения = НСтр("ru = '""%1"" отображается в разделе ""%2""'");
			Если Параметр.ЭтоУведомление И Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, Строка(Источник), НСтр("ru = 'Уведомления'"));
				ПоказатьПредупреждение(, ТекстПредупреждения);
			ИначеЕсли Не Параметр.ЭтоУведомление И Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаУведомления Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, Строка(Источник), НСтр("ru = 'Отчеты'"));
				ПоказатьПредупреждение(, ТекстПредупреждения);	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли (ИмяСобытия = "Получены новые сообщения 1С-Отчетности"
		ИЛИ ИмяСобытия = "Получены новые сообщения 1С-Отчетности без смены страницы") И Источник <> ЭтаФорма Тогда
		
		Оповестить("Закрыть форму новых сообщений 1С-Отчетности",, ЭтаФорма);
		
		Если ЭтоАдресВременногоХранилища(Параметр) Тогда
			АдресСведенийПоОшибкам = Параметр;
			УстановитьВидимостьПанелиОшибокОбновления(ЭтотОбъект);
		КонецЕсли;
		
		ЗаполнитьДеревоНовое(Истина);
		// Обновление количества непрочтенных.
		ОбновитьКоличествоНепрочтенныхОбъектов(ЭтаФорма);
		ОтметитьДеревоПросмотренным();
		
		Если ИмяСобытия <> "Получены новые сообщения 1С-Отчетности без смены страницы" Тогда
			ПриПереключенииРаздела(Элементы.ГиперссылкаНовое);
		КонецЕсли;
		
		ПереопределитьОформлениеСверки();
		
	ИначеЕсли ИмяСобытия = "Обновить ошибки обмена" Тогда
		
		Если ЭтоАдресВременногоХранилища(Параметр) Тогда
			АдресСведенийПоОшибкам = Параметр;
			УстановитьВидимостьПанелиОшибокОбновления(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "РеализованаНестандартнаяОбработкаОткрытияУведомления" Тогда
		Попытка
			Если Открыта() Тогда 
				РегламентированнаяОтчетностьКлиентПереопределяемый.ОбработчикСозданияУведомления(ЭтотОбъект, Параметр);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "ИзменилосьСостояниеДокументаИнтеграцииСБанком" Тогда
		#Область Используется1СОтчетность
		Если НЕ Используется1СОтчетность Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне");
			Результат = РегламентированнаяОтчетностьВызовСервера.СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
			ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат);
		КонецЕсли;
		#КонецОбласти
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ФормаРегламентированнойОтчетности_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВидОтчетаВИзбранные(Отбор)
	
	МассивВидовОтчетов = ПолучитьСписокОтчетовИзРегистраСведений();
	Элементы.ОтборВидОтчета.СписокВыбора.ЗагрузитьЗначения(МассивВидовОтчетов);
	
	МенеджерЗаписиОтчета = РегистрыСведений.ЖурналОтчетовСтатусы.СоздатьМенеджерЗаписи();
	МенеджерЗаписиОтчета.Организация = Отбор.Организация;
	МенеджерЗаписиОтчета.Ссылка      = Отбор.Ссылка;
	МенеджерЗаписиОтчета.Прочитать();
	
	ДанныеНайденногоВидаОтчета = Неопределено;
	
	Если МенеджерЗаписиОтчета.Выбран() Тогда
		Если ЗначениеЗаполнено(МенеджерЗаписиОтчета.НаименованиеОтчета) Тогда
			НайденныеОтчеты = РанееОткрытыеВидыОтчетов.НайтиСтроки(Новый Структура("Наименование", МенеджерЗаписиОтчета.НаименованиеОтчета));
			Для каждого НайденныйОтчет Из НайденныеОтчеты Цикл
				Если НайденныйОтчет.ЭтоГруппа <> Истина Тогда
					ДанныеНайденногоВидаОтчета = Новый Структура("Наименование,ПолноеИмя,Ссылка");
					ЗаполнитьЗначенияСвойств(ДанныеНайденногоВидаОтчета, НайденныйОтчет);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеНайденногоВидаОтчета <> Неопределено Тогда
		
		ТаблицаРанееСозданныхОтчетов = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаСозданияОтчета",
			"ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты");
		
		Если ТипЗнч(ТаблицаРанееСозданныхОтчетов) = Тип("ТаблицаЗначений") Тогда
			НайденныеОтчеты = ТаблицаРанееСозданныхОтчетов.НайтиСтроки(
				Новый Структура("ПолноеИмя,Ссылка", ДанныеНайденногоВидаОтчета.ПолноеИмя, ДанныеНайденногоВидаОтчета.Ссылка));
			Если НайденныеОтчеты.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаРанееСозданныхОтчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНайденногоВидаОтчета);
				
				ХранилищеНастроекДанныхФорм.Сохранить(
					"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаСозданияОтчета",
					"ФормаОтчетность_ФормаСозданияОтчета_РанееСозданныеОтчеты", ТаблицаРанееСозданныхОтчетов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Устанавливаем признак для отключения обработки оповещения при закрытии формы.
	ВыполняетсяЗакрытиеФормы = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПриПереключенииРаздела(Элемент)
	
	ПредыдущаяГиперссылка 	= ТекущийРазделФормы(ЭтаФорма);
	ТекущаяГиперссылка 		= Элемент;
	
	ПриПереключенииРазделаСервер(ПредыдущаяГиперссылка.Имя, ТекущаяГиперссылка.Имя);
	
	ВывестиТаблицуРаздела(ЭтаФорма, Элемент.Имя);
	
	Если Элемент.Имя = "ГиперссылкаНастройки" Тогда
		УправлениеЭУГруппаНастройки();
	ИначеЕсли Элемент.Имя = "ГиперссылкаНовое" Тогда
		ОтметитьДеревоПросмотренным();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриПереключенииРазделаСервер(ПредыдущаяГиперссылкаИмя, ТекущаяГиперссылкаИмя)
	
	ПредыдущаяГиперссылка 	= Элементы[ПредыдущаяГиперссылкаИмя];
	ТекущаяГиперссылка 		= Элементы[ТекущаяГиперссылкаИмя];
	
	// Делаем серой предыдущую гиперссылку.
	ПредыдущаяГиперссылка.ЦветФона		= Серый;
	ПредыдущаяГиперссылка.Гиперссылка	= Истина;

	// Делаем желтой текущую гиперссылку.
	ТекущаяГиперссылка.ЦветФона		= Желтый;
	ТекущаяГиперссылка.Гиперссылка	= Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриПереключенииРаздела(Элемент);
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭУ(Форма, ВыполнитьУстановкуСтраницы = Ложь)

	Форма.Элементы.ГруппаСсылокРазделы.ЦветФона = Форма.Серый;
		
	// Кнопку текущего раздела делаем желтой
	Если ВыполнитьУстановкуСтраницы Тогда
		
		// Кнопку текущего раздела делаем желтой
		ТекущийРаздел = Форма.Элементы["Гиперссылка" + СтрЗаменить(Форма.Элементы.Разделы.ТекущаяСтраница.Имя, "Страница", "")];
		ОформитьКнопку(Форма, ТекущийРаздел, ТекущийРаздел);
		
	Иначе
		ТекущийРаздел = ТекущийРазделФормы(Форма);
	КонецЕсли;
	
	// Количество в разделе "Новое"
	Если Форма.КоличествоНовых > 0 Тогда
		Форма.Элементы.ГиперссылкаНовое.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		Форма.Элементы.ГиперссылкаНовое.Заголовок = СтрШаблон(НСтр("ru = 'Новое (%1)'"), ?(Форма.КоличествоНовых > 99, "99+", Форма.КоличествоНовых));
	КонецЕсли;
	
	// Раздел "Входящие"
	ОбновитьКоличествоНепрочтенныхОбъектов(Форма);
	
	// Выводим таблицу, соотвествующую разделу
	Если ТекущийРаздел <> Неопределено Тогда 
		ВывестиТаблицуРаздела(Форма, ТекущийРаздел.Имя);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьКнопку(Форма, Гиперссылка, ТекущаяГиперссылка)
	
	АктивнаКнопка = (Гиперссылка = ТекущаяГиперссылка);
	
	Гиперссылка.ЦветФона	= ?(АктивнаКнопка, Форма.Желтый, Форма.Серый);
	Гиперссылка.Гиперссылка	= НЕ АктивнаКнопка;
	Гиперссылка.ЦветТекста	= Форма.Черный;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ДействияПриИзмененииОтборов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияНастройкиПриИзменении(Элемент)
	
	ДействияПриИзмененииОтборов(ЭтаФорма);
	УправлениеЭУГруппаНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОтчетаПриИзменении(Элемент)
	
	УстановитьОтборыПоОтчетам(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивВидовОтчетов = ПолучитьСписокОтчетовИзРегистраСведений();
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивВидовОтчетов);
	Элемент.СписокВыбора.СортироватьПоЗначению();
	
	ПараметрыФормыВыбораВидаОтчета = Новый Структура;
	ПараметрыФормыВыбораВидаОтчета.Вставить("Заголовок", "Выберите виды отчетов");
	ПараметрыФормыВыбораВидаОтчета.Вставить("ИсходныйСписок", ВидОтчета);
	ПараметрыФормыВыбораВидаОтчета.Вставить("ТипИсточника", "Список");
	ПараметрыФормыВыбораВидаОтчета.Вставить("СписокЗначенийДляВыбора", Элемент.СписокВыбора.Скопировать());
	
	ПолноеИмяФормыВыбораВидаОтчета = "";
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ОпределениеФормыВыбораВидаОтчета(
		ПолноеИмяФормыВыбораВидаОтчета, ПараметрыФормыВыбораВидаОтчета);
	
	Если ЗначениеЗаполнено(ПолноеИмяФормыВыбораВидаОтчета) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ПолноеИмяФормыВыбораВидаОтчета, ПараметрыФормыВыбораВидаОтчета, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОтчетаПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяДатаСеанса = Неопределено;
	
	НачалоПериодаВыбор = НачалоПериода;
	КонецПериодаВыбор  = КонецПериода;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериодаВыбор) Тогда
		ТекущаяДатаСеанса = ТекущаяДатаНаСервере();
		НачалоПериодаВыбор = НачалоКвартала(ТекущаяДатаСеанса);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КонецПериодаВыбор) Тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяДатаСеанса) Тогда
			ТекущаяДатаСеанса = ТекущаяДатаНаСервере();
		КонецЕсли;
		КонецПериодаВыбор = КонецКвартала(ТекущаяДатаСеанса);
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода, ВидПериода, ТолькоУказанныйПериод"
									 , НачалоПериодаВыбор, КонецПериодаВыбор, Неопределено, ТолькоУказанныйПериод);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтборВыбратьПериодЗавершение", ЭтаФорма);
	
	ПолноеИмяФормыВыбораПериода = "Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборСтандартногоПериодаГодКвартал";
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ИмяФормыВыбораПериода(ПолноеИмяФормыВыбораПериода);
	
	ОткрытьФорму(ПолноеИмяФормыВыбораПериода, ПараметрыВыбора, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура")
		ИЛИ НЕ РезультатВыбора.Свойство("НачалоПериода")
		ИЛИ НЕ РезультатВыбора.Свойство("КонецПериода") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачалоПериода = ?(ЗначениеЗаполнено(РезультатВыбора.НачалоПериода), НачалоДня(РезультатВыбора.НачалоПериода), РезультатВыбора.НачалоПериода);
	КонецПериода  = ?(ЗначениеЗаполнено(РезультатВыбора.КонецПериода),  КонецДня(РезультатВыбора.КонецПериода),  РезультатВыбора.КонецПериода);
	
	РезультатВыбора.Свойство("ТолькоУказанныйПериод", ТолькоУказанныйПериод);
	
	ПредставлениеПериодаОтчета = ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина");
	ПериодОтчета = ?(ТолькоУказанныйПериод, "[ " + СокрП(ПредставлениеПериодаОтчета) + " ]", ПредставлениеПериодаОтчета);
	
	УстановитьОтборыПоОтчетам(ЭтаФорма);
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	НачалоПериода = Дата(1, 1, 1);
	КонецПериода  = Дата(1, 1, 1);
	
	УстановитьОтборыПоОтчетам(ЭтаФорма);
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьОтчетыПоПериоду(Команда)
	
	УстановитьСортировкуПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтборыИСортировку(Команда)
	
	СохранитьНастройкиОтбораИСортировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеК1СОтчетностиНажатие(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаНажатие(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявленийОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДокументооборотаСГосОрганамиНажатиеПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	НастройкиДокументооборотаСГосОрганамиНажатие(ПараметрыОповещения.Элемент);
	
КонецПроцедуры
	
&НаКлиенте
Процедура НастройкиДокументооборотаСГосОрганамиНажатие(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения("НастройкиДокументооборотаСГосОрганамиНажатиеПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ОткрытьФормуОбщихНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияСверкиПриИзменении(Элемент)
	 ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСверкиПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияЕГРЮЛПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПисьмаПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияУведомленияПриИзменении(Элемент)
	ДействияПриИзмененииОтборов(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВходящиеПриИзменении(Элемент)
	
	ДействияПриИзмененииОтборовИОбновлениеВходящих(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидУведомленияПриИзменении(Элемент)
	
	ВидУведомления = ПредставлениеВидаУведомления;
	ДействияПриИзмененииОтборов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидУведомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкиПроПроверкуПодписиОбработкаНавигационнойСсылкиПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПодсказкиПроПроверкуПодписиОбработкаНавигационнойСсылки(
		ПараметрыОповещения.Элемент,
		ПараметрыОповещения.НавигационнаяСсылкаФорматированнойСтроки,
		ПараметрыОповещения.СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкиПроПроверкуПодписиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		ПараметрыОповещения.Вставить("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки);
		ПараметрыОповещения.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
		Оповещение = Новый ОписаниеОповещения(
			"ПодсказкиПроПроверкуПодписиОбработкаНавигационнойСсылкиПредварительное", 
			ЭтотОбъект, 
			ПараметрыОповещения
		);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ЧтоОзначаетПодписьНедействительна");
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПроОшибкиОбменаОбработкаНавигационнойСсылкиПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	СообщениеПроОшибкиОбменаОбработкаНавигационнойСсылки(
		ПараметрыОповещения.Элемент,
		ПараметрыОповещения.НавигационнаяСсылкаФорматированнойСтроки,
		ПараметрыОповещения.СтандартнаяОбработка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СообщениеПроОшибкиОбменаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#Область ОбработчикиСобытийЭлементовТаблицыНовое

&НаКлиенте
Процедура ТаблицаНовоеВыборПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ТаблицаНовоеВыбор(
		ПараметрыОповещения.Элемент,
		ПараметрыОповещения.ВыбраннаяСтрока,
		ПараметрыОповещения.Поле,
		ПараметрыОповещения.СтандартнаяОбработка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТаблицаНовоеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Ссылка = Элемент.ТекущиеДанные.Ссылка;
	Если Поле.Имя = "ТаблицаНовоеОбъектНаименованиеСсылка" Тогда
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		РедактироватьОбъект(Элемент);
		// Конец ДЕНЬГИ
	ИначеЕсли Поле.Имя = "ТаблицаНовоеСтатус" Тогда
		ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
	ИначеЕсли Поле.Имя = "ТаблицаНовоеЕстьКритическиеОшибкиОтправки" И Элемент.ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
		ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
	ИначеЕсли НЕ ПереопределитьОткрытие(Элемент) Тогда
		РедактироватьОбъект(Элемент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыОтчеты

&НаКлиенте
Процедура ОтчетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		Если Поле.Имя = "ОтчетыСтатус" Тогда
		
			// ДЕНЬГИ
			// удален вызов другой подсистемы
			Возврат;
			// Конец ДЕНЬГИ
			
		ИначеЕсли Поле.Имя = "ОтчетыЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
			
		Иначе
			
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда 
				ПодменитьСсылку(Ссылка);
			КонецЕсли;
			
			ПоказатьЗначение(,Ссылка);
			
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
				И ТипЗнч(Ссылка) <> Вычислить("Тип(""СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"")") // ДЕНЬГИ
				И ТипЗнч(Ссылка) <> Вычислить("Тип(""ДокументСсылка.РегламентированныйОтчет"")")  // ДЕНЬГИ
				Тогда
				
				// Если в результате выполнения "ПоказатьЗначение" открыта управляемая форма, не являющаяся
				// формой ни регламентированного отчета, ни электронного представления регламентированного
				// отчета, тогда необходимо оповестить динамический список отчетов в форме "1С-Отчетность"
				// об изменении индекса картинки (последнеее делается в случае присоединения файлов).
				
				АктивноеОкно = АктивноеОкно();
				
				Если АктивноеОкно <> Неопределено Тогда
					
					МассивУправлФорм = АктивноеОкно.Содержимое;
					
					Если МассивУправлФорм.Количество() > 0 Тогда
						
						Для каждого УправлФорма Из МассивУправлФорм Цикл
							
							Если УправлФорма.Параметры.Свойство("Ключ") Тогда
								
								Если УправлФорма.Параметры.Ключ = Ссылка Тогда
									
									ДопПарам = Новый Структура(
									"ВладелецФайла,Организация", Ссылка, ТекущиеДанные.Организация);
									
									УправлФорма.ОписаниеОповещенияОЗакрытии
									= Новый ОписаниеОповещения("ОтчетыВыборЗавершение", ЭтотОбъект, ДопПарам);
									
									Прервать;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Оповестить("Пометка прочтенным", , Ссылка);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	//ОткрытьФорму("Документ.РегламентированныйОтчет.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		ПоказатьЗначение(,Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);

КонецПроцедуры

&НаСервере
Процедура ОтчетыПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ПользовательскиеНастройкиДинамическогоСписка = ЭтаФорма.Отчеты.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ЭтоТипСтрока = Элементы.ОтборВидОтчета.РежимВыбораИзСписка;
	
	ЗначениеВидОтчета     = Новый СписокЗначений;
	ЗначениеВидОтчетаСтр  = "";
	ЗначениеОрганизация   = Справочники.Организации.ПустаяСсылка();
	ЗначениеНачалоПериода = Дата(1, 1, 1);
	ЗначениеКонецПериода  = Дата(1, 1, 1);
	
	МассивЗначенийКонецПериода = Новый Массив;
	
	ПолеКомпоновкиНаименованиеОтчета = Новый ПолеКомпоновкиДанных("НаименованиеОтчета");
	ПолеКомпоновкиОрганизация        = Новый ПолеКомпоновкиДанных("Организация");
	ПолеКомпоновкиДатаНачала         = Новый ПолеКомпоновкиДанных("ДатаНачала");
	ПолеКомпоновкиДатаОкончания      = Новый ПолеКомпоновкиДанных("ДатаОкончания");
	
	Для Каждого ЭлементПользовательскойНастройки Из ПользовательскиеНастройкиДинамическогоСписка.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных")
			И ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки =
				ЭтаФорма.Отчеты.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
			Для Каждого ЭлементОтбора Из ЭлементПользовательскойНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета Тогда
						Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
							ЗначениеВидОтчета = ЭлементОтбора.ПравоеЗначение;
						ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
							ЗначениеВидОтчетаСтр = ЭлементОтбора.ПравоеЗначение;
						ИначеЕсли СокрЛП(ЭлементОтбора.ПравоеЗначение) = "Макет пенсионного дела"
							ИЛИ СокрЛП(ЭлементОтбора.ПравоеЗначение) = "Заявление о назначении пенсии" Тогда
							ЗначениеВидОтчетаСтр = ЭлементОтбора.ПравоеЗначение;
						КонецЕсли;
					ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиОрганизация Тогда
						ЗначениеОрганизация = ЭлементОтбора.ПравоеЗначение;
					ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДатаНачала Тогда
						ЗначениеНачалоПериода = ЭлементОтбора.ПравоеЗначение;
					ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДатаОкончания Тогда
						МассивЗначенийКонецПериода.Добавить(ЭлементОтбора.ПравоеЗначение);
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Для Каждого ЭлементОтбораВГруппе Из ЭлементОтбора.Элементы Цикл
						Если ТипЗнч(ЭлементОтбораВГруппе.ПравоеЗначение) = Тип("СписокЗначений") Тогда
							ЗначениеВидОтчета = ЭлементОтбораВГруппе.ПравоеЗначение;
						Иначе
							ЗначениеВидОтчетаСтр = ЭлементОтбораВГруппе.ПравоеЗначение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗначениеВидОтчетаСтр) Тогда
		Если ЗначениеВидОтчета.НайтиПоЗначению(ЗначениеВидОтчетаСтр) = Неопределено Тогда
			ЗначениеВидОтчета.Добавить(ЗначениеВидОтчетаСтр);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоТипСтрока Тогда
		ВидОтчета = ?(ЗначениеЗаполнено(ЗначениеВидОтчета), ЗначениеВидОтчета[0].Значение, "");
	Иначе
		ВидОтчета = ЗначениеВидОтчета;
	КонецЕсли;
	
	Организация = ЗначениеОрганизация;
	
	Если МассивЗначенийКонецПериода.Количество() > 0 Тогда
		ЗначениеКонецПериода = МассивЗначенийКонецПериода[МассивЗначенийКонецПериода.ВГраница()];
		Если МассивЗначенийКонецПериода.Количество() > 1 И НЕ ТолькоУказанныйПериод Тогда
			ЗначениеНачалоПериода = МассивЗначенийКонецПериода[0];
		КонецЕсли;
	КонецЕсли;
	
	ОбновлНачалоПериода = ?(ЗначениеЗаполнено(ЗначениеНачалоПериода), НачалоДня(ЗначениеНачалоПериода), ЗначениеНачалоПериода);
	ОбновлКонецПериода  = ?(ЗначениеЗаполнено(ЗначениеКонецПериода),  КонецДня(ЗначениеКонецПериода),   ЗначениеКонецПериода);
	
	Если ОбновлНачалоПериода <> НачалоПериода ИЛИ ОбновлКонецПериода <> КонецПериода Тогда
		НачалоПериода = ОбновлНачалоПериода;
		КонецПериода  = ОбновлКонецПериода;
		ПериодОтчета  = ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодменитьСсылку(Ссылка)
	Попытка
		Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.СообщенияВКонтролирующиеОрганы.КонвертацияОтчетовПриПереходеС82") Тогда 
			МЗ = РегистрыСведений["СоответствиеРегОтчетовУведомлениям"].СоздатьМенеджерЗаписи();
			МЗ.РегОтчет = Ссылка;
			МЗ.Прочитать();
			Если ЗначениеЗаполнено(МЗ.Уведомление) Тогда 
				Ссылка = МЗ.Уведомление;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыУведомления

&НаКлиенте
Процедура УведомленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура УведомленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		Ссылка = ТекущиеДанные.Ссылка;
		
		Если Поле.Имя = "УведомленияСтатусОтправки" Тогда
			Если РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(
				ТекущиеДанные.СостояниеСдачиОтчетности) Тогда
				ВыбратьСтатусОтправкиИзСписка(Элемент);
			Иначе
				ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
			КонецЕсли;
		ИначеЕсли Поле.Имя = "УведомленияЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПисьма

&НаКлиенте
Процедура ПисьмаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.Ссылка;
		
		Если Поле.Имя = "ПисьмаСтатусОтправки" Тогда
			ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		ИначеЕсли Поле.Имя = "ПисьмаЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПисьмаПередНачаломДобавленияПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПисьмаПередНачаломДобавления(
		ПараметрыОповещения.Элемент,
		ПараметрыОповещения.Отказ,
		ПараметрыОповещения.Копирование,
		ПараметрыОповещения.Родитель,
		ПараметрыОповещения.Группа,
		ПараметрыОповещения.Параметр
	);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПисьмаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыСверки

&НаКлиенте
Процедура СверкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СверкиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СверкиВыборПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	СверкиВыбор(
		ПараметрыОповещения.Элемент,
		ПараметрыОповещения.ВыбраннаяСтрока,
		ПараметрыОповещения.Поле,
		ПараметрыОповещения.СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура СверкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыЕГРЮЛ

&НаКлиенте
Процедура ЕГРЮЛПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьНаУдалениеОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛВыборПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ЕГРЮЛВыбор(
		ПараметрыОповещения.Элемент,
		ПараметрыОповещения.ВыбраннаяСтрока,
		ПараметрыОповещения.Поле,
		ПараметрыОповещения.СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕГРЮЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = Элемент.ТекущиеДанные.Ссылка;
		
		СтандартнаяОбработка = Ложь;
		Если Поле.Имя = "ЕГРЮЛЕстьОтвет" Тогда
			Если Элемент.ТекущиеДанные.ЕстьОтвет Тогда // есть ответ
				
				Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
					ПараметрыОповещения = Новый Структура;
					ПараметрыОповещения.Вставить("Элемент", Элемент);
					ПараметрыОповещения.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
					ПараметрыОповещения.Вставить("Поле", Поле);
					ПараметрыОповещения.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
					Оповещение = Новый ОписаниеОповещения("ЕГРЮЛВыборПредварительное", ЭтотОбъект, ПараметрыОповещения);
					ИнициализироватьКонтекстЭДО(Оповещение);
					Возврат;
				КонецЕсли;
				
				Если КонтекстЭДОКлиент <> Неопределено Тогда
					КонтекстЭДОКлиент.ПоказатьОтветНаЗапросВыпискиЕГРЮЛ_ЕГРИП(Ссылка);
				КонецЕсли;
			Иначе
				РедактироватьОбъект(Элемент);
			КонецЕсли;
		ИначеЕсли Поле.Имя = "ЕГРЮЛСтатусОтправки" Тогда
			ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
		ИначеЕсли Поле.Имя = "ЕГРЮЛЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
			ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		Иначе
			РедактироватьОбъект(Элемент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВходящие

&НаКлиенте
Процедура ВходящиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	РедактироватьОбъект(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеВыборПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ВходящиеВыбор(
		ПараметрыОповещения.Элемент,
		ПараметрыОповещения.ВыбраннаяСтрока,
		ПараметрыОповещения.Поле,
		ПараметрыОповещения.СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	ТекущаяТаблица = ТекущаяТаблица(ЭтотОбъект);
	ТекущиеДанные = ТекущаяТаблица.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(,НСтр("ru = 'Не выбрано ни одного документа'"));
		
	Иначе
		
		Если Элементы.Отчеты = ТекущаяТаблица Тогда
			Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		Иначе
			Ссылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		Закрыть(Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыЗакладкиОтчетность

&НаКлиенте
Процедура Создать(Команда)
	
	СоздатьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчет(знач ПараметрыФормы = Неопределено)
	
	Если ПараметрыФормы = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", НачалоПериода);
		ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", КонецПериода);
		Если ТипЗнч(ВидОтчета) = Тип("СписокЗначений") Тогда
			ПараметрыФормы.Вставить("ПредставлениеВидаОтчета", ?(ВидОтчета.Количество() = 1, ВидОтчета[0].Значение, ""));
		Иначе
			ПараметрыФормы.Вставить("ПредставлениеВидаОтчета", Строка(ВидОтчета));
		КонецЕсли;
		ПараметрыФормы.Вставить("ИмяФормы","");
		
	КонецЕсли;
	
	Если ПараметрыФормы.ИмяФормы <> "" Тогда
		
		// Сначала попробуем найти его среди открытых стартовых форм.
		// Необходимо для предотвращения
		// открытия нескольких стартовых форм одного отчета.
		НайденоОкно = Ложь;
		РегламентированнаяОтчетностьКлиент.ВебКлиентНайтиАктивизироватьОкно(ПараметрыФормы.ИмяФормы, ЭтаФорма, НайденоОкно);
		
		Если НайденоОкно <> Неопределено Тогда
			Если НайденоОкно Тогда
			
				Возврат;
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	ЭтаФорма.ПараметрыВыбораФормыСоздания = Неопределено;
	ОписаниеОповещенияОЗакрытииФормыСозданияОтчета = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияСозданияОтчета", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаСозданияОтчета", ПараметрыФормы, ЭтаФорма,,,, 
				ОписаниеОповещенияОЗакрытииФормыСозданияОтчета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияСозданияОтчета(Параметр  = Неопределено, ДопПараметр = Неопределено) Экспорт

	Если ЭтаФорма.ПараметрыВыбораФормыСоздания = Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	СоздатьОтчет(ЭтаФорма.ПараметрыВыбораФормыСоздания);
			
КонецПроцедуры

&НаКлиенте
Процедура ПереустановитьКомпонентыПечатиМашиночитаемыхФорм(Команда)
	
	КаталогКомпонентыМЧБ = "";
	
	#Если ВебКлиент Тогда
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПереустановитьКомпонентыПечатиМашиночитаемыхФормЗавершение", ЭтотОбъект);
			НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		Иначе
			ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
			
			ДиалогВыбораКаталога.Заголовок = "Выберите каталог для сохранения дистрибутива компоненты печати машиночитаемых форм.";
			
			Если ДиалогВыбораКаталога.Выбрать() Тогда
				КаталогКомпонентыМЧБ = ДиалогВыбораКаталога.Каталог;
			КонецЕсли;
			
			Если КаталогКомпонентыМЧБ = Неопределено
				ИЛИ ПустаяСтрока(КаталогКомпонентыМЧБ)
				ИЛИ КаталогКомпонентыМЧБ = Ложь Тогда	
				Возврат;
			КонецЕсли;
			
			КаталогКомпонентыМЧБ = КаталогКомпонентыМЧБ + "\";
			УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ);
			
		КонецЕсли;
		
	#Иначе
		
		УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПереустановитьКомпонентыПечатиМашиночитаемыхФормЗавершение(ДополнительныеПараметры) Экспорт
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось подключить расширение работы с файлами!
		|Установка компоненты печати машиночитаемых форм невозможна.'"));
	Иначе
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
		ДиалогВыбораКаталога.Заголовок = "Выберите каталог для сохранения дистрибутива компоненты печати машиночитаемых форм.";
		
		Если ДиалогВыбораКаталога.Выбрать() Тогда
			КаталогКомпонентыМЧБ = ДиалогВыбораКаталога.Каталог;
		КонецЕсли;
		
		Если КаталогКомпонентыМЧБ = Неопределено
			ИЛИ ПустаяСтрока(КаталогКомпонентыМЧБ)
			ИЛИ КаталогКомпонентыМЧБ = Ложь Тогда	
			Возврат;
		КонецЕсли;
		
		КаталогКомпонентыМЧБ = КаталогКомпонентыМЧБ + "\";
		УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКомпонентуПечати(КаталогКомпонентыМЧБ)
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	РегламентированнаяОтчетностьКлиент.УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, КаталогКомпонентыМЧБ);
	УправлениеЭУПанельУстановкаКомпонентыПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ОбновитьДанные(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения("ОбновитьДанныеПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
				
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ВыбранныеОрганизации = ВсеОрганизации();
	
	Если ВыбранныеОрганизации.Количество() = 0 Тогда
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		Предупреждение(НСтр("ru = 'Организация не выбрана'"));
		//ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Организация не выбрана'"), ,"Организация");
		// Конец ДЕНЬГИ
		Возврат;
	КонецЕсли;
	
	НомерОбъекта = 0;
	
	Если НЕ КонтекстЭДОКлиент.ЕстьВозможностьОбмена(ВыбранныеОрганизации, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	АдресСведенийПоОшибкам = "";
	УстановитьВидимостьПанелиОшибокОбновления(ЭтотОбъект);
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
	ПодключитьОбработчикОжидания("Подключаемый_ОсуществитьОбменПоВыбраннымОрганизациям", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьНадписьВремяОбновления()
	
	НадписьВремяОбновления = ОбновитьНадписьВремяОбновления(ДатаПоследнегоОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроизвестиДействияПослеПоказаФормыПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	Подключаемый_ПроизвестиДействияПослеПоказаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроизвестиДействияПослеПоказаФормы()
	
	Активизировать();
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#Область Используется1СОтчетность

&НаКлиенте
Процедура ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПослеПолученияИнформацииОВнешнейКомпоненте = Новый ОписаниеОповещения(
		"ОбработатьРезультатПроверкиСостоянияИнтеграцииСБанком", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ПослеПолученияИнформацииОВнешнейКомпоненте, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиСостоянияИнтеграцииСБанком(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьБаннерСостоянияИнтеграцииСБанком(Результат);
	
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьБаннерСостоянияИнтеграцииСБанком(Результат)
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ДанныеБаннера = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		РегламентированнаяОтчетностьПереопределяемый.ПоказатьБаннерСостоянияОтправки(ЭтотОбъект, ДанныеБаннера);
	Иначе
		Элементы.ГруппаБаннерСостоянияОтправки.Видимость = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьПроверкуСостояниеИнтеграцииВФоне() Экспорт
	
	Результат = РегламентированнаяОтчетностьВызовСервера.СостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор);
	ОжидатьЗавершенияФоновогоЗаданияПолученияСостоянияИнтеграцииСБанком(Результат);
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура Подключаемый_ПроверитьПодключениеИнтернетПоддержки()
	
	// Если Форма авторизации ИПП была открыта при начале работы приложения - закроем
	// ее и предложим пользователю для авторизации новую после показа формы "1С-Отчетность".
	ФормаАвторизации = ФормаОкнаАвторизацииИППЕслиОткрыто();
	
	Активизировать();
	
	Если ФормаАвторизации <> Неопределено Тогда
		ФормаАвторизации.Закрыть();
	КонецЕсли;
	
	ИнтернетПоддержкаПользователейБРОКлиент.ПроверитьВозможностьВыполненияОперации(
		ОписаниеОповещенияПослеПроверкиПодключенияКИПП, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьНадписьВремяОбновления(ДатаПоследнегоОбновления)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат ДатаПоследнегоОбновления;
	// Конец ДЕНЬГИ
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаВФормуОтчета(Команда)
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаВЭлектронноеПредставлениеПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ЗагрузитьИзФайлаВЭлектронноеПредставление(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаВЭлектронноеПредставление(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаВЭлектронноеПредставлениеПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПолучениеФайловДляИмпортаНачало(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОнлайнПроверка(Элементы.Отчеты);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Ссылка               = ТекущиеДанные.РегламентированныйОтчет;
			НаименованиеОтчета   = ТекущиеДанные.НаименованиеОтчета;
			ВариантОтчета        = ТекущиеДанные.ВариантОтчета;
			ПредставлениеПериода = ТекущиеДанные.ФинансовыйПериод;
			ОрганизацияСсылка	 = ТекущиеДанные.Организация;
						
			ВыгрузкаРегламентированногоОтчета(Ссылка, ОрганизацияСсылка, НаименованиеОтчета, ВариантОтчета, ПредставлениеПериода);
		Иначе
			
			// Остальные виды рег отчетов
			РегламентированнаяОтчетностьКлиент.Выгрузить(Ссылка, ЭтотОбъект.УникальныйИдентификатор);
			
		КонецЕсли;
		// Конец ДЕНЬГИ
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтчет(Команда)
	
	ПечатьОтчетности(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчетПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ОтправитьОтчет(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчет(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьОтчетПодтверждениеОтправкиОтчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ОтправитьРегламентированныйОтчет(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если Отказ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект, ДополнительныеПараметры);
		РегламентированнаяОтчетностьКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
		Возврат;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ОтправитьРегламентированныйОтчет(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РегламентированнаяОтчетностьКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтчетЗавершение(Отказ, ДополнительныеПараметры) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ОтправитьРегламентированныйОтчет(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, ДополнительныеПараметры.КонтролирующийОрган, , 
		Истина, ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.Организация);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПечатьОтчетШтрих(Команда)
	
	ПечатьОтчетности(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПроверитьВыгрузку(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.Добавить(ДополнительныеПараметры.Ссылка);
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СписокОтчетов) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Проверка прервана!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершениеИзСтатформыПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПроверитьВыгрузкуЗавершениеИзСтатформы(
		ПараметрыОповещения.Отказ,
		ПараметрыОповещения.ДополнительныеПараметры
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершениеИзСтатформы(Отказ, ДополнительныеПараметры) Экспорт
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПротоколовОтчетов(Команда)
	
	ТекущиеДанные = Элементы.Отчеты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка 								= ТекущиеДанные.РегламентированныйОтчет;
		ВидКонтролирующегоОргана 			= ТекущиеДанные.ВидКонтролирующегоОргана;
		СостояниеСдачиОтчетности			= ТекущиеДанные.СостояниеСдачиОтчетности;
		НеОтправляетсяВКонтролирующийОрган	= ТекущиеДанные.НеОтправляетсяВКонтролирующийОрган;
		
		ПечатьПротоколовПоСсылке(
			Элементы.Отчеты, 
			Ссылка, 
			ВидКонтролирующегоОргана, 
			НеОтправляетсяВКонтролирующийОрган, 
			СостояниеСдачиОтчетности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныеФайлыОтчета(Команда)
	
	ОткрытьПрисоединенныеФайлы();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиСверки

&НаКлиенте
Процедура ОтправитьСверкуПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ОтправитьСверку(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСверку(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСверкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Сверки.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеАктовСверкиРасчетов(Команда)
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом(Команда)
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеПеречняБухгалтерскойИНалоговойОтчетности(Команда)
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеСправкиОСостоянииРасчетовСБюджетом(Команда)
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредставлениеСправкиОбИсполненииОбязанностейПоУплате(Команда)
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСверкаФИОиСНИЛС(Команда)
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСверкуПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ВыгрузитьСверку(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСверку(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения("ВыгрузитьСверкуПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сверки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОтправляемыйОбъект = ТекущиеДанные.Ссылка;
		
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		КонтекстЭДОКлиент.ВыгрузитьЗапросИОСВФайл(ОтправляемыйОбъект, УникальныйИдентификатор);
		// Конец ДЕНЬГИ
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСверкиПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПечатьСверки(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСверки(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения("ПечатьСверкиПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущаяТаблица(ЭтотОбъект).ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПечатаемыйОбъект = ТекущиеДанные.Ссылка;
		
		Если НЕ КонтекстЭДОКлиент.ОбъектЗаполненКорректно(ПечатаемыйОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		ПечатнаяФормаСверки = ТабличныйДокументСверки(ПечатаемыйОбъект);
		КонтекстЭДОКлиент.НапечататьДокумент(ПечатнаяФормаСверки, Строка(ПечатаемыйОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиЕГРЮЛ

&НаКлиенте
Процедура СоздатьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП(Команда)
	
	СоздатьНовыйЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИППредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения("ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИППредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЕГРЮЛ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОтправляемыйОбъект = ТекущиеДанные.Ссылка;
		ТекущаяОрганизация = ТекущиеДанные.Организация;
		//Если запрос уже отправлялся, то повторно отправлять не позволяем
		Если ЕщеНеОтправлялся(ОтправляемыйОбъект) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПЗавершение", ЭтотОбъект);
			КонтекстЭДОКлиент.ОтправкаЗапросаНаВыпискуИзЕГР(ОтправляемыйОбъект, ТекущаяОрганизация, ОписаниеОповещения);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Запрос уже отправлен'"));
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросНаВыпискуИзЕГРЮЛ_ЕГРИПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ЕГРЮЛ.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиПисьма

&НаКлиенте
Процедура СоздатьИсходящееПисьмо(Команда)
	
	СоздатьНовоеИсходящееПисьмо();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмаПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ОтправитьПисьма(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПисьмаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаОповещения("Завершение отправки в контролирующий орган", , Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПисьмаПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПечатьПисьма(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПисьма(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаСервере
Функция ПисьмоЗаполнено(ПечатаемыйОбъект)
	
	ПисьмоОбъект = ПечатаемыйОбъект.ПолучитьОбъект();
	Возврат ПисьмоОбъект.ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область КомандыЗакладкиУведомления

&НаКлиенте
Процедура СоздатьУведомление(Команда)
	
	СоздатьНовоеУведомление();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомленияПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ОтправитьУведомления(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомления(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения("ОтправитьУведомленияПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	Закладка 		= Элементы.Уведомления;
	ТекущиеДанные 	= Элементы.Уведомления.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка 			= ТекущиеДанные.Ссылка;
		ТипыСсылки 		= ТипЗнч(Ссылка);
		
		ТекущиеДанныеНаименованиеОтчета = ?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета,
			ТекущиеДанные.Наименование);
		
		Если ТекущиеДанные.НеОтправляетсяВКонтролирующийОрган
			ИЛИ ТекущиеДанныеНаименованиеОтчета = "Заявление об освобождении от уплаты страховых взносов"
			ИЛИ ТекущиеДанныеНаименованиеОтчета = "Уведомление о наличии счета"
			ИЛИ ТекущиеДанныеНаименованиеОтчета = "Заявление о предоставлении льготы по транспортному и (или) земельному налогу"
				И ОбщегоНазначенияКлиент.ДатаСеанса() < '20200101' Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Отправка уведомления в электронном виде не предусмотрена законодательством.
												|Уведомление сдается в бумажном виде'"));
			
		Иначе
			
			ПараметрыФормы = Новый Структура("СсылкаНаОтчет", Ссылка);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ТипыСсылки", ТипыСсылки);
			ДополнительныеПараметры.Вставить("ВидКонтролирующегоОргана", ТекущиеДанные.ВидКонтролирующегоОргана);
			ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
			ДополнительныеПараметры.Вставить("Организация", ТекущиеДанные.Организация);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьУведомленияПодтверждениеОтправкиОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПодтверждениеОтправкиОтчета", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Уведомления.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьУведомленияПодтверждениеОтправкиОтчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеУведомления(Команда)
	
	ОнлайнПроверка(Элементы.Уведомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУведомлений(Команда)
	
	// ДЕНЬГИ
	// удален вызов других подсистем
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУведомленияПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ВыгрузитьУведомления(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьУведомления(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПротоколовУведомлений(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Уведомления);
КонецПроцедуры

&НаКлиенте
Процедура УведомленияПриАктивизацииСтроки(Элемент)
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныеФайлыУведомления(Команда)
	
	ОткрытьПрисоединенныеФайлы();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиВходящие

&НаКлиенте
Процедура СоздатьОтветПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	СоздатьОтвет(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтвет(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьПрочитаннымПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПометитьПрочитанным(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьПрочитанным(Команда)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиНастройки

&НаКлиенте
Процедура ПроиндексироватьОбъекты(Команда)
	
	ДописатьОбъектыОтсутствующиеВРегистре(Истина);
	УправлениеЭУ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиМеханизмаОнлайнСервисовРОНажатие(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИнформацияОбОбновленияхНажатие(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОбменаСКонтролирующимиОрганамиПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ЖурналОбменаСКонтролирующимиОрганами(
		ПараметрыОповещения.Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОбменаСКонтролирующимиОрганами(Команда)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения("ЖурналОбменаСКонтролирующимиОрганамиПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.УправлениеОбменом");
КонецПроцедуры

&НаКлиенте
Процедура СкрытыеОтчетыИДокументыПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	СкрытыеОтчетыИДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытыеОтчетыИДокументы()
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		Оповещение = Новый ОписаниеОповещения("СкрытыеОтчетыИДокументыПредварительное", ЭтотОбъект);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
			
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.СкрытыеОбъекты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКонтекстЭДОДляЗапускаДиагностики(Результат, ДополнительныеПараметры) Экспорт
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура Диагностика1СОтчетностьНажатие(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЗакладкиСервисы

&НаКлиенте
Процедура СервисНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке(Элемент.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФНССервисПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ФНССервис(
		ПараметрыОповещения.Элемент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ФНССервис(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения("ФНССервисПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;

	КонтекстЭДОКлиент.ПерейтиПоСсылкеВИнтернетЭксплорере(Элемент.Подсказка);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеКоманды

&НаКлиенте
Процедура ОтправитьПакетСДопДокументамиДляФНС(Команда)
	
	Основание = ОснованиеДляСозданияПакетаСДопДокументамиДляФНС();
	
	Если Основание = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сначала выберите документ, для которого создается пакет с доп. документами для ФНС'"));
		Возврат;
	КонецЕсли;
	
	СоздатьПакетСДопДокументамиВФНС(Основание);
	
КонецПроцедуры

&НаСервере
Функция ОснованиеДляСозданияПакетаСДопДокументамиДляФНС()

	Основание = Неопределено;
	ТекущаяТаблица = ТекущаяТаблица(ЭтотОбъект);
	Для каждого Строка Из ТекущаяТаблица.ВыделенныеСтроки Цикл
		Основание = Строка.Ссылка;
		Прервать;
	КонецЦикла;

	Возврат Основание;
	
КонецФункции

&НаКлиенте
Процедура Скрыть(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеПодтвержденияСкрытия", 
		ЭтотОбъект);
	
	ПодтвердитьСкрытие(ОписаниеОповещения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьОтборПоРассылке(Куда, Знач ТолькоРассылка)
	
	Для Каждого ЭлОтбора Из Куда.Элементы Цикл
		Если ЭлОтбора.ИдентификаторПользовательскойНастройки = "ЭтоРассылкаГруппа" Тогда 
			ДобавитьОтборПоРассылке(ЭлОтбора, ТолькоРассылка);
			Возврат;
		ИначеЕсли ЭлОтбора.ИдентификаторПользовательскойНастройки = "ЭтоРассылкаЭлемент" Тогда 
			ЭлОтбора.ПравоеЗначение = ТолькоРассылка;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ГруппаОтбора = Куда.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ИдентификаторПользовательскойНастройки = "ЭтоРассылкаГруппа";
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = "ЭтоРассылкаЭлемент";
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоРассылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ТолькоРассылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКатегориииВхПриСменеСтраницы(Элемент, ТекущаяСтраница)	
	
	ДополнитьОтборПоТипуВходящих(Входящие, 
		ЭтаФорма.Элементы.ГруппаКатегориииВх.ТекущаяСтраница, 
		ЭтаФорма.Элементы.СтраницаКатегорияРассылки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьОтборПоТипуВходящих(ТабВходящие, ТекущаяСтраница, СтраницаРассылки)
	
	АктивнаСтраницаРассылки = ТекущаяСтраница = СтраницаРассылки;	
	ДобавитьОтборПоРассылке(ТабВходящие.Отбор, АктивнаСтраницаРассылки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УпроститьФормуРегОтчетности() Экспорт
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПакетСДопДокументамиВФНСПредварительное(Результат, ОснованиеПакета) Экспорт
	
	СоздатьПакетСДопДокументамиВФНС(ОснованиеПакета);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПакетСДопДокументамиВФНС(ОснованиеПакета = Неопределено)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьПакетСДопДокументамиВФНСПредварительное", 
			ЭтотОбъект,
			ОснованиеПакета);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.СоздатьПакетСДопДокуменами(ОснованиеПакета);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЛишниеЭлементыВрежимеВыбора(Параметры)

	Если Параметры.Свойство("СкрытьЕГРЮЛ") Тогда
		СкрытьЕГРЮЛ = Параметры.СкрытьЕГРЮЛ;
	Иначе
		СкрытьЕГРЮЛ = Ложь;
	КонецЕсли;
			
	Элементы.ГруппаВыбора.Видимость = ЭтоРежимВыбора;
	
	Если ЭтоРежимВыбора Тогда
		
		Заголовок = НСтр("ru = 'Выберите документ'");
		
		Элементы.ВыбратьДокумент.КнопкаПоУмолчанию = Истина;
		
		Элементы.ГруппаПанельИнформацииСКнопкой.Видимость = Ложь;
		Элементы.ГиперссылкаСервисы.Видимость = Ложь;
		Элементы.ГиперссылкаНастройки.Видимость = Ложь;
		
		Таблицы = Новый Массив;
		Таблицы.Добавить("Отчеты");
		Таблицы.Добавить("Уведомления");
		Таблицы.Добавить("Письма");
		Таблицы.Добавить("Сверки");
		Таблицы.Добавить("ЕГРЮЛ");
		Таблицы.Добавить("Входящие");
		Таблицы.Добавить("ВходящиеРассылки");
		
		Для каждого ИмяТаблицы Из Таблицы Цикл
			
			ОбрабатываемыйЭлемент = Элементы[ИмяТаблицы];
			
			ОбрабатываемыйЭлемент.КоманднаяПанель.Видимость = Ложь;
			ОбрабатываемыйЭлемент.КонтекстноеМеню.Видимость = Ложь;
			ОбрабатываемыйЭлемент.ИзменятьСоставСтрок = Ложь;
			ОбрабатываемыйЭлемент.ТолькоПросмотр = Истина;
			ОбрабатываемыйЭлемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			
			Для каждого Подменю Из ОбрабатываемыйЭлемент.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
				Подменю.Видимость = Ложь;
			КонецЦикла;
			
		КонецЦикла;
		
		Элементы.ЕГРЮЛКоманднаяПанель1.Видимость = Ложь;
		
		Если СкрытьЕГРЮЛ Тогда
			Элементы.СтраницаЕГРЮЛ.Видимость = Ложь;
			Элементы.ГиперссылкаЕГРЮЛ.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("Ссылка") Тогда
			СсылкаВКлюче      = Параметры.Ссылка;
			ОрганизацияВКлюче = Параметры.Организация;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьсяНаСсылка(СсылкаВКлюче, ОрганизацияВКлюче, ИмяСобытия = Неопределено)

	// Обновляем текущую таблицу
	Если Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
		
		ДополнительноеУсловиеТолстыйКлиент = Истина;
#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ОрганизацияВКлюче = Неопределено Тогда 
			Попытка
				ДополнительноеУсловиеТолстыйКлиент = (ОрганизацияВКлюче <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
			Исключение
			КонецПопытки;
		КонецЕсли;
#КонецЕсли
		
		Если ОрганизацияВКлюче <> Неопределено И ДополнительноеУсловиеТолстыйКлиент Тогда
			
			Отборы = Новый Массив;
			Отборы.Добавить(Новый Структура("Организация, Ссылка", ОрганизацияВКлюче, СсылкаВКлюче));
			
			КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.ЖурналОтчетовСтатусы"), Отборы);
			
			Если НЕ КлючЗаписи.Пустой() Тогда
				
				ОповеститьОбИзменении(КлючЗаписи);
				Если ИмяСобытия <> "Пометка прочтенным"
					И ИмяСобытия <> "Пометка непрочтенным"
					И ИмяСобытия <> "Скрытие/восстановление объекта" Тогда
					ДобавитьВидОтчетаВИзбранные(Отборы[0]);
					Элементы.Отчеты.ТекущаяСтрока = КлючЗаписи;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		Возврат;
		// Конец ДЕНЬГИ
		
	КонецЕсли;
	

КонецПроцедуры 

&НаСервере
Процедура ОтметитьДеревоПросмотренным()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиИзменитьПрочтенность()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	ТекстСообщения = НСтр("ru = 'Невозможно изменить отметку прочтения'");
	// Конец ДЕНЬГИ
		
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(,ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСтраницы(Страница)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат "Отчеты";
	// Конец ДЕНЬГИ
	
КонецФункции

&НаСервере
Функция СкрытьОбъект1СОтчетности()

	СкрытыеОбъекты = Новый Массив;
	
	ТекущаяТаблица = ТекущаяТаблица(ЭтотОбъект);
	Для каждого Строка Из ТекущаяТаблица.ВыделенныеСтроки Цикл
		
		СкрытыйОбъект = Новый Структура;
		СкрытыйОбъект.Вставить("Ссылка", 		Строка.Ссылка);
		СкрытыйОбъект.Вставить("Организация", 	Строка.Организация);
		
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		// Конец ДЕНЬГИ
			
		СкрытыеОбъекты.Добавить(СкрытыйОбъект);
				
	КонецЦикла;

	Возврат СкрытыеОбъекты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТабличныйДокументПисьма(Письмо)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат Неопределено;
	// Конец ДЕНЬГИ

КонецФункции

&НаСервереБезКонтекста
Функция ТабличныйДокументСверки(Сверка)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат Неопределено;
	// Конец ДЕНЬГИ

КонецФункции

&НаСервереБезКонтекста
Функция ТекущаяДатаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура ПодтвердитьСкрытие(ВыполняемоеОповещение)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСкрытия(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СкрытыеОбъекты = СкрытьОбъект1СОтчетности();
	
		Для каждого СкрытыйОбъект Из СкрытыеОбъекты Цикл
			
			Оповестить("Скрытие/восстановление объекта", 
				СкрытыйОбъект, 
				СкрытыйОбъект.Ссылка);

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Разделы(Форма, ТолькоРазделыСТаблицами = Ложь)
	
	ОписаниеРазделов = Новый Массив;
	
	Если НЕ ТолькоРазделыСТаблицами Тогда
		ОписаниеРазделов.Добавить("Новое");
	КонецЕсли;
	
	ОписаниеРазделов.Добавить("Отчеты");
	ОписаниеРазделов.Добавить("Уведомления");
	ОписаниеРазделов.Добавить("Письма");
	ОписаниеРазделов.Добавить("Сверки");
	ОписаниеРазделов.Добавить("ЕГРЮЛ");
	ОписаниеРазделов.Добавить("Входящие");
	
	Если НЕ ТолькоРазделыСТаблицами Тогда
		ОписаниеРазделов.Добавить("Сервисы");
		ОписаниеРазделов.Добавить("Настройки");
	КонецЕсли;
	
	Возврат ОписаниеРазделов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоНовых(Форма)
	
	// ДЕНЬГИ
	// удален вызов других подсистем
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоНовое(ПервоначальноеЗаполнение = Ложь)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат Ложь;
	// Конец ДЕНЬГИ
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОтчетовИзРегистраСведений(ПараметрыОтбора = Неопределено)
	
	Запрос = Новый Запрос;
	ТекстЗапроса     = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                   |	Журнал.НаименованиеОтчета КАК НаименованиеОтчета
	                   |ИЗ
	                   |	РегистрСведений.ЖурналОтчетовСтатусы КАК Журнал
	                   |";
	ТекстУпорядочить = "
	                   |УПОРЯДОЧИТЬ ПО
	                   |	НаименованиеОтчета";
	
	ТекстУсловия = "";
	
	Если НЕ ПараметрыОтбора = Неопределено Тогда
		
		ЕстьПараметры = Ложь;
		
		Если НЕ ПараметрыОтбора.Организация = Справочники.Организации.ПустаяСсылка() Тогда
			ТекстУсловия  = Символы.ПС + "	Журнал.Организация = &Организация ";
			Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
			ЕстьПараметры = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбора.НачалоПериода)Тогда
			ТекстУсловия  = ТекстУсловия  + Символы.ПС + "	" + ?(ЕстьПараметры, "И ", "") + "Журнал.ДатаНачала >= &НачалоПериода";
			Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтбора.НачалоПериода);
			ЕстьПараметры = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбора.КонецПериода)Тогда
			ТекстУсловия  = ТекстУсловия  + Символы.ПС + "	" + ?(ЕстьПараметры, "И ", "") + "Журнал.ДатаОкончания <= &КонецПериода";
			Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтбора.КонецПериода);
			ЕстьПараметры = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстУсловия) Тогда
			ТекстЗапроса = ТекстЗапроса + "ГДЕ " + ТекстУсловия;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса + ТекстУпорядочить;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса.ВыгрузитьКолонку("НаименованиеОтчета");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиТаблицуРаздела(Форма, РазделОтчетности)
	
	ТекущийРаздел 		= ТекущийРазделФормы(Форма);
	ИмяТекущейТаблицы 	= СтрЗаменить(ТекущийРаздел.Имя, "Гиперссылка", ""); 
	
	Форма.Элементы.Разделы.ТекущаяСтраница = Форма.Элементы["Страница" + ИмяТекущейТаблицы];
	
	ТекущийРаздел = Форма.Элементы.Разделы.ТекущаяСтраница;
	
	// Эсли форма открыта на закладке с таблицей, то активизируем эту таблицу
	Если ТекущийРаздел <> Форма.Элементы.СтраницаНовое И ТекущийРаздел <> Форма.Элементы.СтраницаНастройки Тогда 
		
		ИмяЭлемента = СтрЗаменить(РазделОтчетности, "Гиперссылка", "");
		
		ЭлементТаблица = Форма.Элементы.Найти(ИмяЭлемента);
		Если ЭлементТаблица <> Неопределено Тогда 
			Форма.ТекущийЭлемент = ЭлементТаблица;
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭУПанельУстановкаКомпонентыПечати(ОперацияСКомпонентойСовершена = Ложь)
	
	Если РегламентированнаяОтчетностьКлиент.КомпонентаПечатиМашиночитаемыхФормДоступна() Тогда
		Элементы.ПереустановитьКомпонентыПечатиМашиночитаемыхФорм.Заголовок = НСтр("ru = 'Переустановить компоненты печати машиночитаемых форм'");
	Иначе
		Элементы.ПереустановитьКомпонентыПечатиМашиночитаемыхФорм.Заголовок = НСтр("ru = 'Установка компоненты печати'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭУГруппаНастройки()
	
	ЗаголовкиГруппы = ЗаголовкиГруппыНастройки(Организация);
	
	Элементы.ЗаявлениеНаПодключениеК1СОтчетности.Заголовок = ЗаголовкиГруппы.ЗаголовокГиперссылкиЗаявления;
	
	ОткрывающаясяСкобка = Новый ФорматированнаяСтрока("(");
	СсылкаСписокЗавлений = Новый ФорматированнаяСтрока(
		ЗаголовкиГруппы.ЗаголовокГиперссылкиСпискаЗаявлений,,,,
		"Список");
	ЗакрывающаясяСкобка = Новый ФорматированнаяСтрока(")");
	Элементы.СписокЗаявлений.Заголовок = Новый ФорматированнаяСтрока(ОткрывающаясяСкобка, СсылкаСписокЗавлений, ЗакрывающаясяСкобка);
	
	ВебБраузер = РегламентированнаяОтчетностьКлиент.ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
	   И НЕ ВебБраузер = "MSIE" Тогда
	   
	   Элементы.ГруппаДвухмерногоШтрихкода.Видимость = Ложь;
		
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныПечатиМашиночитаемыхФормНажатие()
	
	ОткрытьФорму("РегистрСведений.ШаблоныПечатиМашиночитаемыхФорм.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаXMLШаблоновНажатие(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматаВыгрузкиНажатие(Элемент)
	
	РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыгруженныхОтчетовНажатие(Элемент)
	
	ОткрытьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникРегламентированныхОтчетовНажатие(Элемент)
	
	ОткрытьФорму("Справочник.РегламентированныеОтчеты.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыПоОтчетам(Форма)
	
	ОтборДинамическогоСписка = Форма.Отчеты.КомпоновщикНастроек.Настройки.Отбор;
	
	ДобавляемыеЭлементыОтбора          = Новый Массив;
	ДобавляемыеЭлементыОтбораВидОтчета = Новый Массив;
	
	ПолеКомпоновкиНаименованиеОтчета = Новый ПолеКомпоновкиДанных("НаименованиеОтчета");
	ПолеКомпоновкиОрганизация        = Новый ПолеКомпоновкиДанных("Организация");
	ПолеКомпоновкиДатаНачала         = Новый ПолеКомпоновкиДанных("ДатаНачала");
	ПолеКомпоновкиДатаОкончания      = Новый ПолеКомпоновкиДанных("ДатаОкончания");
	
	СтрМакетПенсионногоДела = "Макет пенсионного дела";
	СтрЗаявлениеОНазначенииПенсии = "Заявление о назначении пенсии";
	
	// Отбираем в массив пользовательские элементы отбора.
	Для Каждого ЭлементПользовательскойНастройки Из Форма.Отчеты.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных")
			И ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки
				= ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки Тогда
			Для Каждого ЭлементОтбора Из ЭлементПользовательскойНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета
							И  (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
							ИЛИ СокрЛП(ЭлементОтбора.ПравоеЗначение) = СтрМакетПенсионногоДела))
					 ИЛИ (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета
							И  (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
							ИЛИ СокрЛП(ЭлементОтбора.ПравоеЗначение) = СтрЗаявлениеОНазначенииПенсии))
					 ИЛИ (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиОрганизация
							И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно)
					 ИЛИ (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДатаНачала
							И  (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
							ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно))
					 ИЛИ (ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиДатаОкончания) Тогда
						Продолжить;
					КонецЕсли;
					Если ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета Тогда
						ДобавляемыеЭлементыОтбораВидОтчета.Добавить(ЭлементОтбора);
					Иначе
						ДобавляемыеЭлементыОтбора.Добавить(ЭлементОтбора);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Для отбора отчета "Макет пенсионного дела" создается отдельный элемент с видом сравнения "Содержит".
	СписокОтбораВидОтчета = Новый СписокЗначений;
	ВидОтчетаМакетПенсионногоДела = Неопределено;
	Если ТипЗнч(Форма.ВидОтчета) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементВидОтчета Из Форма.ВидОтчета Цикл
			Если СокрЛП(ЭлементВидОтчета.Значение) = СтрМакетПенсионногоДела
				ИЛИ СокрЛП(ЭлементВидОтчета.Значение) = СтрЗаявлениеОНазначенииПенсии Тогда
				ВидОтчетаМакетПенсионногоДела = ЭлементВидОтчета.Значение;
			ИначеЕсли ЗначениеЗаполнено(ЭлементВидОтчета.Значение) Тогда
				СписокОтбораВидОтчета.Добавить(ЭлементВидОтчета.Значение);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если СокрЛП(Форма.ВидОтчета) = СтрМакетПенсионногоДела
			ИЛИ СокрЛП(Форма.ВидОтчета) = СтрЗаявлениеОНазначенииПенсии Тогда
			ВидОтчетаМакетПенсионногоДела = Строка(Форма.ВидОтчета);
		ИначеЕсли ЗначениеЗаполнено(Форма.ВидОтчета) Тогда
			СписокОтбораВидОтчета.Добавить(Строка(Форма.ВидОтчета));
		КонецЕсли;
	КонецЕсли;
	
	// Формируем фиксированные элементы отбора.
	ОтборДинамическогоСписка.Элементы.Очистить();
	
	ОтборГруппа = Неопределено;
	ОтборВидОтчета = Неопределено;
	ОтборВидОтчетаМакетПенсионногоДела = Неопределено;
	
	Если ВидОтчетаМакетПенсионногоДела <> Неопределено Тогда
		Если СписокОтбораВидОтчета.Количество() > 0 Тогда // создадим группу для отбора по "ИЛИ"
			ОтборГруппа = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ОтборГруппа.Использование = Истина;
			ОтборВидОтчета = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборВидОтчетаМакетПенсионногоДела = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборВидОтчета.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета;
		Иначе
			ОтборВидОтчетаМакетПенсионногоДела = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		ОтборВидОтчетаМакетПенсионногоДела.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета;
	Иначе
		ОтборВидОтчета = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборВидОтчета.ЛевоеЗначение = ПолеКомпоновкиНаименованиеОтчета;
	КонецЕсли;
	
	ОтборОрганизация      = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаНачала       = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаОкончания1   = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборДатаОкончания2   = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ОтборОрганизация.ЛевоеЗначение    = ПолеКомпоновкиОрганизация;
	ОтборДатаНачала.ЛевоеЗначение     = ПолеКомпоновкиДатаНачала;
	ОтборДатаОкончания1.ЛевоеЗначение = ПолеКомпоновкиДатаОкончания;
	ОтборДатаОкончания2.ЛевоеЗначение = ПолеКомпоновкиДатаОкончания;
	
	Если НЕ ЗначениеЗаполнено(Форма.Организация) Тогда
		ОтборДинамическогоСписка.Элементы.Удалить(ОтборОрганизация);
	Иначе
		ОтборОрганизация.Использование  = Истина;
		ОтборОрганизация.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборОрганизация.ПравоеЗначение = Форма.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ВидОтчета)
		ИЛИ (ТипЗнч(Форма.ВидОтчета) = Тип("СписокЗначений")
			И Форма.ВидОтчета.Количество() = 1 И Форма.ВидОтчета[0].Значение = "") Тогда
		Если ОтборГруппа <> Неопределено Тогда
			ОтборДинамическогоСписка.Элементы.Удалить(ОтборГруппа);
		ИначеЕсли ОтборВидОтчета <> Неопределено Тогда
			ОтборДинамическогоСписка.Элементы.Удалить(ОтборВидОтчета);
		ИначеЕсли ОтборВидОтчетаМакетПенсионногоДела <> Неопределено Тогда
			ОтборДинамическогоСписка.Элементы.Удалить(ОтборВидОтчетаМакетПенсионногоДела);
		КонецЕсли;
	Иначе
		Если ОтборВидОтчетаМакетПенсионногоДела <> Неопределено Тогда
			ОтборВидОтчетаМакетПенсионногоДела.Использование = Истина;
			ОтборВидОтчетаМакетПенсионногоДела.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
			ОтборВидОтчетаМакетПенсионногоДела.ПравоеЗначение = ВидОтчетаМакетПенсионногоДела;
		КонецЕсли;
		Если ОтборВидОтчета <> Неопределено Тогда
			ОтборВидОтчета.Использование = Истина;
			ОтборВидОтчета.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборВидОтчета.ПравоеЗначение = СписокОтбораВидОтчета;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ПериодОтчета) Тогда
		ОтборДинамическогоСписка.Элементы.Удалить(ОтборДатаНачала);
		ОтборДинамическогоСписка.Элементы.Удалить(ОтборДатаОкончания1);
		ОтборДинамическогоСписка.Элементы.Удалить(ОтборДатаОкончания2);
	Иначе
		Если ЗначениеЗаполнено(Форма.НачалоПериода) Тогда
			ОтборДатаНачала.Использование      = Истина;
			ОтборДатаНачала.ВидСравнения       = ?(Форма.ТолькоУказанныйПериод, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			ОтборДатаНачала.ПравоеЗначение     = ?(Форма.ТолькоУказанныйПериод, Форма.НачалоПериода, НачалоГода(Форма.НачалоПериода));
			
			ОтборДатаОкончания1.Использование  = НЕ Форма.ТолькоУказанныйПериод;
			ОтборДатаОкончания1.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ОтборДатаОкончания1.ПравоеЗначение = Форма.НачалоПериода;
		Иначе
			ОтборДинамическогоСписка.Элементы.Удалить(ОтборДатаНачала);
			Если Форма.ТолькоУказанныйПериод Тогда
				ОтборДатаОкончания1.Использование = Ложь;
			Иначе
				ОтборДинамическогоСписка.Элементы.Удалить(ОтборДатаОкончания1);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.КонецПериода) Тогда
			Если Форма.ТолькоУказанныйПериод Тогда
				ОтборДатаОкончания1.Использование  = Истина;
				ОтборДатаОкончания1.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборДатаОкончания1.ПравоеЗначение = НачалоДня(Форма.КонецПериода);
			КонецЕсли;
			
			ОтборДатаОкончания2.Использование  = Истина;
			ОтборДатаОкончания2.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ОтборДатаОкончания2.ПравоеЗначение = Форма.КонецПериода;
		Иначе
			ОтборДинамическогоСписка.Элементы.Удалить(ОтборДатаОкончания2);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ОтборДатаОкончания1) = Тип("ЭлементОтбораКомпоновкиДанных")
		И НЕ ОтборДатаОкончания1.Использование Тогда
		ОтборДинамическогоСписка.Элементы.Удалить(ОтборДатаОкончания1);
	КонецЕсли;
	
	// Добавляем пользовательские элементы отбора "Вид отчета".
	Для Каждого ДобавляемыйЭлементОтбораВидОтчета Из ДобавляемыеЭлементыОтбораВидОтчета Цикл
		НовыйЭлементОтбора = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ДобавляемыйЭлементОтбораВидОтчета, , "ИдентификаторПользовательскойНастройки");
		// Сохраним идентификатор пользовательской настройки элемента в его пользовательском представлении.
		НовыйЭлементОтбора.ПредставлениеПользовательскойНастройки = ДобавляемыйЭлементОтбораВидОтчета.ИдентификаторПользовательскойНастройки;
	КонецЦикла;
	
	// Добавляем пользовательские элементы отбора.
	Для Каждого ДобавляемыйЭлементОтбора Из ДобавляемыеЭлементыОтбора Цикл
		НовыйЭлементОтбора = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ДобавляемыйЭлементОтбора, , "ИдентификаторПользовательскойНастройки");
		// Сохраним идентификатор пользовательской настройки элемента в его пользовательском представлении.
		НовыйЭлементОтбора.ПредставлениеПользовательскойНастройки = ДобавляемыйЭлементОтбора.ИдентификаторПользовательскойНастройки;
	КонецЦикла;
	
	УстановитьДопОтборы(Форма, ОтборДинамическогоСписка);

	ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
	// Назначаем идентификаторы пользовательских настроек для элементов установленного отбора (быстрые отборы в форме).
	Для Каждого ЭлементПользовательскойНастройки Из Форма.Отчеты.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных")
			И ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки
				= ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки Тогда
			Для Каждого ЭлементОтбора Из ЭлементПользовательскойНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ЗначениеЗаполнено(ЭлементОтбора.ПредставлениеПользовательскойНастройки) Тогда
						ЭлементОтбора.ИдентификаторПользовательскойНастройки = ЭлементОтбора.ПредставлениеПользовательскойНастройки;
						ДоступноеПолеОтбора = ЭлементПользовательскойНастройки.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
						ЭлементОтбора.ПредставлениеПользовательскойНастройки =
							?(ДоступноеПолеОтбора = Неопределено, Строка(ЭлементОтбора.ЛевоеЗначение), ДоступноеПолеОтбора.Заголовок);
					КонецЕсли
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//Очищаем для удаления элементов пользовательского отбора при установке стандартных настроек.
	ОтборДинамическогоСписка.Элементы.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСортировкуПоУмолчанию(Форма)
	
	ПорядокДинамическогоСписка = Форма.Отчеты.КомпоновщикНастроек.Настройки.Порядок;
	
	ПользовательскиеНастройкиДинамическогоСписка = Форма.Отчеты.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ПользовательскийПорядокДинамическогоСписка = ПользовательскиеНастройкиДинамическогоСписка.Элементы.Найти(
		ПорядокДинамическогоСписка.ИдентификаторПользовательскойНастройки);
		
	Если ПользовательскийПорядокДинамическогоСписка <> Неопределено
		И ПорядокДинамическогоСписка.Элементы.Количество() = ПользовательскийПорядокДинамическогоСписка.Элементы.Количество() Тогда
		
		Для Каждого ЭлементПорядка Из ПользовательскийПорядокДинамическогоСписка.Элементы Цикл
			Если ЭлементПорядка.Поле <> ПорядокДинамическогоСписка.Элементы[ПользовательскийПорядокДинамическогоСписка.Элементы.Индекс(ЭлементПорядка)].Поле Тогда
				ПорядокДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементПорядка Из ПользовательскийПорядокДинамическогоСписка.Элементы Цикл
			Если ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			Иначе
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			КонецЕсли;
			ЭлементПорядка.Использование = Истина;
		КонецЦикла;
		
	Иначе
		
		ПорядокДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВостановитьНастройкиОтборовИСортировкиОтчетов(Форма, СохраненныеПользовательскиеНастройки)
	
	Для Каждого ЭлементПользовательскойНастройки Из СохраненныеПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
			ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки =
				Форма.Отчеты.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
		ИначеЕсли ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ПорядокКомпоновкиДанных") Тогда
			ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки =
				Форма.Отчеты.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Форма.Отчеты.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СохраненныеПользовательскиеНастройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеОрганизации()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ";

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОрганизаций = РезультатЗапроса.Выгрузить();
	
	МассивОрганизаций = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОсуществитьОбменПоВыбраннымОрганизациям()

	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ

КонецПроцедуры

&НаКлиенте
Процедура ОсуществитьОбменПоВыбраннымОрганизациямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерОбъекта = НомерОбъекта + 1;
	ПодключитьОбработчикОжидания("Подключаемый_ОсуществитьОбменПоВыбраннымОрганизациям", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСверку(ВидУслуги)

	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбъект(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.Ссылка;
		Если ЗначениеЗаполнено(Ссылка) Тогда
			ПоказатьЗначение(,Ссылка);
			Оповестить("Пометка прочтенным", , Ссылка);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеОбъект(Таблица)
	
	ТекущиеДанные = Таблица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Таблица = Элементы.Отчеты Тогда 
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
	Иначе
		Ссылка = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПометитьНаУдалениеОбъектНаСервере(Ссылка);
	
	// Обновление списка "точечно"
	ПараметрОповещения = Новый Структура(); 
	ПараметрОповещения.Вставить("Ссылка", Ссылка);
	ПараметрОповещения.Вставить("Организация", ТекущиеДанные.Организация);
	Оповестить("Изменение пометки удаления объекта", ПараметрОповещения, Ссылка);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеОбъектНаСервере(Ссылка)
	
	УдаляемыйОбъект = Ссылка.ПолучитьОбъект();
	УдаляемыйОбъект.УстановитьПометкуУдаления(НЕ Ссылка.ПометкаУдаления);
	
КонецПроцедуры

&НаСервере
Функция ЕщеНеОтправлялся(Ссылка)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат Истина;
	// Конец ДЕНЬГИ
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранРазделФормы(Форма)
		
	Если Форма.Элементы.Разделы.ТекущаяСтраница = Неопределено Тогда 
		Возврат Форма.Элементы["ГиперссылкаОтчеты"];
	КонецЕсли;
	
	ИмяТекущейСтраницы = Форма.Элементы.Разделы.ТекущаяСтраница.Имя;
	ИмяРаздела = СтрЗаменить(ИмяТекущейСтраницы, "Страница", "Гиперссылка");
	ЭлементРаздела = Форма.Элементы.Найти(ИмяРаздела);
	Если ЭлементРаздела <> Неопределено Тогда 
		Возврат ЭлементРаздела;
	КонецЕсли;
	
	Возврат Форма.Элементы["ГиперссылкаОтчеты"];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРазделФормы(Форма)
	
	Результат = Неопределено;
	
	Для каждого Раздел Из Разделы(Форма) Цикл
		
		Гиперссылка = Форма.Элементы["Гиперссылка" + Раздел];
		
		Если Гиперссылка.ЦветФона = Форма.Желтый Тогда
			Результат = Гиперссылка;
		КонецЕсли;
	
	КонецЦикла; 
	
	Если Результат = Неопределено Тогда 
		Возврат ВыбранРазделФормы(Форма);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяТаблица(Форма)
	
	ТекущийРаздел 		= ТекущийРазделФормы(Форма);
	ИмяТекущейТаблицы 	= СтрЗаменить(ТекущийРаздел.Имя, "Гиперссылка", ""); 
		
	Если ИмяТекущейТаблицы = "Входящие" Тогда //Есть вложенные таблицы/вкладки
		АктивнаСтраницаРассылки = Форма.Элементы.ГруппаКатегориииВх.ТекущаяСтраница = 
			Форма.Элементы.СтраницаКатегорияРассылки;
		Если АктивнаСтраницаРассылки Тогда 
			ИмяТекущейТаблицы = ИмяТекущейТаблицы + "Рассылки";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Форма.Элементы[ИмяТекущейТаблицы];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяСтраница(Форма)
	
	ТекущийРаздел 		= ТекущийРазделФормы(Форма);
	ИмяТекущейТаблицы 	= СтрЗаменить(ТекущийРаздел.Имя, "Гиперссылка", ""); 
	
	Возврат ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность." + ИмяТекущейТаблицы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборыПоПрочимТаблицам(Форма, ДинамическийСписок, ВидОбъектаДляОтбора = Неопределено)
	
	ДинамическийСписок.Отбор.Элементы.Очистить();
	ГруппаОтбора = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	// отбор по организации
	Если ЗначениеЗаполнено(Форма.Организация) Тогда
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = Форма.Организация;
		
	КонецЕсли;

	// отбор по виду сверки
	Если ЗначениеЗаполнено(ВидОбъектаДляОтбора) Тогда
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ПравоеЗначение = ВидОбъектаДляОтбора;
		
	КонецЕсли;
	
	УстановитьДопОтборы(Форма, ДинамическийСписок.Отбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДопОтборы(Форма, ОтборДинамическогоСписка)
	
	Если ЗначениеЗаполнено(Форма.ОтборОрган) Тогда
		
		ЭлементОтбора = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидКонтролирующегоОргана");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидУведомленияОСпецрежимахНалогообложения(Ссылка)

	Возврат Ссылка.ВидУведомления;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДействияПриИзмененииОтборов(Форма)
	
	УстановитьОтборыПоОтчетам(Форма);
	УстановитьОтборыПоПрочимТаблицам(Форма, Форма.Уведомления, Форма.ПредставлениеВидаУведомления);
	УстановитьОтборыПоПрочимТаблицам(Форма, Форма.Письма);
	УстановитьОтборыПоПрочимТаблицам(Форма, Форма.Сверки, Форма.ВидСверки);
	УстановитьОтборыПоПрочимТаблицам(Форма, Форма.ЕГРЮЛ);
	УстановитьОтборыПоПрочимТаблицам(Форма, Форма.Входящие);
	
	ДополнитьОтборПоТипуВходящих(Форма.Входящие, 
		Форма.Элементы.ГруппаКатегориииВх.ТекущаяСтраница, 
		Форма.Элементы.СтраницаКатегорияРассылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораВидаУведомления(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		ВидУведомления 					= Результат.Тип;
		ПредставлениеВидаУведомления 	= Результат.Наименование;
		// Конец ДЕНЬГИ
	КонецЕсли;
	
	ДействияПриИзмененииОтборов(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьXMLНаСервере(УникальныйИдентификатор, Объект)
	ДокОбъект = Объект.ПолучитьОбъект();
	Возврат ДокОбъект.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоНепрочитанныхОбъектов(ОтборОрганизацияВходящие)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат Новый Массив;
	// Конец ДЕНЬГИ
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоНепрочтенныхОбъектов(Форма)
	Перем ЗаголовокКатегории;
	
	// Сбрасываем количества во всех заголовках.
	Для каждого Раздел Из Разделы(Форма, Истина) Цикл
		Форма.Элементы["Гиперссылка" + Раздел].Заголовок = Раздел;
	КонецЦикла;
	
	// Сбрасываем количества в заголовках вложенных закладок
	ЗаголовокКатегории = Форма.Элементы["СтраницаКатегорияНесортированные"].Заголовок;
	Если СтрНайти(ЗаголовокКатегории, "(") > 0 Тогда 
		Форма.Элементы["СтраницаКатегорияНесортированные"].Заголовок = Лев(ЗаголовокКатегории, СтрНайти(ЗаголовокКатегории, "(") - 2);
	КонецЕсли;
	ЗаголовокКатегории = Форма.Элементы["СтраницаКатегорияРассылки"].Заголовок;
	Если СтрНайти(ЗаголовокКатегории, "(") > 0 Тогда 
		Форма.Элементы["СтраницаКатегорияРассылки"].Заголовок = Лев(ЗаголовокКатегории, СтрНайти(ЗаголовокКатегории, "(") - 2);
	КонецЕсли;
	
	// Устанавливаем количества только там, где есть непрочтенные.
	НепрочтенныеОбъектыПоРазделам = КоличествоНепрочитанныхОбъектов(Форма.Организация);
	
	Для каждого НепрочтенныеОбъектыРаздела Из НепрочтенныеОбъектыПоРазделам Цикл
		
		КоличествоНепрочитанныхОбъектов = НепрочтенныеОбъектыРаздела.КоличествоНепрочтенных;
		СтраницаЖурнала 				= НепрочтенныеОбъектыРаздела.СтраницаЖурнала;
		
		Форма.Элементы["Гиперссылка" + СтраницаЖурнала].Заголовок = 
				СтраницаЖурнала + ПредставлениеКоличества(КоличествоНепрочитанныхОбъектов);
				
		Если СтраницаЖурнала = "Входящие" Тогда 
			Форма.Элементы["СтраницаКатегорияНесортированные"].Заголовок = 
				Форма.Элементы["СтраницаКатегорияНесортированные"].Заголовок + 
					ПредставлениеКоличества(НепрочтенныеОбъектыРаздела.ДетализацияВходящих.ВходящиеПисьма);
			Форма.Элементы["СтраницаКатегорияРассылки"].Заголовок = 
				Форма.Элементы["СтраницаКатегорияРассылки"].Заголовок + 
					ПредставлениеКоличества(НепрочтенныеОбъектыРаздела.ДетализацияВходящих.ВходящиеРассылки);
		КонецЕсли;
			
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПечатьОтчетности(ВидПечати)
	
	ТекущиеДанные 	= Элементы.Отчеты.ТекущиеДанные;
	Закладка	 	= Элементы.Отчеты;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.РегламентированныйОтчет;
		
		Если ВидПечати = "ПечатьОтчет" Тогда
			
			// ДЕНЬГИ
			// удален вызов другой подсистемы
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				
				// Печать регламентированного отчета
				Ссылка             = ТекущиеДанные.РегламентированныйОтчет;
				НаименованиеОтчета = ТекущиеДанные.НаименованиеОтчета;
				
				ОписаниеОтчета = ОписаниеРегОтчета(Ссылка);
		
				Если ОбработаноДействиеДляАлкоОтчета(Ссылка, ОписаниеОтчета, "Печать", ВидПечати) Тогда
				    Возврат;		
				КонецЕсли;
		 
				Если НаименованиеОтчета = "Доходы, выплаченные иностранным организациям" Тогда
					ОписаниеДохИно = ОписаниеРегОтчета(Ссылка);
					Если ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
						И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
						Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
							Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
								"ru='%1 Печать прервана.'"), ОписаниеДохИно.ТекстСообщения);
								Сообщение.Сообщить();
							КонецЕсли;
							Возврат;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли НаименованиеОтчета = "Уведомление об участии в международной группе компаний"
					ИЛИ НаименованиеОтчета = "Страновой отчет" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='Для отчета ""%1"" не предусмотрена печать бланка формы без двухмерного штрихкода PDF417!'"),
					НаименованиеОтчета);
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("НаименованиеОтчета", НаименованиеОтчета);
				ДополнительныеПараметры.Вставить("Ссылка", Ссылка);
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьОтчетностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
				РегламентированнаяОтчетностьКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
				Возврат;
				
			Иначе
				// Печать объекта, не входящего в БРО
				СведенияПоОбъекту = РегламентированнаяОтчетностьВызовСервера.СведенияПоОбъектуНеВходящемуВБРО(Ссылка);
				Если СведенияПоОбъекту <> Неопределено Тогда
					НапечататьОбъектНеВходящийВБРО(Ссылка, СведенияПоОбъекту);
				КонецЕсли;
			КонецЕсли;
			// Конец ДЕНЬГИ
			
		ИначеЕсли ВидПечати = "ПечатьОтчетШтрих" Тогда
			
			// ДЕНЬГИ
			// удален вызов другой подсистемы
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				Ссылка             = ТекущиеДанные.РегламентированныйОтчет;
				НаименованиеОтчета = ТекущиеДанные.НаименованиеОтчета;
				
				Если ВыполнениеКомандыОтменено(?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование), ТекущиеДанные.Организация) Тогда
					Возврат;
				КонецЕсли;
				
				ПечатьРегламентированногоОтчетаШтрих(Ссылка, НаименованиеОтчета);
			Иначе
				
				// Печать объекта, не входящего в БРО
				ПредупредитьОбОграничениях(Закладка, НСтр("ru = 'Печать со штрихкодом PDF417 не предусмотрена'"));
				
			КонецЕсли;
			// Конец ДЕНЬГИ
		
		ИначеЕсли ВидПечати = "ПечатьПротоколы" Тогда
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнениеКомандыОтменено(НаименованиеОтчета, Организация, НаименованиеКоманды = "")
	
	Если (НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность СО НКО"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность СО НКО (до 2015 года)")
		И НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		
		Если НаименованиеКоманды = "ОтправитьОтчет" Тогда
			РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета(); 
		Иначе
			РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета(); 
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПечатьОтчетностиЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПечатьРегламентированногоОтчета(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.НаименованиеОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭлектронногоПредставленияПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПечатьЭлектронногоПредставления(
		ПараметрыОповещения.Ссылка,
		ПараметрыОповещения.Наименование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭлектронногоПредставления(Ссылка, Наименование)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Ссылка);
		ПараметрыОповещения.Вставить("Наименование", Наименование);
		Оповещение = Новый ОписаниеОповещения("ПечатьЭлектронногоПредставленияПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
 
	КонтекстЭДОКлиент.ПечатьЭлектронногоПредставления(Ссылка, , Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегламентированногоОтчетаПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПечатьРегламентированногоОтчета(
		ПараметрыОповещения.Ссылка,
		ПараметрыОповещения.Наименование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегламентированногоОтчета(Ссылка, Наименование)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Ссылка);
		ПараметрыОповещения.Вставить("Наименование", Наименование);
		Оповещение = Новый ОписаниеОповещения("ПечатьРегламентированногоОтчетаПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
		
	Если Наименование = "РСВ-1 ПФР" Тогда
		
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Ссылка);
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
			Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				РегламентированнаяОтчетностьКлиент.ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Наименование = "Статистика: Форма учета перемещения товаров"
		ИЛИ Наименование = "Статистическая форма учета перемещения товаров") И КонтекстЭДОКлиент <> Неопределено Тогда
		
		ДокументЗаявлениеОВвозеТоваров = Неопределено;
		ИмяДокументаЗаявлениеОВвозеТоваров = Неопределено;
		РезультатПолученияЗаявленияОВвозеТоваров = КонтекстЭДОКлиент.ПопытатьсяПолучитьЗаявлениеОВвозеТоваровИзСтатформы(
			Ссылка, ДокументЗаявлениеОВвозеТоваров, ИмяДокументаЗаявлениеОВвозеТоваров);
		Если РезультатПолученияЗаявленияОВвозеТоваров = Неопределено Тогда
			Возврат;
		ИначеЕсли РезультатПолученияЗаявленияОВвозеТоваров Тогда
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ДокументЗаявлениеОВвозеТоваров);
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ." + ИмяДокументаЗаявлениеОВвозеТоваров, "СтатистическаяФормаУчетаПеремещенияТоваров", МассивОбъектов, ЭтаФорма);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.Добавить(Ссылка);
		
		РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(СписокОтчетов, "ПоказатьБланк");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьРегламентированногоОтчетаШтрих(Ссылка, Наименование)
	
	ФормаОтчета = Неопределено; // Обход ошибки в платформе.
	
	ПредставлениеДокументаРеглОтч = "";
	
	ФормаОтчета = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(Ссылка, ПредставлениеДокументаРеглОтч);
	Если ФормаОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Наименование = "Расчет совокупного размера прибыли" Тогда
		ПоказатьПредупреждение(, НСтр(
		"ru='Выгрузка, проверка выгрузки, отправка, проверка
		|в интернете, печать со штрихкодом PDF417 формы
		|расчета, утвержденной приказом Минфина России
		|от 28.05.2019 № 79н, будут реализованы
		|в будущих версиях программы'"));
		Возврат;
	КонецЕсли;
	
	Если Наименование = "Декларация по УСН" Тогда
		ОписаниеУСН = ОписаниеРегОтчета(Ссылка);
		Если ОписаниеУСН.ВыбраннаяФорма = "ФормаОтчета2014Кв1" И ОписаниеУСН.РекомендованнаяФорма Тогда
			ПоказатьПредупреждение(, НСтр("ru='Печать с двухмерным штрихкодом PDF417 формы, рекомендованной письмом ФНС от 20.05.2015 № ГД-4-3/8533@, не предусмотрена.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Наименование = "Доходы, выплаченные иностранным организациям" Тогда
		ОписаниеДохИно = ОписаниеРегОтчета(Ссылка);
		Если ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
			И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
			Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
				Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='%1 Печать формы с двухмерным штрихкодом PDF417 прервана.'"), ОписаниеДохИно.ТекстСообщения);
					Сообщение.Сообщить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Наименование = "Декларация 3-НДФЛ" Тогда
		Описание3НДФЛ = ОписаниеРегОтчета(Ссылка);
		Если Не Описание3НДФЛ.ДоступнаПечатьPDF417 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Печать формы со штрихкодом PDF417 будет реализована в будущих версиях программы.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормаОтчета.СтруктураРеквизитовФормы.Свойство("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417")
	   И СтрНайти(ФормаОтчета.ИмяФормы, "РегламентированныйОтчетСтатистика") = 0 Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ФормаОтчета, "ПоказатьСДвухмернымШтрихкодомPDF417");
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для отчета """ + Наименование + """ не предусмотрена печать бланка формы с двухмерным штрихкодом PDF417!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЭлектронногоПредставленияПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ВыгрузкаЭлектронногоПредставления(
		ПараметрыОповещения.Ссылка,
		ПараметрыОповещения.НаименованиеОтчета
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЭлектронногоПредставления(Ссылка, НаименованиеОтчета)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Ссылка);
		ПараметрыОповещения.Вставить("НаименованиеОтчета", НаименованиеОтчета);
		Оповещение = Новый ОписаниеОповещения("ВыгрузкаЭлектронногоПредставленияПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ВыгрузкаЭлектронногоПредставления(Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ВыгрузкаРегламентированногоОтчета(
		ПараметрыОповещения.Ссылка,
		ПараметрыОповещения.ОрганизацияСсылка,
		ПараметрыОповещения.НаименованиеОтчета,
		ПараметрыОповещения.ВариантОтчета,
		ПараметрыОповещения.ПредставлениеПериода
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчета(Ссылка, ОрганизацияСсылка, НаименованиеОтчета, ВариантОтчета, ПредставлениеПериода);
	
	Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6 = Ложь;
	
	СтандартнаяОбработка = Истина;
	
	Если ВыполнениеКомандыОтменено(НаименованиеОтчета, ОрганизацияСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Ссылка);
		ПараметрыОповещения.Вставить("ОрганизацияСсылка", ОрганизацияСсылка);
		ПараметрыОповещения.Вставить("НаименованиеОтчета", НаименованиеОтчета);
		ПараметрыОповещения.Вставить("ВариантОтчета", ВариантОтчета);
		ПараметрыОповещения.Вставить("ПредставлениеПериода", ПредставлениеПериода);
		Оповещение = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаПредварительное", ЭтотОбъект, ПараметрыОповещения);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ОписаниеОтчета = ОписаниеРегОтчета(Ссылка);
		
		Если ОбработаноДействиеДляАлкоОтчета(Ссылка, ОписаниеОтчета, "Выгрузка") Тогда
		    Возврат;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаименованиеОтчета = "Расчет совокупного размера прибыли" Тогда
		ПоказатьПредупреждение(, НСтр(
		"ru='Выгрузка, проверка выгрузки, отправка, проверка
		|в интернете, печать со штрихкодом PDF417 формы
		|расчета, утвержденной приказом Минфина России
		|от 28.05.2019 № 79н, будут реализованы
		|в будущих версиях программы'"));
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы.
	Если РегламентированнаяОтчетностьКлиент.ВебБраузер() = "MSIE" Тогда
		Если НаименованиеОтчета = "РСВ-1 ПФР"
			ИЛИ НаименованиеОтчета = "Декларация по НДС"
			ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
			ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий" Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Для выгрузки (проверки выгрузки, проверки в интернете, отправки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""'"),
				НаименованиеОтчета);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеОтчета = "Доходы, выплаченные иностранным организациям" Тогда
		ОписаниеДохИно = ОписаниеРегОтчета(Ссылка);
		Если ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
			И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
			Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
				Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='%1 Выгрузка прервана.'"), ОписаниеДохИно.ТекстСообщения);
					Сообщение.Сообщить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеОтчета = "РСВ-1 ПФР" Тогда
		
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Ссылка);
		
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
			
			Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				РегламентированнаяОтчетностьКлиент.ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(
					Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
			КонецЕсли;
			
			Если ОписаниеРСВ_1.ЗагруженыВнешниеСведенияРаздела6 Тогда
				Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6 = Истина;
			КонецЕсли;
			
		Иначе
			
			Если СокрЛП(ВариантОтчета) = "П"
				И НЕ РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1() = "ОсновнаяФорма" Тогда
				
				ПоказатьПредупреждение(,НСтр("ru='Внимание! Выгружать в электронном виде первичную форму РСВ-1 необходимо
				|в комплекте с документами квартальной отчетности персонифицированного
				|учета из специализированного рабочего места подготовки квартальной
				|отчетности в ПФР. Выгрузка прервана.'"));
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НаименованиеОтчета = "Статистика: Форма учета перемещения товаров"
		ИЛИ НаименованиеОтчета = "Статистическая форма учета перемещения товаров") И КонтекстЭДОКлиент <> Неопределено Тогда
		ДокументЗаявлениеОВвозеТоваров = Неопределено;
		ИмяДокументаЗаявлениеОВвозеТоваров = Неопределено;
		РезультатПолученияЗаявленияОВвозеТоваров = КонтекстЭДОКлиент.ПопытатьсяПолучитьЗаявлениеОВвозеТоваровИзСтатформы(
			Ссылка, ДокументЗаявлениеОВвозеТоваров, ИмяДокументаЗаявлениеОВвозеТоваров);
		Если РезультатПолученияЗаявленияОВвозеТоваров = Неопределено Тогда
			Возврат;
		ИначеЕсли РезультатПолученияЗаявленияОВвозеТоваров Тогда
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ДокументЗаявлениеОВвозеТоваров", ДокументЗаявлениеОВвозеТоваров);
			ДополнительныеПараметры.Вставить("ИмяДокументаЗаявлениеОВвозеТоваров", ИмяДокументаЗаявлениеОВвозеТоваров);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаЗавершениеИзСтатформы", ЭтотОбъект, ДополнительныеПараметры);
			РегламентированнаяОтчетностьКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НаименованиеОтчета = "Статистика: Форма П-1" Тогда
			
		Если НЕ ПроверитьВозможностьВыгрузкиП1ИзФормыОтчетностьНаСервере(Ссылка) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для отчета ""Статистика: Форма П-1 за %1"" не выбрано Приложение №3.
				|Необходимо сначала осуществить выгрузку из формы отчета! Выгрузка прервана.'"), ПредставлениеПериода);
			Сообщение.Сообщить();
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НаименованиеОтчета = "Статистика: Форма П-1 Приложение 3" Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выгрузка отчета ""Статистика: форма П-1 (приложение 3) за %1"" производится из формы П-1 за соответствующий период.'"), ПредставлениеПериода);
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
			
	Если СтандартнаяОбработка Тогда
	
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.Добавить(Ссылка);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СписокОтчетов", СписокОтчетов);
		ДополнительныеПараметры.Вставить("Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6", Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
		НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ПодключеноРасширениеРаботыСФайлами", Подключено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = "Выгрузить выбранный отчет?";
	ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СписокОтчетов = ДополнительныеПараметры.СписокОтчетов;

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузкаРегламентированногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		РегламентированнаяОтчетностьКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, СписокОтчетов[0].Значение)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СписокОтчетов = ДополнительныеПараметры.СписокОтчетов;
	
	ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина;
	
	Если ДополнительныеПараметры.Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6
		И ДополнительныеПараметры.ПодключеноРасширениеРаботыСФайлами Тогда
		ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Ложь;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(
		СписокОтчетов, , , ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выгрузка прервана!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаЗавершениеИзСтатформыПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ВыгрузкаРегламентированногоОтчетаЗавершениеИзСтатформы(
		ПараметрыОповещения.Отказ,
		ПараметрыОповещения.ДополнительныеПараметры
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаРегламентированногоОтчетаЗавершениеИзСтатформы(Отказ, ДополнительныеПараметры) Экспорт
	
	ДокументЗаявлениеОВвозеТоваров = ДополнительныеПараметры.ДокументЗаявлениеОВвозеТоваров;
	ИмяДокументаЗаявлениеОВвозеТоваров = ДополнительныеПараметры.ИмяДокументаЗаявлениеОВвозеТоваров;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Отказ", Отказ);
		ПараметрыОповещения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		Оповещение = Новый ОписаниеОповещения(
			"ВыгрузкаРегламентированногоОтчетаЗавершениеИзСтатформыПредварительное", 
			ЭтотОбъект, 
			ПараметрыОповещения
		);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	АдресФайлаВыгрузки = Неопределено;
	ИмяФайлаВыгрузки = "";
	
	РезультатВыгрузки = КонтекстЭДОКлиент.ПопытатьсяВыгрузитьСтатформуИзЗаявленияОВвозеТоваров(
		АдресФайлаВыгрузки,
		ИмяФайлаВыгрузки,
		,
		Истина,
		,
		ДокументЗаявлениеОВвозеТоваров,
		ИмяДокументаЗаявлениеОВвозеТоваров);
	
	Если РезультатВыгрузки = Истина Тогда
		ПолучитьФайл(АдресФайлаВыгрузки, ИмяФайлаВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьВыгрузкиП1ИзФормыОтчетностьНаСервере(ОтчетСсылка)
	
	Перем ВыбранныйОтчетПриложение3;
	
	ДанныеОтчетаХЗ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтчетСсылка, "ДанныеОтчета, ДатаНачала");
	Если Год(ДанныеОтчетаХЗ.ДатаНачала) >= 2017 Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ДанныеВыгружаемогоОтчета = ДанныеОтчетаХЗ.ДанныеОтчета.Получить();
	
	Если НЕ ДанныеВыгружаемогоОтчета.Свойство("ВыбранныйОтчетПриложение3", ВыбранныйОтчетПриложение3) Тогда
		Возврат Ложь;
	ИначеЕсли ВыбранныйОтчетПриложение3 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьФормуСтатусовОтправкиИзСпискаПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПоказатьФормуСтатусовОтправкиИзСписка(
		ПараметрыОповещения.Элемент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуСтатусовОтправкиИзСписка(Элемент)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		Оповещение = Новый ОписаниеОповещения(
			"ПоказатьФормуСтатусовОтправкиИзСпискаПредварительное", 
			ЭтотОбъект, 
			ПараметрыОповещения
		);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеРегОтчета(ДокументРегОтчет)
	
	ОписаниеРегОтч = Новый Структура;
	
	Если ТипЗнч(ДокументРегОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
	
		ОбъектРегОтч = ДокументРегОтчет.ПолучитьОбъект();
		
		ОписаниеРегОтч.Вставить("Организация",             ОбъектРегОтч.Организация);
		ОписаниеРегОтч.Вставить("ДатаНачалаПериодаОтчета", ОбъектРегОтч.ДатаНачала);
		ОписаниеРегОтч.Вставить("ДатаКонцаПериодаОтчета",  ОбъектРегОтч.ДатаОкончания);
		ОписаниеРегОтч.Вставить("КорректирующаяФорма",     ОбъектРегОтч.Вид > 0);
		ОписаниеРегОтч.Вставить("НомерКорректировки",      ОбъектРегОтч.Вид);
		ОписаниеРегОтч.Вставить("ВыбраннаяФорма",          СокрЛП(ОбъектРегОтч.ВыбраннаяФорма));
		
		ОписаниеРегОтч.Вставить("ИсточникОтчета",	  СокрЛП(ОбъектРегОтч.ИсточникОтчета));
		ОписаниеРегОтч.Вставить("НаименованиеОтчета", СокрЛП(ОбъектРегОтч.НаименованиеОтчета));	
		
		ОписаниеРегОтч.Вставить("ДоступнаПечатьPDF417", Истина);
		
		Если СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "РСВ-1 ПФР" Тогда
			
			Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
				
				ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", Ложь);
				
				ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
				ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
				ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				
			ИначеЕсли ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
				
				ОтчетСтарогоОбразца_20141101 = Ложь;
				ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
				ОтчетСтарогоОбразца_20141101 = ?(ОтчетСтарогоОбразца_20141101 = Неопределено, Истина, ОтчетСтарогоОбразца_20141101);
				ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
				
				ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
				ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
				ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
				
			КонецЕсли;
			
		ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Декларация по УСН" Тогда
			
			Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
				
				ПоказателиОтчета = Неопределено;
				СписокСохранения = ОбъектРегОтч.ДанныеОтчета.Получить();
				СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
				Если ПоказателиОтчета.ПолеТабличногоДокументаРаздел21.Свойство("П000210012003") Тогда
					ОписаниеРегОтч.Вставить("РекомендованнаяФорма",
						ПоказателиОтчета.ПолеТабличногоДокументаРаздел21.П000210012003 <> 6);
				Иначе
					ОписаниеРегОтч.Вставить("РекомендованнаяФорма", Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Доходы, выплаченные иностранным организациям" Тогда
			
			Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2016Кв1" Тогда
				
				СписокСохранения = ОбъектРегОтч.ДанныеОтчета.Получить();
				ДопПараметры = Неопределено;
				Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда
					ОписаниеРегОтч.Вставить("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении",
					РегламентированнаяОтчетность.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении(
					ОбъектРегОтч, ДопПараметры));
					Если НЕ ОписаниеРегОтч.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении
						И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
						Если ДопПараметры.Свойство("ТекстСообщения") Тогда
							ОписаниеРегОтч.Вставить("ТекстСообщения", ДопПараметры.ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Декларация 3-НДФЛ" Тогда
			
			ОписаниеРегОтч.ДоступнаПечатьPDF417 =
				Отчеты["РегламентированныйОтчет3НДФЛ"].ДоступнаПечатьPDF417(ОписаниеРегОтч.ВыбраннаяФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеРегОтч;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектВАрхиве(Знач ОбъектОтправки, Знач ИмяФайла)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат Неопределено;
	// Конец ДЕНЬГИ
	
КонецФункции

&НаСервереБезКонтекста
Функция ПротоколЕсть(Отправка, ВАрхиве = Ложь)
	
	ВАрхиве = Ложь;
	Если ЗначениеЗаполнено(Отправка) Тогда
		ВАрхиве = ОбъектВАрхиве(Отправка, "Протокол");
		Возврат ЗначениеЗаполнено(Отправка.Протокол.Получить());
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура НапечататьОбъектНеВходящийВБРО(Ссылка, СведенияПоОбъекту)
	
	МакетПечати = СведенияПоОбъекту.ИмяОсновногоМакетаДляПечати;
	
	СтандартнаяПечатьОбъекта = Истина;
	РегламентированнаяОтчетностьКлиент.ПечатьПереопределяемый(Ссылка, МакетПечати, СтандартнаяПечатьОбъекта);
	
	Если СтандартнаяПечатьОбъекта Тогда
		
		Если МакетПечати <> Неопределено Тогда
			
			ИмяМенеджера = ИмяМенеджераПечати(Ссылка);
			
			МассивПечати = Новый Массив;
			МассивПечати.Добавить(Ссылка);
			
			// ДЕНЬГИ
			// удален вызов другой подсистемы
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджера, МакетПечати, МассивПечати, Неопределено);
			// Конец ДЕНЬГИ
			
		Иначе
			
			ПредупредитьОбОграничениях(Элементы.Отчеты, НСтр("ru = 'Печать без штрихкода PDF417 не предусмотрена'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМенеджераПечати(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя();
	
КонецФункции

&НаКлиенте
Процедура ПечатьПротоколовПоСсылкеПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПечатьПротоколовПоСсылке(
		ПараметрыОповещения.Закладка,
		ПараметрыОповещения.Ссылка,
		ПараметрыОповещения.ВидКонтролирующегоОргана,
		ПараметрыОповещения.НеОтправляетсяВКонтролирующийОрган,
		ПараметрыОповещения.СостояниеСдачиОтчетности
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПротоколовПоСсылке(
	Закладка, 
	Ссылка, 
	ВидКонтролирующегоОргана, 
	НеОтправляетсяВКонтролирующийОрган, 
	СостояниеСдачиОтчетности)
	
	// ДЕНЬГИ
	// удален вызов других подсистем
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьРезультатОбновленияИнформацииМеханизмаОнлайнСервисовРО()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗаданияМОС) Тогда // задание выполнено
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьРезультатПроверкиОбновленияИнформацииМОС", ЭтотОбъект);
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияМОС);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьРезультатОбновленияИнформацииМеханизмаОнлайнСервисовРО",
				ПараметрыОбработчикаОжиданияМОС.ТекущийИнтервал, Истина);
		КонецЕсли;
			
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
			
		ТекстСообщенияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при проверке результата обновления информации механизма онлайн-сервисов регламентированной отчетности
					 |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					 
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Регламентированная отчетность. Проверка результата обновления информации механизма онлайн-сервисов регламентированной отчетности'"), 
			"Ошибка", ТекстСообщенияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПроверкиОбновленияИнформацииМОС(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилищаМОС);
	Если НЕ ЗначениеЗаполнено(РезультатПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатПроверки) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
		
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Обновлены внешние формы отчетов - %1'"),
						Формат(РезультатПроверки.Количество(), "ЧГ="));
		
	Для каждого СтрокаСообщения Из РезультатПроверки Цикл
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС
					   + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), СтрокаСообщения);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКоличествоОбъектовНеЗаписанныхВРегистр()
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	
	Результат = РегламентированнаяОтчетность.КоличествоОбъектовНеЗаписанныхВРегистр(ПараметрыЗапуска);
	
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПодсчетаКоличестваНезаписанныхОбъектов()

	Попытка
		// Обрабатываем результат запуска фонового задания по проверке наличия объектов, не записанных в регистры
		Если РезультатПроверкиКоличестваНезаписанныхОбъектов <> Неопределено Тогда
			// Результат получен и уже обработан на стороне сервера
			ПоказатьРезультатПроверки();
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ПоказатьРезультатПроверки();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеПодсчетаКоличестваНезаписанныхОбъектов",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщенияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подсчете количества объектов, не отображаемых в форме 1С-Отчетность 
					 |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					 
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Регламентированная отчетность. Проверка количества незаписанных объектов'"), 
			"Ошибка", 
			ТекстСообщенияОбОшибке,
			,
			Истина);
			
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПроверки()
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если НЕ ЗначениеЗаполнено(РезультатПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПроверки.КоличествоНезаписанныхОбъектов = 0 И РезультатПроверки.КоличествоНекорректныхЗаписей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДописатьОбъектыОтсутствующиеВРегистре();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ДописатьОбъектыОтсутствующиеВРегистре(СОчисткойРегистров = Ложь)
	
	Результат  = ЗапуститьДобавлениеОбъектовВРегистр(СОчисткойРегистров);
	
	Если Результат <> Неопределено Тогда
		// Задание отработало, результат получен
		ДействияПослеЗавершенияИндексированияОбъектов();
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьРезультатДобавленияОбъектовОтсутствующихВРегистре", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьРезультатДобавленияОбъектовОтсутствующихВРегистре()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДействияПослеЗавершенияИндексированияОбъектов();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьРезультатДобавленияОбъектовОтсутствующихВРегистре",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ЗапуститьДобавлениеОбъектовВРегистр(СОчисткойРегистров = Ложь)
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыЗапуска.Вставить("СОчисткойРегистров", СОчисткойРегистров);
	
	Результат = РегламентированнаяОтчетность.ДобавлениеОбъектовОтсутствующихВРегистре(ПараметрыЗапуска);
	
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыОбъектаПоУмолчанию(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТекущуюТаблицу()
	
	Для каждого Раздел Из Разделы(ЭтотОбъект, Истина) Цикл
		
		ТекущаяСтраницаРаздела = Элементы["Страница" + Раздел];
		
		Если Элементы.Разделы.ТекущаяСтраница = ТекущаяСтраницаРаздела Тогда
			Элементы[Раздел].Обновить();
		КонецЕсли;
		
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОнлайнПроверкаПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ОнлайнПроверка(
		ПараметрыОповещения.Закладка		
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОнлайнПроверка(Закладка)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОграничениях(Закладка, Знач ТекстПредупреждения, Знач ВидОбъекта = Неопределено)
	
	// Переводим первый символ в нижний регистр
	ТекстПредупреждения = НРег(Лев(ТекстПредупреждения, 1)) + Сред(ТекстПредупреждения, 2);
	
	ТекстПредупреждения = НСтр("ru = 'Для %1 ""%2"" '") + ТекстПредупреждения;
	
	ЭтоОтчеты = Закладка = Элементы.Отчеты;
	ТекущиеДанные = Закладка.ТекущиеДанные;
	
	Если ВидОбъекта = Неопределено Тогда
		Если ЭтоОтчеты Тогда
			ВидОбъекта = НСтр("ru = 'отчета'");
		Иначе
			ВидОбъекта = НСтр("ru = 'уведомления'"); 
		КонецЕсли;
	КонецЕсли;
	
	Наименование = "";
	Если ЭтоОтчеты Тогда
		Наименование = ТекущиеДанные.НаименованиеОтчета;
	Иначе
		Наименование = ТекущиеДанные.Наименование;
	КонецЕсли;
	
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ВидОбъекта);
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%2", Наименование);
	
	ПоказатьПредупреждение(,ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ТекущаяСтраницаРазделов", Элементы.Разделы.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ТолькоУказанныйПериод", ТолькоУказанныйПериод);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ПериодОтчета",  ПериодОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_НачалоПериода", НачалоПериода);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_КонецПериода",  КонецПериода);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтбораИСортировки()
	
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_Организация", Организация);
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ВидОтчета",   ВидОтчета);
	
	ПользовательскиеНастройкиДинамическогоСписка = ЭтаФорма.Отчеты.КомпоновщикНастроек.ПользовательскиеНастройки;
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ПользовательскиеНастройкиОтчетов", ПользовательскиеНастройкиДинамическогоСписка);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЭлементовПриОтключенномЭДО()
	
	ЕстьПравоОбмена = 
		РольДоступна("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами")
		ИЛИ РольДоступна("АдминистраторСистемы")
		ИЛИ РольДоступна("ПолныеПрава");
	
	Элементы.ГруппаПанельИнформацииСКнопкой.Видимость = ЭлектронныйДокументооборотДоступен;
	Элементы.ОбновитьДанные.Видимость = ЕстьПравоОбмена;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЛичныхКабинетов()
	
	УправлениеВидимостьюЛичныхКабинетовНаправлений();
	УправлениеВидимостьюЛичныхКабинетовСпецоператоров();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЛичныхКабинетовНаправлений()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЛичныхКабинетовСпецоператоров()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКритическиеОшибкиПоСсылкеПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	ПоказатьКритическиеОшибкиПоСсылке(
		ПараметрыОповещения.Ссылка		
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКритическиеОшибкиПоСсылке(Ссылка)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Ссылка", Ссылка);
		Оповещение = Новый ОписаниеОповещения(
			"ПоказатьКритическиеОшибкиПоСсылкеПредварительное", 
			ЭтотОбъект, 
			ПараметрыОповещения
		);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьНаНужнойСтранице(Параметры)
	
	// Если в качестве параметра открытия формы 1С-Отчетность была передана закладка, то открываем на этой закладке,
	// инчае открываем на той, на которой форму закрыли в последний раз,
	// либо на закладке Отчеты, если форма открывается впервые
	Если Параметры.Свойство("ВидУведомления") И ЗначениеЗаполнено(Параметры.ВидУведомления) Тогда
		
		Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаУведомления;
	
	ИначеЕсли Параметры.Свойство("Раздел") Тогда
		
		Элементы.Разделы.ТекущаяСтраница = Элементы["Страница" + ИмяСтраницы(Параметры.Раздел)];
			
	Иначе
		
		// Восстанавливаем запомненную страницу
		ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма.ИмяФормы, "Форма1СОтчетность_ТекущаяСтраницаРазделов");
		Если ТекСтраница <> Неопределено И Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
			Элементы.Разделы.ТекущаяСтраница = Элементы[ТекСтраница];
		Иначе
			Элементы.Разделы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НазначитьВидОтчетаИзПараметра(Параметры)
	
	Если Параметры.Свойство("ВидОтчета") Тогда
		
		ПараметрВидОтчета = СокрЛП(Параметры.ВидОтчета);
		
		Если ЗначениеЗаполнено(ПараметрВидОтчета) Тогда
			
			МассивВидовОтчетов = ПолучитьСписокОтчетовИзРегистраСведений();
			Элементы.ОтборВидОтчета.СписокВыбора.ЗагрузитьЗначения(МассивВидовОтчетов);
			// Тип реквизита может быть переопределен при необходимости (при переопределении формы выбора вида отчета).
			ВидОтчета = ПараметрВидОтчета;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьВидУведомленияИзПараметра(Параметры)
	
	Если Параметры.Свойство("ВидУведомления") И ЗначениеЗаполнено(Параметры.ВидУведомления) Тогда
		
		ВидУведомления = Параметры.ВидУведомления;
		ПредставлениеВидаУведомления = СокрЛП(Параметры.ВидУведомления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СделатьВсеГиперссылкиНеактивными()
	
	Для каждого Раздел Из Разделы(ЭтотОбъект) Цикл
		
		Гиперссылка = Элементы["Гиперссылка" + Раздел];
		
		Гиперссылка.ЦветФона		= Серый;
		Гиперссылка.Гиперссылка		= Истина;
		Гиперссылка.ЦветТекста		= Черный;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеУведомление()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗапросНаВыпискуИзЕГРЮЛ_ЕГРИППредварительное(Результат, ПараметрыОповещения) Экспорт
	
	СоздатьНовыйЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеПисьмо()
	
	СписокВидовПисьма = Новый СписокЗначений;
	СписокВидовПисьма.Добавить(НСтр("ru = 'Письмо'"));
	СписокВидовПисьма.Добавить(НСтр("ru = 'Ответ на требование'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораВидаПисьма", ЭтотОбъект);
	СписокВидовПисьма.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите вид письма'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораВидаПисьма(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		// Значит пользователь нажал Отмена
	ИначеЕсли Результат.Значение = НСтр("ru = 'Письмо'") Тогда
		 СоздатьНовоеИсходящееПисьмо();
	ИначеЕсли Результат.Значение = НСтр("ru = 'Ответ на требование'") Тогда 
		 СоздатьОтветНаТребование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеИсходящееПисьмо()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюСверку()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораВидаСверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СоздатьСверку(Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУВРежимеСервиса()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		Элементы.НадписьИнформацияОбОбновлениях.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПоказыватьЛиПредложениеНаПодключение()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	ПоказатьПредложениеОформитьЗаявлениеНаПодключение = Ложь;
	// Конец ДЕНЬГИ
	
КонецПроцедуры
	
&НаСервере
Процедура ОпределитьДоступностьЭДО()
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаСервере
Функция ПометитьПрочтенными()
	
	ВсеВыделенныеОбъекты 	= Новый Массив;
	СтавшиеПрочтенными 		= Новый Массив;
	СтавшиеНепрочтенными 	= Новый Массив;
	
	ТекущаяСтраница = ТекущаяСтраница(ЭтотОбъект);
	ТекущаяТаблица  = ТекущаяТаблица(ЭтотОбъект);
	
	Для каждого Строка Из ТекущаяТаблица.ВыделенныеСтроки Цикл
		// ДЕНЬГИ
		// удален вызов другой подсистемы
		ВсеВыделенныеОбъекты.Добавить(Строка.Ссылка);
		// Конец ДЕНЬГИ
	КонецЦикла;
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеВыделенныеОбъекты", 		ВсеВыделенныеОбъекты);
	Результат.Вставить("СтавшиеПрочтенными", 		СтавшиеПрочтенными);
	Результат.Вставить("СтавшиеНепрочтенными", 		СтавшиеНепрочтенными);

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПанелиОшибокОбновления(Форма)

	Форма.Элементы.ОшибкиОбновления.Видимость = ЭтоАдресВременногоХранилища(Форма.АдресСведенийПоОшибкам);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОповеститьСписокОтчетовОбИзмененииИндексаКартинки(
	ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныеФайлы()
	
	ТекущиеДанные = Неопределено;
	
	ТекущаяСтраница = ТекущаяСтраница(ЭтотОбъект);
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Наименование = "";
	СсылкаНаОбъект = Неопределено;
	// Конец ДЕНЬГИ
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВладелецФайла",  СсылкаНаОбъект);
		ДопПараметры.Вставить("Организация",    ТекущиеДанные.Организация);
		ДопПараметры.Вставить("ТолькоПросмотр", Ложь);
		ДопПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Наименование);
		
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуПрисоединенныеФайлы(, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеЗавершенияИндексированияОбъектов()
	
	ОбновитьТекущуюТаблицу();
	Если ЗаполнитьДеревоНовое() Тогда
		ПриПереключенииРаздела(Элементы.ГиперссылкаНовое);
		Оповестить("Получены новые сообщения 1С-Отчетности",, ЭтаФорма);
	КонецЕсли;
	
	ОбновитьКоличествоНепрочтенныхОбъектов(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаголовкиГруппыНастройки(Организация)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаголовокГиперссылкиЗаявления", 		"");  // ДЕНЬГИ ЗаголовокГиперссылкиЗаявления);
	Результат.Вставить("ЗаголовокГиперссылкиСпискаЗаявлений", 	"");  // ДЕНЬГИ ЗаголовокГиперссылкиСпискаЗаявлений);
	Возврат Результат;
	
КонецФункции

#Область ДлительныеОперацииАЛКО

////////////////////////////////////////////////////////////////////////////////
//
// Механизм длительных операций отчетов подсистемы ОтчетностьПоАлкогольнойПродукции
//		  
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Функция ОбработаноДействиеДляАлкоОтчета(ДокументСсылкаАлкоОтчет, ОписаниеОтчета, 
										Действие, ВидПечати = Неопределено)

	Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		// Ничего не делаем, обработка продолжается дальше в вызывающей процедуре.
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьПоАлкогольнойПродукции") Тогда
		// Ничего не делаем, обработка продолжается дальше в вызывающей процедуре.
		Возврат Ложь;
	КонецЕсли;
	
	ОбщийМодульАЛКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегламентированнаяОтчетностьАЛКОКлиент");
	
	НеСтандартнаяОбработка = Ложь;
	НужнаДлительнаяОперация = ОбщийМодульАЛКОКлиент.ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, Действие, НеСтандартнаяОбработка);
	
	Если НужнаДлительнаяОперация Тогда
	
		// Действие разрешено и отчет не табличный.
		ОбщийМодульАЛКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегламентированнаяОтчетностьАЛКОКлиент");			
		ДлитОперация = ОбщийМодульАЛКОКлиент.ПолучитьПеречислениеВидыДлительныхОперацийРеглОтчетов(Действие);				
		
		ДлительныеОперацииАлко(ДокументСсылкаАлкоОтчет, ДлитОперация, ВидПечати);
		
		// Запустили действие и завершаем обработку в вызывающей процедуре.
	    Возврат Истина;
		
	Иначе
		
		// Предупреждение уже выдано в  ОбработкаДействияСАлкоОтчетом().
		// Возвращаем признак, нужно ли далее стандартно обрабатывать в процедуре, откуда вызвали,
		// или нужно прекращать дальнейшую обработку.
		// Истина 	- обработка в вызывающей процедуре будет прекращена.
		// Ложь		- обработка в вызывающей процедуре будет продолжена как с обычным табличным отчетом.
		Возврат НеСтандартнаяОбработка;
	
	КонецЕсли; 
	
КонецФункции
 

// Выполняет все длительные операции отчета.
//
// Параметры:
//
//		ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - Документ отчета.
//	 	ВидДлОперации 				- Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.
//									Задает вид выполняемой длительной операции отчета.
// 		ВидПечати 					- Строка - Необязательный. Задает вид печати отчета при длительных
//									операцях печати.
//
&НаКлиенте
Процедура ДлительныеОперацииАлко(ДокументСсылкаАлкоОтчет, ВидДлОперации, ВидПечати = Неопределено)

	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьПоАлкогольнойПродукции") Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураВспомДанныхДлитОперацииАЛКО = Новый Структура;
	СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидДлительнойОперации", ВидДлОперации);
	СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидПечати", ВидПечати);
		
	ФормаОтчетаДлитОперации = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(ДокументСсылкаАлкоОтчет);
	
	СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ФормаОтчетаДлитОперации", ФормаОтчетаДлитОперации);
		
	ФормаОтчетаДлитОперации.ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлОперации, ВидПечати, ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте()
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьПоАлкогольнойПродукции") Тогда
		Возврат;	
	КонецЕсли;
	
	ОбщийМодульАЛКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегламентированнаяОтчетностьАЛКОКлиент");
		
	ФормаОтчетаДлитОперации = СтруктураВспомДанныхДлитОперацииАЛКО.ФормаОтчетаДлитОперации;
	ОперацияЗавершена = ОбщийМодульАЛКОКлиент.ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(ФормаОтчетаДлитОперации);
	
	Если ОперацияЗавершена Тогда
		
		ПараметрыОбработчикаОжидания = Неопределено;
		СтруктураВспомДанныхДлитОперацииАЛКО = Неопределено;
		
	    Возврат;
		
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

// Конец области ДлительныеОперацииАЛКО.
#КонецОбласти

#Область РучнойВводСтатусовОтправки

&НаКлиенте
Функция МожноИзменитьСтатусВручную(Ссылка)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьСтатусОтправкиИзСписка(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	ТекСтатус = СокрЛП(Элемент.ТекущиеДанные.Статус);
	СсылкаНаОбъект = Элемент.ТекущиеДанные.РегламентированныйОтчет;
	// Конец ДЕНЬГИ
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Организация",		 Элемент.ТекущиеДанные.Организация);
	ДопПараметры.Вставить("КонтролирующийОрган", Элемент.ТекущиеДанные.ВидКонтролирующегоОргана);
	ДопПараметры.Вставить("СсылкаНаОбъект",		 СсылкаНаОбъект);
	
	СписокСтатусов = Новый СписокЗначений;
	
	// определяем список статусов
	СписокСтатусов.ЗагрузитьЗначения(
	РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(СсылкаНаОбъект, Элемент.ТекущиеДанные.ВидКонтролирующегоОргана));
	
	ТекСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ТекСтатус);
	
	ТекЭлемСпискаСтатусов = СписокСтатусов.НайтиПоЗначению(ТекСтатус);
	
	ДопПараметры.Вставить("ПредСтатусЭлемент", ТекЭлемСпискаСтатусов);
	
	Оп = Новый ОписаниеОповещения("ВыбратьСтатусОтправкиИзСпискаПродолжение", ЭтотОбъект, ДопПараметры);
	
	Если ТекЭлемСпискаСтатусов = Неопределено Тогда
		ПоказатьВыборИзСписка(Оп, СписокСтатусов);
	Иначе
		ПоказатьВыборИзСписка(Оп, СписокСтатусов, , ТекЭлемСпискаСтатусов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтатусОтправкиИзСпискаПродолжение(ВыбСтатусЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбСтатусЭлемент <> Неопределено
		И ВыбСтатусЭлемент <> ДополнительныеПараметры.ПредСтатусЭлемент Тогда
		
		ДополнительныеПараметры.Вставить("НовСтатус", ВыбСтатусЭлемент.Значение);
		
		Если ВыбСтатусЭлемент.Значение = НСтр("ru = 'Сдано'") Тогда
			
			Если РегламентированнаяОтчетностьВызовСервера.ПодключенДокументооборотСКонтролирующимОрганом(
				ДополнительныеПараметры.Организация, ДополнительныеПараметры.КонтролирующийОрган) Тогда
				
				Оп = Новый ОписаниеОповещения("ВыбратьСтатусОтправкиИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				
				// ДЕНЬГИ
				// удален вызов другой подсистемы
				ТекстВопроса = НСтр("ru='Вы уверены, что отчет уже сдан?'");
				// Конец ДЕНЬГИ
				
				ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВыбратьСтатусОтправкиИзСпискаЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Отчет, Отказ)
	
	РегламентированнаяОтчетность.ЗаписьОбъектовРегламентированнойОтчетности(Отчет, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтатусОтправкиИзСпискаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПредСтатусЭлемент") Тогда
		ДополнительныеПараметры.Удалить("ПредСтатусЭлемент");
	КонецЕсли;
	
	СохранитьСтатусОтправки(ДополнительныеПараметры);
	
	// для Минобороны сохраняем дополнительно, чтобы обновить статус в списке
	Если ДополнительныеПараметры.КонтролирующийОрган = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
		Отчет = ДополнительныеПараметры.СсылкаНаОбъект;
		Отказ = Неопределено;
		ЗаписьОбъектовРегламентированнойОтчетности(Отчет, Отказ);
	КонецЕсли;
	
	Отборы = Новый Массив;
	
	ТекущаяСтраница = ТекущаяСтраница(ЭтотОбъект);
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Отборы.Добавить(Новый Структура("Организация,Ссылка",
	ДополнительныеПараметры.Организация, ДополнительныеПараметры.СсылкаНаОбъект));
	ТипЗначенияРегистра = Тип("РегистрСведенийКлючЗаписи.ЖурналОтчетовСтатусы");
	// Конец ДЕНЬГИ
	
	Ключ = Новый(ТипЗначенияРегистра, Отборы);
	
	Если НЕ Ключ.Пустой() Тогда
		ОповеститьОбИзменении(Ключ);
	КонецЕсли;
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Организация", ДополнительныеПараметры.Организация);
	ПараметрОповещения.Вставить("Ссылка", ДополнительныеПараметры.СсылкаНаОбъект);
	Оповестить("Запись_РегламентированныйОтчет", ПараметрОповещения);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСтатусОтправки(ПараметрыИзменения)
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ДействияПриИзмененииОтборовИОбновлениеВходящих(Форма)
	
	ДействияПриИзмененииОтборов(Форма);
	ОбновитьКоличествоНепрочтенныхОбъектов(Форма);
					
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоличества(Знач КоличествоНепрочитанныхОбъектов)
	
	НадписьКоличество = "";
	Если КоличествоНепрочитанныхОбъектов > 99 Тогда  
		НадписьКоличество = " (99+)";
	ИначеЕсли КоличествоНепрочитанныхОбъектов <> 0 Тогда
		НадписьКоличество = " (" + Строка(КоличествоНепрочитанныхОбъектов) + ")";
	КонецЕсли;
	
	Возврат НадписьКоличество;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЭлектронногоПредставленияРегОтчета(СсылкаНаЭлПредставлениеРегОтчета)
	
	ОписаниеЭлПредставления = Новый Структура;
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	// Конец ДЕНЬГИ
	
	Возврат ОписаниеЭлПредставления;
	
КонецФункции

&НаСервере
Функция ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(ВыбОрганизация,
	КодНалоговогоОргана, ДатаКонцаПериодаОтчета, ТекущийНомерКорректировки)
	
	Если Метаданные.Отчеты.Найти("РегламентированныйОтчетНДС") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектОтчет = РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект("РегламентированныйОтчетНДС");
	
	Если НЕ РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ОбъектОтчет, "ЭтотОбъект") Тогда
		ОбъектОтчет = ОбъектОтчет.Создать();
	КонецЕсли;
	
	Возврат ОбъектОтчет.ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(
	ВыбОрганизация, КодНалоговогоОргана, ДатаКонцаПериодаОтчета, ТекущийНомерКорректировки);
	
КонецФункции

&НаКлиенте
Функция ПереопределитьОткрытие(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Ссылка = ТекущиеДанные.Ссылка;
	
		Переопределить = Ложь;
		
		Попытка
			МодульСверкаСФНС = ОбщегоНазначенияКлиент.ОбщийМодуль("СверкаСФНСКлиент");
		Исключение
		    МодульСверкаСФНС = Неопределено;
		КонецПопытки;
		
		Если МодульСверкаСФНС <> Неопределено Тогда
			СтандартнаяОбработка = Истина;
			МодульСверкаСФНС.РегламентированнаяОтчетность_ТаблицаНовоеПриОткрытии(ЭтотОбъект, Ссылка, СтандартнаяОбработка);
			
			Если НЕ СтандартнаяОбработка Тогда
				Переопределить = Истина;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Переопределить;

КонецФункции

&НаСервере
Процедура ПереопределитьОформлениеСверки()
	
	Попытка
		МодульСверкаСФНС = ОбщегоНазначения.ОбщийМодуль("СверкаСФНС");
	Исключение
	    МодульСверкаСФНС = Неопределено;
	КонецПопытки; 
	
	Если МодульСверкаСФНС <> Неопределено Тогда
		МодульСверкаСФНС.РегламентированнаяОтчетность_ТаблицаНовоеПриОбновлении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Новости

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНовости(Команда)
		
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтаФорма, Команда);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтветНаТребованиеПредварительное(Результат, ПараметрыОповещения) Экспорт
	
	СоздатьОтветНаТребование(
		ПараметрыОповещения.Команда		
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтветНаТребование(Команда = Неопределено)
	
	Если КонтекстЭДОКлиент = Неопределено И Не КонтекстУжеПодключался Тогда 
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Команда", Команда);
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьОтветНаТребованиеПредварительное", 
			ЭтотОбъект, 
			ПараметрыОповещения
		);
		ИнициализироватьКонтекстЭДО(Оповещение);
		Возврат;
	КонецЕсли;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЗапретитьСозданиеПисьмаВОтветНаТребованиеПоДекларации", Истина);
			
	КонтекстЭДОКлиент.СоздатьОтветНаТребованиеСВыборомТребования(,Организация,ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПакетСДопДокументами(Команда)
	
	СоздатьПакетСДопДокументамиВФНС();
	
КонецПроцедуры

&НаКлиенте
Функция ФормаОкнаАвторизацииИППЕслиОткрыто()
	
	ОткрытыеОкна = ПолучитьОкна();
	
	Для каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		
		Если ОткрытоеОкно = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Содержимое = ОткрытоеОкно.Содержимое;
		
		Если Содержимое.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяФорма = Содержимое[0];
		
		Если ТекущаяФорма.ИмяФормы = "ОбщаяФорма.АвторизацияНаСайтеПоддержкиПользователей"
		 ИЛИ ТекущаяФорма.ИмяФормы = "ОбщаяФорма.ПодключениеИнтернетПоддержки" Тогда
			
			Возврат ТекущаяФорма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПометитьНаУдалениеРассылки()
	
	// ДЕНЬГИ
	// Удален вызов другой подсистемы
	Возврат Новый Массив;
	// Конец ДЕНЬГИ
		
КонецФункции

&НаКлиенте
Процедура ОчисткаРассылокПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВопроса) = Тип("КодВозвратаДиалога") И РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ПредметыРассылок = ПометитьНаУдалениеРассылки();
		Если ПредметыРассылок.Количество() > 0 Тогда 
			Для Каждого Ссылка Из ПредметыРассылок Цикл 
				Оповестить("Скрытие/восстановление объекта",, Ссылка);
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРассылок(Команда)
	
	ВидОбъекта = НСтр("ru = 'все рассылки'");
	
	ТекстСообщения = НСтр("ru = 'Вы уверены, что хотите пометить на удаление и скрыть %1?
                           |
						   |Помеченные на удаление рассылки в дальнейшем могут быть удалены навсегда при удалении помеченных объектов.
                           |Скрытые отчеты и документы можно восстановить в разделе
                           |""Настройки"" - ""Скрытые отчеты и документы"" формы 1С-Отчетность'");
	
	ТекстСообщения = СтрШаблон(ТекстСообщения, ВидОбъекта);
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения("ОчисткаРассылокПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(ВыполняемоеОповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВходящиеОчистка(Элемент, СтандартнаяОбработка)
	
	ДействияПриИзмененииОтборовИОбновлениеВходящих(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаЗаявленияНаПодключениеИзменениеНажатие(Элемент)
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти