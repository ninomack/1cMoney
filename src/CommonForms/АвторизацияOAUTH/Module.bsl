////////////////////////////////////////////////////////////////////////////////
//ОбщаяФорма.АвторизацияOAUTH.
//  Предоставляет возможность авторизовать приложение или отменить авторизацию в облачных сервисах
//  
//Параметры формы:
//  ОтменаАвторизации - Булево - если Истина, пользователь должен подтвердить отмену авторизации
//  Провайдер - ПеречислениеСсылка.ТипыПровайдеровREST - провайдер, чьей авторизацией управляет эта форма
//  
////////////////////////////////////////////////////////////////////////////////
&НаКлиенте 
Перем ВыполняетсяПроверкаПередЗакрытием;



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Провайдер,ОтменаАвторизации");
	
	Если Не ЗначениеЗаполнено(Провайдер) Тогда
		Провайдер = RESTВызовСервера.ПровайдерИзПараметраСеанса(СвойстваАккаунта);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Провайдер) Тогда
		ВызватьИсключение НСтр("ru='Не указан провайдер облачного сервиса, в котором нужно авторизовать приложение'");
	КонецЕсли;
	
	RESTКлиентСервер.ПроверитьСвойстваАккаунтаИПровайдера(Провайдер, СвойстваАккаунта, СвойстваПровайдера);
	
	Если ОтменаАвторизации Тогда
		
		Заголовок = СтрШаблон(НСтр("ru='Отмена авторизации в %1'"), Строка(Провайдер)); 
		
		Элементы.СтраницаАвторизации.Видимость = Ложь;
		Если Провайдер = Перечисления.ТипыПровайдеровREST.Яндекс Тогда
			Элементы.ГруппаСтраницФормы.ТекущаяСтраница = Элементы.СтраницаОтменыАвторизацииЯндекс;
		Иначе
			Элементы.ГруппаСтраницФормы.ТекущаяСтраница = Элементы.СтраницаОтменыАвторизации;
			Элементы.СтраницаОтменыАвторизацииЯндекс.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		ПодготовитьСвойстваПровайдераКАвторизации();
		Заголовок = СтрШаблон(НСтр("ru='Авторизация в %1'"), Строка(Провайдер)); 
		
	КонецЕсли;
	
	ПериодОжидания = 11;
	КонтрольнаяСтрока = ПрефиксСтатусСтрокиПровайдера(Провайдер) + Формат(ТекущаяДатаСеанса(), "ДФ=ггММдд-ЧЧ-мм-сс");
	СвойстваПровайдера.Вставить("КонтрольнаяСтрока", КонтрольнаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтменаАвторизации И Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс") Тогда
		
		ОбновитьСтраницуОтменыЯндекс();
		
	ИначеЕсли Не ОтменаАвторизации Тогда
		
		ОбновитьСтраницуАвторизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОтключитьОбработчикОжидания("ПроверитьКодДоступа");
	
	Если ВыполняетсяПроверкаПередЗакрытием = Неопределено Тогда
		// Форму закрывают до окончания проверки
		
		Если ОтменаАвторизации И Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс") Тогда
			// проверка отмены авторизации
			
			Отказ = Истина;
			ВыполняетсяПроверкаПередЗакрытием = Истина;
			ПроверитьОтменуАвторизации();
			
		ИначеЕсли Не ОтменаАвторизации И (Не КодДоступаПроверен Или ЗначениеЗаполнено(КодДоступа) И Не ТокенОбработан) Тогда 
			// проверка кода и токена доступа
			
			Отказ = Истина;
			ВыполняетсяПроверкаПередЗакрытием = Истина;
			
			Если Не КодДоступаПроверен Тогда
				ПроверитьКодДоступа();
			Иначе
				ПолучитьТокенДоступа();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура HTMLДокументДокументСформирован(Элемент)
	
	Если ОтменаАвторизации Тогда
		Возврат;
	КонецЕсли;
	
	#Если МобильноеПриложениеКлиент Тогда
		Возврат;
	#Иначе
		
		СсылкаЭлемента = Элементы.HTMLДокумент.Документ.location.href;
		Если СтрНайти(СсылкаЭлемента, СвойстваПровайдера.СтраницаОк) > 0
			Или СтрНайти(СсылкаЭлемента, СвойстваПровайдера.СтраницаОжидания) > 0
			Или СтрНайти(СсылкаЭлемента, СвойстваПровайдера.СтраницаОшибки) > 0 Тогда
			
			ОтключитьОбработчикОжидания("ПроверитьКодДоступа");
			ПериодОжидания = ПериодОжидания + 1;
			ПроверитьКодДоступа();
			
		КонецЕсли;
		
	#КонецЕсли		
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеАвторизации2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗапросВоВнешнемБраузере();
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ОменитьАвторизацию(Команда)
	ОтменитьАвторизациюПрограммно();
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПерейтиПоURL(URL)

	#Если МобильноеПриложениеКлиент Тогда
		Текст= "window.location = '" + URL + "';";
		Текст = "<html><body onload="""+Текст+"""></body></html>";
		HTMLдокумент = Текст;
	#Иначе
		Если ОтменаАвторизации Тогда
			HTMLДокумент1 = URL;
			ОбновитьОтображениеДанных(Элементы.HTMLДокумент1);
		Иначе
			HTMLДокумент = URL;
			ОбновитьОтображениеДанных(Элементы.HTMLДокумент);
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьСтраницуОтменыЯндекс()

	ПерейтиПоURL("https://passport.yandex.ru/profile");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗапросВоВнешнемБраузере()
	
	ПериодОжидания = 11;
	ОтключитьОбработчикОжидания("ПроверитьКодДоступа");
	
	// Генерируем адресную строку для браузера
	Адрес = АдресАвторизации();
	
	// Открытие страницы авторизации
	ЗапуститьПриложение(Адрес);
	ПерейтиПоURL(СвойстваПровайдера.СтраницаОжидания);
	
	// Подключение обработчика ожидания
	ПодключитьПроверкуКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницуАвторизации()

	ПериодОжидания = 11;
	ОтключитьОбработчикОжидания("ПроверитьКодДоступа");
	
	ПерейтиПоURL(АдресАвторизации());
	
	ПодключитьПроверкуКода();

КонецПроцедуры

&НаКлиенте
Функция АдресАвторизации()

	Если Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Dropbox") Тогда
		Возврат ЗапросDropbox();
	ИначеЕсли Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс") Тогда
		Возврат ЗапросЯндекс();
	ИначеЕсли Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Google") Тогда
		Возврат ЗапросGoogle();
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ЗапросDropbox()

	// Генерируем адресную строку для браузера
	Адрес = "HTTPS://" + СвойстваПровайдера.СерверАвторизации + "/" + СвойстваПровайдера.АдресАвторизации;
	Адрес = Адрес + "?";
	Адрес = Адрес + "client_id=" + СвойстваПровайдера.Идентификатор;
	Адрес = Адрес + "&response_type=" + "code"; 
	Адрес = Адрес + "&redirect_uri=" + СвойстваПровайдера.CallbackURL;
	Адрес = Адрес + "&state=" + КонтрольнаяСтрока;
	Адрес = Адрес + "&force_reapprove=true"; 
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Функция ЗапросЯндекс(Принудительно = Ложь)

	// Генерируем адресную строку для браузера
	Адрес = "HTTPS://" + СвойстваПровайдера.СерверАвторизации + "/" + СвойстваПровайдера.АдресАвторизации;
	Адрес = Адрес + "?";
	Адрес = Адрес + "client_id=" + СвойстваПровайдера.Идентификатор;
	Адрес = Адрес + "&response_type=" + "code"; 
	Адрес = Адрес + "&state=" + КонтрольнаяСтрока;
	Адрес = Адрес + "&force_confirm=true"; 
	
	Возврат Адрес;

КонецФункции

&НаКлиенте
Функция ЗапросGoogle(Принудительно = Ложь)

	// Генерируем адресную строку для браузера
	Адрес = "HTTPS://" + СвойстваПровайдера.СерверАвторизации + "/o/oauth2/v2/auth";
	Адрес = Адрес + "?";
	Адрес = Адрес + "client_id=" + СвойстваПровайдера.Идентификатор;
	Адрес = Адрес + "&redirect_uri=" + RESTВызовСервера.КодироватьСтрокуКакURL(СвойстваПровайдера.CallbackURL);
	Адрес = Адрес + "&response_type=code"; 
	Адрес = Адрес + "&scope=" + RESTВызовСервера.КодироватьСтрокуКакURL("https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.metadata https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email");
	Адрес = Адрес + "&state=" + КонтрольнаяСтрока;
	Адрес = Адрес + "&include_granted_scopes=true"; 
	Адрес = Адрес + "&prompt=consent"; 
	//Адрес = Адрес + "&approval_prompt=force"; 
	Адрес = Адрес + "&access_type=offline"; 
	
	Возврат Адрес;

КонецФункции

&НаСервере
Процедура ПодготовитьСвойстваПровайдераКАвторизации()

	СвойстваПровайдера.Вставить("СерверШлюза", "us-central1-checkdb-93a67.cloudfunctions.net");
	СвойстваПровайдера.Вставить("АдресШлюза", "getCode");
	
	Если Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Dropbox") Тогда
		
		СвойстваПровайдера.Вставить("СерверАвторизации", "www.dropbox.com");
		СвойстваПровайдера.Вставить("АдресАвторизации", "oauth2/authorize");
		СвойстваПровайдера.Вставить("СтраницаОК", "https://checkdb-93a67.firebaseapp.com/dropbox_ok.html");
		СвойстваПровайдера.Вставить("СтраницаОшибки", "https://checkdb-93a67.firebaseapp.com/dropbox_err.html");
		СвойстваПровайдера.Вставить("СтраницаОжидания", "https://checkdb-93a67.firebaseapp.com/dropbox_wait.html");
		
	ИначеЕсли Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс") Тогда
		
		СвойстваПровайдера.Вставить("СерверАвторизации", "oauth.yandex.ru");
		СвойстваПровайдера.Вставить("АдресАвторизации", "authorize");
		СвойстваПровайдера.Вставить("СтраницаОК", "https://checkdb-93a67.firebaseapp.com/yandex_ok.html");
		СвойстваПровайдера.Вставить("СтраницаОшибки", "https://checkdb-93a67.firebaseapp.com/yandex_err.html");
		СвойстваПровайдера.Вставить("СтраницаОжидания", "https://checkdb-93a67.firebaseapp.com/yandex_wait.html");
		
	ИначеЕсли Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Google") Тогда
		
		СвойстваПровайдера.Вставить("СерверАвторизации", "accounts.google.com");
		СвойстваПровайдера.Вставить("АдресАвторизации", "o/oauth2/v2/auth");
		СвойстваПровайдера.Вставить("СтраницаОК", "https://checkdb-93a67.firebaseapp.com/google_ok.html");
		СвойстваПровайдера.Вставить("СтраницаОшибки", "https://checkdb-93a67.firebaseapp.com/google_err.html");
		СвойстваПровайдера.Вставить("СтраницаОжидания", "https://checkdb-93a67.firebaseapp.com/google_wait.html");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксСтатусСтрокиПровайдера(Провайдер)

	Если Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Dropbox") Тогда
		Возврат "db_";
	ИначеЕсли Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Яндекс") Тогда
		Возврат "yd_";
	ИначеЕсли Провайдер = ПредопределенноеЗначение("Перечисление.ТипыПровайдеровREST.Google") Тогда
		Возврат "gg_";
	КонецЕсли;

	Возврат "" ;
	
КонецФункции


&НаКлиенте
Процедура ПодключитьПроверкуКода()

	Если ПериодОжидания < -10 Или КодДоступаПроверен Или ВыполняетсяПроверкаПередЗакрытием <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодОжидания = ПериодОжидания - 1;
	ПодключитьОбработчикОжидания("ПроверитьКодДоступа", Макс(ПериодОжидания, 1), Истина);

КонецПроцедуры

// Получение кода доступа с транзитного сервера
&НаКлиенте
Процедура ПроверитьКодДоступа()

	Если КодДоступаПроверен Тогда
		
		Если ЗначениеЗаполнено(КодДоступа) И Не ТокенОбработан Тогда
			ПолучитьТокенДоступа();
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Ответ = RESTКлиентСервер.ВыполнитьHTTPЗапрос("GET", СвойстваПровайдера.СерверШлюза, СвойстваПровайдера.АдресШлюза+ "?state=" + КонтрольнаяСтрока, "", , , Истина);
	
	Если Ответ = Неопределено Тогда
		// не удалось выполнить запрос
		
		Предупреждение(НСтр("ru='Кажется, сервер сейчас недоступен. Повторите попытку позже'"));
		АвтоматическоеЗакрытиеФормы();
		
	ИначеЕсли Ответ.КодСостояния = 481 Или Ответ.КодСостояния = 482 Тогда
		// Если контрольная строка еще не попала в шлюз, продолжаем обработку ожижания
		
		Если ВыполняетсяПроверкаПередЗакрытием <> Неопределено Тогда
			АвтоматическоеЗакрытиеФормы();
		Иначе
			ПодключитьПроверкуКода();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// все иные ответы завершают периодическую проверку кода
	КодДоступаПроверен = Истина;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		// По контрольной строке возвращен какой-то ответ
		ПоляОтвета = RESTКлиентСервер.СоответствиеИзHTTPОтвета(Ответ);
		Если ПоляОтвета = Неопределено Или ПоляОтвета.Получить("code") = Неопределено Тогда
			// TO-DO: перевести ответ сервера в "человечий вид"
			ПоказатьСтраницуОшибкиССообщением(НСтр("ru='Ошибка: код доступа не получен или пуст'"));
			Возврат;
		КонецЕсли;
		
		//Код получен
		Результат = ПоляОтвета.Получить("code");
		//Код должен быть строкой!
		Если ТипЗнч(Результат) = Тип("Число") Тогда
			КодДоступа = Формат(Результат, "ЧДЦ=; ЧГ=");
		Иначе
			КодДоступа = Результат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодДоступа) Тогда
			
			ПолучитьТокенДоступа();
			
		Иначе
			ПоказатьСтраницуОшибкиССообщением(НСтр("ru='Ошибка: получен пустой код доступа'"));
		КонецЕсли;
		
	Иначе
		
		// Все остальные ошибки обрабатываются по умолчанию
		ПоказатьСтраницуОшибкиССообщением(СтрШаблон(НСтр("ru='Ошибка при получении кода доступа: %1, %2'"), Символы.ПС + Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку()));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуОшибкиССообщением(ТекстСообщения)

	Сообщить(ТекстСообщения);
	ПерейтиПоURL(СвойстваПровайдера.СтраницаОшибки);
	
	Если ВыполняетсяПроверкаПередЗакрытием <> Неопределено Тогда
		АвтоматическоеЗакрытиеФормы();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенДоступа()

	Если ТокенОбработан Или Не ЗначениеЗаполнено(КодДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	ТокенОбработан = Истина;
	Результат = RESTКлиентСервер.ОбменятьКодДоступаНаТокен(Провайдер, КодДоступа, СвойстваПровайдера);
	
	Если Результат.ВыполненоУспешно Тогда
		
		Токен               = Результат.Токен;
		
		ЗаписатьСвойстваАккаунтаКлиент();
		
	Иначе
		
		ПоказатьСтраницуОшибкиССообщением(СтрШаблон(НСтр("ru='Ошибка при получении токена: %1 %2'"), Символы.ПС + Результат.КодСостояния + ": ", Результат.ПредставлениеОшибки ));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСвойстваАккаунтаКлиент()

	СвойстваАккаунта.КлючАвторизации = Токен;
	СвойстваАккаунта.Провайдер       = Провайдер;
	
	// Обновляем представление аккаунта
	Результат = RESTКлиентСервер.ОбновитьСвойстваАккаунта(Провайдер, СвойстваАккаунта);
	Если Не Результат.ВыполненоУспешно Тогда
		ПоказатьСтраницуОшибкиССообщением(СтрШаблон(НСтр("ru='Ошибка при получении сведений об аккаунте: %1 %2'"), Символы.ПС + Результат.КодСостояния + ": ", Результат.ПредставлениеОшибки ));
		Возврат;
	КонецЕсли;
	
	ЗаписатьСвойстваАккаунтаСервер();
	ОповеститьОбАвторизации();

	Если ВыполняетсяПроверкаПередЗакрытием <> Неопределено Тогда
		АвтоматическоеЗакрытиеФормы();
	Иначе
		ПодключитьОбработчикОжидания("АвтоматическоеЗакрытиеФормы", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвойстваАккаунтаСервер()

	// Сохраяем свойства аккаунта
	RESTВызовСервера.ОбновитьПараметрСеанса(СвойстваАккаунта);
	RESTВызовСервера.СохранитьПараметрыREST();

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбАвторизации()

	ПерейтиПоURL(СвойстваПровайдера.СтраницаОК);
	ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru='Приложение авторизовано в %1'"), Строка(Провайдер))); 
	Оповестить("RESTАвторизован", Провайдер, ЭтотОбъект);	

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеЗакрытиеФормы()

	ВыполняетсяПроверкаПередЗакрытием = Истина;
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАвторизациюПрограммно()

	Результат = RESTКлиентСервер.ОтменитьАвторизациюВОблаке(Провайдер, СвойстваАккаунта, СвойстваПровайдера);
	Если Результат.ВыполненоУспешно Тогда
		Сообщить(СтрШаблон(НСтр("ru='Ошибка при отмене авторизации: %1 %2'"), Символы.ПС + Результат.КодСостояния + ": ", Результат.ПредставлениеОшибки ));
		Возврат;
	КонецЕсли;
	
	ОчиститьАвторизациюСервер();
	ОповеститьОбОтменеАвторизации();
	АвтоматическоеЗакрытиеФормы();

КонецПроцедуры


&НаКлиенте
Процедура ПроверитьОтменуАвторизации()

	Результат = RESTКлиентСервер.ОбновитьСвойстваАккаунта(Провайдер, СвойстваАккаунта);
	Если Результат.ВыполненоУспешно Тогда
		
		Сообщить(НСтр("ru='Не удалось отменить авторизацию!'"));
		Если ВыполняетсяПроверкаПередЗакрытием <> Неопределено Тогда
			АвтоматическоеЗакрытиеФормы();
		КонецЕсли;
		Возврат;
		
	КонецЕсли;

	ОчиститьАвторизациюСервер();
	ОповеститьОбОтменеАвторизации();
	
	Если ВыполняетсяПроверкаПередЗакрытием <> Неопределено Тогда
		АвтоматическоеЗакрытиеФормы();
	Иначе
		ПодключитьОбработчикОжидания("АвтоматическоеЗакрытиеФормы", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьАвторизациюСервер()

	СвойстваАккаунта.КлючАвторизации       = "";
	СвойстваАккаунта.ИДАккаунта            = "";
	СвойстваАккаунта.ПредставлениеАккаунта = "";
	ЗаписатьСвойстваАккаунтаСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОтменеАвторизации()

	ПоказатьОповещениеПользователя(СтрШаблон(НСтр("ru='Отменена авторизация приложение в %1'"), Строка(Провайдер))); 
	Оповестить("RESTВыход", Провайдер, ЭтотОбъект);	

КонецПроцедуры


#КонецОбласти
