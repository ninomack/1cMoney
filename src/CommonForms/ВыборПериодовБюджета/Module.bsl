////////////////////////////////////////////////////////////////////////////////
//ОбщаяФорма.ВыборПериодовБюджета
//  используется для настройки количества и начала отображаетмого в бюджете периода
//  
//Параметры формы:
//  ВариантБюджета - СправочникСсылка.ВариантыБюджетов - редактируемый вариант бюджета
//  ПериодПросмотра - СтандартныйПериод - выбранный в данный момент период
//  КоличествоПериодовПросмотра  - Число - количество бюджетных периодов, выбранных для просмотра
//  МаксимальноеКоличествоПериодов - Число  - сколько периодов допускается выбрать? Если пусто - без ограничений
//  ОповеститьОВыборе - Булево - определяет необходимость оповестить о выборе при закрытии формы
//  
////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "ВариантБюджета,ПериодПланирования,МаксимальноеКоличествоПериодов,ОповеститьОВыборе");
	
	// Заполним структуру доп.реквизитов, чтобы иметь возможность обращаться к свойствам варианта бюджета 
	//	как на сервере, так и на клиенте
	ДопРеквизитыФормы = Новый Структура;
	ДопРеквизитыФормы.Вставить("ЦветТекстаОшибки",        ЦветаСтиля.ЦветОтрицательногоЧисла);
	ДопРеквизитыФормы.Вставить("ЦветНормальногоТекста",   ЦветаСтиля.ИнформационнаяНадписьЦвет);
	ДопРеквизитыФормы.Вставить("ЦветГиперссылки",         ЦветаСтиля.ГиперссылкаЦвет);
	
	// Проверяем параметры-реквизиты:
	КоличествоПериодовПросмотра = Макс(МаксимальноеКоличествоПериодов, 1);
	
	Если Не ЗначениеЗаполнено(ВариантБюджета) Тогда
		ВариантБюджета = Константы.ОсновнойВариантБюджета.Получить();
	КонецЕсли;
	
	Если ПериодПланирования = Неопределено Тогда
		ПериодПланирования = НовыйПериодПланирования(ВариантБюджета, ТекущаяДата(), МаксимальноеКоличествоПериодов, Истина);
	ИначеЕсли ТипЗнч(ПериодПланирования) = Тип("СтандартныйПериод") Тогда
		ПериодПланирования = НовыйПериодПланирования(ВариантБюджета, ПериодПланирования.ДатаНачала, 1, Истина);
	КонецЕсли;
	
	// Заполняем списки выбора и определяем страницу
	Если ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Месяц Тогда
		
		Для Счетчик = 1 По 12 Цикл
			ПредставлениеЭлемента = Формат(Дата(2000, Счетчик, 1), "ДФ=ММММ");
			Элементы.НачалоПериода.СписокВыбора.Добавить(Счетчик, ПредставлениеЭлемента);
			Элементы.КонецПериода.СписокВыбора.Добавить(Счетчик, ПредставлениеЭлемента);
		КонецЦикла;
		
		Элементы.СтраницыВыбораПериода.ТекущаяСтраница = Элементы.СтраницаПериод;
		
	ИначеЕсли ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Квартал Тогда
		
		Для Счетчик = 1 По 4 Цикл
			ПредставлениеЭлемента = НСтр("ru='%1 квартал'");
			ПредставлениеЭлемента = СтрШаблон(ПредставлениеЭлемента, Счетчик);
			Элементы.НачалоПериода.СписокВыбора.Добавить(Счетчик, ПредставлениеЭлемента);
			Элементы.КонецПериода.СписокВыбора.Добавить(Счетчик, ПредставлениеЭлемента);
		КонецЦикла;
		
		Элементы.СтраницыВыбораПериода.ТекущаяСтраница = Элементы.СтраницаПериод;
		
	ИначеЕсли ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Год Тогда
		
		Элементы.СтраницыВыбораПериода.ТекущаяСтраница = Элементы.СтраницаГод;
		
	ИначеЕсли ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Неделя Тогда
		
		Элементы.СтраницыВыбораПериода.ТекущаяСтраница = Элементы.СтраницаНеделя;
		
	КонецЕсли;
	 
	
	// Устанавливаем видимость элементов формы
	Элементы.ЭтаНеделя.Видимость   = ПериодПланирования.ВидПериода = "Неделя";
	Элементы.ЭтотМесяц.Видимость   = ПериодПланирования.ВидПериода = "Неделя" Или ПериодПланирования.ВидПериода = "Месяц";
	Элементы.ЭтотКвартал.Видимость = ПериодПланирования.ВидПериода = "Месяц" Или ПериодПланирования.ВидПериода = "Квартал";
	Элементы.ЭтотГод.Видимость     = ПериодПланирования.ВидПериода = "Месяц" Или ПериодПланирования.ВидПериода = "Квартал" Или ПериодПланирования.ВидПериода = "Год";
	
	ОбщегоНазначенияДеньги.СброситьРазмерИПоложениеФормы(ЭтотОбъект);
	
	ОбновитьОписаниеВариантаБюджета();
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстКоличестваИтоговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПериодПланирования.КоличествоПериодов = Мин(ПериодПланирования.КоличествоПериодов, МаксимальноеКоличествоПериодов);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИсправитьМногоПериодов" Тогда
		
		БюджетированиеКлиентСервер.ИзменитьКоличествоПериодовПланирования(ПериодПланирования, МаксимальноеКоличествоПериодов, Истина);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НачатьСМинимальнойДаты" Тогда
		
		ПериодПланирования.КоличествоПериодов = Мин(ПериодПланирования.КоличествоПериодов, МаксимальноеКоличествоПериодов);
		БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, ПериодПланирования.МинимальнаяДатаПлана, Истина);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗакончитьМаксимальнойДатой" Тогда
		
		ПериодПланирования.КоличествоПериодов = Мин(ПериодПланирования.КоличествоПериодов, МаксимальноеКоличествоПериодов);
		БюджетированиеКлиентСервер.ИзменитьОкончаниеПериодаПланирования(ПериодПланирования, ПериодПланирования.МаксимальнаяДатаПлана, Истина);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьПределПланирования" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьПределПланированияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.ВариантыБюджетов.ФормаОбъекта", Новый Структура("Ключ", ВариантБюджета), , , , , Оповещение);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьНачалоПланирования" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьПределПланированияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.ВариантыБюджетов.ФормаОбъекта", Новый Структура("Ключ", ВариантБюджета), , , , , Оповещение);
		
	КонецЕсли;
	
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	НачалоПериодаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РегулированиеПериодаКлиент(НачалоПериода, Направление, СтандартнаяОбработка);
	НачалоПериодаПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаГодПриИзменении(Элемент)
	НачалоПериодаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	КонецПериодаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	РегулированиеПериодаКлиент(КонецПериода, Направление, СтандартнаяОбработка);
	КонецПериодаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаГодПриИзменении(Элемент)
	КонецПериодаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаГод1ПриИзменении(Элемент)
	НачалоПериодаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаГод1ПриИзменении(Элемент)
	КонецПериодаПриИзмененииКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаНеделяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопоплнительныеПараметры = Новый Структура("ИзменяемаяЧастьПериода", "НачалоПериода");
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, ДопоплнительныеПараметры);
	
	ПараметрыФормы = Новый Структура("НачалоПериода,КонецПериода,ВыбиратьНеделю", 
				НачалоПериодаНеделя, НачалоНедели(НачалоПериодаНеделя), Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаДень", ПараметрыФормы, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаНеделяПриИзменении(Элемент)
	НачалоПериодаНеделя = НачалоНедели(НачалоПериодаНеделя);
	ПериодПланирования.КоличествоПериодов = 0;
	БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, НачалоПериодаНеделя, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаНеделяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопоплнительныеПараметры = Новый Структура("ИзменяемаяЧастьПериода", "КонецПериода");
	Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, ДопоплнительныеПараметры);
	
	ПараметрыФормы = Новый Структура("НачалоПериода,КонецПериода,ВыбиратьНеделю", 
				КонецПериодаНеделя, КонецНедели(КонецПериодаНеделя), Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаДень", ПараметрыФормы, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаНеделяПриИзменении(Элемент)
	КонецПериодаНеделя = КонецНедели(КонецПериодаНеделя);
	ПериодПланирования.КоличествоПериодов = 0;
	БюджетированиеКлиентСервер.ИзменитьОкончаниеПериодаПланирования(ПериодПланирования, КонецПериодаНеделя, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЭтаНеделя(Команда)
	
	НачалоПериодаНеделя                    = НачалоНедели(ТекущаяДатаКлиентСервер());
	ПериодПланирования.КоличествоПериодов  = 1;
	БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, НачалоПериодаНеделя, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтотМесяц(Команда)
	
	
	ТекДата = ТекущаяДатаКлиентСервер();
	Если ПериодПланирования.ВидПериода = "Неделя" Тогда
		
		НоваяДата = НачалоНедели(НачалоМесяца(ТекДата));
		НачалоПериодаНеделя = НоваяДата;
		КонецПериодаНеделя  = КонецНедели(КонецМесяца(ТекДата));
		ПериодПланирования.КоличествоПериодов  = БюджетированиеКлиентСервер.КоличествоПериодовМеждуДатами(НачалоПериодаНеделя, КонецПериодаНеделя, "Неделя");
		
	Иначе
		
		// Месяц
		НоваяДата = НачалоМесяца(ТекДата);
		ПериодПланирования.КоличествоПериодов  = 1;
		
	КонецЕсли;
	
	БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, НоваяДата, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтотКвартал(Команда)
	
	НоваяДата                              = НачалоКвартала(ТекущаяДатаКлиентСервер());
	ПериодПланирования.КоличествоПериодов  = ?(ПериодПланирования.ВидПериода = "Квартал", 1, 3);
	
	БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, НоваяДата, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтотГод(Команда)
	
	НоваяДата                     = НачалоГода(ТекущаяДатаКлиентСервер());
	
	Если ПериодПланирования.ВидПериода = "Квартал" Тогда
		ПериодПланирования.КоличествоПериодов  = 4;
	ИначеЕсли ПериодПланирования.ВидПериода = "Месяц" Тогда
		ПериодПланирования.КоличествоПериодов  = 12;
	Иначе
		ПериодПланирования.КоличествоПериодов  = 1;
	КонецЕсли;
	
	БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, НоваяДата, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)
	
	Результат = Новый Структура("ПериодПланирования,КоличествоПериодовСтатистики,НачалоАктивногоПериода",
				ПериодПланирования, КоличествоПериодовСтатистики, ПериодПланирования.НачальныйПериод.ДатаНачала);
				
	
	Если ОповеститьОВыборе Тогда
		ОповеститьОВыборе(Результат);
	Иначе
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображенияПериода(Форма)

	ПериодПросмотра             = Форма.ПериодПросмотра;
	ТекстСообщенияОбОшибке      = Новый ФорматированнаяСтрока("");
	ДопРеквизитыФормы           = Форма.ДопРеквизитыФормы;
	ПериодПланирования          = Форма.ПериодПланирования;
	
	ОписаниеПроблемы = "";
	СостояниеПериодаПланирования = БюджетированиеКлиентСервер.СостояниеПериодаПланирования(ПериодПланирования, Форма.МаксимальноеКоличествоПериодов, ОписаниеПроблемы);
	
	Если СостояниеПериодаПланирования = 3 Тогда //Начальный период меньше допустимого;
		
		ПредставлениеДаты = Формат(ПериодПланирования.МинимальнаяДатаПлана, "ДФ=дд.ММ.гггг");
		ТекстПредупреждения = НСтр("ru='Начало периода меньше %1 - даты начала планирования'"); 
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ПредставлениеДаты);
		
		ТекстНачала = НСтр("ru='Исправить'"); 
		
		ТекстСообщенияОбОшибке = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстПредупреждения, , ДопРеквизитыФормы.ЦветТекстаОшибки),
				Символы.ПС,
				Новый ФорматированнаяСтрока(ТекстНачала, , ДопРеквизитыФормы.ЦветГиперссылки, , "НачатьСМинимальнойДаты"),
				"   ",
				Новый ФорматированнаяСтрока(НСтр("ru='Изменить начало планирования'"), , ДопРеквизитыФормы.ЦветГиперссылки, , "ИзменитьНачалоПланирования")
				);
				
	ИначеЕсли СостояниеПериодаПланирования = 4 Тогда //Конечный период больше допустимого;
		
		ПредставлениеДаты = Формат(БюджетированиеКлиентСервер.КалендарноеОкончаниеПериода(ПериодПланирования.МаксимальнаяДатаПлана, ПериодПланирования.ВидПериода), "ДФ=дд.ММ.гггг");
		ТекстПредупреждения = НСтр("ru='Окончание периода больше %1 - предела планирования'"); 
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ПредставлениеДаты);
		
		ТекстНачала = НСтр("ru='Исправить'"); 
		
		ТекстСообщенияОбОшибке = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстПредупреждения, , ДопРеквизитыФормы.ЦветТекстаОшибки),
				Символы.ПС,
				Новый ФорматированнаяСтрока(ТекстНачала, , ДопРеквизитыФормы.ЦветГиперссылки, , "ЗакончитьМаксимальнойДатой"),
				"   ",
				Новый ФорматированнаяСтрока(НСтр("ru='Изменить предел планирования'"), , ДопРеквизитыФормы.ЦветГиперссылки, , "ИзменитьПределПланирования")
				);
		
	ИначеЕсли СостояниеПериодаПланирования = 2 Тогда //Количество периодов больше допустимого
		
		Если ПериодПланирования.ВидПериода = "Неделя" Тогда
			ТекстПредупреждения = НСтр("ru='Количество недель не может превышать %1.'");
		ИначеЕсли ПериодПланирования.ВидПериода = "Квартал" Тогда
			ТекстПредупреждения = НСтр("ru='Количество кварталов не может превышать %1.'");
		ИначеЕсли ПериодПланирования.ВидПериода = "Год" Тогда
			ТекстПредупреждения = НСтр("ru='Количество лет не может превышать %1.'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Количество месяцев не может превышать %1.'");
		КонецЕсли;
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Форма.МаксимальноеКоличествоПериодов);
		
		ТекстСообщенияОбОшибке = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(ТекстПредупреждения, , ДопРеквизитыФормы.ЦветТекстаОшибки),
				"  ",
				Новый ФорматированнаяСтрока(НСтр("ru='Исправить'"), , ДопРеквизитыФормы.ЦветГиперссылки, , "ИсправитьМногоПериодов")
				);
		
	ИначеЕсли СостояниеПериодаПланирования <> 0 Тогда //другие ошибки
		
		ТекстСообщенияОбОшибке = Новый ФорматированнаяСтрока(ОписаниеПроблемы, , ДопРеквизитыФормы.ЦветТекстаОшибки, ,);
		
	КонецЕсли;
	 
	Форма.ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке;
	
	Элементы = Форма.Элементы;
	ДоступностьВыбора = СостояниеПериодаПланирования = 0;
	Если Элементы.ФормаОк.Доступность <> ДоступностьВыбора Тогда
		Элементы.ФормаОк.Доступность = ДоступностьВыбора;
	КонецЕсли;
	
	ОбновитьДатыНачалаОкончания(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДатыНачалаОкончания(Форма)

	ПериодПланирования = Форма.ПериодПланирования;
	
	Если ПериодПланирования.ВидПериода = "Неделя" Тогда
		
		Форма.НачалоПериодаНеделя = ПериодПланирования.НачальныйПериод.КалендарноеНачало;
		Форма.КонецПериодаНеделя  = ПериодПланирования.КонечныйПериод.КалендарноеОкончание;
		
	Иначе
		
		Форма.НачалоПериодаГод = Год(ПериодПланирования.НачальныйПериод.КалендарноеНачало);
		Форма.КонецПериодаГод  = Год(ПериодПланирования.КонечныйПериод.КалендарноеНачало);
		
		Если ПериодПланирования.ВидПериода = "Квартал" Тогда
			Форма.НачалоПериода = БюджетированиеКлиентСервер.Квартал(ПериодПланирования.НачальныйПериод.КалендарноеНачало);
			Форма.КонецПериода  = БюджетированиеКлиентСервер.Квартал(ПериодПланирования.КонечныйПериод.КалендарноеНачало);
		Иначе
			Форма.НачалоПериода = Месяц(ПериодПланирования.НачальныйПериод.КалендарноеНачало);
			Форма.КонецПериода  = Месяц(ПериодПланирования.КонечныйПериод.КалендарноеНачало);
		КонецЕсли;
		
	КонецЕсли;

	Форма.ПредставлениеКоличестваПериодов = "(" + ПериодПланирования.ПредставлениеКоличестваПериодов + ")";

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПериодПланирования.КоличествоПериодов = 0;
		
		Если ДополнительныеПараметры.ИзменяемаяЧастьПериода = "НачалоПериода" Тогда
			БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, Результат.НачалоПериода, Ложь);
		Иначе
			БюджетированиеКлиентСервер.ИзменитьОкончаниеПериодаПланирования(ПериодПланирования, Результат.КонецПериода, Ложь);
		КонецЕсли;
		
		ИзменитьОтображенияПериода(ЭтотОбъект);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзмененииКлиент()

	Если ПериодПланирования.ВидПериода = "Год" Тогда
		
		ВыбраннаяДата = Дата(НачалоПериодаГод, 1, 1);
		
	ИначеЕсли ПериодПланирования.ВидПериода = "Квартал" Тогда
		
		Если НачалоПериода < 1 Тогда
			НачалоПериода = 4;
			НачалоПериодаГод = НачалоПериодаГод - 1;
		ИначеЕсли НачалоПериода > 4 Тогда
			НачалоПериода = 1;
			НачалоПериодаГод = НачалоПериодаГод + 1;
		КонецЕсли;
		ВыбраннаяДата = НачалоКвартала(Дата(НачалоПериодаГод, НачалоПериода * 3, 1));
		
	Иначе
		
		Если НачалоПериода < 1 Тогда
			НачалоПериода = 12;
			НачалоПериодаГод = НачалоПериодаГод - 1;
		ИначеЕсли НачалоПериода > 12 Тогда
			НачалоПериода = 1;
			НачалоПериодаГод = НачалоПериодаГод + 1;
		КонецЕсли;
		ВыбраннаяДата = Дата(НачалоПериодаГод, НачалоПериода, 1);
		
	КонецЕсли;

	ПериодПланирования.КоличествоПериодов = 0;
	БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования(ПериодПланирования, ВыбраннаяДата, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзмененииКлиент()

	Если ПериодПланирования.ВидПериода = "Год" Тогда
		
		ВыбраннаяДата = КонецГода(Дата(КонецПериодаГод, 1, 1));
		
	ИначеЕсли ПериодПланирования.ВидПериода = "Квартал" Тогда
		
		Если КонецПериода < 1 Тогда
			КонецПериода = 1;
		ИначеЕсли КонецПериода > 4 Тогда
			КонецПериода = 4;
		КонецЕсли;
		ВыбраннаяДата = КонецКвартала(Дата(КонецПериодаГод, КонецПериода * 3, 1));
		
	Иначе
		
		Если КонецПериода < 1 Тогда
			КонецПериода = 1;
		ИначеЕсли КонецПериода > 12 Тогда
			КонецПериода = 12;
		КонецЕсли;
		ВыбраннаяДата = КонецМесяца(Дата(КонецПериодаГод, КонецПериода, 1));
		
	КонецЕсли;

	ПериодПланирования.КоличествоПериодов = 0;
	БюджетированиеКлиентСервер.ИзменитьОкончаниеПериодаПланирования(ПериодПланирования, ВыбраннаяДата, Ложь);
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегулированиеПериодаКлиент(ЗначениеПериода, Направление, СтандартнаяОбработка)

	//СтандартнаяОбработка = Ложь;
	МаксимальныйПериод = ?(ПериодПланирования.ВидПериода = "Квартал", 4, 12);
	
	Если ЗначениеПериода = 1 И Направление < 0 Или ЗначениеПериода = МаксимальныйПериод И Направление > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПериода = ЗначениеПериода + Направление;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПределПланированияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ИзменитьПределПланированияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПределПланированияСервер()

	ПериодПланирования = НовыйПериодПланирования(ВариантБюджета, ПериодПланирования.НачальныйПериод.ДатаНачала, ПериодПланирования.КоличествоПериодов, Истина);
	ОбновитьОписаниеВариантаБюджета();
	ИзменитьОтображенияПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеВариантаБюджета()

	ОписаниеВариантаБюджета = НСтр("ru='Детальность планирования: %1'");
	ОписаниеВариантаБюджета = СтрШаблон(ОписаниеВариантаБюджета, НРег(ВариантБюджета.ПредставлениеДетальностиПланирования));

КонецПроцедуры
 
&НаСервере
Функция НовыйПериодПланирования(ВариантБюджета, НачальнаяДата, КоличествоПериодов, ПроверятьСоответствиеПределамПланирования = Истина, ОтТекущейДаты = Ложь)

	Результат = Новый Структура;
	
	Если ЗначениеЗаполнено(ВариантБюджета) Тогда
		
		СвойстваВарианта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантБюджета, "ДетальностьПланирования,НачалоПланирования,ЧислоМесяца,НомерМесяца");
		Детальность = ?(ЗначениеЗаполнено(СвойстваВарианта.ДетальностьПланирования), СвойстваВарианта.ДетальностьПланирования, Перечисления.ПериодичностьПланирования.Месяц);
		Результат.Вставить("ВидПериода",                ОбщегоНазначения.ИмяЗначенияПеречисления(Детальность)); 
		Результат.Вставить("КоличествоПериодов",        КоличествоПериодов); 
		Результат.Вставить("СмещениеВСекундах",         (СвойстваВарианта.ЧислоМесяца - 1) * 86400); 
		Результат.Вставить("СмещениеВМесяцах",          СвойстваВарианта.НомерМесяца - 1); 
		
		МинимальнаяДата = СвойстваВарианта.НачалоПланирования;
		
	Иначе
		
		// Заполняем значениями по умолчанию
		Результат.Вставить("ВидПериода",                "Месяц"); 
		Результат.Вставить("КоличествоПериодов",        1); 
		Результат.Вставить("СмещениеВСекундах",         0); 
		Результат.Вставить("СмещениеВМесяцах",          0); 
		
		МинимальнаяДата = ТекущаяДатаКлиентСервер();
		
	КонецЕсли;
	 
	КоличествоПериодов = Макс(1, КоличествоПериодов);
	
	// Предел планирования
	Результат.Вставить("МаксимальнаяДатаПлана",     БюджетированиеКлиентСервер.КалендарноеОкончаниеПериода(Константы.ПределПланирования.Получить(), Результат.ВидПериода)); // дата, по которую рассчитаны все варианты бюджета и плановые операции
	
	// Начальная дата плана проверяется на соответсвие пределу планирования
	МинимальнаяДата = Мин(МинимальнаяДата, Результат.МаксимальнаяДатаПлана);
	Результат.Вставить("МинимальнаяДатаПлана",      БюджетированиеКлиентСервер.КалендарноеНачалоПериода(МинимальнаяДата, Результат.ВидПериода));
	
	// Период бюджета, с которого начинается период планирования
	Результат.Вставить("НачальныйПериод", БюджетированиеКлиентСервер.НовыйПериодБюджета(НачальнаяДата, 
											Результат.ВидПериода, Результат.СмещениеВСекундах, 
											Результат.СмещениеВМесяцах, ОтТекущейДаты));
	Если ПроверятьСоответствиеПределамПланирования Тогда
		
		// Проверим, чтобы начальный период был в пределах минимальной и максимальной дат планирования
		Если Результат.НачальныйПериод.КалендарноеНачало < Результат.МинимальнаяДатаПлана Тогда
			Результат.Вставить("НачальныйПериод", БюджетированиеКлиентСервер.НовыйПериодБюджета(Результат.МинимальнаяДатаПлана, 
													Результат.ВидПериода, Результат.СмещениеВСекундах, 
													Результат.СмещениеВМесяцах, ОтТекущейДаты));
		ИначеЕсли Результат.НачальныйПериод.КалендарноеОкончание > Результат.МаксимальнаяДатаПлана Тогда
			// Изменим количество периодов
			КоличествоПериодов           = 1;
			Результат.КоличествоПериодов = 1;
			Результат.Вставить("НачальныйПериод", БюджетированиеКлиентСервер.НовыйПериодБюджета(Результат.МаксимальнаяДатаПлана - 1, 
													Результат.ВидПериода, Результат.СмещениеВСекундах, 
													Результат.СмещениеВМесяцах, ОтТекущейДаты));
		КонецЕсли;
		
	КонецЕсли;
		
	// Период бюджета, которым заканчивается рассмариваемый план
	Если КоличествоПериодов = 1 Тогда
		Результат.Вставить("КонечныйПериод", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Результат.НачальныйПериод));
	Иначе
		КонечнаяДата = БюджетированиеКлиентСервер.ДобавитьБюджетныйПериод(Результат.НачальныйПериод.КалендарноеНачало, Результат.ВидПериода, Результат.КоличествоПериодов - 1);
		Результат.Вставить("КонечныйПериод",  БюджетированиеКлиентСервер.НовыйПериодБюджета(КонечнаяДата, 
											Результат.ВидПериода, Результат.СмещениеВСекундах, 
											Результат.СмещениеВМесяцах, ОтТекущейДаты));
	КонецЕсли;
	
	Если ПроверятьСоответствиеПределамПланирования Тогда
		
		// Проверим, чтобы конечный период был меньше максимальной даты планирования
		Если Результат.КонечныйПериод.КалендарноеОкончание > Результат.МаксимальнаяДатаПлана Тогда
			// Изменим количество периодов
			Результат.Вставить("КонечныйПериод", БюджетированиеКлиентСервер.НовыйПериодБюджета(Результат.МаксимальнаяДатаПлана - 1, 
													Результат.ВидПериода, Результат.СмещениеВСекундах, 
													Результат.СмещениеВМесяцах, ОтТекущейДаты));
			КоличествоПериодов           = БюджетированиеКлиентСервер.КоличествоПериодовМеждуДатами(Результат.НачальныйПериод.КалендарноеНачало, Результат.КонечныйПериод.КалендарноеНачало, Результат.ВидПериода);
			Результат.КоличествоПериодов = КоличествоПериодов;
		КонецЕсли;
		
	КонецЕсли;
	
	// Представление периода
	Результат.Вставить("Представление", БюджетированиеКлиентСервер.ПредставлениеБюджетногоПериода(Результат.НачальныйПериод.ДатаНачала, Результат.КонечныйПериод.ДатаОкончания, Результат.ВидПериода));
	
	// Представление количества периодов
	Результат.Вставить("ПредставлениеКоличестваПериодов", БюджетированиеКлиентСервер.ПредставлениеКоличестваБюджетныхПериодов(Результат.КоличествоПериодов, Результат.ВидПериода));
	
	Возврат Результат;

КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти




