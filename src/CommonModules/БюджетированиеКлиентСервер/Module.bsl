////////////////////////////////////////////////////////////////////////////////
//ОбщийМодуль.БюджетированиеКлиентСервер
//	серверное и клиентское получение данных, связанных с бюджетированием
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Создает и возвращает структуру, описывающую период бюджета
//
// Параметры
//	ДатаНачала - необязательно - дата, с которой должен начаться период 
//	ВидПериода - необязательно - строка, один из вариантов: Неделя, Месяц, Квартал, Год
//	СмещениеВСекундах - необязательно - число секунд, на которое начало бюджетного периода отличается от начала календарного. Для типа периода "Неделя" не применяется.
//	СмещениеВМесяцах - необязательно - число месяцев, на которое начало бюджетного периода отличается от начала календарного. Применимо только для периодичности "Квартал" или "Год".
//
//Возвращаемое значение:
//	Структура с ключами (подробное описание в коде функции):
//		* ДатаНачала - Дата
//		* ДатаОкончания - Дата
//		* КалендарноеНачало - Дата
//		* КалендарноеОкончание - Дата
//		* Представление - Строка
//
Функция НовыйПериодБюджета(ДатаНачала = Неопределено, Знач ВидПериода = "МЕСЯЦ", СмещениеВСекундах = 0, СмещениеВМесяцах = 0, ОтТекущейДаты = Ложь) Экспорт

	Результат = Новый Структура;
	// заполняем структуру значениями по умолчанию
	Результат.Вставить("ДатаНачала", Дата(1,1,1)); // начало перирода с учетом смещения от календарного начала. Например, 10.01.2015, если месяц начинается с 10-го числа
	Результат.Вставить("ДатаОкончания", Результат.ДатаНачала); // окончание перирода с учетом смещения от календарного окончания. Например, 09.02.2015 23:59:59, если месяц начинается с 10-го числа.
	Результат.Вставить("КалендарноеНачало", Результат.ДатаНачала); // календарное начало периода. Используется в стандартных диалогах выбора.
	Результат.Вставить("КалендарноеОкончание", Результат.ДатаНачала); // календарное окончание периода. Используется в стандартных диалогах выбора.
	Результат.Вставить("Представление", "[" + НСтр("ru='не задан'") + "]"); // строковое представление периода для отображения в отчетах или списках
	
	// Если указана начальная дата, вычисляем и заполняем остальные поля структуры
	Если ДатаНачала <> Неопределено Тогда
		
		ВидПериода = ?(ЗначениеЗаполнено(ВидПериода), Врег(ВидПериода), "МЕСЯЦ");
		Результат.КалендарноеНачало    = КалендарноеНачалоПериода(ДатаНачала, ВидПериода);
		Результат.КалендарноеОкончание = КалендарноеОкончаниеПериода(Результат.КалендарноеНачало, ВидПериода);
		
		Если ВидПериода = "НЕДЕЛЯ" Тогда
			
			// Для детальности планирования "Неделя" смещение от начала не применяется
			Результат.ДатаНачала           = КалендарноеНачалоПериода(ДатаНачала, ВидПериода);
			Результат.ДатаОкончания        = КалендарноеОкончаниеПериода(ДатаНачала, ВидПериода);
			
		ИначеЕсли ВидПериода = "МЕСЯЦ" Тогда
			
			// Учитываем смещение от начала месяца
			НачалоБюджетногоПериода = НачалоДня(Результат.КалендарноеНачало + СмещениеВСекундах);
			Если ОтТекущейДаты И ДатаНачала < НачалоБюджетногоПериода Тогда
				НачалоБюджетногоПериода = ДобавитьМесяц(НачалоБюджетногоПериода, -1);
			КонецЕсли;
			Результат.ДатаНачала           = НачалоБюджетногоПериода;
			Результат.ДатаОкончания        = ДобавитьМесяц(Результат.ДатаНачала, 1) - 1;
			
		ИначеЕсли ВидПериода = "КВАРТАЛ" Тогда
			
			// Учитываем смещение от начала квартала (в месяцах и секундах)
			НачалоБюджетногоПериода = НачалоДня(ДобавитьМесяц(Результат.КалендарноеНачало, СмещениеВМесяцах) + СмещениеВСекундах);
			Если ОтТекущейДаты И ДатаНачала < НачалоБюджетногоПериода Тогда
				НачалоБюджетногоПериода = ДобавитьМесяц(НачалоБюджетногоПериода, -3);
			КонецЕсли;
			Результат.ДатаНачала    = НачалоБюджетногоПериода;
			Результат.ДатаОкончания = ДобавитьМесяц(Результат.ДатаНачала, 3) - 1;
			
		ИначеЕсли ВидПериода = "ГОД" Тогда
			
			// Учитываем смещение от начала квартала (в месяцах и секундах)
			НачалоБюджетногоПериода = НачалоДня(ДобавитьМесяц(Результат.КалендарноеНачало, СмещениеВМесяцах) + СмещениеВСекундах);
			Если ОтТекущейДаты И ДатаНачала < НачалоБюджетногоПериода Тогда
				НачалоБюджетногоПериода = ДобавитьМесяц(НачалоБюджетногоПериода, -12);
			КонецЕсли;
			Результат.ДатаНачала    = НачалоБюджетногоПериода;
			Результат.ДатаОкончания = ДобавитьМесяц(Результат.ДатаНачала, 12) - 1;
			
		КонецЕсли;
		
		Результат.Представление = ПредставлениеБюджетногоПериода(Результат.ДатаНачала, Результат.ДатаОкончания, ВидПериода);
		
		Результат.КалендарноеНачало    = КалендарноеНачалоПериода(Результат.ДатаНачала, ВидПериода);
		Результат.КалендарноеОкончание = КалендарноеОкончаниеПериода(Результат.ДатаОкончания, ВидПериода);
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Изменяет НачальныйПериод и обновляет связанные поля в структуре ПериодПланированияВариантаБюджета (см. Бюджетирование.НовыйПериодПланированияВариантаБюджета())
//	Возвращает 0 в случае успеха или иное число - код возникшей проблемы
//
//Параметры:
//	ПериодПланирования - Структура, результат функции Бюджетирование.НовыйПериодПланированияВариантаБюджета()
//	НоваяДатаНачала - Дата, принадлежащая бюджетному периоду, с которого нужно начать планирование
//	ПроверятьСоответствиеПределамПланирования - Булево - признак необходимости проверить соответствие периодов минимальной и пределльной датам планирования
//	ОписаниеПроблемы - Строка - выходной параметр, будет содержать описание причин, по которым не удалось изменить период планирования
//
//Возвразаемое значение:
//	Число - 0 в случае успеха; 
//			1-задана пустая дата;
//			2-заданная дата меньше минимально возможной;
//			3-заданная дата больше предела планирования;
//
Функция ИзменитьНачалоПериодаПланирования(ПериодПланирования, Знач НоваяДатаНачала, ПроверятьСоответствиеПределамПланирования = Истина, ОписаниеПроблемы = "") Экспорт
	
	Результат        = 0;
	ОписаниеПроблемы = "";
	
	// Проверяем обязательные параметры
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "ПериодПланирования", ПериодПланирования, Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "НоваяДатаНачала", НоваяДатаНачала, Тип("Дата"));
	
	Если Не ЗначениеЗаполнено(НоваяДатаНачала) Тогда
		ОписаниеПроблемы = НСтр("ru='Невозможно начать планирование с пустой даты'");
		Возврат 1;
	КонецЕсли;
	
	НачальныйПериод = НовыйПериодБюджета(НоваяДатаНачала, ПериодПланирования.ВидПериода, ПериодПланирования.СмещениеВСекундах, ПериодПланирования.СмещениеВМесяцах);
	Если ПроверятьСоответствиеПределамПланирования Тогда
	
		// Проверим, чтобы начальный период был в пределах минимальной и максимальной дат планирования
		Если НачальныйПериод.КалендарноеНачало < ПериодПланирования.МинимальнаяДатаПлана Тогда
			ОписаниеПроблемы = НСтр("ru='Планирование начинается с %1.'"); 
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, Формат(ПериодПланирования.МинимальнаяДатаПлана, "ДФ=дд.ММ.ггг"));
			Результат = 2;
		ИначеЕсли НачальныйПериод.КалендарноеНачало > ПериодПланирования.МаксимальнаяДатаПлана Тогда
			ОписаниеПроблемы = НСтр("ru='%1 - предел планирования для всех вариантов бюджета.'"); 
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, Формат(ПериодПланирования.МаксимальнаяДатаПлана, "ДФ=дд.ММ.ггг"));
			Результат = 3;
		КонецЕсли;
		
		Если Результат <> 0 Тогда
			ПериодПланирования.КоличествоПериодов = БюджетированиеКлиентСервер.КоличествоПериодовМеждуДатами(ПериодПланирования.НачальныйПериод.КалендарноеНачало, 
							ПериодПланирования.КонечныйПериод.КалендарноеОкончание, ПериодПланирования.ВидПериода, ПериодПланирования.ПредставлениеКоличестваПериодов);
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Изменяем начальный период бюджета
	ПериодПланирования.НачальныйПериод = НачальныйПериод;
	
	// Конечный период вычисляем по количеству периодов и проверяем на соответствие пределу планирования
	Если ПериодПланирования.КоличествоПериодов = 1 Тогда
		КонечнаяДата = ПериодПланирования.НачальныйПериод.КалендарноеНачало;
	ИначеЕсли ПериодПланирования.КоличествоПериодов > 1 Тогда
		КонечнаяДата = БюджетированиеКлиентСервер.ДобавитьБюджетныйПериод(ПериодПланирования.НачальныйПериод.КалендарноеНачало, 
							ПериодПланирования.ВидПериода, ПериодПланирования.КоличествоПериодов - 1);
	Иначе
		КонечнаяДата = Макс(ПериодПланирования.КонечныйПериод.КалендарноеНачало, ПериодПланирования.НачальныйПериод.КалендарноеНачало);
	КонецЕсли;
	
	Если КонечнаяДата <> ПериодПланирования.КонечныйПериод.КалендарноеНачало Тогда
		
		ПериодПланирования.КонечныйПериод = БюджетированиеКлиентСервер.НовыйПериодБюджета(КонечнаяДата, 
							ПериодПланирования.ВидПериода, ПериодПланирования.СмещениеВСекундах, 
							ПериодПланирования.СмещениеВМесяцах);
		
	КонецЕсли;
	
	Если ПроверятьСоответствиеПределамПланирования Тогда
		
		// Проверим, чтобы конечный период был меньше максимальной даты планирования
		Если ПериодПланирования.КонечныйПериод.КалендарноеНачало > ПериодПланирования.МаксимальнаяДатаПлана Тогда
			// Изменим количество периодов
			ПериодПланирования.КонечныйПериод = БюджетированиеКлиентСервер.НовыйПериодБюджета(ПериодПланирования.МаксимальнаяДатаПлана, 
								ПериодПланирования.ВидПериода, ПериодПланирования.СмещениеВСекундах, 
								ПериодПланирования.СмещениеВМесяцах);
		КонецЕсли;
		
	КонецЕсли;
	
	ПериодПланирования.КоличествоПериодов  = БюджетированиеКлиентСервер.КоличествоПериодовМеждуДатами(ПериодПланирования.НачальныйПериод.ДатаНачала, 
							ПериодПланирования.КонечныйПериод.ДатаОкончания, ПериодПланирования.ВидПериода, ПериодПланирования.ПредставлениеКоличестваПериодов);
	
	// Представление периода
	ПериодПланирования.Представление = БюджетированиеКлиентСервер.ПредставлениеБюджетногоПериода(ПериодПланирования.НачальныйПериод.ДатаНачала, ПериодПланирования.КонечныйПериод.ДатаОкончания, ПериодПланирования.ВидПериода);
	
	Возврат Результат;
	
КонецФункции

// Изменяет КонечныйПериод и обновляет связанные поля в структуре ПериодПланированияВариантаБюджета (см. Бюджетирование.НовыйПериодПланированияВариантаБюджета())
//	Возвращает 0 в случае успеха или иное число - код возникшей проблемы
//
//Параметры:
//	ПериодПланирования - Структура, результат функции Бюджетирование.НовыйПериодПланированияВариантаБюджета()
//	НоваяДатаОкончания - Дата, принадлежащая бюджетному периоду, которым должен окочиться планирование
//	ПроверятьСоответствиеПределамПланирования - Булево - признак необходимости проверить соответствие периодов минимальной и пределльной датам планирования
//	ОписаниеПроблемы - Строка - выходной параметр, будет содержать описание причин, по которым не удалось изменить период планирования
//
//Возвразаемое значение:
//	Число - 0 в случае успеха; 
//			1-задана пустая дата;
//			2-заданная дата меньше минимально возможной;
//			3-заданная дата больше предела планирования;
//
Функция ИзменитьОкончаниеПериодаПланирования(ПериодПланирования, Знач НоваяДатаОкончания, ПроверятьСоответствиеПределамПланирования = Истина, ОписаниеПроблемы = "") Экспорт
	
	Результат        = 0;
	ОписаниеПроблемы = "";
	
	// Проверяем обязательные параметры
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "ПериодПланирования", ПериодПланирования, Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "НоваяДатаОкончания", НоваяДатаОкончания, Тип("Дата"));
	
	Если Не ЗначениеЗаполнено(НоваяДатаОкончания) Тогда
		ОписаниеПроблемы = НСтр("ru='Невозможно закончить планирование пустой датой'");
		Возврат 1;
	КонецЕсли;
	
	// Обновляем конечный период
	ПериодПланирования.КонечныйПериод = НовыйПериодБюджета(НоваяДатаОкончания, ПериодПланирования.ВидПериода, ПериодПланирования.СмещениеВСекундах, ПериодПланирования.СмещениеВМесяцах);
	Если ПроверятьСоответствиеПределамПланирования Тогда
		
		// Проверим, чтобы конечный период был в пределах минимальной и максимальной дат планирования
		Если ПериодПланирования.КонечныйПериод.КалендарноеНачало < ПериодПланирования.МинимальнаяДатаПлана Тогда
			ОписаниеПроблемы = НСтр("ru='Планирование начинается с %1.'"); 
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, Формат(ПериодПланирования.МинимальнаяДатаПлана, "ДФ=дд.ММ.ггг"));
			Результат = 2;
		ИначеЕсли ПериодПланирования.КонечныйПериод.КалендарноеНачало > ПериодПланирования.МаксимальнаяДатаПлана Тогда
			ОписаниеПроблемы = НСтр("ru='%1 - предел планирования для всех вариантов бюджета.'"); 
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, Формат(ПериодПланирования.МаксимальнаяДатаПлана, "ДФ=дд.ММ.ггг"));
			Результат = 3;
		КонецЕсли;
		
		Если Результат <> 0 Тогда
			ПериодПланирования.КоличествоПериодов = БюджетированиеКлиентСервер.КоличествоПериодовМеждуДатами(ПериодПланирования.НачальныйПериод.КалендарноеНачало, 
							ПериодПланирования.КонечныйПериод.КалендарноеОкончание, ПериодПланирования.ВидПериода, ПериодПланирования.ПредставлениеКоличестваПериодов);
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Начальный период вычисляем по количеству периодов и проверяем на соответствие пределу планирования
	Если ПериодПланирования.КоличествоПериодов = 1 Тогда
		НачальнаяДата = ПериодПланирования.КонечныйПериод.КалендарноеНачало;
	ИначеЕсли ПериодПланирования.КоличествоПериодов > 1 Тогда
		НачальнаяДата = БюджетированиеКлиентСервер.ДобавитьБюджетныйПериод(ПериодПланирования.КонечныйПериод.КалендарноеНачало, 
							ПериодПланирования.ВидПериода, -ПериодПланирования.КоличествоПериодов + 1);
	Иначе
		НачальнаяДата = Мин(ПериодПланирования.НачальныйПериод.КалендарноеНачало, ПериодПланирования.КонечныйПериод.КалендарноеНачало);
	КонецЕсли;
	
	Если НачальнаяДата <> ПериодПланирования.НачальныйПериод.КалендарноеНачало Тогда
		ПериодПланирования.НачальныйПериод = БюджетированиеКлиентСервер.НовыйПериодБюджета(НачальнаяДата, 
							ПериодПланирования.ВидПериода, ПериодПланирования.СмещениеВСекундах, 
							ПериодПланирования.СмещениеВМесяцах);
	КонецЕсли;
	
	Если ПроверятьСоответствиеПределамПланирования Тогда
		
		// Проверим, чтобы начальный период был больше минимальной даты планирования
		Если ПериодПланирования.НачальныйПериод.КалендарноеНачало < ПериодПланирования.МинимальнаяДатаПлана Тогда
			// Изменим количество периодов
			ПериодПланирования.НачальныйПериод = БюджетированиеКлиентСервер.НовыйПериодБюджета(ПериодПланирования.МинимальнаяДатаПлана, 
								ПериодПланирования.ВидПериода, ПериодПланирования.СмещениеВСекундах, 
								ПериодПланирования.СмещениеВМесяцах);
		КонецЕсли;
		
	КонецЕсли;
	
	ПериодПланирования.КоличествоПериодов  = БюджетированиеКлиентСервер.КоличествоПериодовМеждуДатами(ПериодПланирования.НачальныйПериод.КалендарноеНачало, 
							ПериодПланирования.КонечныйПериод.КалендарноеОкончание, ПериодПланирования.ВидПериода, ПериодПланирования.ПредставлениеКоличестваПериодов);
	
	// Представление периода
	ПериодПланирования.Представление = БюджетированиеКлиентСервер.ПредставлениеБюджетногоПериода(ПериодПланирования.НачальныйПериод.ДатаНачала, ПериодПланирования.КонечныйПериод.ДатаОкончания, ПериодПланирования.ВидПериода);
	
	Возврат Результат;
	
КонецФункции

// Изменяет КоличествоПериодов  и обновляет связанные поля в структуре ПериодПланированияВариантаБюджета (см. Бюджетирование.НовыйПериодПланированияВариантаБюджета())
//	Возвращает 0 в случае успеха или иное число - код возникшей проблемы
//	Если установлен флаг "ПроверятьСоответствиеПределамПланирования" количество периодов будет размещено в пределах минимальной и максимальной дат планирования.
//	В ином случае начальный период всегда остается неизменным.
//
//Параметры:
//	ПериодПланирования - Структура, результат функции Бюджетирование.НовыйПериодПланированияВариантаБюджета()
//	НовоеКоличествоПериодов - Число, количество периодов, которое нужно установить.
//	ПроверятьСоответствиеПределамПланирования - Булево - признак необходимости проверить соответствие периодов минимальной и пределльной датам планирования
//	ОписаниеПроблемы - Строка - выходной параметр, будет содержать описание причин, по которым не удалось изменить период планирования
//
//Возвразаемое значение:
//	Число - 0 в случае успеха; 
//			1-задан 0 периодов;
//			2-заданное количество периодов больше возможного;
//
Функция ИзменитьКоличествоПериодовПланирования(ПериодПланирования, Знач НовоеКоличествоПериодов, ПроверятьСоответствиеПределамПланирования = Истина, ОписаниеПроблемы = "") Экспорт

	ОписаниеПроблемы = "";
	
	// Проверяем обязательные параметры
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "ПериодПланирования", ПериодПланирования, Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "НовоеКоличествоПериодов", НовоеКоличествоПериодов, Тип("Число"));
	
	// Проверим корректность заданного количества периодов
	КонецМаксимальногоПериода = КалендарноеОкончаниеПериода(ПериодПланирования.МаксимальнаяДатаПлана, ПериодПланирования.ВидПериода);
	Если НовоеКоличествоПериодов = 0 Тогда
		
		ОписаниеПроблемы = НСтр("ru='Для планирования нужно задать хотя бы 1 бюджетный период.'");
		Возврат 1;
		
	ИначеЕсли ПроверятьСоответствиеПределамПланирования Тогда
		
		ПериодовСтрокой = "";
		ДопустимоеКоличествоПериодов = КоличествоПериодовМеждуДатами(ПериодПланирования.МинимальнаяДатаПлана, КонецМаксимальногоПериода, ПериодПланирования.ВидПериода, ПериодовСтрокой);
		Если НовоеКоличествоПериодов > ДопустимоеКоличествоПериодов Тогда
			ОписаниеПроблемы = НСтр("ru='Между началом и пределом планирования можно рассматривать только %1'"); 
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, ПериодовСтрокой);
			Возврат 2;
		КонецЕсли;
		
		// Проверим, чтобы начальная дата была не меньше минимально возможной
		Если ПериодПланирования.НачальныйПериод.КалендарноеНачало < ПериодПланирования.МинимальнаяДатаПлана Тогда
			ПериодПланирования.НачальныйПериод = БюджетированиеКлиентСервер.НовыйПериодБюджета(ПериодПланирования.МинимальнаяДатаПлана, 
								ПериодПланирования.ВидПериода, ПериодПланирования.СмещениеВСекундах, 
								ПериодПланирования.СмещениеВМесяцах);
		КонецЕсли;
		
	КонецЕсли;
	
	ПериодПланирования.КоличествоПериодов = НовоеКоличествоПериодов;
	
	ПериодовДоПредела = КоличествоПериодовМеждуДатами(ПериодПланирования.НачальныйПериод.ДатаНачала, КонецМаксимальногоПериода, ПериодПланирования.ВидПериода);
	Если ПроверятьСоответствиеПределамПланирования И НовоеКоличествоПериодов > ПериодовДоПредела Тогда
		
		// Если новое количество периодов не помещается до предела планирования, изменяем конечную дату
		Возврат ИзменитьОкончаниеПериодаПланирования(ПериодПланирования, ПериодПланирования.КонечныйПериод.ДатаНачала, ПроверятьСоответствиеПределамПланирования, ОписаниеПроблемы);
		
	Иначе
		
		// Пересчитываем связанные реквизиты по дате начала
		Возврат ИзменитьНачалоПериодаПланирования(ПериодПланирования, ПериодПланирования.НачальныйПериод.ДатаНачала, ПроверятьСоответствиеПределамПланирования, ОписаниеПроблемы);
		
	КонецЕсли;
	
КонецФункции

// Осуществляет сдвиг периода планирования на указанное количество периодов вперед или назад (в зависимости от знака числа)
Функция СдвинутьПериодПланирования(ПериодПланирования, КоличествоПериодов, ПроверятьСоответствиеПределамПланирования = Истина, ОписаниеПроблемы = "") Экспорт

	ОписаниеПроблемы = "";
	
	// Проверяем обязательные параметры
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "ПериодПланирования", ПериодПланирования, Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "КоличествоПериодов", КоличествоПериодов, Тип("Число"));
	
	НоваяДата = ДобавитьБюджетныйПериод(ПериодПланирования.НачальныйПериод.ДатаНачала, ПериодПланирования.ВидПериода, КоличествоПериодов);
	Возврат ИзменитьНачалоПериодаПланирования(ПериодПланирования, НоваяДата, ПроверятьСоответствиеПределамПланирования, ОписаниеПроблемы);

КонецФункции

// Проверяет соответсвие периода планирования настройкам и возвращает код состояния. 0 - ошибок нет, иначе - код ошибки
//
//Параметры:
//	ПериодПланирования - Структура, результат функции Бюджетирование.НовыйПериодПланированияВариантаБюджета()
//	ДопустимоеКоличествоПериодов - Число, максимально разрешенное для планирование количество бюджетных периодов
//	ОписаниеПроблемы - Строка - выходной параметр, будет содержать описание проблемы
//
//Возвразаемое значение:
//	Число - 0 - все периоды соотвествуют заданным границам
//			1-не задан начальный или/и конечный период;
//			2-Установленное количество периодов больше возможного;
//			3-Начальный период меньше допустимого;
//			4-Конечный период больше допустимого;
//
Функция СостояниеПериодаПланирования(ПериодПланирования, ДопустимоеКоличествоПериодов = 0, ОписаниеПроблемы = "") Экспорт

	ОписаниеПроблемы = "";

	// Проверяем обязательные параметры
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("БюджетированиеКлиентСервер.ИзменитьНачалоПериодаПланирования()", "ПериодПланирования", ПериодПланирования, Тип("Структура"));
	
	Если Не ЗначениеЗаполнено(ПериодПланирования.НачальныйПериод.ДатаНачала)
		Или Не ЗначениеЗаполнено(ПериодПланирования.НачальныйПериод.ДатаОкончания)
		Или Не ЗначениеЗаполнено(ПериодПланирования.КонечныйПериод.ДатаНачала)
		Или Не ЗначениеЗаполнено(ПериодПланирования.КонечныйПериод.ДатаОкончания)
			Тогда
			
		ОписаниеПроблемы = НСтр("ru='Одна из дат периода планирования не указана.'");
		Возврат 1;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДопустимоеКоличествоПериодов) И ПериодПланирования.КоличествоПериодов > ДопустимоеКоличествоПериодов Тогда
		
		ОписаниеПроблемы = НСтр("ru='Количество бюджетных периодов не может превышать %1.'");
		ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, ДопустимоеКоличествоПериодов);
		Возврат 2;
		
	КонецЕсли;
	
	Если ПериодПланирования.НачальныйПериод.КалендарноеНачало < ПериодПланирования.МинимальнаяДатаПлана Тогда
		
		ОписаниеПроблемы = НСтр("ru='Выбранный период начинается раньше даты начала планирования.'");
		Возврат 3;
		
	КонецЕсли;
	
	Если ПериодПланирования.КонечныйПериод.КалендарноеНачало > ПериодПланирования.МаксимальнаяДатаПлана Тогда
		
		ОписаниеПроблемы = НСтр("ru='Выбранный период превышает предел планирования.'");
		Возврат 4;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает количество бюджетных периодов между указанными датами
//
//Параметры:
//	ДатаНачала - Дата - момент начала бюжетного периода
//	ДатаОкончания - Дата - момент окончания бюжетного периода
//	ВидПериода - Строка - строковое представление элемента перечисления ПериодичностьПланирования
//	ПредставлениеЧисла - Строка - возвращаемый, заполняется представлением количества периодов. Например: "12 месяцев"
//	ПредставлениеПрописи - Строка - возвращаемый, заполняется представлением количества периодов прописью. Например: "Двенадцать месяцев"
//
//Возвразаемое значение
//	Число - количество бюджетных периодов
Функция КоличествоПериодовМеждуДатами(Знач ДатаНачала, Знач ДатаОкончания, Знач ВидПериода, ПредставлениеЧисла = "", ПредставлениеПрописи = "") Экспорт

	Результат              = 0;
	ПредставлениеЧисла     = "";
	ПредставлениеПрописи   = "";
	
	ВидПериода = Врег(ВидПериода);
	
	Если ВидПериода = "НЕДЕЛЯ" Тогда
		
		ДатаОкончания = ?(ДатаОкончания = КонецДня(ДатаОкончания), ДатаОкончания + 1, НачалоДня(ДатаОкончания));
		РазницаВСекундах       = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / 604800;
		Результат = Цел(РазницаВСекундах) + ?(РазницаВСекундах % 1 > 0, 1, 0);
		
	Иначе
		
		ДатаОкончания = ?(КонецМесяца(ДатаОкончания) = КонецДня(ДатаОкончания), КонецДня(ДатаОкончания) + 1, НачалоДня(ДатаОкончания));
		РазницаВСекундах       = ДатаОкончания - НачалоДня(ДатаНачала);
		
		// Вычисляем кол-во полных месяцев
		КоличествоМесяцев = Цел(РазницаВСекундах / 2592000);
		ВремДата = НачалоМесяца(ДобавитьМесяц(ДатаНачала, КоличествоМесяцев));
		НачалоМесяцаОкончания = НачалоМесяца(ДатаОкончания);
		Пока ВремДата <> НачалоМесяцаОкончания Цикл
			КоличествоМесяцев = КоличествоМесяцев + ?(ВремДата > НачалоМесяцаОкончания, -1, 1);
			ВремДата = НачалоМесяца(ДобавитьМесяц(ДатаНачала, КоличествоМесяцев));
		КонецЦикла;
		
		Если ВидПериода = "КВАРТАЛ" Тогда
			Результат = Цел(КоличествоМесяцев / 3) + ?(КоличествоМесяцев % 3 > 0, 1, 0);
		ИначеЕсли ВидПериода = "ГОД" Тогда
			Результат = Цел(КоличествоМесяцев / 12) + ?(КоличествоМесяцев % 12 > 0, 1, 0);
		Иначе
			Результат = КоличествоМесяцев;
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеЧисла = ПредставлениеКоличестваБюджетныхПериодов(Результат, ВидПериода, ПредставлениеПрописи);
	
	Возврат Результат;

КонецФункции

// Возвращает строковое представление количества бюджетных периодов
//
//Параметры:
//	КоличествоПериодов - Число - количество, которое нужно представить строкой
//	ВидПериода - Строка - строковое представление элемента перечисления ПериодичностьПланирования
//	ПредставлениеПрописи - Строка - возвращаемый, заполняется представлением количества периодов прописью. Например: "Двенадцать месяцев"
//
//Возвразаемое значение
//	Строка - например. "12 месяцев"
//
Функция ПредставлениеКоличестваБюджетныхПериодов(Знач КоличествоПериодов, Знач ВидПериода, ПредставлениеПрописи = "") Экспорт

	Результат              = "";
	ПредставлениеПрописи   = "";
	ВидПериода = Врег(ВидПериода);
	
	Если ВидПериода = "НЕДЕЛЯ" Тогда
		ПараметрыПрописиRU = "&неделя,&недели,&недель,ж";
	ИначеЕсли ВидПериода = "КВАРТАЛ" Тогда
		ПараметрыПрописиRU = "&квартал,&квартала,&кварталов,м";
	ИначеЕсли ВидПериода = "ГОД" Тогда
		ПараметрыПрописиRU = "&год,&года,&лет,м";
	Иначе
		ПараметрыПрописиRU = "&месяц,&месяца,&месяцев,м";
	КонецЕсли;

	ПредставлениеПрописи = ЧислоПрописью(КоличествоПериодов, "Л=ru_RU; НД=Ложь; ДП=Ложь", ПараметрыПрописиRU);
	ПредставлениеПрописи = НРег(СтрЗаменить(ПредставлениеПрописи, " 00", ""));
	
	Результат = Формат(КоличествоПериодов, "ЧДЦ=; ЧГ=") + " " + Сред(ПредставлениеПрописи, СтрНайти(ПредставлениеПрописи, "&") + 1);
	ПредставлениеПрописи = НРег(СтрЗаменить(ПредставлениеПрописи, "&", ""));
	
	Возврат Результат;
	
КонецФункции

// Возвращает компактное представление бюджетного периода в соответствие с заданным видом бюджетного периода
//
//Параметры:
//	Начало - Дата начала периода
//	Окончание - Дата окончания периода
//	Видпериода - Строка - строковое представление перечисления ПериодичностьПланирования
//
//Возвразаемое значение
//	Строка - например. "Апрель 2015 г."
//
Функция ПредставлениеБюджетногоПериода(Знач Начало, Знач Окончание, Знач ВидПериода) Экспорт

	СтрокаГода = ?(Год(Начало) = Год(Окончание), "", "гггг");
	ВидПериода = Врег(Строка(ВидПериода));
	
	Если Не ЗначениеЗаполнено(Начало) И Не ЗначениеЗаполнено(Окончание) Тогда
		
		Возврат "[" + НСтр("ru='не задан'") + "]";
		
	ИначеЕсли Не ЗначениеЗаполнено(Начало) Или Не ЗначениеЗаполнено(Окончание) Тогда
		
		Возврат "[" + НСтр("ru='Некорректный период!'") + "]";
		
	ИначеЕсли ВидПериода = "НЕДЕЛЯ" Тогда
		
		СтрокаГода = ?(СтрокаГода = "", "", "." + СтрокаГода);
		Возврат Формат(Начало, "ДФ='дд.ММ" + СтрокаГода + "'") + " - " + 
				Формат(Окончание, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли ВидПериода = "МЕСЯЦ" Тогда
		
		Если НачалоМесяца(Начало) = НачалоМесяца(Окончание) И День(Начало) = 1 Тогда
			Возврат Формат(Начало, "ДФ='ММММ гггг '");
		ИначеЕсли День(Начало) = 1 Тогда
			Возврат Формат(Начало, "ДФ='ММММ " + СтрокаГода + "'") + " - " + 
					Формат(Окончание, "ДФ='ММММ гггг'");
		Иначе
			Возврат Формат(Начало, "ДФ='дд.ММ " + СтрокаГода + "'") + " - " + 
					Формат(Окончание, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
		
	ИначеЕсли ВидПериода = "КВАРТАЛ" Тогда
		
		НачалоКалендарное = Начало = НачалоКвартала(Начало);
		Если НачалоКвартала(Начало) = НачалоКвартала(Окончание) И НачалоКалендарное Тогда
			Возврат Формат(Начало, "ДФ='к"" квартал"" гггг'");
		ИначеЕсли НачалоКалендарное Тогда
			Если СтрокаГода = "" Тогда
				Возврат Формат(Начало, "ДФ='к'") + " - " + 
						Формат(Окончание, "ДФ='к"" квартал"" гггг'");
			Иначе
				Возврат Формат(Начало, "ДФ='к"" квартал"" гггг'") + " - " + 
						Формат(Окончание, "ДФ='к"" квартал"" гггг'");
			КонецЕсли;
		Иначе
			Возврат Формат(Начало, "ДФ='дд.ММ " + СтрокаГода + "'") + " - " + 
					Формат(Окончание, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
				
			
	ИначеЕсли ВидПериода = "ГОД" Тогда
		
		НачалоКалендарное = День(Начало) = 1 И Месяц(Начало) = 1;
		Если НачалоГода(Начало) = НачалоГода(Окончание) И НачалоКалендарное Тогда
			Возврат Формат(Начало, "ДФ='гггг'");
		ИначеЕсли НачалоКалендарное Тогда
			Возврат Формат(Начало, "ДФ='гггг'") + " - " +
					Формат(Окончание, "ДФ='гггг'");
		Иначе
			Возврат Формат(Начало, "ДФ='дд.ММ.гггг'") + " - " + 
					Формат(Окончание, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПредставлениеПериода(Начало, Окончание);
	
КонецФункции

// Возвращает дату, соответствующую каленарному началу периода указанного вида
Функция КалендарноеНачалоПериода(Знач ДатаПериода, Знач ВидПериода) Экспорт

	ВидПериода = ?(ЗначениеЗаполнено(ВидПериода), Врег(ВидПериода), "МЕСЯЦ");
	
	Если ВидПериода = "НЕДЕЛЯ" Тогда
		
		Возврат НачалоНедели(ДатаПериода);
		
	ИначеЕсли ВидПериода = "МЕСЯЦ" Тогда
		
		Возврат НачалоМесяца(ДатаПериода);
		
	ИначеЕсли ВидПериода = "КВАРТАЛ" Тогда
		
		Возврат НачалоКвартала(ДатаПериода);
		
	ИначеЕсли ВидПериода = "ГОД" Тогда
		
		Возврат НачалоГода(ДатаПериода);
		
	Иначе
		
		Возврат ДатаПериода;
		
	КонецЕсли;

КонецФункции

// Возвращает дату, соответствующую каленарному окончанию периода указанного вида
Функция КалендарноеОкончаниеПериода(Знач ДатаПериода, Знач ВидПериода) Экспорт

	ВидПериода = ?(ЗначениеЗаполнено(ВидПериода), Врег(ВидПериода), "МЕСЯЦ");
	
	Если ВидПериода = "НЕДЕЛЯ" Тогда
		
		Возврат КонецНедели(ДатаПериода);
		
	ИначеЕсли ВидПериода = "МЕСЯЦ" Тогда
		
		Возврат КонецМесяца(ДатаПериода);
		
	ИначеЕсли ВидПериода = "КВАРТАЛ" Тогда
		
		Возврат КонецКвартала(ДатаПериода);
		
	ИначеЕсли ВидПериода = "ГОД" Тогда
		
		Возврат КонецГода(ДатаПериода);
		
	Иначе
		
		Возврат ДатаПериода;
		
	КонецЕсли;

КонецФункции

// Возвращает дату, отстоящую от даты, указанной в параметрах на зданное количество периодов (аналог метода "ДобавитьМесяц")
Функция ДобавитьБюджетныйПериод(Знач ДатаПериода, Знач ВидПериода, Знач КоличествоПериодов) Экспорт

	ВидПериода = ?(ЗначениеЗаполнено(ВидПериода), Врег(ВидПериода), "МЕСЯЦ");
	
	Если ВидПериода = "НЕДЕЛЯ" Тогда
		
		Возврат ДатаПериода + КоличествоПериодов * 604800;
		
	ИначеЕсли ВидПериода = "МЕСЯЦ" Тогда
		
		Возврат ДобавитьМесяц(ДатаПериода, КоличествоПериодов);
		
	ИначеЕсли ВидПериода = "КВАРТАЛ" Тогда
		
		Возврат ДобавитьМесяц(ДатаПериода, КоличествоПериодов * 3);
		
	ИначеЕсли ВидПериода = "ГОД" Тогда
		
		Возврат ДобавитьМесяц(ДатаПериода, КоличествоПериодов * 12);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

// Возвращает номер квартала указанной даты
Функция Квартал(Дата) Экспорт

	Возврат Цел(Месяц(Дата)/3) + ?(Месяц(Дата)%3 = 0, 0, 1);

КонецФункции

// Возвращает разницу между двумя периодичностями планирования: число, объясняющее, какая из периодичностей крупней
//
//Параметры:
//	Периодичность1 - ПеречислениеСсылка.ПериодичностьПланирования - первый вариант планирования
//	Периодичность2 - ПеречислениеСсылка.ПериодичностьПланирования - второй вариант планирования
//
//Возвращаемое значение:
//	Число - 0, если периодичность планирования одинакова
//			>0, если Периодичность1 крупней детальности Периодичность2 (например, Месяц > Неделя)
//			<0, если Периодичность1 мельче детальности Периодичность1 (например, Неделя < Месяц)
//
Функция РазностьПериодичностейПланирования(Периодичность1, Периодичность2) Экспорт

	Если Периодичность1 = Периодичность2 Тогда
		Возврат 0;
	КонецЕсли;
	
	Индекс1 = 0;
	Если Периодичность1 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Неделя") Тогда
		Индекс1 = 1;
	ИначеЕсли Периодичность1 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Месяц") Тогда
		Индекс1 = 2;
	ИначеЕсли Периодичность1 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Квартал") Тогда
		Индекс1 = 3;
	ИначеЕсли Периодичность1 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Год") Тогда
		Индекс1 = 4;
	КонецЕсли;
	
	Индекс2 = 0;
	Если Периодичность2 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Неделя") Тогда
		Индекс2 = 1;
	ИначеЕсли Периодичность2 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Месяц") Тогда
		Индекс2 = 2;
	ИначеЕсли Периодичность2 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Квартал") Тогда
		Индекс2 = 3;
	ИначеЕсли Периодичность2 = ПредопределенноеЗначение("Перечисление.ПериодичностьПланирования.Год") Тогда
		Индекс2 = 4;
	КонецЕсли;
	
	Возврат Индекс1 - Индекс2;

КонецФункции


#КонецОбласти

