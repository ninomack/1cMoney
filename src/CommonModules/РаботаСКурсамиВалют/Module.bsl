///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет в справочник валют валюты из классификатора.
//
// Параметры:
//   Коды - Массив - цифровые коды добавляемых валют.
//
// Возвращаемое значение:
//   Массив, СправочникСсылка.Валюты - ссылки созданных валют.
//
Функция ДобавитьВалютыПоКоду(Знач Коды) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Результат = Обработки["ЗагрузкаКурсовВалют"].ДобавитьВалютыПоКоду(Коды);
	Иначе
		Результат = Новый Массив();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает курс валюты на дату.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - Валюта, для которой получается курс.
//   ДатаКурса - Дата - Дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Структура - Параметры курса.
//       * Курс      - Число - Курс валюты на указанную дату.
//       * Кратность - Число - Кратность валюты на указанную дату.
//       * Валюта    - СправочникСсылка.Валюты - Ссылка валюты.
//       * ДатаКурса - Дата - Дата получения курса.
//
// ДЕНЬГИ
//Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт
Функция ПолучитьКурсВалюты(Валюта, ДатаКурса = Неопределено, БазоваяВалюта = Неопределено) Экспорт
// Конец ДЕНЬГИ
	
	// ДЕНЬГИ
	// Для получения курса используется базовая валюта
	// вместо строк:
	//Результат = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	//Результат.Вставить("Валюта",    Валюта);
	//Результат.Вставить("ДатаКурса", ДатаКурса);
	// добавлено:
	Если ДатаКурса = Неопределено Тогда
		ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли; 
	Если БазоваяВалюта = Неопределено Тогда
		БазоваяВалюта = Константы.ВалютаУчета.Получить();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаКурса", ДатаКурса);
	Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалюта);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&ДатаКурса,
	|			БазоваяВалюта = &БазоваяВалюта
	|				И Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Результат = Новый Структура("Валюта,БазоваяВалюта,Период,ДатаКурса,Курс,Кратность", Валюта, БазоваяВалюта, Дата(1,1,1), ДатаКурса,0,1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	// Конец ДЕНЬГИ
	
	Возврат Результат;
	
КонецФункции

// Формирует представление суммы прописью в указанной валюте.
//
// Параметры:
//   СуммаЧислом - Число - сумма, которую надо представить прописью.
//   Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму.
//   ВыводитьСуммуБезКопеек - Булево - признак представления суммы без копеек.
//
// Возвращаемое значение:
//   Строка - сумма прописью.
//
Функция СформироватьСуммуПрописью(СуммаЧислом, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Результат = Обработки["ЗагрузкаКурсовВалют"].СформироватьСуммуПрописью(СуммаЧислом, Валюта, ВыводитьСуммуБезКопеек);
	Иначе	
		Результат = "";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Пересчитывает сумму из одной валюты в другую.
//
// Параметры:
//  Сумма          - Число - сумма, которую необходимо пересчитать;
//  ИсходнаяВалюта - СправочникСсылка.Валюты - пересчитываемая валюта;
//  НоваяВалюта    - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать;
//  Дата           - Дата - дата курсов валют.
//
// Возвращаемое значение:
//  Число - пересчитанная сумма.
//
Функция ПересчитатьВВалюту(Сумма, ИсходнаяВалюта, НоваяВалюта, Дата) Экспорт
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма,
		ПолучитьКурсВалюты(ИсходнаяВалюта, Дата),
		ПолучитьКурсВалюты(НоваяВалюта, Дата));
		
КонецФункции

// Предназначена для использования в конструкторе типа Число для денежных полей.
//
// Параметры:
//  ДопустимыйЗнакПоля - ДопустимыйЗнак - определяет допустимый знак числа. Значение по умолчанию - ДопустимыйЗнак.Любой.
// 
// Возвращаемое значение:
//  ОписаниеТипов - тип значения для денежного поля.
//
Функция ОписаниеТипаДенежногоПоля(Знач ДопустимыйЗнакПоля = Неопределено) Экспорт
	
	Если ДопустимыйЗнакПоля = Неопределено Тогда
		ДопустимыйЗнакПоля = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Если ДопустимыйЗнакПоля = ДопустимыйЗнак.Любой Тогда
		Возврат Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип;
	КонецЕсли;
	
	Возврат Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ОбъектМетаданных = Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют");
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если ОбщегоНазначения.РазделениеВключено() // В модели сервиса обновляется автоматически.
		Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		Или Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют)
		Или МодульТекущиеДелаСервер.ДелоОтключено("КлассификаторВалют") Тогда
		Возврат;
	КонецЕсли;
	
	КурсыАктуальны = КурсыАктуальны();
	
	// Процедура вызывается только при наличии подсистемы "Текущие дела", поэтому здесь
	// не делается проверка существования подсистемы.
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(ОбъектМетаданных.ПолноеИмя());
	
	Для Каждого Раздел Из Разделы Цикл
		
		ИдентификаторВалюты = "КлассификаторВалют" + СтрЗаменить(Раздел.ПолноеИмя(), ".", "");
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторВалюты;
		Дело.ЕстьДела       = Не КурсыАктуальны;
		Дело.Представление  = НСтр("ru = 'Курсы валют устарели'");
		Дело.Важное         = Истина;
		Дело.Форма          = "Обработка.ЗагрузкаКурсовВалют.Форма";
		Дело.ПараметрыФормы = Новый Структура("ОткрытиеИзСписка", Истина);
		Дело.Владелец       = Раздел;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных.
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт
	
	// Загрузка в классификатор валюты запрещена.
	СтрокаТаблицы = ЗагружаемыеСправочники.Найти(Метаданные.Справочники.Валюты.ПолноеИмя(), "ПолноеИмя");
	Если СтрокаТаблицы <> Неопределено Тогда 
		ЗагружаемыеСправочники.Удалить(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.Валюты.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ПриОпределенииНастроекРегламентныхЗаданий(Зависимости);
	КонецЕсли;
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	// СовместноДляПользователейИВнешнихПользователей.
	НазначениеРолей.СовместноДляПользователейИВнешнихПользователей.Добавить(
		Метаданные.Роли.ЧтениеКурсовВалют.Имя);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		КурсыОбновляютсяОтветственными = Ложь; // В модели сервиса обновляются автоматически.
	ИначеЕсли НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.КурсыВалют) Тогда
		КурсыОбновляютсяОтветственными = Ложь; // Пользователь не может обновлять курсы валют.
	Иначе
		КурсыОбновляютсяОтветственными = КурсыЗагружаютсяИзИнтернета(); // Есть валюты, для которых можно загружать курсы.
	КонецЕсли;
	
	ВключитьОповещение = Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела");
	РаботаСКурсамиВалютПереопределяемый.ПриОпределенииНеобходимостиПоказаПредупрежденияОбУстаревшихКурсахВалют(ВключитьОповещение);
	
	Параметры.Вставить("Валюты", Новый ФиксированнаяСтруктура("КурсыОбновляютсяОтветственными", (КурсыОбновляютсяОтветственными И ВключитьОповещение)));
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
	ЗапросыРазрешений.Добавить(
		МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения()));
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.4.4";
	Обработчик.Процедура = "РаботаСКурсамиВалют.ОбновитьСведенияОВалюте937";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.10";
	Обработчик.Процедура = "РаботаСКурсамиВалют.ЗаполнитьСпособУстановкиКурсаВалют";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ПриДобавленииОбработчиковОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриСохраненииДанныхАутентификацииПользователяИнтернетПоддержки.
Процедура ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразованиеСвязейВалют() Экспорт
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ПреобразованиеСвязейВалют();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки = Неопределено, АдресРезультата = Неопределено) Экспорт
	
	Если Метаданные.Обработки.Найти("ЗагрузкаКурсовВалют") <> Неопределено Тогда
		Обработки["ЗагрузкаКурсовВалют"].ЗагрузитьАктуальныйКурс(ПараметрыЗагрузки, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список разрешений для загрузки курсов валют с сайта 1С.
//
// Возвращаемое значение:
//  Массив.
//
Функция Разрешения()
	
	Разрешения = Новый Массив;
	ИмяОбработки = "ЗагрузкаКурсовВалют";
	Если Метаданные.Обработки.Найти(ИмяОбработки) <> Неопределено Тогда
		Обработки[ИмяОбработки].ДобавитьРазрешения(Разрешения);
	КонецЕсли;
	
	Возврат Разрешения;
	
КонецФункции

// Возвращает массив валют, курсы которых загружаются с сайта 1С.
//
Функция ЗагружаемыеВалюты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И НЕ Валюты.ПометкаУдаления
	// ДЕНЬГИ
	|	И Валюты.Активность
	// Конец ДЕНЬГИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.НаименованиеПолное";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает информацию о курсе валюты на основе ссылки на валюту.
// Данные возвращаются в виде структуры.
//
// Параметры:
// ВыбраннаяВалюта - Справочник.Валюты / Ссылка - ссылка на валюту, информацию
//                  о курсе которой необходимо получить.
//
// Возвращаемое значение:
// ДанныеКурса   - структура, содержащая информацию о последней доступной 
//                 записи курса.
//
// ДЕНЬГИ
//Функция ЗаполнитьДанныеКурсаДляВалюты(ВыбраннаяВалюта) Экспорт
Функция ЗаполнитьДанныеКурсаДляВалюты(ВыбраннаяВалюта, БазоваяВалюта = Неопределено, ОкончаниеПериода = Неопределено) Экспорт
// Конец ДЕНЬГИ
	
	ДанныеКурса = Новый Структура("ДатаКурса, Курс, Кратность");
	// ДЕНЬГИ 
	Если НЕ ЗначениеЗаполнено(БазоваяВалюта) Тогда
		БазоваяВалюта = Константы.ВалютаУчета.Получить();
		ДанныеКурса.Вставить("Описание", "");
	КонецЕсли;
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	ДанныеКурса.Вставить("БазоваяВалюта", БазоваяВалюта);
	// Конец ДЕНЬГИ
	
	Запрос = Новый Запрос;
	
	// ДЕНЬГИ (добавлено ограничение на базовую валюту) и окончание периода
	// вместо текста:
	//Запрос.Текст = "ВЫБРАТЬ РегКурсы.Период, РегКурсы.Курс, РегКурсы.Кратность
	//              | ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&ОкончаниеПериодаЗагрузки, Валюта = &ВыбраннаяВалюта) КАК РегКурсы";
	//Запрос.УстановитьПараметр("ВыбраннаяВалюта", ВыбраннаяВалюта);
	//Запрос.УстановитьПараметр("ОкончаниеПериодаЗагрузки", ТекущаяДатаСеанса());
	// добавлено:
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегКурсы.Период,
	               |	РегКурсы.Курс,
	               |	РегКурсы.Кратность
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(
	               |			&ОкончаниеПериодаЗагрузки,
	               |			Валюта = &ВыбраннаяВалюта
	               |				И БазоваяВалюта = &БазоваяВалюта) КАК РегКурсы";
	Запрос.УстановитьПараметр("БазоваяВалюта",            БазоваяВалюта);
	Запрос.УстановитьПараметр("ВыбраннаяВалюта",          ВыбраннаяВалюта);
	Запрос.УстановитьПараметр("ОкончаниеПериодаЗагрузки", ОкончаниеПериода);
	// Конец ДЕНЬГИ
	
	ВыборкаКурс = Запрос.Выполнить().Выбрать();
	ВыборкаКурс.Следующий();
	
	ДанныеКурса.ДатаКурса = ВыборкаКурс.Период;
	ДанныеКурса.Курс      = ВыборкаКурс.Курс;
	ДанныеКурса.Кратность = ВыборкаКурс.Кратность;
	
	Возврат ДанныеКурса;
	
КонецФункции

// Возвращает таблицу значений - валюты, зависящие от переданной
// в качестве параметра.
// Возвращаемое значение
//   ТаблицаЗначений
//   колонка "Ссылка" - СправочникСсылка.Валюты
//   колонка "Наценка" - число.
//
Функция СписокЗависимыхВалют(ВалютаБазовая, ДополнительныеСвойства = Неопределено) Экспорт
	
	Кэшировать = (ТипЗнч(ДополнительныеСвойства) = Тип("Структура"));
	
	Если Кэшировать Тогда
		
		ЗависимыеВалюты = ДополнительныеСвойства.ЗависимыеВалюты.Получить(ВалютаБазовая);
		
		Если ТипЗнч(ЗависимыеВалюты) = Тип("ТаблицаЗначений") Тогда
			Возврат ЗависимыеВалюты;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ОсновнаяВалюта = &ВалютаБазовая
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрВалюты.Ссылка,
	|	СпрВалюты.Наценка,
	|	СпрВалюты.СпособУстановкиКурса,
	|	СпрВалюты.ФормулаРасчетаКурса
	|ИЗ
	|	Справочник.Валюты КАК СпрВалюты
	|ГДЕ
	|	СпрВалюты.ФормулаРасчетаКурса ПОДОБНО &СимвольныйКод";
	
	Запрос.УстановитьПараметр("ВалютаБазовая", ВалютаБазовая);
	Запрос.УстановитьПараметр("СимвольныйКод", "%" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаБазовая, "Наименование") + "%");
	
	ЗависимыеВалюты = Запрос.Выполнить().Выгрузить();
	
	Если Кэшировать Тогда
		
		ДополнительныеСвойства.ЗависимыеВалюты.Вставить(ВалютаБазовая, ЗависимыеВалюты);
		
	КонецЕсли;
	
	Возврат ЗависимыеВалюты;
	
КонецФункции

Процедура ОбновитьКурсВалюты(Параметры, АдресРезультата) Экспорт
	
	ПодчиненнаяВалюта    = Параметры.ПодчиненнаяВалюта;
	СпособУстановкиКурса = Параметры.СпособУстановкиКурса;
	// ДЕНЬГИ
	БазоваяВалюта = Неопределено;
	Параметры.Свойство("БазоваяВалюта", БазоваяВалюта);
	Если Не ЗначениеЗаполнено(БазоваяВалюта) Тогда
		БазоваяВалюта = Константы.ВалютаУчета.Получить();
	КонецЕсли;
	// Конец ДЕНЬГИ
	
	// Ожидание завершения транзакции записи валюты.
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Валюты");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПодчиненнаяВалюта.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.НаценкаНаКурсДругойВалюты Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалют.Период,
		|	КурсыВалют.Валюта,
		|	КурсыВалют.БазоваяВалюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют КАК КурсыВалют
		|ГДЕ
		|	КурсыВалют.Валюта = &ВалютаИсточник
		// ДЕНЬГИ
		|	И КурсыВалют.БазоваяВалюта = &БазоваяВалюта
		// Конец ДЕНЬГИ
		|";
		Запрос.УстановитьПараметр("ВалютаИсточник", ПодчиненнаяВалюта.ОсновнаяВалюта);
		// ДЕНЬГИ
		Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалюта);
		// Конец ДЕНЬГИ
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(ПодчиненнаяВалюта.Ссылка);
		// ДЕНЬГИ
		НаборЗаписей.Отбор.БазоваяВалюта.Установить(БазоваяВалюта);
		// Конец ДЕНЬГИ
		
		Наценка = ПодчиненнаяВалюта.Наценка;
		
		Пока Выборка.Следующий() Цикл
			
			НоваяЗаписьНабораКурсов = НаборЗаписей.Добавить();
			НоваяЗаписьНабораКурсов.Валюта    = ПодчиненнаяВалюта.Ссылка;
			// ДЕНЬГИ
			НоваяЗаписьНабораКурсов.БазоваяВалюта = БазоваяВалюта;
			// Конец ДЕНЬГИ
			НоваяЗаписьНабораКурсов.Кратность = Выборка.Кратность;
			НоваяЗаписьНабораКурсов.Курс      = Выборка.Курс + Выборка.Курс * Наценка / 100;
			НоваяЗаписьНабораКурсов.Период    = Выборка.Период;
			
		КонецЦикла;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьКонтрольПодчиненныхВалют");
		Если ПодчиненнаяВалюта.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		КонецЕсли;

		НаборЗаписей.Записать();
		
	ИначеЕсли СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РасчетПоФормуле Тогда
		
		// Получить основные валюты для ПодчиненнаяВалюта.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	&ФормулаРасчетаКурса ПОДОБНО ""%"" + Валюты.Наименование + ""%""
		|";
		
		Запрос.УстановитьПараметр("ФормулаРасчетаКурса", ПодчиненнаяВалюта.ФормулаРасчетаКурса);
		ОсновныеВалюты = Запрос.Выполнить().Выгрузить();
		
		Если ОсновныеВалюты.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'В формуле должна быть использована хотя бы одна основная валюта.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.ФормулаРасчетаКурса");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОбновленныеПериоды = Новый Соответствие; // Кэш для однократного пересчета курса за один и тот же период.
		// Перезаписать курсы основных валют для обновления курса валюты ПодчиненнаяВалюта.
		Для каждого ЗаписьОсновнойВалюты Из ОсновныеВалюты Цикл
			НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Валюта.Установить(ЗаписьОсновнойВалюты.Ссылка);
			// ДЕНЬГИ
			НаборЗаписей.Отбор.БазоваяВалюта.Установить(БазоваяВалюта);
			// Конец ДЕНЬГИ
			НаборЗаписей.Прочитать();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновитьКурсЗависимойВалюты", ПодчиненнаяВалюта.Ссылка);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновленныеПериоды", ОбновленныеПериоды);
			
			Если ПодчиненнаяВалюта.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
			КонецЕсли;
			
			НаборЗаписей.Записать();
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление курсов валют

// Проверяет актуальность курсов всех валют.
//
Функция КурсыАктуальны() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втВалюты
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.ПометкаУдаления = ЛОЖЬ
	// ДЕНЬГИ
	|	И Валюты.Активность
	// Конец ДЕНЬГИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	втВалюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО Валюты.Ссылка = КурсыВалют.Валюта
	|			И (КурсыВалют.Период = &ТекущаяДата)
	|ГДЕ
	|	КурсыВалют.Валюта ЕСТЬ NULL ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Пустой();
КонецФункции

// Определяет есть ли хоть одна валюта, курс которой может загружаться из сети Интернет.
//
Функция КурсыЗагружаютсяИзИнтернета()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.ПометкаУдаления = ЛОЖЬ
	// ДЕНЬГИ
	|	И Валюты.Активность
	// Конец ДЕНЬГИ
	|";
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Проверяет наличие установленного курса и кратности валюты на 1 января 1980 года.
// В случае отсутствия устанавливает курс и кратность равными единице.
//
// Параметры:
//  Валюта - ссылка на элемент справочника Валют.
//
// ДЕНЬГИ
//Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта) Экспорт
Процедура ПроверитьКорректностьКурсаНа01_01_1980(Валюта, ВалютаУчета) Экспорт
// Конец ДЕНЬГИ	
	
	ДатаКурса = Дата("19800101");
	// ДЕНЬГИ
	Если НЕ ЗначениеЗаполнено(ВалютаУчета) Тогда
		Возврат;
	КонецЕсли; 
	//СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", Валюта));
	СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта, БазоваяВалюта", Валюта, ВалютаУчета));
	// Конец ДЕНЬГИ
	
	Если (СтруктураКурса.Курс = 0) Или (СтруктураКурса.Кратность = 0) Тогда
		НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		// ДЕНЬГИ
		НаборЗаписей.Отбор.БазоваяВалюта.Установить(ВалютаУчета);
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		// Конец ДЕНЬГИ
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		// ДЕНЬГИ
		Запись.БазоваяВалюта   = ВалютаУчета;
		// Конец ДЕНЬГИ
		Запись.Период = ДатаКурса;
		Запись.Курс = 1;
		Запись.Кратность = 1;
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Обновляет сведения о валюте, согласно документу "Изменение 33/2012 ОКВ Общероссийский классификатор валют.
// ОК (МК (ИСО 4217) 003-97) 014-2000" (принято и введено в действие Приказом Росстандарта от 12.12.2012 N 1883-ст).
//
Процедура ОбновитьСведенияОВалюте937() Экспорт
	Валюта = Справочники.Валюты.НайтиПоКоду("937");
	Если Не Валюта.Пустая() Тогда
		Валюта = Валюта.ПолучитьОбъект();
		Валюта.Наименование = "VEF";
		Валюта.НаименованиеПолное = НСтр("ru = 'Боливар'");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Валюта);
	КонецЕсли;
КонецПроцедуры

// Заполняет реквизит СпособУстановкиКурса у элементов справочника Валюты.
Процедура ЗаполнитьСпособУстановкиКурсаВалют() Экспорт
	Выборка = Справочники.Валюты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Валюта = Выборка.Ссылка.ПолучитьОбъект();
		Если Валюта.ЗагружаетсяИзИнтернета Тогда
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
		ИначеЕсли Не Валюта.ОсновнаяВалюта.Пустая() Тогда
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.НаценкаНаКурсДругойВалюты;
		Иначе
			Валюта.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Валюта);
	КонецЦикла;
КонецПроцедуры


// ДЕНЬГИ

Функция ДатаПредыдущейЗагрузкиКурсов() Экспорт
	
	// Среди активных валют, отмеченных для автозагрузки курсов, найдем самую меньшую дату последней загрузки курсов
	
	Запрос = Новый Запрос;
	БазоваяВалютаФайла = Справочники.Валюты.НайтиПоКоду("643");
	Если НЕ ЗначениеЗаполнено(БазоваяВалютаФайла) Тогда
		БазоваяВалютаФайла = Константы.ВалютаУчета.Получить();
	КонецЕсли; 
	Запрос.УстановитьПараметр("БазоваяВалюта", БазоваяВалютаФайла);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(МаксПериодыКурсов.МаксПериод) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(КурсыВалютСрезПоследних.Период) КАК МаксПериод,
	|		КурсыВалютСрезПоследних.Валюта КАК Валюта
	|	ИЗ
	|		РегистрСведений.КурсыВалют.СрезПоследних(
	|				,
	|				БазоваяВалюта = &БазоваяВалюта
	|					И Валюта <> &БазоваяВалюта
	|					И Валюта.ЗагружаетсяИзИнтернета
	|					И Валюта.Активность) КАК КурсыВалютСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КурсыВалютСрезПоследних.Валюта) КАК МаксПериодыКурсов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат '0001-01-01';
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат ?(ЗначениеЗаполнено(Выборка.Период), Выборка.Период, '0001-01-01');
	КонецЕсли; 
	
КонецФункции

Процедура ПересчитатьЗагруженныеКурсыВалют(знач МассивЗагруженныхВалют, знач БазоваяВалютаИсходныхКурсов, знач НачалоПериодаЗагрузки, знач ОкончаниеПериодаЗагрузки) Экспорт

	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если БазоваяВалютаИсходныхКурсов = Неопределено Тогда
		БазоваяВалютаИсходныхКурсов = Справочники.Валюты.НайтиПоКоду("643");
		Если НЕ ЗначениеЗаполнено(БазоваяВалютаИсходныхКурсов) Тогда
			БазоваяВалютаИсходныхКурсов = ВалютаУчета;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ВалютаУчета = БазоваяВалютаИсходныхКурсов Тогда
		// Валюта учета соответствует валюте, в которой загружались курсы
		Возврат;
	КонецЕсли; 

	// Убедимся, что для базовой валюты установлен курс 1
	ПроверитьКорректностьКурсаНа01_01_1980(ВалютаУчета, ВалютаУчета);
	
	// Определим, по каким именно валютам были загружены новые курсы:
	СписокВалют = Новый Массив;
	Для Каждого ЭлементЗагрузки Из МассивЗагруженныхВалют Цикл
		Если ЗначениеЗаполнено(ЭлементЗагрузки.Валюта) И ЭлементЗагрузки.СтатусОперации = Истина Тогда
			СписокВалют.Добавить(ЭлементЗагрузки.Валюта);
		КонецЕсли; 
	КонецЦикла; 
	
	Если СписокВалют.Количество() = 0 Тогда
		// Нет ни одной удачно загруженной валюты
		Возврат;
	КонецЕсли; 
	
	// Очистим значения новой базовой валюты к самой себе
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.БазоваяВалюта.Установить(ВалютаУчета);
	НаборЗаписей.Отбор.Валюта.Установить(ВалютаУчета);
	НаборЗаписей.Записать(Истина);
	
	// зададим для базовой валюты курс равный 1
	ЗаписьКурсовВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	ЗаписьКурсовВалют.Период        = '19800101';
	ЗаписьКурсовВалют.БазоваяВалюта = ВалютаУчета;
	ЗаписьКурсовВалют.Валюта        = ВалютаУчета;
	ЗаписьКурсовВалют.Курс          = 1;
	ЗаписьКурсовВалют.Кратность     = 1;
	ЗаписьКурсовВалют.Записать(Истина);
	
	// Курсы валют пересчитываем из валюты, в которой они были загружены, 
	//	в валюту учета прямо в запросе:
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоПериодаЗагрузки);
	Запрос.УстановитьПараметр("Дата2", ОкончаниеПериодаЗагрузки);
	Запрос.УстановитьПараметр("СписокВалют", СписокВалют);
	Запрос.УстановитьПараметр("ВалютаУчета", ВалютаУчета);
	Запрос.УстановитьПараметр("БазоваяВалютаЗагрузки", БазоваяВалютаИсходныхКурсов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеКурсы.Период,
	|	ВсеКурсы.Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВсеКурсы.Курс, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВсеКурсы.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВсеКурсы.Кратность, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВсеКурсы.Кратность
	|	КОНЕЦ КАК Кратность
	|ПОМЕСТИТЬ ВсеВалютыЗаПериод
	|ИЗ
	|	(ВЫБРАТЬ
	|		КурсыВалют.Период КАК Период,
	|		КурсыВалют.Валюта КАК Валюта,
	|		КурсыВалют.Курс КАК Курс,
	|		КурсыВалют.Кратность КАК Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют КАК КурсыВалют
	|	ГДЕ
	|		КурсыВалют.БазоваяВалюта = &БазоваяВалютаЗагрузки
	|		И КурсыВалют.Период МЕЖДУ &Дата1 И &Дата2
	|		И КурсыВалют.Валюта В(&СписокВалют)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КурсыВалют.Период,
	|		КурсыВалют.Валюта,
	|		КурсыВалют.Курс,
	|		КурсыВалют.Кратность
	|	ИЗ
	|		РегистрСведений.КурсыВалют.СрезПоследних(
	|				&Дата1,
	|				БазоваяВалюта = &БазоваяВалютаЗагрузки
	|					И Валюта В (&СписокВалют)) КАК КурсыВалют) КАК ВсеКурсы
	|
	|ГДЕ
	|	ЕСТЬNULL(ВсеКурсы.Валюта, Неопределено) <> Неопределено
	|	И ЕСТЬNULL(ВсеКурсы.Период, Неопределено) <> Неопределено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВсеКурсы.Период,
	|	ВсеКурсы.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалют.Период КАК Период
	|ПОМЕСТИТЬ ДатыКурсов
	|ИЗ
	|	ВсеВалютыЗаПериод КАК КурсыВалют
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.Период КАК Период,
	|	&ВалютаУчета КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалют.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалют.Кратность, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалют.Кратность
	|	КОНЕЦ КАК Кратность
	|ПОМЕСТИТЬ КурсыВалютыУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыГрафика.Период КАК Период,
	|		МАКСИМУМ(КурсыВалют.Период) КАК МаксПериод
	|	ИЗ
	|		ДатыКурсов КАК ДатыГрафика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО (КурсыВалют.Валюта = &ВалютаУчета)
	|				И ДатыГрафика.Период >= КурсыВалют.Период
	|				И (КурсыВалют.БазоваяВалюта = &БазоваяВалютаЗагрузки)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыГрафика.Период) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = &ВалютаУчета)
	|			И Подзапрос.МаксПериод = КурсыВалют.Период
	|			И (КурсыВалют.БазоваяВалюта = &БазоваяВалютаЗагрузки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеВалютыЗаПериод.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ВсеВалютыЗаПериод.Валюта = &ВалютаУчета
	|			ТОГДА &БазоваяВалютаЗагрузки
	|		ИНАЧЕ ВсеВалютыЗаПериод.Валюта
	|	КОНЕЦ КАК Валюта,
	|	1 КАК Кратность,
	|	ВЫБОР
	|		КОГДА ВсеВалютыЗаПериод.Валюта = &ВалютаУчета
	|			ТОГДА (ЕСТЬNULL(КурсыВалютыУчета.Кратность, 0) / ЕСТЬNULL(КурсыВалютыУчета.Курс, 1))
	|		ИНАЧЕ  (ЕСТЬNULL(ВсеВалютыЗаПериод.Курс, 0) * ЕСТЬNULL(КурсыВалютыУчета.Кратность, 0)) / (ЕСТЬNULL(КурсыВалютыУчета.Курс, 1) * ЕСТЬNULL(ВсеВалютыЗаПериод.Кратность, 1))
	|	КОНЕЦ КАК КурсВВалютеУчета,
	|	ВсеВалютыЗаПериод.Курс КАК КурсВВалютеЗагрузки,
	|	ВсеВалютыЗаПериод.Кратность КАК КратностьВВалютеЗагрузки
	|ИЗ
	|	ВсеВалютыЗаПериод КАК ВсеВалютыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютыУчета КАК КурсыВалютыУчета
	|		ПО ВсеВалютыЗаПериод.Период = КурсыВалютыУчета.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Валюта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Валюта) 
				ИЛИ НЕ ЗначениеЗаполнено(Выборка.КурсВВалютеУчета) Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗаписьКурсовВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		ЗаписьКурсовВалют.Период        = Выборка.Период;
		ЗаписьКурсовВалют.БазоваяВалюта = ВалютаУчета;
		ЗаписьКурсовВалют.Валюта        = Выборка.Валюта;
		Если Выборка.КурсВВалютеУчета < 0.09 Тогда
			ЗаписьКурсовВалют.Кратность = 100;
		ИначеЕсли Выборка.КурсВВалютеУчета < 0.9 Тогда
			ЗаписьКурсовВалют.Кратность = 10;
		Иначе
			ЗаписьКурсовВалют.Кратность = Выборка.Кратность;
		КонецЕсли;
		 
		ЗаписьКурсовВалют.Курс          = Выборка.КурсВВалютеУчета * ЗаписьКурсовВалют.Кратность;
		
		ЗаписьКурсовВалют.Записать(Истина);
		
	КонецЦикла; 
	
КонецПроцедуры

// Конец ДЕНЬГИ

#КонецОбласти
