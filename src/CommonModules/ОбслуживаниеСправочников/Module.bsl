////////////////////////////////////////////////////////////////////////////////
// Общий модуль ОбслуживаниеСправочников: 
//	* обработка событий объектов справочников
//	* контроль актуальности элементов в иерархических справочниках
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик собятия ПередЗаписью объектов справочников, контролирующий изменение  реквизитов предопределеных элементов справочников
//	Не осуществляется проверка, если в ДополнительныхСвойствах добавлен ключ "НеПроверятьСостояние"
//
//Параметры:
//	Источник - СправочникОбъект - записываемый элемент справочника
//	Отказ - Булево - стандартный параметр события ПередЗаписью элемента справочника
//	КонтролируемыеРеквизиты - Строка или Неопеделено - имена реквизитов, которые нельзя изменять в предределенном элементе;
//				Пустая строка - можно изменить все, кроме имени предопределенных данных
//				Неопределено - если изменять нельзя ничего
//	
Процедура ПроверкаИзмененияПредопределенныхЭлементовПередЗаписью(Источник, Отказ, знач КонтролируемыеРеквизиты = Неопределено) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("НеПроверятьСостояние") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитов = "ИмяПредопределенныхДанных" + ?(Не ЗначениеЗаполнено(КонтролируемыеРеквизиты), "", "," + КонтролируемыеРеквизиты);
	ПрежниеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, ИменаРеквизитов);
	Если Не ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) И Не ЗначениеЗаполнено(ПрежниеЗначения.ИмяПредопределенныхДанных) Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Источник.ИмяПредопределенныхДанных) И ЗначениеЗаполнено(ПрежниеЗначения.ИмяПредопределенныхДанных) Тогда
		Источник.ИмяПредопределенныхДанных = ПрежниеЗначения.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Если КонтролируемыеРеквизиты = Неопределено И Источник.Модифицированность() Тогда
		Отказ = Истина;
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Нельзя изменять предопределенный элемент справочника %1'"), Источник.Метаданные().Синоним); 
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ПрежниеЗначения Цикл
		
		Если Источник[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Отказ = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'В предопределенном элементе справочника %1 нельзя изменять реквизиты %2'"), Источник.Метаданные().Синоним, КонтролируемыеРеквизиты);
			ЗаписьЖурналаРегистрации(?(Источник.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
					Источник.Метаданные(), Источник.Ссылка, ТекстОшибки);
			ВызватьИсключение ТекстОшибки; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалениемСправочника. 
//	Проверяет и вычищает вспомогательные ссылки, которые создавались программно, без участия 
//	пользователя или к которым пользователь не имеет непосредственного доступа
//
//
Процедура ПередУдалениемСправочника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник.Ссылка);
	
	// Проверяем и очищаем ссылки на значения аналитики
	Если Метаданные.ПланыВидовХарактеристик.ВидыАналитик.Тип.СодержитТип(ТипИсточника) Тогда
		УдалитьСсылкуИзНабораАналитики(Источник.Ссылка, Отказ, Ложь);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	// Проверяем и очищаем ссылки на виды субконто
	Если Метаданные.ПланыВидовХарактеристик.ВидыСубконто.Тип.СодержитТип(ТипИсточника) 
		Или Метаданные.ОпределяемыеТипы.СтатьяБюджета.Тип.СодержитТип(ТипИсточника) Тогда
		УдалитьСсылкуИзЗначенийСубконто(Источник.Ссылка, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	// Удаляем ссылки в структуре статей бюджета
	Если Метаданные.ОпределяемыеТипы.СтатьяБюджета.Тип.СодержитТип(ТипИсточника) Тогда
		УдалитьСсылкуИзКлючейСтатейБюджета(Источник.Ссылка, Отказ);
	КонецЕсли;
	
	// Очистка ссылок в ресурсах параметров погашения долгов
	Если Не Отказ Тогда
		РегистрыСведений.ПараметрыГрафикаПогашенияДолгов.ПередУдалениемСправочника(Источник.Ссылка, Отказ);
	КонецЕсли;
	
	// Уникальные проверки для разных видов справочников
	Если Не Отказ И ТипИсточника = Тип("СправочникСсылка.ФинансовыеЦели") Тогда
		УдалитьИспользованиеФинансовыхЦелей(Источник.Ссылка, Отказ);
	КонецЕсли; 
	
	// Удаляем вводы остатков
	Если Не Отказ Тогда
		Документы.ВводИзменениеОстатка.УдалитьДокументыОбъектаУчета(Источник.Ссылка, Отказ);
	КонецЕсли;
	
	
КонецПроцедуры

// Проверяет наличие стандартных (общих для всех справочников) полей отбора
//Используется в обработчкиах события ОбработкаПолученияДанныхВыбора() справочников и планов видов характеристик
//
// Для тех реквизитов, где это поведение нужно изменить, следует явно установить свойства «Параметры выбора» и «Связи параметров выбора» 
// с необходимыми в конкретном контексте значениями выбора:
//   - если требуется выбирать неактивные элементы, указываем в свойстве реквизита «Параметры выбора» значение Отбор.Активность(Ложь),
//   - а если не требуется ограничивать выбор вообще, то оба значения - Истина и Ложь в фиксированном массиве.
//
//Параметры:
//	Параметры - Структура - параметры, в которой проверяется вложенная структура "Отбор"
//	ПарметрыИзменены - Булево - сигнализирует, что в процессе проверки параметры отбора изменились
//
Процедура ПроверитьСтандартныеПараметрыОтбора(Параметры, ПараметрыИзменены = Ложь) Экспорт
	
	Если Не Параметры.Свойство("Отбор") Тогда
		Параметры.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Активность") Тогда
		Параметры.Отбор.Вставить("Активность", Истина);
		ПараметрыИзменены = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет расширенную обработку получения данных выбора, если такая обработка настроена в 
//параметрах.
//	Параметры полностью соответствуют параметрам события ОбработкаПолученияДанныхВыбора() из менеджера справочников.
//
//Параметры:
//	ДанныеВыбора - СписокЗначений - содержит выбранные значения, (подрбоней в синтаксис-помощнике)
//	Параметры - Структура - содержит параметры выбора (подрбоней в синтаксис-помощнике). 
//				Если для поля настроен расширенный выбор значений, в параметрах должна быть вложенная структура
//				"РасширенныйВыбор" следующего содержания:
//					* РасширенныйВыбор.Разрешить - булево - разрешает или запрещает использование расширенного выбора
//					* РасширенныйВыбор.ИсточникиДанных - фиксированный Массив - имена справочников, из которых делается выбор
//					* РасширенныйВыбор.ОтборыПоИсточникам - фиксированный Массив - строковое представление условий, которые нужно добавить к тексту запроса для каждого источника данных
//					* РасширенныйВыбор.РазрешитьБыстроеСоздание - Булево - рарешить ли создание без открытия формы объекта
//					* РасширенныйВыбор.МаксимальноеКоличествоЭлементов - Число - сколько элементов допускается в списке?
//					* РасширенныйВыбор.Параметры - Структура - содержит параметры, которые нужно установить в запросе. Эти параметры могут использоваться в строках условий
//
Процедура ВыполнитьРасширенноеПолучениеДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	РасширенныйВыбор = Неопределено;
	Если Не Параметры.Свойство("РасширенныйВыбор", РасширенныйВыбор) 
			Или РасширенныйВыбор.Свойство("Разрешить") И  РасширенныйВыбор.Разрешить <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем все настройки расширенного выбора:
	ИсточникиДанных = Неопределено;
	Если Не РасширенныйВыбор.Свойство("ИсточникиДанных", ИсточникиДанных) Или Не ЗначениеЗаполнено(ИсточникиДанных) Тогда
		// Если не описаны источники, расширенному выбору делать нечего
		Возврат;
	КонецЕсли;
	
	// Определяем строку поиска
	СтрокаПоиска = Неопределено;
	Если Не Параметры.Свойство("СтрокаПоиска", СтрокаПоиска) Или Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	//Обрабатываем полученную строку поиска
	// 1. экранируем символ процента
	СтрокаСлов       = СтрЗаменить(СтрокаПоиска, "%", "[%]");
	// 2. раскладываем строку на массив слов
	// слова могут разделяться пробелом или иным знаком препинания
	МассивСловПоиска = СтрРазделить(СтрокаСлов, " ,;.", Ложь);
	Если МассивСловПоиска.Количество() = 0 Тогда
		// В строке поиска только разделители слов
		МассивСловПоиска = Новый Массив;
		МассивСловПоиска.Добавить(СтрокаСлов);
	КонецЕсли;
	
	// 3. оформляем саму строку поиска
	СтрокаПоиска = ВРег(Лев(СтрокаПоиска, 1)) + Сред(СтрокаПоиска,2);
	Параметры.СтрокаПоиска = СтрокаПоиска;
	
	ОтборыПоИсточникам = Неопределено;
	РасширенныйВыбор.Свойство("ОтборыПоИсточникам", ОтборыПоИсточникам);
	
	РазрешитьБыстроеСоздание = Неопределено;
	Если Не РасширенныйВыбор.Свойство("РазрешитьБыстроеСоздание", РазрешитьБыстроеСоздание) Тогда
		РазрешитьБыстроеСоздание = Ложь;
	КонецЕсли;
	
	МаксимальноеКоличествоЭлементов = Неопределено;
	Если Не РасширенныйВыбор.Свойство("МаксимальноеКоличествоЭлементов", МаксимальноеКоличествоЭлементов) Тогда
		МаксимальноеКоличествоЭлементов = 50;
	КонецЕсли;
	
	ВыборГруппИЭлементов = Неопределено;
	Если Не Параметры.Свойство("ВыборГруппИЭлементов", ВыборГруппИЭлементов) Или Не ЗначениеЗаполнено(ВыборГруппИЭлементов) Тогда
	
	#Если ВнешнееСоединение Тогда
	
		ВыборГруппИЭлементов = Неопределено;
		
	#Иначе			
		
		ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		
	#КонецЕсли
	
	КонецЕсли;
	
	// Отключаем стандартную обработку
	СтандартнаяОбработка = Ложь;

	ДанныеВыбора = Новый СписокЗначений;
	
	// Отбор, настроенный для поля (должен быть универсальным, если используется несколько источников данных)
	ОбщиеПараметрыОтбора = Неопределено;
	Если Не Параметры.Свойство("Отбор", ОбщиеПараметрыОтбора) Тогда
		ОбщиеПараметрыОтбора = Новый Структура;
	КонецЕсли;
	
	// Готовим запрос
	Запрос = Новый Запрос;
	
	// Добавляем параметры по словам поиска:
	Счетчик = 0;
	Для каждого Слово Из МассивСловПоиска Цикл
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("СтрокаПоиска" + Формат(Счетчик, "ЧДЦ=; ЧРГ=") , "%" + Слово + "%");   // для поиска по подстроке
		Запрос.УстановитьПараметр("СтрокаПоискаСНачала" + Формат(Счетчик, "ЧДЦ=; ЧРГ="), Слово + "%");  // чтобы сначала выбрать элементы, наименование которых начинается с указанной строки
	КонецЦикла;
	
	// Обрабатываем общие условия отбора
	ТекстОбщегоОтбора = "";
	Для каждого КлючИЗначение Из ОбщиеПараметрыОтбора Цикл
		
		ИмяПараметра = "П" + ОбщиеПараметрыОтбора.Количество() + "_" + КлючИЗначение.Ключ;
		ПраваяЧасть = ?(ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив"), " В (%1)", " = %1");
		ПраваяЧасть = СтрЗаменить(ПраваяЧасть, "%1", "&" + ИмяПараметра);
		
		ТекстОбщегоОтбора = ТекстОбщегоОтбора + ?(ТекстОбщегоОтбора = "", "", Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + " И ");
		ТекстОбщегоОтбора = ТекстОбщегоОтбора + "Спр." + КлючИЗначение.Ключ + ПраваяЧасть;
		
		Запрос.УстановитьПараметр(ИмяПараметра, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	// Добавляем в запрос параметры улучшенного поля выбора
	ПрочиеПараметрыЗапроса = Неопределено;
	Если Не РасширенныйВыбор.Свойство("Параметры", ПрочиеПараметрыЗапроса) И ТипЗнч(ПрочиеПараметрыЗапроса) = Тип("Структура") Тогда
		
		Для каждого ПараметрЗапроса Из ПрочиеПараметрыЗапроса Цикл
			Запрос.Параметры.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	КоличествоПоИСточникам = Окр(МаксимальноеКоличествоЭлементов / ИсточникиДанных.Количество(), 0);
	
	// Формируем текст и команды создания по источникам
	КомандыСоздания = Новый СписокЗначений;
	Для Счетчик = 0 По ИсточникиДанных.Количество() - 1 Цикл
		
		Если ОтборыПоИсточникам = Неопределено Или ОтборыПоИсточникам.Количество() - 1 < Счетчик Тогда
			ОтборПоИсточнику = "";
		Иначе
			ОтборПоИсточнику = ОтборыПоИсточникам[Счетчик];
		КонецЕсли;
		 
		ДобавитьВЗапросТекстПоИсточнику(Запрос, Счетчик, ИсточникиДанных[Счетчик], ОтборПоИсточнику, ТекстОбщегоОтбора, ВыборГруппИЭлементов, КоличествоПоИСточникам, КомандыСоздания, РазрешитьБыстроеСоздание, СтрокаПоиска, МассивСловПоиска);
		
		
	КонецЦикла;
	
	// Упорядочиваем записи:
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"УПОРЯДОЧИТЬ ПО
	|	Порядок1,
	|	Порядок2,
	|	Наименование";
	
	// Заполняем ДанныеВыбора результатом запроса
	ШрифтСтроки = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста);
	ДобавлятьКартинку = ИсточникиДанных.Количество() > 1;
	
	ТипФорматСтроки = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/ui", "FormattedString");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Представление = Выборка.Наименование;
		
		// раскрашиваем подстроки в найденом
		// получаем форматированную строку и сериализуем ее в XDTO
		Представление = Новый ФорматированнаяСтрока(Представление, ШрифтСтроки);
		ОбъектФС = ФабрикаXDTO.Создать(ТипФорматСтроки, Представление);
		ЛексическоеЗначение = ОбъектФС.ЛексическоеЗначение;
		
		// в лексическом значении объекта XDTO заменяем подстановки на строки с оформлением
		КоличествоСлов = МассивСловПоиска.Количество();
		Для Счетчик = 1 По КоличествоСлов Цикл
			
			//добавляем в представление оформление без учета регистра 
			Слово = МассивСловПоиска[Счетчик - 1];
			Слово = СтрЗаменить(Слово, "[%]", "%");
			ДлинаСлова = СтрДлина(Слово);
			КоличествоВхождений = СтрЧислоВхождений(Нрег(ЛексическоеЗначение), НРег(Слово));
			Для СчетчикВхождений = 1 По КоличествоВхождений Цикл
				НачалоСлова = СтрНайти(Нрег(ЛексическоеЗначение), НРег(Слово), НаправлениеПоиска.СНачала, , СчетчикВхождений);
				ЛексическоеЗначение = Лев(ЛексическоеЗначение, НачалоСлова - 1)
						+ "<b><color #00af00>" + Сред(ЛексическоеЗначение, НачалоСлова, ДлинаСлова ) + "</></>"
						+ Сред(ЛексическоеЗначение, НачалоСлова + ДлинаСлова);
			КонецЦикла;
			
		КонецЦикла;
		Представление = ФабрикаXDTO.Создать(ТипФорматСтроки, ЛексическоеЗначение).Значение;
		
		КартинкаЭлемента = ?(ДобавлятьКартинку, РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоВидуОбъектаУчета(Выборка.ИмяИсточника), Новый Картинка);
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление, , КартинкаЭлемента); 
		
	КонецЦикла;
	
	// Добавляем команды
	Для каждого ЭлементСписка Из КомандыСоздания Цикл
		
		ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, , ЭлементСписка.Картинка); 
		
	КонецЦикла;
	 
	
	
КонецПроцедуры

// Изменяет реквизиты и, при необходимости, перепроводит операции, в которых используется указанный в парамтерах кошелек
//	Необходимо выполнять при изменении назначения кошелька и при изменении типа счета с (или на) кредитной карты
//
//Параметры:
//	Кошелек - СправочникСсылка.КошелькиИСчета - кошелек, в котором изменилось назначение или "кредитность"
//	ИзменятьРазделУчета - Булево - признак необходимости изменять раздел учета и финансовую цель
//	НеРегистрироватьВОбмене - Булево - отключает регистрацию изменений в планах обмена
//
Процедура ПереписатьОперацииПоОбъектуСправочника(ОбъектСправочника, Перепроводить) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Элемент", ОбъектСправочника.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыОпераций.Операция,
	|	ТИПЗНАЧЕНИЯ(ОбъектыОпераций.Операция) КАК ТипОперации
	|ИЗ
	|	РегистрСведений.ОбъектыОпераций КАК ОбъектыОпераций
	|ГДЕ
	|	ОбъектыОпераций.ПредметУчета = &Элемент
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыОпераций.Операция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыОпераций.Операция.Дата,
	|	ОбъектыОпераций.Операция.Ссылка";
	
	ВыборкаОпераций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОпераций.Следующий() Цикл
		
		ОбъектОперации = ВыборкаОпераций.Операция.ПолучитьОбъект();
		
		// Копируем дополнительные свойства и параметры обмена из объекта-источника
		ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(ОбъектОперации, ОбъектСправочника);
		Если ОбъектОперации.ДополнительныеСвойства.Свойство("УдалятьРегистрацию") И ОбъектОперации.ДополнительныеСвойства.УдалятьРегистрацию Тогда
			УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(ОбъектОперации.ДополнительныеСвойства.УзелКорреспондента, ОбъектОперации);
		Иначе
			УдалятьРегистрацию = Ложь;
		КонецЕсли;
		
		// Устанавливаем запрет на обработку последовательности, т.к. перепроводятся все документы в хронологическом порядке
		ОбъектОперации.ДополнительныеСвойства.Вставить("НеВосстанавливатьПоследовательность", Истина);
		
		РежимЗаписи = ?(Перепроводить И ОбъектОперации.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ОбъектОперации.Записать(РежимЗаписи);
		
		Если УдалятьРегистрацию Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(ОбъектОперации.ДополнительныеСвойства.УзелКорреспондента, ОбъектОперации)
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


// Проверяет и по возможности удаляет ссылку из табличной части справочника ЗначенияСубконтоАналитика.
//	Удаление возможно только для тех наборов аналитики, которые не используются в документах, не помеченных на удаление.
//	Если элемент справочника ЗначенияСубконтоАналитика присутствует в документе, не помеченном на удаление, 
//	параметру Отказ устанавливается значение Истина
Процедура УдалитьСсылкуИзНабораАналитики(Ссылка, Отказ, ОчищатьСсылкиВДокументах) Экспорт 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
#Область ТекстЗапроса	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыЗначений.Ссылка
	|ПОМЕСТИТЬ Контейнеры
	|ИЗ
	|	Справочник.ЗначенияСубконтоАналитика.ВидыИЗначенияАналитики КАК НаборыЗначений
	|ГДЕ
	|	НаборыЗначений.ЗначениеАналитики = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ПОМЕСТИТЬ ДокументыБезПометки
	|ИЗ
	|	Документ.Доход.Доходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.Расход.Расходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиРасходовПоПроцентам
	|ИЗ
	|	Документ.МыВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиРасходовПоПроцентам В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиРасходовПоКомиссии
	|ИЗ
	|	Документ.МыВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиРасходовПоКомиссии В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиСписания
	|ИЗ
	|	Документ.МыВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиСписания В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.МыВернулиДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.МыВзялиВДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.МыДалиВДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиДоходовПоПроцентам
	|ИЗ
	|	Документ.НамВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиДоходовПоПроцентам В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Шапка.Ссылка,
	|	Шапка.АналитикаСтатьиСписания
	|ИЗ
	|	Документ.НамВернулиДолг КАК Шапка
	|ГДЕ
	|	НЕ Шапка.ПометкаУдаления
	|	И Шапка.АналитикаСтатьиСписания В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.НамВернулиДолг.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.ОбменВалюты.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьи
	|ИЗ
	|	Документ.Перемещение.ДополнительныеРасходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьи В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьиДохода
	|ИЗ
	|	Документ.УниверсальнаяОперация.Доходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьиДохода В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабЧасть.Ссылка,
	|	ТабЧасть.АналитикаСтатьиРасхода
	|ИЗ
	|	Документ.УниверсальнаяОперация.Расходы КАК ТабЧасть
	|ГДЕ
	|	НЕ ТабЧасть.Ссылка.ПометкаУдаления
	|	И ТабЧасть.АналитикаСтатьиРасхода В
	|			(ВЫБРАТЬ
	|				Контейнеры.Ссылка
	|			ИЗ
	|				Контейнеры КАК Контейнеры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контейнеры.Ссылка КАК КонтейнерАналитики,
	|	СУММА(ВЫБОР
	|			КОГДА ДокументыБезПометки.Ссылка ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Документы
	|ИЗ
	|	Контейнеры КАК Контейнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыБезПометки КАК ДокументыБезПометки
	|		ПО (Контейнеры.Ссылка = ДокументыБезПометки.АналитикаСтатьи)
	|
	|СГРУППИРОВАТЬ ПО
	|	Контейнеры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Операция
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабЧасть.Ссылка КАК Операция
	|	ИЗ
	|		Документ.Доход.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.МыВернулиДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.МыВзялиВДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.МыДалиВДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.НамВернулиДолг.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.ОбменВалюты.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.Перемещение.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.Расход.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТабЧасть.Ссылка
	|	ИЗ
	|		Документ.УниверсальнаяОперация.АналитикаДокумента КАК ТабЧасть
	|	ГДЕ
	|		ТабЧасть.ЗначениеАналитикиВШапке = &Ссылка) КАК Операции";
	
#КонецОбласти

	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаКонтейнеров = ПакетРезультатов[2].Выгрузить();
	ЕстьДокументы = ТаблицаКонтейнеров.Итог("Документы");
	
	// Удаляем значение аналитики из контейнеров, чтобы контейнеры не отображались в результатах поиска ссыдок
	Для Каждого СтрокаТаблицы Из ТаблицаКонтейнеров Цикл
		
		СправочникОбъект = СтрокаТаблицы.КонтейнерАналитики.ПолучитьОбъект();
		СтрокиКУдалению = СправочникОбъект.ВидыИЗначенияАналитики.НайтиСтроки(Новый Структура("ЗначениеАналитики", Ссылка));
		Для Каждого СтрокаАналитики Из СтрокиКУдалению Цикл
			СправочникОбъект.ВидыИЗначенияАналитики.Удалить(СтрокаАналитики);
		КонецЦикла; 
		Если СправочникОбъект.ВидыИЗначенияАналитики.Количество() = 0 Тогда
			СправочникОбъект.Прочитать();
			СправочникОбъект.Удалить();
		Иначе
			СправочникОбъект.Записать();
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЕстьДокументы > 0 И Не ОчищатьСсылкиВДокументах Тогда
		// Если аналитика используется в операциях и нет команды очищать ссылки - прерываем удаление
		Возврат;
	КонецЕсли; 
	
	// Очищаем значения аналитики в шапках операций
	Выборка = ПакетРезультатов[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Операция.ПолучитьОбъект();
		СтрокиКУдалению = ДокументОбъект.АналитикаДокумента.НайтиСтроки(Новый Структура("ЗначениеАналитикиВШапке", Ссылка));
		Для Каждого СтрокаАналитики Из СтрокиКУдалению Цикл
			ДокументОбъект.АналитикаДокумента.Удалить(СтрокаАналитики);
		КонецЦикла; 
		ДокументОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

// Проверяет использование указанного наименования в других элементах справочника:
//в пределах подчинения родителю с учетом наименования самого родителя; 
//или во всем справочнике, если Параметр "Родитель" = Неопределено
//
//Параметры:
//	Наименование - Строка - проверяемое наименование
//	СсылкаСправочника - СправочникСсылка - ссылка, которую нужно исключить из проверки
//						(обычно, наименование именно этого элемента и проверяется на уникальность)
//	Родитель- СправочникСсылка - Родитель, в подчинении которого проверяется уникальность. Элементы ниже по иерархии не проверяются
//					Если НЕОПРЕДЕЛЕНО, то поиск наименования осуществляется во всем справочнике
//
//Возвращаемое значение:
//	Булево - Истина, если наименование уже используется в каком-либо элементе справочника, кроме указанного в параметрах
//
Функция НаименованиеИспользуетсяДругимЭлементом(Наименование, СсылкаСправочника, Родитель = Неопределено) Экспорт

	Разделитель = "=-";
	ИскомоеНаименование = Разделитель + НРег(Наименование) + Разделитель;
	ИмяСправочника = СсылкаСправочника.Метаданные().Имя;
	ТипСправочника = ?(ЗначениеЗаполнено(СсылкаСправочника) И ОбщегоНазначения.ЭтоПланВидовХарактеристик(СсылкаСправочника.Метаданные())
						Или Метаданные.ПланыВидовХарактеристик.Найти(ИмяСправочника) <> Неопределено,
						"ПланВидовХарактеристик", "Справочник");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", ИскомоеНаименование);
	Запрос.УстановитьПараметр("Родитель",     Родитель);
	Запрос.УстановитьПараметр("Ссылка",       СсылкаСправочника);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Спр.Ссылка) КАК ДругихЭлементов
	|ИЗ
	|	" + ТипСправочника + "." + ИмяСправочника + " КАК Спр
	|ГДЕ
	|	Спр.Ссылка <> &Ссылка
	|	И """ + Разделитель + """ + Спр.Наименование + """ + Разделитель + """ = &Наименование
	|	// Условие по родителю
	|";
	
	Если Родитель <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// Условие по родителю", 
					"И Спр.Родитель = &Родитель");
	КонецЕсли;

	Результат = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.ДругихЭлементов > 0;
		
		Если Не Результат И Родитель <> Неопределено Тогда
			
			Результат = Разделитель + НРег(Родитель) + Разделитель = ИскомоеНаименование;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает наименование элемента уникальное в пределах справочника или указанного родителя
//	К укащзанному в параметрах наименованию добавляется в скобках очередной порядковый номер 
//
//Параметры:
//	Наименование - Строка - начальное наименование, которое нужно сделать уникальным
//	ИмяСправочника - Строка - имя объекта метаданных
//	Родитель - СправочникСсылка или Неопределено - родитель, в пределах которого нужно установить уникальное наименование
//
//Возвращаемое значение:
//	Строка - Наименование, увеличенное на очередной счетчик
Функция НовоеУникальноеНаименование(Наименование, ИмяСправочника, Родитель = Неопределено) Экспорт

	ИскомоеИмя = СокрЛП(Наименование);
	Если Прав(ИскомоеИмя, 1) = ")" Тогда
		
		ПозицияСкобки = СтрНайти(ИскомоеИмя, "(", НаправлениеПоиска.СКонца);
		Если ПозицияСкобки > 0 Тогда
			ИскомоеИмя = СокрЛП(Лев(ИскомоеИмя, ПозицияСкобки -1));
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИскомоеИмя", ИскомоеИмя);
	Запрос.УстановитьПараметр("Шаблон1", ИскомоеИмя + " ([0-9])");
	Запрос.УстановитьПараметр("Шаблон2", ИскомоеИмя + " ([0-9][0-9])");
	Запрос.УстановитьПараметр("Шаблон3", ИскомоеИмя + " ([0-9][0-9][0-9])");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Подзапрос.Наименование) Наименование
	|ИЗ (
	|ВЫБРАТЬ
	|	Элементы.Наименование КАК Наименование
	|ИЗ
	|	" + ИмяСправочника + " КАК Элементы
	|ГДЕ
	|	(Элементы.Наименование = &ИскомоеИмя ИЛИ Элементы.Наименование ПОДОБНО &Шаблон1)
	|	//УсловиеРодителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""яя_"" + Элементы.Наименование КАК Наименование
	|ИЗ
	|	" + ИмяСправочника + " КАК Элементы
	|ГДЕ
	|	Элементы.Наименование ПОДОБНО &Шаблон2
	|	//УсловиеРодителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""яяя_"" + Элементы.Наименование КАК Наименование
	|ИЗ
	|	" + ИмяСправочника + " КАК Элементы
	|ГДЕ
	|	Элементы.Наименование ПОДОБНО &Шаблон3
	|	//УсловиеРодителя
	|) КАК Подзапрос";

	Если Родитель <> Неопределено Тогда
		Запрос.УстановитьПараметр("Родитель", Родитель);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеРодителя", 
			"	И (Элементы.Родитель = &Родитель ИЛИ Элементы.Ссылка = &Родитель)");
	КонецЕсли;
	
	НовыйИндекс = 1;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		НайденоеИмя = Выборка.Наименование;
		Если Прав(НайденоеИмя, 1) = ")" Тогда
			
			ПозицияСкобки = СтрНайти(НайденоеИмя, "(", НаправлениеПоиска.СКонца);
			Если ПозицияСкобки > 0 Тогда
				
				СодержимоеСкобок = Сред(НайденоеИмя, ПозицияСкобки +1, СтрДлина(НайденоеИмя) - ПозицияСкобки - 1);
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СодержимоеСкобок) Тогда
					НовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СодержимоеСкобок) + 1;
				Иначе
					ИскомоеИмя = НайденоеИмя;
					Если Лев(ИскомоеИмя, 3) = "яя_" Тогда
						ИскомоеИмя = Сред(ИскомоеИмя, 4);
					КонецЕсли;
					Если Лев(ИскомоеИмя, 4) = "яя_" Тогда
						ИскомоеИмя = Сред(ИскомоеИмя, 5);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ИскомоеИмя + " (" + Формат(НовыйИндекс, "ЧДЦ=; ЧГ=") + ")" ;
	
КонецФункции

// Заполняет перед записью справочника его ДополнительныеСвойства значениями, необходимыми для анализа сделанных изменений
//
//Параметры:
//	СправочникОбъект - СправочникОбъект, в котором заполняем структуру ДополнительныеСвойства
//	СписокРеквизитов - Строка - имена реквизитов, чьи значения необходимо сохранить
//
Процедура ПередЗаписьюСправочникаЗаполнитьДополнительныеСвойства(СправочникОбъект, СписокРеквизитов = "") Экспорт
	
	Если СправочникОбъект.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		// Дополнительные свойства уже заполнены прежними значениями
		Возврат;
	КонецЕсли;
	
	Ссылка = СправочникОбъект.Ссылка;
	СправочникОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый",        СправочникОбъект.ЭтоНовый());
	СправочникОбъект.ДополнительныеСвойства.Вставить("ПрежниеЗначения",   Новый Структура);
	СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить("Активность",      Ссылка.Активность);
	СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить("ПометкаУдаления", Ссылка.ПометкаУдаления);
	СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить("Наименование",    Ссылка.Наименование);
	
	Если Не ПустаяСтрока(СписокРеквизитов) Тогда
		ИменаРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокРеквизитов, ",", Истина);
		Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			СправочникОбъект.ДополнительныеСвойства.ПрежниеЗначения.Вставить(ИмяРеквизита, Ссылка[ИмяРеквизита]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью, проверяющий уникальность наименования справочника в пределах подчинения родителю
//	При нарушении этого условия в режиме обмена элементу будет задано новое наименование, в прочих режимах - вызвано исключение
//
//Параметры:
//	Источник - СправочникОбъект - записываемый элемент справочника
//	Отказ - Булево - стандартный параметр события ПередЗаписью элемента справочника
//
Процедура ПроверкаНаименованияСправочникаПередЗаписью(Источник, Отказ) Экспорт
	
	МетаданныеИсточника = Источник.Метаданные();
	Родитель = ?(МетаданныеИсточника.Иерархический, Источник.Родитель, Неопределено);
	НаименованиеДублируется = НаименованиеИспользуетсяДругимЭлементом(Источник.Наименование, Источник.Ссылка, Родитель);
	Если Не НаименованиеДублируется Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Источник.Наименование = НовоеУникальноеНаименование(Источник.Наименование, МетаданныеИсточника.ПолноеИмя, Родитель);
		ПланыОбмена.ЗарегистрироватьИзменения(Источник.ОбменДанными.Отправитель, Источник);
	Иначе
		Отказ = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Наименование ""%1"" используется в другом элементе справочника ""%2"".
			|Измените наименование и повторите попытку.'"), Источник.Наименование, МетаданныеИсточника.Синоним);
		ЗаписьЖурналаРегистрации(?(Источник.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
				МетаданныеИсточника, Источник.Ссылка, ТекстОшибки);
		ВызватьИсключение ТекстОшибки; 
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередЗаписью, проверяющий согласованность пометки на удаление и активности элемента справочника
//
//Параметры:
//	Источник - СправочникОбъект - записываемый элемент справочника
//	Отказ - Булево - стандартный параметр события ПередЗаписью элемента справочника
//
Процедура СогласованиеПометкиИАктивностиПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ДополнительныеСвойства.Свойство("НеПроверятьСостояние") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		Источник.ДополнительныеСвойства.Вставить("ПрежниеЗначения", РегистрыСведений.ОбработанныеЗначенияСправочников.ТекущиеЗначенияПоСсылке(Источник.Ссылка));
	КонецЕсли;
	ПрежниеЗначения = Источник.ДополнительныеСвойства.ПрежниеЗначения;
	
	Если Источник.Метаданные().Реквизиты.Найти("Активность") <> Неопределено Тогда
		Если Источник.ПометкаУдаления <> ПрежниеЗначения.ПометкаУдаления И Источник.ПометкаУдаления И Источник.Активность Тогда
			Источник.Активность = Ложь;
		ИначеЕсли Источник.Активность <> ПрежниеЗначения.Активность И Источник.Активность И Источник.ПометкаУдаления Тогда
			Источник.ПометкаУдаления = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет связанную информацию при записи элемнета справочника
//
//Параметры:
//	Источник - СправочникОбъект - записываемый элемент справочника
//	Отказ - Булево - стандартный параметр события ПередЗаписью элемента справочника
//
Процедура ОбновлениеСвязаннойИнформацииПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка 
		ИЛИ Источник.ДополнительныеСвойства.Свойство("НеПроверятьСостояние") Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоОтложеннаяЗапись = Источник.ДополнительныеСвойства.Свойство("ОтложеннаяЗапись");
	ИзмененныеЭлементы  = Новый Соответствие;
	
	Если Не ЭтоОтложеннаяЗапись Тогда
		// Обновление ключа иерархии
		ОбновитьКлючСтатьиСправочника(Источник);
	КонецЕсли;
	
	// Считываются обработанные ранее значения
	Если Не Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		Источник.ДополнительныеСвойства.Вставить("ПрежниеЗначения", РегистрыСведений.ОбработанныеЗначенияСправочников.ТекущиеЗначенияПоСсылке(Источник.Ссылка));
	КонецЕсли;
	ПрежниеЗначения = Источник.ДополнительныеСвойства.ПрежниеЗначения;
	
	ВидИсточника = Источник.Метаданные().Имя;
	
	Если Источник.Метаданные().Иерархический Тогда
		
		// Согласование отметки удаления и активности в потомках и родителях
		ПроверитьОтметкуИАктивностьВИерархии(Источник, Отказ, ИзмененныеЭлементы);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЭтоОтложеннаяЗапись Тогда
			// Обновление статистики по иерархическим справочникам при отложенной записи выполняется отдельно
			
			РегистрыСведений.СтатистикаСправочников.ОбновитьСтатистикуСправочника(ВидИсточника, Источник.Ссылка);
			Если ЗначениеЗаполнено(ПрежниеЗначения.Родитель) И ПрежниеЗначения.Родитель <> Источник.Родитель Тогда
				РегистрыСведений.СтатистикаСправочников.ОбновитьСтатистикуСправочника(ВидИсточника, ПрежниеЗначения.Родитель);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоОтложеннаяЗапись Тогда
		
		// Автоматическое изменение статей и разделов бюджета
		ПроверитьАктуальностьОбъектаВБюджетеИОперациях(Источник);
		
	КонецЕсли;
	
	// Обновление обработанных значений в регистре сведений
	ИзмененныеЭлементы.Вставить(Источник.Ссылка, РегистрыСведений.ОбработанныеЗначенияСправочников.НоваяСтруктураОбработанныхЗначений(Источник));
	ОбновитьОбработанныеЗначения(ИзмененныеЭлементы);
	
КонецПроцедуры

// Копирует дополнительные свойства из одного объекта в другой
//
//Параметры:
//	Источник - СправочникОбъект - 
//	Назначение - СправочникОбъект - 
//
Процедура СкопироватьДополнительныеСвойстваОбъекта(Источник, Назначение) Экспорт
	
	Для каждого КлючИЗначение Из Источник.ДополнительныеСвойства Цикл
		
		Если КлючИЗначение.Ключ = "ПрежниеЗначения" Или КлючИЗначение.Ключ = "ЭтоНовый" Тогда
			Продолжить;
		КонецЕсли;
		
		Назначение.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(КлючИЗначение.Значение));
		
	КонецЦикла;
	
КонецПроцедуры



/////////////////////////////////////////////////////


// Обработчик события ОбработкаПолученияФормы, позволяющий использовать общую форму для выбора элементов составного типа
//Параметры процедуры полностью повторяю набор параметров обработчика события ОбработкаПолученияФормы
//
//Параметры:
//	ВидФормы - Строка - см. СП ОбработкаПолученияФормы
//	Параметры - Структура - см. СП ОбработкаПолученияФормы
//	ВыбраннаяФорма - см. СП ОбработкаПолученияФормы
//	ДополнительнаяИнформация - см. СП ОбработкаПолученияФормы
//	СтандартнаяОбработка - Булево
//
Процедура ОбработкаПолученияФормыВыбора(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ПроверитьСтандартныеПараметрыОтбора(Параметры);
	Если  ВидФормы = "ФормаВыбора" ИЛИ ВидФормы = "ФормаВыбораГруппы" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСписка";
		Параметры.Вставить("РежимВыбора", Истина);
		Параметры.Вставить("ВыборГруппы", ВидФормы = "ФормаВыбораГруппы");
	КонецЕсли;
	
	Если Не Параметры.Свойство("РасширенныйВыбор") Или Параметры.РасширенныйВыбор.Свойство("Разрешить") И Не Параметры.РасширенныйВыбор.Разрешить Тогда
		// Для этого поля ввода расширенный выбор не предусмотрен или запрещен
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяФорма = "ОбщаяФорма.ВыборОбъектаУчета";
	
КонецПроцедуры

// Обновляет ключи статьи для указанного элемента справочника
//
//Параметры:
//	Ссылка	- СправочникСсылка
//
Процедура ОбновитьКлючСтатьиСправочника(Источник) Экспорт
	
	// Определяем значения для записи в РС КлючиСтатей
	ЗначенияКлюча1     = Новый Структура("РодительскаяСтатья,ТипСтатьи,РодительскаяСтатьяВБюджете,ИсключатьИзБюджета",
			Неопределено, "", Неопределено, Ложь);
	ЗначенияКлюча2     = Неопределено;
	ТипИсточника       = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("СправочникОбъект.Долги") Тогда
				
		Если Источник.ИспользоватьДляУчетаВзятыхДолгов И Источник.ИспользоватьДляУчетаВыданныхДолгов Тогда
			
			ЗначенияКлюча1.ТипСтатьи = "ДолгНам";
			ЗначенияКлюча2  = Новый Структура("РодительскаяСтатья,ТипСтатьи,РодительскаяСтатьяВБюджете,ИсключатьИзБюджета");
			ЗаполнитьЗначенияСвойств(ЗначенияКлюча2, ЗначенияКлюча1, , "ТипСтатьи");
			ЗначенияКлюча2.ТипСтатьи = "НашДолг";
			
		ИначеЕсли Источник.ИспользоватьДляУчетаВзятыхДолгов Тогда

			ЗначенияКлюча1.ТипСтатьи = "НашДолг";
			
		ИначеЕсли Источник.ИспользоватьДляУчетаВыданныхДолгов Тогда

			ЗначенияКлюча1.ТипСтатьи = "ДолгНам";
			
		Иначе
			
			ЗначенияКлюча1.ТипСтатьи = "Долг";
			ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.КошелькиИСчета") Тогда
		
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		Если Источник.ЭтоГруппа Или (Источник.ТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная) Тогда
			ЗначенияКлюча1.ТипСтатьи = "Кошелек";
			ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
		Иначе
			ЗначенияКлюча1.ТипСтатьи = "КредитнаяКарта";
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Имущество") Тогда
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		ЗначенияКлюча1.ТипСтатьи = "Имущество";
		ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.СтатьиДоходов") Или ТипИсточника = Тип("СправочникОбъект.СтатьиРасходов") Тогда
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		ЗначенияКлюча1.ТипСтатьи = ?(ТипИсточника = Тип("СправочникОбъект.СтатьиДоходов"), "СтатьяДоходов", "СтатьяРасходов");
		ЗначенияКлюча1.РодительскаяСтатьяВБюджете = ?(ЗначениеЗаполнено(ЗначенияКлюча1.РодительскаяСтатья), ЗначенияКлюча1.РодительскаяСтатья, Неопределено);
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ФинансовыеЦели") Тогда
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.ТипСтатьи = "Финцель";
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Контакты") Тогда
		
		// Заполняем ключи статей бюджета
		ЗначенияКлюча1.РодительскаяСтатья = Источник.Родитель;
		ЗначенияКлюча1.ТипСтатьи = "Контакт";
		ЗначенияКлюча1.ИсключатьИзБюджета = Истина;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Обновляем ключи бюджетных статей
	ИзменитьКлючСтатьиБюджетаПоОбъекту(Источник, ЗначенияКлюча1, ЗначенияКлюча2);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Очищает ссылку в записях регистра сведений КлючиСтатей
Процедура УдалитьСсылкуИзКлючейСтатейБюджета(Ссылка, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиСтатей.СтатьяБюджета,
	|	КлючиСтатей.ТипСтатьи
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	(КлючиСтатей.СтатьяБюджета = &Ссылка
	|			ИЛИ КлючиСтатей.РодительскаяСтатья = &Ссылка
	|			ИЛИ КлючиСтатей.РодительскаяСтатьяВБюджете = &Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.КлючиСтатей.СоздатьМенеджерЗаписи();
		Запись.СтатьяБюджета = Выборка.СтатьяБюджета;
		Запись.ТипСтатьи     = Выборка.ТипСтатьи;
		Если Запись.СтатьяБюджета = Ссылка Тогда
			Запись.Удалить();
		Иначе
			Запись.Прочитать();
			Если Запись.РодительскаяСтатья = Ссылка Тогда
				Запись.РодительскаяСтатья = Неопределено;
			КонецЕсли;
			Если Запись.РодительскаяСтатьяВБюджете = Ссылка Тогда
				Запись.РодительскаяСтатьяВБюджете = Неопределено;
			КонецЕсли;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьИспользованиеФинансовыхЦелей(Ссылка, Отказ)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставСтатейБюджета.*
	|ИЗ
	|	РегистрСведений.СоставСтатейБюджета КАК СоставСтатейБюджета
	|ГДЕ
	|	СоставСтатейБюджета.РодительскаяСтатья = &Ссылка
	|";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Очищаем ссылки на финансовую цель в составе статей бюджета
	Выборка = ПакетРезультатов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаписьРегистра = РегистрыСведений.СоставСтатейБюджета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
		ЗаписьРегистра.РодительскаяСтатья = Неопределено;
		ЗаписьРегистра.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВЗапросТекстПоИсточнику(Запрос, ИДИсточника, Источник, ОтборИсточника, ТекстОбщегоОтбора, ВыборГруппИЭлементов, КоличествоЭлементов, КомандыСоздания, РазрешитьБыстроеСоздание, СтрокаПоиска, МассивСловПоиска)
	
	#Если Не ВнешнееСоединение Тогда
	
	МетаданныеСправочника = Метаданные.Справочники[Источник]; 
	ИмяВида = МетаданныеСправочника.ПредставлениеОбъекта;
	Если Не ЗначениеЗаполнено(ИмяВида) Тогда
		ИмяВида = МетаданныеСправочника.Синоним;
	КонецЕсли;
	
	ТекстОтбораПоСловам = "";
	Счетчик = 0;
	Для каждого Слово Из МассивСловПоиска Цикл
		Счетчик = Счетчик + 1;
		СчетчикСтрокой = Формат(Счетчик, "ЧДЦ=; ЧГ=");
		ТекстОтбораПоСловам = ТекстОтбораПоСловам + ?(ТекстОтбораПоСловам = "", "		  ", Символы.ПС + "		И ")
					+ "Спр.Наименование ПОДОБНО &СтрокаПоиска" + СчетчикСтрокой;
	КонецЦикла;
	
	ОтборПоГруппам = "";
	ЕстьГруппы = МетаданныеСправочника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	Если МетаданныеСправочника.Иерархический И ЕстьГруппы Тогда
		Если ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			ОтборПоГруппам = ?(ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы, "		Спр.ЭтоГруппа", "		НЕ Спр.ЭтоГруппа");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ " + КоличествоЭлементов + " 
	|	" + ИДИсточника + " КАК Порядок1,
	|	ВЫБОР КОГДА Спр.Наименование ПОДОБНО &СтрокаПоискаСНачала1 ТОГДА 1 ИНАЧЕ 2 КОНЕЦ КАК Порядок2,
	|	""" + ИмяВида + """ КАК Вид,
	|	""" + Источник + """ КАК ИмяИсточника,
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.Наименование КАК Наименование,
	|	Спр.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник." + Источник + " КАК Спр
	|ГДЕ
	|	" + ТекстОтбораПоСловам + "
	|	" + ?(ОтборПоГруппам = "", "", " И " + ОтборПоГруппам) + "
	|	" + ?(Не ЗначениеЗаполнено(ОтборИсточника), "", " И " + ОтборИсточника) + "
	|	" + ?(Не ЗначениеЗаполнено(ТекстОбщегоОтбора), "", " И " + ТекстОбщегоОтбора) + "
	|";
	
	Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	
	ШрифтКоманды    = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , Истина);
	ШрифтПодСтроки  = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	ЦветПодстроки   = Новый Цвет(0, 175, 0);
	
	// Склонение синонима для подстановки в команду создания
	СинонимГруппы = "";
	ДопустимоБыстроеСоздание = Истина;
	Если Источник = "СтатьиДоходов" Тогда
		
		СинонимОбъекта = "статью дохода";
		
	ИначеЕсли Источник = "СтатьиРасходов" Тогда
		
		СинонимОбъекта = "статью расхода";
		
	ИначеЕсли Источник = "ФинансовыеЦели" Тогда
		
		СинонимОбъекта = "финансовую цель";
		ДопустимоБыстроеСоздание = Ложь;
		
	ИначеЕсли Источник = "КошелькиИСчета" Тогда
		
		ДопустимоБыстроеСоздание = ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимОбъекта = "кошелек";
		КонецЕсли;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимГруппы = "группу кошельков";
		КонецЕсли;
		
	ИначеЕсли Источник = "Имущество" Тогда
		
		ДопустимоБыстроеСоздание = ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимОбъекта = "имущество";
		КонецЕсли;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимГруппы = "группу имущества";
		КонецЕсли;
		
	ИначеЕсли Источник = "Контакты" Тогда
		
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимОбъекта = "контакт";
		КонецЕсли;
		Если ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
			СинонимГруппы = "группу контактов";
		КонецЕсли;
		
	Иначе
		
		ДопустимоБыстроеСоздание = Ложь;
		СинонимОбъекта = ИмяВида;
		СинонимГруппы = "группу " + ИмяВида;
		
	КонецЕсли;
	
	Если ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Группы Тогда
		
		ПредставлениеКоманды = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(НСтр("ru='Создать'") + " " +СинонимОбъекта + " """, ШрифтКоманды),
					Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
					Новый ФорматированнаяСтрока("""...", ШрифтКоманды)
					); 
		КомандыСоздания.Добавить("СоздатьОбъект." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Если РазрешитьБыстроеСоздание И ДопустимоБыстроеСоздание Тогда
			ПредставлениеКоманды = Новый ФорматированнаяСтрока(
						Новый ФорматированнаяСтрока(НСтр("ru='Быстро создать'") + " " +СинонимОбъекта + " """, ШрифтКоманды),
						Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
						Новый ФорматированнаяСтрока(""" (" + НСтр("ru='без открытия формы'") + ")" , ШрифтКоманды)
						); 
			КомандыСоздания.Добавить("БыстроСоздатьОбъект." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.БыстроСоздатьЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьГруппы И 
			(ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Или ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы) Тогда
		
		ПредставлениеКоманды = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(НСтр("ru='Создать'") + " " +СинонимГруппы + " """, ШрифтКоманды),
					Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
					Новый ФорматированнаяСтрока("""...", ШрифтКоманды)
					); 
		КомандыСоздания.Добавить("СоздатьГруппу." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.СоздатьЭлементСписка);
		
		Если РазрешитьБыстроеСоздание И ДопустимоБыстроеСоздание Тогда
			ПредставлениеКоманды = Новый ФорматированнаяСтрока(
						Новый ФорматированнаяСтрока(НСтр("ru='Быстро создать'") + " " +СинонимГруппы + " """, ШрифтКоманды),
						Новый ФорматированнаяСтрока(СтрокаПоиска, ШрифтПодСтроки, ЦветПодстроки),
						Новый ФорматированнаяСтрока(""" (" + НСтр("ru='без открытия формы'") + ")" , ШрифтКоманды)
						); 
			КомандыСоздания.Добавить("БыстроСоздатьГруппу." + Источник, ПредставлениеКоманды, , БиблиотекаКартинок.БыстроСоздатьЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

Процедура ИзменитьКлючиСтатейБюджета(Ссылка, НовыйРодитель, ТипСтатьи, ТекущийКлюч) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовыйРодитель", НовыйРодитель);
	Запрос.УстановитьПараметр("ТекущийКлюч", ТекущийКлюч);
	МассивТиповСтатей = Новый Массив;
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		МассивТиповСтатей.Добавить("Кошелек");
		МассивТиповСтатей.Добавить("КредитнаяКарта");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Долги") Тогда
		МассивТиповСтатей.Добавить("Долг");
		МассивТиповСтатей.Добавить("ДолгНам");
		МассивТиповСтатей.Добавить("НашДолг");
	Иначе
		МассивТиповСтатей.Добавить(ТипСтатьи);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипыСтатей", МассивТиповСтатей);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Код"" КАК Показатель,
	|	МАКСИМУМ(ЕСТЬNULL(КлючиСтатей.Код, 0)) КАК Код,
	|	"""" КАК КлючРодителя
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.РодительскаяСтатья = &НовыйРодитель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Ключ"",
	|	0,
	|	КлючиСтатей.Ключ
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.СтатьяБюджета = &НовыйРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиСтатей.СтатьяБюджета,
	|	КлючиСтатей.РодительскаяСтатья,
	|	КлючиСтатей.ТипСтатьи,
	|	КлючиСтатей.Код,
	|	КлючиСтатей.Ключ КАК Ключ,
	|	КлючиСтатей.РодительскаяСтатьяВБюджете,
	|	КлючиСтатей.ИсключатьИзБюджета
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.Ключ МЕЖДУ &ТекущийКлюч И &ТекущийКлюч + ""яяя""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ключ";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	//Получаем реквизиты нового родителя статьи
	КлючРодителя    = "";
	НовыйКод        = 1;
	ВыборкаРодителя = ПакетРезультатов[0].Выбрать();
	Пока ВыборкаРодителя.Следующий() Цикл
		Если ВыборкаРодителя.Показатель = "Код" Тогда
			НовыйКод = ?(ЗначениеЗаполнено(ВыборкаРодителя.Код), ВыборкаРодителя.Код + 1, 1);
		Иначе
			КлючРодителя = ?(ЗначениеЗаполнено(ВыборкаРодителя.КлючРодителя), ВыборкаРодителя.КлючРодителя, "");
		КонецЕсли;
	КонецЦикла;
	
	НовыйКлюч          = КлючРодителя + Формат(НовыйКод, "ЧДЦ=; ЧГ=") + ".";
	ДлинаТекущегоКлюча = СтрДлина(ТекущийКлюч);

	// Изменяем ключи статей
	Выборка = ПакетРезультатов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.КлючиСтатей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Ключ = НовыйКлюч + Сред(Запись.Ключ, ДлинаТекущегоКлюча + 1);
		Если Запись.СтатьяБюджета = Ссылка Тогда
			Запись.РодительскаяСтатья = НовыйРодитель;
			Запись.Код                = НовыйКод;
		КонецЕсли;
		
		Запись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеКодИКлючСтатьиВТаблицеКлючей(ТипСтатьи, РодительскаяСтатья) 

	Результат = Новый Структура("Код, Ключ", 1, "");
	
	Запрос      = Новый Запрос;
	ТипыСтатей  = Новый Массив;
	Если ТипСтатьи = "Кошелек" Или ТипСтатьи = "КредитнаяКарта" Тогда
		ТипыСтатей.Добавить("Кошелек");
		ТипыСтатей.Добавить("КредитнаяКарта");
	ИначеЕсли ТипСтатьи = "ДолгНам" Или ТипСтатьи = "НашДолг" Тогда
		ТипыСтатей.Добавить("ДолгНам");
		ТипыСтатей.Добавить("НашДолг");
	Иначе
		ТипыСтатей.Добавить(ТипСтатьи);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТипыСтатей", ТипыСтатей);
	Запрос.УстановитьПараметр("РодительскаяСтатья", РодительскаяСтатья);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Код"" КАК Показатель,
	|	МАКСИМУМ(ЕСТЬNULL(КлючиСтатей.Код, 0)) КАК Код,
	|	"""" КАК КлючРодителя,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КлючиСтатей.СтатьяБюджета) КАК КоличествоСтатей
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.РодительскаяСтатья = &РодительскаяСтатья
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	""Ключ"",
	|	0,
	|	КлючиСтатей.Ключ,
	|	0
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.ТипСтатьи В(&ТипыСтатей)
	|	И КлючиСтатей.СтатьяБюджета = &РодительскаяСтатья";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Показатель = "Код" Тогда
			Результат.Код = ?(ЗначениеЗаполнено(Выборка.Код), Выборка.Код + 1, ?(ЗначениеЗаполнено(Выборка.КоличествоСтатей), Выборка.КоличествоСтатей + 1, 1));
		Иначе
			Результат.Ключ = ?(ЗначениеЗаполнено(Выборка.КлючРодителя), Выборка.КлючРодителя, "");
		КонецЕсли;
	КонецЦикла;
	
	Результат.Ключ =  Результат.Ключ + Формат(Результат.Код, "ЧДЦ=; ЧГ=") + ".";
	
	Возврат Результат;

КонецФункции

Функция ЗаписьКлючаСтатьиИзменена(Запись, ЗначенияКлюча) 

	Если Запись.РодительскаяСтатья <> ЗначенияКлюча.РодительскаяСтатья
		ИЛИ Запись.ТипСтатьи <> ЗначенияКлюча.ТипСтатьи
		ИЛИ Запись.РодительскаяСтатьяВБюджете <> ЗначенияКлюча.РодительскаяСтатьяВБюджете
		ИЛИ Запись.ИсключатьИзБюджета <> ЗначенияКлюча.ИсключатьИзБюджета
		Тогда
		
		ЗаполнитьЗначенияСвойств(Запись, ЗначенияКлюча);
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Проверяет и удаляет ссылку справочника из: 
//	справочника ВариантыБюджета - только если ВариантБюджета помечен на удаление;
//	регистра накопления "ПлановыеПоказателиБюджета" - только если ВариантыБюджета, по которым рассчинаты плановые показатели, помечены на удаление
Процедура УдалитьСсылкуИзЗначенийСубконто(Ссылка, Отказ)

	// Устарела, будет заменена в следующих версиях
	Возврат;
	
КонецПроцедуры

Процедура ИзменитьКлючСтатьиБюджетаПоОбъекту(Источник, ЗначенияКлюча1, ЗначенияКлюча2) 
	
	ТипИсточника       = ТипЗнч(Источник);
	
	// Получаем текущий набор ключей
	НаборЗаписей = РегистрыСведений.КлючиСтатей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБюджета.Установить(Источник.Ссылка);
	НаборЗаписей.Прочитать();
	
	ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(НаборЗаписей, Источник);
	
	ПроверятьИерархию  = Источник.Метаданные().Иерархический;
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Если ПроверятьИерархию Тогда
			ТекущийРодитель = НаборЗаписей[0].РодительскаяСтатья;
			Если ТекущийРодитель <> Источник.Родитель Тогда
				// нужно изменить ключи сохраняемого элемента справочника и подчиненных элементов
				ИзменитьКлючиСтатейБюджета(Источник.Ссылка, Источник.Родитель, ЗначенияКлюча1.ТипСтатьи, НаборЗаписей[0].Ключ);
				НаборЗаписей.Прочитать();
			КонецЕсли;
		КонецЕсли;
		
		//Проверяем необходимость обновления записи о бюджетной статье
		Если ТипИсточника = Тип("СправочникОбъект.Долги") Тогда
			
			// Для каждого долга в таблице ключей может быть до двух записей, в зависимости от типа долга
			Код  = НаборЗаписей[0].Код;
			Ключ = НаборЗаписей[0].Ключ;
			
			НаборЗаписей.Очистить();
			
			Запись1 = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись1, ЗначенияКлюча1);
			Запись1.СтатьяБюджета = Источник.Ссылка;
			Запись1.Код           = Код;
			Запись1.Ключ          = Ключ;
			
			Если ЗначенияКлюча2 <> Неопределено Тогда
				Запись2 = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись2, ЗначенияКлюча2);
				Запись2.СтатьяБюджета = Источник.Ссылка;
				Запись2.Код           = Код;
				Запись2.Ключ          = Ключ;
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
		Иначе
			
			Если ЗаписьКлючаСтатьиИзменена(НаборЗаписей[0], ЗначенияКлюча1) Тогда
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		КодИКлюч = НовыеКодИКлючСтатьиВТаблицеКлючей(ЗначенияКлюча1.ТипСтатьи, ЗначенияКлюча1.РодительскаяСтатья);
		Запись1 = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись1, ЗначенияКлюча1);
		Запись1.СтатьяБюджета = Источник.Ссылка;
		Запись1.Код           = КодИКлюч.Код;
		Запись1.Ключ          = КодИКлюч.Ключ;
		
		Если ЗначенияКлюча2 <> Неопределено Тогда
			Запись2 = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись2, ЗначенияКлюча2);
			Запись2.СтатьяБюджета = Источник.Ссылка;
			Запись2.Код           = КодИКлюч.Код;
			Запись2.Ключ          = КодИКлюч.Ключ;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет активность и пометку родителей и потомков
Процедура ПроверитьОтметкуИАктивностьВИерархии(Источник, Отказ, ИзмененныеЭлементы) 
	
	ПрежниеЗначения = Источник.ДополнительныеСвойства.ПрежниеЗначения;
	АктуализироватьИерархию = Источник.Метаданные().Иерархический И
		(Не ПрежниеЗначения.ЕстьОбработанныеРеквизиты Или Источник.Родитель <> ПрежниеЗначения.Родитель
		Или Источник.Активность <> ПрежниеЗначения.Активность Или Источник.ПометкаУдаления <> ПрежниеЗначения.ПометкаУдаления);
	Если Не АктуализироватьИерархию Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлятьПредков  = ЗначениеЗаполнено(Источник.Родитель) И (Источник.Активность Или Не Источник.ПометкаУдаления);
	// Родитель не может быть неактивным, если активен хотя бы один его потомок 
	// Родитель не может быть помеченным на удаление, если хотя бы один его потомок не имеет такой пометки
	
	ДопускаютсяПотомки = Источник.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов И Источник.ЭтоГруппа 
			Или Источник.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов;
	ОбновлятьПотомков = ДопускаютсяПотомки И ЗначениеЗаполнено(Источник.Ссылка) И (Источник.Активность <> ПрежниеЗначения.Активность 
			Или Источник.ПометкаУдаления <> ПрежниеЗначения.ПометкаУдаления);
	// Новые значения активности и пометки присваиваются всем подчиненным элементам
	
	Если Не ОбновлятьПредков И Не ОбновлятьПотомков Тогда
		Возврат;
	КонецЕсли;
	
	ИзмениласьАктивность = Источник.Активность <> ПрежниеЗначения.Активность;
	ИзмениласьПометка    = Источник.ПометкаУдаления <> ПрежниеЗначения.ПометкаУдаления;
	
	ТипыСтатей = РегистрыСведений.КлючиСтатей.ТипыСтатейПоТипуСправочника(ТипЗнч(Источник.Ссылка));
	Если ТипыСтатей = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Неизвестный тип статьи для обновления отметок справочника ""%1""'"), Источник.Ссылка);
	КонецЕсли;
	
	Если ОбновлятьПредков Тогда
		
		Ключ = РегистрыСведений.КлючиСтатей.КлючСтатьиБюджета(Источник.Родитель);
		Если Ключ = Неопределено Тогда
			Отказ = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось согласовать отметки в иерархическом справочнике %1: не найден ключ статьи для элемента ""%2""'"),
						Источник.Метаданные().Синоним, СокрЛП(Источник.Родитель)); 
			ЗаписьЖурналаРегистрации(?(Источник.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
					Источник.Метаданные(), Источник.Ссылка, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Выборка = ВыборкаРодителейЭлементаПоКлючу(Ключ, ТипыСтатей);
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Активность И Не Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
			Если ОбъектСправочника.ПометкаУдаления И Не Источник.ПометкаУдаления Тогда
				ОбъектСправочника.ПометкаУдаления = Ложь;
			КонецЕсли;
			Если Не ОбъектСправочника.Активность И Источник.Активность Тогда
				ОбъектСправочника.Активность = Истина;
			КонецЕсли;
			
			СкопироватьДополнительныеСвойстваОбъекта(Источник, ОбъектСправочника);
			ОбъектСправочника.ДополнительныеСвойства.Вставить("НеПроверятьСостояние");
			Попытка
				ЗаписатьОбъектСПроверкойРегистрацииИзменений(ОбъектСправочника);
			Исключение
				Отказ = Истина;
				ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось согласовать отметки в иерархическом справочнике %1: объект ""%2"" заблокирован или заполнен неправильно'"),
							Источник.Метаданные().Имя, СокрЛП(ОбъектСправочника.Ссылка)); 
				ЗаписьЖурналаРегистрации(?(Источник.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
						Источник.Метаданные(), Источник.Ссылка, ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецПопытки; 
			
			ИзмененныеЭлементы.Вставить(Выборка.Ссылка, РегистрыСведений.ОбработанныеЗначенияСправочников.НоваяСтруктураОбработанныхЗначений(ОбъектСправочника));
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если ОбновлятьПотомков Тогда
		
		Ключ = РегистрыСведений.КлючиСтатей.КлючСтатьиБюджета(Источник.Ссылка);
		Если Ключ = Неопределено Тогда
			Отказ = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось согласовать отметки в иерархическом справочнике %1: не найден ключ статьи для элемента ""%2""'"),
						Источник.Метаданные().Имя, СокрЛП(Источник.Ссылка)); 
			ЗаписьЖурналаРегистрации(?(Источник.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
					Источник.Метаданные(), Источник.Ссылка, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Выборка = ВыборкаПотомковЭлементаПоКлючу(Ключ, ТипыСтатей);
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Ссылка = Источник.Ссылка 
				Или Выборка.Активность = Источник.Активность И Выборка.ПометкаУдаления = Источник.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
			Если ИзмениласьПометка И ОбъектСправочника.ПометкаУдаления <> Источник.ПометкаУдаления Тогда
				ОбъектСправочника.ПометкаУдаления = Источник.ПометкаУдаления;
				Если Не ИзмениласьАктивность И ОбъектСправочника.ПометкаУдаления И ОбъектСправочника.Активность Тогда
					ОбъектСправочника.Активность = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ИзмениласьАктивность И ОбъектСправочника.Активность <> Источник.Активность Тогда
				ОбъектСправочника.Активность = Источник.Активность;
				Если Не ИзмениласьПометка И ОбъектСправочника.ПометкаУдаления И ОбъектСправочника.Активность Тогда
					ОбъектСправочника.ПометкаУдаления = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			СкопироватьДополнительныеСвойстваОбъекта(Источник, ОбъектСправочника);
			ОбъектСправочника.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
			Попытка
				ЗаписатьОбъектСПроверкойРегистрацииИзменений(ОбъектСправочника);
			Исключение
				Отказ = Истина;
				ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось согласовать отметки в иерархическом справочнике %1: объект ""%2"" заблокирован или заполнен неправильно'"),
							Источник.Метаданные().Имя, СокрЛП(ОбъектСправочника.Ссылка)); 
				ЗаписьЖурналаРегистрации(?(Источник.Ссылка.Пустая(), "Данные.Добавление", "Данные.Изменение"), УровеньЖурналаРегистрации.Ошибка,
						Источник.Метаданные(), Источник.Ссылка, ТекстОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецПопытки; 
			
			ИзмененныеЭлементы.Вставить(Выборка.Ссылка, РегистрыСведений.ОбработанныеЗначенияСправочников.НоваяСтруктураОбработанныхЗначений(ОбъектСправочника));
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборкаРодителейЭлементаПоКлючу(Ключ, ТипыСтатей) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыСтатей", ТипыСтатей);
	Запрос.УстановитьПараметр("ЗаданныйКлюч", Ключ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиСтатей.СтатьяБюджета КАК Ссылка,
	|	КлючиСтатей.СтатьяБюджета.Наименование КАК Наименование,
	|	КлючиСтатей.СтатьяБюджета.Активность КАК Активность,
	|	КлючиСтатей.СтатьяБюджета.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	&ЗаданныйКлюч МЕЖДУ КлючиСтатей.Ключ И КлючиСтатей.Ключ + ""яяя""
	|	И КлючиСтатей.ТипСтатьи В (&ТипыСтатей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиСтатей.Ключ УБЫВ";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ВыборкаПотомковЭлементаПоКлючу(Ключ, ТипыСтатей) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыСтатей", ТипыСтатей);
	Запрос.УстановитьПараметр("ЗаданныйКлюч", Ключ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиСтатей.СтатьяБюджета КАК Ссылка,
	|	КлючиСтатей.СтатьяБюджета.Наименование КАК Наименование,
	|	КлючиСтатей.СтатьяБюджета.Активность КАК Активность,
	|	КлючиСтатей.СтатьяБюджета.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	РегистрСведений.КлючиСтатей КАК КлючиСтатей
	|ГДЕ
	|	КлючиСтатей.Ключ МЕЖДУ &ЗаданныйКлюч И &ЗаданныйКлюч + ""яяя""
	|	И КлючиСтатей.ТипСтатьи В (&ТипыСтатей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючиСтатей.Ключ";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// При необходимости добавляет/удаляет статью в состве бюджета или раздел бюджета
//Так же проверяется необходимость обновления описаний операци и их перепроведение
//
//Параметры:
//	Источник - СправочникОбъект
//
Процедура ПроверитьАктуальностьОбъектаВБюджетеИОперациях(Источник) 
	
	// Считываются обработанные ранее значения
	Если Не Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		Источник.ДополнительныеСвойства.Вставить("ПрежниеЗначения", РегистрыСведений.ОбработанныеЗначенияСправочников.ТекущиеЗначенияПоСсылке(Источник.Ссылка));
	КонецЕсли;
	ПрежниеЗначения = Источник.ДополнительныеСвойства.ПрежниеЗначения;
	
	ВидИсточника = Источник.Метаданные().Имя;
	ОбновлятьОписанияОпераций = Не ПрежниеЗначения.ЕстьОбработанныеРеквизиты И Источник.Наименование <> ПрежниеЗначения.Наименование;
	ПерепроводитьОперации     = Ложь;
	ДобавлятьСтатьюБюджета    = Не ПрежниеЗначения.ЕстьОбработанныеРеквизиты И Источник.Активность И Не ПрежниеЗначения.Активность;
	УдалятьСтатьюБюджета      = Не Источник.Активность И ПрежниеЗначения.Активность;;
	ДобавлятьРазделБюджета    = ВидИсточника = "ФинансовыеЦели" И Не ПрежниеЗначения.ЕстьОбработанныеРеквизиты И Источник.Активность И Не ПрежниеЗначения.Активность;
	УдалятьРазделБюджета      = ВидИсточника = "ФинансовыеЦели" И Не Источник.Активность И ПрежниеЗначения.Активность;
	
	Если ВидИсточника = "Долги" Тогда
		
		Если ТипЗнч(ПрежниеЗначения.КлючевыеРеквизиты) = Тип("Структура") Тогда
			ПрежнееИспользоватьДляУчетаВзятыхДолгов   = ?(ПрежниеЗначения.КлючевыеРеквизиты.Свойство("ИспользоватьДляУчетаВзятыхДолгов"), ПрежниеЗначения.КлючевыеРеквизиты.ИспользоватьДляУчетаВзятыхДолгов, Ложь);
			ПрежнееИспользоватьДляУчетаВыданныхДолгов = ?(ПрежниеЗначения.КлючевыеРеквизиты.Свойство("ИспользоватьДляУчетаВыданныхДолгов"), ПрежниеЗначения.КлючевыеРеквизиты.ИспользоватьДляУчетаВыданныхДолгов, Ложь);
		Иначе
			ПрежнееИспользоватьДляУчетаВзятыхДолгов   = Ложь;
			ПрежнееИспользоватьДляУчетаВыданныхДолгов = Ложь;
		КонецЕсли;
		ПерепроводитьОперации = Источник.ИспользоватьДляУчетаВзятыхДолгов <> ПрежнееИспользоватьДляУчетаВзятыхДолгов
				ИЛИ Источник.ИспользоватьДляУчетаВыданныхДолгов <> ПрежнееИспользоватьДляУчетаВыданныхДолгов;
		 
	ИначеЕсли ВидИсточника = "КошелькиИСчета" Тогда
		
		Если Не Источник.ЭтоГруппа Тогда
			
			Если ТипЗнч(ПрежниеЗначения.КлючевыеРеквизиты) = Тип("Структура") Тогда
				ПрежнееТипСчета                  = ?(ПрежниеЗначения.КлючевыеРеквизиты.Свойство("ТипСчета"), ПрежниеЗначения.КлючевыеРеквизиты.ТипСчета, Перечисления.ТипыСчетов.Наличность);
				ПрежнееИспользоватьДляНакоплений = ?(ПрежниеЗначения.КлючевыеРеквизиты.Свойство("ИспользоватьДляНакоплений"), ПрежниеЗначения.КлючевыеРеквизиты.ИспользоватьДляНакоплений, Ложь);
			Иначе
				ПрежнееТипСчета                  = Перечисления.ТипыСчетов.Наличность;
				ПрежнееИспользоватьДляНакоплений = Ложь;
			КонецЕсли;
			
			ПерепроводитьОперации = Источник.ИспользоватьДляНакоплений <> ПрежнееИспользоватьДляНакоплений
				ИЛИ Источник.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная
					И ПрежнееТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная 
				ИЛИ ПрежнееТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная 
					И Источник.ТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная;
			
			Если Не ДобавлятьСтатьюБюджета Тогда
				ДобавлятьСтатьюБюджета = Источник.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная 
					И ПрежнееТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная;
			КонецЕсли;
			Если Не УдалятьСтатьюБюджета Тогда
				УдалятьСтатьюБюджета = Источник.ТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная 
					И ПрежнееТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная;
			КонецЕсли;
			
		Иначе
			ОбновлятьОписанияОпераций = Ложь;
			ПерепроводитьОперации     = Ложь;
			ДобавлятьСтатьюБюджета    = Ложь;
			УдалятьСтатьюБюджета      = Ложь;
		КонецЕсли;
		 
	ИначеЕсли ВидИсточника = "Имущество" Или ВидИсточника = "Контакты" Тогда
		
		ДобавлятьСтатьюБюджета    = Ложь;
		УдалятьСтатьюБюджета      = Ложь;
		
	ИначеЕсли ВидИсточника = "СтатьиДоходов" Или ВидИсточника = "СтатьиРасходов" Тогда
		
		Если Не ДобавлятьСтатьюБюджета Тогда
			ДобавлятьСтатьюБюджета = Не ЗначениеЗаполнено(Источник.Родитель) И Не ПрежниеЗначения.ЕстьОбработанныеРеквизиты;
		КонецЕсли;
		
	КонецЕсли;
	
	// добавление или удаление статьи бюджета для текущего и будущих периодов
	Если ДобавлятьСтатьюБюджета Тогда
		БюджетированиеСервер.ДобавитьСтатьюВПоказателиБюджетов(Источник);
	ИначеЕсли УдалятьСтатьюБюджета Тогда
		БюджетированиеСервер.УдалитьСтатьюИзПоказателейБюджетов(Источник);
	КонецЕсли;
	
	// добавление или удаление раздела бюджета для текущего и будущих периодов
	Если ДобавлятьРазделБюджета Тогда
		БюджетированиеСервер.ДобавитьРазделВПоказателиБюджета(Источник);
	ИначеЕсли УдалятьРазделБюджета Тогда 
		БюджетированиеСервер.УдалитьРазделИзПоказателейБюджета(Источник);
	КонецЕсли;
	
	// Перепроведение документов или обновление описания операций
	Если ПерепроводитьОперации Или ОбновлятьОписанияОпераций Тогда
		ПереписатьОперацииПоОбъектуСправочника(Источник, ПерепроводитьОперации);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбновитьОбработанныеЗначения(ИзмененныеЭлементы) 
	
	Для каждого КлючИЗнчение Из ИзмененныеЭлементы Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗнчение.Ключ) Или Не ЗначениеЗаполнено(КлючИЗнчение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ОбработанныеЗначенияСправочников.ОбновитьЗначенияПоСсылке(КлючИЗнчение.Ключ, КлючИЗнчение.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОбъектСПроверкойРегистрацииИзменений(Объект) 
	
	ИсточникИзменений = Неопределено;
	КонтролироватьИзменения = Не Объект.ОбменДанными.Загрузка 
		И Объект.ДополнительныеСвойства.Свойство("ИсточникИзменений", ИсточникИзменений) И ЗначениеЗаполнено(ИсточникИзменений);
	УдалятьРегистрацию = КонтролироватьИзменения И Не ПланыОбмена.ИзменениеЗарегистрировано(ИсточникИзменений, Объект);
	
	Объект.Записать();
	
	Если УдалятьРегистрацию Тогда
		ПланыОбмена.УдалитьРегистрациюИзменений(ИсточникИзменений, Объект);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


#КонецОбласти


