// Конвертация Деньги 2.0 от 07.11.2019 14:34:07
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	// Заполнение параметров конвертации
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ПараметрыОбменаЗагружены", Ложь);
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ИмяПланаОбмена",    КомпонентыОбмена.УзелКорреспондента.Метаданные().Имя);
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ИзмененияКонстант", Новый Структура); // Регистрируем изменения констант для отправки
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ОбменСМобильным",   КомпонентыОбмена.ПараметрыКонвертации.ИмяПланаОбмена = "МобильноеПриложение" 
							Или КомпонентыОбмена.УзелКорреспондента.МобильноеУстройство);
	
	//Заполнение параметров
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ПараметрыОбмена",   Новый Структура); // Для проверки узлов, настройки отборов и т.п.
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ЭтоЦентральнаяБаза", СинхронизацияАвтономныхКопийВызовСервера.ЭтоЦентральнаяБаза());
	
	
	// Сначала всегда получение данных, потом отправка
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		СинхронизацияАвтономныхКопийВызовСервера.ПроверитьДоступностьОбмена (КомпонентыОбмена.УзелКорреспондента, Перечисления.ДействияПриОбмене.ЗагрузкаДанных );	
	
		// 1. Настройки обмена уже записаны в РС. Получаем настройки для их анализа
		ОбновитьПараметрыОбмена(КомпонентыОбмена);
	
		// 2. Проверить/обновить настройки обмена с узлом. При необходимости - подготовить базу к замене данных на полученные
		ПроверитьПараметрыОбменаПередПолучением(КомпонентыОбмена);
		
		// 3. Прочие парамметры для загрузки данных
		КомпонентыОбмена.ПараметрыКонвертации.Вставить("ЗагружаемыеПоказателиПлановыхОпераций", 
				РегистрыНакопления.ОборотыПлановыхОпераций.СоздатьНаборЗаписей().ВыгрузитьКолонки());
		
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
	
		СинхронизацияАвтономныхКопийВызовСервера.ПроверитьДоступностьОбмена (КомпонентыОбмена.УзелКорреспондента, Перечисления.ДействияПриОбмене.ВыгрузкаДанных );	
	
		// 1. Проверить параметры обмена. При необходимости - зарегистрировать изменения объектов для отправки на узел
		//		(при изменении сценария обмена, при изменении условий отбора)
		ОбновитьПараметрыОбмена(КомпонентыОбмена);
		ПроверитьПараметрыОбменаПередОтправкой(КомпонентыОбмена);
		
		// 2. Выгрузить текущие настройки обмена (коды, сценарии, условия обмена)
		ВыгрузитьПараметрыОбмена(КомпонентыОбмена);
	
		// 3. Выгрузить изменения констант
		ЗаполнитьИзмененияКонстант(КомпонентыОбмена);
		ВыгрузитьКонстанты(КомпонентыОбмена);
		
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		// Проверка полной замены данных
		Если КомпонентыОбмена.ПараметрыКонвертации.ОчищатьИнформационнуюБазу 
			И КомпонентыОбмена.ПараметрыКонвертации.Свойство("ОбъектЦБ")
			И КомпонентыОбмена.ПараметрыКонвертации.ОбъектЦБ <> Неопределено Тогда
	
			Попытка
				
				КомпонентыОбмена.ПараметрыКонвертации.ОбъектЦБ.Разблокировать();
				КомпонентыОбмена.ПараметрыКонвертации.Удалить("ОбъектЦБ");
				
			Исключение
				// Обрботка не требуется
			КонецПопытки; 
		КонецЕсли;
		
		// Запись полученных показателей плановых операций
		ЗаписатьПолученныеОборотыПлановыхОпераций(КомпонентыОбмена);
		
	ИначеЕсли КомпонентыОбмена.НаправлениеОбмена = "Отправка" Тогда
	
		// Восстановить регистрацию изменений констант
		ВосстановитьИзмененияКонстант(КомпонентыОбмена);
	
		// Выгрузка остатков на начало периода учета
		ВыгрузитьОстаткиНаначало(КомпонентыОбмена);
		
		
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	//БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	
	// Регистрация загруженных изменений для информирования пользователей
	РегистрыСведений.ИзмененияОбъектовВоВнешнихПрограммах.УдалитьРегистрацииУзла(КомпонентыОбмена.УзелКорреспондента, 
						КомпонентыОбмена.НомерВходящегоСообщения - 1);
	Для каждого СтрокаТаблицы Из КомпонентыОбмена.ЗагруженныеОбъекты Цикл
		РегистрыСведений.ИзмененияОбъектовВоВнешнихПрограммах.ЗарегистрироватьИзменениеОбъекта(СтрокаТаблицы.СсылкаНаОбъект, 
						КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.НомерВходящегоСообщения);
	КонецЦикла;
	Для каждого СтрокаТаблицы Из КомпонентыОбмена.ДокументыДляОтложенногоПроведения Цикл
		РегистрыСведений.ИзмененияОбъектовВоВнешнихПрограммах.ЗарегистрироватьИзменениеОбъекта(СтрокаТаблицы.ДокументСсылка, 
						КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.НомерВходящегоСообщения);
	КонецЦикла;
	
	// Добавление параметров в объекты отложенной записи				
	Для каждого КлючИЗначение Из КомпонентыОбмена.ОбъектыДляОтложеннойЗаписи Цикл
		
		КомпонентыОбмена.ОбъектыДляОтложеннойЗаписи[КлючИЗначение.Ключ].Вставить("ИсточникИзменений", КомпонентыОбмена.УзелКорреспондента);
		//КомпонентыОбмена.ОбъектыДляОтложеннойЗаписи[КлючИЗначение.Ключ].Вставить("НеВосстанавливатьПоследовательность", Истина);
		
	КонецЦикла;
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_ПОД_АрхивДанныхРегОтчетности_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_БезопасноеХранилищеДанных_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВариантыБюджетов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВводИзменениеОстатка_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВидыАналитик_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВыгрузкаРегОтчетов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДатыРасписаний_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Долги_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДопЗначенияВидовАналитик_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДополнительныеРеквизитыИСведения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДопОтчетыИОбработки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Доход_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ЗначенияСвойствОбъектов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ЗначенияСубконтоАналитика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Имущество_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КлючевыеСловаОбъектов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Константы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Контакты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КошелькиИСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КурсыВалют_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_МыВернулиДолг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_МыВзялиВДолг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_МыДалиВДолг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НаборыДопРеквизитовИСведений_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НазначениеДополнительныхОбработок_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НамВернулиДолг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НапоминанияПользователя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НастройкиАналитикиПоСтатьям_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ОбменВалюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ОборотыПлановыхОпераций_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ОперацииШаблонов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПараметрыОбмена_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Перемещение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПоказателиБюджета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПрикрепленныеФайлы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПринадлежностьФайлов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Расписания_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Расход_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_РегламентированныйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СоставСтатейБюджета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_спрРегламентированныеОтчеты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СтатьиДоходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СтатьиРасходов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_УниверсальнаяОперация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_УчетныеЗаписиПочты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ФинансовыеЦели_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РС_ДополнительныеСведения_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_ПОД_АрхивДанныхРегОтчетности_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_БезопасноеХранилищеДанных_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВариантыБюджетов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВводИзменениеОстатка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВидыАналитик_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ВыгрузкаРегОтчетов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДатыРасписаний_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Долги_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДопЗначенияВидовАналитик_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДополнительныеРеквизитыИСведения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДопОтчетыИОбработки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ДопОтчетыИОбработкиГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Доход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ЗначенияСвойствОбъектов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ЗначенияСвойствОбъектовГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ЗначенияСубконтоАналитика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Имущество_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ИмуществоГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КлючевыеСловаОбъектов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Константы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Контакты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КонтактыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КошелькиИСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КошелькиИСчетаГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_КурсыВалют_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_МыВернулиДолг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_МыВзялиВДолг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_МыДалиВДолг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НаборыДопРеквизитовИСведений_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НазначениеДополнительныхОбработок_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НамВернулиДолг_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НапоминанияПользователя_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_НастройкиАналитикиПоСтатьям_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ОбменВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ОборотыПлановыхОпераций_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ОперацииШаблонов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПараметрыОбмена_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Перемещение_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПоказателиБюджета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПрикрепленныеФайлы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ПринадлежностьФайлов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Расписания_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_Расход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_РегистрацииВНалоговомОргане_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_РегламентированныйОтчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СоставСтатейБюджета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_спрРегламентированныеОтчеты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_спрРегламентированныеОтчетыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СтатьиДоходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СтатьиРасходов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_УниверсальнаяОперация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_УчетныеЗаписиПочты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_ПОД_ФинансовыеЦели_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_РС_ДополнительныеСведения_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область ПОД_АрхивДанныхРегОтчетности_Отправка
Процедура ДобавитьПОД_ПОД_АрхивДанныхРегОтчетности_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_АрхивДанныхРегОтчетности_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.АрхивДанныхРегламентированнойОтчетности;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_АрхивДанныхРегОтчетности_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_АрхивДанныхРеглОтчетности_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_АрхивДанныхРегОтчетности_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_БезопасноеХранилищеДанных_Отправка
Процедура ДобавитьПОД_ПОД_БезопасноеХранилищеДанных_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_БезопасноеХранилищеДанных_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.БезопасноеХранилищеДанных;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_БезопасноеХранилищеДанных_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_БезопасноеХранилищеДанных_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_БезопасноеХранилищеДанных_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Валюты_Отправка
Процедура ДобавитьПОД_ПОД_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Валюты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры

Процедура ПОД_ПОД_Валюты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = ЗначениеЗаполнено(ДанныеИБ.Код) Или ЗначениеЗаполнено(ДанныеИБ.Наименование);
	Если Не НужноВыгружать Тогда
		Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
			ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВариантыБюджетов_Отправка
Процедура ДобавитьПОД_ПОД_ВариантыБюджетов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВариантыБюджетов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВариантыБюджетов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВариантыБюджетов");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВводИзменениеОстатка_Отправка
Процедура ДобавитьПОД_ПОД_ВводИзменениеОстатка_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВводИзменениеОстатка_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВводИзменениеОстатка;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ВводИзменениеОстатка_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВводИзменениеОстатка");
КонецПроцедуры

Процедура ПОД_ПОД_ВводИзменениеОстатка_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = ТипЗнч(ДанныеИБ) = Тип("Структура") И ДанныеИБ.Свойство("ЭтоСинхронизацияОстатков") Или  НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВидыАналитик_Отправка
Процедура ДобавитьПОД_ПОД_ВидыАналитик_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВидыАналитик_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ВидыАналитик;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ВидыАналитик_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПВХ_ВидыАналитик");
КонецПроцедуры

Процедура ПОД_ПОД_ВидыАналитик_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВыгрузкаРегОтчетов_Отправка
Процедура ДобавитьПОД_ПОД_ВыгрузкаРегОтчетов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВыгрузкаРегОтчетов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВыгрузкаРегламентированныхОтчетов;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ВыгрузкаРегОтчетов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыгрузкаРегламентированныхОтчетов");
КонецПроцедуры

Процедура ПОД_ПОД_ВыгрузкаРегОтчетов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДатыРасписаний_Отправка
Процедура ДобавитьПОД_ПОД_ДатыРасписаний_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДатыРасписаний_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДатыРасписаний;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ДатыРасписаний_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ДатыРасписаний_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_ДатыРасписаний_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не НужнаПроверкаПериода(КомпонентыОбмена) Или ДанныеИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОтбора = ДанныеИБ.Отбор.ПлановаяДата.Значение;
	НужноВыгружать = Не ЗначениеЗаполнено(ЗначениеОтбора) 
			Или ЗначениеОтбора >= КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций;
	
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Долги_Отправка
Процедура ДобавитьПОД_ПОД_Долги_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Долги_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Долги;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Долги");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДопЗначенияВидовАналитик_Отправка
Процедура ДобавитьПОД_ПОД_ДопЗначенияВидовАналитик_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДопЗначенияВидовАналитик_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДополнительныеЗначенияВидовАналитик;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ДопЗначенияВидовАналитик_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДопЗначенияВидовАналитик");
КонецПроцедуры

Процедура ПОД_ПОД_ДопЗначенияВидовАналитик_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДополнительныеРеквизитыИСведения_Отправка
Процедура ДобавитьПОД_ПОД_ДополнительныеРеквизитыИСведения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДополнительныеРеквизитыИСведения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПВХ_ДополнительныеРеквизитыИСведения");
КонецПроцедуры

Процедура ПОД_ПОД_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДопОтчетыИОбработки_Отправка
Процедура ДобавитьПОД_ПОД_ДопОтчетыИОбработки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДопОтчетыИОбработки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДополнительныеОтчетыИОбработки;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ДопОтчетыИОбработки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДопОтчетыИОбработки");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДопОтчетыИОбработкиГруппа");
КонецПроцедуры

Процедура ПОД_ПОД_ДопОтчетыИОбработки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_ДопОтчетыИОбработки = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ДопОтчетыИОбработкиГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Доход_Отправка
Процедура ДобавитьПОД_ПОД_Доход_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Доход_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Доход;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Доход_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Доход");
КонецПроцедуры

Процедура ПОД_ПОД_Доход_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ЗначенияСвойствОбъектов_Отправка
Процедура ДобавитьПОД_ПОД_ЗначенияСвойствОбъектов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ЗначенияСвойствОбъектов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ЗначенияСвойствОбъектов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСвойствОбъектов");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСвойствОбъектов_Группа");
КонецПроцедуры

Процедура ПОД_ПОД_ЗначенияСвойствОбъектов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_ЗначенияСвойствОбъектов = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ЗначенияСвойствОбъектов_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ЗначенияСвойствОбъектовИерархия_Отправка
Процедура ДобавитьПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ЗначенияСвойствОбъектовИерархия_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектовИерархия;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСвойствОбъектовИерархия");
КонецПроцедуры

Процедура ПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ЗначенияСубконтоАналитика_Отправка
Процедура ДобавитьПОД_ПОД_ЗначенияСубконтоАналитика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ЗначенияСубконтоАналитика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСубконтоАналитика;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ЗначенияСубконтоАналитика_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСубконтоАналитика");
КонецПроцедуры

Процедура ПОД_ПОД_ЗначенияСубконтоАналитика_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Имущество_Отправка
Процедура ДобавитьПОД_ПОД_Имущество_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Имущество_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Имущество;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Имущество_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Имущество");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Имущество_Группа");
КонецПроцедуры

Процедура ПОД_ПОД_Имущество_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Имущество = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_Имущество_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область ПОД_КлючевыеСловаОбъектов_Отправка
Процедура ДобавитьПОД_ПОД_КлючевыеСловаОбъектов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КлючевыеСловаОбъектов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.КлючевыеСловаОбъектов;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_КлючевыеСловаОбъектов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_КлючевыеСловаОбъектов_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_КлючевыеСловаОбъектов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Константы_Отправка
Процедура ДобавитьПОД_ПОД_Константы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Константы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Константы_Отправка");
КонецПроцедуры
#КонецОбласти
#Область ПОД_Контакты_Отправка
Процедура ДобавитьПОД_ПОД_Контакты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Контакты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контакты;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Контакты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контакты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контакты_Группа");
КонецПроцедуры

Процедура ПОД_ПОД_Контакты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контакты = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_Контакты_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область ПОД_КошелькиИСчета_Отправка
Процедура ДобавитьПОД_ПОД_КошелькиИСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КошелькиИСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КошелькиИСчета;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_КошелькиИСчета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КошелькиИСчета");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КошелькиИСчета_Группа");
КонецПроцедуры

Процедура ПОД_ПОД_КошелькиИСчета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_КошелькиИСчета = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КошелькиИСчета_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область ПОД_КурсыВалют_Отправка
Процедура ДобавитьПОД_ПОД_КурсыВалют_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КурсыВалют_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.КурсыВалют;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_КурсыВалют_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_КурсыВалют_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_КурсыВалют_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не НужнаПроверкаПериода(КомпонентыОбмена) Или ДанныеИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОтбора = ДанныеИБ.Отбор.Период.Значение;
	НужноВыгружать = Не ЗначениеЗаполнено(ЗначениеОтбора) 
			Или ЗначениеОтбора >= КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций;
	
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_МыВернулиДолг_Отправка
Процедура ДобавитьПОД_ПОД_МыВернулиДолг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_МыВернулиДолг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.МыВернулиДолг;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_МыВернулиДолг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_МыВернулиДолг");
КонецПроцедуры

Процедура ПОД_ПОД_МыВернулиДолг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_МыВзялиВДолг_Отправка
Процедура ДобавитьПОД_ПОД_МыВзялиВДолг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_МыВзялиВДолг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.МыВзялиВДолг;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_МыВзялиВДолг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_МыВзялиВДолг");
КонецПроцедуры

Процедура ПОД_ПОД_МыВзялиВДолг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_МыДалиВДолг_Отправка
Процедура ДобавитьПОД_ПОД_МыДалиВДолг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_МыДалиВДолг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.МыДалиВДолг;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_МыДалиВДолг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_МыДалиВДолг");
КонецПроцедуры

Процедура ПОД_ПОД_МыДалиВДолг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_НаборыДопРеквизитовИСведений_Отправка
Процедура ДобавитьПОД_ПОД_НаборыДопРеквизитовИСведений_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НаборыДопРеквизитовИСведений_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НаборыДопРеквизитовИСведений_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НаборыДопРеквизитовИСведений");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НаборыДопРеквизитовИСведений_Группа");
КонецПроцедуры

Процедура ПОД_ПОД_НаборыДопРеквизитовИСведений_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_НаборыДопРеквизитовИСведений = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НаборыДопРеквизитовИСведений_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область ПОД_НазначениеДополнительныхОбработок_Отправка
Процедура ДобавитьПОД_ПОД_НазначениеДополнительныхОбработок_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НазначениеДополнительныхОбработок_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.НазначениеДополнительныхОбработок;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НазначениеДополнительныхОбработок_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_НазначениеДополнительныхОбработок_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_НазначениеДополнительныхОбработок_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_НамВернулиДолг_Отправка
Процедура ДобавитьПОД_ПОД_НамВернулиДолг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НамВернулиДолг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.НамВернулиДолг;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НамВернулиДолг_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НамВернулиДолг");
КонецПроцедуры

Процедура ПОД_ПОД_НамВернулиДолг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_НапоминанияПользователя_Отправка
Процедура ДобавитьПОД_ПОД_НапоминанияПользователя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НапоминанияПользователя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.НапоминанияПользователя;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НапоминанияПользователя_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_НапоминанияПользователя_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_НапоминанияПользователя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка
Процедура ДобавитьПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.НастройкиАналитикиВДокументахПоУмолчанию;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_НастройкиАналитикиВДокПоУмолчанию_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_НастройкиАналитикиПоСтатьям_Отправка
Процедура ДобавитьПОД_ПОД_НастройкиАналитикиПоСтатьям_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НастройкиАналитикиПоСтатьям_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.НастройкиАналитикиПоСтатьям;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НастройкиАналитикиПоСтатьям_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_НастройкиАналитикиПоСтатьям_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_НастройкиАналитикиПоСтатьям_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ОбменВалюты_Отправка
Процедура ДобавитьПОД_ПОД_ОбменВалюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ОбменВалюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОбменВалюты;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ОбменВалюты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОбменВалюты");
КонецПроцедуры

Процедура ПОД_ПОД_ОбменВалюты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ОборотыПлановыхОпераций_Отправка
Процедура ДобавитьПОД_ПОД_ОборотыПлановыхОпераций_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ОборотыПлановыхОпераций_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ОборотыПлановыхОпераций_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РН_ОборотыПлановыхОпераций_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_ОборотыПлановыхОпераций_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Если правило вызывается ядром, то ДанныеИБ = Набор записей регистра накоплений.
	//Этот набор расщепляется на отдельные записи по условию, после чего для каждой записи 
	//формируется структура и снова вызывается это же самое ПОД, но уже со структурой в параметре ДанныеИБ
	
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
		// отработка стандартного ПКО для записи
		Возврат;
	КонецЕсли;
	
	// Правило удаляется для использования ручного алгоритма
	ИспользованиеПКО.Удалить("РН_ОборотыПлановыхОпераций_Отправка");
	
	ПравилоОтправки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("ПОД_ОборотыПлановыхОпераций_Отправка", "Имя");
	Если ПравилоОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецРасписания", ДанныеИБ.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("МинимальнаяДата", ?(НужнаПроверкаПериода(КомпонентыОбмена),
							КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций, Неопределено));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|	МАКСИМУМ(ДатыРасписаний.АктуальнаяДата) КАК АктуальнаяДата,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.РазделБюджета, НЕОПРЕДЕЛЕНО) КАК РазделБюджета,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.ТипПоказателя, НЕОПРЕДЕЛЕНО) КАК ТипПоказателя,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.СтатьяБюджета, НЕОПРЕДЕЛЕНО) КАК СтатьяБюджета,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Кошелек, НЕОПРЕДЕЛЕНО) КАК ОткудаКуда,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта,
	|	СУММА(ЕСТЬNULL(ОборотыПлановыхОпераций.Сумма, 0)) КАК Сумма,
	|	МАКСИМУМ(ДатыРасписаний.ПлановаяОперация) КАК ПлановаяОперация,
	|	МАКСИМУМ(ЕСТЬNULL(ОборотыПлановыхОпераций.Комментарий, """")) КАК Комментарий
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОборотыПлановыхОпераций КАК ОборотыПлановыхОпераций
	|		ПО ДатыРасписаний.ВладелецРасписания = ОборотыПлановыхОпераций.Регистратор
	|			И ДатыРасписаний.ПлановаяДата = ОборотыПлановыхОпераций.ПлановаяДата
	|ГДЕ
	|	ДатыРасписаний.ВладелецРасписания = &ВладелецРасписания
	|	И НЕ ОборотыПлановыхОпераций.Кошелек ЕСТЬ NULL
	|	И (&МинимальнаяДата = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДатыРасписаний.ПлановаяДата >= &МинимальнаяДата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыРасписаний.ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата,
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.РазделБюджета, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.ТипПоказателя, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.СтатьяБюджета, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Кошелек, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ОборотыПлановыхОпераций.Валюта, НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлановаяДата
	|ИТОГИ ПО
	|	ПлановаяДата";
	
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Отбор", Новый Структура("ВладелецРасписания,ПлановаяДата", ДанныеИБ.Отбор.Регистратор.Значение, Неопределено));
	СтруктураЗаписи.Вставить("Записи", НоваяТаблицаЗначений("ВладелецРасписания,ПлановаяДата,АктуальнаяДата,РазделБюджета,ГрафаБюджета,СтатьяБюджета,ОткудаКуда,Валюта,Сумма,ПлановаяОперация,Комментарий"));
	
	ВыборкаПлановыхДат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПлановаяДата");
	Пока ВыборкаПлановыхДат.Следующий() Цикл
	
		СтруктураЗаписи.Отбор.ПлановаяДата = ВыборкаПлановыхДат.ПлановаяДата;
		СтруктураЗаписи.Записи.Очистить();
	
		Выборка = ВыборкаПлановыхДат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.ТипПоказателя) Или Не ЗначениеЗаполнено(Выборка.СтатьяБюджета) Тогда
				Продолжить;
			КонецЕсли;
			
			ГрафаБюджета = БюджетированиеСервер.ГрафаБюжетаДляСтатьи(Выборка.СтатьяБюджета, Выборка.ТипПоказателя, Выборка.РазделБюджета);
			Если Не ЗначениеЗаполнено(ГрафаБюджета) Тогда
				Продолжить;
			КонецЕсли;
		
			СтрокаЗаписи = СтруктураЗаписи.Записи.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаписи, Выборка);
			СтрокаЗаписи.ГрафаБюджета = ГрафаБюджета;
			
		КонецЦикла;
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
			СтруктураЗаписи, 
			ПравилоОтправки);
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ОперацииШаблонов_Отправка
Процедура ДобавитьПОД_ПОД_ОперацииШаблонов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ОперацииШаблонов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ОперацииШаблонов;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ОперацииШаблонов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ОперацииШаблонов_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_ОперацииШаблонов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НужнаПроверкаПериода(КомпонентыОбмена) Или ДанныеИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОтбора = ДанныеИБ.Отбор.Операция.Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Или ДанныеИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПлановаяДата = ДанныеИБ[0].ПлановаяДата;
	НужноВыгружать = ПлановаяДата >= КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций
			Или ЗначениеОтбора.Дата >= КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций;
	
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Организации_Отправка
Процедура ДобавитьПОД_ПОД_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Организации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации");
КонецПроцедуры

Процедура ПОД_ПОД_Организации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка
Процедура ДобавитьПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ПараметрыГрафикаПогашенияДолгов;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ПараметрыГрафикаПогашенияДолгов_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПараметрыОбмена_Отправка
Процедура ДобавитьПОД_ПОД_ПараметрыОбмена_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПараметрыОбмена_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПараметрыОбмена_Отправка");
КонецПроцедуры
#КонецОбласти
#Область ПОД_Перемещение_Отправка
Процедура ДобавитьПОД_ПОД_Перемещение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Перемещение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Перемещение;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Перемещение_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Перемещение");
КонецПроцедуры

Процедура ПОД_ПОД_Перемещение_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПоказателиБюджета_Отправка
Процедура ДобавитьПОД_ПОД_ПоказателиБюджета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПоказателиБюджета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ПоказателиБюджета;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПоказателиБюджета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ПоказателиБюджета_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_ПоказателиБюджета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не НужнаПроверкаПериода(КомпонентыОбмена) Или ДанныеИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОтбора = ДанныеИБ.Отбор.НачалоПериода.Значение;
	НужноВыгружать = Не ЗначениеЗаполнено(ЗначениеОтбора) 
			Или ЗначениеОтбора >= КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций;
	
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Пользователи_Отправка
Процедура ДобавитьПОД_ПОД_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Пользователи_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры

Процедура ПОД_ПОД_Пользователи_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Для каждого Правило Из ИспользованиеПКО Цикл
		Правило = Не ДанныеИБ.Служебный;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПравилаЧтенияТабличныхДокументов_Отправка
Процедура ДобавитьПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПравилаЧтенияТабличныхДокументов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПравилаЧтенияТабличныхДокументов;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПравилаЧтенияТабличныхДокументов");
КонецПроцедуры

Процедура ПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПрикрепленныеФайлы_Отправка
Процедура ДобавитьПОД_ПОД_ПрикрепленныеФайлы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПрикрепленныеФайлы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПрикрепленныеФайлы;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПрикрепленныеФайлы_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрикрепленныеФайлы");
КонецПроцедуры

Процедура ПОД_ПОД_ПрикрепленныеФайлы_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Для Каждого ПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ПКО.Ключ] = Не ДанныеИБ.НеСинхронизировать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПринадлежностьФайлов_Отправка
Процедура ДобавитьПОД_ПОД_ПринадлежностьФайлов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПринадлежностьФайлов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ПринадлежностьФайлов;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПринадлежностьФайлов_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ПринадлежностьФайлов_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_ПринадлежностьФайлов_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Файл      = ДанныеИБ.Отбор.ПрикрепленныйФайл.Значение;
	Владелец  = ДанныеИБ.Отбор.ВладелецФайла.Значение;
	Выгружать = ЗначениеЗаполнено(Файл) И ОбщегоНазначения.СсылкаСуществует(Файл)
		И Не Файл.НеСинхронизировать И ЗначениеЗаполнено(Владелец) И ОбщегоНазначения.СсылкаСуществует(Владелец);
	Если Выгружать И ОбщегоНазначения.ЭтоДокумент(Владелец.Метаданные()) Тогда
		Выгружать = НужноВыгружатьДокумент(Владелец, КомпонентыОбмена);
	КонецЕсли;
	
	Для Каждого ПКО Из ИспользованиеПКО Цикл
		ИспользованиеПКО[ПКО.Ключ] = Выгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Расписания_Отправка
Процедура ДобавитьПОД_ПОД_Расписания_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Расписания_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.Расписания;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Расписания_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_Расписания_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_Расписания_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не НужнаПроверкаПериода(КомпонентыОбмена) Или ДанныеИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеОтбора = ДанныеИБ.Отбор.ВладелецРасписания.Значение;
	
	Если Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		Возврат;
	КонецЕсли;
	
	НужноВыгружать = ДанныеИБ[0].НеИспользовать = Ложь 
			Или Не ЗначениеЗаполнено(ДанныеИБ[0].ДатаОкончанияРасписания) 
			Или ДанныеИБ[0].ДатаОкончанияРасписания >= КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций;
	
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Расход_Отправка
Процедура ДобавитьПОД_ПОД_Расход_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Расход_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Расход;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Расход_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Расход");
КонецПроцедуры

Процедура ПОД_ПОД_Расход_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_РегистрацииВНалоговомОргане_Отправка
Процедура ДобавитьПОД_ПОД_РегистрацииВНалоговомОргане_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_РегистрацииВНалоговомОргане_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_РегистрацииВНалоговомОргане_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегистрацииВНалоговомОргане");
КонецПроцедуры

Процедура ПОД_ПОД_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_РегламентированныйОтчет_Отправка
Процедура ДобавитьПОД_ПОД_РегламентированныйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_РегламентированныйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_РегламентированныйОтчет_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РегламентированныйОтчет");
КонецПроцедуры

Процедура ПОД_ПОД_РегламентированныйОтчет_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_СоставСтатейБюджета_Отправка
Процедура ДобавитьПОД_ПОД_СоставСтатейБюджета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СоставСтатейБюджета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СоставСтатейБюджета;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_СоставСтатейБюджета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_СоставСтатейБюджета_Отправка");
КонецПроцедуры

Процедура ПОД_ПОД_СоставСтатейБюджета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область ПОД_спрРегламентированныеОтчеты_Отправка
Процедура ДобавитьПОД_ПОД_спрРегламентированныеОтчеты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_спрРегламентированныеОтчеты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.РегламентированныеОтчеты;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_спрРегламентированныеОтчеты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегламентированныеОтчеты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегламентированныеОтчеты_Группа");
КонецПроцедуры

Процедура ПОД_ПОД_спрРегламентированныеОтчеты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_РегламентированныеОтчеты = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_РегламентированныеОтчеты_Группа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область ПОД_СтатьиДоходов_Отправка
Процедура ДобавитьПОД_ПОД_СтатьиДоходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СтатьиДоходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДоходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры
#КонецОбласти
#Область ПОД_СтатьиРасходов_Отправка
Процедура ДобавитьПОД_ПОД_СтатьиРасходов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СтатьиРасходов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиРасходов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов");
КонецПроцедуры
#КонецОбласти
#Область ПОД_СтраныМира_Отправка
Процедура ДобавитьПОД_ПОД_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_СтраныМира_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ПОД_ПОД_СтраныМира_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО );
КонецПроцедуры
#КонецОбласти
#Область ПОД_УниверсальнаяОперация_Отправка
Процедура ДобавитьПОД_ПОД_УниверсальнаяОперация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_УниверсальнаяОперация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УниверсальнаяОперация;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_УниверсальнаяОперация_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УниверсальнаяОперация");
КонецПроцедуры

Процедура ПОД_ПОД_УниверсальнаяОперация_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	НужноВыгружать = НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена);
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = НужноВыгружать;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_УчетныеЗаписиПочты_Отправка
Процедура ДобавитьПОД_ПОД_УчетныеЗаписиПочты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_УчетныеЗаписиПочты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты;
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_УчетныеЗаписиПочты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_УчетныеЗаписиЭлектроннойПочты");
КонецПроцедуры

Процедура ПОД_ПОД_УчетныеЗаписиПочты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО );
КонецПроцедуры
#КонецОбласти
#Область ПОД_ФинансовыеЦели_Отправка
Процедура ДобавитьПОД_ПОД_ФинансовыеЦели_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ФинансовыеЦели_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФинансовыеЦели;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФинансовыеЦели");
КонецПроцедуры
#КонецОбласти
#Область РС_ДополнительныеСведения_Отправка
Процедура ДобавитьПОД_РС_ДополнительныеСведения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РС_ДополнительныеСведения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДополнительныеСведения;
	ПравилоОбработки.ПриОбработке            = "ПОД_РС_ДополнительныеСведения_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РС_ДополнительныеСведения_Отправка");
КонецПроцедуры

Процедура ПОД_РС_ДополнительныеСведения_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ПроверитьСоставМобильного( ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО ) Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область ПОД_АрхивДанныхРегОтчетности_Получение
Процедура ДобавитьПОД_ПОД_АрхивДанныхРегОтчетности_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_АрхивДанныхРегОтчетности_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.АрхивДанныхРегламентированнойОтчетности";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_АрхивДанныхРегОтчетности_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_АрхивДанныхРегОтчетности_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "АрхивДанныхРегламентированнойОтчетности";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_БезопасноеХранилищеДанных_Получение
Процедура ДобавитьПОД_ПОД_БезопасноеХранилищеДанных_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_БезопасноеХранилищеДанных_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БезопасноеХранилищеДанных";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_БезопасноеХранилищеДанных_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_БезопасноеХранилищеДанных_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "БезопасноеХранилищеДанных";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Валюты_Получение
Процедура ДобавитьПОД_ПОД_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВариантыБюджетов_Получение
Процедура ДобавитьПОД_ПОД_ВариантыБюджетов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВариантыБюджетов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВариантыБюджетов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ВариантыБюджетов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ВариантыБюджетов");
КонецПроцедуры

Процедура ПОД_ПОД_ВариантыБюджетов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = Справочники.ВариантыБюджетов[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВводИзменениеОстатка_Получение
Процедура ДобавитьПОД_ПОД_ВводИзменениеОстатка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВводИзменениеОстатка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВводИзменениеОстатка";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВводИзменениеОстатка");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВидыАналитик_Получение
Процедура ДобавитьПОД_ПОД_ВидыАналитик_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВидыАналитик_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ВидыАналитик";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ВидыАналитик_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПВХ_ВидыАналитик");
КонецПроцедуры

Процедура ПОД_ПОД_ВидыАналитик_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = ПланыВидовХарактеристик.ВидыАналитик[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_ВыгрузкаРегОтчетов_Получение
Процедура ДобавитьПОД_ПОД_ВыгрузкаРегОтчетов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ВыгрузкаРегОтчетов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ВыгрузкаРегламентированныхОтчетов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыгрузкаРегламентированныхОтчетов");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДатыРасписаний_Получение
Процедура ДобавитьПОД_ПОД_ДатыРасписаний_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДатыРасписаний_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДатыРасписаний";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ДатыРасписаний_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_ДатыРасписаний_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "ДатыРасписаний";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Долги_Получение
Процедура ДобавитьПОД_ПОД_Долги_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Долги_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Долги";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Долги");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДопЗначенияВидовАналитик_Получение
Процедура ДобавитьПОД_ПОД_ДопЗначенияВидовАналитик_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДопЗначенияВидовАналитик_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДополнительныеЗначенияВидовАналитик";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДопЗначенияВидовАналитик");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДополнительныеРеквизитыИСведения_Получение
Процедура ДобавитьПОД_ПОД_ДополнительныеРеквизитыИСведения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДополнительныеРеквизитыИСведения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДополнительныеРеквизитыИСведения";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ДополнительныеРеквизитыИСведения_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПВХ_ДополнительныеРеквизитыИСведения");
КонецПроцедуры

Процедура ПОД_ПОД_ДополнительныеРеквизитыИСведения_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДопОтчетыИОбработки_Получение
Процедура ДобавитьПОД_ПОД_ДопОтчетыИОбработки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДопОтчетыИОбработки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДополнительныеОтчетыИОбработки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДопОтчетыИОбработки");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ДопОтчетыИОбработкиГруппа_Получение
Процедура ДобавитьПОД_ПОД_ДопОтчетыИОбработкиГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ДопОтчетыИОбработкиГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДополнительныеОтчетыИОбработкиГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДопОтчетыИОбработкиГруппа");
КонецПроцедуры
#КонецОбласти
#Область ПОД_Доход_Получение
Процедура ДобавитьПОД_ПОД_Доход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Доход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.Доход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Доход");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ЗначенияСвойствОбъектов_Получение
Процедура ДобавитьПОД_ПОД_ЗначенияСвойствОбъектов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ЗначенияСвойствОбъектов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЗначенияСвойствОбъектов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСвойствОбъектов");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ЗначенияСвойствОбъектовГруппа_Получение
Процедура ДобавитьПОД_ПОД_ЗначенияСвойствОбъектовГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ЗначенияСвойствОбъектовГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЗначенияСвойствОбъектовГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСвойствОбъектов_Группа");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ЗначенияСвойствОбъектовИерархия_Получение
Процедура ДобавитьПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ЗначенияСвойствОбъектовИерархия_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЗначенияСвойствОбъектовИерархия";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСвойствОбъектовИерархия");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ЗначенияСубконтоАналитика_Получение
Процедура ДобавитьПОД_ПОД_ЗначенияСубконтоАналитика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ЗначенияСубконтоАналитика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЗначенияСубконтоАналитика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияСубконтоАналитика");
КонецПроцедуры
#КонецОбласти
#Область ПОД_Имущество_Получение
Процедура ДобавитьПОД_ПОД_Имущество_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Имущество_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Имущество";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Имущество");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ИмуществоГруппа_Получение
Процедура ДобавитьПОД_ПОД_ИмуществоГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ИмуществоГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ИмуществоГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Имущество_Группа");
КонецПроцедуры
#КонецОбласти
#Область ПОД_КлючевыеСловаОбъектов_Получение
Процедура ДобавитьПОД_ПОД_КлючевыеСловаОбъектов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КлючевыеСловаОбъектов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КлючевыеСловаОбъектов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_КлючевыеСловаОбъектов_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_КлючевыеСловаОбъектов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "КлючевыеСловаОбъектов";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Константы_Получение
Процедура ДобавитьПОД_ПОД_Константы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Константы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Константы";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Константы_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_Константы_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Для Каждого КлючИЗначение Из ДанныеXDTO Цикл
	
		МенеджерЗначения = Константы[КлючИЗначение.Ключ].СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = ЗначениеРеквизитаСУчетомПКО(ДанныеXDTO[КлючИЗначение.Ключ], КомпонентыОбмена);
		МенеджерЗначения.ОбменДанными.Загрузка    = Истина;
		МенеджерЗначения.ОбменДанными.Отправитель = КомпонентыОбмена.УзелКорреспондента;
		МенеджерЗначения.Записать();
	
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_Контакты_Получение
Процедура ДобавитьПОД_ПОД_Контакты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Контакты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контакты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контакты");
КонецПроцедуры
#КонецОбласти
#Область ПОД_КонтактыГруппа_Получение
Процедура ДобавитьПОД_ПОД_КонтактыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КонтактыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтактыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контакты_Группа");
КонецПроцедуры
#КонецОбласти
#Область ПОД_КошелькиИСчета_Получение
Процедура ДобавитьПОД_ПОД_КошелькиИСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КошелькиИСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КошелькиИСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КошелькиИСчета");
КонецПроцедуры
#КонецОбласти
#Область ПОД_КошелькиИСчетаГруппа_Получение
Процедура ДобавитьПОД_ПОД_КошелькиИСчетаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КошелькиИСчетаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КошелькиИСчетаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КошелькиИСчета_Группа");
КонецПроцедуры
#КонецОбласти
#Область ПОД_КурсыВалют_Получение
Процедура ДобавитьПОД_ПОД_КурсыВалют_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_КурсыВалют_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КурсыВалют";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_КурсыВалют_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_КурсыВалют_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "КурсыВалют";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_МыВернулиДолг_Получение
Процедура ДобавитьПОД_ПОД_МыВернулиДолг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_МыВернулиДолг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.МыВернулиДолг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_МыВернулиДолг");
КонецПроцедуры
#КонецОбласти
#Область ПОД_МыВзялиВДолг_Получение
Процедура ДобавитьПОД_ПОД_МыВзялиВДолг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_МыВзялиВДолг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.МыВзялиВДолг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_МыВзялиВДолг");
КонецПроцедуры
#КонецОбласти
#Область ПОД_МыДалиВДолг_Получение
Процедура ДобавитьПОД_ПОД_МыДалиВДолг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_МыДалиВДолг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.МыДалиВДолг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_МыДалиВДолг");
КонецПроцедуры
#КонецОбласти
#Область ПОД_НаборыДопРеквизитовИСведений_Получение
Процедура ДобавитьПОД_ПОД_НаборыДопРеквизитовИСведений_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НаборыДопРеквизитовИСведений_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НаборыДопРеквизитовИСведений_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НаборыДопРеквизитовИСведений");
КонецПроцедуры

Процедура ПОД_ПОД_НаборыДопРеквизитовИСведений_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДанныеИБ = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента].ПолучитьОбъект();
	Исключение
		Возврат;
	КонецПопытки;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение
Процедура ДобавитьПОД_ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НаборыДополнительныхРеквизитовИСведенийГруппа";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НаборыДопРеквизитовИСведений_Группа");
КонецПроцедуры

Процедура ПОД_ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_НазначениеДополнительныхОбработок_Получение
Процедура ДобавитьПОД_ПОД_НазначениеДополнительныхОбработок_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НазначениеДополнительныхОбработок_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НазначениеДополнительныхОбработок";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НазначениеДополнительныхОбработок_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_НазначениеДополнительныхОбработок_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "НазначениеДополнительныхОбработок";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_НамВернулиДолг_Получение
Процедура ДобавитьПОД_ПОД_НамВернулиДолг_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НамВернулиДолг_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.НамВернулиДолг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_НамВернулиДолг");
КонецПроцедуры
#КонецОбласти
#Область ПОД_НапоминанияПользователя_Получение
Процедура ДобавитьПОД_ПОД_НапоминанияПользователя_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НапоминанияПользователя_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НапоминанияПользователя";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НапоминанияПользователя_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_НапоминанияПользователя_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "НапоминанияПользователя";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение
Процедура ДобавитьПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НастройкиАналитикиВДокументахПоУмолчанию";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "НастройкиАналитикиВДокументахПоУмолчанию";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_НастройкиАналитикиПоСтатьям_Получение
Процедура ДобавитьПОД_ПОД_НастройкиАналитикиПоСтатьям_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_НастройкиАналитикиПоСтатьям_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НастройкиАналитикиПоСтатьям";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_НастройкиАналитикиПоСтатьям_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_НастройкиАналитикиПоСтатьям_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "НастройкиАналитикиПоСтатьям";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_ОбменВалюты_Получение
Процедура ДобавитьПОД_ПОД_ОбменВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ОбменВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОбменВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОбменВалюты");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ОборотыПлановыхОпераций_Получение
Процедура ДобавитьПОД_ПОД_ОборотыПлановыхОпераций_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ОборотыПлановыхОпераций_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПоказателиПлановыхОпераций";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ОборотыПлановыхОпераций_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_ОборотыПлановыхОпераций_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеXDTO.Свойство("Записи") Или Не ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("Регистратор", "ВладелецРасписания");
	СтруктураКолонок.Вставить("Период", "АктуальнаяДата");
	СтруктураКолонок.Вставить("Кошелек", "ОткудаКуда");
	СтруктураКолонок.Вставить("РазделБюджета", "РазделБюджета");
	СтруктураКолонок.Вставить("СтатьяБюджета", "СтатьяБюджета");
	СтруктураКолонок.Вставить("Валюта", "Валюта");
	СтруктураКолонок.Вставить("Сумма", "Сумма");
	СтруктураКолонок.Вставить("ПлановаяДата", "ПлановаяДата");
	СтруктураКолонок.Вставить("Комментарий", "Комментарий");
	
	КолонкиXDTO = ДанныеXDTO.Записи.Колонки;
	ТипПоказателя = Неопределено;
	
	Для Каждого Запись Из ДанныеXDTO.Записи Цикл
	
		ЗначенияПолей = Новый Структура;
		Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
			ЗначенияПолей.Вставить(КлючИЗначение.Ключ);
			Если КолонкиXDTO.Найти(КлючИЗначение.Значение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗначенияПолей[КлючИЗначение.Ключ] = ЗначениеРеквизитаСУчетомПКО(Запись[КлючИЗначение.Значение], КомпонентыОбмена);
		КонецЦикла; 
	
		Если ТипПоказателя = Неопределено И КолонкиXDTO.Найти(КлючИЗначение.Значение) <> Неопределено И ЗначениеЗаполнено(Запись.ГрафаБюджета) Тогда
			ГрафаБюджета = ЗначениеРеквизитаСУчетомПКО(Запись.ГрафаБюджета, КомпонентыОбмена);
			ТипПоказателя = ГрафаБюджета.ТипПоказателя
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ЗначенияПолей.Регистратор)
			Или Не ЗначениеЗаполнено(ЗначенияПолей.Период)
			Или Не ЗначениеЗаполнено(ТипПоказателя) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаписи = КомпонентыОбмена.ПараметрыКонвертации.ЗагружаемыеПоказателиПлановыхОпераций.Добавить();
		Для Каждого КлючИЗначение Из ЗначенияПолей Цикл
			СтрокаЗаписи[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла; 
		СтрокаЗаписи.ТипПоказателя = ТипПоказателя;
	
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПОД_ОперацииШаблонов_Получение
Процедура ДобавитьПОД_ПОД_ОперацииШаблонов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ОперацииШаблонов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ОперацииШаблонов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ОперацииШаблонов_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_ОперацииШаблонов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "ОперацииШаблонов";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Организации_Получение
Процедура ДобавитьПОД_ПОД_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПараметрыГрафикаПогашенияДолгов_Получение
Процедура ДобавитьПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПараметрыГрафикаПогашенияДолгов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПараметрыГрафикаПогашенияДолгов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "ПараметрыГрафикаПогашенияДолгов";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПараметрыОбмена_Получение
Процедура ДобавитьПОД_ПОД_ПараметрыОбмена_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПараметрыОбмена_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "ПараметрыОбмена";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПараметрыОбмена_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_ПараметрыОбмена_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбменаЗагружены = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена = КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбмена;
	
	Для Каждого КлючИЗначение Из ДанныеXDTO Цикл
		Если ПараметрыОбмена.Свойство(КлючИЗначение.Ключ) Тогда
			Если КлючИЗначение.Ключ = "СценарийПереданныхДанных" Или КлючИЗначение.Ключ = "СценарийЗапрашиваемыхДанных" Тогда
				Если КлючИЗначение.Значение = "НастольныеЗаменитьМобильными" Тогда 
					ПараметрыОбмена[КлючИЗначение.Ключ] = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВЦентральнойБазе;
				ИначеЕсли КлючИЗначение.Значение = "МобильныеЗаменитьНастольными" Тогда 
					ПараметрыОбмена[КлючИЗначение.Ключ] = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВАвтономнойКопии;
				Иначе
					ПараметрыОбмена[КлючИЗначение.Ключ] = Перечисления.СценарииСинхронизацииАвтономныхКопий[КлючИЗначение.Значение];
				КонецЕсли;
			ИначеЕсли КлючИЗначение.Ключ = "ВидПериода" Тогда
				ПараметрыОбмена[КлючИЗначение.Ключ] = Перечисления.Периодичность[КлючИЗначение.Значение];
			Иначе
				ПараметрыОбмена[КлючИЗначение.Ключ] = ЗначениеРеквизитаСУчетомПКО(КлючИЗначение.Значение, КомпонентыОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//ПроверитьПараметрыОбменаПередПолучением(КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Перемещение_Получение
Процедура ДобавитьПОД_ПОД_Перемещение_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Перемещение_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.Перемещение";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Перемещение");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПоказателиБюджета_Получение
Процедура ДобавитьПОД_ПОД_ПоказателиБюджета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПоказателиБюджета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПоказателиБюджета";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПоказателиБюджета_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_ПоказателиБюджета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "ПоказателиБюджета";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Пользователи_Получение
Процедура ДобавитьПОД_ПОД_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПравилаЧтенияТабличныхДокументов_Получение
Процедура ДобавитьПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПравилаЧтенияТабличныхДокументов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПравилаЧтенияТабличныхДокументов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПравилаЧтенияТабличныхДокументов");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПрикрепленныеФайлы_Получение
Процедура ДобавитьПОД_ПОД_ПрикрепленныеФайлы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПрикрепленныеФайлы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПрикрепленныеФайлы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ПрикрепленныеФайлы");
КонецПроцедуры
#КонецОбласти
#Область ПОД_ПринадлежностьФайлов_Получение
Процедура ДобавитьПОД_ПОД_ПринадлежностьФайлов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ПринадлежностьФайлов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ПринадлежностьФайлов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ПринадлежностьФайлов_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_ПринадлежностьФайлов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "ПринадлежностьФайлов";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Расписания_Получение
Процедура ДобавитьПОД_ПОД_Расписания_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Расписания_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Расписания";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_Расписания_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_Расписания_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "Расписания";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_Расход_Получение
Процедура ДобавитьПОД_ПОД_Расход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_Расход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.Расход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Расход");
КонецПроцедуры
#КонецОбласти
#Область ПОД_РегистрацииВНалоговомОргане_Получение
Процедура ДобавитьПОД_ПОД_РегистрацииВНалоговомОргане_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_РегистрацииВНалоговомОргане_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегистрацииВНалоговомОргане");
КонецПроцедуры
#КонецОбласти
#Область ПОД_РегламентированныйОтчет_Получение
Процедура ДобавитьПОД_ПОД_РегламентированныйОтчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_РегламентированныйОтчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РегламентированныйОтчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РегламентированныйОтчет");
КонецПроцедуры
#КонецОбласти
#Область ПОД_СоставСтатейБюджета_Получение
Процедура ДобавитьПОД_ПОД_СоставСтатейБюджета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СоставСтатейБюджета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СоставСтатейБюджета";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_СоставСтатейБюджета_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_ПОД_СоставСтатейБюджета_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "СоставСтатейБюджета";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПОД_спрРегламентированныеОтчеты_Получение
Процедура ДобавитьПОД_ПОД_спрРегламентированныеОтчеты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_спрРегламентированныеОтчеты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.РегламентированныеОтчеты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегламентированныеОтчеты");
КонецПроцедуры
#КонецОбласти
#Область ПОД_спрРегламентированныеОтчетыГруппа_Получение
Процедура ДобавитьПОД_ПОД_спрРегламентированныеОтчетыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_спрРегламентированныеОтчетыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.РегламентированныеОтчетыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_РегламентированныеОтчеты_Группа");
КонецПроцедуры
#КонецОбласти
#Область ПОД_СтатьиДоходов_Получение
Процедура ДобавитьПОД_ПОД_СтатьиДоходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СтатьиДоходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиДоходов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_СтатьиДоходов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры

Процедура ПОД_ПОД_СтатьиДоходов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = Справочники.СтатьиДоходов[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_СтатьиРасходов_Получение
Процедура ДобавитьПОД_ПОД_СтатьиРасходов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СтатьиРасходов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_СтатьиРасходов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов");
КонецПроцедуры

Процедура ПОД_ПОД_СтатьиРасходов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = Справочники.СтатьиРасходов[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_СтраныМира_Получение
Процедура ДобавитьПОД_ПОД_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_СтраныМира_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры

Процедура ПОД_ПОД_СтраныМира_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = Справочники.СтраныМира[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_УниверсальнаяОперация_Получение
Процедура ДобавитьПОД_ПОД_УниверсальнаяОперация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_УниверсальнаяОперация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.УниверсальнаяОперация";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УниверсальнаяОперация");
КонецПроцедуры
#КонецОбласти
#Область ПОД_УчетныеЗаписиПочты_Получение
Процедура ДобавитьПОД_ПОД_УчетныеЗаписиПочты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_УчетныеЗаписиПочты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.УчетныеЗаписиЭлектроннойПочты";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_УчетныеЗаписиПочты_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_УчетныеЗаписиЭлектроннойПочты");
КонецПроцедуры

Процедура ПОД_ПОД_УчетныеЗаписиПочты_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = Справочники.УчетныеЗаписиЭлектроннойПочты[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область ПОД_ФинансовыеЦели_Получение
Процедура ДобавитьПОД_ПОД_ФинансовыеЦели_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "ПОД_ФинансовыеЦели_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФинансовыеЦели";
	ПравилоОбработки.ПриОбработке            = "ПОД_ПОД_ФинансовыеЦели_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФинансовыеЦели");
КонецПроцедуры

Процедура ПОД_ПОД_ФинансовыеЦели_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяЭлемента = ИмяПредопределенногоИзXDTO(ДанныеXDTO);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	// Самостоятельная запись предопределенного элемента
	Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
		ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	
	ДанныеИБ = Справочники.ФинансовыеЦели[ИмяЭлемента].ПолучитьОбъект();
	РазрешенныеРеквизиты=Неопределено;
	РазрешенныеТабЧасти=Неопределено;
	РеквизитыСчетов=Неопределено;
	ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты, РазрешенныеТабЧасти, РеквизитыСчетов);
КонецПроцедуры
#КонецОбласти
#Область РС_ДополнительныеСведения_Получение
Процедура ДобавитьПОД_РС_ДополнительныеСведения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "РС_ДополнительныеСведения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ДополнительныеСведения";
	ПравилоОбработки.ПриОбработке            = "ПОД_РС_ДополнительныеСведения_Получение_ПриОбработке";
КонецПроцедуры

Процедура ПОД_РС_ДополнительныеСведения_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИмяРегистра = "ДополнительныеСведения";
	ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Константы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ПараметрыОбмена_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РН_ОборотыПлановыхОпераций_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_АрхивДанныхРеглОтчетности_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_БезопасноеХранилищеДанных_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_ДатыРасписаний_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_ДополнительныеСведения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_КлючевыеСловаОбъектов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_КурсыВалют_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_НазначениеДополнительныхОбработок_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_НапоминанияПользователя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_НастройкиАналитикиВДокПоУмолчанию_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_НастройкиАналитикиПоСтатьям_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_ОперацииШаблонов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_ПараметрыГрафикаПогашенияДолгов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_ПоказателиБюджета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_ПринадлежностьФайлов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_Расписания_Отправка(ПравилаКонвертации);
		ДобавитьПКО_РС_СоставСтатейБюджета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_УниверсальноеЗначение_Отправка(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Документ_ВводИзменениеОстатка(ПравилаКонвертации);
	ДобавитьПКО_Документ_ВыгрузкаРегламентированныхОтчетов(ПравилаКонвертации);
	ДобавитьПКО_Документ_Доход(ПравилаКонвертации);
	ДобавитьПКО_Документ_МыВернулиДолг(ПравилаКонвертации);
	ДобавитьПКО_Документ_МыВзялиВДолг(ПравилаКонвертации);
	ДобавитьПКО_Документ_МыДалиВДолг(ПравилаКонвертации);
	ДобавитьПКО_Документ_НамВернулиДолг(ПравилаКонвертации);
	ДобавитьПКО_Документ_ОбменВалюты(ПравилаКонвертации);
	ДобавитьПКО_Документ_Перемещение(ПравилаКонвертации);
	ДобавитьПКО_Документ_Расход(ПравилаКонвертации);
	ДобавитьПКО_Документ_РегламентированныйОтчет(ПравилаКонвертации);
	ДобавитьПКО_Документ_УниверсальнаяОперация(ПравилаКонвертации);
	ДобавитьПКО_ПВХ_ВидыАналитик(ПравилаКонвертации);
	ДобавитьПКО_ПВХ_ДополнительныеРеквизитыИСведения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВариантыБюджетов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ГрафыБюджета(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Долги(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДопЗначенияВидовАналитик(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДопОтчетыИОбработки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДопОтчетыИОбработкиГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияСвойствОбъектов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияСвойствОбъектов_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияСвойствОбъектовИерархия(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияСубконтоАналитика(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ИдентификаторыОбъектовМетаданных(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Имущество(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Имущество_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Контакты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Контакты_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КошелькиИСчета(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КошелькиИСчета_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НаборыДопРеквизитовИСведений(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НаборыДопРеквизитовИСведений_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Организации(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ПравилаЧтенияТабличныхДокументов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ПрикрепленныеФайлы(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегламентированныеОтчеты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегламентированныеОтчеты_Группа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиРасходов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_УчетныеЗаписиЭлектроннойПочты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФинансовыеЦели(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Константы_Отправка
Процедура ДобавитьПКО_Константы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Константы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Константы";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Константы_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаИндикаторовРабочегоСтола", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ВалютаУчета", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьАльтернативныйСерверДляЗагрузкиКурсовВалют", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьАналитикуСтатей", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьДополнительныеОтчетыИОбработки", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьДополнительныеРеквизитыИСведения", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьНапоминанияПользователя", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьОбщиеДополнительныеЗначения", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьОбщиеДополнительныеРеквизитыИСведения", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьОнлайнПоддержку", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИспользоватьФинансовыеЦели", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИсточникДанныхАдресногоКлассификатора", 1);
	ДобавитьПКС(СвойстваШапки, "", "КоличественноЦеновойУчет", 1);
	ДобавитьПКС(СвойстваШапки, "", "ОсновнойВариантБюджета", 1, "Справочник_ВариантыБюджетов");
	ДобавитьПКС(СвойстваШапки, "", "ОсновнойКошелек", 1, "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "", "ПараметрыПоддержкиПользователейДеньги", 1);
	ДобавитьПКС(СвойстваШапки, "", "ПределПланирования", 1);
	ДобавитьПКС(СвойстваШапки, "", "СвойстваБИП", 1);

КонецПроцедуры

Процедура ПКО_Константы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Для Каждого КлючИЗначение Из ДанныеИБ Цикл
		
		ЗначениеВыгрузки = Неопределено;
		Если ДанныеXDTO.Свойство(КлючИЗначение.Ключ, ЗначениеВыгрузки) И ТипЗнч(ЗначениеВыгрузки) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеXDTO.Вставить(КлючИЗначение.Ключ, ВыгружаемоеЗначениеСПравилом(КлючИЗначение.Значение));
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область ПараметрыОбмена_Отправка
Процедура ДобавитьПКО_ПараметрыОбмена_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "ПараметрыОбмена_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "ПараметрыОбмена";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_ПараметрыОбмена_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВерсияФорматаОбмена", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидПериода", 1);
	ДобавитьПКС(СвойстваШапки, "", "ДатаОтправкиПакета", 1);
	ДобавитьПКС(СвойстваШапки, "", "ДополнительнаяИнформация", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИДОсновнойБазы", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИмяУзла", 1);
	ДобавитьПКС(СвойстваШапки, "", "КодУзла", 1);
	ДобавитьПКС(СвойстваШапки, "", "КодЦентральнойБазы", 1);
	ДобавитьПКС(СвойстваШапки, "", "КоличествоПериодов", 1);
	ДобавитьПКС(СвойстваШапки, "", "МобильноеУстройство", 1);
	ДобавитьПКС(СвойстваШапки, "", "ПользовательБазы", 1);
	ДобавитьПКС(СвойстваШапки, "", "СценарийЗапрашиваемыхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "", "СценарийПереданныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "", "СценарийПолученныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "", "УчитыватьОтборПоКошелькам", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЭтоПервыйОбмен", 1);
	ДобавитьПКС(СвойстваШапки, "", "ЭтоРезервнаяКопия", 1);

КонецПроцедуры

Процедура ПКО_ПараметрыОбмена_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Для Каждого КлючИЗначение Из ДанныеИБ Цикл
		ДанныеXDTO.Вставить(КлючИЗначение.Ключ, ВыгружаемоеЗначениеСПравилом(КлючИЗначение.Значение));
	КонецЦикла;
	//Если КомпонентыОбмена.ПараметрыКонвертации.ЭтоЦентральнаяБаза Тогда
	//	ДанныеXDTO.СценарийПереданныхДанных    = СокрЛП(ДанныеИБ.СценарийЗапрашиваемыхДанных);
	//	ДанныеXDTO.СценарийЗапрашиваемыхДанных = "ОбъединениеДанных";
	//КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область РН_ОборотыПлановыхОпераций_Отправка
Процедура ДобавитьПКО_РН_ОборотыПлановыхОпераций_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РН_ОборотыПлановыхОпераций_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыНакопления.ОборотыПлановыхОпераций;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПоказателиПлановыхОпераций";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РН_ОборотыПлановыхОпераций_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "АктуальнаяДата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ВладелецРасписания", 1);
	ДобавитьПКС(СвойстваШапки, "", "ГрафаБюджета", 1, "Предопр_Спр_ГрафыБюджета");
	ДобавитьПКС(СвойстваШапки, "", "ОткудаКуда", 1);
	ДобавитьПКС(СвойстваШапки, "", "ПлановаяДата", 1);
	ДобавитьПКС(СвойстваШапки, "", "РазделБюджета", 1, "Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваШапки, "", "СтатьяБюджета", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "АктуальнаяДата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВладелецРасписания", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ГрафаБюджета", 1,"Предопр_Спр_ГрафыБюджета");
	ДобавитьПКС(СвойстваТЧ, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОткудаКуда", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПлановаяДата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПлановаяОперация", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РазделБюджета", 1,"Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяБюджета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);

КонецПроцедуры

Процедура ПКО_РН_ОборотыПлановыхОпераций_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Заполнение полей отбора
	Для Каждого КлючИЗначение Из ДанныеИБ.Отбор Цикл
		ДанныеXDTO.Вставить(КлючИЗначение.Ключ, ВыгружаемоеЗначениеСПравилом(КлючИЗначение.Значение));
	КонецЦикла;
	
	Если Не ДанныеИБ.Свойство("Записи") Тогда 
		Возврат;
	КонецЕсли;
	
	// Заполнение табличной части (если есть)
	ДанныеXDTO.Вставить("Записи", ДанныеИБ.Записи.Скопировать());
	Для Каждого Запись Из ДанныеXDTO.Записи Цикл
		// Подбор правил к значениям
		Для каждого Поле Из ДанныеИБ.Записи.Колонки Цикл
			Запись[Поле.Имя] = ВыгружаемоеЗначениеСПравилом(Запись[Поле.Имя]);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область РС_АрхивДанныхРеглОтчетности_Отправка
Процедура ДобавитьПКО_РС_АрхивДанныхРеглОтчетности_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_АрхивДанныхРеглОтчетности_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.АрхивДанныхРегламентированнойОтчетности;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.АрхивДанныхРегламентированнойОтчетности";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_АрхивДанныхРеглОтчетности_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОбъектОтбор", 1, "Документ_ВыгрузкаРегламентированныхОтчетов");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Данные", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Объект", 1,"Документ_ВыгрузкаРегламентированныхОтчетов");
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеДанных", 1);

КонецПроцедуры

Процедура ПКО_РС_АрхивДанныхРеглОтчетности_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений = Новый Структура();
	ИменаИзмерений.Вставить("Объект", "ОбъектОтбор");
	
	ИменаПолейЗаписи = "Объект,Данные,ОписаниеДанных";
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_БезопасноеХранилищеДанных_Отправка
Процедура ДобавитьПКО_РС_БезопасноеХранилищеДанных_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_БезопасноеХранилищеДанных_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.БезопасноеХранилищеДанных;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БезопасноеХранилищеДанных";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_БезопасноеХранилищеДанных_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВладелецОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Владелец", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Данные", 1);

КонецПроцедуры

Процедура ПКО_РС_БезопасноеХранилищеДанных_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений = Новый Структура();
	ИменаИзмерений.Вставить("Владелец", "ВладелецОтбор");
	
	ИменаПолейЗаписи = "Владелец,Данные";
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_ДатыРасписаний_Отправка
Процедура ДобавитьПКО_РС_ДатыРасписаний_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_ДатыРасписаний_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДатыРасписаний;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДатыРасписаний";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_ДатыРасписаний_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВладелецРасписанияОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ПлановаяДатаОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Активность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "АктуальнаяДата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаДохода", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаРасхода", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВладелецРасписания", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Выполнено", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПлановаяДата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПлановаяОперация", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПометкаУдаления", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Пропустить", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДолга", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДохода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаКомиссии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПроцентов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРасхода", 1);

КонецПроцедуры

Процедура ПКО_РС_ДатыРасписаний_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений = Новый Структура();
	ИменаИзмерений.Вставить("ВладелецРасписания", "ВладелецРасписанияОтбор");
	ИменаИзмерений.Вставить("ПлановаяДата", "ПлановаяДатаОтбор");
	
	ИменаПолейЗаписи = СтруктураРегистра(ДанныеИБ.Метаданные());
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_ДополнительныеСведения_Отправка
Процедура ДобавитьПКО_РС_ДополнительныеСведения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_ДополнительныеСведения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ДополнительныеСведения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ДополнительныеСведения";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_ДополнительныеСведения_Отправка_ПриОтправкеДанных";
	
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Объект", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");

КонецПроцедуры

Процедура ПКО_РС_ДополнительныеСведения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("ДополнительныеСведения", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_КлючевыеСловаОбъектов_Отправка
Процедура ДобавитьПКО_РС_КлючевыеСловаОбъектов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_КлючевыеСловаОбъектов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.КлючевыеСловаОбъектов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КлючевыеСловаОбъектов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_КлючевыеСловаОбъектов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ИдентификаторОбъектаОтбор", 1, "Справочник_ИдентификаторыОбъектовМетаданных");
	ДобавитьПКС(СвойстваШапки, "", "КлючевоеСловоОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ОбъектОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ИдентификаторОбъекта", 1,"Справочник_ИдентификаторыОбъектовМетаданных");
	ДобавитьПКС(СвойстваТЧ, "", "КлючевоеСлово", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Объект", 1);

КонецПроцедуры

Процедура ПКО_РС_КлючевыеСловаОбъектов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("КлючевыеСловаОбъектов", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_КурсыВалют_Отправка
Процедура ДобавитьПКО_РС_КурсыВалют_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_КурсыВалют_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.КурсыВалют;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.КурсыВалют";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_КурсыВалют_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "БазоваяВалютаОтбор", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ВалютаОтбор", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ПериодОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "БазоваяВалюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "Кратность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Курс", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Период", 1);

КонецПроцедуры

Процедура ПКО_РС_КурсыВалют_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("КурсыВалют", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_НазначениеДополнительныхОбработок_Отправка
Процедура ДобавитьПКО_РС_НазначениеДополнительныхОбработок_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_НазначениеДополнительныхОбработок_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.НазначениеДополнительныхОбработок;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НазначениеДополнительныхОбработок";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_НазначениеДополнительныхОбработок_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОбъектОтбор", 1, "Справочник_ИдентификаторыОбъектовМетаданных");
	ДобавитьПКС(СвойстваШапки, "", "ТипФормыОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ИспользоватьЗаполнениеОбъекта", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИспользоватьОтчеты", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИспользоватьСозданиеСвязанныхОбъектов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Объект", 1,"Справочник_ИдентификаторыОбъектовМетаданных");
	ДобавитьПКС(СвойстваТЧ, "", "ТипФормы", 1);

КонецПроцедуры

Процедура ПКО_РС_НазначениеДополнительныхОбработок_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений = Новый Структура();
	ИменаИзмерений.Вставить("ОбъектНазначения", "ОбъектНазначенияОтбор");
	ИменаИзмерений.Вставить("ТипФормы", "ТипФормыОтбор");
	
	ИменаПолейЗаписи = "ОбъектНазначения,ТипФормы,ИспользоватьЗаполнениеОбъекта,ИспользоватьОтчеты,ИспользоватьСозданиеСвязанныхОбъектов";
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_НапоминанияПользователя_Отправка
Процедура ДобавитьПКО_РС_НапоминанияПользователя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_НапоминанияПользователя_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.НапоминанияПользователя;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НапоминанияПользователя";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_НапоминанияПользователя_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВремяСобытияОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ИсточникОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ПользовательОтбор", 1, "Справочник_Пользователи");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВремяСобытия", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Идентификатор", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ИмяРеквизитаИсточника", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Источник", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Описание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Пользователь", 1,"Справочник_Пользователи");
	ДобавитьПКС(СвойстваТЧ, "", "ПредставлениеИсточника", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Расписание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособУстановкиВремениНапоминания", 1,"Перечисление.СпособыУстановкиВремениНапоминания");
	ДобавитьПКС(СвойстваТЧ, "", "СрокНапоминания", 1);

КонецПроцедуры

Процедура ПКО_РС_НапоминанияПользователя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений = Новый Структура();
	ИменаИзмерений.Вставить("Пользователь", "ПользовательОтбор");
	ИменаИзмерений.Вставить("ВремяСобытия", "ВремяСобытияОтбор");
	ИменаИзмерений.Вставить("Источник", "ИсточникОтбор");
	
	ИменаПолейЗаписи = СтруктураРегистра(ДанныеИБ.Метаданные());
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_НастройкиАналитикиВДокПоУмолчанию_Отправка
Процедура ДобавитьПКО_РС_НастройкиАналитикиВДокПоУмолчанию_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_НастройкиАналитикиВДокПоУмолчанию_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.НастройкиАналитикиВДокументахПоУмолчанию;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НастройкиАналитикиВДокументахПоУмолчанию";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидАналитикиОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ВидДокументаОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидАналитики", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокумента", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РедактироватьВШапке", 1);

КонецПроцедуры

Процедура ПКО_РС_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("НастройкиАналитикиВДокументахПоУмолчанию", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_НастройкиАналитикиПоСтатьям_Отправка
Процедура ДобавитьПКО_РС_НастройкиАналитикиПоСтатьям_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_НастройкиАналитикиПоСтатьям_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.НастройкиАналитикиПоСтатьям;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.НастройкиАналитикиПоСтатьям";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_НастройкиАналитикиПоСтатьям_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидАналитикиОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "СтатьяОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидАналитики", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеПоУмолчанию", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Использовать", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Статья", 1);

КонецПроцедуры

Процедура ПКО_РС_НастройкиАналитикиПоСтатьям_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("НастройкиАналитикиПоСтатьям", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_ОперацииШаблонов_Отправка
Процедура ДобавитьПКО_РС_ОперацииШаблонов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_ОперацииШаблонов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ОперацииШаблонов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ОперацииШаблонов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_ОперацииШаблонов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ОперацияОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ШаблонОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "Операция", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПлановаяДата", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Шаблон", 1);

КонецПроцедуры

Процедура ПКО_РС_ОперацииШаблонов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("ОперацииШаблонов", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_ПараметрыГрафикаПогашенияДолгов_Отправка
Процедура ДобавитьПКО_РС_ПараметрыГрафикаПогашенияДолгов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_ПараметрыГрафикаПогашенияДолгов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ПараметрыГрафикаПогашенияДолгов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПараметрыГрафикаПогашенияДолгов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ДолгОтбор", 1, "Справочник_Долги");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ДатаВозникновенияДолга", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаЗакрытияДолга", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДеньМесяцаДляРасчетов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДнейВГоду", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Долг", 1,"Справочник_Долги");
	ДобавитьПКС(СвойстваТЧ, "", "КошелекДляПогашения", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "", "НеПересчитыватьПриРедактировании", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПлановаяДатаПогашения", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПроцентнаяСтавка", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СпособПогашения", 1,"Перечисление.СпособыПогашенияКредита");
	ДобавитьПКС(СвойстваТЧ, "", "СрокМесяцев", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяДляУчетаПроцентов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЕдиноразовойКомиссии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяЕжемесячнойКомиссии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДолга", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаЕдиноразовойКомиссии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаЕжемесячнойКомиссии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ФинансоваяЦель", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ШаблонОперации", 1);

КонецПроцедуры

Процедура ПКО_РС_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("ПараметрыГрафикаПогашенияДолгов", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_ПоказателиБюджета_Отправка
Процедура ДобавитьПКО_РС_ПоказателиБюджета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_ПоказателиБюджета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ПоказателиБюджета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПоказателиБюджета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_ПоказателиБюджета_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВариантБюджетаОтбор", 1, "Справочник_ВариантыБюджетов");
	ДобавитьПКС(СвойстваШапки, "", "ГрафаБюджетаОтбор", 1, "Предопр_Спр_ГрафыБюджета");
	ДобавитьПКС(СвойстваШапки, "", "НачалоПериодаОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "РазделБюджетаОтбор", 1, "Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваШапки, "", "СтатьяБюджетаОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ТипПоказателяОтбор", 1, "Перечисление.ТипыБюджетныхПоказателей");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантБюджета", 1,"Справочник_ВариантыБюджетов");
	ДобавитьПКС(СвойстваТЧ, "", "ГрафаБюджета", 1,"Предопр_Спр_ГрафыБюджета");
	ДобавитьПКС(СвойстваТЧ, "", "НачалоПериода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Порядок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РазделБюджета", 1,"Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяБюджета", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипПоказателя", 1,"Перечисление.ТипыБюджетныхПоказателей");

КонецПроцедуры

Процедура ПКО_РС_ПоказателиБюджета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("ПоказателиБюджета", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_ПринадлежностьФайлов_Отправка
Процедура ДобавитьПКО_РС_ПринадлежностьФайлов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_ПринадлежностьФайлов_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.ПринадлежностьФайлов;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ПринадлежностьФайлов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_ПринадлежностьФайлов_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВладелецФайлаОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ПрикрепленныйФайлОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВладелецФайла", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПрикрепленныйФайл", 1);

КонецПроцедуры

Процедура ПКО_РС_ПринадлежностьФайлов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений = Новый Структура();
	ИменаИзмерений.Вставить("ВладелецФайла", "ВладелецФайлаОтбор");
	ИменаИзмерений.Вставить("ПрикрепленныйФайл", "ПрикрепленныйФайлОтбор");
	
	ИменаПолейЗаписи = "ВладелецФайла,ПрикрепленныйФайл";
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_Расписания_Отправка
Процедура ДобавитьПКО_РС_Расписания_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_Расписания_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.Расписания;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Расписания";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_Расписания_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВладелецРасписанияОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаДохода", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВалютаРасхода", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "", "ВладелецРасписания", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаНачалаРасписания", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаОкончанияРасписания", 1);
	ДобавитьПКС(СвойстваТЧ, "", "КоличествоПовторов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НеИспользовать", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ОписаниеРасписания", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Периодичность", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПорядокДнейНедели", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ПорядокПериодов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДолга", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаДохода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаКомиссии", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаПроцентов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СуммаРасхода", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ШаблонДнейНедели", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ШаблонНомеровМесяцев", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ШаблонЧиселМесяца", 1);

КонецПроцедуры

Процедура ПКО_РС_Расписания_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("Расписания", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область РС_СоставСтатейБюджета_Отправка
Процедура ДобавитьПКО_РС_СоставСтатейБюджета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "РС_СоставСтатейБюджета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений.СоставСтатейБюджета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.СоставСтатейБюджета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_РС_СоставСтатейБюджета_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВариантБюджетаОтбор", 1, "Справочник_ВариантыБюджетов");
	ДобавитьПКС(СвойстваШапки, "", "ГрафаБюджетаОтбор", 1, "Предопр_Спр_ГрафыБюджета");
	ДобавитьПКС(СвойстваШапки, "", "РазделБюджетаОтбор", 1, "Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваШапки, "", "СтатьяБюджетаОтбор", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВариантБюджета", 1,"Справочник_ВариантыБюджетов");
	ДобавитьПКС(СвойстваТЧ, "", "Видимость", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ГрафаБюджета", 1,"Предопр_Спр_ГрафыБюджета");
	ДобавитьПКС(СвойстваТЧ, "", "Порядок", 1);
	ДобавитьПКС(СвойстваТЧ, "", "РазделБюджета", 1,"Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваТЧ, "", "РодительскаяСтатья", 1);
	ДобавитьПКС(СвойстваТЧ, "", "СтатьяБюджета", 1);

КонецПроцедуры

Процедура ПКО_РС_СоставСтатейБюджета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПодготовитьИменаПолейРС("СоставСтатейБюджета", ИменаИзмерений, ИменаПолейЗаписи);
	
	ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
#КонецОбласти
#Область УниверсальноеЗначение_Отправка
Процедура ДобавитьПКО_УниверсальноеЗначение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "УниверсальноеЗначение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "УниверсальноеЗначение";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_УниверсальноеЗначение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ИмяТипа", 1);
	ДобавитьПКС(СвойстваШапки, "", "ОбщиеДанныеОбъекта", 1);

КонецПроцедуры

Процедура ПКО_УниверсальноеЗначение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить( "ИмяТипа", ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(ДанныеИБ)) );
	
	Если Лев(ДанныеXDTO.ИмяТипа, 12) = "Перечисление" Тогда
		ДанныеXDTO.Вставить( "ПроизвольноеЗначение", ОбщегоНазначения.ИмяЗначенияПеречисления( ДанныеИБ ) );
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка( ТипЗнч(ДанныеИБ) ) Тогда
		ДанныеXDTO.Вставить( "ПроизвольноеЗначение", ДанныеИБ.УникальныйИдентификатор() );
	Иначе
		ДанныеXDTO.Вставить( "ПроизвольноеЗначение", Новый ХранилищеЗначения(ДанныеИБ) );
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Документ_ВводИзменениеОстатка
Процедура ДобавитьПКО_Документ_ВводИзменениеОстатка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВводИзменениеОстатка";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВводИзменениеОстатка;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВводИзменениеОстатка";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_ВводИзменениеОстатка_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВводИзменениеОстатка_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВводИзменениеОстатка_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаОперации",              "ВалютаОперации", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",            "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",                "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",             "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаНовогоОстатка",          "СуммаНовогоОстатка");
	ДобавитьПКС(СвойстваШапки, "СуммаНовогоОстаткаПроцентов", "СуммаНовогоОстаткаПроцентов");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",                   "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                            "ОбъектУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "РазделУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "ФинансоваяЦель", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "ЭтоСинхронизацияОстатков", 1);
	ДобавитьПКС(СвойстваШапки, "ОбъектУчета",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦель",              "", 1);

КонецПроцедуры

Процедура ПКО_Документ_ВводИзменениеОстатка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВгрузитьРазделУчета(ДанныеИБ, ДанныеXDTO, "РазделУчета");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеИБ, "ЭтоСинхронизацияОстатков") Тогда
		ДанныеXDTO.Вставить("ЭтоСинхронизацияОстатков", ДанныеИБ.ЭтоСинхронизацияОстатков);
	КонецЕсли;
	
	ДобавитьВXDTOРеквизитыСПКО("ОбъектУчета", ДанныеXDTO, ДанныеИБ);
	ДобавитьВXDTOРеквизитыСПКО("ФинансоваяЦель", ДанныеXDTO, ДанныеИБ);
КонецПроцедуры

Процедура ПКО_Документ_ВводИзменениеОстатка_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьРазделУчета(ДанныеXDTO, ПолученныеДанные, "РазделУчета");
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПолученныеДанные, "ЭтоСинхронизацияОстатков")
		И ДанныеXDTO.Свойства("ЭтоСинхронизацияОстатков") Тогда
		ПолученныеДанные.ЭтоСинхронизацияОстатков = ДанныеXDTO.ЭтоСинхронизацияОстатков;
	КонецЕсли;
	
	ДобавитьВДопСвойстваРеквизитыСПКО("ОбъектУчета", ПолученныеДанные, ДанныеXDTO);
	ДобавитьВДопСвойстваРеквизитыСПКО("ФинансоваяЦель", ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ВводИзменениеОстатка_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыгрузкаРегламентированныхОтчетов
Процедура ДобавитьПКО_Документ_ВыгрузкаРегламентированныхОтчетов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ВыгрузкаРегламентированныхОтчетов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ВыгрузкаРегламентированныхОтчетов;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ВыгрузкаРегламентированныхОтчетов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                    "Дата");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",     "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "Комментарий",             "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                   "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",             "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "ОтборПоНалоговомуОргану", "ОтборПоНалоговомуОргану");
	ДобавитьПКС(СвойстваШапки, "ПериодПо",                "ПериодПо");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",         "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеПериода",    "ПредставлениеПериода");
	ДобавитьПКС(СвойстваШапки, "Проведен",                "Проведен");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",         "Выгрузки");
	ДобавитьПКС(СвойстваТЧ, "", "ИмяФайла", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Текст", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Тип", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",         "Основная");
	ДобавитьПКС(СвойстваТЧ, "", "Основание", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НомерСтрокиТекстаВыгрузки", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Выгрузки", "");
	ДобавитьПКС(СвойстваТЧ, "ИмяФайла", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Текст",    "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",      "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Основная", "");
	ДобавитьПКС(СвойстваТЧ, "Основание",                 "", 1);
	ДобавитьПКС(СвойстваТЧ, "НомерСтрокиТекстаВыгрузки", "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Основная);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Выгрузки);
КонецПроцедуры

Процедура ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Основная");
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Выгрузки");
КонецПроцедуры
#КонецОбласти
#Область Документ_Доход
Процедура ДобавитьПКО_Документ_Доход(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_Доход";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Доход;
	ПравилоКонвертации.ОбъектФормата                = "Документ.Доход";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_Доход_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_Доход_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_Доход_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаОперации",   "ВалютаОперации", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации", "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",     "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",  "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",         "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаОперации",    "СуммаОперации");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",        "ЭтоШаблон");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1,"ПВХ_ВидыАналитик");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Доходы",                  "Доходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи",      "АналитикаСтатьи", 1);
	ДобавитьПКС(СвойстваТЧ, "Комментарий",          "Комментарий", 1);
	ДобавитьПКС(СвойстваТЧ, "Кошелек",              "Кошелек", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "Кратность",            "Кратность", 1);
	ДобавитьПКС(СвойстваТЧ, "Курс",                 "Курс", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДохода",         "СтатьяДохода", 1,"Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваТЧ, "СуммаВВалютеОперации", "СуммаВВалютеОперации", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаДохода",          "СуммаДохода", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",       "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата");
КонецПроцедуры

Процедура ПКО_Документ_Доход_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьОписаниеОперации(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Доходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Документ_Доход_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Доходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена );
КонецПроцедуры

Процедура ПКО_Документ_Доход_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_МыВернулиДолг
Процедура ДобавитьПКО_Документ_МыВернулиДолг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_МыВернулиДолг";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.МыВернулиДолг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.МыВернулиДолг";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_МыВернулиДолг_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_МыВернулиДолг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_МыВернулиДолг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АналитикаСтатьиРасходовПоКомиссии",  "АналитикаСтатьиРасходовПоКомиссии", , "Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваШапки, "АналитикаСтатьиРасходовПоПроцентам", "АналитикаСтатьиРасходовПоПроцентам", , "Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваШапки, "АналитикаСтатьиСписания",            "АналитикаСтатьиСписания", , "Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваШапки, "ВалютаКошелька",                     "ВалютаКошелька", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаКредита",                      "ВалютаКредита", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВыплаченоКомиссии",                  "ВыплаченоКомиссии");
	ДобавитьПКС(СвойстваШапки, "ВыплаченоКредита",                   "ВыплаченоКредита");
	ДобавитьПКС(СвойстваШапки, "ВыплаченоПроцентов",                 "ВыплаченоПроцентов");
	ДобавитьПКС(СвойстваШапки, "Дата",                               "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Кошелек",                            "Кошелек", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "КратностьВалютыКошелька",            "КратностьВалютыКошелька");
	ДобавитьПКС(СвойстваШапки, "КратностьВалютыКредита",             "КратностьВалютыКредита");
	ДобавитьПКС(СвойстваШапки, "Кредит",                             "Кредит", , "Справочник_Долги");
	ДобавитьПКС(СвойстваШапки, "Кредитор",                           "Кредитор", , "Справочник_Контакты");
	ДобавитьПКС(СвойстваШапки, "КурсВалютыКошелька",                 "КурсВалютыКошелька");
	ДобавитьПКС(СвойстваШапки, "КурсВалютыКредита",                  "КурсВалютыКредита");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",                   "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",                       "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                    "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",                           "Проведен");
	ДобавитьПКС(СвойстваШапки, "СписаноКредита",                     "СписаноКредита");
	ДобавитьПКС(СвойстваШапки, "СуммаДополнительныхРасходов",        "СуммаДополнительныхРасходов");
	ДобавитьПКС(СвойстваШапки, "СуммаКредитаВВалютеКредита",         "СуммаКредитаВВалютеКредита");
	ДобавитьПКС(СвойстваШапки, "СуммаОперации",                      "СуммаОперации");
	ДобавитьПКС(СвойстваШапки, "СуммаПроцентовВВалютеКредита",       "СуммаПроцентовВВалютеКредита");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",                          "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                                   "СтатьяРасходовПоКомиссии", 1);
	ДобавитьПКС(СвойстваШапки, "",                                   "СтатьяРасходовПоПроцентам", 1);
	ДобавитьПКС(СвойстваШапки, "",                                   "СтатьяСписания", 1);
	ДобавитьПКС(СвойстваШапки, "",                                   "ФинансоваяЦель", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяРасходовПоКомиссии",           "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяРасходовПоПроцентам",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяСписания",                     "", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦель",                     "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1,"ПВХ_ВидыАналитик");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРасходы",   "ДополнительныеРасходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи", "АналитикаСтатьи", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "КошелекРасхода",  "КошелекРасхода", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасхода",   "СтатьяРасхода", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасхода",    "СуммаРасхода", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",  "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата");
КонецПроцедуры

Процедура ПКО_Документ_МыВернулиДолг_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ВыгрузкаТолькоКлючевыхСвойств(ДанныеИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРасходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	
	ДобавитьВXDTOРеквизитыСПКО("СтатьяСписания", ДанныеXDTO, ДанныеИБ, Истина);
	ДобавитьВXDTOРеквизитыСПКО("СтатьяРасходовПоКомиссии,СтатьяРасходовПоПроцентам,ФинансоваяЦель", ДанныеXDTO, ДанныеИБ);
КонецПроцедуры

Процедура ПКО_Документ_МыВернулиДолг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЗагрузкаТолькоКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРасходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
	
	ДобавитьВДопСвойстваРеквизитыСПКО("СтатьяСписания", ПолученныеДанные, ДанныеXDTO, Истина);
	ДобавитьВДопСвойстваРеквизитыСПКО("СтатьяРасходовПоКомиссии", ПолученныеДанные, ДанныеXDTO);
	ДобавитьВДопСвойстваРеквизитыСПКО("СтатьяРасходовПоПроцентам", ПолученныеДанные, ДанныеXDTO);
	ДобавитьВДопСвойстваРеквизитыСПКО("ФинансоваяЦель", ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_МыВернулиДолг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_МыВзялиВДолг
Процедура ДобавитьПКО_Документ_МыВзялиВДолг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_МыВзялиВДолг";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.МыВзялиВДолг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.МыВзялиВДолг";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_МыВзялиВДолг_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_МыВзялиВДолг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_МыВзялиВДолг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаКредита",               "ВалютаКредита", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаПолучено",              "ВалютаПолучено", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Кошелек",                     "Кошелек", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "Кредит",                      "Кредит", , "Справочник_Долги");
	ДобавитьПКС(СвойстваШапки, "Кредитор",                    "Кредитор", , "Справочник_Контакты");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",            "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",                "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",             "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаДополнительныхРасходов", "СуммаДополнительныхРасходов");
	ДобавитьПКС(СвойстваШапки, "СуммаКредита",                "СуммаКредита");
	ДобавитьПКС(СвойстваШапки, "СуммаПолучено",               "СуммаПолучено");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",                   "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                            "РазделУчета", 1);
	ДобавитьПКС(СвойстваШапки, "",                            "ФинансоваяЦель", 1);
	ДобавитьПКС(СвойстваШапки, "РазделУчета",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦель",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1,"ПВХ_ВидыАналитик");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРасходы",   "ДополнительныеРасходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи", "АналитикаСтатьи", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "КошелекРасхода",  "КошелекРасхода", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасхода",   "СтатьяРасхода", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасхода",    "СуммаРасхода", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",  "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

КонецПроцедуры

Процедура ПКО_Документ_МыВзялиВДолг_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВгрузитьРазделУчета(ДанныеИБ, ДанныеXDTO, "РазделУчета");
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРасходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	
	
	ДобавитьВXDTOРеквизитыСПКО("ФинансоваяЦель", ДанныеXDTO, ДанныеИБ);
КонецПроцедуры

Процедура ПКО_Документ_МыВзялиВДолг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьРазделУчета(ДанныеXDTO, ПолученныеДанные, "РазделУчета");
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРасходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
	
	
	ДобавитьВДопСвойстваРеквизитыСПКО("ФинансоваяЦель", ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_МыВзялиВДолг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_МыДалиВДолг
Процедура ДобавитьПКО_Документ_МыДалиВДолг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_МыДалиВДолг";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.МыДалиВДолг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.МыДалиВДолг";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_МыДалиВДолг_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_МыДалиВДолг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_МыДалиВДолг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаВыдано",                "ВалютаВыдано", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаЗайма",                 "ВалютаЗайма", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВсегоРасход",                 "ВсегоРасход");
	ДобавитьПКС(СвойстваШапки, "Дата",                        "Дата");
	ДобавитьПКС(СвойстваШапки, "Долг",                        "Долг", , "Справочник_Долги");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                 "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контакт",                     "Контакт", , "Справочник_Контакты");
	ДобавитьПКС(СвойстваШапки, "Кошелек",                     "Кошелек", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",            "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",                "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",             "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",                    "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаВыдано",                 "СуммаВыдано");
	ДобавитьПКС(СвойстваШапки, "СуммаДополнительныхРасходов", "СуммаДополнительныхРасходов");
	ДобавитьПКС(СвойстваШапки, "СуммаЗайма",                  "СуммаЗайма");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",                   "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                            "ФинансоваяЦель", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦель",              "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1,"ПВХ_ВидыАналитик");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРасходы",   "ДополнительныеРасходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи", "АналитикаСтатьи", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "КошелекРасхода",  "КошелекРасхода", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасхода",   "СтатьяРасхода", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасхода",    "СуммаРасхода", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",  "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

КонецПроцедуры

Процедура ПКО_Документ_МыДалиВДолг_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРасходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	
	
	ДобавитьВXDTOРеквизитыСПКО("ФинансоваяЦель", ДанныеXDTO, ДанныеИБ);
КонецПроцедуры

Процедура ПКО_Документ_МыДалиВДолг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРасходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
	
	
	ДобавитьВДопСвойстваРеквизитыСПКО("ФинансоваяЦель", ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_МыДалиВДолг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_НамВернулиДолг
Процедура ДобавитьПКО_Документ_НамВернулиДолг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_НамВернулиДолг";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.НамВернулиДолг;
	ПравилоКонвертации.ОбъектФормата                = "Документ.НамВернулиДолг";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_НамВернулиДолг_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_НамВернулиДолг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_НамВернулиДолг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АналитикаСтатьиДоходовПоПроцентам", "АналитикаСтатьиДоходовПоПроцентам", , "Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваШапки, "АналитикаСтатьиСписания",           "АналитикаСтатьиСписания", , "Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваШапки, "ВалютаДолга",                       "ВалютаДолга", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаПолучено",                    "ВалютаПолучено", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВсегоСуммаПоступления",             "ВсегоСуммаПоступления");
	ДобавитьПКС(СвойстваШапки, "Дата",                              "Дата");
	ДобавитьПКС(СвойстваШапки, "Долг",                              "Долг", , "Справочник_Долги");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                       "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контакт",                           "Контакт", , "Справочник_Контакты");
	ДобавитьПКС(СвойстваШапки, "Кошелек",                           "Кошелек", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",                  "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",                      "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                   "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",                          "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаВозвратаДолга",                "СуммаВозвратаДолга");
	ДобавитьПКС(СвойстваШапки, "СуммаДополнительныхРасходов",       "СуммаДополнительныхРасходов");
	ДобавитьПКС(СвойстваШапки, "СуммаПолучено",                     "СуммаПолучено");
	ДобавитьПКС(СвойстваШапки, "СуммаПроцентов",                    "СуммаПроцентов");
	ДобавитьПКС(СвойстваШапки, "СуммаПроцентовВВалютеДолга",        "СуммаПроцентовВВалютеДолга");
	ДобавитьПКС(СвойстваШапки, "СуммаСписания",                     "СуммаСписания");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",                         "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                                  "СтатьяДоходовПоПроцентам", 1);
	ДобавитьПКС(СвойстваШапки, "",                                  "СтатьяСписания", 1);
	ДобавитьПКС(СвойстваШапки, "",                                  "ФинансоваяЦель", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяДоходовПоПроцентам",          "", 1);
	ДобавитьПКС(СвойстваШапки, "СтатьяСписания",                    "", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦель",                    "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРасходы",   "ДополнительныеРасходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи", "АналитикаСтатьи", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "КошелекРасхода",  "КошелекРасхода", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасхода",   "СтатьяРасхода", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасхода",    "СуммаРасхода", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",  "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1);
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

КонецПроцедуры

Процедура ПКО_Документ_НамВернулиДолг_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДобавитьВXDTOРеквизитыСПКО("СтатьяСписания",           ДанныеXDTO, ДанныеИБ);
	ДобавитьВXDTOРеквизитыСПКО("СтатьяДоходовПоПроцентам", ДанныеXDTO, ДанныеИБ);
	ДобавитьВXDTOРеквизитыСПКО("ФинансоваяЦель",           ДанныеXDTO, ДанныеИБ);
	
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРасходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Документ_НамВернулиДолг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ДобавитьВДопСвойстваРеквизитыСПКО("СтатьяСписания",           ПолученныеДанные, ДанныеXDTO);
	ДобавитьВДопСвойстваРеквизитыСПКО("СтатьяДоходовПоПроцентам", ПолученныеДанные, ДанныеXDTO);
	ДобавитьВДопСвойстваРеквизитыСПКО("ФинансоваяЦель",           ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРасходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_НамВернулиДолг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОбменВалюты
Процедура ДобавитьПКО_Документ_ОбменВалюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОбменВалюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.ОбменВалюты;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОбменВалюты";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_ОбменВалюты_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОбменВалюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОбменВалюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаПоступления",    "ВалютаПоступления", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ВалютаСписания",       "ВалютаСписания", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КошелекКуда",          "КошелекКуда", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "КошелекОткуда",        "КошелекОткуда", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",     "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",         "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",      "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",             "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаВыдано",          "СуммаСписания");
	ДобавитьПКС(СвойстваШапки, "СуммаПолучено",        "СуммаПоступления");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",            "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                     "ФинансоваяЦельКуда", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ФинансоваяЦельОткуда", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦельКуда",   "", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦельОткуда", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРасходы",   "ДополнительныеРасходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи", "АналитикаСтатьи", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "КошелекРасхода",  "КошелекРасхода", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасхода",   "СтатьяРасхода", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасхода",    "СуммаРасхода", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",  "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОбменВалюты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРасходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	
	
	ДобавитьВXDTOРеквизитыСПКО("ФинансоваяЦельОткуда,ФинансоваяЦельКуда", ДанныеXDTO, ДанныеИБ);
КонецПроцедуры

Процедура ПКО_Документ_ОбменВалюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРасходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
	
	
	ДобавитьВДопСвойстваРеквизитыСПКО("ФинансоваяЦельОткуда,ФинансоваяЦельКуда", ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_ОбменВалюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_Перемещение
Процедура ДобавитьПКО_Документ_Перемещение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_Перемещение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Перемещение;
	ПравилоКонвертации.ОбъектФормата                = "Документ.Перемещение";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_Перемещение_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_Перемещение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_Перемещение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаОперации",       "ВалютаОперации", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КошелекКуда",          "КошелекКуда", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "КошелекОткуда",        "КошелекОткуда", , "Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",     "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",         "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",      "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",             "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаОперации",        "СуммаОперации");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",            "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                     "ФинансоваяЦельКуда", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ФинансоваяЦельОткуда", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦельКуда",   "", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦельОткуда", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРасходы",   "ДополнительныеРасходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи", "АналитикаСтатьи", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "КошелекРасхода",  "КошелекРасхода", 1,"Справочник_КошелькиИСчета");
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасхода",   "СтатьяРасхода", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "СуммаРасхода",    "СуммаРасхода", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",  "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

КонецПроцедуры

Процедура ПКО_Документ_Перемещение_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРасходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	
	
	ДобавитьВXDTOРеквизитыСПКО("ФинансоваяЦельОткуда,ФинансоваяЦельКуда", ДанныеXDTO, ДанныеИБ);
КонецПроцедуры

Процедура ПКО_Документ_Перемещение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРасходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
	
	
	ДобавитьВДопСвойстваРеквизитыСПКО("ФинансоваяЦельОткуда,ФинансоваяЦельКуда", ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_Перемещение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_Расход
Процедура ДобавитьПКО_Документ_Расход(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_Расход";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.Расход;
	ПравилоКонвертации.ОбъектФормата                = "Документ.Расход";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_Расход_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_Расход_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_Расход_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаОперации",       "ВалютаОперации", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",                 "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",          "Комментарий");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации",     "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",         "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",      "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",             "Проведен");
	ДобавитьПКС(СвойстваШапки, "СуммаОплаты",          "СуммаОплаты");
	ДобавитьПКС(СвойстваШапки, "СуммаСкидки",          "СуммаСкидки");
	ДобавитьПКС(СвойстваШапки, "СуммаЧека",            "СуммаЧека");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",            "ЭтоШаблон");
	ДобавитьПКС(СвойстваШапки, "",                     "КошелекДолг", 1);
	ДобавитьПКС(СвойстваШапки, "",                     "ФинансоваяЦельОткуда", 1);
	ДобавитьПКС(СвойстваШапки, "КошелекДолг",          "", 1);
	ДобавитьПКС(СвойстваШапки, "ФинансоваяЦельОткуда", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Расходы",                 "Расходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьи",        "АналитикаСтатьи", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "КомментарийСтроки",      "КомментарийСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "Скидка",                 "Скидка", 1);
	ДобавитьПКС(СвойстваТЧ, "СкидкаВведенаВручную",   "СкидкаВведенаВручную", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасходаИмущество", "СтатьяРасходаИмущество", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",         "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");

КонецПроцедуры

Процедура ПКО_Документ_Расход_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Расходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	
	
	ДобавитьВXDTOРеквизитыСПКО("КошелекДолг", ДанныеXDTO, ДанныеИБ, Истина);
	ДобавитьВXDTOРеквизитыСПКО("ФинансоваяЦельОткуда", ДанныеXDTO, ДанныеИБ);
КонецПроцедуры

Процедура ПКО_Документ_Расход_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть( ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть( ПолученныеДанные, ДанныеXDTO, "Расходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
	
	
	ДобавитьВДопСвойстваРеквизитыСПКО( "КошелекДолг", ПолученныеДанные, ДанныеXDTO, Истина );
	ДобавитьВДопСвойстваРеквизитыСПКО( "ФинансоваяЦельОткуда", ПолученныеДанные, ДанныеXDTO );
КонецПроцедуры

Процедура ПКО_Документ_Расход_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РегламентированныйОтчет
Процедура ДобавитьПКО_Документ_РегламентированныйОтчет(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РегламентированныйОтчет";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.РегламентированныйОтчет;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РегламентированныйОтчет";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вид",                            "Вид");
	ДобавитьПКС(СвойстваШапки, "ВидОтчетности",                  "ВидОтчетности", , "ПеречислениеСсылка.ВидыОтчетности");
	ДобавитьПКС(СвойстваШапки, "ВыбраннаяФорма",                 "ВыбраннаяФорма");
	ДобавитьПКС(СвойстваШапки, "ДанныеОтчета",                   "ДанныеОтчета");
	ДобавитьПКС(СвойстваШапки, "Дата",                           "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаНачала",                     "ДатаНачала");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончания",                  "ДатаОкончания");
	ДобавитьПКС(СвойстваШапки, "ДатаПодписи",                    "ДатаПодписи");
	ДобавитьПКС(СвойстваШапки, "ДеревоНастройкиСтраниц",         "ДеревоНастройкиСтраниц");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения",               "ЕдиницаИзмерения", , "Перечисление.ПорядкиОкругленияОтчетности");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьПомощникЗаполнения", "ИспользоватьПомощникЗаполнения");
	ДобавитьПКС(СвойстваШапки, "ИсточникОтчета",                 "ИсточникОтчета");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",            "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПосредника",  "КодНалоговогоОрганаПосредника");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КПП",                            "КПП");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОтчета",             "НаименованиеОтчета");
	ДобавитьПКС(СвойстваШапки, "НомерПачки",                     "НомерПачки");
	ДобавитьПКС(СвойстваШапки, "Организация",                    "Организация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Период",                         "Период");
	ДобавитьПКС(СвойстваШапки, "Периодичность",                  "Периодичность", , "Перечисление.Периодичность");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеВида",              "ПредставлениеВида");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеПериода",           "ПредставлениеПериода");
	ДобавитьПКС(СвойстваШапки, "ТочностьЕдиницыИзмерения",       "ТочностьЕдиницыИзмерения");
	ДобавитьПКС(СвойстваШапки, "УдалитьКПП",                     "УдалитьКПП");
	ДобавитьПКС(СвойстваШапки, "ФорматВыгрузки",                 "ФорматВыгрузки");

КонецПроцедуры
#КонецОбласти
#Область Документ_УниверсальнаяОперация
Процедура ДобавитьПКО_Документ_УниверсальнаяОперация(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_УниверсальнаяОперация";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы.УниверсальнаяОперация;
	ПравилоКонвертации.ОбъектФормата                = "Документ.УниверсальнаяОперация";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_УниверсальнаяОперация_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_УниверсальнаяОперация_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УниверсальнаяОперация_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "ОписаниеОперации", "ОписаниеОперации");
	ДобавитьПКС(СвойстваШапки, "Пользователь",     "Пользователь", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",  "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Проведен",         "Проведен");
	ДобавитьПКС(СвойстваШапки, "ЭтоШаблон",        "ЭтоШаблон");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "АналитикаДокумента",      "АналитикаДокумента");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",            "ВидАналитики", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитикиВШапке", "ЗначениеАналитикиВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "РедактироватьВШапке",     "РедактироватьВШапке", 1);
	ДобавитьПКС(СвойстваТЧ, "ИспользоватьДляДохода",   "ИспользоватьДляДохода", 1);
	ДобавитьПКС(СвойстваТЧ, "ИспользоватьДляРасхода",  "ИспользоватьДляРасхода", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Доходы",                  "Доходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьиДохода", "АналитикаСтатьиДохода", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "Валюта",                "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "КомментарийСтроки",     "КомментарийСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъектУчета",           "ОбъектУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "РазделУчета",           "РазделУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяДохода",          "СтатьяДохода", 1,"Справочник_СтатьиДоходов");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                 "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",        "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Накопления",              "Накопления");
	ДобавитьПКС(СвойстваТЧ, "Валюта",                       "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ИспользованоНакоплений",       "ИспользованоНакоплений", 1);
	ДобавитьПКС(СвойстваТЧ, "ИспользованоСвободныхСредств", "ИспользованоСвободныхСредств", 1);
	ДобавитьПКС(СвойстваТЧ, "КомментарийСтроки",            "КомментарийСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",               "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Перемещения",             "Перемещения");
	ДобавитьПКС(СвойстваТЧ, "Валюта",            "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "ВалютаКт",          "ВалютаКт", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "КомментарийСтроки", "КомментарийСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъектУчетаДт",     "ОбъектУчетаДт", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъектУчетаКт",     "ОбъектУчетаКт", 1);
	ДобавитьПКС(СвойстваТЧ, "РазделУчетаДт",     "РазделУчетаДт", 1);
	ДобавитьПКС(СвойстваТЧ, "РазделУчетаКт",     "РазделУчетаКт", 1);
	ДобавитьПКС(СвойстваТЧ, "Сумма",             "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "СуммаКт",           "СуммаКт", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦельДт",  "ФинансоваяЦельДт", 1,"Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦельКт",  "ФинансоваяЦельКт", 1,"Справочник_ФинансовыеЦели");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Расходы",                 "Расходы");
	ДобавитьПКС(СвойстваТЧ, "АналитикаСтатьиРасхода", "АналитикаСтатьиРасхода", 1,"Справочник_ЗначенияСубконтоАналитика");
	ДобавитьПКС(СвойстваТЧ, "Валюта",                 "Валюта", 1,"Справочник_Валюты");
	ДобавитьПКС(СвойстваТЧ, "Количество",             "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "КомментарийСтроки",      "КомментарийСтроки", 1);
	ДобавитьПКС(СвойстваТЧ, "ОбъектУчета",            "ОбъектУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "РазделУчета",            "РазделУчета", 1);
	ДобавитьПКС(СвойстваТЧ, "СтатьяРасхода",          "СтатьяРасхода", 1,"Справочник_СтатьиРасходов");
	ДобавитьПКС(СвойстваТЧ, "Сумма",                  "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦель",         "ФинансоваяЦель", 1,"Справочник_ФинансовыеЦели");
	ДобавитьПКС(СвойстваТЧ, "ФинансоваяЦельОткуда",   "ФинансоваяЦельОткуда", 1,"Справочник_ФинансовыеЦели");

КонецПроцедуры

Процедура ПКО_Документ_УниверсальнаяОперация_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.АналитикаДокумента);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Доходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Расходы);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Перемещения);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Накопления);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Документ_УниверсальнаяОперация_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "АналитикаДокумента", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Доходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Расходы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Перемещения", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Накопления", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена );
КонецПроцедуры

Процедура ПКО_Документ_УниверсальнаяОперация_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученногоДокумента( ПолученныеДанные, ДанныеИБ, КомпонентыОбмена );
	
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
	
	// Сохранить аналитику при обмене с мобильным
	СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПВХ_ВидыАналитик
Процедура ДобавитьПКО_ПВХ_ВидыАналитик(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПВХ_ВидыАналитик";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ВидыАналитик;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВидыАналитик";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПВХ_ВидыАналитик_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПВХ_ВидыАналитик_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "АктуальнаДляДохода",             "АктуальнаДляДохода");
	ДобавитьПКС(СвойстваШапки, "АктуальнаДляРасхода",            "АктуальнаДляРасхода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "РасширенныеНастройкиДляДохода",  "РасширенныеНастройкиДляДохода");
	ДобавитьПКС(СвойстваШапки, "РасширенныеНастройкиДляРасхода", "РасширенныеНастройкиДляРасхода");
	ДобавитьПКС(СвойстваШапки, "РедактироватьВШапкеДляДохода",   "РедактироватьВШапкеДляДохода");
	ДобавитьПКС(СвойстваШапки, "РедактироватьВШапкеДляРасхода",  "РедактироватьВШапкеДляРасхода");
	ДобавитьПКС(СвойстваШапки, "",                               "ГруппаПоУмолчанию", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "ЗначениеАналитикиДохода", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "ЗначениеАналитикиРасхода", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "",                               "ТипЗначения", 1);
	ДобавитьПКС(СвойстваШапки, "ГруппаПоУмолчанию",              "", 1);
	ДобавитьПКС(СвойстваШапки, "ЗначениеАналитикиДохода",        "", 1);
	ДобавитьПКС(СвойстваШапки, "ЗначениеАналитикиРасхода",       "", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных",      "", 1);
	ДобавитьПКС(СвойстваШапки, "ТипЗначения",                    "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_ПВХ_ВидыАналитик_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Сериализовать в ТипЗначения
	ТипЗначенияВставитьДляОтправки(ДанныеXDTO, ДанныеИБ.ТипЗначения);
	
	// Добавление реквизитов с ПКО
	СоставныеРеквизиты = "ЗначениеАналитикиДохода,ЗначениеАналитикиРасхода,ГруппаПоУмолчанию";
	ДобавитьВXDTOРеквизитыСПКО(СоставныеРеквизиты, ДанныеXDTO, ДанныеИБ);
	
	// Подготовка к отправке предопределенных значений
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_ПВХ_ВидыАналитик_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
	
	ТипЗначенияКонвертировать(ДанныеXDTO, ПолученныеДанные);
	
	// Добавление в доп.свойства реквизитов составного типа, подготовленных для трансляции в объекты ИБ
	СоставныеРеквизиты = "ЗначениеАналитикиДохода,ЗначениеАналитикиРасхода,ГруппаПоУмолчанию";
	ДобавитьВДопСвойстваРеквизитыСПКО(СоставныеРеквизиты, ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область ПВХ_ДополнительныеРеквизитыИСведения
Процедура ДобавитьПКО_ПВХ_ДополнительныеРеквизитыИСведения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "ПВХ_ДополнительныеРеквизитыИСведения";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизитыИСведения";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Виден",                              "Виден");
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений");
	ДобавитьПКС(СвойстваШапки, "ВыводитьВВидеГиперссылки",           "ВыводитьВВидеГиперссылки");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Доступен",                           "Доступен");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Имя",                                "Имя");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "НаборСвойств",                       "НаборСвойств", , "Справочник_НаборыДопРеквизитовИСведений");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                    "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");
	ДобавитьПКС(СвойстваШапки, "",                                   "ТипЗначения", 1);
	ДобавитьПКС(СвойстваШапки, "ТипЗначения",                        "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ЗависимостиДополнительныхРеквизитов", "ЗависимостиДополнительныхРеквизитов");
	ДобавитьПКС(СвойстваТЧ, "ЗависимоеСвойство", "ЗависимоеСвойство", 1);
	ДобавитьПКС(СвойстваТЧ, "НаборСвойств",      "НаборСвойств", 1,"Справочник_НаборыДопРеквизитовИСведений");
	ДобавитьПКС(СвойстваТЧ, "Значение",          "Значение", 1);
	ДобавитьПКС(СвойстваТЧ, "Реквизит",          "Реквизит", 1);
	ДобавитьПКС(СвойстваТЧ, "Условие",           "Условие", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Представления",                       "Представления");
	ДобавитьПКС(СвойстваТЧ, "Заголовок",                    "Заголовок", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗаголовокФормыВыбораЗначения", "ЗаголовокФормыВыбораЗначения", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗаголовокФормыЗначения",       "ЗаголовокФормыЗначения", 1);
	ДобавитьПКС(СвойстваТЧ, "КодЯзыка",                     "КодЯзыка", 1);
	ДобавитьПКС(СвойстваТЧ, "Подсказка",                    "Подсказка", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ТипЗначенияВставитьДляОтправки(ДанныеXDTO, ДанныеИБ.ТипЗначения);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ЗависимостиДополнительныхРеквизитов);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Представления);
КонецПроцедуры

Процедура ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ТипЗначенияКонвертировать(ДанныеXDTO, ПолученныеДанные);
	
	ИмяНабора = Неопределено;
	Если ДанныеXDTO.Свойство("НаборСвойств") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НаборСвойств", ЗагружаемоеЗначениеСПравилом(ДанныеXDTO.НаборСвойств));
	КонецЕсли;
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ЗависимостиДополнительныхРеквизитов", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Представления", КомпонентыОбмена );
КонецПроцедуры

Процедура ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",             "Активность");
	ДобавитьПКС(СвойстваШапки, "Активность",             "Активность");
	ДобавитьПКС(СвойстваШапки, "ЗагружаетсяИзИнтернета", "ЗагружаетсяИзИнтернета");
	ДобавитьПКС(СвойстваШапки, "Код",                    "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Наценка",                "Наценка");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяВалюта",         "ОсновнаяВалюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",       "ПараметрыПрописи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",        "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "СпособУстановкиКурса",   "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = ?(ДанныеXDTO.Свойство("ЗагружаетсяИзИнтернета") И ДанныеXDTO.ЗагружаетсяИзИнтернета, 
				Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета, Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВариантыБюджетов
Процедура ДобавитьПКО_Справочник_ВариантыБюджетов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ВариантыБюджетов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ВариантыБюджетов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ВариантыБюджетов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ВариантыБюджетов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ВариантыБюджетов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",                           "Активность");
	ДобавитьПКС(СвойстваШапки, "Валюта",                               "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ДетальностьПланирования",              "ДетальностьПланирования", , "Перечисление.ПериодичностьПланирования");
	ДобавитьПКС(СвойстваШапки, "Наименование",                         "Наименование");
	ДобавитьПКС(СвойстваШапки, "НачалоПланирования",                   "НачалоПланирования");
	ДобавитьПКС(СвойстваШапки, "НомерМесяца",                          "НомерМесяца");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                      "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "ПредставлениеДетальностиПланирования", "ПредставлениеДетальностиПланирования");
	ДобавитьПКС(СвойстваШапки, "ЧислоМесяца",                          "ЧислоМесяца");
	ДобавитьПКС(СвойстваШапки, "",                                     "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных",            "", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ВариантыБюджетов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_ВариантыБюджетов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ГрафыБюджета
Процедура ДобавитьПКО_Справочник_ГрафыБюджета(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ГрафыБюджета";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ГрафыБюджета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ГрафыБюджета";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ГрафыБюджета_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ГрафыБюджета_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ГрафыБюджета_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "",                          "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных", "", 1);

КонецПроцедуры

Процедура ПКО_Справочник_ГрафыБюджета_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_ГрафыБюджета_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_ГрафыБюджета_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	РазрешенныеРеквизиты = "ПорядокПоУмолчанию"; //Список реквизитов, которые можно обновлять при обмене
	РазрешенныеТабЧасти  = Неопределено; //Список таб.частей, которые можно обновлять при обмене
	Если ЭтоПередЗаписьюПредопределенного(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, РазрешенныеРеквизиты, РазрешенныеТабЧасти) Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Долги
Процедура ДобавитьПКО_Справочник_Долги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Долги";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Долги;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Долги";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Долги_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Долги_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Долги_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",                         "Активность");
	ДобавитьПКС(СвойстваШапки, "Валюта",                             "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьДляУчетаВзятыхДолгов",   "ИспользоватьДляУчетаВзятыхДолгов");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьДляУчетаВыданныхДолгов", "ИспользоватьДляУчетаВыданныхДолгов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                    "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Контакт",                            "Контакт", 1, "Справочник_Контакты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Контакт,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Долги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Контакт", ВыгружаемоеЗначениеСПравилом(ДанныеИБ.Контакт, Ложь));
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_Долги_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИмяРеквизита      = "Контакт";
	ЗначениеРеквизита = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяРеквизита, ЗначениеРеквизита) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизита, ЗагружаемоеЗначениеСПравилом(ЗначениеРеквизита));
	КонецЕсли; 
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена );
КонецПроцедуры

Процедура ПКО_Справочник_Долги_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДопЗначенияВидовАналитик
Процедура ДобавитьПКО_Справочник_ДопЗначенияВидовАналитик(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДопЗначенияВидовАналитик";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДополнительныеЗначенияВидовАналитик;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеЗначенияВидовАналитик";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ДопЗначенияВидовАналитик_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДопЗначенияВидовАналитик_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",      "Активность");
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Владелец", , "ПВХ_ВидыАналитик");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_ДопЗначенияВидовАналитик");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_ДопЗначенияВидовАналитик_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_ДопЗначенияВидовАналитик_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена );
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДопОтчетыИОбработки
Процедура ДобавитьПКО_Справочник_ДопОтчетыИОбработки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДопОтчетыИОбработки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДополнительныеОтчетыИОбработки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеОтчетыИОбработки";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ДопОтчетыИОбработки_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ДопОтчетыИОбработки_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДопОтчетыИОбработки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БезопасныйРежим",               "БезопасныйРежим");
	ДобавитьПКС(СвойстваШапки, "Версия",                        "Версия");
	ДобавитьПКС(СвойстваШапки, "Вид",                           "Вид", , "ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбраб");
	ДобавитьПКС(СвойстваШапки, "ИмяОбъекта",                    "ИмяОбъекта");
	ДобавитьПКС(СвойстваШапки, "ИмяФайла",                      "ИмяФайла");
	ДобавитьПКС(СвойстваШапки, "Информация",                    "Информация");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьДляФормыОбъекта",   "ИспользоватьДляФормыОбъекта");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьДляФормыСписка",    "ИспользоватьДляФормыСписка");
	ДобавитьПКС(СвойстваШапки, "ИспользуетХранилищеВариантов",  "ИспользуетХранилищеВариантов");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",                  "Наименование");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                 "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",               "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Публикация",                    "Публикация", , "ПеречислениеСсылка.ВариантыПубликацииДополнительны");
	ДобавитьПКС(СвойстваШапки, "РежимСовместимостиРазрешений",  "РежимСовместимостиРазрешений", , "Перечисление.РежимыСовместимостиРазрешенийДополнит");
	ДобавитьПКС(СвойстваШапки, "Родитель",                      "Группа", , "Справочник_ДопОтчетыИОбработкиГруппа");
	ДобавитьПКС(СвойстваШапки, "ТеснаяИнтеграцияСФормойОтчета", "ТеснаяИнтеграцияСФормойОтчета");
	ДобавитьПКС(СвойстваШапки, "ХранилищеНастроек",             "ХранилищеНастроек");
	ДобавитьПКС(СвойстваШапки, "ХранилищеОбработки",            "ХранилищеОбработки");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_ДопОтчетыИОбработки_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Заполнение табличных частей
	МДИсточника = Метаданные.Справочники.ДополнительныеОтчетыИОбработки;
	
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, МДИсточника.ТабличныеЧасти.Команды);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, МДИсточника.ТабличныеЧасти.Назначение);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, МДИсточника.ТабличныеЧасти.Разрешения);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, МДИсточника.ТабличныеЧасти.Разделы);
КонецПроцедуры

Процедура ПКО_Справочник_ДопОтчетыИОбработки_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// заполнение табличных частей
	МДИсточника = Метаданные.Справочники.ДополнительныеОтчетыИОбработки;
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Команды", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Назначение", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Разделы", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Разрешения", КомпонентыОбмена );
КонецПроцедуры

Процедура ПКО_Справочник_ДопОтчетыИОбработки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДопОтчетыИОбработкиГруппа
Процедура ДобавитьПКО_Справочник_ДопОтчетыИОбработкиГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДопОтчетыИОбработкиГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ДополнительныеОтчетыИОбработки;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеОтчетыИОбработкиГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ДопОтчетыИОбработкиГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияСвойствОбъектов
Процедура ДобавитьПКО_Справочник_ЗначенияСвойствОбъектов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияСвойствОбъектов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияСвойствОбъектов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЗначенияСвойствОбъектов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЗначенияСвойствОбъектов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",                "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",           "Владелец", , "ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "ПолноеНаименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",    "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_ЗначенияСвойствОбъектов_Группа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Представления", "Представления");
	ДобавитьПКС(СвойстваТЧ, "КодЯзыка",     "КодЯзыка", 1);
	ДобавитьПКС(СвойстваТЧ, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСвойствОбъектов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Представления);
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСвойствОбъектов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Представления", КомпонентыОбмена );
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияСвойствОбъектов_Группа
Процедура ДобавитьПКО_Справочник_ЗначенияСвойствОбъектов_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияСвойствОбъектов_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияСвойствОбъектовГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",        "Владелец", , "ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_ЗначенияСвойствОбъектов_Группа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Представления", "Представления");
	ДобавитьПКС(СвойстваТЧ, "КодЯзыка",     "КодЯзыка", 1);
	ДобавитьПКС(СвойстваТЧ, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Представления);
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Представления", КомпонентыОбмена );
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияСвойствОбъектовИерархия
Процедура ДобавитьПКО_Справочник_ЗначенияСвойствОбъектовИерархия(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияСвойствОбъектовИерархия";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектовИерархия;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияСвойствОбъектовИерархия";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",                "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",           "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "ПолноеНаименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",    "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_ЗначенияСвойствОбъектовИерархия");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Представления", "Представления");
	ДобавитьПКС(СвойстваТЧ, "КодЯзыка",     "КодЯзыка", 1);
	ДобавитьПКС(СвойстваТЧ, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Представления);
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Представления", КомпонентыОбмена );
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияСубконтоАналитика
Процедура ДобавитьПКО_Справочник_ЗначенияСубконтоАналитика(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияСубконтоАналитика";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСубконтоАналитика;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияСубконтоАналитика";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ЗначенияСубконтоАналитика_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ЗначенияСубконтоАналитика_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ВидыИЗначенияАналитики", "ВидыИЗначенияАналитики");
	ДобавитьПКС(СвойстваТЧ, "ВидАналитики",      "ВидАналитики", 1,"ПВХ_ВидыАналитик");
	ДобавитьПКС(СвойстваТЧ, "ЗначениеАналитики", "ЗначениеАналитики", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСубконтоАналитика_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ВидыИЗначенияАналитики);
КонецПроцедуры

Процедура ПКО_Справочник_ЗначенияСубконтоАналитика_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ВидыИЗначенияАналитики");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ИдентификаторыОбъектовМетаданных
Процедура ДобавитьПКО_Справочник_ИдентификаторыОбъектовМетаданных(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ИдентификаторыОбъектовМетаданных";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ИдентификаторыОбъектовМетаданных";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПолноеИмя",    "ПолноеИмя");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ИдентификаторыОбъектовМетаданных");

	ПравилоКонвертации.ПоляПоиска.Добавить("ПолноеИмя");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Имущество
Процедура ДобавитьПКО_Справочник_Имущество(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Имущество";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Имущество;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Имущество";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Имущество_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Имущество_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Имущество_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",      "Активность");
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_Имущество_Группа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Имущество_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_Имущество_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_Имущество_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Имущество_Группа
Процедура ДобавитьПКО_Справочник_Имущество_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Имущество_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Имущество;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ИмуществоГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Имущество_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Имущество_Группа_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Имущество_Группа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",      "Активность");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НаборСвойств",    "НаборСвойств", , "Справочник_НаборыДопРеквизитовИСведений");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_Имущество_Группа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Имущество_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_Имущество_Группа_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_Имущество_Группа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контакты
Процедура ДобавитьПКО_Справочник_Контакты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контакты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контакты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контакты";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Контакты_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контакты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контакты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",                  "Адрес");
	ДобавитьПКС(СвойстваШапки, "АдресЭлектроннойПочты",  "АдресЭлектроннойПочты");
	ДобавитьПКС(СвойстваШапки, "Активность",             "Активность");
	ДобавитьПКС(СвойстваШапки, "ВебАдрес",               "ВебАдрес");
	ДобавитьПКС(СвойстваШапки, "ДеньРождения",           "ДеньРождения");
	ДобавитьПКС(СвойстваШапки, "Комментарий",            "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НапоминатьОДнеРождения", "НапоминатьОДнеРождения");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",        "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Телефоны",               "Телефоны");
	ДобавитьПКС(СвойстваШапки, "Родитель",               "Группа", 1, "Справочник_Контакты_Группа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Родитель,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Контакты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
		ДанныеXDTO.Вставить( "Группа", ВыгружаемоеЗначениеСПравилом(ДанныеИБ.Родитель, Ложь) );
	КонецЕсли;
	
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_Контакты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИмяРеквизитаФормата = "Группа";
	ИмяРеквизита        = "Родитель";
	ЗначениеРеквизита   = Неопределено;
	Если ДанныеXDTO.Свойство(ИмяРеквизитаФормата, ЗначениеРеквизита) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизита, ЗагружаемоеЗначениеСПравилом(ЗначениеРеквизита));
	КонецЕсли; 
	
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_Контакты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контакты_Группа
Процедура ДобавитьПКО_Справочник_Контакты_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контакты_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Контакты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтактыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Контакты_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Контакты_Группа_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контакты_Группа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",   "Активность");
	ДобавитьПКС(СвойстваШапки, "НаборСвойств", "НаборСвойств", , "Справочник_НаборыДопРеквизитовИСведений");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", 1, "Справочник_Контакты_Группа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Контакты_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если Не ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO) Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
			ДанныеXDTO.Вставить( "Группа", ВыгружаемоеЗначениеСПравилом(ДанныеИБ.Родитель, Ложь) );
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_Контакты_Группа_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если Не ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO) Тогда
		ИмяРеквизитаФормата = "Группа";
		ИмяРеквизита        = "Родитель";
		ЗначениеРеквизита   = Неопределено;
		Если ДанныеXDTO.Свойство(ИмяРеквизитаФормата, ЗначениеРеквизита) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизита, ЗагружаемоеЗначениеСПравилом(ЗначениеРеквизита));
		КонецЕсли; 
	КонецЕсли;
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_Контакты_Группа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КошелькиИСчета
Процедура ДобавитьПКО_Справочник_КошелькиИСчета(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КошелькиИСчета";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КошелькиИСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КошелькиИСчета";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_КошелькиИСчета_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КошелькиИСчета_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КошелькиИСчета_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",                     "Активность");
	ДобавитьПКС(СвойстваШапки, "Валюта",                         "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьДляНакоплений",      "ИспользоватьДляНакоплений");
	ДобавитьПКС(СвойстваШапки, "КоличествоДнейЛьготногоПериода", "КоличествоДнейЛьготногоПериода");
	ДобавитьПКС(СвойстваШапки, "КомиссияЗаКредит",               "КомиссияЗаКредит");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                    "Комментарий");
	ДобавитьПКС(СвойстваШапки, "КредитныйЛимит",                 "КредитныйЛимит");
	ДобавитьПКС(СвойстваШапки, "Наименование",                   "Наименование");
	ДобавитьПКС(СвойстваШапки, "НачислятьПроцентыНаДепозит",     "НачислятьПроцентыНаДепозит");
	ДобавитьПКС(СвойстваШапки, "Ответственный",                  "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "ПроцентнаяСтавка",               "ПроцентнаяСтавка");
	ДобавитьПКС(СвойстваШапки, "Родитель",                       "Группа", , "Справочник_КошелькиИСчета_Группа");
	ДобавитьПКС(СвойстваШапки, "ТипСчета",                       "ТипСчета", , "Перечисление.ТипыСчетов");
	ДобавитьПКС(СвойстваШапки, "ЧислоНачисленияПроцентов",       "ЧислоНачисленияПроцентов");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_КошелькиИСчета_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_КошелькиИСчета_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_КошелькиИСчета_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_КошелькиИСчета_Группа
Процедура ДобавитьПКО_Справочник_КошелькиИСчета_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КошелькиИСчета_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КошелькиИСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КошелькиИСчетаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_КошелькиИСчета_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КошелькиИСчета_Группа_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КошелькиИСчета_Группа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",      "Активность");
	ДобавитьПКС(СвойстваШапки, "Валюта",          "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Комментарий",     "Комментарий");
	ДобавитьПКС(СвойстваШапки, "НаборСвойств",    "НаборСвойств", , "Справочник_НаборыДопРеквизитовИСведений");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_КошелькиИСчета_Группа");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ЗначениеСвойства", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_КошелькиИСчета_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_КошелькиИСчета_Группа_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_КошелькиИСчета_Группа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_НаборыДопРеквизитовИСведений
Процедура ДобавитьПКО_Справочник_НаборыДопРеквизитовИСведений(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НаборыДопРеквизитовИСведений";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НаборыДополнительныхРеквизитовИСведений";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенногоНабора", "ИмяПредопределенногоНабора");
	ДобавитьПКС(СвойстваШапки, "Используется",               "Используется");
	ДобавитьПКС(СвойстваШапки, "КоличествоРеквизитов",       "КоличествоРеквизитов");
	ДобавитьПКС(СвойстваШапки, "КоличествоСведений",         "КоличествоСведений");
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",            "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",                   "Группа");
	ДобавитьПКС(СвойстваШапки, "",                           "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных",  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "ПометкаУдаления", "ПометкаУдаления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеСведения",  "ДополнительныеСведения");
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "ПометкаУдаления", "ПометкаУдаления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Представления",           "Представления");
	ДобавитьПКС(СвойстваТЧ, "КодЯзыка",     "КодЯзыка", 1);
	ДобавитьПКС(СвойстваТЧ, "Наименование", "Наименование", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИмяПредопределенногоНабора");
	ПравилоКонвертации.ПоляПоиска.Добавить("Родитель,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеСведения);
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.Представления);
КонецПроцедуры

Процедура ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеСведения", КомпонентыОбмена );
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "Представления", КомпонентыОбмена );
КонецПроцедуры
#КонецОбласти
#Область Справочник_НаборыДопРеквизитовИСведений_Группа
Процедура ДобавитьПКО_Справочник_НаборыДопРеквизитовИСведений_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НаборыДопРеквизитовИСведений_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НаборыДополнительныхРеквизитовИСведенийГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенногоНабора", "ИмяПредопределенногоНабора");
	ДобавитьПКС(СвойстваШапки, "Наименование",               "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",            "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",                   "Группа");
	ДобавитьПКС(СвойстваШапки, "",                           "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных",  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "ПометкаУдаления", "ПометкаУдаления", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеСведения",  "ДополнительныеСведения");
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "ПометкаУдаления", "ПометкаУдаления", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИмяПредопределенногоНабора");
	ПравилоКонвертации.ПоляПоиска.Добавить("Родитель,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
	//ДанныеXDTO.Вставить("ИмяПредопределенныхДанных", ДанныеИБ.ИмяПредопределенныхДанных);
КонецПроцедуры

Процедура ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации
Процедура ДобавитьПКО_Справочник_Организации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",                   "ГоловнаяОрганизация", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "ИНН",                                   "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОргана",                   "КодНалоговогоОргана");
	ДобавитьПКС(СвойстваШапки, "КодНалоговогоОрганаПолучателя",         "КодНалоговогоОрганаПолучателя");
	ДобавитьПКС(СвойстваШапки, "КодОрганаПФР",                          "КодОрганаПФР");
	ДобавитьПКС(СвойстваШапки, "КодОрганаФСГС",                         "КодОрганаФСГС");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                            "ОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",                             "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                   "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",                    "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное",               "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "ОбменКаталогОтправкиДанныхОтчетности",  "ОбменКаталогОтправкиДанныхОтчетности");
	ДобавитьПКС(СвойстваШапки, "ОбменКаталогПрограммыЭлектроннойПочты", "ОбменКаталогПрограммыЭлектроннойПочты");
	ДобавитьПКС(СвойстваШапки, "ОбменКодАбонента",                      "ОбменКодАбонента");
	ДобавитьПКС(СвойстваШапки, "ОГРН",                                  "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                       "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Префикс",                               "Префикс");
	ДобавитьПКС(СвойстваШапки, "РегистрационныйНомерПФР",               "РегистрационныйНомерПФР");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоДатаВыдачи",               "СвидетельствоДатаВыдачи");
	ДобавитьПКС(СвойстваШапки, "СвидетельствоСерияНомер",               "СвидетельствоСерияНомер");
	ДобавитьПКС(СвойстваШапки, "ЮридическоеФизическоеЛицо",             "ЮридическоеФизическоеЛицо");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,НаименованиеПолное");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПользователяИБ",      "ИдентификаторПользователяИБ");
	ДобавитьПКС(СвойстваШапки, "ИдентификаторПользователяСервиса", "ИдентификаторПользователяСервиса");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                      "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",                     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Недействителен",                   "Недействителен");
	ДобавитьПКС(СвойстваШапки, "Подготовлен",                      "Подготовлен");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                  "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "СвойстваПользователяИБ",           "СвойстваПользователяИБ");
	ДобавитьПКС(СвойстваШапки, "Служебный",                        "Служебный");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо",                   "ФизическоеЛицо");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("ИдентификаторПользователяИБ");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПравилаЧтенияТабличныхДокументов
Процедура ДобавитьПКО_Справочник_ПравилаЧтенияТабличныхДокументов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПравилаЧтенияТабличныхДокументов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПравилаЧтенияТабличныхДокументов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ПравилаЧтенияТабличныхДокументов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",          "");
	ДобавитьПКС(СвойстваШапки, "ТипЗагружаемогоДокумента", "ТипЗагружаемогоДокумента", , "Перечисление.ТипыЗагружаемыхДокументов");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ПоказателиДокумента", "ПоказателиДокумента");
	ДобавитьПКС(СвойстваТЧ, "КлючПоказателя",      "КлючПоказателя", 1);
	ДобавитьПКС(СвойстваТЧ, "ПоложениеПоказателя", "ПоложениеПоказателя", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ПоказателиДокумента);
КонецПроцедуры

Процедура ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ПоказателиДокумента");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрикрепленныеФайлы
Процедура ДобавитьПКО_Справочник_ПрикрепленныеФайлы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ПрикрепленныеФайлы";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ПрикрепленныеФайлы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ПрикрепленныеФайлы";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ДанныеФайла",         "ДанныеФайла");
	ДобавитьПКС(СвойстваШапки, "ИсходноеИмяФайла",    "ИсходноеИмяФайла");
	ДобавитьПКС(СвойстваШапки, "Комментарий",         "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",        "Наименование");
	ДобавитьПКС(СвойстваШапки, "НеСинхронизировать",  "НеСинхронизировать");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",     "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "РазмерФайла",         "РазмерФайла");
	ДобавитьПКС(СвойстваШапки, "РасширениеФайла",     "РасширениеФайла");
	ДобавитьПКС(СвойстваШапки, "СпособОткрытияФайла", "СпособОткрытияФайла", , "Перечисление.СпособОткрытияПрикрепленногоФайла");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане
Процедура ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Владелец",                               "Владелец", , "Справочник_Организации");
	ДобавитьПКС(СвойстваШапки, "Доверенность",                           "Доверенность");
	ДобавитьПКС(СвойстваШапки, "ДокументПредставителя",                  "ДокументПредставителя");
	ДобавитьПКС(СвойстваШапки, "Код",                                    "Код");
	ДобавитьПКС(СвойстваШапки, "КодПоОКАТО",                             "КодПоОКАТО");
	ДобавитьПКС(СвойстваШапки, "КодПоОКТМО",                             "КодПоОКТМО");
	ДобавитьПКС(СвойстваШапки, "КПП",                                    "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",                           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеИФНС",                       "НаименованиеИФНС");
	ДобавитьПКС(СвойстваШапки, "НаименованиеОбособленногоПодразделения", "НаименованиеОбособленногоПодразделения");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                        "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Представитель",                          "Представитель");
	ДобавитьПКС(СвойстваШапки, "УдалитьДоверенность",                    "УдалитьДоверенность");
	ДобавитьПКС(СвойстваШапки, "УполномоченноеЛицоПредставителя",        "УполномоченноеЛицоПредставителя");
	ДобавитьПКС(СвойстваШапки, "",                                       "", 1);
	ДобавитьПКС(СвойстваШапки, "",                                       "ИмяПредопределенныхДанных", 1);

КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO)
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	РазрешенныеРеквизиты = Неопределено; //Список реквизитов, которые можно обновлять при обмене
	РазрешенныеТабЧасти  = Неопределено; //Список таб.частей, которые можно обновлять при обмене
	Если ЭтоПередЗаписьюПредопределенного(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, РазрешенныеРеквизиты, РазрешенныеТабЧасти) Тогда
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегламентированныеОтчеты
Процедура ДобавитьПКО_Справочник_РегламентированныеОтчеты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_РегламентированныеОтчеты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.РегламентированныеОтчеты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.РегламентированныеОтчеты";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВнешнийОтчетВерсия",       "ВнешнийОтчетВерсия");
	ДобавитьПКС(СвойстваШапки, "ВнешнийОтчетИспользовать", "ВнешнийОтчетИспользовать");
	ДобавитьПКС(СвойстваШапки, "ВнешнийОтчетХранилище",    "ВнешнийОтчетХранилище");
	ДобавитьПКС(СвойстваШапки, "ИсточникОтчета",           "ИсточникОтчета");
	ДобавитьПКС(СвойстваШапки, "Код",                      "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",             "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",                 "Описание");
	ДобавитьПКС(СвойстваШапки, "Периоды",                  "Периоды");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",          "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",                 "Группа", , "Справочник_РегламентированныеОтчеты_Группа");
	ДобавитьПКС(СвойстваШапки, "УИДОтчета",                "УИДОтчета");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегламентированныеОтчеты_Группа
Процедура ДобавитьПКО_Справочник_РегламентированныеОтчеты_Группа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_РегламентированныеОтчеты_Группа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.РегламентированныеОтчеты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.РегламентированныеОтчетыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",             "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "Описание",        "Описание");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления", "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", , "Справочник_РегламентированныеОтчеты_Группа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Родитель");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов
Процедура ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиДоходов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиДоходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",                "Активность");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",           "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "",                          "Группа", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных", "", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",                  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Родитель,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
	Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
		ДанныеXDTO.Вставить( "Группа", ВыгружаемоеЗначениеСПравилом(ДанныеИБ.Родитель, Ложь) );
		ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", ДанныеXDTO.Группа);
	КонецЕсли;
	
	Если ВыгрузкаТолькоКлючевыхСвойств(ДанныеИБ) Тогда
		Возврат;
	КонецЕсли;
	
	// Выгрузка реквизитов и табличных частей
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ИмяРеквизитаФормата = "Группа";
	ИмяРеквизита        = "Родитель";
	ЗначениеРеквизита   = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство(ИмяРеквизитаФормата, ЗначениеРеквизита) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизита, ЗагружаемоеЗначениеСПравилом(ЗначениеРеквизита));
	КонецЕсли; 
	
	Если ЗагрузкаТолькоКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов
Процедура ДобавитьПКО_Справочник_СтатьиРасходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтатьиРасходов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтатьиРасходов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",                "Активность");
	ДобавитьПКС(СвойстваШапки, "КоличественныйУчет",        "КоличественныйУчет");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",           "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "",                          "Группа", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных", "", 1);
	ДобавитьПКС(СвойстваШапки, "Родитель",                  "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Родитель,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Заполнение ключевых свойств:
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
	Если ЗначениеЗаполнено(ДанныеИБ.Родитель) Тогда
		ДанныеXDTO.Вставить( "Группа", ВыгружаемоеЗначениеСПравилом(ДанныеИБ.Родитель, Ложь) );
		ДанныеXDTO.КлючевыеСвойства.Вставить("Группа", ДанныеXDTO.Группа);
	КонецЕсли;
	
	Если ВыгрузкаТолькоКлючевыхСвойств(ДанныеИБ) Тогда
		Возврат;
	КонецЕсли;
	
	// Выгрузка реквизитов и табличных частей
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Загрузка ключевых свойств
	//ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
	
	ИмяРеквизитаФормата = "Группа";
	ИмяРеквизита        = "Родитель";
	ЗначениеРеквизита   = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство(ИмяРеквизитаФормата, ЗначениеРеквизита) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяРеквизита, ЗагружаемоеЗначениеСПравилом(ЗначениеРеквизита));
	КонецЕсли; 
	
	Если ЗагрузкаТолькоКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_СтраныМира_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СтраныМира_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",    "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "УчастникЕАЭС",       "УчастникЕАЭС");
	ДобавитьПКС(СвойстваШапки, "",                   "", 1);
	ДобавитьПКС(СвойстваШапки, "",                   "ИмяПредопределенныхДанных", 1);

КонецПроцедуры

Процедура ПКО_Справочник_СтраныМира_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_СтраныМира_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_УчетныеЗаписиЭлектроннойПочты
Процедура ДобавитьПКО_Справочник_УчетныеЗаписиЭлектроннойПочты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_УчетныеЗаписиЭлектроннойПочты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.УчетныеЗаписиЭлектроннойПочты";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "SMTPАутентификация",                                "SMTPАутентификация");
	ДобавитьПКС(СвойстваШапки, "АдресЭлектроннойПочты",                             "АдресЭлектроннойПочты");
	ДобавитьПКС(СвойстваШапки, "ВладелецУчетнойЗаписи",                             "ВладелецУчетнойЗаписи");
	ДобавитьПКС(СвойстваШапки, "ВремяОжидания",                                     "ВремяОжидания");
	ДобавитьПКС(СвойстваШапки, "ИмяПользователя",                                   "ИмяПользователя");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьБезопасныйВходНаСерверВходящейПочты",   "ИспользоватьБезопасныйВходНаСерверВходящейПочты");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьБезопасныйВходНаСерверИсходящейПочты",  "ИспользоватьБезопасныйВходНаСерверИсходящейПочты");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьДляОтправки",                           "ИспользоватьДляОтправки");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьДляПолучения",                          "ИспользоватьДляПолучения");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьЗащищенноеСоединениеДляВходящейПочты",  "ИспользоватьЗащищенноеСоединениеДляВходящейПочты");
	ДобавитьПКС(СвойстваШапки, "ИспользоватьЗащищенноеСоединениеДляИсходящейПочты", "ИспользоватьЗащищенноеСоединениеДляИсходящейПочты");
	ДобавитьПКС(СвойстваШапки, "Наименование",                                      "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОставлятьКопииСообщенийНаСервере",                  "ОставлятьКопииСообщенийНаСервере");
	ДобавитьПКС(СвойстваШапки, "ОтправлятьСкрытыеКопииПисемНаЭтотАдрес",            "ОтправлятьСкрытыеКопииПисемНаЭтотАдрес");
	ДобавитьПКС(СвойстваШапки, "ПериодХраненияСообщенийНаСервере",                  "ПериодХраненияСообщенийНаСервере");
	ДобавитьПКС(СвойстваШапки, "Пользователь",                                      "Пользователь");
	ДобавитьПКС(СвойстваШапки, "ПользовательSMTP",                                  "ПользовательSMTP");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",                                   "");
	ДобавитьПКС(СвойстваШапки, "ПортСервераВходящейПочты",                          "ПортСервераВходящейПочты");
	ДобавитьПКС(СвойстваШапки, "ПортСервераИсходящейПочты",                         "ПортСервераИсходящейПочты");
	ДобавитьПКС(СвойстваШапки, "ПротоколВходящейПочты",                             "ПротоколВходящейПочты");
	ДобавитьПКС(СвойстваШапки, "СерверВходящейПочты",                               "СерверВходящейПочты");
	ДобавитьПКС(СвойстваШапки, "СерверИсходящейПочты",                              "СерверИсходящейПочты");
	ДобавитьПКС(СвойстваШапки, "СпособPOP3Аутентификации",                          "СпособPOP3Аутентификации");
	ДобавитьПКС(СвойстваШапки, "СпособSMTPАутентификации",                          "СпособSMTPАутентификации");
	ДобавитьПКС(СвойстваШапки, "ТребуетсяВходНаСерверПередОтправкой",               "ТребуетсяВходНаСерверПередОтправкой");
	ДобавитьПКС(СвойстваШапки, "",                                                  "", 1);
	ДобавитьПКС(СвойстваШапки, "",                                                  "ИмяПредопределенныхДанных", 1);

КонецПроцедуры

Процедура ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФинансовыеЦели
Процедура ДобавитьПКО_Справочник_ФинансовыеЦели(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФинансовыеЦели";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ФинансовыеЦели;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФинансовыеЦели";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_ФинансовыеЦели_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ФинансовыеЦели_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФинансовыеЦели_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Активность",                "Активность");
	ДобавитьПКС(СвойстваШапки, "Валюта",                    "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Комментарий",               "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Наименование",              "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПометкаУдаления",           "ПометкаУдаления");
	ДобавитьПКС(СвойстваШапки, "РеквизитДопУпорядочивания", "РеквизитДопУпорядочивания");
	ДобавитьПКС(СвойстваШапки, "Срок",                      "Срок");
	ДобавитьПКС(СвойстваШапки, "Сумма",                     "Сумма");
	ДобавитьПКС(СвойстваШапки, "",                          "ИмяПредопределенныхДанных", 1);
	ДобавитьПКС(СвойстваШапки, "",                          "ШаблонНакопления", 1);
	ДобавитьПКС(СвойстваШапки, "ИмяПредопределенныхДанных", "", 1);
	ДобавитьПКС(СвойстваШапки, "ШаблонНакопления",          "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "Значение",        "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство",        "Свойство", 1,"ПВХ_ДополнительныеРеквизитыИСведения");
	ДобавитьПКС(СвойстваТЧ, "ТекстоваяСтрока", "ТекстоваяСтрока", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ФинансовыеЦели_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ШаблонНакопления", ВыгружаемоеЗначениеСПравилом(ДанныеИБ.ШаблонНакопления));
	ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ДанныеИБ.Метаданные().ТабличныеЧасти.ДополнительныеРеквизиты);
	ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_ФинансовыеЦели_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO);
	
	// ШаблонНакопления: выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.Свойство("ШаблонНакопления") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ШаблонНакопления", ЗагружаемоеЗначениеСПравилом(ДанныеXDTO.ШаблонНакопления));
	КонецЕсли;
	
	ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, "ДополнительныеРеквизиты", КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_ФинансовыеЦели_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Сохранить дополнительные реквизиты при обмене с мобильным
	ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт

	// ВидыКонтактнойИнформации <-> Виды КИ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ВидыКонтактнойИнформации <-> Виды КИ";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
	ПравилоКонвертации.ТипXDTO   = "ВидыКИ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации, "ВебСтраница");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "ТелефонРабочий");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "ТелефонДомашний");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
	ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	ЗначенияДляПолучения.Вставить("ВебСтраница", Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	ЗначенияДляПолучения.Вставить("ПочтовыйАдрес", Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	ЗначенияДляПолучения.Вставить("Телефон", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ЗначенияДляПолучения.Вставить("ТелефонРабочий", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ЗначенияДляПолучения.Вставить("ТелефонДомашний", Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ЗначенияДляПолучения.Вставить("Факс", Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	ЗначенияДляПолучения.Вставить("ФактическийАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ЗначенияДляПолучения.Вставить("ЮридическийАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ВидыПравилДляОбменаДанными.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ВидыПравилДляОбменаДанными";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыПравилДляОбменаДанными;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыПравилДляОбменаДанными";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов, "ПравилаКонвертацииОбъектов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов, "ПравилаРегистрацииОбъектов");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПравилаКонвертацииОбъектов", Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов);
	ЗначенияДляПолучения.Вставить("ПравилаРегистрацииОбъектов", Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ВидыРасходов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ВидыРасходов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыРасходов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыРасходов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ВзаимныеРасчеты, "ВзаимныеРасчеты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ВозвратВзятыхДолгов, "ВозвратВзятыхДолгов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ВыдачаВДолг, "ВыдачаВДолг");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ОбменВалюты, "ОбменВалюты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ПереводВДругиеКошельки, "ПереводВДругиеКошельки");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ПереводВНакопления, "ПереводВНакопления");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ПереводИзНакоплений, "ПереводИзНакоплений");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.ПокупкаИмущества, "ПокупкаИмущества");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыРасходов.РасходыПоСтатьям, "РасходыПоСтатьям");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВзаимныеРасчеты", Перечисления.ВидыРасходов.ВзаимныеРасчеты);
	ЗначенияДляПолучения.Вставить("ВозвратВзятыхДолгов", Перечисления.ВидыРасходов.ВозвратВзятыхДолгов);
	ЗначенияДляПолучения.Вставить("ВыдачаВДолг", Перечисления.ВидыРасходов.ВыдачаВДолг);
	ЗначенияДляПолучения.Вставить("ОбменВалюты", Перечисления.ВидыРасходов.ОбменВалюты);
	ЗначенияДляПолучения.Вставить("ПереводВДругиеКошельки", Перечисления.ВидыРасходов.ПереводВДругиеКошельки);
	ЗначенияДляПолучения.Вставить("ПереводВНакопления", Перечисления.ВидыРасходов.ПереводВНакопления);
	ЗначенияДляПолучения.Вставить("ПереводИзНакоплений", Перечисления.ВидыРасходов.ПереводИзНакоплений);
	ЗначенияДляПолучения.Вставить("ПокупкаИмущества", Перечисления.ВидыРасходов.ПокупкаИмущества);
	ЗначенияДляПолучения.Вставить("РасходыПоСтатьям", Перечисления.ВидыРасходов.РасходыПоСтатьям);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ВидыТранспортаСообщенийОбмена.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ВидыТранспортаСообщенийОбмена";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыТранспортаСообщенийОбмена;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыТранспортаСообщенийОбмена";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.COM, "COM");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox, "Dropbox");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL, "EMAIL");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE, "FILE");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP, "FTP");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.GoogleDrive, "GoogleDrive");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.WS, "WS");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск, "ЯндексДиск");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("COM", Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	ЗначенияДляПолучения.Вставить("Dropbox", Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox);
	ЗначенияДляПолучения.Вставить("EMAIL", Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	ЗначенияДляПолучения.Вставить("FILE", Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	ЗначенияДляПолучения.Вставить("FTP", Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	ЗначенияДляПолучения.Вставить("GoogleDrive", Перечисления.ВидыТранспортаСообщенийОбмена.GoogleDrive);
	ЗначенияДляПолучения.Вставить("WS", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	ЗначенияДляПолучения.Вставить("ЯндексДиск", Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ДействияПриОбмене.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ДействияПриОбмене";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ДействияПриОбмене;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ДействияПриОбмене";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ДействияПриОбмене.ВыгрузкаДанных, "ВыгрузкаДанных");
	ЗначенияДляОтправки.Вставить(Перечисления.ДействияПриОбмене.ЗагрузкаДанных, "ЗагрузкаДанных");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВыгрузкаДанных", Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	ЗначенияДляПолучения.Вставить("ЗагрузкаДанных", Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ДействияРасписания.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ДействияРасписания";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ДействияРасписания;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ДействияРасписания";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ДействияРасписания.Выполнить, "Выполнить");
	ЗначенияДляОтправки.Вставить(Перечисления.ДействияРасписания.Изменить, "Изменить");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Выполнить", Перечисления.ДействияРасписания.Выполнить);
	ЗначенияДляПолучения.Вставить("Изменить", Перечисления.ДействияРасписания.Изменить);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ДниНедели.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ДниНедели";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ДниНедели;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ДниНедели";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.Воскресенье, "Воскресенье");
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.Вторник, "Вторник");
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.День, "День");
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.Понедельник, "Понедельник");
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.Пятница, "Пятница");
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.Среда, "Среда");
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.Суббота, "Суббота");
	ЗначенияДляОтправки.Вставить(Перечисления.ДниНедели.Четверг, "Четверг");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Воскресенье", Перечисления.ДниНедели.Воскресенье);
	ЗначенияДляПолучения.Вставить("Вторник", Перечисления.ДниНедели.Вторник);
	ЗначенияДляПолучения.Вставить("День", Перечисления.ДниНедели.День);
	ЗначенияДляПолучения.Вставить("Понедельник", Перечисления.ДниНедели.Понедельник);
	ЗначенияДляПолучения.Вставить("Пятница", Перечисления.ДниНедели.Пятница);
	ЗначенияДляПолучения.Вставить("Среда", Перечисления.ДниНедели.Среда);
	ЗначенияДляПолучения.Вставить("Суббота", Перечисления.ДниНедели.Суббота);
	ЗначенияДляПолучения.Вставить("Четверг", Перечисления.ДниНедели.Четверг);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ИсточникиПравилДляОбменаДанными.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ИсточникиПравилДляОбменаДанными";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ИсточникиПравилДляОбменаДанными;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ИсточникиПравилДляОбменаДанными";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации, "МакетКонфигурации");
	ЗначенияДляОтправки.Вставить(Перечисления.ИсточникиПравилДляОбменаДанными.Файл, "Файл");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("МакетКонфигурации", Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации);
	ЗначенияДляПолучения.Вставить("Файл", Перечисления.ИсточникиПравилДляОбменаДанными.Файл);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.КатегорииИсточниковФинансирования.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.КатегорииИсточниковФинансирования";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.КатегорииИсточниковФинансирования;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.КатегорииИсточниковФинансирования";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.КатегорииИсточниковФинансирования.ДоступныеКредитныеЛимиты, "ДоступныеКредитныеЛимиты");
	ЗначенияДляОтправки.Вставить(Перечисления.КатегорииИсточниковФинансирования.НакопленияБезКонкретнойЦели, "НакопленияБезКонкретнойЦели");
	ЗначенияДляОтправки.Вставить(Перечисления.КатегорииИсточниковФинансирования.НакопленияНаКонкретныеЦели, "НакопленияНаКонкретныеЦели");
	ЗначенияДляОтправки.Вставить(Перечисления.КатегорииИсточниковФинансирования.СвободныеДеньги, "СвободныеДеньги");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДоступныеКредитныеЛимиты", Перечисления.КатегорииИсточниковФинансирования.ДоступныеКредитныеЛимиты);
	ЗначенияДляПолучения.Вставить("НакопленияБезКонкретнойЦели", Перечисления.КатегорииИсточниковФинансирования.НакопленияБезКонкретнойЦели);
	ЗначенияДляПолучения.Вставить("НакопленияНаКонкретныеЦели", Перечисления.КатегорииИсточниковФинансирования.НакопленияНаКонкретныеЦели);
	ЗначенияДляПолучения.Вставить("СвободныеДеньги", Перечисления.КатегорииИсточниковФинансирования.СвободныеДеньги);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ОтображениеКнопкиКоманднойПанели.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ОтображениеКнопкиКоманднойПанели";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ОтображениеКнопкиКоманднойПанели;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ОтображениеКнопкиКоманднойПанели";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ОтображениеКнопкиКоманднойПанели.Авто, "Авто");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтображениеКнопкиКоманднойПанели.Картинка, "Картинка");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтображениеКнопкиКоманднойПанели.КартинкаНадпись, "КартинкаНадпись");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтображениеКнопкиКоманднойПанели.Надпись, "Надпись");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Авто", Перечисления.ОтображениеКнопкиКоманднойПанели.Авто);
	ЗначенияДляПолучения.Вставить("Картинка", Перечисления.ОтображениеКнопкиКоманднойПанели.Картинка);
	ЗначенияДляПолучения.Вставить("КартинкаНадпись", Перечисления.ОтображениеКнопкиКоманднойПанели.КартинкаНадпись);
	ЗначенияДляПолучения.Вставить("Надпись", Перечисления.ОтображениеКнопкиКоманднойПанели.Надпись);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.Периодичность.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.Периодичность";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.Периодичность;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.Периодичность";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Год, "Год");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Декада, "Декада");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.День, "День");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Квартал, "Квартал");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Месяц, "Месяц");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Неделя, "Неделя");
	ЗначенияДляОтправки.Вставить(Перечисления.Периодичность.Полугодие, "Полугодие");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Год", Перечисления.Периодичность.Год);
	ЗначенияДляПолучения.Вставить("Декада", Перечисления.Периодичность.Декада);
	ЗначенияДляПолучения.Вставить("День", Перечисления.Периодичность.День);
	ЗначенияДляПолучения.Вставить("Квартал", Перечисления.Периодичность.Квартал);
	ЗначенияДляПолучения.Вставить("Месяц", Перечисления.Периодичность.Месяц);
	ЗначенияДляПолучения.Вставить("Неделя", Перечисления.Периодичность.Неделя);
	ЗначенияДляПолучения.Вставить("Полугодие", Перечисления.Периодичность.Полугодие);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ПериодичностьПланирования.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ПериодичностьПланирования";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПериодичностьПланирования;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ПериодичностьПланирования";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПериодичностьПланирования.Год, "Год");
	ЗначенияДляОтправки.Вставить(Перечисления.ПериодичностьПланирования.День, "День");
	ЗначенияДляОтправки.Вставить(Перечисления.ПериодичностьПланирования.Квартал, "Квартал");
	ЗначенияДляОтправки.Вставить(Перечисления.ПериодичностьПланирования.Месяц, "Месяц");
	ЗначенияДляОтправки.Вставить(Перечисления.ПериодичностьПланирования.Неделя, "Неделя");
	ЗначенияДляОтправки.Вставить(Перечисления.ПериодичностьПланирования.Произвольно, "Произвольно");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Год", Перечисления.ПериодичностьПланирования.Год);
	ЗначенияДляПолучения.Вставить("День", Перечисления.ПериодичностьПланирования.День);
	ЗначенияДляПолучения.Вставить("Квартал", Перечисления.ПериодичностьПланирования.Квартал);
	ЗначенияДляПолучения.Вставить("Месяц", Перечисления.ПериодичностьПланирования.Месяц);
	ЗначенияДляПолучения.Вставить("Неделя", Перечисления.ПериодичностьПланирования.Неделя);
	ЗначенияДляПолучения.Вставить("Произвольно", Перечисления.ПериодичностьПланирования.Произвольно);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ПорядкиОкругленияОтчетности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ПорядкиОкругленияОтчетности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядкиОкругленияОтчетности;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ПорядкиОкругленияОтчетности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, "Окр1");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, "Окр1000");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, "Окр1000000");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Окр1", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ЗначенияДляПолучения.Вставить("Окр1000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ЗначенияДляПолучения.Вставить("Окр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ПриоритетыОбъектовОбмена.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ПриоритетыОбъектовОбмена";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПриоритетыОбъектовОбмена;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ПриоритетыОбъектовОбмена";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПриоритетыОбъектовОбмена.ПриоритетОбъектаОбменаВыше, "ПриоритетОбъектаОбменаВыше");
	ЗначенияДляОтправки.Вставить(Перечисления.ПриоритетыОбъектовОбмена.ПриоритетОбъектаОбменаНиже, "ПриоритетОбъектаОбменаНиже");
	ЗначенияДляОтправки.Вставить(Перечисления.ПриоритетыОбъектовОбмена.ПриоритетОбъектаОбменаСовпадает, "ПриоритетОбъектаОбменаСовпадает");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПриоритетОбъектаОбменаВыше", Перечисления.ПриоритетыОбъектовОбмена.ПриоритетОбъектаОбменаВыше);
	ЗначенияДляПолучения.Вставить("ПриоритетОбъектаОбменаНиже", Перечисления.ПриоритетыОбъектовОбмена.ПриоритетОбъектаОбменаНиже);
	ЗначенияДляПолучения.Вставить("ПриоритетОбъектаОбменаСовпадает", Перечисления.ПриоритетыОбъектовОбмена.ПриоритетОбъектаОбменаСовпадает);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.РежимыВыгрузкиОбъектовОбмена.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.РежимыВыгрузкиОбъектовОбмена";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.РежимыВыгрузкиОбъектовОбмена;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.РежимыВыгрузкиОбъектовОбмена";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную, "ВыгружатьВручную");
	ЗначенияДляОтправки.Вставить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда, "ВыгружатьВсегда");
	ЗначенияДляОтправки.Вставить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию, "ВыгружатьПоУсловию");
	ЗначенияДляОтправки.Вставить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости, "ВыгружатьПриНеобходимости");
	ЗначенияДляОтправки.Вставить(Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать, "НеВыгружать");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВыгружатьВручную", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную);
	ЗначенияДляПолучения.Вставить("ВыгружатьВсегда", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда);
	ЗначенияДляПолучения.Вставить("ВыгружатьПоУсловию", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	ЗначенияДляПолучения.Вставить("ВыгружатьПриНеобходимости", Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	ЗначенияДляПолучения.Вставить("НеВыгружать", Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.РежимыСовместимостиРазрешенийДополнит.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.РежимыСовместимостиРазрешенийДополнит";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3, "Версия_2_1_3");
	ЗначенияДляОтправки.Вставить(Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2, "Версия_2_2_2");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Версия_2_1_3", Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_1_3);
	ЗначенияДляПолучения.Вставить("Версия_2_2_2", Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.РезультатыВыполненияОбмена.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.РезультатыВыполненияОбмена";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.РезультатыВыполненияОбмена;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.РезультатыВыполненияОбмена";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.РезультатыВыполненияОбмена.Выполнено, "Выполнено");
	ЗначенияДляОтправки.Вставить(Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями, "ВыполненоСПредупреждениями");
	ЗначенияДляОтправки.Вставить(Перечисления.РезультатыВыполненияОбмена.Отменено, "Отменено");
	ЗначенияДляОтправки.Вставить(Перечисления.РезультатыВыполненияОбмена.Ошибка, "Ошибка");
	ЗначенияДляОтправки.Вставить(Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения, "Ошибка_ТранспортСообщения");
	ЗначенияДляОтправки.Вставить(Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято, "Предупреждение_СообщениеОбменаБылоРанееПринято");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Выполнено", Перечисления.РезультатыВыполненияОбмена.Выполнено);
	ЗначенияДляПолучения.Вставить("ВыполненоСПредупреждениями", Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями);
	ЗначенияДляПолучения.Вставить("Отменено", Перечисления.РезультатыВыполненияОбмена.Отменено);
	ЗначенияДляПолучения.Вставить("Ошибка", Перечисления.РезультатыВыполненияОбмена.Ошибка);
	ЗначенияДляПолучения.Вставить("Ошибка_ТранспортСообщения", Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения);
	ЗначенияДляПолучения.Вставить("Предупреждение_СообщениеОбменаБылоРанееПринято", Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СообщенияДляРегОтчетов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СообщенияДляРегОтчетов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СообщенияДляРегОтчетов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СообщенияДляРегОтчетов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СообщенияДляРегОтчетов.СдачаОтчета, "СдачаОтчета");
	ЗначенияДляОтправки.Вставить(Перечисления.СообщенияДляРегОтчетов.УплатаНалога, "УплатаНалога");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СдачаОтчета", Перечисления.СообщенияДляРегОтчетов.СдачаОтчета);
	ЗначенияДляПолучения.Вставить("УплатаНалога", Перечисления.СообщенияДляРегОтчетов.УплатаНалога);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СостоянияРасписания.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СостоянияРасписания";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СостоянияРасписания;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СостоянияРасписания";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияРасписания.Выполнено, "Выполнено");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияРасписания.Запланировано, "Запланировано");
	ЗначенияДляОтправки.Вставить(Перечисления.СостоянияРасписания.Пропущено, "Пропущено");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Выполнено", Перечисления.СостоянияРасписания.Выполнено);
	ЗначенияДляПолучения.Вставить("Запланировано", Перечисления.СостоянияРасписания.Запланировано);
	ЗначенияДляПолучения.Вставить("Пропущено", Перечисления.СостоянияРасписания.Пропущено);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СпособОткрытияПрикрепленногоФайла.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СпособОткрытияПрикрепленногоФайла";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособОткрытияПрикрепленногоФайла;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СпособОткрытияПрикрепленногоФайла";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособОткрытияПрикрепленногоФайла.КакHTML, "КакHTML");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособОткрытияПрикрепленногоФайла.КакАудиоФайл, "КакАудиоФайл");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособОткрытияПрикрепленногоФайла.КакВидеоЗапись, "КакВидеоЗапись");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособОткрытияПрикрепленногоФайла.КакДокументПлатформы, "КакДокументПлатформы");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособОткрытияПрикрепленногоФайла.КакИзображение, "КакИзображение");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособОткрытияПрикрепленногоФайла.КакТекст, "КакТекст");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособОткрытияПрикрепленногоФайла.СредствамиОС, "СредствамиОС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("КакHTML", Перечисления.СпособОткрытияПрикрепленногоФайла.КакHTML);
	ЗначенияДляПолучения.Вставить("КакАудиоФайл", Перечисления.СпособОткрытияПрикрепленногоФайла.КакАудиоФайл);
	ЗначенияДляПолучения.Вставить("КакВидеоЗапись", Перечисления.СпособОткрытияПрикрепленногоФайла.КакВидеоЗапись);
	ЗначенияДляПолучения.Вставить("КакДокументПлатформы", Перечисления.СпособОткрытияПрикрепленногоФайла.КакДокументПлатформы);
	ЗначенияДляПолучения.Вставить("КакИзображение", Перечисления.СпособОткрытияПрикрепленногоФайла.КакИзображение);
	ЗначенияДляПолучения.Вставить("КакТекст", Перечисления.СпособОткрытияПрикрепленногоФайла.КакТекст);
	ЗначенияДляПолучения.Вставить("СредствамиОС", Перечисления.СпособОткрытияПрикрепленногоФайла.СредствамиОС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СпособыВызоваДополнительныхОбработок.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СпособыВызоваДополнительныхОбработок";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыВызоваДополнительныхОбработок;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СпособыВызоваДополнительныхОбработок";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода, "ВызовКлиентскогоМетода");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода, "ВызовСерверногоМетода");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыВызоваДополнительныхОбработок.ЗагрузкаДанныхИзФайла, "ЗагрузкаДанныхИзФайла");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыВызоваДополнительныхОбработок.ЗаполнениеФормы, "ЗаполнениеФормы");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы, "ОткрытиеФормы");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме, "СценарийВБезопасномРежиме");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВызовКлиентскогоМетода", Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода);
	ЗначенияДляПолучения.Вставить("ВызовСерверногоМетода", Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода);
	ЗначенияДляПолучения.Вставить("ЗагрузкаДанныхИзФайла", Перечисления.СпособыВызоваДополнительныхОбработок.ЗагрузкаДанныхИзФайла);
	ЗначенияДляПолучения.Вставить("ЗаполнениеФормы", Перечисления.СпособыВызоваДополнительныхОбработок.ЗаполнениеФормы);
	ЗначенияДляПолучения.Вставить("ОткрытиеФормы", Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы);
	ЗначенияДляПолучения.Вставить("СценарийВБезопасномРежиме", Перечисления.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СпособыПовторовСобытий.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СпособыПовторовСобытий";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПовторовСобытий;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СпособыПовторовСобытий";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.ВУказанныеДаты, "ВУказанныеДаты");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.ЕжегодноПоДнямНедели, "ЕжегодноПоДнямНедели");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.ЕжегодноПоЧислам, "ЕжегодноПоЧислам");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.Ежедневно, "Ежедневно");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.ЕжемесячноПоДнямНедели, "ЕжемесячноПоДнямНедели");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.ЕжемесячноПоЧислам, "ЕжемесячноПоЧислам");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.Еженедельно, "Еженедельно");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПовторовСобытий.НеИспользовать, "НеИспользовать");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВУказанныеДаты", Перечисления.СпособыПовторовСобытий.ВУказанныеДаты);
	ЗначенияДляПолучения.Вставить("ЕжегодноПоДнямНедели", Перечисления.СпособыПовторовСобытий.ЕжегодноПоДнямНедели);
	ЗначенияДляПолучения.Вставить("ЕжегодноПоЧислам", Перечисления.СпособыПовторовСобытий.ЕжегодноПоЧислам);
	ЗначенияДляПолучения.Вставить("Ежедневно", Перечисления.СпособыПовторовСобытий.Ежедневно);
	ЗначенияДляПолучения.Вставить("ЕжемесячноПоДнямНедели", Перечисления.СпособыПовторовСобытий.ЕжемесячноПоДнямНедели);
	ЗначенияДляПолучения.Вставить("ЕжемесячноПоЧислам", Перечисления.СпособыПовторовСобытий.ЕжемесячноПоЧислам);
	ЗначенияДляПолучения.Вставить("Еженедельно", Перечисления.СпособыПовторовСобытий.Еженедельно);
	ЗначенияДляПолучения.Вставить("НеИспользовать", Перечисления.СпособыПовторовСобытий.НеИспользовать);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СпособыПогашенияКредита.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СпособыПогашенияКредита";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПогашенияКредита;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СпособыПогашенияКредита";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияКредита.Аннуитет, "Аннуитет");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияКредита.Вручную, "Вручную");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияКредита.ДифференцированныеПлатежи, "ДифференцированныеПлатежи");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПогашенияКредита.РазовыйПлатеж, "РазовыйПлатеж");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Аннуитет", Перечисления.СпособыПогашенияКредита.Аннуитет);
	ЗначенияДляПолучения.Вставить("Вручную", Перечисления.СпособыПогашенияКредита.Вручную);
	ЗначенияДляПолучения.Вставить("ДифференцированныеПлатежи", Перечисления.СпособыПогашенияКредита.ДифференцированныеПлатежи);
	ЗначенияДляПолучения.Вставить("РазовыйПлатеж", Перечисления.СпособыПогашенияКредита.РазовыйПлатеж);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СпособыРедактированияЭлектронныхПисем.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СпособыРедактированияЭлектронныхПисем";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРедактированияЭлектронныхПисем;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СпособыРедактированияЭлектронныхПисем";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРедактированияЭлектронныхПисем.HTML, "HTML");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст, "ОбычныйТекст");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("HTML", Перечисления.СпособыРедактированияЭлектронныхПисем.HTML);
	ЗначенияДляПолучения.Вставить("ОбычныйТекст", Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СпособыУстановкиВремениНапоминания.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СпособыУстановкиВремениНапоминания";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыУстановкиВремениНапоминания;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СпособыУстановкиВремениНапоминания";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя, "ВУказанноеВремя");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета, "ОтносительноВремениПредмета");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени, "ОтносительноТекущегоВремени");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиВремениНапоминания.Периодически, "Периодически");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВУказанноеВремя", Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя);
	ЗначенияДляПолучения.Вставить("ОтносительноВремениПредмета", Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета);
	ЗначенияДляПолучения.Вставить("ОтносительноТекущегоВремени", Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени);
	ЗначенияДляПолучения.Вставить("Периодически", Перечисления.СпособыУстановкиВремениНапоминания.Периодически);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СпособыУстановкиКурсаВалюты.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СпособыУстановкиКурсаВалюты";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыУстановкиКурсаВалюты;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СпособыУстановкиКурсаВалюты";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета, "ЗагрузкаИзИнтернета");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиКурсаВалюты.НаценкаНаКурсДругойВалюты, "НаценкаНаКурсДругойВалюты");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиКурсаВалюты.РасчетПоФормуле, "РасчетПоФормуле");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод, "РучнойВвод");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ЗагрузкаИзИнтернета", Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета);
	ЗначенияДляПолучения.Вставить("НаценкаНаКурсДругойВалюты", Перечисления.СпособыУстановкиКурсаВалюты.НаценкаНаКурсДругойВалюты);
	ЗначенияДляПолучения.Вставить("РасчетПоФормуле", Перечисления.СпособыУстановкиКурсаВалюты.РасчетПоФормуле);
	ЗначенияДляПолучения.Вставить("РучнойВвод", Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СтатусыПроверкиЭЦП.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СтатусыПроверкиЭЦП";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыПроверкиЭЦП;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СтатусыПроверкиЭЦП";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыПроверкиЭЦП.Валидна, "Валидна");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыПроверкиЭЦП.НеВалидна, "НеВалидна");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Валидна", Перечисления.СтатусыПроверкиЭЦП.Валидна);
	ЗначенияДляПолучения.Вставить("НеВалидна", Перечисления.СтатусыПроверкиЭЦП.НеВалидна);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СтатусыРегламентированныхОтчетов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СтатусыРегламентированныхОтчетов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтатусыРегламентированныхОтчетов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СтатусыРегламентированныхОтчетов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе, "ВРаботе");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен, "Подготовлен");
	ЗначенияДляОтправки.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.Сдан, "Сдан");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВРаботе", Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе);
	ЗначенияДляПолучения.Вставить("Подготовлен", Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
	ЗначенияДляПолучения.Вставить("Сдан", Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СтороныРазделовУчета.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СтороныРазделовУчета";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтороныРазделовУчета;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СтороныРазделовУчета";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтороныРазделовУчета.Актив, "Актив");
	ЗначенияДляОтправки.Вставить(Перечисления.СтороныРазделовУчета.Пассив, "Пассив");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Актив", Перечисления.СтороныРазделовУчета.Актив);
	ЗначенияДляПолучения.Вставить("Пассив", Перечисления.СтороныРазделовУчета.Пассив);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.СценарииОбменаСМобильнымПриложением.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.СценарииОбменаСМобильнымПриложением";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СценарииОбменаСМобильнымПриложением;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.СценарииОбменаСМобильнымПриложением";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СценарииОбменаСМобильнымПриложением.МобильныеЗаменитьНастольными, "МобильныеЗаменитьНастольными");
	ЗначенияДляОтправки.Вставить(Перечисления.СценарииОбменаСМобильнымПриложением.НастольныеЗаменитьМобильными, "НастольныеЗаменитьМобильными");
	ЗначенияДляОтправки.Вставить(Перечисления.СценарииОбменаСМобильнымПриложением.ОбъединениеДанных, "ОбъединениеДанных");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("МобильныеЗаменитьНастольными", Перечисления.СценарииОбменаСМобильнымПриложением.МобильныеЗаменитьНастольными);
	ЗначенияДляПолучения.Вставить("НастольныеЗаменитьМобильными", Перечисления.СценарииОбменаСМобильнымПриложением.НастольныеЗаменитьМобильными);
	ЗначенияДляПолучения.Вставить("ОбъединениеДанных", Перечисления.СценарииОбменаСМобильнымПриложением.ОбъединениеДанных);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыБюджетныхПоказателей.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыБюджетныхПоказателей";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыБюджетныхПоказателей;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыБюджетныхПоказателей";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыБюджетныхПоказателей.Перемещение, "Перемещение");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыБюджетныхПоказателей.Поступление, "Поступление");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыБюджетныхПоказателей.Списание, "Списание");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Перемещение", Перечисления.ТипыБюджетныхПоказателей.Перемещение);
	ЗначенияДляПолучения.Вставить("Поступление", Перечисления.ТипыБюджетныхПоказателей.Поступление);
	ЗначенияДляПолучения.Вставить("Списание", Перечисления.ТипыБюджетныхПоказателей.Списание);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыВерсийОбъекта.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыВерсийОбъекта";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыВерсийОбъекта;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыВерсийОбъекта";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыВерсийОбъекта.ИзмененоПользователем, "ИзмененоПользователем");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоКоллизии, "НепринятыеДанныеПоКоллизии");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыВерсийОбъекта.НепринятыйПоДатеЗапретаОбъектНеСуществуетВБазе, "НепринятыйПоДатеЗапретаОбъектНеСуществуетВБазе");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыВерсийОбъекта.НепринятыйПоДатеЗапретаОбъектСуществуетВБазе, "НепринятыйПоДатеЗапретаОбъектСуществуетВБазе");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыВерсийОбъекта.ПринятыеДанныеПоКоллизии, "ПринятыеДанныеПоКоллизии");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИзмененоПользователем", Перечисления.ТипыВерсийОбъекта.ИзмененоПользователем);
	ЗначенияДляПолучения.Вставить("НепринятыеДанныеПоКоллизии", Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоКоллизии);
	ЗначенияДляПолучения.Вставить("НепринятыйПоДатеЗапретаОбъектНеСуществуетВБазе", Перечисления.ТипыВерсийОбъекта.НепринятыйПоДатеЗапретаОбъектНеСуществуетВБазе);
	ЗначенияДляПолучения.Вставить("НепринятыйПоДатеЗапретаОбъектСуществуетВБазе", Перечисления.ТипыВерсийОбъекта.НепринятыйПоДатеЗапретаОбъектСуществуетВБазе);
	ЗначенияДляПолучения.Вставить("ПринятыеДанныеПоКоллизии", Перечисления.ТипыВерсийОбъекта.ПринятыеДанныеПоКоллизии);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыДанныхКэшаПрограммныхИнтерфейсов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыДанныхКэшаПрограммныхИнтерфейсов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыДанныхКэшаПрограммныхИнтерфейсов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов.ВерсииИнтерфейса, "ВерсииИнтерфейса");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов.ОписаниеWebСервиса, "ОписаниеWebСервиса");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВерсииИнтерфейса", Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов.ВерсииИнтерфейса);
	ЗначенияДляПолучения.Вставить("ОписаниеWebСервиса", Перечисления.ТипыДанныхКэшаПрограммныхИнтерфейсов.ОписаниеWebСервиса);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыДолгов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыДолгов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыДолгов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыДолгов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыДолгов.ВзаимныйРасчет, "ВзаимныйРасчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыДолгов.ВыданныйЗаем, "ВыданныйЗаем");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыДолгов.ПолученныйКредит, "ПолученныйКредит");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВзаимныйРасчет", Перечисления.ТипыДолгов.ВзаимныйРасчет);
	ЗначенияДляПолучения.Вставить("ВыданныйЗаем", Перечисления.ТипыДолгов.ВыданныйЗаем);
	ЗначенияДляПолучения.Вставить("ПолученныйКредит", Перечисления.ТипыДолгов.ПолученныйКредит);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыЗагружаемыхДокументов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыЗагружаемыхДокументов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыЗагружаемыхДокументов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыЗагружаемыхДокументов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка, "ВыпискаБанка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВыпискаБанка", Перечисления.ТипыЗагружаемыхДокументов.ВыпискаБанка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыКонтактнойИнформации.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыКонтактнойИнформации";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыКонтактнойИнформации;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыКонтактнойИнформации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Skype, "Skype");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, "Адрес");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, "АдресЭлектроннойПочты");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, "ВебСтраница");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, "Другое");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, "Телефон");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыКонтактнойИнформации.Факс, "Факс");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Skype", Перечисления.ТипыКонтактнойИнформации.Skype);
	ЗначенияДляПолучения.Вставить("Адрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗначенияДляПолучения.Вставить("АдресЭлектроннойПочты", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ЗначенияДляПолучения.Вставить("ВебСтраница", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ЗначенияДляПолучения.Вставить("Другое", Перечисления.ТипыКонтактнойИнформации.Другое);
	ЗначенияДляПолучения.Вставить("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	ЗначенияДляПолучения.Вставить("Факс", Перечисления.ТипыКонтактнойИнформации.Факс);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыПроблемОбменаДанными.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыПроблемОбменаДанными";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыПроблемОбменаДанными;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыПроблемОбменаДанными";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПроблемОбменаДанными.НезаполненныеРеквизиты, "НезаполненныеРеквизиты");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПроблемОбменаДанными.НепроведенныйДокумент, "НепроведенныйДокумент");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НезаполненныеРеквизиты", Перечисления.ТипыПроблемОбменаДанными.НезаполненныеРеквизиты);
	ЗначенияДляПолучения.Вставить("НепроведенныйДокумент", Перечисления.ТипыПроблемОбменаДанными.НепроведенныйДокумент);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыПровайдеровREST.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыПровайдеровREST";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыПровайдеровREST;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыПровайдеровREST";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПровайдеровREST.Dropbox, "Dropbox");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПровайдеровREST.Google, "Google");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыПровайдеровREST.Яндекс, "Яндекс");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Dropbox", Перечисления.ТипыПровайдеровREST.Dropbox);
	ЗначенияДляПолучения.Вставить("Google", Перечисления.ТипыПровайдеровREST.Google);
	ЗначенияДляПолучения.Вставить("Яндекс", Перечисления.ТипыПровайдеровREST.Яндекс);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыСчетов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыСчетов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСчетов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыСчетов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетов.БанковскаяКартаДебетовая, "БанковскаяКартаДебетовая");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетов.БанковскаяКартаКредитная, "БанковскаяКартаКредитная");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетов.БанковскаяКартаУниверсальная, "БанковскаяКартаУниверсальная");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетов.БанковскийСчет, "БанковскийСчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетов.Наличность, "Наличность");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетов.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетов.ЭлектронныйКошелек, "ЭлектронныйКошелек");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БанковскаяКартаДебетовая", Перечисления.ТипыСчетов.БанковскаяКартаДебетовая);
	ЗначенияДляПолучения.Вставить("БанковскаяКартаКредитная", Перечисления.ТипыСчетов.БанковскаяКартаКредитная);
	ЗначенияДляПолучения.Вставить("БанковскаяКартаУниверсальная", Перечисления.ТипыСчетов.БанковскаяКартаУниверсальная);
	ЗначенияДляПолучения.Вставить("БанковскийСчет", Перечисления.ТипыСчетов.БанковскийСчет);
	ЗначенияДляПолучения.Вставить("Наличность", Перечисления.ТипыСчетов.Наличность);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ТипыСчетов.Прочее);
	ЗначенияДляПолучения.Вставить("ЭлектронныйКошелек", Перечисления.ТипыСчетов.ЭлектронныйКошелек);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыСчетчиковВыгрузки.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыСчетчиковВыгрузки";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСчетчиковВыгрузки;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыСчетчиковВыгрузки";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко, "СчетчикДокументовАлко");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате201, "СчетчикДокументовВФормате201");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате300, "СчетчикДокументовВФормате300");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, "СчетчикФайлов");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайловАлко, "СчетчикФайловАлко");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СчетчикДокументовАлко", Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко);
	ЗначенияДляПолучения.Вставить("СчетчикДокументовВФормате201", Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате201);
	ЗначенияДляПолучения.Вставить("СчетчикДокументовВФормате300", Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате300);
	ЗначенияДляПолучения.Вставить("СчетчикФайлов", Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов);
	ЗначенияДляПолучения.Вставить("СчетчикФайловАлко", Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайловАлко);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ТипыТекстовЭлектронныхПисем.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ТипыТекстовЭлектронныхПисем";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыТекстовЭлектронныхПисем;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ТипыТекстовЭлектронныхПисем";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыТекстовЭлектронныхПисем.HTML, "HTML");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками, "HTMLСКартинками");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст, "ПростойТекст");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст, "РазмеченныйТекст");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("HTML", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	ЗначенияДляПолучения.Вставить("HTMLСКартинками", Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками);
	ЗначенияДляПолучения.Вставить("ПростойТекст", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	ЗначенияДляПолучения.Вставить("РазмеченныйТекст", Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление.ФорматыСохраненияОтчетов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление.ФорматыСохраненияОтчетов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ФорматыСохраненияОтчетов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ФорматыСохраненияОтчетов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.ANSITXT, "ANSITXT");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.DOCX, "DOCX");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.HTML, "HTML");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.HTML4, "HTML4");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.MXL, "MXL");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.ODS, "ODS");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.PDF, "PDF");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.TXT, "TXT");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.XLS, "XLS");
	ЗначенияДляОтправки.Вставить(Перечисления.ФорматыСохраненияОтчетов.XLSX, "XLSX");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ANSITXT", Перечисления.ФорматыСохраненияОтчетов.ANSITXT);
	ЗначенияДляПолучения.Вставить("DOCX", Перечисления.ФорматыСохраненияОтчетов.DOCX);
	ЗначенияДляПолучения.Вставить("HTML", Перечисления.ФорматыСохраненияОтчетов.HTML);
	ЗначенияДляПолучения.Вставить("HTML4", Перечисления.ФорматыСохраненияОтчетов.HTML4);
	ЗначенияДляПолучения.Вставить("MXL", Перечисления.ФорматыСохраненияОтчетов.MXL);
	ЗначенияДляПолучения.Вставить("ODS", Перечисления.ФорматыСохраненияОтчетов.ODS);
	ЗначенияДляПолучения.Вставить("PDF", Перечисления.ФорматыСохраненияОтчетов.PDF);
	ЗначенияДляПолучения.Вставить("TXT", Перечисления.ФорматыСохраненияОтчетов.TXT);
	ЗначенияДляПолучения.Вставить("XLS", Перечисления.ФорматыСохраненияОтчетов.XLS);
	ЗначенияДляПолучения.Вставить("XLSX", Перечисления.ФорматыСохраненияОтчетов.XLSX);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВариантыНаименованияДляПечатных.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВариантыНаименованияДляПечатных";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыНаименованияДляПечатныхФорм;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВариантыНаименованияДляПечатныхФорм";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование, "ПолноеНаименование");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование, "СокращенноеНаименование");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ПолноеНаименование", Перечисления.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование);
	ЗначенияДляПолучения.Вставить("СокращенноеНаименование", Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВариантыОтчета.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВариантыОтчета";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыОтчета;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВариантыОтчета";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтчета.ВнешнийОтчет, "ВнешнийОтчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтчета.ВнешняяОбработка, "ВнешняяОбработка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтчета.ВстроеннаяОбработка, "ВстроеннаяОбработка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтчета.ВстроенныйОтчет, "ВстроенныйОтчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтчета.СхемаКомпоновкиДанных, "СхемаКомпоновкиДанных");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыОтчета.Ярлык, "Ярлык");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВнешнийОтчет", Перечисления.ВариантыОтчета.ВнешнийОтчет);
	ЗначенияДляПолучения.Вставить("ВнешняяОбработка", Перечисления.ВариантыОтчета.ВнешняяОбработка);
	ЗначенияДляПолучения.Вставить("ВстроеннаяОбработка", Перечисления.ВариантыОтчета.ВстроеннаяОбработка);
	ЗначенияДляПолучения.Вставить("ВстроенныйОтчет", Перечисления.ВариантыОтчета.ВстроенныйОтчет);
	ЗначенияДляПолучения.Вставить("СхемаКомпоновкиДанных", Перечисления.ВариантыОтчета.СхемаКомпоновкиДанных);
	ЗначенияДляПолучения.Вставить("Ярлык", Перечисления.ВариантыОтчета.Ярлык);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВариантыПериодичности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВариантыПериодичности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыПериодичности;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВариантыПериодичности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичности.Вручную, "Вручную");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичности.Ежегодно, "Ежегодно");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичности.Ежедневно, "Ежедневно");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичности.Ежеквартально, "Ежеквартально");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичности.Ежемесячно, "Ежемесячно");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичности.Еженедельно, "Еженедельно");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичности.Однократно, "Однократно");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Вручную", Перечисления.ВариантыПериодичности.Вручную);
	ЗначенияДляПолучения.Вставить("Ежегодно", Перечисления.ВариантыПериодичности.Ежегодно);
	ЗначенияДляПолучения.Вставить("Ежедневно", Перечисления.ВариантыПериодичности.Ежедневно);
	ЗначенияДляПолучения.Вставить("Ежеквартально", Перечисления.ВариантыПериодичности.Ежеквартально);
	ЗначенияДляПолучения.Вставить("Ежемесячно", Перечисления.ВариантыПериодичности.Ежемесячно);
	ЗначенияДляПолучения.Вставить("Еженедельно", Перечисления.ВариантыПериодичности.Еженедельно);
	ЗначенияДляПолучения.Вставить("Однократно", Перечисления.ВариантыПериодичности.Однократно);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВариантыПериодичностиМГ.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВариантыПериодичностиМГ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыПериодичностиМГ;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВариантыПериодичностиМГ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичностиМГ.ДеньМесяца, "ДеньМесяца");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПериодичностиМГ.ЧислоМесяца, "ЧислоМесяца");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДеньМесяца", Перечисления.ВариантыПериодичностиМГ.ДеньМесяца);
	ЗначенияДляПолучения.Вставить("ЧислоМесяца", Перечисления.ВариантыПериодичностиМГ.ЧислоМесяца);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВариантыПовторенийВМесяце.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВариантыПовторенийВМесяце";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыПовторенийВМесяце;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВариантыПовторенийВМесяце";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПовторенийВМесяце.ВУказанныеЧисла, "ВУказанныеЧисла");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПовторенийВМесяце.КаждоеЧисло, "КаждоеЧисло");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПовторенийВМесяце.КаждуюНеделю, "КаждуюНеделю");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПовторенийВМесяце.КаждыйКалендарныйДень, "КаждыйКалендарныйДень");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВУказанныеЧисла", Перечисления.ВариантыПовторенийВМесяце.ВУказанныеЧисла);
	ЗначенияДляПолучения.Вставить("КаждоеЧисло", Перечисления.ВариантыПовторенийВМесяце.КаждоеЧисло);
	ЗначенияДляПолучения.Вставить("КаждуюНеделю", Перечисления.ВариантыПовторенийВМесяце.КаждуюНеделю);
	ЗначенияДляПолучения.Вставить("КаждыйКалендарныйДень", Перечисления.ВариантыПовторенийВМесяце.КаждыйКалендарныйДень);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВариантыПределовВыполненияЗадач.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВариантыПределовВыполненияЗадач";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыПределовВыполненияЗадачи;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВариантыПределовВыполненияЗадачи";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПределовВыполненияЗадачи.Бесконечно, "Бесконечно");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПределовВыполненияЗадачи.ДоДаты, "ДоДаты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПределовВыполненияЗадачи.КоличествоРаз, "КоличествоРаз");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Бесконечно", Перечисления.ВариантыПределовВыполненияЗадачи.Бесконечно);
	ЗначенияДляПолучения.Вставить("ДоДаты", Перечисления.ВариантыПределовВыполненияЗадачи.ДоДаты);
	ЗначенияДляПолучения.Вставить("КоличествоРаз", Перечисления.ВариантыПределовВыполненияЗадачи.КоличествоРаз);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВариантыПубликацииДополнительны.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВариантыПубликацииДополнительны";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВариантыПубликацииДополнительныхОтчетовИОбработок";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется, "Используется");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена, "Отключена");
	ЗначенияДляОтправки.Вставить(Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки, "РежимОтладки");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Используется", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	ЗначенияДляПолучения.Вставить("Отключена", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
	ЗначенияДляПолучения.Вставить("РежимОтладки", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВерсииФорматовВыгрузки.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВерсииФорматовВыгрузки";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВерсииФорматовВыгрузки;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВерсииФорматовВыгрузки";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия200, "Версия200");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия201, "Версия201");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия201алко, "Версия201алко");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия300, "Версия300");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия300алко, "Версия300алко");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия301алко, "Версия301алко");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия302алко, "Версия302алко");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия400, "Версия400");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия401алко, "Версия401алко");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия500, "Версия500");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР, "Версия700ПФР");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.ВерсияБанкРоссии, "ВерсияБанкРоссии");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.ВерсияРПН, "ВерсияРПН");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС, "ВерсияФСГС");
	ЗначенияДляОтправки.Вставить(Перечисления.ВерсииФорматовВыгрузки.ВерсияФСС, "ВерсияФСС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Версия200", Перечисления.ВерсииФорматовВыгрузки.Версия200);
	ЗначенияДляПолучения.Вставить("Версия201", Перечисления.ВерсииФорматовВыгрузки.Версия201);
	ЗначенияДляПолучения.Вставить("Версия201алко", Перечисления.ВерсииФорматовВыгрузки.Версия201алко);
	ЗначенияДляПолучения.Вставить("Версия300", Перечисления.ВерсииФорматовВыгрузки.Версия300);
	ЗначенияДляПолучения.Вставить("Версия300алко", Перечисления.ВерсииФорматовВыгрузки.Версия300алко);
	ЗначенияДляПолучения.Вставить("Версия301алко", Перечисления.ВерсииФорматовВыгрузки.Версия301алко);
	ЗначенияДляПолучения.Вставить("Версия302алко", Перечисления.ВерсииФорматовВыгрузки.Версия302алко);
	ЗначенияДляПолучения.Вставить("Версия400", Перечисления.ВерсииФорматовВыгрузки.Версия400);
	ЗначенияДляПолучения.Вставить("Версия401алко", Перечисления.ВерсииФорматовВыгрузки.Версия401алко);
	ЗначенияДляПолучения.Вставить("Версия500", Перечисления.ВерсииФорматовВыгрузки.Версия500);
	ЗначенияДляПолучения.Вставить("Версия700ПФР", Перечисления.ВерсииФорматовВыгрузки.Версия700ПФР);
	ЗначенияДляПолучения.Вставить("ВерсияБанкРоссии", Перечисления.ВерсииФорматовВыгрузки.ВерсияБанкРоссии);
	ЗначенияДляПолучения.Вставить("ВерсияРПН", Перечисления.ВерсииФорматовВыгрузки.ВерсияРПН);
	ЗначенияДляПолучения.Вставить("ВерсияФСГС", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСГС);
	ЗначенияДляПолучения.Вставить("ВерсияФСС", Перечисления.ВерсииФорматовВыгрузки.ВерсияФСС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбраб.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбраб";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДополнительныхОтчетовИОбработок;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыДополнительныхОтчетовИОбработок";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка, "ДополнительнаяОбработка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет, "ДополнительныйОтчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта, "ЗаполнениеОбъекта");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет, "Отчет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, "ПечатнаяФорма");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов, "СозданиеСвязанныхОбъектов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения, "ШаблонСообщения");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДополнительнаяОбработка", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
	ЗначенияДляПолучения.Вставить("ДополнительныйОтчет", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	ЗначенияДляПолучения.Вставить("ЗаполнениеОбъекта", Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта);
	ЗначенияДляПолучения.Вставить("Отчет", Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	ЗначенияДляПолучения.Вставить("ПечатнаяФорма", Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма);
	ЗначенияДляПолучения.Вставить("СозданиеСвязанныхОбъектов", Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов);
	ЗначенияДляПолучения.Вставить("ШаблонСообщения", Перечисления.ВидыДополнительныхОтчетовИОбработок.ШаблонСообщения);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВидыДоходов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВидыДоходов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоходов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыДоходов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ВзаимныеРасчеты, "ВзаимныеРасчеты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ВзятиеДенегВДолг, "ВзятиеДенегВДолг");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ВозвратВыданныхДолгов, "ВозвратВыданныхДолгов");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ДоходыПоСтатьям, "ДоходыПоСтатьям");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ОбменВалюты, "ОбменВалюты");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ПереводВНакопления, "ПереводВНакопления");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ПереводИзДругихКошельков, "ПереводИзДругихКошельков");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ПереводИзНакоплений, "ПереводИзНакоплений");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоходов.ПродажаИмущества, "ПродажаИмущества");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВзаимныеРасчеты", Перечисления.ВидыДоходов.ВзаимныеРасчеты);
	ЗначенияДляПолучения.Вставить("ВзятиеДенегВДолг", Перечисления.ВидыДоходов.ВзятиеДенегВДолг);
	ЗначенияДляПолучения.Вставить("ВозвратВыданныхДолгов", Перечисления.ВидыДоходов.ВозвратВыданныхДолгов);
	ЗначенияДляПолучения.Вставить("ДоходыПоСтатьям", Перечисления.ВидыДоходов.ДоходыПоСтатьям);
	ЗначенияДляПолучения.Вставить("ОбменВалюты", Перечисления.ВидыДоходов.ОбменВалюты);
	ЗначенияДляПолучения.Вставить("ПереводВНакопления", Перечисления.ВидыДоходов.ПереводВНакопления);
	ЗначенияДляПолучения.Вставить("ПереводИзДругихКошельков", Перечисления.ВидыДоходов.ПереводИзДругихКошельков);
	ЗначенияДляПолучения.Вставить("ПереводИзНакоплений", Перечисления.ВидыДоходов.ПереводИзНакоплений);
	ЗначенияДляПолучения.Вставить("ПродажаИмущества", Перечисления.ВидыДоходов.ПродажаИмущества);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВидыНалогов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВидыНалогов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыНалогов;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыНалогов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия, "ДополнительныеВзносы_ПФР_ВредныеУсловия");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи, "ДополнительныеВзносы_ПФР_ЛетныеЭкипажи");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия, "ДополнительныеВзносы_ПФР_ТяжелыеУсловия");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры, "ДополнительныеВзносы_ПФР_Шахтеры");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЕНВД, "ЕНВД");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЕСХН, "ЕСХН");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЗемельныйНалог_ВнутригородскойОкруг, "ЗемельныйНалог_ВнутригородскойОкруг");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскоеПоселение, "ЗемельныйНалог_ГородскоеПоселение");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкруг, "ЗемельныйНалог_ГородскойОкруг");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением, "ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЗемельныйНалог_ГородФедеральногоЗначения, "ЗемельныйНалог_ГородФедеральногоЗначения");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЗемельныйНалог_МежселеннаяТерритория, "ЗемельныйНалог_МежселеннаяТерритория");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ЗемельныйНалог_СельскоеПоселение, "ЗемельныйНалог_СельскоеПоселение");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НалогНаИмущество, "НалогНаИмущество");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НалогНаИмуществоЕСГС, "НалогНаИмуществоЕСГС");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет, "НалогНаПрибыль_РегиональныйБюджет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет, "НалогНаПрибыль_ФедеральныйБюджет");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НДС, "НДС");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НДС_ВвозимыеТовары, "НДС_ВвозимыеТовары");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НДФЛ, "НДФЛ");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.НДФЛ_ИП, "НДФЛ_ИП");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ПрочиеНалогиИСборы, "ПрочиеНалогиИСборы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ПСН_ВнутригородскойРайон, "ПСН_ВнутригородскойРайон");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ПСН_ГородскойОкруг, "ПСН_ГородскойОкруг");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ПСН_ГородскойОкругСВнутригородскимДелением, "ПСН_ГородскойОкругСВнутригородскимДелением");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ПСН_ГородФедеральногоЗначения, "ПСН_ГородФедеральногоЗначения");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ПСН_МуниципальныйРайон, "ПСН_МуниципальныйРайон");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные, "СтраховыеВзносы_ПФР_Добровольные");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть, "СтраховыеВзносы_ПФР_НакопительнаяЧасть");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть, "СтраховыеВзносы_ПФР_СтраховаяЧасть");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС, "СтраховыеВзносы_ФСС");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ, "СтраховыеВзносы_ФСС_НСиПЗ");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС, "СтраховыеВзносы_ФФОМС");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ТорговыйСбор, "ТорговыйСбор");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ТранспортныйНалог, "ТранспортныйНалог");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.УСН_Доходы, "УСН_Доходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы, "УСН_ДоходыМинусРасходы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.УСН_МинимальныйНалог, "УСН_МинимальныйНалог");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть, "ФиксированныеВзносы_ПФР_НакопительнаяЧасть");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, "ФиксированныеВзносы_ПФР_СтраховаяЧасть");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС, "ФиксированныеВзносы_ФСС");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС, "ФиксированныеВзносы_ФФОМС");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДополнительныеВзносы_ПФР_ВредныеУсловия", Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия);
	ЗначенияДляПолучения.Вставить("ДополнительныеВзносы_ПФР_ЛетныеЭкипажи", Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи);
	ЗначенияДляПолучения.Вставить("ДополнительныеВзносы_ПФР_ТяжелыеУсловия", Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия);
	ЗначенияДляПолучения.Вставить("ДополнительныеВзносы_ПФР_Шахтеры", Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры);
	ЗначенияДляПолучения.Вставить("ЕНВД", Перечисления.ВидыНалогов.ЕНВД);
	ЗначенияДляПолучения.Вставить("ЕСХН", Перечисления.ВидыНалогов.ЕСХН);
	ЗначенияДляПолучения.Вставить("ЗемельныйНалог_ВнутригородскойОкруг", Перечисления.ВидыНалогов.ЗемельныйНалог_ВнутригородскойОкруг);
	ЗначенияДляПолучения.Вставить("ЗемельныйНалог_ГородскоеПоселение", Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскоеПоселение);
	ЗначенияДляПолучения.Вставить("ЗемельныйНалог_ГородскойОкруг", Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкруг);
	ЗначенияДляПолучения.Вставить("ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением", Перечисления.ВидыНалогов.ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением);
	ЗначенияДляПолучения.Вставить("ЗемельныйНалог_ГородФедеральногоЗначения", Перечисления.ВидыНалогов.ЗемельныйНалог_ГородФедеральногоЗначения);
	ЗначенияДляПолучения.Вставить("ЗемельныйНалог_МежселеннаяТерритория", Перечисления.ВидыНалогов.ЗемельныйНалог_МежселеннаяТерритория);
	ЗначенияДляПолучения.Вставить("ЗемельныйНалог_СельскоеПоселение", Перечисления.ВидыНалогов.ЗемельныйНалог_СельскоеПоселение);
	ЗначенияДляПолучения.Вставить("НалогНаИмущество", Перечисления.ВидыНалогов.НалогНаИмущество);
	ЗначенияДляПолучения.Вставить("НалогНаИмуществоЕСГС", Перечисления.ВидыНалогов.НалогНаИмуществоЕСГС);
	ЗначенияДляПолучения.Вставить("НалогНаПрибыль_РегиональныйБюджет", Перечисления.ВидыНалогов.НалогНаПрибыль_РегиональныйБюджет);
	ЗначенияДляПолучения.Вставить("НалогНаПрибыль_ФедеральныйБюджет", Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет);
	ЗначенияДляПолучения.Вставить("НДС", Перечисления.ВидыНалогов.НДС);
	ЗначенияДляПолучения.Вставить("НДС_ВвозимыеТовары", Перечисления.ВидыНалогов.НДС_ВвозимыеТовары);
	ЗначенияДляПолучения.Вставить("НДФЛ", Перечисления.ВидыНалогов.НДФЛ);
	ЗначенияДляПолучения.Вставить("НДФЛ_ИП", Перечисления.ВидыНалогов.НДФЛ_ИП);
	ЗначенияДляПолучения.Вставить("ПрочиеНалогиИСборы", Перечисления.ВидыНалогов.ПрочиеНалогиИСборы);
	ЗначенияДляПолучения.Вставить("ПСН_ВнутригородскойРайон", Перечисления.ВидыНалогов.ПСН_ВнутригородскойРайон);
	ЗначенияДляПолучения.Вставить("ПСН_ГородскойОкруг", Перечисления.ВидыНалогов.ПСН_ГородскойОкруг);
	ЗначенияДляПолучения.Вставить("ПСН_ГородскойОкругСВнутригородскимДелением", Перечисления.ВидыНалогов.ПСН_ГородскойОкругСВнутригородскимДелением);
	ЗначенияДляПолучения.Вставить("ПСН_ГородФедеральногоЗначения", Перечисления.ВидыНалогов.ПСН_ГородФедеральногоЗначения);
	ЗначенияДляПолучения.Вставить("ПСН_МуниципальныйРайон", Перечисления.ВидыНалогов.ПСН_МуниципальныйРайон);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы_ПФР_Добровольные", Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы_ПФР_НакопительнаяЧасть", Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_НакопительнаяЧасть);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы_ПФР_СтраховаяЧасть", Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы_ФСС", Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы_ФСС_НСиПЗ", Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ);
	ЗначенияДляПолучения.Вставить("СтраховыеВзносы_ФФОМС", Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС);
	ЗначенияДляПолучения.Вставить("ТорговыйСбор", Перечисления.ВидыНалогов.ТорговыйСбор);
	ЗначенияДляПолучения.Вставить("ТранспортныйНалог", Перечисления.ВидыНалогов.ТранспортныйНалог);
	ЗначенияДляПолучения.Вставить("УСН_Доходы", Перечисления.ВидыНалогов.УСН_Доходы);
	ЗначенияДляПолучения.Вставить("УСН_ДоходыМинусРасходы", Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы);
	ЗначенияДляПолучения.Вставить("УСН_МинимальныйНалог", Перечисления.ВидыНалогов.УСН_МинимальныйНалог);
	ЗначенияДляПолучения.Вставить("ФиксированныеВзносы_ПФР_НакопительнаяЧасть", Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_НакопительнаяЧасть);
	ЗначенияДляПолучения.Вставить("ФиксированныеВзносы_ПФР_СтраховаяЧасть", Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ЗначенияДляПолучения.Вставить("ФиксированныеВзносы_ФСС", Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	ЗначенияДляПолучения.Вставить("ФиксированныеВзносы_ФФОМС", Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка.ВидыОтчетности.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ПеречислениеСсылка.ВидыОтчетности";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОтчетности;
	ПравилоКонвертации.ТипXDTO   = "EnumRef.ВидыОтчетности";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОтчетности.ОтчетностьПоМСФО, "ОтчетностьПоМСФО");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОтчетности.РегламентированнаяОтчетность, "РегламентированнаяОтчетность");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ОтчетностьПоМСФО", Перечисления.ВидыОтчетности.ОтчетностьПоМСФО);
	ЗначенияДляПолучения.Вставить("РегламентированнаяОтчетность", Перечисления.ВидыОтчетности.РегламентированнаяОтчетность);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопр_Спр_ГрафыБюджета.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопр_Спр_ГрафыБюджета";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ГрафыБюджета;
	ПравилоКонвертации.ТипXDTO   = "CatalogRef.ГрафыБюджета";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ВозвратВыданногоЗайма, "ВозвратВыданногоЗайма");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ВыдачаВзаймы, "ВыдачаВзаймы");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ВыручкаЗаИмущество, "ВыручкаЗаИмущество");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.Доходы, "Доходы");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты, "ИспользованиеКредитнойКарты");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту, "ПереводНаКредитнуюКарту");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ПогашениеКредита, "ПогашениеКредита");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ПокупкаИмущества, "ПокупкаИмущества");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ПолучениеКредита, "ПолучениеКредита");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ПрочиеДоходы, "ПрочиеДоходы");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ПрочиеРасходы, "ПрочиеРасходы");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.Расходы, "Расходы");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления, "СвободныеДеньгиВозвратИзНакопления");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление, "СвободныеДеньгиПереводВНакопление");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления, "ФинЦельВозвратИзНакопления");
	ЗначенияДляОтправки.Вставить(Справочники.ГрафыБюджета.ФинЦельПереводВНакопление, "ФинЦельПереводВНакопление");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВозвратВыданногоЗайма", Справочники.ГрафыБюджета.ВозвратВыданногоЗайма);
	ЗначенияДляПолучения.Вставить("ВыдачаВзаймы", Справочники.ГрафыБюджета.ВыдачаВзаймы);
	ЗначенияДляПолучения.Вставить("ВыручкаЗаИмущество", Справочники.ГрафыБюджета.ВыручкаЗаИмущество);
	ЗначенияДляПолучения.Вставить("Доходы", Справочники.ГрафыБюджета.Доходы);
	ЗначенияДляПолучения.Вставить("ИспользованиеКредитнойКарты", Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты);
	ЗначенияДляПолучения.Вставить("ПереводНаКредитнуюКарту", Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту);
	ЗначенияДляПолучения.Вставить("ПогашениеКредита", Справочники.ГрафыБюджета.ПогашениеКредита);
	ЗначенияДляПолучения.Вставить("ПокупкаИмущества", Справочники.ГрафыБюджета.ПокупкаИмущества);
	ЗначенияДляПолучения.Вставить("ПолучениеКредита", Справочники.ГрафыБюджета.ПолучениеКредита);
	ЗначенияДляПолучения.Вставить("ПрочиеДоходы", Справочники.ГрафыБюджета.ПрочиеДоходы);
	ЗначенияДляПолучения.Вставить("ПрочиеРасходы", Справочники.ГрафыБюджета.ПрочиеРасходы);
	ЗначенияДляПолучения.Вставить("Расходы", Справочники.ГрафыБюджета.Расходы);
	ЗначенияДляПолучения.Вставить("СвободныеДеньгиВозвратИзНакопления", Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления);
	ЗначенияДляПолучения.Вставить("СвободныеДеньгиПереводВНакопление", Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление);
	ЗначенияДляПолучения.Вставить("ФинЦельВозвратИзНакопления", Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления);
	ЗначенияДляПолучения.Вставить("ФинЦельПереводВНакопление", Справочники.ГрафыБюджета.ФинЦельПереводВНакопление);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.ВариантыБюджетов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.ВариантыБюджетов";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВариантыБюджетов;
	ПравилоКонвертации.ТипXDTO   = "Predefined.ВариантыБюджетов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ВариантыБюджетов.БазовыйВариант, "БазовыйВариант");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БазовыйВариант", Справочники.ВариантыБюджетов.БазовыйВариант);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.ВидыАналитик.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.ВидыАналитик";
	ПравилоКонвертации.ТипДанных = Метаданные.ПланыВидовХарактеристик.ВидыАналитик;
	ПравилоКонвертации.ТипXDTO   = "Predefined.ВидыАналитик";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.Важность, "Важность");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.ГеографияСделки, "ГеографияСделки");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.Имущество, "Имущество");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.КарточкаСкидок, "КарточкаСкидок");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.Кредит, "Кредит");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.МестоПолученияДохода, "МестоПолученияДохода");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.МестоТраты, "МестоТраты");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.НаправлениеИспользования, "НаправлениеИспользования");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.Пометка, "Пометка");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.Проект, "Проект");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.ФинансоваяЦель, "ФинансоваяЦель");
	ЗначенияДляОтправки.Вставить(ПланыВидовХарактеристик.ВидыАналитик.ЧленыСемьи, "ЧленыСемьи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Важность", ПланыВидовХарактеристик.ВидыАналитик.Важность);
	ЗначенияДляПолучения.Вставить("ГеографияСделки", ПланыВидовХарактеристик.ВидыАналитик.ГеографияСделки);
	ЗначенияДляПолучения.Вставить("Имущество", ПланыВидовХарактеристик.ВидыАналитик.Имущество);
	ЗначенияДляПолучения.Вставить("КарточкаСкидок", ПланыВидовХарактеристик.ВидыАналитик.КарточкаСкидок);
	ЗначенияДляПолучения.Вставить("Кредит", ПланыВидовХарактеристик.ВидыАналитик.Кредит);
	ЗначенияДляПолучения.Вставить("МестоПолученияДохода", ПланыВидовХарактеристик.ВидыАналитик.МестоПолученияДохода);
	ЗначенияДляПолучения.Вставить("МестоТраты", ПланыВидовХарактеристик.ВидыАналитик.МестоТраты);
	ЗначенияДляПолучения.Вставить("НаправлениеИспользования", ПланыВидовХарактеристик.ВидыАналитик.НаправлениеИспользования);
	ЗначенияДляПолучения.Вставить("Пометка", ПланыВидовХарактеристик.ВидыАналитик.Пометка);
	ЗначенияДляПолучения.Вставить("Проект", ПланыВидовХарактеристик.ВидыАналитик.Проект);
	ЗначенияДляПолучения.Вставить("ФинансоваяЦель", ПланыВидовХарактеристик.ВидыАналитик.ФинансоваяЦель);
	ЗначенияДляПолучения.Вставить("ЧленыСемьи", ПланыВидовХарактеристик.ВидыАналитик.ЧленыСемьи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.Контакты.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.Контакты";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.Контакты;
	ПравилоКонвертации.ТипXDTO   = "Predefined.Контакты";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.Контакты.Магазины, "Магазины");
	ЗначенияДляОтправки.Вставить(Справочники.Контакты.ЧленыСемьи, "ЧленыСемьи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Магазины", Справочники.Контакты.Магазины);
	ЗначенияДляПолучения.Вставить("ЧленыСемьи", Справочники.Контакты.ЧленыСемьи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.НаборыДопРеквизитов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.НаборыДопРеквизитов";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
	ПравилоКонвертации.ТипXDTO   = "Predefined.НаборыДополнительныхРеквизитовИСведений";

	ЗначенияДляОтправки = Новый Соответствие;
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.СтатьиДоходов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.СтатьиДоходов";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.СтатьиДоходов;
	ПравилоКонвертации.ТипXDTO   = "Predefined.СтатьиДоходов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.СтатьиДоходов.ИзменениеОстатка, "ИзменениеОстатка");
	ЗначенияДляОтправки.Вставить(Справочники.СтатьиДоходов.ОбменВалюты, "ОбменВалюты");
	ЗначенияДляОтправки.Вставить(Справочники.СтатьиДоходов.ПрочиеДоходы, "ПрочиеДоходы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИзменениеОстатка", Справочники.СтатьиДоходов.ИзменениеОстатка);
	ЗначенияДляПолучения.Вставить("ОбменВалюты", Справочники.СтатьиДоходов.ОбменВалюты);
	ЗначенияДляПолучения.Вставить("ПрочиеДоходы", Справочники.СтатьиДоходов.ПрочиеДоходы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.СтатьиРасходов.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.СтатьиРасходов";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.СтатьиРасходов;
	ПравилоКонвертации.ТипXDTO   = "Predefined.СтатьиРасходов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.СтатьиРасходов.ИзменениеОстатка, "ИзменениеОстатка");
	ЗначенияДляОтправки.Вставить(Справочники.СтатьиРасходов.ОбменВалюты, "ОбменВалюты");
	ЗначенияДляОтправки.Вставить(Справочники.СтатьиРасходов.ПрочиеРасходы, "ПрочиеРасходы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИзменениеОстатка", Справочники.СтатьиРасходов.ИзменениеОстатка);
	ЗначенияДляПолучения.Вставить("ОбменВалюты", Справочники.СтатьиРасходов.ОбменВалюты);
	ЗначенияДляПолучения.Вставить("ПрочиеРасходы", Справочники.СтатьиРасходов.ПрочиеРасходы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.СтраныМира.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.СтраныМира";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ТипXDTO   = "Predefined.СтраныМира";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.СтраныМира.Россия, "Россия");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Россия", Справочники.СтраныМира.Россия);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Предопределенные.ФинансовыеЦели.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Предопределенные.ФинансовыеЦели";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ФинансовыеЦели;
	ПравилоКонвертации.ТипXDTO   = "Predefined.ФинансовыеЦели";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ФинансовыеЦели.ОбщиеНакопления, "ОбщиеНакопления");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ОбщиеНакопления", Справочники.ФинансовыеЦели.ОбщиеНакопления);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура ВгрузитьРазделУчета(ДанныеИБ, ДанныеXDTO, ИмяРеквизита)
	// Выгружает значение плана счетов как строку
	
	Если ЗначениеЗаполнено(ДанныеИБ[ИмяРеквизита]) Тогда
		ДанныеXDTO.Вставить(ИмяРеквизита, ДанныеИБ[ИмяРеквизита].ИмяПредопределенныхДанных);
	КонецЕсли;
КонецПроцедуры
Процедура ВосстановитьИзмененияКонстант(КомпонентыОбмена)
	// Восстаналивает информацию об изменении констант из записей КомпонентыОбмена.ПараметрыКонвертации.ИзмененияКонстант
	
	Для Каждого КлючИЗначеие Из КомпонентыОбмена.ПараметрыКонвертации.ИзмененияКонстант Цикл
		МенеджерЗначения = Константы[КлючИЗначеие.Ключ].СоздатьМенеджерЗначения();
		ПланыОбмена.ЗарегистрироватьИзменения(КомпонентыОбмена.УзелКорреспондента, МенеджерЗначения);
	КонецЦикла;
КонецПроцедуры
Функция ВыгружаемоеЗначениеСПравилом(ВыгружаемоеЗначение, Составной = Ложь)
	Если ТипЗнч(ВыгружаемоеЗначение) = Тип("ПланСчетовСсылка.РазделыУчета") Тогда
		Возврат ?(ЗначениеЗаполнено(ВыгружаемоеЗначение), ВыгружаемоеЗначение.ИмяПредопределенныхДанных, "");
	КонецЕсли;
	
	ПравилоДляЗначения = ИмяПКОДляВыгружаемогоЗначения(ВыгружаемоеЗначение, Составной);
	Если ПравилоДляЗначения = Неопределено Тогда
		Результат = ВыгружаемоеЗначение;
	Иначе
		Результат = Новый Структура("Значение, ИмяПКО", ВыгружаемоеЗначение, ПравилоДляЗначения);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура ВыгрузитьКонстанты(КомпонентыОбмена)
	ПОД_Константы = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("ПОД_Константы_Отправка", "Имя");
	Если ПОД_Константы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если КомпонентыОбмена.ПараметрыКонвертации.ИзмененияКонстант.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
			КомпонентыОбмена.ПараметрыКонвертации.ИзмененияКонстант, 
			ПОД_Константы);
КонецПроцедуры
Процедура ВыгрузитьОписаниеОперации(ДанныеИБ, ДанныеXDTO)
	// Выгружает значение плана счетов как строку
	
	Если ДанныеИБ.ЭтоШаблон Тогда
		ДанныеXDTO.Вставить("ОписаниеОперации", ДанныеИБ.ОписаниеОперации);
	Иначе
		ДанныеXDTO.Удалить("ОписаниеОперации");
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьОстаткиНаНачало(КомпонентыОбмена)
	Если Не НужнаПроверкаПериода(КомпонентыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОстатковНаНачало = НачалоДня(КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаДокументов) - 1;
	
	ПравилоОтправки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("ПОД_ВводИзменениеОстатка_Отправка", "Имя");
	Если ПравилоОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатковНаНачало);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Документ.ВводИзменениеОстатка.ПустаяСсылка) КАК Ссылка,
		|	&ДатаОстатков КАК Дата,
		|	ИСТИНА КАК Проведен,
		|	ЛОЖЬ КАК ПометкаУдаления,
		|	ЛОЖЬ КАК ЭтоШаблон,
		|	ИСТИНА КАК ЭтоСинхронизацияОстатков,
		|	""Синхронизация остатков на начало"" КАК Комментарий,
		|	"""" КАК ОписаниеОперации,
		|	Неопределено КАК Пользователь,
		|	ВЫБОР
		|		КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ОсновныеСуммыДолгов)
		|		ИНАЧЕ ЖурналОперацийОстатки.Счет
		|	КОНЕЦ КАК РазделУчета,
		|	ЖурналОперацийОстатки.Субконто1 КАК ОбъектУчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЖурналОперацийОстатки.Субконто2, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
		|		ИНАЧЕ ЖурналОперацийОстатки.Субконто2
		|	КОНЕЦ КАК ФинансоваяЦель,
		|	ЖурналОперацийОстатки.Валюта КАК ВалютаОперации,
		|	СУММА(ВЫБОР
		|			КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
		|				ТОГДА 0
		|			ИНАЧЕ ЖурналОперацийОстатки.ВалютнаяСуммаКонечныйОстаток
		|		КОНЕЦ) КАК СуммаНовогоОстатка,
		|	СУММА(ВЫБОР
		|			КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
		|				ТОГДА ЖурналОперацийОстатки.ВалютнаяСуммаКонечныйОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНовогоОстаткаПроцентов
		|ИЗ
		|	РегистрБухгалтерии.ЖурналОпераций.ОстаткиИОбороты(&ДатаОстатков, &ДатаОстатков, Период, ДвиженияИГраницыПериода, , , ) КАК ЖурналОперацийОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ЖурналОперацийОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ПроцентыПоДолгам)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.ОсновныеСуммыДолгов)
		|		ИНАЧЕ ЖурналОперацийОстатки.Счет
		|	КОНЕЦ,
		|	ЖурналОперацийОстатки.Субконто1,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЖурналОперацийОстатки.Субконто2, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
		|		ИНАЧЕ ЖурналОперацийОстатки.Субконто2
		|	КОНЕЦ,
		|	ЖурналОперацийОстатки.Валюта";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ОбъектОстатка = Новый Структура;
	Для Каждого Колонка Из ТаблицаОстатков.Колонки Цикл
		ОбъектОстатка.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		
		Если СтрокаТаблицы.РазделУчета = ПланыСчетов.РазделыУчета.Деньги
			ИЛИ СтрокаТаблицы.РазделУчета = ПланыСчетов.РазделыУчета.Капитал Тогда
			Продолжить;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ОбъектОстатка, СтрокаТаблицы);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
			ОбъектОстатка, 
			ПравилоОтправки);
		
	КонецЦикла;
КонецПроцедуры
Процедура ВыгрузитьПараметрыОбмена(КомпонентыОбмена)
	ПОД_Отправки = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("ПОД_ПараметрыОбмена_Отправка", "Имя");
	Если ПОД_Отправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДляВыгрузки = СинхронизацияАвтономныхКопий.СтруктураПараметровОбменаДляОтправки(КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбмена);
	
	ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, 
			СтруктураДляВыгрузки, 
			ПОД_Отправки);
КонецПроцедуры
Процедура ВыгрузитьТабличнуюЧасть(ДанныеИБ, ДанныеXDTO, ТабЧасть) Экспорт
	// Параметры: 
	// 	ДанныеИБ - выгружаемый объект
	//	ДанныеXDTO - данные, подготовленные для трансляции в XML
	//	ТабЧасть - метаданные выгружаемой табличной части
	
	ТабЧастьИсточника = ДанныеИБ[ТабЧасть.Имя];
	Если ТабЧастьИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	РеквизитыТЧ = ТабЧасть.Реквизиты;
	РеквизитыСоставногоТипа = Новый Структура;
	Для Каждого Реквизит Из РеквизитыТЧ Цикл
		ТаблицаВыгрузки.Колонки.Добавить(Реквизит.Имя);
		РеквизитыСоставногоТипа.Вставить(Реквизит.Имя, Реквизит.Тип.Типы().Количество() > 1);
	КонецЦикла;
	
	Для Каждого СтрокаИсточника Из ТабЧастьИсточника Цикл
		
		СтрокаВыгрузки = ТаблицаВыгрузки.Добавить();
		Для Каждого Реквизит Из РеквизитыТЧ Цикл
			СтрокаВыгрузки[Реквизит.Имя] = ВыгружаемоеЗначениеСПравилом(СтрокаИсточника[Реквизит.Имя], РеквизитыСоставногоТипа[Реквизит.Имя]);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТабЧасть.Имя = "ДополнительныеРеквизиты" И РеквизитыТЧ.Найти("Значение") <> Неопределено Тогда
		ТаблицаВыгрузки.Колонки.Значение.Имя = "ЗначениеСвойства";
	КонецЕсли;
	
	ДанныеXDTO.Вставить(ТабЧасть.Имя, ТаблицаВыгрузки);
КонецПроцедуры
Функция ВыгрузкаТолькоКлючевыхСвойств(ДанныеИБ)
	// Проверяет, вызвано правило для загрузки объекта или только для определения ключевых свойств
	
	ТипДанных = ТипЗнч(ДанныеИБ);
	Если ДанныеИБ <> Неопределено И ОбщегоНазначения.ЭтоСсылка(ТипДанных) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
Процедура ДобавитьВXDTOРеквизитыСПКО(ИменаРеквизитов, ДанныеXDTO, ДанныеИБ, Составной = Ложь)
	// Добавляет в ДанныеXDTO реквизиты ДанныхИБ, снабженных правилами конвертации
	СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ДанныеXDTO.Вставить(КлючИЗначение.Ключ, ВыгружаемоеЗначениеСПравилом(ДанныеИБ[КлючИЗначение.Ключ], Составной));
	КонецЦикла;
КонецПроцедуры
Процедура ДобавитьВДопСвойстваРеквизитыСПКО(ИменаРеквизитов, ПолученныеДанные, ДанныеXDTO, Составной = Ложь)
	// Добавляет в дополнительные свойства объекта ПолученныеДанные подготовленные к конвертации значения указанных реквизитов
	СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ЗначениеСвойства = Неопределено;
		Если Не ДанныеXDTO.Свойство(КлючИЗначение.Ключ, ЗначениеСвойства)
			И ( Не ДанныеXDTO.Свойство("КлючевыеСвойства") Или Не ДанныеXDTO.КлючевыеСвойства.Свойство(КлючИЗначение.Ключ, ЗначениеСвойства) ) Тогда
			Возврат;
		КонецЕсли;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, ЗагружаемоеЗначениеСПравилом(ЗначениеСвойства, Составной));
		
	КонецЦикла;
КонецПроцедуры
Функция ЗагружаемоеЗначениеСПравилом(ЗагружаемоеЗначение, Составной = Ложь)
	ПравилоЗагрузки = ИмяПКОДляЗагружаемогоЗначения(ЗагружаемоеЗначение, Составной);
	Если ПравилоЗагрузки = Неопределено Тогда
		Результат = ЗагружаемоеЗначение;
		
	ИначеЕсли Лев(ПравилоЗагрузки, 17) = "Предопределенные." Тогда 
		// Чтобы сработала загрузка по правилу нужно чтобы в структуре было свойство "Значение" типа "Структура" с обязательным свойством "Значение"
		Результат = Новый Структура("Значение, ИмяПКО", 
					Новый Структура("Значение,ИмяПКО,КлючевыеСвойства", ЗагружаемоеЗначение.ИмяПредопределенныхДанных , ПравилоЗагрузки, ЗагружаемоеЗначение ), 
					ПравилоЗагрузки);
					
	Иначе
		Результат = Новый Структура("Значение, ИмяПКО", ЗагружаемоеЗначение, ПравилоЗагрузки);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Процедура ЗагрузитьНаборРС(ИмяРегистра, ДанныеXDTO, КомпонентыОбмена)
	//Загружает записи регистра сведений из ДанныеXDTO
	//
	//Параметры:
	//	ИмяРегистра - Строка - Имя регистра сведений
	//	ДанныеXDTO - Структура - подготовленная структура с данными XDTO
	
	// Подготовка переменных
	ИменаИзмерений   = Неопределено;
	ИменаПолейЗаписи = Неопределено;
	ПолученныеДанные = Неопределено;
	ПодготовитьКЗагрузкеПараметрыРС(КомпонентыОбмена, ИмяРегистра, ПолученныеДанные, ИменаИзмерений, ИменаПолейЗаписи);
	
	// Коллекции для обработки значений из ДанныеXDTO
	ЗначенияОтбора = Новый Структура;
	Записи         = Неопределено;
	
	
	// Заполняем измерения
	Для каждого КлючИЗначение Из ИменаИзмерений Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеОтбора = Неопределено;
		Если ДанныеXDTO.Свойство(КлючИЗначение.Значение, ЗначениеОтбора) Тогда
			ЗначенияОтбора.Вставить(КлючИЗначение.Ключ, 
					ЗначениеРеквизитаСУчетомПКО(ЗначениеОтбора, КомпонентыОбмена));
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Если есть записи - считываем их значения
	Если ДанныеXDTO.Свойство("Записи") И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		
		Записи = НоваяТаблицаЗначений(ИменаПолейЗаписи);
		Для каждого ЗаписьXDTO Из ДанныеXDTO.Записи Цикл
			
			СтрокаЗаписи = Записи.Добавить();
			Для каждого Колонка Из ИменаПолейЗаписи Цикл
				
				ЗначениеОтбора = Неопределено;
				Если ЗначенияОтбора.Свойство(Колонка.Ключ, ЗначениеОтбора) Тогда
					СтрокаЗаписи[Колонка.Ключ] = ЗначениеОтбора;
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Колонка.Значение) 
					Или ДанныеXDTO.Записи.Колонки.Найти(Колонка.Значение) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаЗаписи[Колонка.Ключ] = ЗначениеРеквизитаСУчетомПКО(ЗаписьXDTO[Колонка.Значение], КомпонентыОбмена);
				 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	// Заполнение и запись набора
	Для Каждого Измерение Из ЗначенияОтбора Цикл
		ПолученныеДанные.Отбор[Измерение.Ключ].Установить(Измерение.Значение);
	КонецЦикла;
	
	Если Записи <> Неопределено Тогда
		Для Каждого СтрокаЗаписи Из Записи Цикл
			Запись = ПолученныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаЗаписи);
		КонецЦикла;
	КонецЕсли;
	
	ПолученныеДанные.Записать(Истина);
КонецПроцедуры
Процедура ЗагрузитьРазделУчета(ДанныеXDTO, ПолученныеДанные, ИмяРеквизита)
	// Загружает счет плана счетов по его имени
	
	Если Не ДанныеXDTO.Свойство(ИмяРеквизита) Или Не ЗначениеЗаполнено(ДанныеXDTO[ИмяРеквизита]) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные[ИмяРеквизита] = ПланыСчетов.РазделыУчета[ДанныеXDTO[ИмяРеквизита]];
КонецПроцедуры
Процедура ЗагрузитьТабличнуюЧасть(ПолученныеДанные, ДанныеXDTO, ИмяТабЧасти, КомпонентыОбмена = Неопределено) Экспорт
	// Параметры: 
	// 	ПолученныеДанные - загружаемый объект
	//	ДанныеXDTO - XDTO-объект
	//	ИмяТабЧасти - Строка - Имя загружаемой табличной части
	//	КомпонентыОбмена - Структура
	
	ПроверятьДопЗначения = КомпонентыОбмена <> Неопределено И КомпонентыОбмена.ПараметрыКонвертации.ОбменСМобильным 
			И (ИмяТабЧасти = "ДополнительныеРеквизиты" Или ИмяТабЧасти = "АналитикаДокумента");
	
	Если Не ДанныеXDTO.Свойство(ИмяТабЧасти) Или Не ЗначениеЗаполнено(ДанныеXDTO[ИмяТабЧасти]) Тогда
		Если ПроверятьДопЗначения Тогда
			СохраняемыеТабЧасти = Неопределено;
			Если Не ПолученныеДанные.ДополнительныеСвойства.Свойство("СохраняемыеТабЧасти", СохраняемыеТабЧасти) Тогда
				СохраняемыеТабЧасти = Новый Массив;
			КонецЕсли;
			СохраняемыеТабЧасти.Добавить(ИмяТабЧасти);
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СохраняемыеТабЧасти", СохраняемыеТабЧасти);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТабЧасть     = ДанныеXDTO[ИмяТабЧасти].Скопировать();
	Колонки      = ПолученныеДанные[ИмяТабЧасти].ВыгрузитьКолонки().Колонки;
	КолонкиДляПС = Новый Соответствие();
	
	Если ИмяТабЧасти = "ДополнительныеРеквизиты" И ТабЧасть.Колонки.Найти("ЗначениеСвойства") <> Неопределено
			И Колонки.Найти("Значение") <> Неопределено Тогда
		ТабЧасть.Колонки.ЗначениеСвойства.Имя = "Значение";
	КонецЕсли;
	
	ТипСчет = Новый ОписаниеТипов("ПланСчетовСсылка.РазделыУчета");
	ШаблонСтроки = Новый Структура;
	Для Каждого Колонка Из Колонки Цикл
		ШаблонСтроки.Вставить(Колонка.Имя, Колонка.ТипЗначения.Типы().Количество() > 1);
		Если Колонка.ТипЗначения = ТипСчет Тогда
			КолонкиДляПС.Вставить(Колонка.Имя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из ТабЧасть Цикл
		
		СтруктураСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ШаблонСтроки);
		Для Каждого Колонка Из Колонки Цикл
			
			Если ТабЧасть.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				СтруктураСтроки[Колонка.Имя] = Неопределено;
				Продолжить;
			КонецЕсли;
			
			Если КолонкиДляПС[Колонка.Имя] = Истина Тогда
				СтруктураСтроки[Колонка.Имя] = ?(ЗначениеЗаполнено(СтрокаТЧ[Колонка.Имя]), ПланыСчетов.РазделыУчета[СтрокаТЧ[Колонка.Имя]], Неопределено);
			Иначе
				СтруктураСтроки[Колонка.Имя] = ЗагружаемоеЗначениеСПравилом(СтрокаТЧ[Колонка.Имя], ШаблонСтроки[Колонка.Имя]);
			КонецЕсли;
			
		КонецЦикла;
	
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяТабЧасти, МассивСтрок);
КонецПроцедуры
Функция ЗагрузкаТолькоКлючевыхСвойств(ДанныеXDTO)
	// Проверяет, вызвано правило для загрузки объекта или только для определения ключевых свойств
	
	Если ТипЗнч(ДанныеXDTO) = Тип("Структура") Тогда
		Возврат ДанныеXDTO.Количество() = 1 И ДанныеXDTO.Свойство("КлючевыеСвойства");
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
Процедура ЗаписатьПолученныеОборотыПлановыхОпераций(КомпонентыОбмена)
	ПоказателиОпераций = КомпонентыОбмена.ПараметрыКонвертации.ЗагружаемыеПоказателиПлановыхОпераций;
	
	Если ПоказателиОпераций.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Обновляем плановые показатели плановых операций в РН ОборотыПлановыхОпераций
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоказателиОпераций", ПоказателиОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотыПлановыхОпераций.Период,
	|	ОборотыПлановыхОпераций.Регистратор,
	|	ОборотыПлановыхОпераций.РазделБюджета,
	|	ОборотыПлановыхОпераций.Кошелек,
	|	ОборотыПлановыхОпераций.ТипПоказателя,
	|	ОборотыПлановыхОпераций.СтатьяБюджета,
	|	ОборотыПлановыхОпераций.Валюта,
	|	ОборотыПлановыхОпераций.УдалитьГрафаБюджета,
	|	ОборотыПлановыхОпераций.УдалитьШаблонОперации,
	|	ОборотыПлановыхОпераций.Сумма,
	|	ОборотыПлановыхОпераций.ПлановаяДата,
	|	ОборотыПлановыхОпераций.Комментарий
	|ПОМЕСТИТЬ ПоказателиОпераций
	|ИЗ
	|	&ПоказателиОпераций КАК ОборотыПлановыхОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПлановыхОпераций.Период КАК Период,
	|	ОборотыПлановыхОпераций.Регистратор КАК Регистратор,
	|	ОборотыПлановыхОпераций.РазделБюджета,
	|	ОборотыПлановыхОпераций.Кошелек,
	|	ОборотыПлановыхОпераций.ТипПоказателя,
	|	ОборотыПлановыхОпераций.СтатьяБюджета,
	|	ОборотыПлановыхОпераций.Валюта,
	|	ОборотыПлановыхОпераций.УдалитьГрафаБюджета,
	|	ОборотыПлановыхОпераций.УдалитьШаблонОперации,
	|	ОборотыПлановыхОпераций.Сумма,
	|	ОборотыПлановыхОпераций.ПлановаяДата,
	|	ОборотыПлановыхОпераций.Комментарий
	|ИЗ
	|	РегистрНакопления.ОборотыПлановыхОпераций КАК ОборотыПлановыхОпераций
	|ГДЕ
	|	ОборотыПлановыхОпераций.Регистратор В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПоказателиОпераций.Регистратор
	|			ИЗ
	|				ПоказателиОпераций КАК ПоказателиОпераций)
	|	И НЕ ОборотыПлановыхОпераций.ПлановаяДата В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПоказателиОпераций.ПлановаяДата
	|				ИЗ
	|					ПоказателиОпераций КАК ПоказателиОпераций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыПлановыхОпераций.Период,
	|	ОборотыПлановыхОпераций.Регистратор,
	|	ОборотыПлановыхОпераций.РазделБюджета,
	|	ОборотыПлановыхОпераций.Кошелек,
	|	ОборотыПлановыхОпераций.ТипПоказателя,
	|	ОборотыПлановыхОпераций.СтатьяБюджета,
	|	ОборотыПлановыхОпераций.Валюта,
	|	ОборотыПлановыхОпераций.УдалитьГрафаБюджета,
	|	ОборотыПлановыхОпераций.УдалитьШаблонОперации,
	|	ОборотыПлановыхОпераций.Сумма,
	|	ОборотыПлановыхОпераций.ПлановаяДата,
	|	ОборотыПлановыхОпераций.Комментарий
	|ИЗ
	|	ПоказателиОпераций КАК ОборотыПлановыхОпераций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	Период
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор");
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		Набор = РегистрыНакопления.ОборотыПлановыхОпераций.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		
		// Прверякем наличие коллизий
		Если ПланыОбмена.ИзменениеЗарегистрировано(КомпонентыОбмена.УзелКорреспондента, Набор) Тогда
			Продолжить;
		КонецЕсли; 
		
		Выборка = ВыборкаРегистраторов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.ОбменДанными.Отправитель = КомпонентыОбмена.УзелКорреспондента;
		Набор.Записать(Истина);
		
	КонецЦикла;
КонецПроцедуры
Процедура ЗаписатьПредопределенныйЭлемент(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, РазрешенныеРеквизиты=Неопределено, РазрешенныеТабЧасти=Неопределено, РеквизитыСчетов=Неопределено)
	// Если загружаются предопределенные данные, идентификация происходит по имени предопределенных.
	//Объект предопределенных данных заполняется разрешенными реквизитами и табличными частями
	// Если выполнено заполнение предопределенного, функция вернет истину.
	//
	//Параметры:
	//	КомпонентыОбмена - Структура - все параметры и правила обмена
	//	ДанныеИБ - СправочникОбъект, ПВХОбъект или ПланСчетовОбъект, который нужно обновить
	//	ДанныеXDTO - Структура с подгодовленными к загрузке значениями
	//  РазрешенныеРеквизиты - Строка - имена реквизитов, через запятую, которые могут быть изменены при обмене
	//  РазрешенныеТабЧасти - Строка - имена табличных частей, через запятую, которые могут быть изменены при обмене
	//
	
	
	Иерархический = Ложь;
	Если ОбщегоНазначения.ЭтоСправочник(ДанныеИБ.Метаданные()) Тогда
		МенеджерОбъекта = Справочники[ДанныеИБ.Метаданные().Имя];
		Иерархический = ДанныеИБ.Метаданные().Иерархический;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ДанныеИБ.Метаданные()) Тогда
		МенеджерОбъекта = ПланыВидовХарактеристик[ДанныеИБ.Метаданные().Имя];
		Иерархический = ДанныеИБ.Метаданные().Иерархический;
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ДанныеИБ.Метаданные()) Тогда
		МенеджерОбъекта = ПланыСчетов[ДанныеИБ.Метаданные().Имя];
		Иерархический = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	// Копирование значений реквизитов
	СоставныеРеквизиты = Новый Соответствие;
	Если ТипЗнч(РазрешенныеРеквизиты) = Тип("Строка") Тогда
		ИменаРеквизитов = Новый Структура(РазрешенныеРеквизиты);
		Если ИменаРеквизитов.Свойство("Родитель") И Не ЗначениеЗаполнено(ИменаРеквизитов.Родитель) Тогда
			ИменаРеквизитов.Родитель = "Группа";
		КонецЕсли;
	ИначеЕсли РазрешенныеРеквизиты = Неопределено Тогда 
		
		ИменаРеквизитов = Новый Структура("Наименование");
		Для Каждого Реквизит Из ДанныеИБ.Метаданные().Реквизиты Цикл
			ИменаРеквизитов.Вставить(Реквизит.Имя);
			Если Реквизит.Тип.Типы().Количество() > 1 Тогда
				СоставныеРеквизиты[Реквизит.Имя] = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Иерархический Тогда
			ИменаРеквизитов.Вставить("Родитель", "Группа");
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().ДлинаКода > 0 Тогда
			ИменаРеквизитов.Вставить("Код");
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьКлючевыеСвойства = ДанныеXDTO.Свойство("КлючевыеСвойства");
	
	Для Каждого Реквизит Из ИменаРеквизитов Цикл
	
		ЗначениеXDTO = Неопределено;
		ИмяСвойстваXDTO = ?(Реквизит.Значение = Неопределено, Реквизит.Ключ, Реквизит.Значение);
		ЕстьСвойство = ДанныеXDTO.Свойство(ИмяСвойстваXDTO, ЗначениеXDTO);
		Если Не ЕстьСвойство И ЕстьКлючевыеСвойства Тогда
			ЕстьСвойство = ДанныеXDTO.КлючевыеСвойства.Свойство(ИмяСвойстваXDTO, ЗначениеXDTO);
		КонецЕсли;
		
		Если ЕстьСвойство Тогда
			Если РеквизитыСчетов <> Неопределено И СтрНайти(РеквизитыСчетов, Реквизит.Ключ) > 0 Тогда
				ДанныеИБ[Реквизит.Ключ] = ?(ЗначениеЗаполнено(ЗначениеXDTO), ПланыСчетов.РазделыУчета[ЗначениеXDTO], Неопределено);
			Иначе
				ДанныеИБ[Реквизит.Ключ] = ?(ЗначениеЗаполнено(ЗначениеXDTO), 
						ЗначениеРеквизитаСУчетомПКО(ЗначениеXDTO, КомпонентыОбмена, СоставныеРеквизиты[Реквизит.Ключ] = Истина),
						Неопределено);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	
	// Копирование табличных частей
	СписокТабЧастей = Неопределено;
	Если ЗначениеЗаполнено(РазрешенныеТабЧасти) Тогда
		СписокТабЧастей = Новый Структура(РазрешенныеТабЧасти);
	ИначеЕсли ДанныеИБ.Метаданные().ТабличныеЧасти.Количество() > 0 Тогда
		СписокТабЧастей = Новый Структура;
		Для Каждого ТабЧасть Из ДанныеИБ.Метаданные().ТабличныеЧасти Цикл
			СписокТабЧастей.Вставить(ТабЧасть.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТабЧастей <> Неопределено Тогда
	
		Для Каждого ТабЧасть Из СписокТабЧастей Цикл
			
			ТЧ = ДанныеИБ[ТабЧасть.Ключ];
			ТЧ.Очистить();
			
			Если Не ДанныеXDTO.Свойство(ТабЧасть.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыТЧ = ДанныеИБ.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ].Реквизиты;
			РеквизитыСоставногоТипа = Новый Структура;
			Для Каждого Реквизит Из РеквизитыТЧ Цикл
				РеквизитыСоставногоТипа.Вставить(Реквизит.Имя, Реквизит.Тип.Типы().Количество() > 1);
			КонецЦикла;
			КолонкиИсточника = ДанныеXDTO[ТабЧасть.Ключ].Колонки;
		
			Для Каждого СтрокаИсточника из ДанныеXDTO[ТабЧасть.Ключ] Цикл
				
				СтрокаТЧ = ТЧ.Добавить();
				Для Каждого Реквизит Из РеквизитыТЧ Цикл
					Если КолонкиИсточника.Найти(Реквизит.Имя) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
		
					Если РеквизитыСчетов <> Неопределено И СтрНайти(РеквизитыСчетов, Реквизит.Имя) > 0 Тогда
						СтрокаТЧ[Реквизит.Имя] = ПланыСчетов.РазделыУчета[СтрокаИсточника[Реквизит.Имя]];
					Иначе
						СтрокаТЧ[Реквизит.Имя] = ЗначениеРеквизитаСУчетомПКО(СтрокаИсточника[Реквизит.Имя], КомпонентыОбмена, РеквизитыСоставногоТипа[Реквизит.Имя] = Истина);
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ДанныеИБ.ОбменДанными.Загрузка = Истина;
	ДанныеИБ.ОбменДанными.Отправитель = КомпонентыОбмена.УзелКорреспондента;
	ДанныеИБ.Записать();
КонецПроцедуры
Процедура ЗаполнитьИзмененияКонстант(КомпонентыОбмена)
	// Заполняет Структуру КомпонентыОбмена.ПараметрыКонвертации.ИзмененияКонстант изменениями, зарегистрированными в плане обмена
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена[КомпонентыОбмена.ПараметрыКонвертации.ИмяПланаОбмена];

	Для Каждого Константа Из Метаданные.Константы Цикл
		
		Выгружать = МетаданныеПланаОбмена.Состав.Содержит(Константа);
		Если КомпонентыОбмена.ПараметрыКонвертации.ОбменСМобильным Тогда
			Выгружать = Метаданные.ПланыОбмена.МобильноеПриложение.Состав.Содержит(Константа);
		КонецЕсли;

		МенеджерЗначения = Константы[Константа.Имя].СоздатьМенеджерЗначения();
		ЕстьИзменения    = ПланыОбмена.ИзменениеЗарегистрировано(КомпонентыОбмена.УзелКорреспондента, МенеджерЗначения); 

		Если Выгружать И ЕстьИзменения Тогда
			МенеджерЗначения.Прочитать();
			КомпонентыОбмена.ПараметрыКонвертации.ИзмененияКонстант.Вставить(Константа.Имя, МенеджерЗначения.Значение);
		КонецЕсли;

		Если ЕстьИзменения Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(КомпонентыОбмена.УзелКорреспондента, МенеджерЗначения);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры
Функция ЗначениеРеквизитаСУчетомПКО(Знач ПолученноеЗначение, КомпонентыОбмена, Составной = Ложь)
	Результат    = ПолученноеЗначение;
	ТипПараметра = ТипЗнч(ПолученноеЗначение);
	
	Если ТипПараметра <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Перечисления
	Если ПолученноеЗначение.Свойство("ЭтоПеречисление") И ПолученноеЗначение.ЭтоПеречисление Тогда
		
		Если ПолученноеЗначение.ТипЗначенияXDTO.Имя = "CatalogRef.ГрафыБюджета" Тогда
			СтрокаПравила = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("Предопр_Спр_ГрафыБюджета", "ИмяПКПД");
		ИначеЕсли ПолученноеЗначение.ТипЗначенияXDTO.Имя = "ВидыКИ" Тогда
			СтрокаПравила = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ВидыКонтактнойИнформации <-> Виды КИ", "ИмяПКПД");
		ИначеЕсли Лев(ПолученноеЗначение.ТипЗначенияXDTO.Имя, 11) = "Predefined." Тогда
			ИмяПеречисления = СтрЗаменить(ПолученноеЗначение.ТипЗначенияXDTO.Имя, "Predefined.", "Предопределенные.");
			СтрокаПравила = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(ИмяПеречисления, "ИмяПКПД");
		Иначе
			ИмяПеречисления = СтрЗаменить(СтрЗаменить(ПолученноеЗначение.ТипЗначенияXDTO.Имя, "EnumRef.", ""), "Перечисление.", "");
			СтрокаПравила = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("Перечисление." + ИмяПеречисления, "ИмяПКПД");
		КонецЕсли;
		
		Если СтрокаПравила = Неопределено Тогда
			СтрокаПравила = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("ПеречислениеСсылка." + ИмяПеречисления, "ИмяПКПД");
		КонецЕсли;
		Если СтрокаПравила = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		Возврат  СтрокаПравила.КонвертацииЗначенийПриПолучении.Получить(ПолученноеЗначение.Значение);
		
	КонецЕсли;
	
	// Определение правила конвертации
	ИмяПКО = ?(ПолученноеЗначение.Свойство("ИмяПКО") И ЗначениеЗаполнено(ПолученноеЗначение.ИмяПКО ), 
			ПолученноеЗначение.ИмяПКО, Неопределено);
	Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
		ИмяПКО = ИмяПКОДляЗагружаемогоЗначения(ПолученноеЗначение, Составной);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Предопределенные элементы
	ИмяПредопределенного = ИмяПредопределенногоИзXDTO(ПолученноеЗначение);
	Если ЗначениеЗаполнено(ИмяПредопределенного)  Тогда
		
		СтрокаПравила = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти(ИмяПКО, "ИмяПКПД");
		Если СтрокаПравила <> Неопределено Тогда
			Возврат  СтрокаПравила.КонвертацииЗначенийПриПолучении.Получить(ИмяПредопределенного);
		Иначе
			МенеджерОбъекта = МенеджерОбъектаПоИмениПКО(ИмяПКО);
			Если МенеджерОбъекта <> Неопределено Тогда
				Возврат МенеджерОбъекта[ИмяПредопределенного];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определение ключевых свойств
	КлючевыеСвойства = Неопределено;
	Если ПолученноеЗначение.Свойство("КлючевыеСвойства") Тогда
		КлючевыеСвойства = ПолученноеЗначение.КлючевыеСвойства;
	ИначеЕсли ПолученноеЗначение.Свойство("Значение") И ТипЗнч(ПолученноеЗначение.Значение) = Тип("Структура") Тогда
		КлючевыеСвойства = ?(ПолученноеЗначение.Значение.Свойство("КлючевыеСвойства"), 
				ПолученноеЗначение.Значение.КлючевыеСвойства, ПолученноеЗначение.Значение);
	Иначе
		КлючевыеСвойства = ПолученноеЗначение;
	КонецЕсли;
	
	// Ссылки на документы с частичным заполнением (владельцы расписания)
	Если Лев(НРег(ИмяПКО), 9) = "документ_"
		И КлючевыеСвойства.Свойство("Ссылка") И ТипЗнч(КлючевыеСвойства.Ссылка) = Тип("Структура")
		И (Не КлючевыеСвойства.Свойство("Дата") 
			Или Не ЗначениеЗаполнено(КлючевыеСвойства.Дата)) Тогда 
		
		// возвращаем только ссылку на документ. 
		//содержимое документа "приедет" из другой базы
		Возврат МенеджерОбъектаПоИмениПКО(ИмяПКО).ПолучитьСсылку(
					Новый УникальныйИдентификатор(КлючевыеСвойства.Ссылка.Значение));
		
	КонецЕсли;
	
	// Получение значения по ПКО
	ПКО = КомпонентыОбмена.ПравилаКонвертацииОбъектов.Найти(ИмяПКО, "ИмяПКО");
	Если ПКО <> Неопределено Тогда
		Возврат ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			ПолученноеЗначение, ПКО, "ПолучитьСсылку").Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ИмяПКОДляВыгружаемогоЗначения(ВыгружаемоеЗначение, Составной = Ложь)
	ТипВыгружаемогоЗначения = ТипЗнч(ВыгружаемоеЗначение);
		
		Если ЭтоПростойТип(ТипВыгружаемогоЗначения) Или ТипВыгружаемогоЗначения = Тип("Структура") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяПКО = Неопределено;
		Если ТипВыгружаемогоЗначения = Тип("СправочникСсылка.Валюты") Тогда
			ИмяПКО = "Справочник_Валюты";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ВариантыБюджетов") Тогда
			ИмяПКО = "Справочник_ВариантыБюджетов";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ГрафыБюджета") Тогда
			//ИмяПКО = "Справочник_ГрафыБюджета";
			ИмяПКО = "Предопр_Спр_ГрафыБюджета";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.Долги") Тогда
			ИмяПКО = "Справочник_Долги";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ДополнительныеЗначенияВидовАналитик") Тогда
			ИмяПКО = "Справочник_ДопЗначенияВидовАналитик";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			ИмяПКО = ?(ВыгружаемоеЗначение.ЭтоГруппа, "Справочник_ДополнительныеОтчетыИОбработкиГруппа", "Справочник_ДополнительныеОтчетыИОбработки");
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
			ИмяПКО = ?(ВыгружаемоеЗначение.ЭтоГруппа, "Справочник_ЗначенияСвойствОбъектов_Группа", "Справочник_ЗначенияСвойствОбъектов");
			
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
			ИмяПКО = "Справочник_ЗначенияСвойствОбъектовИерархия";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ЗначенияСубконтоАналитика") Тогда
			ИмяПКО = "Справочник_ЗначенияСубконтоАналитика";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			ИмяПКО = "Справочник_ИдентификаторыОбъектовМетаданных";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.Имущество") Тогда
			ИмяПКО = ?(ВыгружаемоеЗначение.ЭтоГруппа, "Справочник_Имущество_Группа", "Справочник_Имущество");
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.Контакты") Тогда
			ИмяПКО = ?(ВыгружаемоеЗначение.ЭтоГруппа, "Справочник_Контакты_Группа", "Справочник_Контакты");
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.КошелькиИСчета") Тогда
			ИмяПКО = ?(ВыгружаемоеЗначение.ЭтоГруппа, "Справочник_КошелькиИСчета_Группа", "Справочник_КошелькиИСчета");
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			ИмяПКО = ?(ВыгружаемоеЗначение.ЭтоГруппа, "Справочник_НаборыДопРеквизитовИСведений_Группа", "Справочник_НаборыДопРеквизитовИСведений");
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.Организации") Тогда
			ИмяПКО = "Справочник_Организации";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.Пользователи") Тогда
			ИмяПКО = "Справочник_Пользователи";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ПрикрепленныеФайлы") Тогда
			ИмяПКО = "Справочник_ПрикрепленныеФайлы";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.СтатьиДоходов") Тогда
			ИмяПКО = "Справочник_СтатьиДоходов";
		
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.СтатьиРасходов") Тогда
			ИмяПКО = "Справочник_СтатьиРасходов";
	
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ФинансовыеЦели") Тогда
			ИмяПКО = "Справочник_ФинансовыеЦели";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.РегламентированныеОтчеты") Тогда
			ИмяПКО = ?(ВыгружаемоеЗначение.ЭтоГруппа, "Справочник_РегламентированныеОтчеты_Группа", "Справочник_РегламентированныеОтчеты");
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты") Тогда
			ИмяПКО = "Справочник_УчетныеЗаписиЭлектроннойПочты";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
			ИмяПКО = "Справочник_РегистрацииВНалоговомОргане";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("СправочникСсылка.ПравилаЧтенияТабличныхДокументов") Тогда
			ИмяПКО = "Справочник_ПравилаЧтенияТабличныхДокументов";
		
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ПланВидовХарактеристикСсылка.ВидыАналитик") Тогда
			ИмяПКО = "ПВХ_ВидыАналитик";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			ИмяПКО = "ПВХ_ДополнительныеРеквизитыИСведения";
			
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.ВводИзменениеОстатка") Тогда
			ИмяПКО = "Документ_ВводИзменениеОстатка";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.Доход") Тогда
			ИмяПКО = "Документ_Доход";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.МыВернулиДолг") Тогда
			ИмяПКО = "Документ_МыВернулиДолг";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.МыВзялиВДолг") Тогда
			ИмяПКО = "Документ_МыВзялиВДолг";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.МыДалиВДолг") Тогда
			ИмяПКО = "Документ_МыДалиВДолг";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.НамВернулиДолг") Тогда
			ИмяПКО = "Документ_НамВернулиДолг";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.ОбменВалюты") Тогда
			ИмяПКО = "Документ_ОбменВалюты";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.Перемещение") Тогда
			ИмяПКО = "Документ_Перемещение";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.Расход") Тогда
			ИмяПКО = "Документ_Расход";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.УниверсальнаяОперация") Тогда
			ИмяПКО = "Документ_УниверсальнаяОперация";
		
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.ВыгрузкаРегламентированныхОтчетов") Тогда
			ИмяПКО = "Документ_ВыгрузкаРегламентированныхОтчетов";
		ИначеЕсли ТипВыгружаемогоЗначения = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ИмяПКО = "Документ_РегламентированныйОтчет";
			
		Иначе
			
			МД = Метаданные.НайтиПоТипу(ТипВыгружаемогоЗначения);
			
			Если МД = Неопределено Тогда
				ИмяПКО = Неопределено;
			ИначеЕсли Составной И ОбщегоНазначения.ЭтоПеречисление(МД) Тогда 
				ИмяПКО = "Перечисление." + МД.Имя;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ИмяПКО;
КонецФункции
Функция ИмяПКОДляЗагружаемогоЗначения(ЗагружаемоеЗначение, Составной = Ложь)
	Если ЭтоПростойТип(ТипЗнч(ЗагружаемоеЗначение)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемоеЗначение, "ТипЗначения") Тогда
		ТипЗагружаемогоЗначения = ЗагружаемоеЗначение.ТипЗначения;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемоеЗначение, "ТипЗначенияXDTO") Тогда
		ТипЗагружаемогоЗначения = ЗагружаемоеЗначение.ТипЗначенияXDTO.Имя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПредопределенного = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемоеЗначение, "ИмяПредопределенныхДанных"),
					ЗагружаемоеЗначение.ИмяПредопределенныхДанных, Неопределено);
	
	Если СтрНайти(ТипЗагружаемогоЗначения, "ОбменВалюты") > 0 Тогда
		ИмяПКО = "Документ_ОбменВалюты";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Валюты") > 0 Или СтрНайти(ТипЗагружаемогоЗначения, "Валюта") > 0  Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ВариантыБюджетов") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.ВариантыБюджетов";
		Иначе
			ИмяПКО = "Справочник_ВариантыБюджетов";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ГрафыБюджета") > 0 Тогда
		ИмяПКО = "Предопр_Спр_ГрафыБюджета";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Долги") > 0 Тогда
		ИмяПКО = "Справочник_Долги";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ДополнительныеЗначенияВидовАналитик") > 0 Тогда
		ИмяПКО = "Справочник_ДопЗначенияВидовАналитик";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ДополнительныеОтчетыИОбработкиГруппа") > 0 Тогда
		ИмяПКО = "Справочник_ДополнительныеОтчетыИОбработкиГруппа";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ДополнительныеОтчетыИОбработки") > 0 Тогда
		ИмяПКО = "Справочник_ДополнительныеОтчетыИОбработки";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ЗначенияСвойствОбъектовГруппа") > 0 Тогда
		ИмяПКО = "Справочник_ЗначенияСвойствОбъектов_Группа";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ЗначенияСвойствОбъектов") > 0 Тогда
		ИмяПКО = "Справочник_ЗначенияСвойствОбъектов";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ЗначенияСвойствОбъектовИерархия") > 0 Тогда
		ИмяПКО = "Справочник_ЗначенияСвойствОбъектовИерархия";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ЗначенияСубконтоАналитика") > 0 Тогда
		ИмяПКО = "Справочник_ЗначенияСубконтоАналитика";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ИдентификаторыОбъектовМетаданных") > 0 Тогда
		ИмяПКО = "Справочник_ИдентификаторыОбъектовМетаданных";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ИмуществоГруппа") > 0 Тогда
		ИмяПКО = "Справочник_Имущество_Группа";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Имущество") > 0 Тогда
		ИмяПКО = "Справочник_Имущество";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "КонтактыГруппа") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.Контакты";
		Иначе
			ИмяПКО = "Справочник_Контакты_Группа";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Контакты") > 0 Тогда
		ИмяПКО = "Справочник_Контакты";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "КошелькиИСчетаГруппа") > 0 Тогда
		ИмяПКО = "Справочник_КошелькиИСчета_Группа";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "КошелькиИСчета") > 0 Тогда
		ИмяПКО = "Справочник_КошелькиИСчета";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "НаборыДополнительныхРеквизитовИСведенийГруппа") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.НаборыДопРеквизитов";
		Иначе
			ИмяПКО = "Справочник_НаборыДопРеквизитовИСведений_Группа";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "НаборыДополнительныхРеквизитовИСведений") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.НаборыДопРеквизитов";
		Иначе
			ИмяПКО = "Справочник_НаборыДопРеквизитовИСведений";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Организации") > 0 Тогда
		ИмяПКО = "Справочник_Организации";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Пользователи") > 0 Тогда
		ИмяПКО = "Справочник_Пользователи";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ПрикрепленныеФайлы") > 0 Тогда
		ИмяПКО = "Справочник_ПрикрепленныеФайлы";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "СтатьиДоходов") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.СтатьиДоходов";
		Иначе
			ИмяПКО = "Справочник_СтатьиДоходов";
		КонецЕсли;
	
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "СтраныМира") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.СтраныМира";
		Иначе
			ИмяПКО = "Справочник_СтраныМира";
		КонецЕсли;
	
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "СтатьиРасходов") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.СтатьиРасходов";
		Иначе
			ИмяПКО = "Справочник_СтатьиРасходов";
		КонецЕсли;
	
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ФинансовыеЦели") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.ФинансовыеЦели";
		Иначе
			ИмяПКО = "Справочник_ФинансовыеЦели";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "РегламентированныеОтчетыГруппа") > 0 Тогда
		ИмяПКО = "Справочник_РегламентированныеОтчеты_Группа";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "РегламентированныеОтчеты") > 0 Тогда
		ИмяПКО = "Справочник_РегламентированныеОтчеты";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "УчетныеЗаписиЭлектроннойПочты") > 0 Тогда
		ИмяПКО = "Справочник_УчетныеЗаписиЭлектроннойПочты";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "РегистрацииВНалоговомОргане") > 0 Тогда
		ИмяПКО = "Справочник_РегистрацииВНалоговомОргане";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ПравилаЧтенияТабличныхДокументов") > 0 Тогда
		ИмяПКО = "Справочник_ПравилаЧтенияТабличныхДокументов";
	
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ВидыАналитик") > 0 Тогда
		Если ЗначениеЗаполнено(ИмяПредопределенного) Тогда
			ИмяПКО = "Предопределенные.ВидыАналитик";
		Иначе
			ИмяПКО = "ПВХ_ВидыАналитик";
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ДополнительныеРеквизитыИСведения") > 0 Тогда
		ИмяПКО = "ПВХ_ДополнительныеРеквизитыИСведения";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ВводИзменениеОстатка") > 0 Тогда
		ИмяПКО = "Документ_ВводИзменениеОстатка";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Доход") > 0 Тогда
		ИмяПКО = "Документ_Доход";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "МыВернулиДолг") > 0 Тогда
		ИмяПКО = "Документ_МыВернулиДолг";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "МыВзялиВДолг") > 0 Тогда
		ИмяПКО = "Документ_МыВзялиВДолг";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "МыДалиВДолг") > 0 Тогда
		ИмяПКО = "Документ_МыДалиВДолг";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "НамВернулиДолг") > 0 Тогда
		ИмяПКО = "Документ_НамВернулиДолг";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Перемещение") > 0 Тогда
		ИмяПКО = "Документ_Перемещение";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Расход") > 0 Тогда
		ИмяПКО = "Документ_Расход";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "УниверсальнаяОперация") > 0 Тогда
		ИмяПКО = "Документ_УниверсальнаяОперация";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "ВыгрузкаРегламентированныхОтчетов") > 0 Тогда
		ИмяПКО = "Документ_ВыгрузкаРегламентированныхОтчетов";
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "РегламентированныйОтчет") > 0 Тогда
		ИмяПКО = "Документ_РегламентированныйОтчет";
		
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "EnumRef") > 0 И Составной Тогда
		Позиция = СтрНайти(ТипЗагружаемогоЗначения, "EnumRef") + 8;
		ИмяПКО = "Перечисление." + Сред(ТипЗагружаемогоЗначения, Позиция);
	
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "УниверсальноеЗначение") > 0 Тогда
		ИмяПКО = "ПКО_УниверсальноеЗначение_ПриКонвертацииДанныхXDTO";
	
	ИначеЕсли СтрНайти(ТипЗагружаемогоЗначения, "Пользователь") > 0 Тогда
		ИмяПКО = "Справочник_Пользователи";
	
	Иначе
		ИмяПКО = Неопределено;
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция ИмяПредопределенногоИзXDTO(ДанныеXDTO)
	ИмяЭлемента = "";
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") 
			И ДанныеXDTO.КлючевыеСвойства.Свойство("ИмяПредопределенныхДанных") Тогда
		ИмяЭлемента = ДанныеXDTO.КлючевыеСвойства.ИмяПредопределенныхДанных;
	ИначеЕсли ДанныеXDTO.Свойство("Значение") 
			И ДанныеXDTO.Значение.Свойство("ИмяПредопределенныхДанных") Тогда
		ИмяЭлемента = ДанныеXDTO.Значение.ИмяПредопределенныхДанных;
	ИначеЕсли ДанныеXDTO.Свойство("ИмяПредопределенныхДанных") Тогда
		ИмяЭлемента = ДанныеXDTO.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	Возврат ИмяЭлемента;
КонецФункции
Функция МенеджерОбъектаПоИмениПКО(ИмяПКО)
	Если Не ЗначениеЗаполнено(ИмяПКО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяПКО = "Справочник_Валюты" Тогда
		Возврат Справочники.Валюты;
	ИначеЕсли ИмяПКО = "Справочник_ВариантыБюджетов" Тогда
		Возврат Справочники.ВариантыБюджетов;
	ИначеЕсли ИмяПКО = "Предопр_Спр_ГрафыБюджета" Тогда
		Возврат Справочники.ГрафыБюджета;
	ИначеЕсли ИмяПКО = "Справочник_Долги" Тогда
		Возврат Справочники.Долги;
	ИначеЕсли ИмяПКО = "Справочник_ДопЗначенияВидовАналитик" Тогда
		Возврат Справочники.ДополнительныеЗначенияВидовАналитик;
	ИначеЕсли ИмяПКО = "Справочник_ДополнительныеОтчетыИОбработкиГруппа" Или ИмяПКО = "Справочник_ДополнительныеОтчетыИОбработки" Тогда
		Возврат Справочники.ДополнительныеОтчетыИОбработки;
	ИначеЕсли ИмяПКО = "Справочник_ЗначенияСвойствОбъектов_Группа" Или ИмяПКО = "Справочник_ЗначенияСвойствОбъектов" Тогда
		Возврат Справочники.ЗначенияСвойствОбъектов;
	ИначеЕсли ИмяПКО = "Справочник_ЗначенияСвойствОбъектовИерархия" Тогда
		Возврат Справочники.ЗначенияСвойствОбъектовИерархия;
	ИначеЕсли ИмяПКО = "Справочник_ЗначенияСубконтоАналитика" Тогда
		Возврат Справочники.ЗначенияСубконтоАналитика;
	ИначеЕсли ИмяПКО = "Справочник_ИдентификаторыОбъектовМетаданных" Тогда
		Возврат Справочники.ИдентификаторыОбъектовМетаданных;
	ИначеЕсли ИмяПКО = "Справочник_Имущество_Группа" Или ИмяПКО = "Справочник_Имущество" Тогда
		Возврат Справочники.Имущество;
	ИначеЕсли ИмяПКО = "Справочник_Контакты_Группа" Или ИмяПКО = "Справочник_Контакты" Тогда
		Возврат Справочники.Контакты;
	ИначеЕсли ИмяПКО = "Справочник_КошелькиИСчета_Группа" Или ИмяПКО = "Справочник_КошелькиИСчета" Тогда
		Возврат Справочники.КошелькиИСчета;
	ИначеЕсли ИмяПКО = "Справочник_НаборыДопРеквизитовИСведений_Группа" Или ИмяПКО = "Справочник_НаборыДопРеквизитовИСведений" Тогда
		Возврат Справочники.НаборыДополнительныхРеквизитовИСведений;
	ИначеЕсли ИмяПКО = "Справочник_Организации" Тогда
		Возврат Справочники.Организации;
	ИначеЕсли ИмяПКО = "Справочник_Пользователи" Тогда
		Возврат Справочники.Пользователи;
	ИначеЕсли ИмяПКО = "Справочник_ПрикрепленныеФайлы" Тогда
		Возврат Справочники.ПрикрепленныеФайлы;
	ИначеЕсли ИмяПКО = "Справочник_СтатьиДоходов" Тогда
		Возврат Справочники.СтатьиДоходов;
	ИначеЕсли ИмяПКО = "Справочник_СтатьиРасходов" Тогда
		Возврат Справочники.СтатьиРасходов;
	ИначеЕсли ИмяПКО = "Справочник_ФинансовыеЦели" Тогда
		Возврат Справочники.ФинансовыеЦели;
	ИначеЕсли ИмяПКО = "Справочник_РегламентированныеОтчеты_Группа" Или ИмяПКО = "Справочник_РегламентированныеОтчеты" Тогда
		Возврат Справочники.РегламентированныеОтчеты;
	ИначеЕсли ИмяПКО = "Справочник_УчетныеЗаписиЭлектроннойПочты" Тогда
		Возврат Справочники.УчетныеЗаписиЭлектроннойПочты;
	ИначеЕсли ИмяПКО = "Справочник_РегистрацииВНалоговомОргане" Тогда
		Возврат Справочники.РегистрацииВНалоговомОргане;
	ИначеЕсли ИмяПКО = "Справочник_ПравилаЧтенияТабличныхДокументов" Тогда
		Возврат Справочники.ПравилаЧтенияТабличныхДокументов;
	
	ИначеЕсли ИмяПКО = "ПВХ_ВидыАналитик" Тогда
		Возврат ПланыВидовХарактеристик.ВидыАналитик;
	ИначеЕсли ИмяПКО = "ПВХ_ДополнительныеРеквизитыИСведения" Или ИмяПКО = "Справочник_ДополнительныеРеквизиты" Тогда
		Возврат ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
		
	ИначеЕсли ИмяПКО = "Документ_ВводИзменениеОстатка" 
		Или ИмяПКО = "Документ_Доход"
		Или ИмяПКО = "Документ_МыВернулиДолг"
		Или ИмяПКО = "Документ_МыВзялиВДолг"
		Или ИмяПКО = "Документ_МыДалиВДолг"
		Или ИмяПКО = "Документ_НамВернулиДолг"
		Или ИмяПКО = "Документ_ОбменВалюты"
		Или ИмяПКО = "Документ_Перемещение"
		Или ИмяПКО = "Документ_Расход"
		Или ИмяПКО = "Документ_УниверсальнаяОперация" Тогда
		Возврат Документы[СтрЗаменить(ИмяПКО, "Документ_", "")]
		
	ИначеЕсли ИмяПКО = "Документ_ВыгрузкаРегламентированныхОтчетов" Или ИмяПКО = "Документ_РегламентированныйОтчет" Тогда
		Возврат Документы[СтрЗаменить(ИмяПКО, "Документ_", "")]
		
	Иначе
		ИмяПКО = Неопределено;
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция НоваяТаблицаЗначений(ИменаКолонок)
	//Параметры: 
	//	ИменаКолонок - Строка - имена через запятую
	
	Результат = Новый ТаблицаЗначений();
	Если ТипЗнч(ИменаКолонок) = Тип("Строка") Тогда
		СтруктураКолонок = Новый Структура(ИменаКолонок);
	Иначе
		СтруктураКолонок = ИменаКолонок;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Результат.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Функция НужнаПроверкаПериода(КомпонентыОбмена)
	Возврат КомпонентыОбмена.ПараметрыКонвертации.ЭтоЦентральнаяБаза 
			И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаПлановыхОпераций);
КонецФункции
Функция НужноВыгружатьДокумент(ДанныеИБ, КомпонентыОбмена)
	// Определяет необходимость выгрузки документа в зависимости от настроек обмена
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ЭтоЦентральнаяБаза
			Или Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаДокументов) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеИБ.ЭтоШаблон Или ДанныеИБ.Дата >= КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаДокументов Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции
Процедура ОбновитьПараметрыОбмена(КомпонентыОбмена)
	КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбмена = СинхронизацияАвтономныхКопий.ПараметрыОбменаСУзлом(КомпонентыОбмена.УзелКорреспондента);
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("МинимальнаяДатаДокументов", 
				СинхронизацияАвтономныхКопий.МинимальнаяДатаДляДокументов(КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбмена.ВидПериода,
						 КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбмена.КоличествоПериодов));
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("МинимальнаяДатаПлановыхОпераций", 
				БюджетированиеСервер.МинимальнаяДатаВариантовБюджета(КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаДокументов));
КонецПроцедуры
Процедура ПередЗаписьюПолученногоДокумента(Документ, ДанныеИБ, КомпонентыОбмена)
	// Проверяет необходимость запси полученного документа
	//Например, из мобильного приложения может быть получена ссылка на отстутствующий документ как на владельца расписания
	//Сам документ "приедет" потом из настольной программы, но распиания нужно сохранить с мобильного "как есть". 
	//Чтобы не создавать коллизии, несуществующий документ из мобильного не записывается
	
	Если ЗначениеЗаполнено(Документ.Дата) Тогда
		// документ имеет право на существование
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ОбменСМобильным Тогда
		// даты нет - записать документ невозможно
		//для данных с мобильного приложения это приемлемо
		Документ = Неопределено;
		Возврат;
	КонецЕсли;
КонецПроцедуры
Процедура ПередЗаписьюРегистраСведений(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ)
	//Переносит значения из дополнительных свойств в ПолученныеДанные, все значения приводятся к нужному типу
	//	ПолученныеДанные.ДополнительныеСвойства должны быть подготовлены в обработчике "ПриКрнвертацииДанных", см. пример 
	//в алгоритме ПриКонвертацииРегистраСведений()
	//
	//Параметры:
	//	КомпонентыОбмена - Структура - все параметры и правила обмена
	//	ПолученныеДанные - Набор записей регистра сведений
	
	Для каждого ЭлементОтбора Из ПолученныеДанные.ДополнительныеСвойства.ЗначенияОтбора Цикл
		ПолученныеДанные.Отбор[ЭлементОтбора.Ключ].Установить(ЗначениеРеквизитаСУчетомПКО(ЭлементОтбора.Значение, КомпонентыОбмена));
	КонецЦикла;
	
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		
		Для Каждого СтрокаЗаписи Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			
			Запись = ПолученныеДанные.Добавить();
			Для каждого Колонка Из ПолученныеДанные.ДополнительныеСвойства.ИменаПолейЗаписи Цикл
				
				Если ПолученныеДанные.ДополнительныеСвойства.ЗначенияОтбора.Свойство(Колонка.Ключ) Тогда
					Запись[Колонка.Ключ] = ПолученныеДанные.Отбор[Колонка.Ключ].Значение;
					Продолжить;
				КонецЕсли;
				
				Запись[Колонка.Ключ] = ЗначениеРеквизитаСУчетомПКО(СтрокаЗаписи[Колонка.Ключ], КомпонентыОбмена);
				 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПодготовитьИменаПолейРС(ИмяРегистра, ИменаИзмерений, ИменаПолейЗаписи)
	// Заполняет выходные переменные ИменаИзмерений и ИменаПолейЗаписи структурами, в которых 
	//Ключ - имя поля в метаданных, а Значение - имя свойства в формате
	//Если нет особых правил заполнения, ключ и значение в структурах совпадают и используют все 
	//измерения, ресурсы и реквизиты (в т.ч. стандартные)
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// Заполнение структуры измерений
	ИменаИзмерений = Неопределено;
	СуффиксИзмерений = "Отбор";
	
	Если ИмяРегистра = "" Тогда
		// здесь либо создание структуры ИменаИзмерений либо изменение СуффиксИзмерений
	КонецЕсли;
	
	Если ИменаИзмерений = Неопределено Тогда
		// По умолчанию заполняется всеми измерениями, в которых установлен признак "ОсновнойОтбор"
		ИменаИзмерений = Новый Структура;
		
		Если МетаданныеРегистра.ОсновнойОтборПоПериоду Тогда
			ИменаИзмерений.Вставить("Период", "Период" + СуффиксИзмерений);
		КонецЕсли;
		
		Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если Измерение.ОсновнойОтбор Тогда
				ИменаИзмерений.Вставить(Измерение.Имя, Измерение.Имя + СуффиксИзмерений);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Заполнение структуры полей
	ИменаПолейЗаписи = Неопределено;
	СуффиксПолей = "";
	
	Если ИмяРегистра = "" Тогда
		// здесь создание структуры ИменаПолейЗаписи для конкретного регистра
	КонецЕсли;
	
	Если ИменаПолейЗаписи = Неопределено Тогда
		// По умолчанию заполняется всеми ркизитами и полями, в том числе и стандартными
		ИменаПолейЗаписи = Новый Структура;
		
		Для Каждого Реквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
			ИменаПолейЗаписи.Вставить(Реквизит.Имя, Реквизит.Имя + СуффиксПолей);
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеРегистра.Измерения Цикл
			ИменаПолейЗаписи.Вставить(Реквизит.Имя, Реквизит.Имя + СуффиксПолей);
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеРегистра.Ресурсы Цикл
			ИменаПолейЗаписи.Вставить(Реквизит.Имя, Реквизит.Имя + СуффиксПолей);
		КонецЦикла;
		Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			ИменаПолейЗаписи.Вставить(Реквизит.Имя, Реквизит.Имя + СуффиксПолей);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ПодготовитьКЗагрузкеПараметрыРС(КомпонентыОбмена, ИмяРегистра, ПолученныеДанные, ИменаИзмерений, ИменаПолейЗаписи)
	// Готовим набор записей
	МенеджерРегистра = РегистрыСведений[ИмяРегистра];
	ПолученныеДанные = МенеджерРегистра.СоздатьНаборЗаписей();
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		ПолученныеДанные.ОбменДанными.Загрузка = Истина;
		ПолученныеДанные.ОбменДанными.Отправитель = КомпонентыОбмена.УзелКорреспондента;
	КонецЕсли;
	
	// Готовим структуру отбора и полей записей
	ПодготовитьИменаПолейРС(ИмяРегистра, ИменаИзмерений, ИменаПолейЗаписи);
КонецПроцедуры
Процедура ПриКонвертацииРегистраСведений(ПолученныеДанные, ДанныеXDTO, знач ИменаИзмерений, знач ИменаПолейЗаписи)
	//Переносит информацию из ДанныеXDTO в ПолученныеДанные с учетом правил конвертации
	// Если имена измерений и ресурсов в формате и регистре сведений совпадают, параметры ИменаИзмерений и ИменаПолейЗаписи могут быть строкой
	//иначе - они должны быть структурой, задающей соответствие имен регистра свелений (ключ структуры) именам в формате (значение структуры)
	//
	//Параметры:
	//	ПолученныеДанные - Набор записей регистра сведений
	//	ДанныеXDTO - Структура - подготовленная структура с данными XDTO
	//	ИменаИзмерений - Строка или Структура - имена измерений (через запятую), или структура, в которой ключ - имя измерения регистра, а значение - имя измерения в формате
	//	ИменаПолейЗаписи - Строка или Структура - имена измерений, ресурсов и реквизитов (через запятую), которые нужно заполнить или структура, аналогичная структуре ИменаИзмерений
	
	
	Если ТипЗнч(ИменаИзмерений) = Тип("Строка") Тогда
		ИменаИзмерений = Новый Структура(ИменаИзмерений);
		Для каждого КлючИЗначение Из ИменаИзмерений Цикл
			ИменаИзмерений[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ИменаПолейЗаписи) = Тип("Строка") Тогда
		ИменаПолейЗаписи = Новый Структура(ИменаПолейЗаписи);
		Для каждого КлючИЗначение Из ИменаПолейЗаписи Цикл
			ИменаПолейЗаписи[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	// Структуры с именами заполняемых реквизитов помещаются в дополнительные значения
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ИменаИзмерений",   ИменаИзмерений);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ИменаПолейЗаписи", ИменаПолейЗаписи);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ЗначенияОтбора",   Новый Структура);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи",           Неопределено);
	
	// Подготовка значений отбора для преобразования в объекты конфигурации
	Для каждого КлючИЗначение Из ИменаИзмерений Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеОтбора = Неопределено;
		Если ДанныеXDTO.Свойство(КлючИЗначение.Значение, ЗначениеОтбора) Тогда
			ПолученныеДанные.ДополнительныеСвойства.ЗначенияОтбора.Вставить(КлючИЗначение.Ключ, 
					ЗагружаемоеЗначениеСПравилом(ЗначениеОтбора));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеXDTO.Свойство("Записи") И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
	// Добавление таблицы записей со значениями, подготовленными для преобразования в объекты конфигурации
		
		ТаблицаЗаписей = НоваяТаблицаЗначений(ИменаПолейЗаписи);
		Для каждого ЗаписьXDTO Из ДанныеXDTO.Записи Цикл
			
			СтрокаЗаписи = ТаблицаЗаписей.Добавить();
			Для каждого Колонка Из ИменаПолейЗаписи Цикл
				
				ЗначениеОтбора = Неопределено;
				Если ПолученныеДанные.ДополнительныеСвойства.ЗначенияОтбора.Свойство(Колонка.Ключ, ЗначениеОтбора) Тогда
					СтрокаЗаписи[Колонка.Ключ] = ЗначениеОтбора;
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Колонка.Значение) 
					Или ДанныеXDTO.Записи.Колонки.Найти(Колонка.Значение) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаЗаписи[Колонка.Ключ] = ЗагружаемоеЗначениеСПравилом(ЗаписьXDTO[Колонка.Значение]);
				 
			КонецЦикла;
			
		КонецЦикла;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ТаблицаЗаписей);
			
	КонецЕсли;
КонецПроцедуры
Процедура ПриОтправкеКонстанты(ДанныеИБ, ДанныеXDTO)
	МетаданныеИБ = ДанныеИБ.Метаданные();
	ДанныеXDTO.Вставить("ТипНастройки", "Константа");
	ДанныеXDTO.Вставить("ИмяНастройки", МетаданныеИБ.Имя);
	
	ТипЗнчКонстанты = ТипЗнч(ДанныеИБ.Значение);
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнчКонстанты) Тогда
		ДанныеXDTO.Вставить("ЗначениеНастройкиСсылка", ВыгружаемоеЗначениеСПравилом(ДанныеИБ.Значение));
	ИначеЕсли ТипЗнчКонстанты = Тип("ХранилищеЗначения") Тогда
		ДанныеXDTO.Вставить("ЗначениеНастройкиСсылка", XMLСтрока(ДанныеИБ.Значение));
	Иначе
		ДанныеXDTO.Вставить("ЗначениеНастройкиСсылка", XMLСтрока(Новый ХранилищеЗначения(ДанныеИБ.Значение)));
	КонецЕсли;
КонецПроцедуры
Процедура ПриОтправкеРегистраСведений(ДанныеИБ, ДанныеXDTO, знач ИменаИзмерений, знач ИменаПолейЗаписи)
	//Переносит информацию из ДанныеXDTO в ПолученныеДанные с учетом правил конвертации
	// Если имена измерений и ресурсов в формате и регистре сведений совпадают, параметры ИменаИзмерений и ИменаПолейЗаписи могут быть строкой
	//иначе - они должны быть структурой, задающей соответствие имен регистра свелений (ключ структуры) именам в формате (значение структуры)
	//
	//Параметры:
	//	ДанныеИБ - Набор записей регистра сведений
	//	ДанныеXDTO - Структура - подготовленная структура с данными XDTO
	//	ИменаИзмерений - Строка или Структура - имена измерений (через запятую), или структура, в которой ключ - имя измерения регистра, а значение - имя измерения в формате
	//	ИменаПолейЗаписи - Строка или Структура - имена измерений, ресурсов и реквизитов (через запятую), которые нужно заполнить или структура, аналогичная структуре ИменаИзмерений
	
	
	// Подготовка списка измерений
	Если ТипЗнч(ИменаИзмерений) = Тип("Строка") Тогда
		ИменаИзмерений = Новый Структура(ИменаИзмерений);
		Для каждого КлючИЗначение Из ИменаИзмерений Цикл
			ИменаИзмерений[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	// Подготовка списка колонок записей
	СтрокаПолей = "";
	Если ТипЗнч(ИменаПолейЗаписи) = Тип("Строка") Тогда
		
		СтрокаПолей = СокрЛП(ИменаПолейЗаписи);
		ИменаПолейЗаписи = Новый Структура(ИменаПолейЗаписи);
		Для каждого КлючИЗначение Из ИменаПолейЗаписи Цикл
			ИменаПолейЗаписи[КлючИЗначение.Ключ] = КлючИЗначение.Ключ;
		КонецЦикла;
		
	Иначе
	
		Для Каждого КлючИЗначение Из ИменаПолейЗаписи Цикл
			СтрокаПолей = СтрокаПолей + ?(СтрокаПолей="", "", ",") + КлючИЗначение.Значение;
		КонецЦикла;
	
	КонецЕсли;
	
	
	// Запись в XDTO значений отборов
	Для каждого КлючИЗначение Из ИменаИзмерений Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Или ДанныеИБ.Отбор.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеXDTO.Вставить(КлючИЗначение.Значение, ВыгружаемоеЗначениеСПравилом(ДанныеИБ.Отбор[КлючИЗначение.Ключ].Значение));
		
	КонецЦикла;
	
	
	Если ДанныеИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	// Запись в XDTO строк набора записей
	ТаблицаЗаписей = НоваяТаблицаЗначений(СтрокаПолей);
	Для Каждого Запись Из ДанныеИБ Цикл
		
		СтрокаТаблицы = ТаблицаЗаписей.Добавить();
		Для каждого Поле Из ИменаПолейЗаписи Цикл
			
			Если Не ЗначениеЗаполнено(Поле.Значение) Тогда
				Продолжить;
			КонецЕсли;
	
			СтрокаТаблицы[Поле.Значение] = ВыгружаемоеЗначениеСПравилом(Запись[Поле.Ключ]);
			 
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", ТаблицаЗаписей);
КонецПроцедуры
Процедура ПроверитьПараметрыОбменаПередОтправкой(КомпонентыОбмена)
	// Выполняется перед отправкой данных корреспонденту
	// Сравнивает новые значения параметров обмена с прежними значениями.
	//При необходимости меняется регистрация изменений или выполняется подготовка данных к отправке
	
	ПараметрыОбмена            = КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбмена;
	
	// определение параметров, значения которых изменились и требуют обработки
	ОбработанныеПараметры = Новый Структура;
	Для каждого Ресурс Из Метаданные.РегистрыСведений.ПараметрыСинхронизацииАвтономныхКопий.Ресурсы Цикл
		Если ПараметрыОбмена[Ресурс.Имя] <> ПараметрыОбмена["Прежнее" + Ресурс.Имя] Тогда
			ОбработанныеПараметры.Вставить(Ресурс.Имя, ПараметрыОбмена[Ресурс.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление дат в параметрах конвертации
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("МинимальнаяДатаДокументов", 
				СинхронизацияАвтономныхКопий.МинимальнаяДатаДляДокументов(ПараметрыОбмена.ВидПериода, ПараметрыОбмена.КоличествоПериодов));
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("МинимальнаяДатаПлановыхОпераций", 
				БюджетированиеСервер.МинимальнаяДатаВариантовБюджета(КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаДокументов));
				
	Если ОбработанныеПараметры.Количество() = 0 Тогда
		// Нет необработанных параметров
		Возврат;
	КонецЕсли;
	
	УдалятьРегистрациюОбъектов = Ложь;
	РегистрироватьВсеОбъекты   = Ложь;
	
	// Если запрошен сценарий замены данных, нужно пометить к отправке все данные
	РегистрироватьВсеОбъекты = ПараметрыОбмена.Свойство("ЭтоПервыйОбмен") И ПараметрыОбмена.ЭтоПервыйОбмен;
	Если Не РегистрироватьВсеОбъекты Тогда
		РегистрироватьВсеОбъекты = ОбработанныеПараметры.Свойство("СценарийЗапрашиваемыхДанных") 
			И (
				КомпонентыОбмена.ПараметрыКонвертации.ЭтоЦентральнаяБаза И ОбработанныеПараметры.СценарийЗапрашиваемыхДанных =  Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВАвтономнойКопии
				Или 
				Не КомпонентыОбмена.ПараметрыКонвертации.ЭтоЦентральнаяБаза И ОбработанныеПараметры.СценарийЗапрашиваемыхДанных =  Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВЦентральнойБазе
				);
	КонецЕсли;
	
	Если ОбработанныеПараметры.Свойство("ВидПериода")
		Или ОбработанныеПараметры.Свойство("КоличествоПериодов")
		Или ОбработанныеПараметры.Свойство("УчитыватьОтборПоКошелькам")
		Или ОбработанныеПараметры.Свойство("КлючОтбораПоКошелькам")
		 Тогда
		УдалятьРегистрациюОбъектов = Истина;
		РегистрироватьВсеОбъекты   = Истина;
	КонецЕсли;
	
	Если УдалятьРегистрациюОбъектов Тогда
		// Удаляем регистрацию всех объектов для даного узла плана обмена
		ПланыОбмена.УдалитьРегистрациюИзменений(КомпонентыОбмена.УзелКорреспондента);
	КонецЕсли;
	
	Если РегистрироватьВсеОбъекты Тогда
		// Регистрируем объекты с учетом отборов
		СинхронизацияАвтономныхКопий.ЗарегистрироватьВсеОбъектыДляОтправкиНаУзел(КомпонентыОбмена.УзелКорреспондента, ПараметрыОбмена);
	КонецЕсли;
	
	// Обновление прежних значений в регистре сведений
	СинхронизацияАвтономныхКопий.ОбновитьОбработанныеПараметрыОбменаСУзлом(КомпонентыОбмена.УзелКорреспондента, ОбработанныеПараметры);
КонецПроцедуры
Процедура ПроверитьПараметрыОбменаПередПолучением(КомпонентыОбмена)
	// Выполняется до получения данных от корреспондента. 
	//Параметры обмена, полученные из файла или через WS. На их основании вычисляются даты и подготавливается база для обмена данными
	
	ОбработанныеПараметры = КомпонентыОбмена.ПараметрыКонвертации.ПараметрыОбмена;
	
	Если КомпонентыОбмена.ПараметрыКонвертации.ЭтоЦентральнаяБаза Тогда
		ОчищатьИнформационнуюБазу = ОбработанныеПараметры.СценарийПереданныхДанных = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВЦентральнойБазе;
		УзелЦБ = ПланыОбмена[КомпонентыОбмена.ПараметрыКонвертации.ИмяПланаОбмена].ЭтотУзел();
		Отправитель = КомпонентыОбмена.УзелКорреспондента;
	Иначе
		ОчищатьИнформационнуюБазу = ОбработанныеПараметры.СценарийПереданныхДанных = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВАвтономнойКопии;
		УзелЦБ = Неопределено;
		Отправитель = Неопределено;
	КонецЕсли;
	
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("ОчищатьИнформационнуюБазу", ОчищатьИнформационнуюБазу); 
	
	Если ОчищатьИнформационнуюБазу Тогда
		
		ОписаниеПроблемы = "";
		Если УзелЦБ <> Неопределено Тогда
			
			Попытка
				ОбъектЦБ = УзелЦБ.ПолучитьОбъект();
				ОбъектЦБ.Заблокировать();
				КомпонентыОбмена.ПараметрыКонвертации.Вставить("ОбъектЦБ", ОбъектЦБ); 
			Исключение
				КомпонентыОбмена.ФлагОшибки = Истина;
				ВызватьИсключение НСтр("ru='На сервере выполняется перезапись данных. Повторите попытку позже'");;
			КонецПопытки;
			
		КонецЕсли;
		
		Если Не ОбщегоНазначенияДеньги.ОчиститьДанныеПодсистемыДеньги(Ложь, ОписаниеПроблемы, , , Отправитель) Тогда
			
			КомпонентыОбмена.ФлагОшибки = Истина;
			
			Если УзелЦБ <> Неопределено Тогда
				Попытка
					ОбъектЦБ.Разблокировать();
				Исключение
					//Обработка не требуется
				КонецПопытки; 
				ОбъектЦБ = Неопределено;
			КонецЕсли;
			
			ВызватьИсключение "Не удалось очистить информационную базу: " + ОписаниеПроблемы;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обновление дат в параметрах обмена
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("МинимальнаяДатаДокументов", 
				СинхронизацияАвтономныхКопий.МинимальнаяДатаДляДокументов(ОбработанныеПараметры.ВидПериода, ОбработанныеПараметры.КоличествоПериодов));
	КомпонентыОбмена.ПараметрыКонвертации.Вставить("МинимальнаяДатаПлановыхОпераций", 
				БюджетированиеСервер.МинимальнаяДатаВариантовБюджета(КомпонентыОбмена.ПараметрыКонвертации.МинимальнаяДатаДокументов));
КонецПроцедуры
Функция ПроверитьСоставМобильного(ДанныеИБ, КомпонентыОбмена, ИспользованиеПКО)
	Если Не КомпонентыОбмена.ПараметрыКонвертации.ОбменСМобильным Тогда
		Возврат Истина;
	КонецЕсли;
	
	НужноВыгружать = Метаданные.ПланыОбмена.МобильноеПриложение.Состав.Содержит(ДанныеИБ.Метаданные());
	
	Если Не НужноВыгружать Тогда
		Для Каждого КлючИЗначение Из ИспользованиеПКО Цикл
			ИспользованиеПКО[КлючИЗначение.Ключ] = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НужноВыгружать;
КонецФункции
Процедура ПроверитьСохаряемыеТабЧастиПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	// При необходимости сохраняет прежние строки табличных частей загруженных объектов
	//	* ПолученныеДанные - объект ИБ, заполненный полученными из XDTO данными
	//	* ДанныеИБ - Объект ИБ, если получен сущесвтующий объект, или Неопределено, если получен новый объект
	//	* КомпонентыОбмена - Структура
	
	СохраняемыеТабЧасти = Неопределено;
	Если ДанныеИБ = Неопределено // записывается новый объект
		Или ПолученныеДанные = Неопределено // полученные данные уже очищены, записи не будет
		Или Не ПолученныеДанные.ДополнительныеСвойства.Свойство("СохраняемыеТабЧасти", СохраняемыеТабЧасти) // нет таб.частей, значения которых нужно сохранить
		Или Не ЗначениеЗаполнено(СохраняемыеТабЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяТабЧасти Из СохраняемыеТабЧасти Цикл
		ПолученныеДанные[ИмяТабЧасти].Загрузить(ДанныеИБ[ИмяТабЧасти].Выгрузить());
	КонецЦикла;
КонецПроцедуры
Процедура СохранениеАналитикиПереносВНазначение(ТабЧастьНазначения, ТабЧастьИсточника, КолонкиСопоставления, КолонкаАналитики)
	// сличает значения "Колонок сопоставления" в источнике и назначении. 
	//Если совпадают все значения, переносит "КолонкуАналитики" из источника в назначение
	
	Предел = Мин(ТабЧастьНазначения.Количество() - 1, ТабЧастьИсточника.Количество() - 1);
	Если Предел < 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКолонок = СтрРазделить(КолонкиСопоставления, ",", Ложь);
	
	Для Счетчик = 0 По Предел Цикл
		
		СтрокаНазначения = ТабЧастьНазначения[Счетчик];
		СтрокаИсточника  = ТабЧастьИсточника[Счетчик];
		
		Переносить = Истина;
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			Если СтрокаНазначения[ИмяКолонки] <> СтрокаИсточника[ИмяКолонки] Тогда
				Переносить = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Переносить Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНазначения[КолонкаАналитики] = СтрокаИсточника[КолонкаАналитики];
		
	КонецЦикла;
КонецПроцедуры
Процедура СохранениеАналитикиПроверитьДокументы(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	// пытается сохранить значения аналитики в документах, полученных из базы без аналитики
	//	* ПолученныеДанные - объект ИБ, заполненный полученными из XDTO данными
	//	* ДанныеИБ - Объект ИБ, если получен сущесвтующий объект, или Неопределено, если получен новый объект
	//	* КомпонентыОбмена - Структура
	
	// для сохранения аналитики необходимо, чтобы:
	//  1. ДанныеИБ существуют
	//	2. В строках ТЧ ПолученныеДанные в тех же позициях находятся те же статьи, что и в ДанныеИБ
	//только в этом случае аналитика из строк ТЧ ДанныеИБ переносится в аналогичные строки ТЧ ПолученныеДанные 
	
	ПереноситьАналитику = КомпонентыОбмена <> Неопределено И КомпонентыОбмена.ПараметрыКонвертации.ОбменСМобильным;
	Если Не ПереноситьАналитику Или ПолученныеДанные = Неопределено Тогда
		Возврат;
		
	ИначеЕсли ДанныеИБ = Неопределено Тогда
		// заполнение нового документа аналитикой по умолчанию
		АналитикаСтатей.ЗаполнитьАналитикуДокументаЗначениямиПоУмолчанию(ПолученныеДанные);
		Возврат;
		
	КонецЕсли;
	
	МД = ДанныеИБ.Метаданные(); 
	
	// Сохранение аналитики в табличных частях документа
	Если МД = Метаданные.Документы.Доход Тогда
		СохранениеАналитикиПереносВНазначение( ПолученныеДанные.Доходы, ДанныеИБ.Доходы, "СтатьяДохода", "АналитикаСтатьи" );
	ИначеЕсли МД = Метаданные.Документы.Расход Тогда
		СохранениеАналитикиПереносВНазначение( ПолученныеДанные.Расходы, ДанныеИБ.Расходы, "СтатьяРасходаИмущество", "АналитикаСтатьи" );
	ИначеЕсли МД = Метаданные.Документы.УниверсальнаяОперация Тогда
		СохранениеАналитикиПереносВНазначение( ПолученныеДанные.Доходы, ДанныеИБ.Доходы, "СтатьяДохода,ОбъектУчета,РазделУчета", "АналитикаСтатьиДохода" );
		СохранениеАналитикиПереносВНазначение( ПолученныеДанные.Расходы, ДанныеИБ.Расходы, "СтатьяРасхода,ОбъектУчета,РазделУчета", "АналитикаСтатьиРасхода" );
	Иначе
		// дополнительные расходы
		СохранениеАналитикиПереносВНазначение( ПолученныеДанные.ДополнительныеРасходы, ДанныеИБ.ДополнительныеРасходы, "СтатьяРасхода", "АналитикаСтатьи" );
	КонецЕсли;
	
	// Сохранение аналитики в теле документов
	Если МД = Метаданные.Документы.МыВернулиДолг Тогда
		ПолученныеДанные.АналитикаСтатьиРасходовПоКомиссии = ДанныеИБ.АналитикаСтатьиРасходовПоКомиссии;
		ПолученныеДанные.АналитикаСтатьиРасходовПоПроцентам = ДанныеИБ.АналитикаСтатьиРасходовПоПроцентам;
		ПолученныеДанные.АналитикаСтатьиРасходовПоПроцентам = ДанныеИБ.АналитикаСтатьиРасходовПоПроцентам;
	ИначеЕсли МД = Метаданные.Документы.НамВернулиДолг Тогда
		ПолученныеДанные.АналитикаСтатьиДоходовПоПроцентам = ДанныеИБ.АналитикаСтатьиДоходовПоПроцентам;
		ПолученныеДанные.АналитикаСтатьиСписания = ДанныеИБ.АналитикаСтатьиСписания;
	КонецЕсли;
	
	// заполнение строк с пустой аналитикой аналитикой из шапки
	АналитикаСтатей.ПроверитьАналитикуШапкиВСтроках(ПолученныеДанные);
КонецПроцедуры
Функция СтруктураРегистра(МетаданныеРегистра)
	Результат = Новый Структура;
	Для Каждого Поле Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		Результат.Вставить(Поле.Имя, Поле.Имя);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
		Результат.Вставить(Поле.Имя, Поле.Имя);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
		Результат.Вставить(Поле.Имя, Поле.Имя);
	КонецЦикла;
	Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
		Результат.Вставить(Поле.Имя, Поле.Имя);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции
Процедура ТипЗначенияВставитьДляОтправки(ДанныеXDTO, ОписаниеТипа)
	Если ОписаниеТипа = Неопределено Тогда
		ДанныеXDTO.Вставить("ТипЗначения",  Неопределено);
		Возврат;
	КонецЕсли;
	
	ПредставленияТипов = "";
	Для Каждого Тип Из ОписаниеТипа.Типы() Цикл
		ПредставленияТипов = ПредставленияТипов + ?(ПредставленияТипов = "", "", ",") + ОбщегоНазначения.СтроковоеПредставлениеТипа(Тип); 
	КонецЦикла;
	Если ПредставленияТипов <> "" Тогда
		ДанныеXDTO.Вставить("ТипЗначения",  ПредставленияТипов);
	КонецЕсли;
КонецПроцедуры
Процедура ТипЗначенияКонвертировать(ДанныеXDTO, ПолученныеДанные)
	СтрокаТипов = Неопределено;
	Если Не ДанныеXDTO.Свойство("ТипЗначения", СтрокаТипов) Или Не ЗначениеЗаполнено(СтрокаТипов) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ОписаниеТипа = Новый ОписаниеТипов(СтрокаТипов);
	Исключение
		Возврат;
	КонецПопытки;
	
	ПолученныеДанные.ТипЗначения = ОписаниеТипа;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции
Функция ЭтоКонвертацияПредопределенного(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("КлючевыеСвойства") 
			И ДанныеXDTO.КлючевыеСвойства.Свойство("ИмяПредопределенныхДанных") Тогда
		ИмяЭлемента = ДанныеXDTO.КлючевыеСвойства.ИмяПредопределенныхДанных;
	ИначеЕсли ДанныеXDTO.Свойство("ИмяПредопределенныхДанных") Тогда
		ИмяЭлемента = ДанныеXDTO.ИмяПредопределенныхДанных;
	Иначе
		ИмяЭлемента = "";
	КонецЕсли;
	 
	Результат = ЗначениеЗаполнено(ИмяЭлемента);
	
	Если Результат Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Предопределенный", Истина);
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ИмяПредопределенныхДанных", ИмяЭлемента);
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Предопределенный", Ложь);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
Функция ЭтоОтправкаПредопределенного(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.Предопределенный Тогда
		ДанныеXDTO.Вставить("ИмяПредопределенныхДанных", ДанныеИБ.ИмяПредопределенныхДанных);
		ДанныеXDTO.КлючевыеСвойства.Вставить("ИмяПредопределенныхДанных", ДанныеИБ.ИмяПредопределенныхДанных);
	КонецЕсли;
	
	Возврат ДанныеИБ.Предопределенный;
КонецФункции
Функция ЭтоПередЗаписьюПредопределенного(КомпонентыОбмена, ПолученныеДанные, ДанныеИБ, РазрешенныеРеквизиты=Неопределено, РазрешенныеТабЧасти=Неопределено)
	// Если загружаются предопределенные данные, идентификация происходит по имени предопределенных.
	//Объект предопределенных данных заполняется разрешенными реквизитами и табличными частями
	// Если выполнено заполнение предопределенного, функция вернет истину.
	//
	//Параметры:
	//	КомпонентыОбмена - Структура - все параметры и правила обмена
	//	ПолученныеДанные - СправочникОбъект, ПВХОбъект или ПланСчетовОбъект
	//	ДанныеИБ - СправочникОбъект, ПВХОбъект или ПланСчетовОбъект, в который будут перенесены значения реквизитов
	//  РазрешенныеРеквизиты - Строка - имена реквизитов, через запятую, которые могут быть изменены при обмене
	//  РазрешенныеТабЧасти - Строка - имена табличных частей, через запятую, которые могут быть изменены при обмене
	//
	
	
	Если Не ПолученныеДанные.ДополнительныеСвойства.Свойство("Предопределенный") Или ПолученныеДанные.ДополнительныеСвойства.Предопределенный <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяПредопределенного = "";
	Если Не ПолученныеДанные.ДополнительныеСвойства.Свойство("ИмяПредопределенныхДанных", ИмяПредопределенного) Или Не ЗначениеЗаполнено(ИмяПредопределенного) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Иерархический = Ложь;
	Если ОбщегоНазначения.ЭтоСправочник(ПолученныеДанные.Метаданные()) Тогда
		МенеджерОбъекта = Справочники[ПолученныеДанные.Метаданные().Имя];
		Иерархический = ПолученныеДанные.Метаданные().Иерархический;
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ПолученныеДанные.Метаданные()) Тогда
		МенеджерОбъекта = ПланыВидовХарактеристик[ПолученныеДанные.Метаданные().Имя];
		Иерархический = ПолученныеДанные.Метаданные().Иерархический;
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ПолученныеДанные.Метаданные()) Тогда
		МенеджерОбъекта = ПланыСчетов[ПолученныеДанные.Метаданные().Имя];
		Иерархический = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеИБ = МенеджерОбъекта[ИмяПредопределенного].ПолучитьОбъект();
	
	
	// Копирование значений реквизитов
	Если ЗначениеЗаполнено(РазрешенныеРеквизиты) Тогда
		ИменаРеквизитов = Новый Структура(РазрешенныеРеквизиты);
	Иначе
		ИменаРеквизитов = Новый Структура("Наименование");
		Для Каждого Реквизит Из ПолученныеДанные.Метаданные().Реквизиты Цикл
			ИменаРеквизитов.Вставить(Реквизит.Имя);
		КонецЦикла;
		
		Если Иерархический Тогда
			ИменаРеквизитов.Вставить("Родитель");
		КонецЕсли;
		
		Если ПолученныеДанные.Метаданные().ДлинаКода > 0 Тогда
			ИменаРеквизитов.Вставить("Код");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из ИменаРеквизитов Цикл
	
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство(Реквизит.Ключ) Тогда
			ДанныеИБ[Реквизит.Ключ] = ЗначениеРеквизитаСУчетомПКО(ПолученныеДанные.ДополнительныеСвойства[Реквизит.Ключ], КомпонентыОбмена);
		Иначе
			ДанныеИБ[Реквизит.Ключ] = ПолученныеДанные[Реквизит.Ключ];
		КонецЕсли;
	
	КонецЦикла;
	
	
	// Копирование табличных частей
	СписокТабЧастей = Неопределено;
	Если ЗначениеЗаполнено(РазрешенныеТабЧасти) Тогда
		ИменаТаблиц = Новый Структура(РазрешенныеТабЧасти);
	ИначеЕсли ПолученныеДанные.Метаданные().ТабличныеЧасти.Количество() > 0 Тогда
		ИменаТаблиц = Новый Структура;
		Для Каждого ТабЧасть Из ПолученныеДанные.Метаданные().ТабличныеЧасти Цикл
			ИменаТаблиц.Вставить(ТабЧасть.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокТабЧастей = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		
		ТЧ = ДанныеИБ[ТабЧасть.Ключ];
		РеквизитыТЧ = ПолученныеДанные.Метаданные().ТабличныеЧасти[ТабЧасть.Ключ].Реквизиты;
		Если ПолученныеДанные.ДополнительныеСвойства.Свойство(ТабЧасть.Ключ) Тогда
			ТаблицаИсточника = ПолученныеДанные.ДополнительныеСвойства[ТабЧасть.Ключ];
		Иначе
			ТаблицаИсточника = ПолученныеДанные[ТабЧасть.Ключ];
		КонецЕсли;
		
		Для Каждого СтрокаИсточника из ТаблицаИсточника Цикл
			
			СтрокаТЧ = ТЧ.Добавить();
			Для Каждого Реквизит Из РеквизитыТЧ Цикл
				СтрокаТЧ[Реквизит.Имя] = ЗначениеРеквизитаСУчетомПКО(СтрокаИсточника[Реквизит.Имя], КомпонентыОбмена);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции
Функция ЭтоПростойТип(Тип)
	Возврат Тип = Тип("Строка") Или Тип = Тип("Булево") Или Тип = Тип("Дата") Или Тип = Тип("Число") Или Тип = Тип("Неопределено");
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ИзмененияКонстант");
	ПараметрыКонвертации.Вставить("ПараметрыОбмена");
	ПараметрыКонвертации.Вставить("ЭтоЦентральнаяБаза");
	ПараметрыКонвертации.Вставить("ИмяПланаОбмена");
	ПараметрыКонвертации.Вставить("ПараметрыОбменаЗагружены");
	ПараметрыКонвертации.Вставить("МинимальнаяДатаДокументов");
	ПараметрыКонвертации.Вставить("МинимальнаяДатаПлановыхОпераций");
	ПараметрыКонвертации.Вставить("ЗагружаемыеПоказателиПлановыхОпераций");
	ПараметрыКонвертации.Вставить("ВалютаУчета");
	ПараметрыКонвертации.Вставить("ОбменСМобильным");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_ПОД_АрхивДанныхРегОтчетности_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_АрхивДанныхРегОтчетности_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_БезопасноеХранилищеДанных_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_БезопасноеХранилищеДанных_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Валюты_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Валюты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ВводИзменениеОстатка_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ВводИзменениеОстатка_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ВидыАналитик_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ВидыАналитик_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ВыгрузкаРегОтчетов_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ВыгрузкаРегОтчетов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ДатыРасписаний_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ДатыРасписаний_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ДопЗначенияВидовАналитик_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ДопЗначенияВидовАналитик_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ДополнительныеРеквизитыИСведения_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ДопОтчетыИОбработки_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ДопОтчетыИОбработки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Доход_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Доход_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ЗначенияСвойствОбъектов_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ЗначенияСвойствОбъектов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ЗначенияСвойствОбъектовИерархия_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ЗначенияСубконтоАналитика_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ЗначенияСубконтоАналитика_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Имущество_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Имущество_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_КлючевыеСловаОбъектов_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_КлючевыеСловаОбъектов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Контакты_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Контакты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_КошелькиИСчета_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_КошелькиИСчета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_КурсыВалют_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_КурсыВалют_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_МыВернулиДолг_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_МыВернулиДолг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_МыВзялиВДолг_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_МыВзялиВДолг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_МыДалиВДолг_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_МыДалиВДолг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НаборыДопРеквизитовИСведений_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_НаборыДопРеквизитовИСведений_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НазначениеДополнительныхОбработок_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_НазначениеДополнительныхОбработок_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НамВернулиДолг_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_НамВернулиДолг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НапоминанияПользователя_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_НапоминанияПользователя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НастройкиАналитикиПоСтатьям_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_НастройкиАналитикиПоСтатьям_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ОбменВалюты_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ОбменВалюты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ОборотыПлановыхОпераций_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ОборотыПлановыхОпераций_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ОперацииШаблонов_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ОперацииШаблонов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Организации_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Организации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Перемещение_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Перемещение_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПоказателиБюджета_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ПоказателиБюджета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Пользователи_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Пользователи_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ПравилаЧтенияТабличныхДокументов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПрикрепленныеФайлы_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ПрикрепленныеФайлы_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПринадлежностьФайлов_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_ПринадлежностьФайлов_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Расписания_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Расписания_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Расход_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_Расход_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_РегистрацииВНалоговомОргане_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_РегистрацииВНалоговомОргане_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_РегламентированныйОтчет_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_РегламентированныйОтчет_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_СоставСтатейБюджета_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_СоставСтатейБюджета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_спрРегламентированныеОтчеты_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_спрРегламентированныеОтчеты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_СтраныМира_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_СтраныМира_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_УниверсальнаяОперация_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_УниверсальнаяОперация_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_УчетныеЗаписиПочты_Отправка_ПриОбработке" Тогда 
		ПОД_ПОД_УчетныеЗаписиПочты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РС_ДополнительныеСведения_Отправка_ПриОбработке" Тогда 
		ПОД_РС_ДополнительныеСведения_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_АрхивДанныхРегОтчетности_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_АрхивДанныхРегОтчетности_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_БезопасноеХранилищеДанных_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_БезопасноеХранилищеДанных_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ВариантыБюджетов_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ВариантыБюджетов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ВидыАналитик_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ВидыАналитик_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ДатыРасписаний_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ДатыРасписаний_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ДополнительныеРеквизитыИСведения_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ДополнительныеРеквизитыИСведения_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_КлючевыеСловаОбъектов_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_КлючевыеСловаОбъектов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Константы_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_Константы_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_КурсыВалют_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_КурсыВалют_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НаборыДопРеквизитовИСведений_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_НаборыДопРеквизитовИСведений_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_НаборыДопРеквизитовИСведенийГруппа_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НазначениеДополнительныхОбработок_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_НазначениеДополнительныхОбработок_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НапоминанияПользователя_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_НапоминанияПользователя_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_НастройкиАналитикиВДокПоУмолчанию_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_НастройкиАналитикиПоСтатьям_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_НастройкиАналитикиПоСтатьям_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ОборотыПлановыхОпераций_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ОборотыПлановыхОпераций_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ОперацииШаблонов_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ОперацииШаблонов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ПараметрыГрафикаПогашенияДолгов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПараметрыОбмена_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ПараметрыОбмена_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПоказателиБюджета_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ПоказателиБюджета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ПринадлежностьФайлов_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ПринадлежностьФайлов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_Расписания_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_Расписания_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_СоставСтатейБюджета_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_СоставСтатейБюджета_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_СтатьиДоходов_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_СтатьиДоходов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_СтатьиРасходов_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_СтатьиРасходов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_СтраныМира_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_СтраныМира_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_УчетныеЗаписиПочты_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_УчетныеЗаписиПочты_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_ПОД_ФинансовыеЦели_Получение_ПриОбработке" Тогда 
		ПОД_ПОД_ФинансовыеЦели_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_РС_ДополнительныеСведения_Получение_ПриОбработке" Тогда 
		ПОД_РС_ДополнительныеСведения_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Константы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Константы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПараметрыОбмена_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_ПараметрыОбмена_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РН_ОборотыПлановыхОпераций_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РН_ОборотыПлановыхОпераций_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_АрхивДанныхРеглОтчетности_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_АрхивДанныхРеглОтчетности_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_БезопасноеХранилищеДанных_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_БезопасноеХранилищеДанных_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ДатыРасписаний_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_ДатыРасписаний_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ДополнительныеСведения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_ДополнительныеСведения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_КлючевыеСловаОбъектов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_КлючевыеСловаОбъектов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_КурсыВалют_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_КурсыВалют_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_НазначениеДополнительныхОбработок_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_НазначениеДополнительныхОбработок_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_НапоминанияПользователя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_НапоминанияПользователя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_НастройкиАналитикиВДокПоУмолчанию_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_НастройкиАналитикиПоСтатьям_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_НастройкиАналитикиПоСтатьям_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ОперацииШаблонов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_ОперацииШаблонов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_ПараметрыГрафикаПогашенияДолгов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ПоказателиБюджета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_ПоказателиБюджета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_ПринадлежностьФайлов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_ПринадлежностьФайлов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_Расписания_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_Расписания_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_РС_СоставСтатейБюджета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_РС_СоставСтатейБюджета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_УниверсальноеЗначение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_УниверсальноеЗначение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВводИзменениеОстатка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВводИзменениеОстатка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВводИзменениеОстатка_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВводИзменениеОстатка_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВводИзменениеОстатка_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВводИзменениеОстатка_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыгрузкаРегламентированныхОтчетов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Доход_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Доход_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Доход_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_Доход_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Доход_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_Доход_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыВернулиДолг_ПриОтправкеДанных" Тогда 
		ПКО_Документ_МыВернулиДолг_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыВернулиДолг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_МыВернулиДолг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыВернулиДолг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_МыВернулиДолг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыВзялиВДолг_ПриОтправкеДанных" Тогда 
		ПКО_Документ_МыВзялиВДолг_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыВзялиВДолг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_МыВзялиВДолг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыВзялиВДолг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_МыВзялиВДолг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыДалиВДолг_ПриОтправкеДанных" Тогда 
		ПКО_Документ_МыДалиВДолг_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыДалиВДолг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_МыДалиВДолг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_МыДалиВДолг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_МыДалиВДолг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НамВернулиДолг_ПриОтправкеДанных" Тогда 
		ПКО_Документ_НамВернулиДолг_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НамВернулиДолг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_НамВернулиДолг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_НамВернулиДолг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_НамВернулиДолг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОбменВалюты_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОбменВалюты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОбменВалюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОбменВалюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОбменВалюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОбменВалюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Перемещение_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Перемещение_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Перемещение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_Перемещение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Перемещение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_Перемещение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Расход_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Расход_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Расход_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_Расход_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Расход_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_Расход_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УниверсальнаяОперация_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УниверсальнаяОперация_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УниверсальнаяОперация_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УниверсальнаяОперация_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УниверсальнаяОперация_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УниверсальнаяОперация_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПВХ_ВидыАналитик_ПриОтправкеДанных" Тогда 
		ПКО_ПВХ_ВидыАналитик_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПВХ_ВидыАналитик_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПВХ_ВидыАналитик_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриОтправкеДанных" Тогда 
		ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПВХ_ДополнительныеРеквизитыИСведения_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВариантыБюджетов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ВариантыБюджетов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ВариантыБюджетов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ВариантыБюджетов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГрафыБюджета_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ГрафыБюджета_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГрафыБюджета_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ГрафыБюджета_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ГрафыБюджета_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ГрафыБюджета_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Долги_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Долги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Долги_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Долги_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Долги_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Долги_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДопЗначенияВидовАналитик_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДопЗначенияВидовАналитик_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДопЗначенияВидовАналитик_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДопЗначенияВидовАналитик_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДопОтчетыИОбработки_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДопОтчетыИОбработки_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДопОтчетыИОбработки_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДопОтчетыИОбработки_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДопОтчетыИОбработки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДопОтчетыИОбработки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСвойствОбъектов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗначенияСвойствОбъектов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСвойствОбъектов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЗначенияСвойствОбъектов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЗначенияСвойствОбъектов_Группа_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЗначенияСвойствОбъектовИерархия_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСубконтоАналитика_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЗначенияСубконтоАналитика_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЗначенияСубконтоАналитика_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ЗначенияСубконтоАналитика_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ИдентификаторыОбъектовМетаданных_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Имущество_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Имущество_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Имущество_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Имущество_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Имущество_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Имущество_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Имущество_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Имущество_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Имущество_Группа_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Имущество_Группа_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Имущество_Группа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Имущество_Группа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контакты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контакты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контакты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контакты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контакты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контакты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контакты_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контакты_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контакты_Группа_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контакты_Группа_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контакты_Группа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контакты_Группа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КошелькиИСчета_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КошелькиИСчета_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КошелькиИСчета_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КошелькиИСчета_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КошелькиИСчета_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КошелькиИСчета_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КошелькиИСчета_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_КошелькиИСчета_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КошелькиИСчета_Группа_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КошелькиИСчета_Группа_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КошелькиИСчета_Группа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КошелькиИСчета_Группа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НаборыДопРеквизитовИСведений_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НаборыДопРеквизитовИСведений_Группа_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ПравилаЧтенияТабличныхДокументов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтраныМира_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтраныМира_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтраныМира_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтраныМира_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_УчетныеЗаписиЭлектроннойПочты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФинансовыеЦели_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФинансовыеЦели_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФинансовыеЦели_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФинансовыеЦели_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФинансовыеЦели_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФинансовыеЦели_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
