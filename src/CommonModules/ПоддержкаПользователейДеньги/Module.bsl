////////////////////////////////////////////////////////////////////////////////
// ПоддержкаПользователейДеньги
//
//	Функционал поддержки пользователей конфигурации 1С:Деньги
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру с настройками и другими параметрами поддержки пользователей
//
//Параметры:
//	нет
//
//Возвращаемое значение:
//	Структура - Параметры, сохраняемые в константе ПараметрыПоддержкиПользователейДеньги
Функция ПараметрыПоддержкиПользователя() Экспорт

	ПараметрыПоУмолчанию = НоваяСтруктураПараметров();
	
	ТекущиеПараметры = Константы.ПараметрыПоддержкиПользователейДеньги.Получить().Получить();
	Если ТекущиеПараметры = Неопределено Тогда
		ТекущиеПараметры = ПараметрыПоУмолчанию;
		УстановитьПараметрыПоддержкиПользователя(ТекущиеПараметры);
		Возврат ТекущиеПараметры;
	КонецЕсли;
	
	// Проверяем актуальность сохраненных настроек
	Для каждого КлючИЗначение Из ПараметрыПоУмолчанию Цикл
		
		Если Не ТекущиеПараметры.Свойство(КлючИЗначение.Ключ) Тогда
			ТекущиеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекущиеПараметры;

КонецФункции

// Сохраняет набор настроек и параметров поддержки пользователей в константу ПараметрыПоддержкиПользователейДеньги
//
//Параметры:
//	ПараметрыПоддержки - Структура
//
Процедура УстановитьПараметрыПоддержкиПользователя(ПараметрыПоддержки) Экспорт
	
	Константы.ПараметрыПоддержкиПользователейДеньги.Установить(Новый ХранилищеЗначения(ПараметрыПоддержки, Новый СжатиеДанных(9)));
	
КонецПроцедуры

// Сохраняет изменившийся номер в константе ПараметрыПоддержкиПользователейДеньги
//
//Параметры:
//	Номер - Строка - регистрационный номер программы
//
Процедура ЗаписатьРегистрационныйНомер(Номер) Экспорт
	
	ПараметрыПоддержки = ПараметрыПоддержкиПользователя();
	ПараметрыПоддержки.РегистрационныйНомер = Номер;
	УстановитьПараметрыПоддержкиПользователя(ПараметрыПоддержки);
	
КонецПроцедуры

// Возвращает структру, готовую для формирования сообщения в службу поддержки
//
//Параметры:
//	Источник - УправляемаяФорма или Окно, из которого вызвана команда отправки сообщения в службу поддержки
//
//Возвращаемое значение:
//	Структура - структура сообщения в службу поддержки
//	
Функция НоваяСтруктураСообщения(Источник = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	// Структура почтового сообщения в службу поддержки
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("Отправитель", "");
	СтруктураСообщения.Вставить("Получатель", "v8@1c.ru");
	СтруктураСообщения.Вставить("Тема", "");
	СтруктураСообщения.Вставить("Тело", "");
	СтруктураСообщения.Вставить("ТехнологическаяИнформация", "");
	СтруктураСообщения.Вставить("Вложения", Новый СписокЗначений);

	// Сохраненные параметры поддержки
	ПараметрыПоддержки = ПараметрыПоддержкиПользователя();
	СтруктураСообщения.Вставить("РегистрационныйНомер", ПараметрыПоддержки.РегистрационныйНомер);
	
	// Учетные записи почты для отправки сообщения
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		СтруктураСообщения.Вставить("УчетнаяЗапись", РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись());
	Иначе
		СтруктураСообщения.Вставить("УчетнаяЗапись", ДоступныеУчетныеЗаписи[0].Ссылка);
	КонецЕсли;
	
	// Определяем флаги для сбора технолонической информации
	СобратьОбщиеСведения        = Истина;
	СобратьСведенияОбОбмене     = Истина;
	СобратьЗаписиОбОшибках      = Истина;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		ИмяФормы = Неопределено;
		Источник.Свойство("ИмяФормы", ИмяФормы);
		
		Если ИмяФормы = "Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации" Тогда
			// Список ошибок не собираем, выгружаем отобранные записи журнала регистрации.
			
			СобратьЗаписиОбОшибках = Ложь;
			
			ЗаголовокСписка   = "Записи журнала регистрации (%1)";
			ЗаголовокСписка   = СтрШаблон(ЗаголовокСписка, Источник.ПредставлениеОтбора);
			ТабличныйДокумент = ОбщегоНазначенияДеньги.ТабличныйДокументИзТаблицыЗначений(Источник.Журнал.Выгрузить(), ЗаголовокСписка);
			ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
			ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
			
			СтруктураСообщения.Вложения.Добавить(ИмяФайла, "Записи журнала регистрации.mxl");
			
		ИначеЕсли ИмяФормы = "Обработка.ЖурналРегистрации.Форма.Событие" Тогда
			
			// Список ошибок не собираем, выгружаем отобранные записи журнала регистрации.
			
			СобратьЗаписиОбОшибках = Ложь;
			ЗаголовокСписка   = "Записи журнала регистрации по сеансу %1 на момент %2";
			ЗаголовокСписка   = СтрШаблон(ЗаголовокСписка, Источник.Сеанс, Источник.Дата);
			
			Отбор = Новый Структура;
			Отбор.Вставить("ДатаОкончания", Источник.Дата);
			Отбор.Вставить("ДатаНачала ", Источник.Дата);
			Отбор.Вставить("ИмяПользователя ", Источник.ИмяПользователя);
			Отбор.Вставить("Сеанс ", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Источник.Сеанс));
			ЗаписиЖурнала = ПолучитьЗаписиЖурналаПоОтбору(Отбор);
			
			ТабличныйДокумент = ОбщегоНазначенияДеньги.ТабличныйДокументИзТаблицыЗначений(ЗаписиЖурнала, ЗаголовокСписка);
			ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
			ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
			
			СтруктураСообщения.Вложения.Добавить(ИмяФайла, "Записи журнала регистрации.mxl");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СобратьОбщиеСведения Тогда
		СтруктураСообщения.ТехнологическаяИнформация = ОбщиеСведенияОПрограммеИОС();
	КонецЕсли;
	
	Если СобратьСведенияОбОбмене Тогда
		ДополнитьСообщениеСведениямиОбОбмене(СтруктураСообщения);
	КонецЕсли;
	
	Если СобратьЗаписиОбОшибках Тогда
		ДополнитьСообщениеСведениямиОбОшибках(СтруктураСообщения);
	КонецЕсли;
	
	Возврат СтруктураСообщения;
	
КонецФункции

// Возвращает структуру с данными отбора для журнала регистрации.
//
Функция ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы, Знач ДействиеПриОбмене) Экспорт
	
	Если ТипЗнч(ДействиеПриОбмене) = Тип("Строка") Тогда
		
		ДействиеПриОбмене = Перечисления.ДействияПриОбмене[ДействиеПриОбмене];
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостоянияОбменовДанными = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы, ДействиеПриОбмене);
	
	Отбор = Новый Структура;
	Отбор.Вставить("СобытиеЖурналаРегистрации", ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене));
	Отбор.Вставить("ДатаНачала",                СостоянияОбменовДанными.ДатаНачала);
	Отбор.Вставить("ДатаОкончания",             СостоянияОбменовДанными.ДатаОкончания);
	
	Возврат Отбор;
КонецФункции


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция НоваяСтруктураПараметров() 

	Результат = Новый Структура;
	
	// Регистрационный номер программы
	Результат.Вставить("РегистрационныйНомер", "");
	
	// Флаг использования встроенной почты
	Результат.Вставить("ИспользоватьВстроенногоПочтовогоКлиента", Истина);
	
	Возврат Результат;

КонецФункции

Функция АдресДомашнейСетиКорректен(УРЛ) 

	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(УРЛ);
	Если Не ЗначениеЗаполнено(СтруктураАдреса.Схема) Тогда
		СтруктураАдреса.Схема = "http";
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтруктураАдреса.ИмяСервера) ИЛИ Не ЗначениеЗаполнено(СтруктураАдреса.ПутьНаСервере) Тогда
		Возврат НСтр("ru = 'Адрес информационной базы указан некорректно'");
	КонецЕсли; 
	
	ИнтернетПрокси = ОбменМобильноеПриложение.НастройкиПроксиСервера();
	
	Соединение = Новый HTTPСоединение(СтруктураАдреса.Хост,
		СтруктураАдреса.Порт,
		СтруктураАдреса.Логин,
		СтруктураАдреса.Пароль,
		ИнтернетПрокси,
		10,
		?(Нрег(СтруктураАдреса.Схема) = "https",
			Новый ЗащищенноеСоединениеOpenSSL(),
			Неопределено));
	
	АдресСервиса =  СтруктураАдреса.ПутьНаСервере + "/ws/MobileService?wsdl";
	Запрос = Новый HTTPЗапрос(АдресСервиса);
	
	Попытка
		РезультатЗапроса = Соединение.Получить(Запрос);
	Исключение
		Возврат НСтр("ru='Не удалось подключиться по заданному адресу'") ;
	КонецПопытки; 
	
	//Коды состояния HTTP: 200 - успех, 401 - ошибка авторизации
	Если РезультатЗапроса.КодСостояния = 200 ИЛИ РезультатЗапроса.КодСостояния = 401 Тогда
		Возврат "Ок";
	Иначе
		Возврат НСтр("ru = 'Не удалось проверить доступность сервисов'");
	КонецЕсли; 
	

КонецФункции

Функция РезультатВыгрузкиМобильныхУстройств(ТаблицаУстройств, Вложения) 

	ТаблицаУстройств.Колонки.Добавить("ОшибкиВыгрузки", Новый ОписаниеТипов("ТаблицаЗначений"), "Ошибки выгрузки данных");
	ТаблицаУстройств.Колонки.Добавить("ОшибкиЗагрузки", Новый ОписаниеТипов("ТаблицаЗначений"), "Ошибки загрузки данных");
	
	МассивОшибок = Новый Массив;
	Для каждого СтрокаУстройства Из ТаблицаУстройств Цикл
		
		Если Не СтрокаУстройства.Активность Или СтрокаУстройства.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУстройства.РезультатПоследнейВыгрузкиДанных <> 0 Тогда
			МассивОшибок.Добавить(Новый Структура("УзелИнформационнойБазы,ДействиеПриОбмене,Дата", СтрокаУстройства.УзелИнформационнойБазы, "ВыгрузкаДанных", СтрокаУстройства.ДатаНачалаПоследнейВыгрузки));
			СтрокаУстройства.ОшибкиВыгрузки = ПолучитьОшибкиОбменаДанными(СтрокаУстройства.УзелИнформационнойБазы, "ВыгрузкаДанных");
		КонецЕсли;
		 
		Если СтрокаУстройства.РезультатПоследнейЗагрузкиДанных <> 0 Тогда
			МассивОшибок.Добавить(Новый Структура("УзелИнформационнойБазы,ДействиеПриОбмене,Дата", СтрокаУстройства.УзелИнформационнойБазы, "ЗагрузкаДанных", СтрокаУстройства.ДатаНачалаПоследнейЗагрузки));
			СтрокаУстройства.ОшибкиЗагрузки = ПолучитьОшибкиОбменаДанными(СтрокаУстройства.УзелИнформационнойБазы, "ЗагрузкаДанных");
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент = ОбщегоНазначенияДеньги.ТабличныйДокументИзТаблицыЗначений(ТаблицаУстройств, "Результаты синхронизации с мобильными устройствами");
	ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	
	Вложения.Добавить(ИмяФайла, "Результаты синхронизации.mxl");
	
	Результат = НСтр("ru='Результаты синхронизации (%1) добавлены во вложения'");
	Результат = СтрШаблон(Результат, Вложения.Количество()) + Символы.ПС;
	
	Если МассивОшибок.Количество() = 0 Тогда
		Результат = Результат + НСтр("ru='Ошибок синхронизации не зарегистрировано'") + Символы.ПС;
	Иначе
		
		Результат = Результат + НСтр("ru='Зарегистрировано ошибок синхронизации: %1'") + Символы.ПС;
		Результат = СтрШаблон(Результат, Вложения.Количество()) + Символы.ПС;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьОшибкиОбменаДанными(УзелИнформационнойБазы, ДействиеПриОбмене) 

	ПараметрыЖурнала = ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене);
	ПараметрыЖурнала.Вставить("Уровень", Новый Массив);
	ПараметрыЖурнала.Уровень.Добавить(УровеньЖурналаРегистрации.Ошибка);
	ПараметрыЖурнала.Уровень.Добавить(УровеньЖурналаРегистрации.Предупреждение);
	
	ЗаписиЖуранла = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ЗаписиЖуранла, ПараметрыЖурнала, , , 50);

	Возврат ЗаписиЖуранла;
	
КонецФункции

// Возвращает общую информацию о версиях и режимах использования платформы, конфигурации, ОС и т.д.
//
//Параметры:
//	нет
//
//Возвращаемое значение:
//	Текст
//
Функция ОбщиеСведенияОПрограммеИОС() 

	Информация = Новый СистемнаяИнформация;
	ТехнологическаяИнформация = НСтр("ru='Технологическая информация'");
	
	// Информация о конфигурации и платформе
	ТехнологическаяИнформация = ТехнологическаяИнформация + Символы.ПС + 
		  НСтр("ru='Конфигурация'") + ": " + Метаданные.КраткаяИнформация + " (" + Метаданные.Версия + ?(КонфигурацияИзменена(), "*", "") + ")" + Символы.ПС
		+ НСтр("ru='Платформа'") + ": " + "1С:Предприятие" + " " + Информация.ВерсияПриложения + Символы.ПС
		+ НСтр("ru='Приложение'") + ": " + ПредставлениеПриложения("1CV8") + Символы.ПС
		+ НСтр("ru='Режим'") + ": " + ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()), "файловый", "клиент-серверный") + Символы.ПС
		+ НСтр("ru='Локализация'") + ": " + ТекущийКодЛокализации()  + Символы.ПС
		+ НСтр("ru='Язык'") + ": " + ТекущийЯзыкСистемы() + Символы.ПС
		;
		#Если Не ВнешнееСоединение Тогда
			ТехнологическаяИнформация = ТехнологическаяИнформация +
					НСтр("ru='Вариант интерфейса'") + ": " + КлиентскоеПриложение.ТекущийВариантИнтерфейса() + Символы.ПС;
		#КонецЕсли
	
		
	// Информация об операционной системе
	ТехнологическаяИнформация = ТехнологическаяИнформация + Символы.ПС + 
		НСтр("ru='Операционная система'") + ": " + Информация.ТипПлатформы + " (" + Информация.ВерсияОС + ")" + Символы.ПС
		+ НСтр("ru='Компьютер'") + ": " + Информация.Процессор + " (" + Информация.ОперативнаяПамять + " Mb)" + Символы.ПС
		;
	ИнформацияЭкранов = ПолучитьИнформациюЭкрановКлиента();
	Если ИнформацияЭкранов <> Неопределено Тогда
		
		ТехнологическаяИнформация = ТехнологическаяИнформация + 
			?(ИнформацияЭкранов.Количество() = 1, НСтр("ru='Экран'") + ": ", НСтр("ru='Экраны'") + ":" + Символы.ПС);
		Для каждого Инфо Из ИнформацияЭкранов Цикл
			ТехнологическаяИнформация = ТехнологическаяИнформация + 
					Формат(Инфо.Ширина, "ЧДЦ=; ЧГ=") + "х" + Формат(Инфо.Высота, "ЧДЦ=; ЧГ=") + " (" + Инфо.DPI + " DPI)" + Символы.ПС; 
		КонецЦикла;
		
	КонецЕсли;

	Возврат ТехнологическаяИнформация;
	
КонецФункции

// Добавляет в структуру сообщения в службу поддержки информацию о настройках обмена и последних результатах
//	Если обмен разрешен, во вложения добавляется табличный документ с описанием устройств.
//	При наличии ошибок и предупреждений для устройства добавляется таблица с ошибками из журнала регистрации по обмену
//
//Параметры:
//	СтруктураСообщения	- Структура
//
Процедура ДополнитьСообщениеСведениямиОбОбмене(СтруктураСообщения) 
	
	// Информация о настройках синхронизации
	ОбменРазрешен = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	Если Не ОбменРазрешен Тогда
		СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация + Символы.ПС + 
			НСтр("ru='Синхронизация запрещена'") + Символы.ПС
			;
	Иначе
		
		СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация + Символы.ПС + 
			НСтр("ru='Настройки синхронизации'") + Символы.ПС;
			
		// Проверяем доступность домашней сети
		ТранспортДомашняяСеть = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети();
		Если ТранспортДомашняяСеть.ЗапретитьИспользование Тогда
			СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация
				+ НСтр("ru='Домашняя сеть не используется'") + Символы.ПС;
		Иначе
			
			ОбъектТранспорта = ТранспортДомашняяСеть.ПолучитьОбъект();
			WSURLВебСервиса = ОбъектТранспорта.ЗначениеПараметраТранспорта("WSURLВебСервиса");
			Если ЗначениеЗаполнено(WSURLВебСервиса) Тогда
				РезультатПроверки = АдресДомашнейСетиКорректен(WSURLВебСервиса); 
			Иначе
				РезультатПроверки = НСтр("ru='Не указан адрес публикации базы'"); 
			КонецЕсли;
			
			СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация
				+ НСтр("ru='Домашняя сеть: '") + РезультатПроверки + Символы.ПС;
				
		КонецЕсли;
		
		// Проверяем доступность облачного сервиса
		НастройкиАккаунта = Неопределено;
		ТекущийОблачныйПровайдер = RESTВызовСервера.ПровайдерИзПараметраСеанса(НастройкиАккаунта);
		Если ТекущийОблачныйПровайдер = Неопределено Тогда
			СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация
				+ НСтр("ru='Облачный сервис не используется'") + Символы.ПС;
		Иначе
			
			РезультатПроверки = "";
			
			СсылкаТранспортОблако = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортОблачногоПровайдера(ТекущийОблачныйПровайдер);
			
			Если СсылкаТранспортОблако <> Неопределено И СсылкаТранспортОблако.ЗапретитьИспользование Тогда
				РезультатПроверки = РезультатПроверки + НСтр("ru='отключен'");
			Иначе
				
				Попытка
					Авторизован   = RESTКлиентСервер.ПриложениеАвторизовано(ТекущийОблачныйПровайдер, Ложь);
					Представление = НастройкиАккаунта.ПредставлениеАккаунта;
					РезультатПроверки = РезультатПроверки + ?(Авторизован, НСтр("ru='авторизован'") + " " + ЗакодироватьСтроку(Представление), НСтр("ru='не авторизован'"));
				Исключение
					РезультатПроверки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецПопытки; 
				
			КонецЕсли;
			
			СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация
				+ НСтр("ru='Облачный сервис'") + ": " + РезультатПроверки + Символы.ПС;
		КонецЕсли;
		
		// Получаем список устройств
		ПланыОбменаБСП = ДеньгиВызовСервераПовтИсп.ПланыОбменаБСП();
		
		ТаблицаУстройств = ОбменДаннымиСервер.ТаблицаМонитораОбменаДанными(ПланыОбменаБСП, "Код,Активность,ПометкаУдаления");
		Если ТаблицаУстройств.Количество() = 0 Тогда
			СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация
				+ НСтр("ru='Список мобильных устройств пуст'") + Символы.ПС;
		Иначе
			СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация
				+ РезультатВыгрузкиМобильныхУстройств(ТаблицаУстройств, СтруктураСообщения.Вложения) + Символы.ПС;
		КонецЕсли;
		
	КонецЕсли;
	 
	
КонецПроцедуры

// Добавляет в структуру сообщения в службу поддержки информацию о настройках обмена и последних результатах
//	Если обмен разрешен, во вложения добавляется табличный документ с описанием устройств.
//	При наличии ошибок и предупреждений для устройства добавляется таблица с ошибками из журнала регистрации по обмену
//
//Параметры:
//	СтруктураСообщения	- Структура
//
Процедура ДополнитьСообщениеСведениямиОбОшибках(СтруктураСообщения) 
	
	// Информация о последних ошибках
	КоличествоДней = 25;
	ЗаписиЖурнала = ПолучитьПоследниеОшибкиИзЖурнала(КоличествоДней);
	Если ЗаписиЖурнала.Количество() > 0 Тогда
		СтруктураСообщения.ТехнологическаяИнформация = СтруктураСообщения.ТехнологическаяИнформация + Символы.ПС
				+ НСтр("ru='Записи журнала регистрации приложены'") + " (" + ЗаписиЖурнала.Количество() + ")" + Символы.ПС; 
				
		ТабличныйДокумент = ОбщегоНазначенияДеньги.ТабличныйДокументИзТаблицыЗначений(ЗаписиЖурнала, "Записи журнала регистрации (ошибки и предупреждения за " + КоличествоДней + " дней)");
		ИмяФайла = ПолучитьИмяВременногоФайла("mxl");
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
		
		СтруктураСообщения.Вложения.Добавить(ИмяФайла, "Записи журнала регистрации.mxl");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений с последними ошибками, зарегистрированными в журнале
//
//Параметры:
//	Нет
//
//Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьПоследниеОшибкиИзЖурнала(КоличествоДней = 20) 

	Отбор = Новый Структура;
	Отбор.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
	Отбор.Вставить("ДатаНачала ", НачалоДня(ТекущаяДатаСеанса()) - КоличествоДней * 86400);
	Отбор.Вставить("Уровень", Новый Массив);
	Отбор.Уровень.Добавить(УровеньЖурналаРегистрации.Ошибка);
	Отбор.Уровень.Добавить(УровеньЖурналаРегистрации.Предупреждение);

	ЗаписиЖуранла = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ЗаписиЖуранла, Отбор, , , 200);

	Возврат ЗаписиЖуранла;
	
КонецФункции

Функция ПолучитьЗаписиЖурналаПоОтбору(Отбор, МаксимальноеКоличество = 200) 

	Если Не Отбор.Свойство("ДатаОкончания") Тогда
		Отбор.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
	КонецЕсли;
	
	ЗаписиЖуранла = Новый ТаблицаЗначений;
	ВыгрузитьЖурналРегистрации(ЗаписиЖуранла, Отбор, , , МаксимальноеКоличество);

	Возврат ЗаписиЖуранла;   
	
КонецФункции

Функция ЗакодироватьСтроку(Строка) 

	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат "";
	КонецЕсли;
	
	ДлинаСтоки = СтрДлина(Строка);
	Пробелов   = Макс(4, ?(ДлинаСтоки < 7, 4, ДлинаСтоки - 6));
	
	Возврат Лев(Строка, Мин(2, ДлинаСтоки)) 
			+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("Х", Пробелов)
			+ Прав(Строка, Мин(4, ДлинаСтоки));

КонецФункции
 

#КонецОбласти