////////////////////////////////////////////////////////////////////////////////
//ОбщийМодуль.БюджетированиеСервер:
//	Обслуживание бюджетного планирования
//
//	* Формирование текстов запросов для выборки бюджетных показателей, операций и статей
//	* Обслуживание бюджетных статей
//	* Работа с периодами бюджетирования
//	* Заполнение и копирование показателей бюджета
//  
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс


#Область РаботаСЗапросом

////////////////////////////////////////////////////////////////////////////////
// Формирование временных таблиц запроса

// Дополняет текст запроса временной таблицей бюджетных перидов.
//	В отличие от календарных периодов бюджетные могут начинаться не с 1-го. В таблице бюджетных периодов каждому периоду соответствует одна  
//	строка, в которой указываются начало и конец бюджетного периода.
// ВНИМАНИЕ! 
//		Данный запрос следует использовать только в тех случаях, когда невозможно передать таблицу периодов в качестве параметра
//
//Обязательные параметры запроса:
//	&ВидПериода - Строка - "НЕДЕЛЯ", "МЕСЯЦ", "КВАРТАЛ" или "ГОД" - рассматриваемый календарный период
//	&НачТаблицыПериодов - Дата - начальная дата самого первого бюджетного периода (должна быть задана с учетом смещения от календарного начала периода)
//	&КонецТаблицыПериодов - Дата - конечная дата самого последнего бюджетного периода (должна быть задана с учетом смещения от календарного начала периода)
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросГеренациюТаблицыПериодов(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт
	
	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = Новый Структура;
	КонецЕсли;
	
	ИмяТаблицы = "ТаблицаЦифр";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	0 КАК Цифра
	|ПОМЕСТИТЬ ТаблицаЦифр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;
	
	
	ИмяТаблицы = "ТаблицаНомеров";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаЦифр1.Цифра + ТаблицаЦифр10.Цифра * 10 + ТаблицаЦифр100.Цифра * 100 + ТаблицаЦифр1000.Цифра * 1000 КАК Номер
	|ПОМЕСТИТЬ ТаблицаНомеров
	|ИЗ
	|	ТаблицаЦифр КАК ТаблицаЦифр1,
	|	ТаблицаЦифр КАК ТаблицаЦифр10,
	|	ТаблицаЦифр КАК ТаблицаЦифр100,
	|	ТаблицаЦифр КАК ТаблицаЦифр1000
	|ГДЕ
	|	ТаблицаЦифр1.Цифра + ТаблицаЦифр10.Цифра * 10 + ТаблицаЦифр100.Цифра * 100 + ТаблицаЦифр1000.Цифра * 1000 <= РАЗНОСТЬДАТ(&НачТаблицыПериодов, &КонецТаблицыПериодов, ДЕНЬ) / 7
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номер
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;
	
	
	ИмяТаблицы = "ТаблицаПериодов";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Периоды.НомерПериода КАК НомерПериода,
	|	Периоды.НачалоПериода КАК НачалоПериода,
	|	Периоды.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ВЫБОР
	|		КОГДА &ВидПериода = ""ДЕНЬ""
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.НачалоПериода, ДЕНЬ)
	|		КОГДА &ВидПериода = ""НЕДЕЛЯ""
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.НачалоПериода, НЕДЕЛЯ)
	|		КОГДА &ВидПериода = ""МЕСЯЦ""
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.НачалоПериода, МЕСЯЦ)
	|		КОГДА &ВидПериода = ""КВАРТАЛ""
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.НачалоПериода, КВАРТАЛ)
	|		КОГДА &ВидПериода = ""ГОД""
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.НачалоПериода, ГОД)
	|	КОНЕЦ КАК НачалоКалендарногоПериода,
	|	ВЫБОР
	|		КОГДА &ВидПериода = ""ДЕНЬ""
	|			ТОГДА КОНЕЦПЕРИОДА(Периоды.НачалоПериода, ДЕНЬ)
	|		КОГДА &ВидПериода = ""НЕДЕЛЯ""
	|			ТОГДА КОНЕЦПЕРИОДА(Периоды.НачалоПериода, НЕДЕЛЯ)
	|		КОГДА &ВидПериода = ""МЕСЯЦ""
	|			ТОГДА КОНЕЦПЕРИОДА(Периоды.НачалоПериода, МЕСЯЦ)
	|		КОГДА &ВидПериода = ""КВАРТАЛ""
	|			ТОГДА КОНЕЦПЕРИОДА(Периоды.НачалоПериода, КВАРТАЛ)
	|		КОГДА &ВидПериода = ""ГОД""
	|			ТОГДА КОНЕЦПЕРИОДА(Периоды.НачалоПериода, ГОД)
	|	КОНЕЦ КАК КонецКалендарногоПериода
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаНомеров.Номер + 1 КАК НомерПериода,
	|		ВЫБОР
	|			КОГДА &ВидПериода = ""ДЕНЬ""
	|				ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, ДЕНЬ, ТаблицаНомеров.Номер)
	|			КОГДА &ВидПериода = ""НЕДЕЛЯ""
	|				ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, НЕДЕЛЯ, ТаблицаНомеров.Номер)
	|			КОГДА &ВидПериода = ""МЕСЯЦ""
	|				ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, МЕСЯЦ, ТаблицаНомеров.Номер)
	|			КОГДА &ВидПериода = ""КВАРТАЛ""
	|				ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, КВАРТАЛ, ТаблицаНомеров.Номер)
	|			КОГДА &ВидПериода = ""ГОД""
	|				ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, ГОД, ТаблицаНомеров.Номер)
	|		КОНЕЦ КАК НачалоПериода,
	|		ДОБАВИТЬКДАТЕ(ВЫБОР
	|				КОГДА &ВидПериода = ""ДЕНЬ""
	|					ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, ДЕНЬ, ТаблицаНомеров.Номер + 1)
	|				КОГДА &ВидПериода = ""НЕДЕЛЯ""
	|					ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, НЕДЕЛЯ, ТаблицаНомеров.Номер + 1)
	|				КОГДА &ВидПериода = ""МЕСЯЦ""
	|					ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, МЕСЯЦ, ТаблицаНомеров.Номер + 1)
	|				КОГДА &ВидПериода = ""КВАРТАЛ""
	|					ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, КВАРТАЛ, ТаблицаНомеров.Номер + 1)
	|				КОГДА &ВидПериода = ""ГОД""
	|					ТОГДА ДОБАВИТЬКДАТЕ(&НачТаблицыПериодов, ГОД, ТаблицаНомеров.Номер + 1)
	|			КОНЕЦ, СЕКУНДА, -1) КАК ОкончаниеПериода
	|	ИЗ
	|		ТаблицаНомеров КАК ТаблицаНомеров) КАК Периоды
	|ГДЕ
	|	Периоды.НачалоПериода >= &НачТаблицыПериодов
	|	И Периоды.ОкончаниеПериода <= &КонецТаблицыПериодов";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;
	
	
КонецПроцедуры

// Дополняет текст запроса временной таблицей бюджетных перидов из таблицы значений, переданной в параметрах запроса
//Если таблицу значений использовать невозможно, следует применять генерирование таблицы периодов с помощью ДобавитьВЗапросГеренациюТаблицыПериодов()
//
//Обязательные параметры запроса:
//	&ПараметрТаблицыПериодов - ТаблицаЗначений с обязательными колонками
//			* НомерПериода - Число
//			* НачалоПериода  - дата, начало бюджетного периода с учетом смещения
//			* ОкончаниеПериода - дата, окончание бюджетного периода с учетом смещения
//			* НачалоКалендарногоПериода - дата, календарное начало бюджетного периода (начало месяца, или недели, или квартала, или года)
//			* ПредставлениеПериода - строка, строковое представление бюджетного периода
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросГотовуюТаблицуПериодов(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = Новый Структура;
	КонецЕсли;
	
	ИмяТаблицы = "ТаблицаПериодов";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПериодов.НомерПериода,
	|	ТаблицаПериодов.НачалоПериода КАК НачалоПериода,
	|	ТаблицаПериодов.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ТаблицаПериодов.НачалоКалендарногоПериода КАК НачалоКалендарногоПериода
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	&ПараметрТаблицыПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоКалендарногоПериода,
	|	НачалоПериода,
	|	ОкончаниеПериода";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры

// Дополняет текст запроса временной таблицей бюджетных статей с уникальными ключами, по которым можно получать 
//	всех потомков и всех родителей любой статьи в одном запросе.
//Данная временная таблица не зависит от параметров запроса
//
// Параметры
//	ТекстПакетногоЗапроса   - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//
Процедура ДобавитьВЗапросКлючиСтатейБюджета(ТекстПакетногоЗапроса, СтруктураЗапроса) Экспорт

	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = Новый Структура;
	КонецЕсли;
	
	ИмяТаблицы = "КлючиСтатей";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВсеСтатьи.ТипПоказателя,
	|	ВсеСтатьи.ОтношениеКНакоплениям,
	|	ВсеСтатьи.ГрафаБюджета КАК ГрафаБюджета,
	|	ВсеСтатьи.СтатьяБюджета КАК СтатьяБюджета,
	|	ВсеСтатьи.АктивностьСтатьи,
	|	ВсеСтатьи.Наименование,
	|	ВсеСтатьи.РодительскаяСтатья,
	|	ВсеСтатьи.КлючСтатьи КАК КлючСтатьи,
	|	ВсеСтатьи.ПорядокПоУмолчанию
	|ПОМЕСТИТЬ КлючиСтатей
	|ИЗ
	|	(
	|	
	|	ВЫБРАТЬ
	|		ГрафыБюджета.ТипПоказателя КАК ТипПоказателя,
	|		ГрафыБюджета.ОтношениеКНакоплениям КАК ОтношениеКНакоплениям,
	|		ГрафыБюджета.Ссылка КАК ГрафаБюджета,
	|		ЕСТЬNULL(КлючиБюджетныхСтатей.СтатьяБюджета, ГрафыБюджета.Ссылка) КАК СтатьяБюджета,
	|		ЕСТЬNULL(КлючиБюджетныхСтатей.СтатьяБюджета.Активность, ИСТИНА) КАК АктивностьСтатьи,
	|		ЕСТЬNULL(КлючиБюджетныхСтатей.СтатьяБюджета.Наименование, ГрафыБюджета.Наименование) КАК Наименование,
	|		ВЫБОР
	|			КОГДА КлючиБюджетныхСтатей.РодительскаяСтатьяВБюджете = НЕОПРЕДЕЛЕНО
	|				ТОГДА ГрафыБюджета.Ссылка
	|			ИНАЧЕ КлючиБюджетныхСтатей.РодительскаяСтатьяВБюджете
	|		КОНЕЦ КАК РодительскаяСтатья,
	|		ГрафыБюджета.Код + ЕСТЬNULL(КлючиБюджетныхСтатей.Ключ, """") КАК КлючСтатьи,
	|		ГрафыБюджета.ПорядокПоУмолчанию КАК ПорядокПоУмолчанию
	|	ИЗ
	|		Справочник.ГрафыБюджета КАК ГрафыБюджета
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиСтатей КАК КлючиБюджетныхСтатей
	|			ПО ГрафыБюджета.ТипСтатьи = КлючиБюджетныхСтатей.ТипСтатьи
	|				И (НЕ КлючиБюджетныхСтатей.ТипСтатьи В (""Кошельки"", ""Имущество""))
	|				И (НЕ КлючиБюджетныхСтатей.ИсключатьИзБюджета)
	|				И (ВЫБОР 
	|					КОГДА ГрафыБюджета.Ссылка = ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПолучениеКредита) 
	|						ТОГДА НЕ ВЫРАЗИТЬ(КлючиБюджетныхСтатей.СтатьяБюджета КАК Справочник.Долги).ИспользоватьДляУчетаВыданныхДолгов
	|					КОГДА ГрафыБюджета.Ссылка = ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыдачаВзаймы) 
	|						ТОГДА НЕ ВЫРАЗИТЬ(КлючиБюджетныхСтатей.СтатьяБюджета КАК Справочник.Долги).ИспользоватьДляУчетаВзятыхДолгов
	|					Иначе Истина
	|				КОНЕЦ)
	|	ГДЕ
	|		НЕ ГрафыБюджета.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафыБюджета.ТипПоказателя,
	|		ГрафыБюджета.ОтношениеКНакоплениям,
	|		ГрафыБюджета.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка),
	|		ИСТИНА,
	|		""Свободные деньги"",
	|		ГрафыБюджета.Ссылка,
	|		ГрафыБюджета.Код + ""0."",
	|		ГрафыБюджета.ПорядокПоУмолчанию
	|	ИЗ
	|		Справочник.ГрафыБюджета КАК ГрафыБюджета
	|	ГДЕ
	|		ГрафыБюджета.ОтношениеКНакоплениям > 0
	|		И НЕ ГрафыБюджета.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафыБюджета.ТипПоказателя,
	|		ГрафыБюджета.ОтношениеКНакоплениям,
	|		ГрафыБюджета.Ссылка,
	|		ГрафыБюджета.Ссылка,
	|		ИСТИНА,
	|		ГрафыБюджета.Наименование,
	|		ГрафыБюджета.Родитель,
	|		ГрафыБюджета.Код,
	|		ГрафыБюджета.ПорядокПоУмолчанию
	|	ИЗ
	|		Справочник.ГрафыБюджета КАК ГрафыБюджета
	|	ГДЕ
	|		НЕ ГрафыБюджета.ПометкаУдаления
	|		
	|		) КАК ВсеСтатьи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСтатьи.ТипПоказателя,
	|	ВсеСтатьи.ОтношениеКНакоплениям,
	|	ВсеСтатьи.ГрафаБюджета,
	|	ВсеСтатьи.СтатьяБюджета,
	|	ВсеСтатьи.АктивностьСтатьи,
	|	ВсеСтатьи.Наименование,
	|	ВсеСтатьи.РодительскаяСтатья,
	|	ВсеСтатьи.КлючСтатьи,
	|	ВсеСтатьи.ПорядокПоУмолчанию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтатьи,
	|	ГрафаБюджета,
	|	СтатьяБюджета
	|";
	#КонецОбласти 
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры

// Дополняет текст запроса временной таблицей бюджетных статей, используемых в бюджете за выбранный период
//РодительскаяСтатья и ее ключ заданы с учетом их выбранности в бюджете. Например, если в бюджете 
//	выбрана "подстатья" и не выбрано ни одного ее родителя, то РодительскаяСтатья будет пустой
//Порядок статьи получается из последнего рассматриваемого в выборке периода.
//
//Обязательные параметры запроса:
//	&ВариантБюджета - СправочникСсылка.ВариантыБюджетов
//	&РазделБюджета - СправочникСсылка.ФинансовыеЦели или пустая строка
//	&КалендарноеНачалоРедактируемогоПериода - Дата, соответствует календарному началу месяца (недели, года и т.д.)
//	&ДатаОтбораСоставаСтатей - Дата - соответствует календарному началу того периода, из которого получаем состав статей и их порядок
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросАктуальныеСтатьиБюджета(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = Новый Структура;
	КонецЕсли;
	
	Если Не СтруктураЗапроса.Свойство("КлючиСтатей") Тогда
		ДобавитьВЗапросКлючиСтатейБюджета(ТекстПакетногоЗапроса, СтруктураЗапроса);
	КонецЕсли;
	
	// Таблица используемых в бюджете статей, дополненная ключами
	ИмяТаблицы = "АктивныеСтатьиПериода";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АктивныеСтатьи.ВариантБюджета КАК ВариантБюджета,
	|	АктивныеСтатьи.ТипПоказателя КАК ТипПоказателя,
	|	АктивныеСтатьи.ГрафаБюджета КАК ГрафаБюджета,
	|	АктивныеСтатьи.СтатьяБюджета КАК СтатьяБюджета,
	|	АктивныеСтатьи.ОтношениеКНакоплениям КАК ОтношениеКНакоплениям,
	|	МАКСИМУМ(ЕСТЬNULL(ПоказателиБюджета.Порядок, АктивныеСтатьи.Порядок)) КАК Порядок,
	|	КлючиСтатей.АктивностьСтатьи КАК АктивностьСтатьи,
	|	КлючиСтатей.ПорядокПоУмолчанию КАК ПорядокПоУмолчанию,
	|	КлючиСтатей.КлючСтатьи КАК КлючСтатьи,
	|	КлючиСтатей.РодительскаяСтатья КАК РодительскаяСтатья
	|ПОМЕСТИТЬ АктивныеСтатьиПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоказателиБюджета.ВариантБюджета КАК ВариантБюджета,
	|		МАКСИМУМ(ПоказателиБюджета.НачалоПериода) КАК НачалоПериода,
	|		ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|		ПоказателиБюджета.ТипПоказателя КАК ТипПоказателя,
	|		ПоказателиБюджета.ГрафаБюджета КАК ГрафаБюджета,
	|		ПоказателиБюджета.СтатьяБюджета КАК СтатьяБюджета,
	|		ПоказателиБюджета.ГрафаБюджета.ОтношениеКНакоплениям КАК ОтношениеКНакоплениям,
	|		МАКСИМУМ(ПоказателиБюджета.Порядок) КАК Порядок
	|	ИЗ
	|		РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|	ГДЕ
	|		ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|		И (&РазделБюджета = """" И ПоказателиБюджета.ГрафаБюджета.ОтношениеКНакоплениям = 0
	|				ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|		И ПоказателиБюджета.НачалоПериода = &ДатаОтбораСоставаСтатей
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоказателиБюджета.ВариантБюджета,
	|		ПоказателиБюджета.РазделБюджета,
	|		ПоказателиБюджета.ТипПоказателя,
	|		ПоказателиБюджета.ГрафаБюджета,
	|		ПоказателиБюджета.СтатьяБюджета,
	|		ПоказателиБюджета.ГрафаБюджета.ОтношениеКНакоплениям
	|		) КАК АктивныеСтатьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО (АктивныеСтатьи.ВариантБюджета = ПоказателиБюджета.ВариантБюджета
	|				И АктивныеСтатьи.НачалоПериода = ПоказателиБюджета.НачалоПериода
	|				И АктивныеСтатьи.РазделБюджета = ПоказателиБюджета.РазделБюджета
	|				И АктивныеСтатьи.ГрафаБюджета = ПоказателиБюджета.ГрафаБюджета
	|				И АктивныеСтатьи.СтатьяБюджета = ПоказателиБюджета.СтатьяБюджета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиСтатей КАК КлючиСтатей
	|			ПО АктивныеСтатьи.ГрафаБюджета = КлючиСтатей.ГрафаБюджета
	|			И АктивныеСтатьи.СтатьяБюджета = КлючиСтатей.СтатьяБюджета
	|СГРУППИРОВАТЬ ПО
	|	АктивныеСтатьи.ВариантБюджета,
	|	АктивныеСтатьи.ТипПоказателя,
	|	АктивныеСтатьи.ГрафаБюджета,
	|	АктивныеСтатьи.СтатьяБюджета,
	|	АктивныеСтатьи.ОтношениеКНакоплениям,
	|	КлючиСтатей.АктивностьСтатьи,
	|	КлючиСтатей.ПорядокПоУмолчанию,
	|	КлючиСтатей.КлючСтатьи,
	|	КлючиСтатей.РодительскаяСтатья
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;
	
	
	// Таблица используемых в бюджете статей, дополненная ключами актуальных родительских статей
	ИмяТаблицы = "АктуальныеСтатьи";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеСтатьи.ТипПоказателя,
	|	ВсеСтатьи.ОтношениеКНакоплениям,
	|	ВсеСтатьи.ГрафаБюджета КАК ГрафаБюджета,
	|	ВсеСтатьи.СтатьяБюджета КАК СтатьяБюджета,
	|	ВсеСтатьи.АктивностьСтатьи,
	|	ВсеСтатьи.КлючСтатьи,
	|	ИСТИНА КАК Видимость,
	|	ИСТИНА КАК ПоСтатьеЕстьСуммы,
	|	ВсеСтатьи.ПорядокПоУмолчанию,
	|	ВсеСтатьи.Порядок,
	|	АктуальныеРодители.РодительскаяСтатья,
	|	ЕСТЬNULL(АктуальныеРодители.КлючРодительскойСтатьи, ПОДСТРОКА(ВсеСтатьи.КлючСтатьи, 1, 3)) КАК КлючРодительскойСтатьи
	|ПОМЕСТИТЬ АктуальныеСтатьи
	|ИЗ
	|	АктивныеСтатьиПериода КАК ВсеСтатьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КлючиАктуальныхРодителей.ГрафаБюджета КАК ГрафаБюджета,
	|			КлючиАктуальныхРодителей.СтатьяБюджета КАК СтатьяБюджета,
	|			КлючиАктуальныхРодителей.КлючАктуальногоРодителя КАК КлючРодительскойСтатьи,
	|			АктуальныеРодители.СтатьяБюджета КАК РодительскаяСтатья
	|		ИЗ
	|			(ВЫБРАТЬ
	|				КлючиСтатей.ГрафаБюджета КАК ГрафаБюджета,
	|				КлючиСтатей.СтатьяБюджета КАК СтатьяБюджета,
	|				МАКСИМУМ(КлючиРодителей.КлючСтатьи) КАК КлючАктуальногоРодителя
	|			ИЗ
	|				АктивныеСтатьиПериода КАК КлючиСтатей
	|					ЛЕВОЕ СОЕДИНЕНИЕ АктивныеСтатьиПериода КАК КлючиРодителей
	|					ПО КлючиСтатей.ГрафаБюджета = КлючиРодителей.ГрафаБюджета
	|						И КлючиСтатей.КлючСтатьи > КлючиРодителей.КлючСтатьи
	|						И (КлючиСтатей.КлючСтатьи <= КлючиРодителей.КлючСтатьи + ""яяя"")
	|			
	|			СГРУППИРОВАТЬ ПО
	|				КлючиСтатей.ГрафаБюджета,
	|				КлючиСтатей.СтатьяБюджета) КАК КлючиАктуальныхРодителей
	|				ЛЕВОЕ СОЕДИНЕНИЕ АктивныеСтатьиПериода КАК АктуальныеРодители
	|				ПО (АктуальныеРодители.КлючСтатьи = КлючиАктуальныхРодителей.КлючАктуальногоРодителя)) КАК АктуальныеРодители
	|		ПО ВсеСтатьи.ГрафаБюджета = АктуальныеРодители.ГрафаБюджета
	|			И ВсеСтатьи.СтатьяБюджета = АктуальныеРодители.СтатьяБюджета
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РазделБюджета = """"
	|				ТОГДА ВсеСтатьи.ОтношениеКНакоплениям = 0
	|			КОГДА &РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|				ТОГДА ВсеСтатьи.ОтношениеКНакоплениям <= 0
	|			ИНАЧЕ ВсеСтатьи.ОтношениеКНакоплениям >= 0
	|		КОНЕЦ
	|	И ВсеСтатьи.СтатьяБюджета <> &РазделБюджета
	|	И НЕ(ВсеСтатьи.ГрафаБюджета = ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыдачаВзаймы)
	|					И ВсеСтатьи.СтатьяБюджета ССЫЛКА Справочник.Долги
	|				ИЛИ ВсеСтатьи.ГрафаБюджета = ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПолучениеКредита)
	|					И ВсеСтатьи.СтатьяБюджета ССЫЛКА Справочник.Долги
	|				ИЛИ ВсеСтатьи.СтатьяБюджета ССЫЛКА Справочник.Имущество)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафаБюджета,
	|	КлючСтатьи,
	|	СтатьяБюджета
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры

// Дополняет текст запроса временной таблицей последних в периоде курсов валют, которые используются
//в пересчете валютных сумм в тех случаях, когда не находится актуальный курс на дату пересчета
//
//Обязательные параметры запроса:
//	&ВалютаУчета - СправочникСсылка.Валюты - базовая валюта
//	&ДатаПоследнихКурсов - Дата - дата, на которую берутся курсы
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросПоследниеКурсыВалют(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = Новый Структура;
	КонецЕсли;
	
	ИмяТаблицы = "ПоследниеКурсы";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КурсыВалютСрезПоследних.Валюта,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Курс = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|	КОНЕЦ КАК Курс,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Кратность
	|ПОМЕСТИТЬ ПоследниеКурсы
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПоследнихКурсов, БазоваяВалюта = &ВалютаУчета) КАК КурсыВалютСрезПоследних
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры

// Дополняет текст запроса временной таблицей оборотов операций, сгруппированных по бюджетным периодам и пересчитанным
//в валюту варианта бюджета
//
//Обязательные параметры запроса:
//	&ВариантБюджета - СправочникСсылка.ВариантыБюджетов
//	&РазделБюджета - СправочникСсылка.ФинансовыеЦели или пустая строка
//	&ВалютаУчета - СправочникСсылка.Валюты - базовая валюта
//	&ВалютаВарианта - СправочникСсылка.Валюты - валюта, в которой рассчитывается вариант бюджета
//	&БюджетноеНачалоРедактируемогоПериода - Дата - дата начала первого рассматриваемого бюджетного периода
//	&ДатаОстатков - Дата, на которую нужно получить остатки, и начиная с которой нужны обороты для вычисления плановых остатков
//	&БюджетноеНачалоВыборки - Дата - дата начала первого бюджетного периода с учетом периодов статистики
//	&БюджетноеОкончаниеВыборки - Дата - дата окончания последнего рассматриваемого бюджетного периода
//	& - Дата - дата начала первого рассматриваемого бюджетного периода
//	& - Дата - дата начала первого рассматриваемого бюджетного периода
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//	БезКороткихРасчетов - Булево - нужно ли разворачивать взаиморасчеты по долгам и кредитным картам в пределах одного бюджетного периода.
//						Например, если использлвали кредитку на 1000 и пополнили на 800, то без коротких расчетов останется только использование на 200
//						а с короткими расчетами останутся обе сумму: 1000 и 800
//
Процедура ДобавитьВЗапросОборотыОпераций(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "", БезКороткихРасчетов = Истина) Экспорт

	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = Новый Структура;
	КонецЕсли;
	
	// из оборотов плановых операций и фактических оборотов бюджета исключаются взаиморасчеты 
	//по долгам и кредитным картам, совершенные в пределах одного и того же периода
	//Для этого временная таблица ОборотыОпераций собирается из отдельных таблиц ОборотыПланОпераций и ОборотыФактОпераций
	
	ИмяТаблицы = "ОборотыПланОпераций";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ОтношениеКНакоплениям,
	|	Подзапрос.ТипПоказателя КАК ТипПоказателя, //Вычисление типа показателя
	|	Подзапрос.СтатьяБюджета,
	|	Подзапрос.СуммаПлановыхОпераций,
	|	Подзапрос.СуммаПлановыхОперацийБезКредиток
	|ПОМЕСТИТЬ ОборотыПланОпераций
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПериодов.НомерПериода КАК НомерПериода,
	|		Подзапрос.Период >= &БюджетноеНачалоРедактируемогоПериода КАК АктуальныйОборот,
	|		Подзапрос.Период >= &ДатаОстатков И Подзапрос.Период < &БюджетноеНачалоРедактируемогоПериода КАК ОборотДополнения,
	|		Подзапрос.ТипПоказателя КАК ТипПоказателя, // Тип показателя в подзапросе
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ГрафыБюджета
	|				ТОГДА Подзапрос.СтатьяБюджета.ОтношениеКНакоплениям
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ФинансовыеЦели
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтношениеКНакоплениям,
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Имущество
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыручкаЗаИмущество)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПокупкаИмущества)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПолучениеКредита)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыдачаВзаймы)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.КошелькиИСчета
	|					И НЕ Подзапрос.СтатьяБюджета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ИспользованиеКредитнойКарты)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПереводНаКредитнуюКарту)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета В (ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельВозвратИзНакопления), ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельПереводВНакопление))
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|			ИНАЧЕ Подзапрос.СтатьяБюджета
	|		КОНЕЦ КАК СтатьяБюджета,
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА Подзапрос.Валюта = &ВалютаВарианта
	|						ТОГДА Подзапрос.СуммаОборот
	|					ИНАЧЕ Подзапрос.СуммаОборот * ЕСТЬNULL(КурсыВалют.Курс, ЕСТЬNULL(ПоследниеКурсы.Курс, 0)) * ЕСТЬNULL(КурсыВалютыОтчета.Кратность, ЕСТЬNULL(ПоследниеКурсыОтчета.Кратность, 0)) / ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1)) = 0
	|								ТОГДА 1
	|							ИНАЧЕ ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1))
	|						КОНЕЦ
	|				КОНЕЦ * ВЫБОР
	|					КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|						ТОГДА 1
	|					ИНАЧЕ -1
	|				КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаПлановыхОпераций,
	|		СУММА(ВЫБОР
	|				КОГДА Подзапрос.Кошелек.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Подзапрос.Валюта = &ВалютаВарианта
	|							ТОГДА Подзапрос.СуммаОборот
	|						ИНАЧЕ Подзапрос.СуммаОборот * ЕСТЬNULL(КурсыВалют.Курс, ЕСТЬNULL(ПоследниеКурсы.Курс, 0)) * ЕСТЬNULL(КурсыВалютыОтчета.Кратность, ЕСТЬNULL(ПоследниеКурсыОтчета.Кратность, 0)) / ВЫБОР
	|								КОГДА ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1)) = 0
	|									ТОГДА 1
	|								ИНАЧЕ ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1))
	|							КОНЕЦ
	|					КОНЕЦ * ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА 1
	|						ИНАЧЕ -1
	|					КОНЕЦ
	|			КОНЕЦ) КАК СуммаПлановыхОперацийБезКредиток
	|	ИЗ
	|		РегистрНакопления.ОборотыПлановыхОпераций.Обороты(
	|				&БюджетноеНачалоВыборки,
	|				&БюджетноеОкончаниеВыборки,
	|				День,
	|				(&РазделБюджета = """"
	|					ИЛИ РазделБюджета = &РазделБюджета)
	|					И (НЕ СтатьяБюджета ССЫЛКА Справочник.КошелькиИСчета
	|						ИЛИ ВЫРАЗИТЬ(СтатьяБюджета КАК Справочник.КошелькиИСчета).ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная))) КАК Подзапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Подзапрос.Период = КурсыВалют.Период
	|				И Подзапрос.Валюта = КурсыВалют.Валюта
	|				И (КурсыВалют.БазоваяВалюта = &ВалютаУчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютыОтчета
	|			ПО (КурсыВалют.Период = КурсыВалютыОтчета.Период)
	|				И (КурсыВалютыОтчета.Валюта = &ВалютаВарианта)
	|				И (КурсыВалютыОтчета.БазоваяВалюта = &ВалютаУчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсы
	|			ПО Подзапрос.Валюта = ПоследниеКурсы.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсыОтчета
	|			ПО (ПоследниеКурсыОтчета.Валюта = &ВалютаВарианта)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|			ПО (Подзапрос.Период МЕЖДУ ТаблицаПериодов.НачалоПериода И ТаблицаПериодов.ОкончаниеПериода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.НомерПериода,
	|		Подзапрос.Период >= &БюджетноеНачалоРедактируемогоПериода,
	|		Подзапрос.Период >= &ДатаОстатков И Подзапрос.Период < &БюджетноеНачалоРедактируемогоПериода,
	|		Подзапрос.ТипПоказателя, // Тип показателя в группировке
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ГрафыБюджета
	|				ТОГДА Подзапрос.СтатьяБюджета.ОтношениеКНакоплениям
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ФинансовыеЦели
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Имущество
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыручкаЗаИмущество)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПокупкаИмущества)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПолучениеКредита)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыдачаВзаймы)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.КошелькиИСчета
	|					И НЕ Подзапрос.СтатьяБюджета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ИспользованиеКредитнойКарты)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПереводНаКредитнуюКарту)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета В (ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельВозвратИзНакопления), ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельПереводВНакопление))
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|			ИНАЧЕ Подзапрос.СтатьяБюджета
	|		КОНЕЦ) КАК Подзапрос
	|ГДЕ
	|	ВЫБОР КОГДА &РазделБюджета = """" ТОГДА Подзапрос.ОтношениеКНакоплениям = 0 ИНАЧЕ ИСТИНА КОНЕЦ
	|";
	#КонецОбласти 
	
	Если БезКороткихРасчетов Тогда
		// Удаляем группировку по типу показателя, добавляем его вычисление в резултирующей таблице
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Подзапрос.ТипПоказателя КАК ТипПоказателя, //Вычисление типа показателя",
				"ВЫБОР
				|		КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.СтатьиДоходов
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
				|		КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.СтатьиРасходов
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
				|		КОГДА Подзапрос.СуммаПлановыхОпераций < 0
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
				|	КОНЕЦ КАК ТипПоказателя,");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Подзапрос.ТипПоказателя КАК ТипПоказателя, // Тип показателя в подзапросе", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Подзапрос.ТипПоказателя, // Тип показателя в группировке", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;


	ИмяТаблицы = "ОборотыФактОпераций";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ОтношениеКНакоплениям,
	|	Подзапрос.ТипПоказателя КАК ТипПоказателя, //Вычисление типа показателя
	|	Подзапрос.СтатьяБюджета,
	|	Подзапрос.СуммаФакт,
	|	Подзапрос.СуммаФактБезКредиток
	|ПОМЕСТИТЬ ОборотыФактОпераций
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПериодов.НомерПериода КАК НомерПериода,
	|		Подзапрос.Период >= &БюджетноеНачалоРедактируемогоПериода КАК АктуальныйОборот,
	|		Подзапрос.Период >= &ДатаОстатков И Подзапрос.Период < &БюджетноеНачалоРедактируемогоПериода КАК ОборотДополнения,
	|		Подзапрос.ТипПоказателя КАК ТипПоказателя, // Тип показателя в подзапросе
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ГрафыБюджета
	|				ТОГДА Подзапрос.СтатьяБюджета.ОтношениеКНакоплениям
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ФинансовыеЦели
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтношениеКНакоплениям,
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Имущество
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыручкаЗаИмущество)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПокупкаИмущества)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПолучениеКредита)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыдачаВзаймы)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.КошелькиИСчета
	|					И НЕ Подзапрос.СтатьяБюджета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ИспользованиеКредитнойКарты)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПереводНаКредитнуюКарту)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета В (ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельВозвратИзНакопления), ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельПереводВНакопление))
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|			ИНАЧЕ Подзапрос.СтатьяБюджета
	|		КОНЕЦ КАК СтатьяБюджета,
	|		СУММА(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА Подзапрос.Валюта = &ВалютаВарианта
	|						ТОГДА Подзапрос.СуммаОборот
	|					ИНАЧЕ Подзапрос.СуммаОборот * ЕСТЬNULL(КурсыВалют.Курс, ЕСТЬNULL(ПоследниеКурсы.Курс, 0)) * ЕСТЬNULL(КурсыВалютыОтчета.Кратность, ЕСТЬNULL(ПоследниеКурсыОтчета.Кратность, 0)) / ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1)) = 0
	|								ТОГДА 1
	|							ИНАЧЕ ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1))
	|						КОНЕЦ
	|				КОНЕЦ * ВЫБОР
	|					КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|						ТОГДА 1
	|					ИНАЧЕ -1
	|				КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаФакт,
	|		СУММА(ВЫБОР
	|				КОГДА Подзапрос.Кошелек.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Подзапрос.Валюта = &ВалютаВарианта
	|							ТОГДА Подзапрос.СуммаОборот
	|						ИНАЧЕ Подзапрос.СуммаОборот * ЕСТЬNULL(КурсыВалют.Курс, ЕСТЬNULL(ПоследниеКурсы.Курс, 0)) * ЕСТЬNULL(КурсыВалютыОтчета.Кратность, ЕСТЬNULL(ПоследниеКурсыОтчета.Кратность, 0)) / ВЫБОР
	|								КОГДА ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1)) = 0
	|									ТОГДА 1
	|								ИНАЧЕ ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1))
	|							КОНЕЦ
	|					КОНЕЦ * ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА 1
	|						ИНАЧЕ -1
	|					КОНЕЦ
	|			КОНЕЦ) КАК СуммаФактБезКредиток
	|	ИЗ
	|		РегистрНакопления.ФактическиеОборотыБюджета.Обороты(
	|				&БюджетноеНачалоВыборки,
	|				&БюджетноеОкончаниеВыборки,
	|				День,
	|				&РазделБюджета = """"
	|					ИЛИ РазделБюджета = &РазделБюджета) КАК Подзапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Подзапрос.Период = КурсыВалют.Период
	|				И Подзапрос.Валюта = КурсыВалют.Валюта
	|				И (КурсыВалют.БазоваяВалюта = &ВалютаУчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютыОтчета
	|			ПО (КурсыВалют.Период = КурсыВалютыОтчета.Период)
	|				И (КурсыВалютыОтчета.Валюта = &ВалютаВарианта)
	|				И (КурсыВалютыОтчета.БазоваяВалюта = &ВалютаУчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсы
	|			ПО Подзапрос.Валюта = ПоследниеКурсы.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсыОтчета
	|			ПО (ПоследниеКурсыОтчета.Валюта = &ВалютаВарианта)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|			ПО (Подзапрос.Период МЕЖДУ ТаблицаПериодов.НачалоПериода И ТаблицаПериодов.ОкончаниеПериода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.НомерПериода,
	|		Подзапрос.Период >= &БюджетноеНачалоРедактируемогоПериода,
	|		Подзапрос.Период >= &ДатаОстатков И Подзапрос.Период < &БюджетноеНачалоРедактируемогоПериода,
	|		Подзапрос.ТипПоказателя, // Тип показателя в группировке
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ГрафыБюджета
	|				ТОГДА Подзапрос.СтатьяБюджета.ОтношениеКНакоплениям
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.ФинансовыеЦели
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|							ТОГДА -1
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Имущество
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыручкаЗаИмущество)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПокупкаИмущества)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПолучениеКредита)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.Долги
	|					И Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов
	|					И НЕ Подзапрос.СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ВыдачаВзаймы)
	|			КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.КошелькиИСчета
	|					И НЕ Подзапрос.СтатьяБюджета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|				ТОГДА ВЫБОР
	|						КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ИспользованиеКредитнойКарты)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПереводНаКредитнуюКарту)
	|					КОНЕЦ
	|			КОГДА Подзапрос.СтатьяБюджета В (ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельВозвратИзНакопления), ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ФинЦельПереводВНакопление))
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|			ИНАЧЕ Подзапрос.СтатьяБюджета
	|		КОНЕЦ) КАК Подзапрос
	|ГДЕ
	|	ВЫБОР КОГДА &РазделБюджета = """" ТОГДА Подзапрос.ОтношениеКНакоплениям = 0 ИНАЧЕ ИСТИНА КОНЕЦ
	|";
	#КонецОбласти 
	
	Если БезКороткихРасчетов Тогда
		// Удаляем группировку по типу показателя, добавляем его вычисление в резултирующей таблице
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Подзапрос.ТипПоказателя КАК ТипПоказателя, //Вычисление типа показателя",
				"ВЫБОР
				|		КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.СтатьиДоходов
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
				|		КОГДА Подзапрос.СтатьяБюджета ССЫЛКА Справочник.СтатьиРасходов
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
				|		КОГДА Подзапрос.СуммаФакт < 0
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
				|	КОНЕЦ КАК ТипПоказателя,");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Подзапрос.ТипПоказателя КАК ТипПоказателя, // Тип показателя в подзапросе", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Подзапрос.ТипПоказателя, // Тип показателя в группировке", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;
	
	
	ИмяТаблицы = "ОборотыОпераций";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот КАК АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ТипПоказателя КАК ТипПоказателя,
	|	Подзапрос.ОтношениеКНакоплениям КАК ОтношениеКНакоплениям,
	|	Подзапрос.СтатьяБюджета КАК СтатьяБюджета,
	|	ЕСТЬNULL(КлючиСтатей.КлючСтатьи, ВЫБОР
	|			КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ""10.99.""
	|			ИНАЧЕ ""20.99.""
	|		КОНЕЦ) КАК КлючСтатьи,
	|	ЕСТЬNULL(КлючиСтатей.ГрафаБюджета, ВЫБОР
	|			КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПрочиеДоходы)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПрочиеРасходы)
	|		КОНЕЦ) КАК ГрафаБюджета,
	|	СУММА(ВЫРАЗИТЬ(Подзапрос.СуммаПлановыхОпераций КАК ЧИСЛО(15, 2))) КАК СуммаПлановыхОпераций,
	|	СУММА(ВЫРАЗИТЬ(Подзапрос.СуммаПлановыхОперацийБезКредиток КАК ЧИСЛО(15, 2))) КАК СуммаПлановыхОперацийБезКредиток,
	|	СУММА(ВЫРАЗИТЬ(Подзапрос.СуммаФакт КАК ЧИСЛО(15, 2))) КАК СуммаФакт,
	|	СУММА(ВЫРАЗИТЬ(Подзапрос.СуммаФактБезКредиток КАК ЧИСЛО(15, 2))) КАК СуммаФактБезКредиток
	|ПОМЕСТИТЬ ОборотыОпераций
	|ИЗ
	|	(ВЫБРАТЬ
	|		Обороты.НомерПериода КАК НомерПериода,
	|		Обороты.АктуальныйОборот КАК АктуальныйОборот,
	|		Обороты.ОборотДополнения,
	|		Обороты.ТипПоказателя КАК ТипПоказателя,
	|		Обороты.ОтношениеКНакоплениям КАК ОтношениеКНакоплениям,
	|		Обороты.СтатьяБюджета КАК СтатьяБюджета,
	|		Обороты.СуммаПлановыхОпераций * ВЫБОР КОГДА Обороты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ КАК СуммаПлановыхОпераций,
	|		Обороты.СуммаПлановыхОперацийБезКредиток * ВЫБОР КОГДА Обороты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ КАК СуммаПлановыхОперацийБезКредиток,
	|		0 КАК СуммаФакт,
	|		0 КАК СуммаФактБезКредиток
	|	ИЗ
	|		ОборотыПланОпераций КАК Обороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Обороты.НомерПериода,
	|		Обороты.АктуальныйОборот,
	|		Обороты.ОборотДополнения,
	|		Обороты.ТипПоказателя,
	|		Обороты.ОтношениеКНакоплениям,
	|		Обороты.СтатьяБюджета,
	|		0,
	|		0,
	|		Обороты.СуммаФакт * ВЫБОР КОГДА Обороты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ,
	|		Обороты.СуммаФактБезКредиток * ВЫБОР КОГДА Обороты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ
	|	ИЗ
	|		ОборотыФактОпераций КАК Обороты) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиСтатей КАК КлючиСтатей
	|		ПО Подзапрос.ТипПоказателя = КлючиСтатей.ТипПоказателя
	|			И Подзапрос.ОтношениеКНакоплениям = КлючиСтатей.ОтношениеКНакоплениям
	|			И Подзапрос.СтатьяБюджета = КлючиСтатей.СтатьяБюджета
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ТипПоказателя,
	|	Подзапрос.ОтношениеКНакоплениям,
	|	Подзапрос.СтатьяБюджета,
	|	ЕСТЬNULL(КлючиСтатей.КлючСтатьи, ВЫБОР
	|			КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ""10.99.""
	|			ИНАЧЕ ""20.99.""
	|		КОНЕЦ),
	|	ЕСТЬNULL(КлючиСтатей.ГрафаБюджета, ВЫБОР
	|			КОГДА Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПрочиеДоходы)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафыБюджета.ПрочиеРасходы)
	|		КОНЕЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПериода,
	|	ГрафаБюджета,
	|	КлючСтатьи
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры

// Дополняет текст запроса временной таблицей оборотов оборотов план/факт с разделением показателей по актуальности и иерархии
//
//Обязательные параметры запроса:
//	&ВариантБюджета - СправочникСсылка.ВариантыБюджетов
//	&РазделБюджета - СправочникСсылка.ФинансовыеЦели или пустая строка
//	&ВалютаУчета - СправочникСсылка.Валюты - базовая валюта
//	&ВалютаВарианта - СправочникСсылка.Валюты - валюта, в которой рассчитывается вариант бюджета
//	&БюджетноеНачалоРедактируемогоПериода - Дата - дата начала первого рассматриваемого бюджетного периода
//	&ДатаОстатков - Дата, на которую нужно получить остатки, и начиная с которой нужны обороты для вычисления плановых остатков
//	&БюджетноеНачалоВыборки - Дата - дата начала первого бюджетного периода с учетом периодов статистики
//	&БюджетноеОкончаниеВыборки - Дата - дата окончания последнего рассматриваемого бюджетного периода
//	& - Дата - дата начала первого рассматриваемого бюджетного периода
//	& - Дата - дата начала первого рассматриваемого бюджетного периода
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросПоказателиПланФакт(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	Если СтруктураЗапроса = Неопределено Тогда
		СтруктураЗапроса = Новый Структура;
	КонецЕсли;
	
	ИмяТаблицы = "ПоказателиБюджетаЗаВсеПериоды";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ТипПоказателя,
	|	Подзапрос.ОтношениеКНакоплениям,
	|	Подзапрос.ГрафаБюджета,
	|	АктуальныеСтатьи.СтатьяБюджета,
	|	Подзапрос.КлючСтатьи КАК КлючСтатьи,
	|	СУММА(Подзапрос.СуммаПоБюджету) КАК СуммаПоБюджету,
	|	МАКСИМУМ(Подзапрос.Комментарий) КАК Комментарий
	|ПОМЕСТИТЬ ПоказателиБюджетаЗаВсеПериоды
	|ИЗ (
	|
	|	ВЫБРАТЬ
	|		Подзапрос.НомерПериода,
	|		Подзапрос.НачалоПериода,
	|		Подзапрос.АктуальныйОборот,
	|		Подзапрос.ОборотДополнения,
	|		Подзапрос.ТипПоказателя,
	|		Подзапрос.ОтношениеКНакоплениям,
	|		Подзапрос.ГрафаБюджета,
	|		МАКСИМУМ(ВЫБОР
	|			КОГДА АктуальныеСтатьи.СтатьяБюджета ЕСТЬ NULL
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ""10.99.""
	|			КОГДА АктуальныеСтатьи.СтатьяБюджета ЕСТЬ NULL
	|					И Подзапрос.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ""20.99.""
	|			ИНАЧЕ АктуальныеСтатьи.КлючСтатьи
	|		КОНЕЦ) КАК КлючСтатьи,
	|		Подзапрос.СуммаПоБюджету КАК СуммаПоБюджету,
	|		Подзапрос.Комментарий КАК Комментарий
	|		ИЗ (
	|			ВЫБРАТЬ
	|				ЕСТЬNULL(Таблицапериодов.НомерПериода, 0) КАК НомерПериода,
	|				ЕСТЬNULL(Таблицапериодов.НачалоКалендарногоПериода, ДАТАВРЕМЯ(1,1,1)) КАК НачалоПериода,
	|				ЕСТЬNULL(Таблицапериодов.НомерПериода, 0) >= 0 КАК АктуальныйОборот,
	|				ЕСТЬNULL(Таблицапериодов.НомерПериода, 0) < 0 И Показатели.НачалоПериода >= &ДатаОстатков КАК ОборотДополнения,
	|				Показатели.ТипПоказателя КАК ТипПоказателя,
	|				ВЫБОР
	|					КОГДА Показатели.СтатьяБюджета ССЫЛКА Справочник.ГрафыБюджета
	|						ТОГДА Показатели.СтатьяБюджета.ОтношениеКНакоплениям
	|					КОГДА Показатели.СтатьяБюджета ССЫЛКА Справочник.ФинансовыеЦели
	|						ТОГДА ВЫБОР
	|								КОГДА Показатели.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|									ТОГДА -1
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ КАК ОтношениеКНакоплениям,
	|				Показатели.ГрафаБюджета КАК ГрафаБюджета,
	|				Показатели.СтатьяБюджета КАК СтатьяБюджета,
	|				КлючиСтатей.КлючСтатьи,
	|				Показатели.Сумма КАК СуммаПоБюджету,
	|				Показатели.Комментарий
	|			ИЗ
	|				РегистрСведений.ПоказателиБюджета КАК Показатели
	|					ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК Таблицапериодов
	|					ПО (Таблицапериодов.НачалоКалендарногоПериода = Показатели.НачалоПериода)
	|					ЛЕВОЕ СОЕДИНЕНИЕ КлючиСтатей КАК КлючиСтатей
	|					ПО Показатели.ГрафаБюджета = КлючиСтатей.ГрафаБюджета
	|						И Показатели.СтатьяБюджета = КлючиСтатей.СтатьяБюджета
	|			ГДЕ
	|				Показатели.НачалоПериода МЕЖДУ &КалендарноеНачалоВыборки И &КалендарноеОкончаниеВыборки
	|				И Показатели.ВариантБюджета = &ВариантБюджета
	|				И (&РазделБюджета = """" И Показатели.ГрафаБюджета.ОтношениеКНакоплениям = 0
	|						ИЛИ Показатели.РазделБюджета = &РазделБюджета)
	|		) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеСтатьи КАК АктуальныеСтатьи
	|		ПО Подзапрос.ГрафаБюджета = АктуальныеСтатьи.ГрафаБюджета
	|			И Подзапрос.КлючСтатьи МЕЖДУ АктуальныеСтатьи.КлючСтатьи И АктуальныеСтатьи.КлючСтатьи + ""яяяя""
	|	СГРУППИРОВАТЬ ПО
	|		Подзапрос.НомерПериода,
	|		Подзапрос.НачалоПериода,
	|		Подзапрос.АктуальныйОборот,
	|		Подзапрос.ОборотДополнения,
	|		Подзапрос.ТипПоказателя,
	|		Подзапрос.ОтношениеКНакоплениям,
	|		Подзапрос.ГрафаБюджета,
	|		Подзапрос.СтатьяБюджета,
	|		Подзапрос.СуммаПоБюджету,
	|		Подзапрос.Комментарий
	|			
	|	) КАК Подзапрос
	|	ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеСтатьи КАК АктуальныеСтатьи
	|	ПО Подзапрос.ГрафаБюджета = АктуальныеСтатьи.ГрафаБюджета
	|		И Подзапрос.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ТипПоказателя,
	|	Подзапрос.ОтношениеКНакоплениям,
	|	Подзапрос.ГрафаБюджета,
	|	АктуальныеСтатьи.СтатьяБюджета,
	|	Подзапрос.КлючСтатьи
	|
	|
	|ИНДЕКСИРОВАТЬ ПО 
	|	НомерПериода,
	|	Подзапрос.ТипПоказателя,
	|	КлючСтатьи
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;
	
	
	ИмяТаблицы = "ВесьБюджет";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ТипПоказателя,
	|	Подзапрос.ОтношениеКНакоплениям,
	|	Подзапрос.ГрафаБюджета,
	|	Подзапрос.СтатьяБюджета,
	|	Подзапрос.КлючСтатьи,
	|	СУММА(Подзапрос.СуммаПлановыхОпераций) КАК СуммаПлановыхОпераций,
	|	СУММА(Подзапрос.СуммаФакт) КАК СуммаФакт,
	|	СУММА(Подзапрос.СуммаПлановыхОпераций) КАК СуммаПлановыхОперацийБезКредиток,
	|	СУММА(Подзапрос.СуммаФакт) КАК СуммаФактБезКредиток,
	|	СУММА(Подзапрос.СуммаПоБюджету) КАК СуммаПоБюджету,
	|	МАКСИМУМ(Подзапрос.Комментарий) КАК Комментарий
	|ПОМЕСТИТЬ ВесьБюджет
	|ИЗ
	|	(
	|	
	|	ВЫБРАТЬ
	|		ОборотыОпераций.НомерПериода КАК НомерПериода,
	|		ОборотыОпераций.АктуальныйОборот КАК АктуальныйОборот,
	|		ОборотыОпераций.ОборотДополнения КАК ОборотДополнения,
	|		ОборотыОпераций.ТипПоказателя КАК ТипПоказателя,
	|		ОборотыОпераций.ОтношениеКНакоплениям КАК ОтношениеКНакоплениям,
	|		ОборотыОпераций.ГрафаБюджета КАК ГрафаБюджета,
	|		ОборотыОпераций.СтатьяБюджета КАК СтатьяБюджета,
	|		МАКСИМУМ(ВЫБОР
	|			КОГДА АктуальныеСтатьи.СтатьяБюджета ЕСТЬ NULL
	|					И ОборотыОпераций.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ""10.99.""
	|			КОГДА АктуальныеСтатьи.СтатьяБюджета ЕСТЬ NULL
	|					И ОборотыОпераций.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ""20.99.""
	|			ИНАЧЕ АктуальныеСтатьи.КлючСтатьи
	|		КОНЕЦ) КАК КлючСтатьи,
	|		ОборотыОпераций.СуммаПлановыхОпераций КАК СуммаПлановыхОпераций,
	|		ОборотыОпераций.СуммаФакт КАК СуммаФакт,
	|		ОборотыОпераций.СуммаПлановыхОперацийБезКредиток КАК СуммаПлановыхОперацийБезКредиток,
	|		ОборотыОпераций.СуммаФактБезКредиток КАК СуммаФактБезКредиток,
	|		0 КАК СуммаПоБюджету,
	|		"""" КАК Комментарий
	|	ИЗ
	|		ОборотыОпераций КАК ОборотыОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеСтатьи КАК АктуальныеСтатьи
	|		ПО ОборотыОпераций.ГрафаБюджета = АктуальныеСтатьи.ГрафаБюджета
	|			И ОборотыОпераций.КлючСтатьи МЕЖДУ АктуальныеСтатьи.КлючСтатьи И АктуальныеСтатьи.КлючСтатьи + ""яяя""
	|	СГРУППИРОВАТЬ ПО
	|		ОборотыОпераций.НомерПериода,
	|		ОборотыОпераций.АктуальныйОборот,
	|		ОборотыОпераций.ОборотДополнения,
	|		ОборотыОпераций.ТипПоказателя,
	|		ОборотыОпераций.ОтношениеКНакоплениям,
	|		ОборотыОпераций.ГрафаБюджета,
	|		ОборотыОпераций.СтатьяБюджета,
	|		ОборотыОпераций.СуммаПлановыхОпераций,
	|		ОборотыОпераций.СуммаФакт,
	|		ОборотыОпераций.СуммаПлановыхОперацийБезКредиток,
	|		ОборотыОпераций.СуммаФактБезКредиток
	|		
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Показатели.НомерПериода,
	|		Показатели.АктуальныйОборот,
	|		Показатели.ОборотДополнения,
	|		Показатели.ТипПоказателя,
	|		Показатели.ОтношениеКНакоплениям,
	|		Показатели.ГрафаБюджета КАК ГрафаБюджета,
	|		Показатели.СтатьяБюджета,
	|		Показатели.КлючСтатьи,
	|		0,
	|		0,
	|		0,
	|		0,
	|		Показатели.СуммаПоБюджету,
	|		Показатели.Комментарий
	|	ИЗ
	|		ПоказателиБюджетаЗаВсеПериоды КАК Показатели
	|		) КАК Подзапрос
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РазделБюджета = """"
	|				ТОГДА Подзапрос.ОтношениеКНакоплениям = 0
	|			КОГДА &РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|				ТОГДА Подзапрос.ОтношениеКНакоплениям <= 0
	|			ИНАЧЕ Подзапрос.ОтношениеКНакоплениям >= 0
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.НомерПериода,
	|	Подзапрос.АктуальныйОборот,
	|	Подзапрос.ОборотДополнения,
	|	Подзапрос.ТипПоказателя,
	|	Подзапрос.ОтношениеКНакоплениям,
	|	Подзапрос.КлючСтатьи,
	|	Подзапрос.ГрафаБюджета,
	|	Подзапрос.СтатьяБюджета
	|ИНДЕКСИРОВАТЬ ПО
	|	Подзапрос.НомерПериода,
	|	КлючСтатьи,
	|	Подзапрос.СтатьяБюджета
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;


	ИмяТаблицы = "ГотовыеОборотыПланФакт";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ 
	|	АктуальныеСтатьи.ТипПоказателя КАК ТипПоказателя,
	|	АктуальныеСтатьи.ГрафаБюджета КАК ГрафаБюджета,
	|	АктуальныеСтатьи.СтатьяБюджета КАК СтатьяБюджета,
	|
	|	// Итоги по статье и подстатьям
	|	СУММА(ЕСТЬNULL(ВесьБюджет.СуммаПлан, 0)) КАК СуммаПлан,
	|	СУММА(ЕСТЬNULL(ВесьБюджет.СуммаФакт, 0)) КАК СуммаФакт,
	|	СУММА(ЕСТЬNULL(ВесьБюджет.Разница, 0)) КАК Разница,
	|	СУММА(ВЫБОР 
	|			КОГДА (ЕСТЬNULL(ВесьБюджет.Разница, 0)) > 0
	|				ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК ОсталосьПоСтатье,
	|	СУММА(ВЫБОР 
	|			КОГДА (ЕСТЬNULL(ВесьБюджет.Разница, 0)) < 0
	|				ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК Превышение,
	|	СУММА(ЕСТЬNULL(ВесьБюджет.СуммаПлановыхОпераций, 0)) КАК СуммаПлановыхОпераций,
	|	СУММА(ЕСТЬNULL(ВесьБюджет.СуммаПоБюджету, 0)) КАК СуммаПоБюджету,
	|
	|	// Суммы по статьям без учета подчиненных статей
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаПлановыхОпераций, 0) + ЕСТЬNULL(ВесьБюджет.СуммаПоБюджету, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаПланПоСамойСтатье,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаФакт, 0) 
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаФактПоСамойСтатье,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК РазницаПоСамойСтатье,
	|	СУММА(ВЫБОР 
	|			КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи И (ЕСТЬNULL(ВесьБюджет.Разница, 0)) > 0
	|				ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК ОсталосьПоСтатьеПоСамойСтатье,
	|	СУММА(ВЫБОР 
	|			КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи И (ЕСТЬNULL(ВесьБюджет.Разница, 0)) < 0
	|				ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК ПревышениеПоСамойСтатье,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаПлановыхОпераций, 0) 
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаПлановыхОперацийПоСамойСтатье,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаПоБюджету, 0) 
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаПоБюджетуПоСамойСтатье,
	|
	|	// Суммы по подчиненным статьям
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи > АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаПлановыхОпераций, 0) + ЕСТЬNULL(ВесьБюджет.СуммаПоБюджету, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаПланПоПодстатьям,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи > АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаФакт, 0) 
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаФактПоПодстатьям,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи > АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК РазницаПоПодстатьям,
	|	СУММА(ВЫБОР 
	|			КОГДА ВесьБюджет.КлючСтатьи > АктуальныеСтатьи.КлючСтатьи И (ЕСТЬNULL(ВесьБюджет.Разница, 0)) > 0
	|				ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК ОсталосьПоСтатьеПоПодстатьям,
	|	СУММА(ВЫБОР 
	|			КОГДА ВесьБюджет.КлючСтатьи > АктуальныеСтатьи.КлючСтатьи И (ЕСТЬNULL(ВесьБюджет.Разница, 0)) < 0
	|				ТОГДА ЕСТЬNULL(ВесьБюджет.Разница, 0)
	|			ИНАЧЕ 0
	|	КОНЕЦ) КАК ПревышениеПоПодстатьям,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи > АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаПлановыхОпераций, 0) 
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаПлановыхОперацийПоПодстатьям,
	|	СУММА(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи > АктуальныеСтатьи.КлючСтатьи
	|		ТОГДА ЕСТЬNULL(ВесьБюджет.СуммаПоБюджету, 0) 
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаПоБюджетуПоПодстатьям,
	|
	|	МАКСИМУМ(ВЫБОР КОГДА ВесьБюджет.КлючСтатьи = АктуальныеСтатьи.КлючСтатьи ТОГДА ЕСТЬNULL(ВесьБюджет.Комментарий, """") ИНАЧЕ """" КОНЕЦ) КАК Комментарий,
	|	ЕСТЬNULL(ВесьБюджет.НомерПериода, 0) КАК НомерПериода,
	|	ЕСТЬNULL(ВесьБюджет.АктуальныйОборот, ЛОЖЬ) КАК АктуальныйОборот,
	|	АктуальныеСтатьи.АктивностьСтатьи КАК АктивностьСтатьи,
	|	АктуальныеСтатьи.РодительскаяСтатья КАК РодительскаяСтатья,
	|	АктуальныеСтатьи.Порядок КАК Порядок,
	|	АктуальныеСтатьи.КлючСтатьи КАК КлючСтатьи,
	|	АктуальныеСтатьи.КлючРодительскойСтатьи КАК КлючРодительскойСтатьи
	|ПОМЕСТИТЬ ГотовыеОборотыПланФакт
	|ИЗ 
	|	АктуальныеСтатьи КАК АктуальныеСтатьи
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|			ВЫБРАТЬ
	|				ВесьБюджет.КлючСтатьи,
	|				ВесьБюджет.НомерПериода,
	|				ВесьБюджет.АктуальныйОборот,
	|				СУММА(ВесьБюджет.СуммаПлановыхОпераций + ВесьБюджет.СуммаПоБюджету) КАК СуммаПлан,
	|				СУММА(ВесьБюджет.СуммаФакт) КАК СуммаФакт,
	|				СУММА(ВесьБюджет.СуммаПлановыхОпераций + ВесьБюджет.СуммаПоБюджету - ВесьБюджет.СуммаФакт) КАК Разница,
	|				СУММА(ВесьБюджет.СуммаПлановыхОпераций) КАК СуммаПлановыхОпераций,
	|				СУММА(ВесьБюджет.СуммаПоБюджету) КАК СуммаПоБюджету,
	|				МАКСИМУМ(ВесьБюджет.Комментарий) КАК Комментарий
	|				ИЗ
	|					ВесьБюджет КАК ВесьБюджет
	|				СГРУППИРОВАТЬ ПО
	|					ВесьБюджет.КлючСтатьи,
	|					ВесьБюджет.НомерПериода,
	|					ВесьБюджет.АктуальныйОборот
	|				) КАК ВесьБюджет
	|		ПО ВесьБюджет.КлючСтатьи МЕЖДУ АктуальныеСтатьи.КлючСтатьи И АктуальныеСтатьи.КлючСтатьи + ""яяяя""
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВесьБюджет.НомерПериода, 0),
	|	ЕСТЬNULL(ВесьБюджет.АктуальныйОборот, ЛОЖЬ),
	|	АктуальныеСтатьи.ТипПоказателя,
	|	АктуальныеСтатьи.ГрафаБюджета,
	|	АктуальныеСтатьи.СтатьяБюджета,
	|	АктуальныеСтатьи.АктивностьСтатьи,
	|	АктуальныеСтатьи.РодительскаяСтатья,
	|	АктуальныеСтатьи.КлючСтатьи,
	|	АктуальныеСтатьи.Порядок,
	|	АктуальныеСтатьи.КлючРодительскойСтатьи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипПоказателя,
	|	КлючСтатьи,
	|	НомерПериода
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Выборки из запросов

// Дополняет текст запроса выборкой статей бюджета с группировкой по типу движения и упорядочиванием с учетом родительских статей
//
//Обязательно наличие временных таблиц
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросВыборкуСтатейБюджета(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	ИмяТаблицы = "Выборка_СтатьиБюджета";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АктуальныеСтатьи.ТипПоказателя,
	|	АктуальныеСтатьи.ОтношениеКНакоплениям,
	|	АктуальныеСтатьи.ГрафаБюджета КАК ГрафаБюджета,
	|	АктуальныеСтатьи.СтатьяБюджета КАК СтатьяБюджета,
	|	АктуальныеСтатьи.АктивностьСтатьи,
	|	АктуальныеСтатьи.КлючСтатьи,
	|	АктуальныеСтатьи.Видимость,
	|	АктуальныеСтатьи.ПоСтатьеЕстьСуммы,
	|	АктуальныеСтатьи.ПорядокПоУмолчанию,
	|	АктуальныеСтатьи.Порядок,
	|	АктуальныеСтатьи.РодительскаяСтатья,
	|	АктуальныеСтатьи.КлючРодительскойСтатьи
	|ИЗ
	|	АктуальныеСтатьи КАК АктуальныеСтатьи
	|УПОРЯДОЧИТЬ ПО
	|	ТипПоказателя,
	|	КлючРодительскойСтатьи,
	|	Порядок
	|ИТОГИ ПО
	|	ТипПоказателя	
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры

// Дополняет текст запроса выборкой показателей бюджета с группировкой по типу движения
//
//Обязательно наличие временных таблиц
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросВыборкуПоказателейБюджета(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	ИмяТаблицы = "Выборка_ПоказателиБюджета";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГотовыеОбороты.НомерПериода,
	|	ГотовыеОбороты.ТипПоказателя КАК ТипПоказателя,
	|	ГотовыеОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ГотовыеОбороты.АктивностьСтатьи КАК АктивностьСтатьи,
	|	ГотовыеОбороты.РодительскаяСтатья КАК РодительскаяСтатья,
	|	ГотовыеОбороты.КлючСтатьи КАК КлючСтатьи,
	|	ГотовыеОбороты.КлючРодительскойСтатьи КАК КлючРодительскойСтатьи,
	|	ГотовыеОбороты.Комментарий,
	|	ГотовыеОбороты.Порядок КАК Порядок,
	|	ГотовыеОбороты.ГрафаБюджета КАК ГрафаБюджета,
	|
	|	// Суммы итоговые
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПлан ИНАЧЕ 0 КОНЕЦ КАК СуммаПлан,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаФакт ИНАЧЕ 0 КОНЕЦ КАК СуммаФакт,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.Разница ИНАЧЕ 0 КОНЕЦ КАК Разница,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.ОсталосьПоСтатье ИНАЧЕ 0 КОНЕЦ КАК ОсталосьПоСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.Превышение ИНАЧЕ 0 КОНЕЦ КАК Превышение,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПлановыхОпераций ИНАЧЕ 0 КОНЕЦ КАК СуммаПлановыхОпераций,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПоБюджету ИНАЧЕ 0 КОНЕЦ КАК СуммаПоБюджету,
	|	
	|	// Суммы по статье без учета подчиненных статей
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПланПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК СуммаПланПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаФактПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК СуммаФактПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.РазницаПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК РазницаПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.ОсталосьПоСтатьеПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК ОсталосьПоСтатьеПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.ПревышениеПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК ПревышениеПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПлановыхОперацийПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК СуммаПлановыхОперацийПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПоБюджетуПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК СуммаПоБюджетуПоСамойСтатье,
	|	
	|	// Суммы по подчиненным статьям
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПланПоПодстатьям ИНАЧЕ 0 КОНЕЦ КАК СуммаПланПоПодстатьям,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаФактПоПодстатьям ИНАЧЕ 0 КОНЕЦ КАК СуммаФактПоПодстатьям,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.РазницаПоПодстатьям ИНАЧЕ 0 КОНЕЦ КАК РазницаПоПодстатьям,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.ОсталосьПоСтатьеПоПодстатьям ИНАЧЕ 0 КОНЕЦ КАК ОсталосьПоСтатьеПоПодстатьям,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.ПревышениеПоПодстатьям ИНАЧЕ 0 КОНЕЦ КАК ПревышениеПоПодстатьям,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПлановыхОперацийПоПодстатьям ИНАЧЕ 0 КОНЕЦ КАК СуммаПлановыхОперацийПоПодстатьям,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода > 0 ТОГДА ГотовыеОбороты.СуммаПоБюджетуПоПодстатьям ИНАЧЕ 0 КОНЕЦ КАК СуммаПоБюджетуПоПодстатьям,
	|
	|	// Суммы прошлых периодов	
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода < 0 ТОГДА ГотовыеОбороты.СуммаПлановыхОпераций ИНАЧЕ 0 КОНЕЦ КАК ПрошлоеСуммаПлановыхОпераций,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода < 0 ТОГДА ГотовыеОбороты.СуммаПланПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК ПрошлоеСуммаПланПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода < 0 ТОГДА ГотовыеОбороты.СуммаФактПоСамойСтатье ИНАЧЕ 0 КОНЕЦ КАК ПрошлоеСуммаФактПоСамойСтатье,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода < 0 ТОГДА ГотовыеОбороты.СуммаПоБюджету ИНАЧЕ 0 КОНЕЦ КАК ПрошлоеСуммаПоБюджету,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода < 0 ТОГДА ГотовыеОбороты.СуммаПлан ИНАЧЕ 0 КОНЕЦ КАК ПрошлоеСуммаПлан,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода < 0 ТОГДА ГотовыеОбороты.СуммаФакт ИНАЧЕ 0 КОНЕЦ КАК ПрошлоеСуммаФакт,
	|	ВЫБОР КОГДА ГотовыеОбороты.НомерПериода < 0 ТОГДА ГотовыеОбороты.Разница ИНАЧЕ 0 КОНЕЦ КАК ПрошлоеРазница,
	|	ВЫБОР
	|		КОГДА ГотовыеОбороты.НомерПериода < 0 И ГотовыеОбороты.Разница > 0
	|			ТОГДА ГотовыеОбороты.Разница
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрошлоеОсталосьПоСтатье,
	|	ВЫБОР
	|		КОГДА ГотовыеОбороты.НомерПериода < 0 И ГотовыеОбороты.Разница < 0
	|			ТОГДА ГотовыеОбороты.Разница
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрошлоеПревышение
	|ИЗ
	|	ГотовыеОборотыПланФакт КАК ГотовыеОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипПоказателя, // упорядочивание
	|	КлючРодительскойСтатьи,
	|	Порядок,
	|	НомерПериода // упорядочивание
	|ИТОГИ
	|	МАКСИМУМ(РодительскаяСтатья),
	|	МАКСИМУМ(Порядок),
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(ГрафаБюджета),
	|	МАКСИМУМ(КлючСтатьи),
	|	МАКСИМУМ(АктивностьСтатьи),
	|	МАКСИМУМ(КлючРодительскойСтатьи),
	|	СУММА(СуммаПлановыхОпераций),
	|	СУММА(СуммаПоБюджету),
	|	СУММА(СуммаПлан),
	|	СУММА(СуммаФакт),
	|	СУММА(Разница),
	|	СУММА(ОсталосьПоСтатье),
	|	СУММА(Превышение),
	|
	|	СУММА(СуммаПлановыхОперацийПоСамойСтатье),
	|	СУММА(СуммаПоБюджетуПоСамойСтатье),
	|	СУММА(СуммаПланПоСамойСтатье),
	|	СУММА(СуммаФактПоСамойСтатье),
	|	СУММА(РазницаПоСамойСтатье),
	|	СУММА(ОсталосьПоСтатьеПоСамойСтатье),
	|	СУММА(ПревышениеПоСамойСтатье),
	|
	|	СУММА(СуммаПланПоПодстатьям),
	|	СУММА(СуммаФактПоПодстатьям),
	|	СУММА(СуммаПлановыхОперацийПоПодстатьям),
	|	СУММА(СуммаПоБюджетуПоПодстатьям),
	|	СУММА(РазницаПоПодстатьям),
	|	СУММА(ОсталосьПоСтатьеПоПодстатьям),
	|	СУММА(ПревышениеПоПодстатьям),
	|
	|	СУММА(ПрошлоеСуммаПлановыхОпераций),
	|	СУММА(ПрошлоеСуммаПланПоСамойСтатье),
	|	СУММА(ПрошлоеСуммаФактПоСамойСтатье),
	|	СУММА(ПрошлоеСуммаПоБюджету),
	|	СУММА(ПрошлоеСуммаПлан),
	|	СУММА(ПрошлоеСуммаФакт),
	|	СУММА(ПрошлоеРазница),
	|	СУММА(ПрошлоеОсталосьПоСтатье),
	|	СУММА(ПрошлоеПревышение)
	|ПО
	|	ТипПоказателя,
	|	СтатьяБюджета,
	|	НомерПериода
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры

// Дополняет текст запроса врем.таблицами и выборкой остатков и факт.оборотов на начало и конец каждого бюджетного периода
//
//Обязательно наличие временных таблиц
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросВыборкуОстатковПоБюджетнымПериодам(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	Если Не СтруктураЗапроса.Свойство("ПоследниеКурсы") Тогда
		ДобавитьВЗапросПоследниеКурсыВалют(ТекстПакетногоЗапроса, СтруктураЗапроса);
	КонецЕсли;
	
	
	// Помещает во временную таблицу все остатки и обороты по бюджетным периодам
	ИмяТаблицы = "ОборотыИОстатки";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПериодов.НомерПериода,
	|	жОстаткиИОбороты.Период КАК День,
	|	жОстаткиИОбороты.Валюта КАК Валюта,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалют.Курс, ЕСТЬNULL(ПоследниеКурсы.Курс, 0)) * ЕСТЬNULL(КурсыВалютыОтчета.Кратность, ЕСТЬNULL(ПоследниеКурсыОтчета.Кратность, 0)) / ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1)) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1))
	|		КОНЕЦ КАК ЧИСЛО(15, 4)) КАК Курс,
	|	жОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток КАК НаНачалоВВалютеКошелька,
	|	жОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ПриходВВалютеКошелька,
	|	жОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК РасходВВалютеКошелька,
	|	жОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток КАК НаКонецВВалютеКошелька
	|ПОМЕСТИТЬ ОборотыИОстатки
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.ОстаткиИОбороты(
	|			&ДатаОстатков,
	|			&БюджетноеОкончаниеВыборки,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			ВЫБОР
	|				КОГДА &РазделБюджета = """"
	|					ТОГДА Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Деньги))
	|				КОГДА &РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|					ТОГДА Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.СвободныеДеньги)
	|				ИНАЧЕ Счет = ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|			КОНЕЦ,
	|			,
	|			ЕСТЬNULL(Субконто1.Активность, ЛОЖЬ)
	|				И Субконто1.ТипСчета <> ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|				И ВЫБОР
	|					КОГДА &РазделБюджета = """"
	|							ИЛИ &РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Субконто2 = &РазделБюджета
	|				КОНЕЦ) КАК жОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО жОстаткиИОбороты.Период = КурсыВалют.Период
	|			И жОстаткиИОбороты.Валюта = КурсыВалют.Валюта
	|			И (КурсыВалют.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютыОтчета
	|		ПО (КурсыВалют.Период = КурсыВалютыОтчета.Период)
	|			И (КурсыВалютыОтчета.Валюта = &ВалютаВарианта)
	|			И (КурсыВалютыОтчета.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсы
	|		ПО жОстаткиИОбороты.Валюта = ПоследниеКурсы.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсыОтчета
	|		ПО (ПоследниеКурсыОтчета.Валюта = &ВалютаВарианта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО (жОстаткиИОбороты.Период МЕЖДУ ТаблицаПериодов.НачалоПериода И ТаблицаПериодов.ОкончаниеПериода)
	|			И (ТаблицаПериодов.НомерПериода > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	День,
	|	ТаблицаПериодов.НомерПериода
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

	
	// Вычисляет обороты и остатки на каждое начало и конец каждого бюджетного периода
	ИмяТаблицы = "ОборотыИОстаткиПоПериодам";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СводОстатков.НомерПериода,
	|	СводОстатков.НачалоПериода,
	|	СводОстатков.ОкончаниеПериода,
	|	СводОстатков.Валюта,
	|	СводОстатков.НаНачалоВВалютеКошелька,
	|	СводОстатков.НаКонецВВалютеКошелька,
	|	СУММА(ОборотыИОстатки.ПриходВВалютеКошелька * ОборотыИОстатки.Курс) КАК Приход,
	|	СУММА(ОборотыИОстатки.РасходВВалютеКошелька * ОборотыИОстатки.Курс) КАК Расход
	|ПОМЕСТИТЬ ОборотыИОстаткиПоПериодам
	|ИЗ
	|	(ВЫБРАТЬ
	|		СводОстатков.НомерПериода КАК НомерПериода,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА СводОстатков.НачалоПериода = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ВсеПериоды.НачалоПериода
	|				ИНАЧЕ СводОстатков.НачалоПериода
	|			КОНЕЦ) КАК НачалоПериода,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА СводОстатков.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ВсеПериоды.ОкончаниеПериода
	|				ИНАЧЕ КОНЕЦПЕРИОДА(СводОстатков.ОкончаниеПериода, ДЕНЬ)
	|			КОНЕЦ) КАК ОкончаниеПериода,
	|		СводОстатков.Валюта КАК Валюта,
	|		СУММА(СводОстатков.НаНачалоВВалютеКошелька) КАК НаНачалоВВалютеКошелька,
	|		СУММА(СводОстатков.НаКонецВВалютеКошелька) КАК НаКонецВВалютеКошелька
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДатыОстатков.НомерПериода КАК НомерПериода,
	|			ДатыОстатков.День КАК НачалоПериода,
	|			ДАТАВРЕМЯ(1, 1, 1) КАК ОкончаниеПериода,
	|			ДатыОстатков.Валюта КАК Валюта,
	|			ВЫБОР
	|				КОГДА ДатыОстатков.СекундаОстатка < ДатыОстатков.День
	|					ТОГДА ЕСТЬNULL(ОборотыИОстатки.НаКонецВВалютеКошелька, 0)
	|				ИНАЧЕ ЕСТЬNULL(ОборотыИОстатки.НаНачалоВВалютеКошелька, 0)
	|			КОНЕЦ КАК НаНачалоВВалютеКошелька,
	|			0 КАК НаКонецВВалютеКошелька
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВсеПериоды.НомерПериода КАК НомерПериода,
	|				ВсеПериоды.НачалоПериода КАК День,
	|				МАКСИМУМ(ОборотыИОстатки.День) КАК СекундаОстатка,
	|				ЕСТЬNULL(ОборотыИОстатки.Валюта, &ВалютаВарианта) КАК Валюта
	|			ИЗ
	|				ТаблицаПериодов КАК ВсеПериоды
	|					ЛЕВОЕ СОЕДИНЕНИЕ ОборотыИОстатки КАК ОборотыИОстатки
	|					ПО (ОборотыИОстатки.День <= ВсеПериоды.НачалоПериода)
	|			ГДЕ
	|				ВсеПериоды.НомерПериода > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВсеПериоды.НомерПериода,
	|				ВсеПериоды.НачалоПериода,
	|				ЕСТЬNULL(ОборотыИОстатки.Валюта, &ВалютаВарианта)) КАК ДатыОстатков
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОборотыИОстатки КАК ОборотыИОстатки
	|				ПО ДатыОстатков.Валюта = ОборотыИОстатки.Валюта
	|					И ДатыОстатков.СекундаОстатка = ОборотыИОстатки.День
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ДатыОстатков.НомерПериода,
	|			ДАТАВРЕМЯ(1, 1, 1),
	|			ДатыОстатков.День,
	|			ДатыОстатков.Валюта,
	|			0,
	|			ВЫБОР
	|				КОГДА ДатыОстатков.СекундаОстатка > ДатыОстатков.День
	|					ТОГДА ЕСТЬNULL(ОборотыИОстатки.НаНачалоВВалютеКошелька, 0)
	|				ИНАЧЕ ЕСТЬNULL(ОборотыИОстатки.НаКонецВВалютеКошелька, 0)
	|			КОНЕЦ
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВсеПериоды.НомерПериода КАК НомерПериода,
	|				НАЧАЛОПЕРИОДА(ВсеПериоды.ОкончаниеПериода, ДЕНЬ) КАК День,
	|				МАКСИМУМ(ОборотыИОстатки.День) КАК СекундаОстатка,
	|				ЕСТЬNULL(ОборотыИОстатки.Валюта, &ВалютаВарианта) КАК Валюта
	|			ИЗ
	|				ТаблицаПериодов КАК ВсеПериоды
	|					ЛЕВОЕ СОЕДИНЕНИЕ ОборотыИОстатки КАК ОборотыИОстатки
	|					ПО (ОборотыИОстатки.День <= ВсеПериоды.ОкончаниеПериода)
	|			ГДЕ
	|				ВсеПериоды.НомерПериода > 0
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВсеПериоды.НомерПериода,
	|				НАЧАЛОПЕРИОДА(ВсеПериоды.ОкончаниеПериода, ДЕНЬ),
	|				ЕСТЬNULL(ОборотыИОстатки.Валюта, &ВалютаВарианта)) КАК ДатыОстатков
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОборотыИОстатки КАК ОборотыИОстатки
	|				ПО ДатыОстатков.Валюта = ОборотыИОстатки.Валюта
	|					И ДатыОстатков.СекундаОстатка = ОборотыИОстатки.День) КАК СводОстатков
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ВсеПериоды
	|			ПО ВсеПериоды.НомерПериода = СводОстатков.НомерПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СводОстатков.НомерПериода,
	|		СводОстатков.Валюта) КАК СводОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыИОстатки КАК ОборотыИОстатки
	|		ПО (ОборотыИОстатки.НомерПериода = СводОстатков.НомерПериода)
	|			И (ОборотыИОстатки.Валюта = СводОстатков.Валюта)
	|
	|СГРУППИРОВАТЬ ПО
	|	СводОстатков.НомерПериода,
	|	СводОстатков.НачалоПериода,
	|	СводОстатков.ОкончаниеПериода,
	|	СводОстатков.Валюта,
	|	СводОстатков.НаНачалоВВалютеКошелька,
	|	СводОстатков.НаКонецВВалютеКошелька
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

	
	// Помещает во временную таблицу курсы валют на начало и конец каждого бюджетного периода
	ИмяТаблицы = "КурсыВалютПоВсемПериодам";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПериодов.День КАК День,
	|	ТаблицаПериодов.Валюта КАК Валюта,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалют.Курс, ЕСТЬNULL(ПоследниеКурсы.Курс, 0)) * ЕСТЬNULL(КурсыВалютыОтчета.Кратность, ЕСТЬNULL(ПоследниеКурсыОтчета.Кратность, 0)) / ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1)) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(КурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(КурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1))
	|		КОНЕЦ КАК ЧИСЛО(15, 4)) КАК Курс,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПредыдущиеКурсыВалют.Курс, ЕСТЬNULL(ПоследниеКурсы.Курс, 0)) * ЕСТЬNULL(ПредыдущиеКурсыВалютыОтчета.Кратность, ЕСТЬNULL(ПоследниеКурсыОтчета.Кратность, 0)) / ВЫБОР
	|			КОГДА ЕСТЬNULL(ПредыдущиеКурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(ПредыдущиеКурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1)) = 0
	|				ТОГДА 1
	|			ИНАЧЕ ЕСТЬNULL(ПредыдущиеКурсыВалютыОтчета.Курс, ЕСТЬNULL(ПоследниеКурсыОтчета.Курс, 1)) * ЕСТЬNULL(ПредыдущиеКурсыВалют.Кратность, ЕСТЬNULL(ПоследниеКурсы.Кратность, 1))
	|		КОНЕЦ КАК ЧИСЛО(15, 4)) КАК ПредыдущийКурс
	|ПОМЕСТИТЬ КурсыВалютПоВсемПериодам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОборотыИОстаткиПоПериодам.НачалоПериода КАК День,
	|		ОборотыИОстаткиПоПериодам.Валюта КАК Валюта
	|	ИЗ
	|		ОборотыИОстаткиПоПериодам КАК ОборотыИОстаткиПоПериодам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ОборотыИОстаткиПоПериодам.ОкончаниеПериода, ДЕНЬ),
	|		ОборотыИОстаткиПоПериодам.Валюта
	|	ИЗ
	|		ОборотыИОстаткиПоПериодам КАК ОборотыИОстаткиПоПериодам) КАК ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО (НАЧАЛОПЕРИОДА(ТаблицаПериодов.День, ДЕНЬ) = КурсыВалют.Период)
	|			И ТаблицаПериодов.Валюта = КурсыВалют.Валюта
	|			И (КурсыВалют.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютыОтчета
	|		ПО (КурсыВалют.Период = КурсыВалютыОтчета.Период)
	|			И (КурсыВалютыОтчета.Валюта = &ВалютаВарианта)
	|			И (КурсыВалютыОтчета.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсы
	|		ПО ТаблицаПериодов.Валюта = ПоследниеКурсы.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКурсы КАК ПоследниеКурсыОтчета
	|		ПО (ПоследниеКурсыОтчета.Валюта = &ВалютаВарианта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК ПредыдущиеКурсыВалют
	|		ПО (НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ТаблицаПериодов.День, ДЕНЬ, -1), ДЕНЬ) = ПредыдущиеКурсыВалют.Период)
	|			И ТаблицаПериодов.Валюта = ПредыдущиеКурсыВалют.Валюта
	|			И (ПредыдущиеКурсыВалют.БазоваяВалюта = &ВалютаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК ПредыдущиеКурсыВалютыОтчета
	|		ПО (ПредыдущиеКурсыВалют.Период = ПредыдущиеКурсыВалютыОтчета.Период)
	|			И (ПредыдущиеКурсыВалютыОтчета.Валюта = &ВалютаВарианта)
	|			И (ПредыдущиеКурсыВалютыОтчета.БазоваяВалюта = &ВалютаУчета)
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

	
	// Выборка остатков и оборотов в разбивке по периодам
	ИмяТаблицы = "Выборка_ОстаткиПоПериодам";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОборотыИОстаткиПоПериодам.НомерПериода,
	|	ОборотыИОстаткиПоПериодам.НачалоПериода,
	|	ОборотыИОстаткиПоПериодам.ОкончаниеПериода,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаНачалоВВалютеКошелька, 0) * ЕСТЬNULL(КурсыНаНачало.ПредыдущийКурс, 0)) КАК НаНачало,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.Приход, 0)) КАК Приход,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.Расход, 0)) КАК Расход,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаКонецВВалютеКошелька, 0) * ЕСТЬNULL(КурсыНаКонец.Курс, 0) + ЕСТЬNULL(ОборотыИОстаткиПоПериодам.Расход, 0) - ЕСТЬNULL(ОборотыИОстаткиПоПериодам.Приход, 0) - ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаНачалоВВалютеКошелька, 0) * ЕСТЬNULL(КурсыНаНачало.Курс, 0) + ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаНачалоВВалютеКошелька, 0) * (ЕСТЬNULL(КурсыНаНачало.Курс, 0) - ЕСТЬNULL(КурсыНаНачало.ПредыдущийКурс, 0))) КАК КурсоваяРазница,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаКонецВВалютеКошелька, 0) * ЕСТЬNULL(КурсыНаКонец.Курс, 0)) КАК НаКонец,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаНачалоВВалютеКошелька, 0)) КАК НаНачалоВВалютеКошелька,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаКонецВВалютеКошелька, 0)) КАК НаКонецВВалютеКошелька,
	|	СУММА(ЕСТЬNULL(ОборотыИОстаткиПоПериодам.НаНачалоВВалютеКошелька, 0) * (ЕСТЬNULL(КурсыНаНачало.Курс, 0) - ЕСТЬNULL(КурсыНаНачало.ПредыдущийКурс, 0))) КАК КурсоваяРазницаНаНачало
	|ИЗ
	|	ОборотыИОстаткиПоПериодам КАК ОборотыИОстаткиПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютПоВсемПериодам КАК КурсыНаНачало
	|		ПО (КурсыНаНачало.День = ОборотыИОстаткиПоПериодам.НачалоПериода)
	|			И (КурсыНаНачало.Валюта = ОборотыИОстаткиПоПериодам.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютПоВсемПериодам КАК КурсыНаКонец
	|		ПО (КурсыНаКонец.День = НАЧАЛОПЕРИОДА(ОборотыИОстаткиПоПериодам.ОкончаниеПериода, ДЕНЬ))
	|			И (КурсыНаКонец.Валюта = ОборотыИОстаткиПоПериодам.Валюта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыИОстаткиПоПериодам.НомерПериода,
	|	ОборотыИОстаткиПоПериодам.НачалоПериода,
	|	ОборотыИОстаткиПоПериодам.ОкончаниеПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОборотыИОстаткиПоПериодам.НомерПериода
	|";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

	
КонецПроцедуры

// Дополняет текст запроса выборкой оборотов по статьям бюджета для вычисления будущих плановых остатков
//
//Обязательно наличие временных таблиц
//
// Параметры
//	ТекстПакетногоЗапроса - Строка - дополняемый текст запроса
//	СтруктураЗапроса - Структура или Неопределено - структура, в которую добавляются имена и индексы результатов пакетного запроса
//	ПрефиксИмен - Строка - будет добавлена к именам параметров запроса и именам временных таблиц, чтобы иметь возможность выполнять
//							несколько однотипных запросов в одном пакете
//
Процедура ДобавитьВЗапросВыборкуДполненийОборотов(ТекстПакетногоЗапроса, СтруктураЗапроса, ПрефиксИмен = "") Экспорт

	// Выборка оборотов от момента получения остатков до начала первого редактируемого периода бюджета
	//Используются для вычисления планового остатка на начало
	ИмяТаблицы = "Выборка_ДополнениеОборотов";
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВесьБюджет.НомерПериода КАК НомерПериода,
	|	СУММА(ВЫБОР
	|			КОГДА ВесьБюджет.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ВесьБюджет.СуммаПлановыхОпераций + ВесьБюджет.СуммаПоБюджету
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПланПоступлений,
	|	СУММА(ВЫБОР
	|			КОГДА ВесьБюджет.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ВесьБюджет.СуммаПлановыхОпераций + ВесьБюджет.СуммаПоБюджету
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПланСписаний,
	|	СУММА(ВЫБОР
	|			КОГДА ВесьБюджет.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				ТОГДА ВесьБюджет.СуммаФактБезКредиток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФактПоступлений,
	|	СУММА(ВЫБОР
	|			КОГДА ВесьБюджет.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|				ТОГДА ВесьБюджет.СуммаФактБезКредиток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФактСписаний,
	|	СУММА(ВЫБОР
	|			КОГДА ВесьБюджет.СуммаПлановыхОперацийБезКредиток + ВесьБюджет.СуммаПоБюджету > ВесьБюджет.СуммаФактБезКредиток
	|				ТОГДА ВесьБюджет.СуммаПлановыхОперацийБезКредиток + ВесьБюджет.СуммаПоБюджету - ВесьБюджет.СуммаФактБезКредиток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОсталосьПоСтатье,
	|	СУММА(ВЫБОР
	|			КОГДА ВесьБюджет.СуммаПлановыхОперацийБезКредиток + ВесьБюджет.СуммаПоБюджету < ВесьБюджет.СуммаФактБезКредиток
	|				ТОГДА ВесьБюджет.СуммаПлановыхОперацийБезКредиток + ВесьБюджет.СуммаПоБюджету - ВесьБюджет.СуммаФактБезКредиток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Превышение
	|ИЗ
	|	ВесьБюджет КАК ВесьБюджет
	|ГДЕ
	|	ВесьБюджет.ОборотДополнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВесьБюджет.НомерПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПериода";
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(ПрефиксИмен) Тогда
		ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы);
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(ТекстПакетногоЗапроса, ИмяТаблицы, СтруктураЗапроса);
	ТекстПакетногоЗапроса = ТекстПакетногоЗапроса + ТекстЗапроса;

КонецПроцедуры



#КонецОбласти 


#Область ПериодыБюджетирования

// Возвращает структуру, описывающую бюджетный период в соответствии с условиями варианта бюджета
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	ДатаПериода - дата, которая принадлежит описываемому периоду
//
//Возвращаемое значение:
//	Структура
//	* ТипПериода - ПеречислениеСсылка.ПериодичностьПланирования
//	* КалендарноеНачало    - Дата, соответсвтует календарному началу периода
//	* КалендарноеОкончание - Дата и время, соответсвтует календарному окончанию периода
//	* Начало    - Дата начала бюджетного периода
//	* Окончание - Дата и время окончания бюджетного периода
//	* СмещениеВСекундах - Число, определяет разницу в секундах между календарным и бюджетным началом периода в пределах одного месяца
//	* СмещениеВМесяцах - Число, определяет разницу в месяцах между календарным и бюджетным началом периода (только для квартала и года)
//	* Представление - Строка - строковое представление бюжетного периода
//
Функция НоваяСтрукрураБюджетногоПериода(Знач ВариантБюджета, Знач ДатаПериода = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ВариантБюджета.Ссылка) Тогда
		ТипПериода = Перечисления.ПериодичностьПланирования.Месяц;
	Иначе
		ТипПериода = ВариантБюджета.ДетальностьПланирования;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПериода) Тогда
		ДатаПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПериода", ТипПериода);
	
	// Определим смещения отностительно календаргого начала
	// смещение в секундах от начала месяца
	Если ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Месяц
		Или ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Квартал
		Или ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Год
		Тогда
		Результат.Вставить("СмещениеВСекундах", 86400 * (ВариантБюджета.ЧислоМесяца - 1));
	Иначе
		Результат.Вставить("СмещениеВСекундах", 0);
	КонецЕсли;
	// смещение в месяцах от начала квартала или года
	Если ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Квартал
		Или ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Год
		Тогда
		Результат.Вставить("СмещениеВМесяцах", ВариантБюджета.НомерМесяца - 1);
	Иначе
		Результат.Вставить("СмещениеВМесяцах", 0);
	КонецЕсли;
	
	// Вычисляем бюджетное начало 
	КалендарноеНачало = НачалоПериодаУказанногоТипа(ДатаПериода, Результат.ТипПериода);
	Если ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Неделя Тогда
		// Для недельных бюджетов смещение не предусмотрено
		БюджетноеНачало   = КалендарноеНачало;
	Иначе
		
		БюджетноеНачало   = НачалоДня(ДобавитьМесяц(КалендарноеНачало, Результат.СмещениеВМесяцах) + Результат.СмещениеВСекундах);
		Если ДатаПериода < БюджетноеНачало Тогда
			// Указанная дата принадлежит предыдущему бюджетному периоду.
			КалендарноеНачало = ДобавитьПериодУказанногоТипа(КалендарноеНачало, Результат.ТипПериода, -1);
			БюджетноеНачало   = НачалоДня(ДобавитьМесяц(КалендарноеНачало, Результат.СмещениеВМесяцах) + Результат.СмещениеВСекундах);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Вставить("КалендарноеНачало", КалендарноеНачало);
	Результат.Вставить("Начало", БюджетноеНачало);
	
	Результат.Вставить("КалендарноеОкончание", ОкончаниеПериодаУказанногоТипа(КалендарноеНачало, Результат.ТипПериода));
	Если ВариантБюджета.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Неделя Тогда
		// Для недельных бюджетов смещение не предусмотрено
		Результат.Вставить("Окончание", Результат.КалендарноеОкончание);
	Иначе
		Результат.Вставить("Окончание", 
				(КонецМесяца(ДобавитьМесяц(Результат.КалендарноеОкончание, Результат.СмещениеВМесяцах)) + Результат.СмещениеВСекундах));
	КонецЕсли;

	Результат.Вставить("Представление", ПредставлениеБюджетногоПериода(Результат.Начало, Результат.Окончание, Результат.ТипПериода));
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру описывающую начальный и конечный бюджетные периоды, рассматриваемые в отчете или в редакторе бюджета
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	НачальнаяДата - дата, которая принадлежит первому редактируемому бюджетному периоду
//	КоличествоПериодов - число - количество редактируемых или просматриваемых периодов
//
//Возвращаемое значение:
//	Структура
//		* НачальныйПериод - бюджетный период, с которого начинается редактирование или просмотр (см. НоваяСтрукрураБюджетногоПериода())
//		* НачальныйПериод - бюджетный период, с которого начинается редактирование или просмотр (см. НоваяСтрукрураБюджетногоПериода())
//		* КоличествоПериодов - число, количество периодов в просмотре
//		* ВидПериодаСтрокой - Строка с именем вида периода в верхнем регистре (НЕДЕЛЯ, МЕСЯЦ и т.д.)
//		* Представление - Строка, представление набора периодов
//		* ПредставлениеКоличестваПериодов - Строка, например "2 месяца" или "4 года"
//
Функция НоваяСтруктураПросмотраБюджетныхПериодов(ВариантБюджета, НачальнаяДата = Неопределено, КоличествоПериодов = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(НачальнаяДата) Тогда
		НачальнаяДата = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КоличествоПериодов) Тогда
		КоличествоПериодов = 1;
	КонецЕсли;
	
	НачальныйПериод = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, НачальнаяДата);
	КонечныйПериод = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(НачальныйПериод);
	Если КоличествоПериодов > 1 Тогда
		БюджетированиеСервер.СдвинутьБюджетныйПериод(КонечныйПериод, ВариантБюджета, КоличествоПериодов - 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НачальныйПериод",     НачальныйПериод);
	Результат.Вставить("КонечныйПериод",      КонечныйПериод);
	Результат.Вставить("КоличествоПериодов",  КоличествоПериодов);
	
	Результат.Вставить("ВидПериодаСтрокой",           Врег(ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантБюджета.ДетальностьПланирования)));
	Результат.Вставить("НачалоПланированияВарианта",  ВариантБюджета.НачалоПланирования);

	// Представление периода
	Результат.Вставить("Представление", БюджетированиеКлиентСервер.ПредставлениеБюджетногоПериода(НачальныйПериод.Начало, 
						КонечныйПериод.Окончание, Результат.ВидПериодаСтрокой));
	
	// Представление количества периодов
	Результат.Вставить("ПредставлениеКоличестваПериодов", БюджетированиеКлиентСервер.ПредставлениеКоличестваБюджетныхПериодов(Результат.КоличествоПериодов, Результат.ВидПериодаСтрокой));
	
	Возврат Результат;

КонецФункции

// Возвращает компактное представление бюджетного периода в соответствие с заданным видом бюджетного периода
//
//Параметры:
//	Начало - Дата начала периода
//	Окончание - Дата окончания периода
//	Видпериода - ПеречислениеСсылка.ПериодичностьПланирования
//
//Возвразаемое значение
//	Строка - например. "Апрель 2015 г."
//
Функция ПредставлениеБюджетногоПериода(Знач Начало, Знач Окончание, Знач ВидПериода) Экспорт

	СтрокаГода = ?(Год(Начало) = Год(Окончание), "", "гггг");
	
	Если Не ЗначениеЗаполнено(Начало) И Не ЗначениеЗаполнено(Окончание) Тогда
		
		Возврат "[" + НСтр("ru='не задан'") + "]";
		
	ИначеЕсли Не ЗначениеЗаполнено(Начало) Или Не ЗначениеЗаполнено(Окончание) Тогда
		
		Возврат "[" + НСтр("ru='Некорректный период!'") + "]";
		
	ИначеЕсли ВидПериода = Перечисления.ПериодичностьПланирования.Неделя Тогда
		
		СтрокаГода = ?(СтрокаГода = "", "", "." + СтрокаГода);
		Возврат Формат(Начало, "ДФ='дд.ММ" + СтрокаГода + "'") + " - " + 
				Формат(Окончание, "ДФ='дд.ММ.гггг'");
		
	ИначеЕсли ВидПериода = Перечисления.ПериодичностьПланирования.Месяц Тогда
		
		Если НачалоМесяца(Начало) = НачалоМесяца(Окончание) И День(Начало) = 1 Тогда
			Возврат Формат(Начало, "ДФ='ММММ гггг '");
		ИначеЕсли День(Начало) = 1 Тогда
			Возврат Формат(Начало, "ДФ='ММММ " + СтрокаГода + "'") + " - " + 
					Формат(Окончание, "ДФ='ММММ гггг'");
		Иначе
			Возврат Формат(Начало, "ДФ='дд.ММ " + СтрокаГода + "'") + " - " + 
					Формат(Окончание, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
		
	ИначеЕсли ВидПериода = Перечисления.ПериодичностьПланирования.Квартал Тогда
		
		НачалоКалендарное = Начало = НачалоКвартала(Начало);
		Если НачалоКвартала(Начало) = НачалоКвартала(Окончание) И НачалоКалендарное Тогда
			Возврат Формат(Начало, "ДФ='к"" квартал"" гггг'");
		ИначеЕсли НачалоКалендарное Тогда
			Если СтрокаГода = "" Тогда
				Возврат Формат(Начало, "ДФ='к'") + " - " + 
						Формат(Окончание, "ДФ='к"" квартал"" гггг'");
			Иначе
				Возврат Формат(Начало, "ДФ='к"" квартал"" гггг'") + " - " + 
						Формат(Окончание, "ДФ='к"" квартал"" гггг'");
			КонецЕсли;
		Иначе
			Возврат Формат(Начало, "ДФ='дд.ММ " + СтрокаГода + "'") + " - " + 
					Формат(Окончание, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
				
			
	ИначеЕсли ВидПериода = Перечисления.ПериодичностьПланирования.Год Тогда
		
		НачалоКалендарное = День(Начало) = 1 И Месяц(Начало) = 1;
		Если НачалоГода(Начало) = НачалоГода(Окончание) И НачалоКалендарное Тогда
			Возврат Формат(Начало, "ДФ='гггг'");
		ИначеЕсли НачалоКалендарное Тогда
			Возврат Формат(Начало, "ДФ='гггг'") + " - " +
					Формат(Окончание, "ДФ='гггг'");
		Иначе
			Возврат Формат(Начало, "ДФ='дд.ММ.гггг'") + " - " + 
					Формат(Окончание, "ДФ='дд.ММ.гггг'");
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПредставлениеПериода(Начало, Окончание);
	
КонецФункции

// Возвращает дату календарного начала бюджетного периода, которая не зависит от указанного числа и месяца начала бюджетного периода.
//т.е. какое бы число (и номер месяца) не были заданы для начала бюджетного периода, его календарное начало всегда будет равным 
//календарному началу. Например, для бюджетного месяца, начинающегося с 10-го числа будет возвращаться НачалоМесяца(ДатаНачалаБюджетногоПериода),
//для бюджетного квартала, начинающегося с 15-го числа второго месяца будет возвращаться НачалоКвартала(ДатаНачалаБюджетногоПериода)
//для бюджетного года, начинающегося с 1-го марта будет возвращаться НачалоГода(ДатаНачалаБюджетногоПериода)
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	ДатаПериода - Дата - момент, принадлежащий бюджетному периоду
//
//Возвращаемое значение:
//	Дата - календарная дата начала бюджетного периода
//
Функция КалендарноеНачалоБюджетногоПериода(ВариантБюджета, ДатаПериода) Экспорт
	
	СтруктураПериода = НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
	Возврат СтруктураПериода.КалендарноеНачало;
	
КонецФункции

// Добавляет к дате заданное число указанных периодов
//
//Параметры:
//	Дата - дата, которую нужно изменить
//	ТипПериода - ПеречислениеСсылка.ПериодичностьПланирования - тип периода, который нужно добавить или вычесть
//	КоличествоПериодов - Число - количество добавляемых периодов. Отрицательное число - количество вычитаемых периодов
//
//Возвращаемое значение:
//	Дата, величенная (уменьшенная) на указанное количество периодов
//
Функция ДобавитьПериодУказанногоТипа(Дата, ТипПериода, КоличествоПериодов = 1) Экспорт

	Если ТипПериода = Перечисления.ПериодичностьПланирования.Месяц Тогда
		Возврат ДобавитьМесяц(Дата, 1 * КоличествоПериодов);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Квартал Тогда
		Возврат ДобавитьМесяц(Дата, 3 * КоличествоПериодов);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Год Тогда
		Возврат ДобавитьМесяц(Дата, 12 * КоличествоПериодов);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Неделя Тогда
		Возврат Дата + 604800 * КоличествоПериодов;
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.День Тогда
		Возврат Дата - 86400  * КоличествоПериодов;
	Иначе
		Возврат Дата;
	КонецЕсли;

КонецФункции

// Возвращает массив календарных начал периодов, заполненных показателями начиная с заданной даты
//Заполненным считается период, в котором указана хотя бы одна бюджетная статья назависимо от сумм
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	НачальнаяДата  - Дата - момент, принадлежащий бюджетному периоду, с котороно начинается проверка. Если не заполнено - с самого начала
//	КонечнаяДата   - Дата - момент, принадлежащий бюджетному периоду, до которого выполняется проверка. Если не заполнено - до бесконечности
//
//Возвращаемое значение:
//	Массив, заполненный датами начала бюджетных периодов
//
Функция ЗаполненныеПериодыБюджета(ВариантБюджета, Знач НачальнаяДата = Неопределено, Знач КонечнаяДата = Неопределено) Экспорт

	Если ЗначениеЗаполнено(НачальнаяДата) Тогда
		ПериодБюджета = НоваяСтрукрураБюджетногоПериода(ВариантБюджета, НачальнаяДата);
		НачальнаяДата = ПериодБюджета.КалендарноеНачало;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонечнаяДата) Тогда
		ПериодБюджета = НоваяСтрукрураБюджетногоПериода(ВариантБюджета, КонечнаяДата);
		КонечнаяДата = ПериодБюджета.КалендарноеОкончание + 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("НачальнаяДата", НачальнаяДата);
	Запрос.УстановитьПараметр("КонечнаяДата", КонечнаяДата);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И (&НачальнаяДата = НЕОПРЕДЕЛЕНО
	|			ИЛИ ПоказателиБюджета.НачалоПериода >= &НачальнаяДата)
	|	И (&КонечнаяДата = НЕОПРЕДЕЛЕНО
	|			ИЛИ ПоказателиБюджета.НачалоПериода < &КонечнаяДата)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НачалоПериода");

КонецФункции

// Сдвигает бюджетный период на указанное число периодов вперед или назад
//
//Параметры:
//	БюджетныйПериод - структура, результат НоваяСтрукрураБюджетногоПериода()
//	ЧислоПериодов - Число - подожительное, чтобы сдвинуть период вперед, отрицательное - для сдвига назад
//
Процедура СдвинутьБюджетныйПериод(БюджетныйПериод, ВариантБюджета, ЧислоПериодов) Экспорт
	
	Если Не ЗначениеЗаполнено(БюджетныйПериод.Начало) Или ЧислоПериодов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	БюджетныйПериод = НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДобавитьПериодУказанногоТипа(БюджетныйПериод.Начало, БюджетныйПериод.ТипПериода, ЧислоПериодов));
	
КонецПроцедуры

// Возвращает разницу между детальностью планирования 2-х вариантов бюджета: число, объясняющее, детальность какого варианта крупней
//
//Параметры:
//	Вариант1 - СправочникСсылка.ВариантыБюджетов - первый сравниваемый вариант
//	Вариант2 - СправочникСсылка.ВариантыБюджетов - второй сравниваемый вариант
//
//Возвращаемое значение:
//	Число - 0, если детальность планирования вариантов одинакова
//			>0, если детальность Варианта1 крупней детальности Варианта2 (например, Месяц > Неделя)
//			<0, если детальность Варианта1 мельче детальности Варианта2 (например, Неделя < Месяц)
//
Функция РазницаДетальностиВариантов(Вариант1, Вариант2) Экспорт

	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Вариант1);
	МассивСсылок.Добавить(Вариант2);
	
	СвойстваВариантов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, "ДетальностьПланирования");
	
	Возврат БюджетированиеКлиентСервер.РазностьПериодичностейПланирования(СвойстваВариантов[Вариант1].ДетальностьПланирования, СвойстваВариантов[Вариант2].ДетальностьПланирования);

КонецФункции

// Возвращает дату календарного начала из имеющихся в показателях бюджета для указанного варианта и раздела бюджета
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета
//	РазделБюджета - СправочникСсылка.ФинансовыеЦели или пустая строка
//	МаксимальнаяКалендарнаяДата - Дата, включая которую ведется поиск в регистре сведений "ПоказателиБюджета"
//
//Возвращаемое значение:
//	Дата - максимальная дата или значение параметра МаксимальнаяКалендарнаяДата
//
Функция МаксимальноеКалендарноеНачалоВарианта(ВариантБюджета, РазделБюджета, МаксимальнаяКалендарнаяДата) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("РазделБюджета", РазделБюджета);
	Запрос.УстановитьПараметр("МаксимальнаяКалендарнаяДата", МаксимальнаяКалендарнаяДата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПоказателиБюджета.НачалоПериода) КАК НачалоПериода
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И (&РазделБюджета = """" ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|	И ПоказателиБюджета.НачалоПериода <= &МаксимальнаяКалендарнаяДата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.НачалоПериода), Выборка.НачалоПериода, МаксимальнаяКалендарнаяДата);
	КонецЕсли;

	Возврат МаксимальнаяКалендарнаяДата;
	
КонецФункции

// Возвращает дату, которая соответствует самому раннему началу самой крупной детальности планирования, заданным в вариантах бюджетов
//
//Параметры:
//	ДатаБюджетногоПериода - дата, для которой проверяется начало самого раннего бюджетного периода
//
//Возвращаемое значение:
//	Дата или Неопределено
//
Функция МинимальнаяДатаВариантовБюджета(ДатаБюджетногоПериода) Экспорт

	Если Не ЗначениеЗаполнено(ДатаБюджетногоПериода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подзапрос.ДетальностьПланирования,
	|	МАКСИМУМ(ВариантыБюджетов.ЧислоМесяца) КАК ЧислоМесяца,
	|	МАКСИМУМ(ВариантыБюджетов.НомерМесяца) КАК НомерМесяца
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Детализации.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Месяц)
	|					ТОГДА 1
	|				КОГДА Детализации.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Квартал)
	|					ТОГДА 3
	|				КОГДА Детализации.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Год)
	|					ТОГДА 12
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ДетальностьПланирования
	|	ИЗ
	|		Справочник.ВариантыБюджетов КАК Детализации
	|	ГДЕ
	|		НЕ Детализации.ПометкаУдаления) КАК Подзапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыБюджетов КАК ВариантыБюджетов
	|		ПО (Подзапрос.ДетальностьПланирования = ВЫБОР
	|				КОГДА ВариантыБюджетов.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Месяц)
	|					ТОГДА 1
	|				КОГДА ВариантыБюджетов.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Квартал)
	|					ТОГДА 3
	|				КОГДА ВариантыБюджетов.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Год)
	|					ТОГДА 12
	|				ИНАЧЕ 0
	|			КОНЕЦ)
	|			И (НЕ ВариантыБюджетов.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Подзапрос.ДетальностьПланирования";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Или Не ЗначениеЗаполнено(Выборка.ДетальностьПланирования) Тогда
		Возврат ДатаБюджетногоПериода;
	КонецЕсли;
	
	ЧислоМесяца = ?(ЗначениеЗаполнено(ЧислоМесяца), ЧислоМесяца, 1);
	
	Если Выборка.ДетальностьПланирования = 1 Тогда
		Возврат НачалоМесяца(?(ЧислоМесяца = 1, ДатаБюджетногоПериода, ДобавитьМесяц(ДатаБюджетногоПериода, -1)));
	Иначе
		Если Выборка.НомерМесяца = 1 Тогда
			Возврат НачалоМесяца(?(ЧислоМесяца = 1, ДатаБюджетногоПериода, ДобавитьМесяц(ДатаБюджетногоПериода, -Выборка.ДетальностьПланирования)));
		Иначе
			Возврат НачалоМесяца(?(ЧислоМесяца = 1, ДатаБюджетногоПериода, ДобавитьМесяц(ДатаБюджетногоПериода, -Выборка.ДетальностьПланирования + Выборка.НомерМесяца)));
		КонецЕсли;
	КонецЕсли;

КонецФункции
 

#КонецОбласти 


// Возвращает массив граф бюджета, для которых не предусмотрено планирование по отдельным статьям
//
//Параметры:
//	Нет
//
//Возвращаемое значение:
//	Массив ссылок справочника "ГрафыБюджета"
//
Функция СписокГрафЗаменяющихСтатьи() Экспорт

	СписокГраф = Новый Массив;
	СписокГраф.Добавить(Справочники.ГрафыБюджета.ПокупкаИмущества);
	СписокГраф.Добавить(Справочники.ГрафыБюджета.ВыручкаЗаИмущество);
	СписокГраф.Добавить(Справочники.ГрафыБюджета.ВыдачаВзаймы);
	СписокГраф.Добавить(Справочники.ГрафыБюджета.ПолучениеКредита);

	Возврат СписокГраф;
	
КонецФункции

// Проверяет, есть ли статьи для варианта бюджета на указанны период
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	КалендарноеНачалоПериода - Дата (см. КалендарноеНачалоБюджетногоПериода()), на которую нужно проверить наличие статей
//
//Возвращаемое значение:
//	Булево - Истина, если на указанный период есть статьи и Ложь, если их нет
//
Функция СтатьиНаБюджетныйПериодЗаполнены(ВариантБюджета, КалендарноеНачалоПериода, РазделБюджета = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("КалендарноеНачало", КалендарноеНачалоПериода);
	Запрос.УстановитьПараметр("РазделБюджета", ?(РазделБюджета = Неопределено, "", РазделБюджета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоказателиБюджета.СтатьяБюджета) КАК РазныхСтатей
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И ПоказателиБюджета.НачалоПериода = &КалендарноеНачало
	|	И (&РазделБюджета = """"
	|			ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.РазныхСтатей) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Определяет и возвращает графу бюджета для указанной статьи
//
//Параметры:
//	СтатьяБюджета - СправочникСсылка - статья, для которой нужно определить графу бюджета
//	ТипПоказателя - ПеречислениеСсылка.ТипыБюджетныхПоказателей - поступление или списание
//	РазделБюджета - СправочникСсылка.ФинансовыеЦели - раздел, для которого определяется графа
//
//Возвращаемое значение:
//	СправочникСсылка.ГрафыБюджета
//
Функция ГрафаБюжетаДляСтатьи(СтатьяБюджета, ТипПоказателя, РазделБюджета) Экспорт

	ТипСтатьи = ТипЗнч(СтатьяБюджета);
	Если ТипСтатьи = Тип("СправочникСсылка.ГрафыБюджета") Тогда
		// Графа использована в качестве статьи - как группа подчиненных статей
		Возврат СтатьяБюджета;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.СтатьиДоходов") И ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление Тогда
		// Статьи доходов действительны только при типе показателя - поступление
		Возврат Справочники.ГрафыБюджета.Доходы;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.СтатьиРасходов") И ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание Тогда
		// Статьи расходов действительны только при типе показателя - списание
		Возврат Справочники.ГрафыБюджета.Расходы;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.Имущество") Тогда
		
		Возврат ?(ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление, 
				Справочники.ГрафыБюджета.ВыручкаЗаИмущество, Справочники.ГрафыБюджета.ПокупкаИмущества);
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		// Кошельки и счета могут использоваться только как кредитные карты
		Если ЗначениеЗаполнено(СтатьяБюджета) И СтатьяБюджета.ТипСчета = Перечисления.ТипыСчетов.БанковскаяКартаКредитная Тогда
			Возврат ?(ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление, 
					Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты, Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.Долги") Тогда
		// Графа зависит от типа долга
		
		Если ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление Тогда
			// Чистый кредит - это получение кредита. Все остальное - как возврат от должников
			Возврат ?(СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов И Не СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов,
					Справочники.ГрафыБюджета.ПолучениеКредита, Справочники.ГрафыБюджета.ВозвратВыданногоЗайма);
		Иначе
			// Чистый заем - это выдача взаймы. Все остальное - как погашение кредитов
			Возврат ?(Не СтатьяБюджета.ИспользоватьДляУчетаВзятыхДолгов И СтатьяБюджета.ИспользоватьДляУчетаВыданныхДолгов,
					Справочники.ГрафыБюджета.ВыдачаВзаймы, Справочники.ГрафыБюджета.ПогашениеКредита);
		КонецЕсли;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.ФинансовыеЦели") Тогда
		// Графа для накоплений зависит от раздела бюджета
		
		Если ЗначениеЗаполнено(РазделБюджета) Тогда
			// Раздел накоплений на финансовую цель
			Возврат ?(ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление, 
				Справочники.ГрафыБюджета.ФинЦельПереводВНакопление, Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления);
			
		Иначе
			// Раздел свободных денег
			Возврат ?(ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление, 
				Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления, Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление);
			
		КонецЕсли;
		
	ИначеЕсли ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление Тогда
		
		Возврат Справочники.ГрафыБюджета.ПрочиеДоходы;
		
	ИначеЕсли ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание Тогда
		
		Возврат Справочники.ГрафыБюджета.ПрочиеРасходы;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Добавляет во все варианты бюджета новый раздел (финансовую цель) в текущий и последующие периоды
//
//Параметры:
//	ОбъектЦель- СправочникОбъект.ФинансовыеЦели
//
Процедура ДобавитьРазделВПоказателиБюджета(ОбъектЦель) Экспорт 
	
	НаборЗаписей = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
	
	ТаблицаЗаписей = НаборЗаписей.ВыгрузитьКолонки();
	
	// Перевод в накопления из свободных денег
	СтрокаТаблицы = ТаблицаЗаписей.Добавить();
	СтрокаТаблицы.РазделБюджета = ОбъектЦель.Ссылка;
	СтрокаТаблицы.ГрафаБюджета  = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление;
	СтрокаТаблицы.ТипПоказателя = СтрокаТаблицы.ГрафаБюджета.ТипПоказателя;
	СтрокаТаблицы.СтатьяБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка();
	
	Если ОбъектЦель.Ссылка <> Справочники.ФинансовыеЦели.ОбщиеНакопления Тогда
		
		// Перевод в накопления из общих накоплений
		СтрокаТаблицы = ТаблицаЗаписей.Добавить();
		СтрокаТаблицы.РазделБюджета = ОбъектЦель.Ссылка;
		СтрокаТаблицы.ГрафаБюджета  = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление;
		СтрокаТаблицы.ТипПоказателя = СтрокаТаблицы.ГрафаБюджета.ТипПоказателя;
		СтрокаТаблицы.СтатьяБюджета = Справочники.ФинансовыеЦели.ОбщиеНакопления;
		
	КонецЕсли;
	
	// Другие доходы
	СтрокаТаблицы = ТаблицаЗаписей.Добавить();
	СтрокаТаблицы.РазделБюджета = ОбъектЦель.Ссылка;
	СтрокаТаблицы.ГрафаБюджета  = Справочники.ГрафыБюджета.ПрочиеДоходы;
	СтрокаТаблицы.ТипПоказателя = СтрокаТаблицы.ГрафаБюджета.ТипПоказателя;
	СтрокаТаблицы.СтатьяБюджета = СтрокаТаблицы.ГрафаБюджета;
	
	// Возврат накоплений в свободные деньги
	СтрокаТаблицы = ТаблицаЗаписей.Добавить();
	СтрокаТаблицы.РазделБюджета = ОбъектЦель.Ссылка;
	СтрокаТаблицы.ГрафаБюджета  = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления;
	СтрокаТаблицы.ТипПоказателя = СтрокаТаблицы.ГрафаБюджета.ТипПоказателя;
	СтрокаТаблицы.СтатьяБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка();
	
	Если ОбъектЦель.Ссылка <> Справочники.ФинансовыеЦели.ОбщиеНакопления Тогда
		
		// Перевод накоплений в накопления без указания цели
		СтрокаТаблицы = ТаблицаЗаписей.Добавить();
		СтрокаТаблицы.РазделБюджета = ОбъектЦель.Ссылка;
		СтрокаТаблицы.ГрафаБюджета  = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления;
		СтрокаТаблицы.ТипПоказателя = СтрокаТаблицы.ГрафаБюджета.ТипПоказателя;
		СтрокаТаблицы.СтатьяБюджета = Справочники.ФинансовыеЦели.ОбщиеНакопления;
		
	КонецЕсли;
	
	// Другие расходы
	СтрокаТаблицы = ТаблицаЗаписей.Добавить();
	СтрокаТаблицы.РазделБюджета = ОбъектЦель.Ссылка;
	СтрокаТаблицы.ГрафаБюджета  = Справочники.ГрафыБюджета.ПрочиеРасходы;
	СтрокаТаблицы.ТипПоказателя = СтрокаТаблицы.ГрафаБюджета.ТипПоказателя;
	СтрокаТаблицы.СтатьяБюджета = СтрокаТаблицы.ГрафаБюджета;
	
	ДатаПериода = ТекущаяДатаСеанса();
	
	ВыборкаВариантов = Справочники.ВариантыБюджетов.Выбрать();
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ТаблицаЗаписей.ЗаполнитьЗначения(ВыборкаВариантов.Ссылка, "ВариантБюджета");
		
		СписокПериодов = БюджетированиеСервер.ЗаполненныеПериодыБюджета(ВыборкаВариантов.Ссылка, ДатаПериода);
		Для каждого Период Из СписокПериодов Цикл
			
			ТаблицаЗаписей.ЗаполнитьЗначения(Период, "НачалоПериода");
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.ВариантБюджета.Установить(ВыборкаВариантов.Ссылка);
			НаборЗаписей.Отбор.РазделБюджета.Установить(ОбъектЦель.Ссылка);
			НаборЗаписей.Отбор.НачалоПериода.Установить(Период);
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
			
			ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(НаборЗаписей, ОбъектЦель);
			Если ОбъектЦель.ДополнительныеСвойства.Свойство("УдалятьРегистрацию") И ОбъектЦель.ДополнительныеСвойства.УдалятьРегистрацию Тогда
				УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(НаборЗаписей.ДополнительныеСвойства.УзелКорреспондента, НаборЗаписей);
			Иначе
				УдалятьРегистрацию = Ложь;
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
			Если УдалятьРегистрацию Тогда
				УдалитьРегистрациюНабораЗаписейИзОбмена(ОбъектЦель.ДополнительныеСвойства.УзелКорреспондента, НаборЗаписей);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет из всех заполненных вариантов бюджета раздел (указанную финансовую цель)
//
//Параметры:
//	ОбъектЦель- СправочникОбъект.ФинансовыеЦели
//
Процедура УдалитьРазделИзПоказателейБюджета(ОбъектЦель) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
	ДатаПериода = ТекущаяДатаСеанса();
	
	ВыборкаВариантов = Справочники.ВариантыБюджетов.Выбрать();
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ВыбркаОтборов = ОтборыВариантаБюджетаПоРазделу(ВыборкаВариантов.Ссылка, ОбъектЦель.Ссылка, 
						БюджетированиеСервер.ДобавитьПериодУказанногоТипа(ДатаПериода, ВыборкаВариантов.ДетальностьПланирования, 1)); // удаляем раздел только из будущих периодов
		НачДата = Неопределено;
		
		Пока ВыбркаОтборов.Следующий() Цикл
			
			Если НачДата = Неопределено Тогда
				НачДата = ВыбркаОтборов.НачалоПериода;
			КонецЕсли;
			
			НаборЗаписей.Отбор.ВариантБюджета.Установить(ВыборкаВариантов.Ссылка);
			НаборЗаписей.Отбор.РазделБюджета.Установить(ОбъектЦель.Ссылка);
			НаборЗаписей.Отбор.НачалоПериода.Установить(ВыбркаОтборов.НачалоПериода);
			
			Если ОбъектЦель.ДополнительныеСвойства.Свойство("УдалятьРегистрацию") И ОбъектЦель.ДополнительныеСвойства.УдалятьРегистрацию Тогда
				УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(НаборЗаписей.ДополнительныеСвойства.УзелКорреспондента, НаборЗаписей);
			Иначе
				УдалятьРегистрацию = Ложь;
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
			Если УдалятьРегистрацию Тогда
				УдалитьРегистрациюНабораЗаписейИзОбмена(ОбъектЦель.ДополнительныеСвойства.УзелКорреспондента, НаборЗаписей);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НачДата <> Неопределено Тогда
			ПроверитьПеремещенияПоРазделамБюджета(ВыборкаВариантов.Ссылка, ОбъектЦель.Ссылка, НачДата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет статью в показатели бюджета в текущем и будущих периодах
//
//Параметры:
//	ОбъектСтатьи - СправочникСсылка
//
Процедура ДобавитьСтатьюВПоказателиБюджетов(ОбъектСтатьи) Экспорт
	
	ТипСтатьи = ТипЗнч(ОбъектСтатьи.Ссылка);
	
	// Оперделяем список граф для указанной статьи бюджета
	СписокГраф    = Новый Массив;
	ВоВсеРазделы  = Ложь;
	Если ТипСтатьи = Тип("СправочникСсылка.Долги") Тогда
		
		Если ОбъектСтатьи.ИспользоватьДляУчетаВзятыхДолгов Тогда
			СписокГраф.Добавить(Справочники.ГрафыБюджета.ПогашениеКредита);
		КонецЕсли;
		Если ОбъектСтатьи.ИспользоватьДляУчетаВыданныхДолгов Тогда
			СписокГраф.Добавить(Справочники.ГрафыБюджета.ВозвратВыданногоЗайма);
		КонецЕсли;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		
		СписокГраф.Добавить(Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты);
		СписокГраф.Добавить(Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту);
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.ФинансовыеЦели") Тогда
		
		СписокГраф.Добавить(Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления);
		СписокГраф.Добавить(Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление);
		СписокГраф.Добавить(Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления);
		СписокГраф.Добавить(Справочники.ГрафыБюджета.ФинЦельПереводВНакопление);
		
		ВоВсеРазделы = Истина;
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.СтатьиДоходов") Тогда
		
		СписокГраф.Добавить(Справочники.ГрафыБюджета.Доходы);
		
	ИначеЕсли ТипСтатьи = Тип("СправочникСсылка.СтатьиРасходов") Тогда
		
		СписокГраф.Добавить(Справочники.ГрафыБюджета.Расходы);
		
	КонецЕсли;
	
	ДатаПериода = ТекущаяДатаСеанса();
	
	ВыборкаВариантов = Справочники.ВариантыБюджетов.Выбрать();
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ВыборкаОтборов = ОтборыВариантаБюджета(ВыборкаВариантов.Ссылка, ДатаПериода, ВоВсеРазделы);
		Если ВыборкаОтборов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаОтборов.Следующий() Цикл
			
			Если ВоВсеРазделы И ВыборкаОтборов.Разделбюджета = ОбъектСтатьи.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ГрафаБюджета Из СписокГраф Цикл
				Если ЗначениеЗаполнено(ГрафаБюджета) Тогда
					
					НаборПоказателя = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
					НаборПоказателя.Отбор.ВариантБюджета.Установить(ВыборкаОтборов.ВариантБюджета);
					НаборПоказателя.Отбор.НачалоПериода.Установить(ВыборкаОтборов.НачалоПериода);
					НаборПоказателя.Отбор.РазделБюджета.Установить(ВыборкаОтборов.РазделБюджета);
					НаборПоказателя.Отбор.ГрафаБюджета.Установить(ГрафаБюджета);
					НаборПоказателя.Отбор.ТипПоказателя.Установить(ГрафаБюджета.ТипПоказателя);
					НаборПоказателя.Отбор.СтатьяБюджета.Установить(ОбъектСтатьи.Ссылка);
					
					НаборПоказателя.Прочитать();
					
					ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(НаборПоказателя, ОбъектСтатьи);
					Если НаборПоказателя.ДополнительныеСвойства.Свойство("УдалятьРегистрацию") И НаборПоказателя.ДополнительныеСвойства.УдалятьРегистрацию Тогда
						УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(НаборПоказателя.ДополнительныеСвойства.УзелКорреспондента, НаборПоказателя);
					Иначе
						УдалятьРегистрацию = Ложь;
					КонецЕсли;
					
					Если Не НаборПоказателя.Выбран() Тогда
						
						ЗаписьПоказателя = НаборПоказателя.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьПоказателя, ВыборкаОтборов);
						ЗаписьПоказателя.ГрафаБюджета = ГрафаБюджета;
						ЗаписьПоказателя.СтатьяБюджета = ОбъектСтатьи.Ссылка;
						ЗаписьПоказателя.Порядок = ?(ЗначениеЗаполнено(ВыборкаОтборов.Порядок), ВыборкаОтборов.Порядок + 1, 1);
						
						НаборПоказателя.Записать(Истина);
						
					КонецЕсли;
					
					Если УдалятьРегистрацию Тогда
						ПланыОбмена.УдалитьРегистрациюИзменений(НаборПоказателя.ДополнительныеСвойства.УзелКорреспондента, НаборПоказателя);
					КонецЕсли;
					
					НаборСостава = РегистрыСведений.СоставСтатейБюджета.СоздатьНаборЗаписей();
					НаборСостава.Отбор.ВариантБюджета.Установить(ВыборкаОтборов.ВариантБюджета);
					НаборСостава.Отбор.РазделБюджета.Установить(ВыборкаОтборов.РазделБюджета);
					НаборСостава.Отбор.ГрафаБюджета.Установить(ГрафаБюджета);
					НаборСостава.Отбор.СтатьяБюджета.Установить(ОбъектСтатьи.Ссылка);
					
					НаборСостава.Прочитать();
					
					ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(НаборСостава, ОбъектСтатьи);
					НаборСостава.ДополнительныеСвойства.Вставить("НеОбновлятьПорядокВПоказателях", Истина);
					
					Если Не НаборСостава.Выбран() Тогда
						
						ЗаписьСтатьи = НаборСостава.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьСтатьи, ВыборкаОтборов);
						ЗаписьСтатьи.ГрафаБюджета  = ГрафаБюджета;
						ЗаписьСтатьи.СтатьяБюджета = ОбъектСтатьи.Ссылка;
						ЗаписьСтатьи.Порядок = ЗаписьПоказателя.Порядок;
						ЗаписьСтатьи.Видимость = Истина;
						
						НаборСостава.Записать(Истина);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
КонецПроцедуры

// Удаляет статью из показателей бюджета в будущих периодах
//
//Параметры:
//	ОбъектСтатьи - СправочникОбъект
//
Процедура УдалитьСтатьюИзПоказателейБюджетов(ОбъектСтатьи) Экспорт
	
	ТипСтатьи = ТипЗнч(ОбъектСтатьи.Ссылка);
	
	ДатаПериода = ТекущаяДатаСеанса();
	
	ВыборкаВариантов = Справочники.ВариантыБюджетов.Выбрать();
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ВыборкаЗаписей = ПоказателиВариантаБюджетаПоСтатье(ВыборкаВариантов.Ссылка, ОбъектСтатьи.Ссылка, 
						БюджетированиеСервер.ДобавитьПериодУказанногоТипа(ДатаПериода, ВыборкаВариантов.ДетальностьПланирования, 1)); // удаляем статью только из будущих периодов
		Если ВыборкаЗаписей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			НаборПоказателя = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
			НаборПоказателя.Отбор.ВариантБюджета.Установить(ВыборкаЗаписей.ВариантБюджета);
			НаборПоказателя.Отбор.НачалоПериода.Установить(ВыборкаЗаписей.НачалоПериода);
			НаборПоказателя.Отбор.СтатьяБюджета.Установить(ВыборкаЗаписей.СтатьяБюджета);
			
			ОбщегоНазначенияДеньги.СкопироватьДополнительныеПараметрыОбъекта(НаборПоказателя, ОбъектСтатьи);
			Если НаборПоказателя.ДополнительныеСвойства.Свойство("УдалятьРегистрацию") И НаборПоказателя.ДополнительныеСвойства.УдалятьРегистрацию Тогда
				УдалятьРегистрацию = Не ПланыОбмена.ИзменениеЗарегистрировано(НаборПоказателя.ДополнительныеСвойства.УзелКорреспондента, НаборПоказателя);
			Иначе
				УдалятьРегистрацию = Ложь;
			КонецЕсли;
			
			НаборПоказателя.Записать(Истина);
			
			Если УдалятьРегистрацию Тогда
				УдалитьРегистрациюНабораЗаписейИзОбмена(НаборПоказателя.ДополнительныеСвойства.УзелКорреспондента, НаборПоказателя);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборСостава = РегистрыСведений.СоставСтатейБюджета.СоздатьНаборЗаписей();
	НаборСостава.Отбор.СтатьяБюджета.Установить(ОбъектСтатьи.Ссылка);
	НаборСостава.ДополнительныеСвойства.Вставить("НеОбновлятьПорядокВПоказателях", Истина);
	
	НаборСостава.Записать(Истина);
	
КонецПроцедуры

// Устарела. 
//Обновляет состав статей бюджета в указанном и будущих периодах с учетом ранее запланированных сумм.
//т.е. по статьям, с которых убрана видимость суммы будут перенесены на видимые родительские статьи или на
//статьи "другие доходы", "другие расходы"
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	РазделБюджета - ФинансоваяЦель
//	ДатаПериода - Дата, начиная с которой нужно изменить состав статей
//	ТаблицаСостава - ТаблицаЗначений, полностью повторяет состав колонок РС ПоказателиБюджета и имеет еще 2 колонки:
//					* Видимость - Булево - признак видимости статьи в бюджете
//					* ВидимыйРодитель - ссылка на родительскую статью, выводимую в бюджете
//
Процедура ОбновитьСоставСтатейВариантаБюджета(ВариантБюджета, РазделБюджета, ДатаПериода, ТаблицаСостава, КопироватьНаБудущиеПериоды = Неопределено) Экспорт
	
	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
	Если КопироватьНаБудущиеПериоды = Неопределено Тогда
		// По умолчанию копируем на будущие периоды только изменения в текущем или будущих периодах
		КопироватьНаБудущиеПериоды = ПериодБюджета.Окончание > НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("РазделБюджета", РазделБюджета);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодБюджета.КалендарноеНачало);
	Запрос.УстановитьПараметр("КопироватьНаБудущиеПериоды", КопироватьНаБудущиеПериоды);
	Запрос.УстановитьПараметр("ТаблицаСостава", ТаблицаСостава);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСостава.ВариантБюджета,
	|	&ДатаНачала КАК НачалоПериода,
	|	ТаблицаСостава.РазделБюджета,
	|	ТаблицаСостава.ГрафаБюджета,
	|	ТаблицаСостава.ТипПоказателя,
	|	ТаблицаСостава.СтатьяБюджета,
	|	ТаблицаСостава.Порядок,
	|	ТаблицаСостава.Видимость,
	|	ТаблицаСостава.ВидимыйРодитель
	|ПОМЕСТИТЬ ТаблицаИзменений
	|ИЗ
	|	&ТаблицаСостава КАК ТаблицаСостава
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Видимость,
	|	ТаблицаИзменений.ВидимыйРодитель,
	|	ТаблицаИзменений.ВариантБюджета,
	|	ЕСТЬNULL(Периоды.НачалоПериода, ТаблицаИзменений.НачалоПериода) КАК НачалоПериода,
	|	ТаблицаИзменений.РазделБюджета,
	|	ТаблицаИзменений.ГрафаБюджета,
	|	ТаблицаИзменений.ТипПоказателя,
	|	ТаблицаИзменений.СтатьяБюджета,
	|	ЕСТЬNULL(ПоказателиБюджета.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ПоказателиБюджета.Порядок, ТаблицаИзменений.Порядок) КАК Порядок,
	|	ЕСТЬNULL(ПоказателиБюджета.Комментарий, """") КАК Комментарий
	|ИЗ
	|	ТаблицаИзменений КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Периоды.ВариантБюджета КАК ВариантБюджета,
	|			Периоды.РазделБюджета КАК РазделБюджета,
	|			Периоды.НачалоПериода КАК НачалоПериода
	|		ИЗ
	|			РегистрСведений.ПоказателиБюджета КАК Периоды
	|		ГДЕ
	|			Периоды.ВариантБюджета = &ВариантБюджета
	|			И Периоды.РазделБюджета = &РазделБюджета
	|			И (Периоды.НачалоПериода = &ДатаНачала ИЛИ &КопироватьНаБудущиеПериоды И Периоды.НачалоПериода >= &ДатаНачала)
	|			) КАК Периоды
	|		ПО ТаблицаИзменений.ВариантБюджета = Периоды.ВариантБюджета
	|			И ТаблицаИзменений.РазделБюджета = Периоды.РазделБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО ТаблицаИзменений.ВариантБюджета = ПоказателиБюджета.ВариантБюджета
	|			И ТаблицаИзменений.РазделБюджета = ПоказателиБюджета.РазделБюджета
	|			И ТаблицаИзменений.ГрафаБюджета = ПоказателиБюджета.ГрафаБюджета
	|			И ТаблицаИзменений.СтатьяБюджета = ПоказателиБюджета.СтатьяБюджета
	|			И (Периоды.НачалоПериода = ПоказателиБюджета.НачалоПериода)
	|ГДЕ
	|	(ТаблицаИзменений.Видимость
	|			ИЛИ ЕСТЬNULL(ПоказателиБюджета.Сумма, 0) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода
	|ИТОГИ ПО
	|	НачалоПериода";
	
	СтрокаДругиеДоходы  = Неопределено;
	СтрокаДругиеРасходы = Неопределено;
	
	ВыборкаПериодов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НачалоПериода");
	Пока ВыборкаПериодов.Следующий() Цикл
		
		ТаблицаЗаписей  = ТаблицаСостава.СкопироватьКолонки();
		ТаблицаУдалений = ТаблицаСостава.СкопироватьКолонки();
		
		// Заполняем таблицы записей и выключенный статей
		Выборка = ВыборкаПериодов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Видимость Тогда
				СтрокаТаблицы = ТаблицаЗаписей.Добавить();
			Иначе
				СтрокаТаблицы = ТаблицаУдалений.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			
			Если СтрокаТаблицы.СтатьяБюджета = Справочники.ГрафыБюджета.ПрочиеДоходы Тогда
				СтрокаДругиеДоходы = СтрокаТаблицы
			ИначеЕсли СтрокаТаблицы.СтатьяБюджета = Справочники.ГрафыБюджета.ПрочиеРасходы Тогда
				СтрокаДругиеРасходы = СтрокаТаблицы
			КонецЕсли;
			
		КонецЦикла;
		
		// Переносим суммы с отключенных статей на их родителей
		Для каждого СтрокаТаблицы Из ТаблицаУдалений Цикл
			
			СтрокаРодителя = Неопределено;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидимыйРодитель) Тогда
				НайденыеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("РазделБюджета,ГрафаБюджета,СтатьяБюджета", 
							СтрокаТаблицы.РазделБюджета, СтрокаТаблицы.ГрафаБюджета, СтрокаТаблицы.ВидимыйРодитель));
				Если НайденыеСтроки.Количество() > 0 Тогда
					СтрокаРодителя = НайденыеСтроки[0];
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаРодителя = Неопределено Тогда
				СтрокаРодителя = ?(СтрокаТаблицы.ГрафаБюджета.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление, СтрокаДругиеДоходы, СтрокаДругиеРасходы);
			КонецЕсли;
			
			Если СтрокаРодителя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРодителя.Сумма = СтрокаРодителя.Сумма + СтрокаТаблицы.Сумма;
			
		КонецЦикла;
		
		// Записываем набор показателей
		ТаблицаЗаписей.ЗаполнитьЗначения(ВыборкаПериодов.НачалоПериода, "НачалоПериода");
		Набор = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
		Набор.Отбор.ВариантБюджета.Установить(ВариантБюджета);
		Набор.Отбор.НачалоПериода.Установить(ВыборкаПериодов.НачалоПериода);
		Набор.Отбор.РазделБюджета.Установить(РазделБюджета);
		Набор.Загрузить(ТаблицаЗаписей);
		Набор.Записать(Истина);
		
	КонецЦикла;
	
	// в других разделах учета могли остаться перемещения по финансовым целям, удаленным из состава
	ПроверитьПеремещенияПоРазделамБюджета(ВариантБюджета, РазделБюджета, ПериодБюджета.КалендарноеНачало);
	
КонецПроцедуры

// Полностью обновляет содержимое регистра сведений "КлючиСтатей"
//	Каждому эдементу всех справочников присваивается уникальный ключ, с помощью которого осуществляется получение 
//	подчиненных и родительских элементов без использования циклов и без соединения справочников с самими собой
// Используется в выборках бюджетных показателей и в сопоставлении фактических оборотов по статаьям с планами в бюджете.
// Ключи статей не влияют на данные учета, не подлежат обмену между узлами и могут быть обновлены в любой момент времени.
Процедура ОбновитьВсеКлючиСтатейБюджета() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спр.Ссылка,
	|	Спр.Родитель КАК РодительскаяСтатья,
	|	""СтатьяРасходов"" КАК ТипСтатьи,
	|	ЛОЖЬ КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.СтатьиРасходов КАК Спр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка ИЕРАРХИЯ
	|;
	|
	|//1//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спр.Ссылка,
	|	Спр.Родитель КАК РодительскаяСтатья,
	|	""СтатьяДоходов"" КАК ТипСтатьи,
	|	ЛОЖЬ КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.СтатьиДоходов КАК Спр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка ИЕРАРХИЯ
	|;
	|
	|//2//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спр.Ссылка,
	|	Спр.Родитель КАК РодительскаяСтатья,
	|	""Контакт"" КАК ТипСтатьи,
	|	ИСТИНА КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.Контакты КАК Спр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка ИЕРАРХИЯ
	|;
	|
	|//3//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спр.Ссылка,
	|	Спр.Родитель КАК РодительскаяСтатья,
	|	ВЫБОР
	|		КОГДА Спр.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|			ТОГДА ""КредитнаяКарта""
	|		ИНАЧЕ ""Кошелек""
	|	КОНЕЦ КАК ТипСтатьи,
	|	ВЫБОР
	|		КОГДА Спр.ЭтоГруппа
	|				И Спр.ТипСчета <> ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.КошелькиИСчета КАК Спр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка ИЕРАРХИЯ
	|;
	|
	|//4//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спр.Ссылка,
	|	Спр.Родитель КАК РодительскаяСтатья,
	|	""Имущество"" КАК ТипСтатьи,
	|	ИСТИНА КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.Имущество КАК Спр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка ИЕРАРХИЯ
	|;
	|
	|//5//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спр.Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК РодительскаяСтатья,
	|	""ДолгНам"" КАК ТипСтатьи,
	|	ЛОЖЬ КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.Долги КАК Спр
	|ГДЕ
	|	Спр.ИспользоватьДляУчетаВыданныхДолгов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка
	|;
	|
	|//6//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спр.Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК РодительскаяСтатья,
	|	""НашДолг"" КАК ТипСтатьи,
	|	ЛОЖЬ КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.Долги КАК Спр
	|ГДЕ
	|	Спр.ИспользоватьДляУчетаВзятыхДолгов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка
	|;
	|
	|//7//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спр.Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК РодительскаяСтатья,
	|	""Финцель"" КАК ТипСтатьи,
	|	ЛОЖЬ КАК ИсключатьИзБюджета
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК Спр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Ссылка
	|";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	// Очищаем регистр сведений
	Набор = РегистрыСведений.КлючиСтатей.СоздатьНаборЗаписей();
	Набор.Записать(Истина);
	
	Для Счетчик = 0 По ПакетРезультатов.Количество() - 1 Цикл
		
		Если Счетчик >= 5 Тогда
			ЗаписатьКлючиСтатейБюджета(ПакетРезультатов[Счетчик].Выгрузить(), 
					Неопределено, "", Ложь);
		Иначе
			ЗаписатьКлючиСтатейБюджета(ПакетРезультатов[Счетчик].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки, 
					Неопределено, "", Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Проверяет наличие статей, которые не должны удяляться из состава показателей бюджета
//
//Параметры:
//	нет
//
Процедура ПроверитьНаличиеОбязательныхСтатей() Экспорт
	
	Запрос = Новый Запрос;
	
	ГрафыНакоплений = Новый Массив;
	ГрафыНакоплений.Добавить(Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления);
	ГрафыНакоплений.Добавить(Справочники.ГрафыБюджета.ФинЦельПереводВНакопление);
	ГрафыНакоплений.Добавить(Справочники.ГрафыБюджета.ПрочиеДоходы);
	ГрафыНакоплений.Добавить(Справочники.ГрафыБюджета.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ГрафыНакоплений", ГрафыНакоплений);
	
	ГрафыСвободныхДенег = Новый Массив;
	ГрафыСвободныхДенег.Добавить(Справочники.ГрафыБюджета.Доходы);
	ГрафыСвободныхДенег.Добавить(Справочники.ГрафыБюджета.Расходы);
	ГрафыСвободныхДенег.Добавить(Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления);
	ГрафыСвободныхДенег.Добавить(Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление);
	ГрафыСвободныхДенег.Добавить(Справочники.ГрафыБюджета.ПрочиеДоходы);
	ГрафыСвободныхДенег.Добавить(Справочники.ГрафыБюджета.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ГрафыСвободныхДенег", ГрафыСвободныхДенег);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подзапрос.ВариантБюджета КАК ВариантБюджета,
	|	Подзапрос.РазделБюджета КАК РазделБюджета,
	|	Подзапрос.ГрафаБюджета КАК ГрафаБюджета
	|ПОМЕСТИТЬ ОбязательныеГрафы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подзапрос.ВариантБюджета КАК ВариантБюджета,
	|		Подзапрос.РазделБюджета КАК РазделБюджета,
	|		ГрафыБюджета.Ссылка КАК ГрафаБюджета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВариантыБюджетов.Ссылка КАК ВариантБюджета,
	|			ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка) КАК РазделБюджета
	|		ИЗ
	|			Справочник.ВариантыБюджетов КАК ВариантыБюджетов
	|		ГДЕ
	|			ВариантыБюджетов.Активность
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВариантыБюджетов.Ссылка,
	|			ФинансовыеЦели.Ссылка
	|		ИЗ
	|			Справочник.ФинансовыеЦели КАК ФинансовыеЦели,
	|			Справочник.ВариантыБюджетов КАК ВариантыБюджетов
	|		ГДЕ
	|			ВариантыБюджетов.Активность
	|			И ФинансовыеЦели.Активность) КАК Подзапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафыБюджета КАК ГрафыБюджета
	|			ПО (ВЫБОР
	|					КОГДА Подзапрос.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка)
	|						ТОГДА ГрафыБюджета.Ссылка В (&ГрафыСвободныхДенег)
	|					ИНАЧЕ ГрафыБюджета.Ссылка В (&ГрафыНакоплений)
	|				КОНЕЦ)) КАК Подзапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВариантБюджета,
	|	РазделБюджета,
	|	ГрафаБюджета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиБюджета.ВариантБюджета КАК ВариантБюджета,
	|	ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода
	|ПОМЕСТИТЬ ПериодыБюджетов
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета.Активность
	|	И ЕСТЬNULL(ПоказателиБюджета.РазделБюджета.Активность, ИСТИНА)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВариантБюджета,
	|	РазделБюджета,
	|	НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подзапрос.ВариантБюджета КАК ВариантБюджета,
	|	Подзапрос.РазделБюджета КАК РазделБюджета,
	|	Подзапрос.НачалоПериода КАК НачалоПериода,
	|	Подзапрос.ГрафаБюджета КАК ГрафаБюджета,
	|	Подзапрос.КоличествоГраф КАК КоличествоГраф
	|ИЗ
	|	(ВЫБРАТЬ
	|		Подзапрос.ВариантБюджета КАК ВариантБюджета,
	|		Подзапрос.РазделБюджета КАК РазделБюджета,
	|		Подзапрос.НачалоПериода КАК НачалоПериода,
	|		Подзапрос.ГрафаБюджета КАК ГрафаБюджета,
	|		СУММА(ВЫБОР
	|				КОГДА ПоказателиБюджета.ГрафаБюджета ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК КоличествоГраф
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыБюджетов.ВариантБюджета КАК ВариантБюджета,
	|			ПериодыБюджетов.РазделБюджета КАК РазделБюджета,
	|			ПериодыБюджетов.НачалоПериода КАК НачалоПериода,
	|			ОбязательныеГрафы.ГрафаБюджета КАК ГрафаБюджета,
	|			ОбязательныеГрафы.ГрафаБюджета.ОтношениеКНакоплениям КАК ОтношениеКНакоплениям
	|		ИЗ
	|			ПериодыБюджетов КАК ПериодыБюджетов
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбязательныеГрафы КАК ОбязательныеГрафы
	|				ПО ПериодыБюджетов.ВариантБюджета = ОбязательныеГрафы.ВариантБюджета
	|					И ПериодыБюджетов.РазделБюджета = ОбязательныеГрафы.РазделБюджета) КАК Подзапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|			ПО Подзапрос.ВариантБюджета = ПоказателиБюджета.ВариантБюджета
	|				И Подзапрос.НачалоПериода = ПоказателиБюджета.НачалоПериода
	|				И Подзапрос.РазделБюджета = ПоказателиБюджета.РазделБюджета
	|				И Подзапрос.ГрафаБюджета = ПоказателиБюджета.ГрафаБюджета
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Подзапрос.ВариантБюджета,
	|		Подзапрос.РазделБюджета,
	|		Подзапрос.НачалоПериода,
	|		Подзапрос.ГрафаБюджета) КАК Подзапрос
	|ГДЕ
	|	Подзапрос.КоличествоГраф = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подзапрос.ВариантБюджета,
	|	Подзапрос.РазделБюджета,
	|	Подзапрос.НачалоПериода,
	|	Подзапрос.ГрафаБюджета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ИЗ (ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка) КАК Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФинансовыеЦели.Ссылка
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК ФинансовыеЦели
	|ГДЕ
	|	ФинансовыеЦели.Активность
	|) КАК Подзапрос";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	СписокЦелей = ПакетРезультатов[3].Выгрузить();
	
	Выборка = ПакетРезультатов[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ГрафаБюджета) Тогда
			ПроверитьНаборСтатейПоРазделуБюджета(Выборка.ВариантБюджета, Выборка.НачалоПериода, Выборка.РазделБюджета, СписокЦелей);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.КоличествоГраф) Тогда
			ПроверитьСтатьюВПоказателяхБюджета(Выборка.ВариантБюджета, Выборка.НачалоПериода, Выборка.РазделБюджета, 
					Выборка.ГрафаБюджета, Неопределено);
		КонецЕсли;
		
		Для каждого СтрокаЦели Из СписокЦелей Цикл
			
			Если СтрокаЦели.Ссылка = Выборка.РазделБюджета Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.РазделБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка() Тогда
				ПроверитьСтатьюВПоказателяхБюджета(Выборка.ВариантБюджета, Выборка.НачалоПериода, Выборка.РазделБюджета, 
						Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления, СтрокаЦели.Ссылка);
				ПроверитьСтатьюВПоказателяхБюджета(Выборка.ВариантБюджета, Выборка.НачалоПериода, Выборка.РазделБюджета, 
						Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление, СтрокаЦели.Ссылка);
			Иначе
				ПроверитьСтатьюВПоказателяхБюджета(Выборка.ВариантБюджета, Выборка.НачалоПериода, Выборка.РазделБюджета, 
						Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления, СтрокаЦели.Ссылка);
				ПроверитьСтатьюВПоказателяхБюджета(Выборка.ВариантБюджета, Выборка.НачалоПериода, Выборка.РазделБюджета, 
						Справочники.ГрафыБюджета.ФинЦельПереводВНакопление, СтрокаЦели.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры



#Область ПроверкаИЗаполнениеПериодовБюджетаСтатьями


// Проверяет и, при необходимости, заполняет вариант бюджета статьями за указанный период
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	РазделБюджета - ФинансоваяЦель или ""
//	НачальнаяДата - Дата, начиная с которой нужно проверять заполнение статьями
//	КонечнаяДата  - Дата, по которую нужно выполнять проверку
//
Процедура ПроверитьЗаполнениеСтатьямибюджетаЗаПериод(ВариантБюджета, РазделБюджета, НачальнаяДата, КонечнаяДата) Экспорт
	
	КонечныйПериод = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, КонечнаяДата);
	ПериодПроверки = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, НачальнаяДата);
	
	Если КонечныйПериод.КалендарноеНачало = ПериодПроверки.КалендарноеНачало  
		И БюджетированиеСервер.СтатьиНаБюджетныйПериодЗаполнены(ВариантБюджета, ПериодПроверки.КалендарноеНачало, РазделБюджета) Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийНабор = ПоследнийНаборПоказателейБюджета(ВариантБюджета, РазделБюджета, ПериодПроверки.КалендарноеНачало, Ложь);
	Если ПоследнийНабор.Количество() = 0 Тогда
		ПоследнийНабор = ПервыйНаборПоказателейБюджета(ВариантБюджета, РазделБюджета, ПериодПроверки.КалендарноеНачало, Ложь);
	КонецЕсли;
	
	Пока ПериодПроверки.КалендарноеНачало <= КонечныйПериод.КалендарноеНачало Цикл
		
		Если Не БюджетированиеСервер.СтатьиНаБюджетныйПериодЗаполнены(ВариантБюджета, ПериодПроверки.КалендарноеНачало, РазделБюджета) Тогда
			
			Если ПоследнийНабор.Количество() = 0 Тогда
				
				ЗаполнитьВариантБюджетаСтатьямиПоУмолчанию(ВариантБюджета, ПериодПроверки.КалендарноеНачало, РазделБюджета);
				ПоследнийНабор = ПоследнийНаборПоказателейБюджета(ВариантБюджета, РазделБюджета, ПериодПроверки.КалендарноеНачало + 1, Ложь);
				БюджетированиеСервер.СдвинутьБюджетныйПериод(ПериодПроверки, ВариантБюджета, 1);
				Продолжить;
				
			КонецЕсли;
			
			Набор = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
			Набор.Отбор.ВариантБюджета.Установить(ВариантБюджета);
			Набор.Отбор.НачалоПериода.Установить(ПериодПроверки.КалендарноеНачало);
			Если РазделБюджета <> "" Тогда
				Набор.Отбор.РазделБюджета.Установить(РазделБюджета);
			КонецЕсли;
			
			ПоследнийНабор.ЗаполнитьЗначения(ПериодПроверки.КалендарноеНачало, "НачалоПериода");
			
			Набор.Загрузить(ПоследнийНабор);
			Набор.Записать(Истина);
			
		КонецЕсли;
		
		БюджетированиеСервер.СдвинутьБюджетныйПериод(ПериодПроверки, ВариантБюджета, 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Взвращает таблицу с показателями варианта бюджета на дату, максимально приближенную к указанной
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	РазделБюджета - ФинансоваяЦель или ""
//	ПредельнаяДата - Дата, на которую нужно проверить наличие статей
//	КопироватьСумму - Булево - Если ИСТИНА, вместе с набором статей будет скопирована и их сумма, иначе сумма будет нулевой
//
//Возвращаемое значение:
//	ТаблицаЗначений, пригодная для загрузки в набор записей
//
Функция ПоследнийНаборПоказателейБюджета(ВариантБюджета, РазделБюджета = "", ПредельнаяДата, КопироватьСумму = Истина) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("ПредельнаяДата", ПредельнаяДата);
	Запрос.УстановитьПараметр("РазделБюджета",  РазделБюджета);
	Запрос.УстановитьПараметр("КопироватьСумму", КопироватьСумму);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиБюджета.ВариантБюджета,
	|	&ПредельнаяДата КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|	ПоказателиБюджета.ГрафаБюджета КАК ГрафаБюджета,
	|	ПоказателиБюджета.ТипПоказателя,
	|	ПоказателиБюджета.СтатьяБюджета,
	|	ВЫБОР
	|		КОГДА &КопироватьСумму
	|			ТОГДА ПоказателиБюджета.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ПоказателиБюджета.Порядок КАК Порядок,
	|	ПоказателиБюджета.Комментарий
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПоказателиБюджета.НачалоПериода) КАК НачалоПериода
	|	ИЗ
	|		РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|	ГДЕ
	|		ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|		И (&РазделБюджета = """"
	|				ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|		И ПоказателиБюджета.НачалоПериода < &ПредельнаяДата) КАК ПоследяяДата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО ПоследяяДата.НачалоПериода = ПоказателиБюджета.НачалоПериода
	|			И (ПоказателиБюджета.ВариантБюджета = &ВариантБюджета)
	|			И (&РазделБюджета = """"
	|				ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|ГДЕ
	|	НЕ ПоказателиБюджета.ВариантБюджета ЕСТЬ NULL
	|	И ЕСТЬNULL(ПоказателиБюджета.РазделБюджета.Активность, ИСТИНА)
	|	И ЕСТЬNULL(ПоказателиБюджета.СтатьяБюджета.Активность, ИСТИНА)
	|	И НЕ ЕСТЬNULL(ПоказателиБюджета.СтатьяБюджета.ПометкаУдаления, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделБюджета,
	|	ГрафаБюджета,
	|	Порядок";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Возвращает максимальную дату НачалоПериода из регистра сведений ПоказателиБюджета для указанного варианта бюджета
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	РазделБюджета - ФинансоваяЦель или ""
//
//Возвращаемое значение:
//	Дата или Неопределено
//
Функция ПоследнийЗаполненныйПериодВарианта(ВариантБюджета, РазделБюджета) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("РазделБюджета",  РазделБюджета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПоказателиБюджета.НачалоПериода) КАК НачалоПериода
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И (&РазделБюджета = """"
	|			ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.НачалоПериода), Выборка.НачалоПериода, Неопределено)
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Взвращает таблицу с показателями варианта бюджета на дату, минимально превышающаю указанную
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета или структура - описание варианта бюджета
//	РазделБюджета - ФинансоваяЦель или ""
//	НачальнаяДата - Дата, начиная с которой нужно проверить наличие статей
//	КопироватьСумму - Булево - Если ИСТИНА, вместе с набором статей будет скопирована и их сумма, иначе сумма будет нулевой
//
//Возвращаемое значение:
//	ТаблицаЗначений, пригодная для загрузки в набор записей
//
Функция ПервыйНаборПоказателейБюджета(ВариантБюджета, РазделБюджета = "", НачальнаяДата, КопироватьСумму = Истина) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("НачальнаяДата", НачальнаяДата);
	Запрос.УстановитьПараметр("РазделБюджета",  РазделБюджета);
	Запрос.УстановитьПараметр("КопироватьСумму", КопироватьСумму);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиБюджета.ВариантБюджета,
	|	&НачальнаяДата КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|	ПоказателиБюджета.ГрафаБюджета КАК ГрафаБюджета,
	|	ПоказателиБюджета.ТипПоказателя,
	|	ПоказателиБюджета.СтатьяБюджета,
	|	ВЫБОР
	|		КОГДА &КопироватьСумму
	|			ТОГДА ПоказателиБюджета.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ПоказателиБюджета.Порядок КАК Порядок,
	|	ПоказателиБюджета.Комментарий
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ПоказателиБюджета.НачалоПериода) КАК НачалоПериода
	|	ИЗ
	|		РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|	ГДЕ
	|		ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|		И (&РазделБюджета = """"
	|				ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|		И ПоказателиБюджета.НачалоПериода >= &НачальнаяДата) КАК ПоследяяДата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО ПоследяяДата.НачалоПериода = ПоказателиБюджета.НачалоПериода
	|			И (ПоказателиБюджета.ВариантБюджета = &ВариантБюджета)
	|			И (&РазделБюджета = """"
	|				ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|ГДЕ
	|	НЕ ПоказателиБюджета.ВариантБюджета ЕСТЬ NULL
	|	И ЕСТЬNULL(ПоказателиБюджета.РазделБюджета.Активность, ИСТИНА)
	|	И ЕСТЬNULL(ПоказателиБюджета.СтатьяБюджета.Активность, ИСТИНА)
	|	И НЕ ЕСТЬNULL(ПоказателиБюджета.СтатьяБюджета.ПометкаУдаления, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазделБюджета,
	|	ГрафаБюджета,
	|	Порядок";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Заполняет регистр сведений "ПоказателиБюджета" значениями по умолчанию для указанного варианта бюджета
// 
Процедура ЗаполнитьВариантБюджетаСтатьямиПоУмолчанию(ВариантБюджета, Знач ДатаПериода = Неопределено, РазделБюджета = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ВариантБюджета) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПериода) Тогда
		ДатаПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РазделБюджета", РазделБюджета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка
	|ИЗ
	|	Справочник.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.Родитель = ЗНАЧЕНИЕ(Справочник.СтатьиДоходов.ПустаяСсылка)
	|	И НЕ СтатьиДоходов.Предопределенный
	|	И СтатьиДоходов.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиДоходов.Наименование
	|;
	|
	|//1//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Долги.Ссылка
	|ИЗ
	|	Справочник.Долги КАК Долги
	|ГДЕ
	|	Долги.ИспользоватьДляУчетаВыданныхДолгов
	|	И Долги.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Долги.Наименование
	|;
	|
	|//2//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КошелькиИСчета.Ссылка
	|ИЗ
	|	Справочник.КошелькиИСчета КАК КошелькиИСчета
	|ГДЕ
	|	КошелькиИСчета.Активность
	|	И НЕ КошелькиИСчета.ЭтоГруппа
	|	И КошелькиИСчета.ТипСчета = ЗНАЧЕНИЕ(перечисление.ТипыСчетов.БанковскаяКартаКредитная)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КошелькиИСчета.Наименование
	|;
	|
	|//3//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка
	|ИЗ
	|	Справочник.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	НЕ СтатьиРасходов.Предопределенный
	|	И СтатьиРасходов.Активность
	|	И СтатьиРасходов.Родитель = ЗНАЧЕНИЕ(Справочник.СтатьиРасходов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиРасходов.Наименование
	|;
	|
	|//4//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Долги.Ссылка
	|ИЗ
	|	Справочник.Долги КАК Долги
	|ГДЕ
	|	Долги.ИспользоватьДляУчетаВзятыхДолгов
	|	И Долги.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Долги.Наименование
	|;
	|
	|//5//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФинансовыеЦели.Ссылка
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК ФинансовыеЦели
	|ГДЕ
	|	ФинансовыеЦели.Активность И &РазделБюджета = """" ИЛИ  ФинансовыеЦели.Ссылка = &РазделБюджета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФинансовыеЦели.Предопределенный УБЫВ,
	|	ФинансовыеЦели.РеквизитДопУпорядочивания";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Набор = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
	Набор.Отбор.ВариантБюджета.Установить(ВариантБюджета);
	Набор.Отбор.НачалоПериода.Установить(ПериодБюджета.КалендарноеНачало);
	
	// БЮДЖЕТ СВОБОДНЫХ ДЕНЕГ
	Если РазделБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка() Или РазделБюджета = "" Тогда
		
		// Доходная часть бюджета
		Порядок = 1;
		ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление;
		
		// Статьи доходов
		Выборка = ПакетРезультатов[0].Выбрать();
		Если Выборка.Количество() > 7 Или Выборка.Количество() = 0 Тогда
			// Добавляем группу для удбства управления статьями
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.Доходы, Справочники.ГрафыБюджета.Доходы, Порядок);
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.Доходы, Выборка.Ссылка, Порядок);
		КонецЦикла;
		
		// Возврат от должников
		Выборка = ПакетРезультатов[1].Выбрать();
		Если Выборка.Количество() > 7 Или Выборка.Количество() = 0 Тогда
			// Добавляем группу для удбства управления статьями
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ВозвратВыданногоЗайма, Справочники.ГрафыБюджета.ВозвратВыданногоЗайма, Порядок);
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ВозвратВыданногоЗайма, Выборка.Ссылка, Порядок);
		КонецЦикла;
		
		// Кредитные карты
		ВыборкаКредиток = ПакетРезультатов[2].Выбрать();
		Если ВыборкаКредиток.Количество() > 7 Тогда
			// Добавляем группу для удбства управления статьями
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты, Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты, Порядок);
		КонецЕсли;
		Пока ВыборкаКредиток.Следующий() Цикл
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты, ВыборкаКредиток.Ссылка, Порядок);
		КонецЦикла;
		
		// Получение кредитов
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПолучениеКредита, Справочники.ГрафыБюджета.ПолучениеКредита, Порядок);
		
		// Выручка за имущество
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ВыручкаЗаИмущество, Справочники.ГрафыБюджета.ВыручкаЗаИмущество, Порядок);
		
		// Возвраты из накоплений
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления, Справочники.ФинансовыеЦели.ОбщиеНакопления, Порядок);
		
		// Другие доходы
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПрочиеДоходы, Справочники.ГрафыБюджета.ПрочиеДоходы, Порядок);
		
		
		// Расходная часть бюджета
		Порядок = 1;
		ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание;
		
		// Статьи расходов
		Выборка = ПакетРезультатов[3].Выбрать();
		Если Выборка.Количество() > 7 Или Выборка.Количество() = 0 Тогда
			// Добавляем группу для удбства управления статьями
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.Расходы, Справочники.ГрафыБюджета.Расходы, Порядок);
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.Расходы, Выборка.Ссылка, Порядок);
		КонецЦикла;
		
		// Пополнения кредитных карт
		Если ВыборкаКредиток.Количество() > 7 Тогда
			// Добавляем группу для удбства управления статьями
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту, Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту, Порядок);
		КонецЕсли;
		Пока ВыборкаКредиток.Следующий() Цикл
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту, ВыборкаКредиток.Ссылка, Порядок);
		КонецЦикла;
		
		// Погашения кредитов
		Выборка = ПакетРезультатов[4].Выбрать();
		Если Выборка.Количество() > 7 Или Выборка.Количество() = 0 Тогда
			// Добавляем группу для удбства управления статьями
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПогашениеКредита, Справочники.ГрафыБюджета.ПогашениеКредита, Порядок);
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПогашениеКредита, Выборка.Ссылка, Порядок);
		КонецЦикла;
		
		// Перевод в накопленя
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление, Справочники.ФинансовыеЦели.ОбщиеНакопления, Порядок);
		
		// Выдача в долг
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ВыдачаВзаймы, Справочники.ГрафыБюджета.ВыдачаВзаймы, Порядок);
		
		// Оплата имущества
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПокупкаИмущества, Справочники.ГрафыБюджета.ПокупкаИмущества, Порядок);
		
		// Другие расходы
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПрочиеРасходы, Справочники.ГрафыБюджета.ПрочиеРасходы, Порядок);
		
	КонецЕсли;
	
	Если РазделБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка() Тогда
		Набор.Записать(Истина);
		Возврат;
	КонецЕсли;
	
	// БЮДЖЕТЫ ФИНАНСОВЫХ ЦЕЛЕЙ
	ВыборкаЦелей = ПакетРезультатов[5].Выбрать();
	Пока ВыборкаЦелей.Следующий() Цикл
		
		Порядок = 1;
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ФинЦельПереводВНакопление, Справочники.ФинансовыеЦели.ПустаяСсылка(), Порядок, ВыборкаЦелей.Ссылка);
		Если ВыборкаЦелей.Ссылка <> Справочники.ФинансовыеЦели.ОбщиеНакопления Тогда
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ФинЦельПереводВНакопление, Справочники.ФинансовыеЦели.ОбщиеНакопления, Порядок, ВыборкаЦелей.Ссылка);
		КонецЕсли;
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПрочиеДоходы, Справочники.ГрафыБюджета.ПрочиеДоходы, Порядок, ВыборкаЦелей.Ссылка);
		
		Порядок = 1;
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления, Справочники.ФинансовыеЦели.ПустаяСсылка(), Порядок, ВыборкаЦелей.Ссылка);
		Если ВыборкаЦелей.Ссылка <> Справочники.ФинансовыеЦели.ОбщиеНакопления Тогда
			ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления, Справочники.ФинансовыеЦели.ОбщиеНакопления, Порядок, ВыборкаЦелей.Ссылка);
		КонецЕсли;
		ДобавитьЗаписьПоказателяБюджета(Набор, ВариантБюджета, ПериодБюджета.КалендарноеНачало, Справочники.ГрафыБюджета.ПрочиеРасходы, Справочники.ГрафыБюджета.ПрочиеРасходы, Порядок, ВыборкаЦелей.Ссылка);
		
	КонецЦикла;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

// Возвращает ЛОЖЬ, если в бюджете остусттвует хотя бы одна обязательная статья бюджета
Функция ВБюджетеЕстьОбязательныеСтатьи(ВариантБюджета, РазделБюджета, НачалоПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета",    ВариантБюджета);
	Запрос.УстановитьПараметр("РазделБюджета",     РазделБюджета);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("ОбязательныеГрафы", СписокОбязательныхГрафбюджета(РазделБюджета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ПоказателиБюджета.СтатьяБюджета ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПустыхГраф
	|ИЗ
	|	Справочник.ГрафыБюджета КАК ГрафыБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО ГрафыБюджета.Ссылка = ПоказателиБюджета.ГрафаБюджета
	|			И (ПоказателиБюджета.ВариантБюджета = &ВариантБюджета)
	|			И (ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|			И (ПоказателиБюджета.НачалоПериода = &НачалоПериода)
	|ГДЕ
	|	ГрафыБюджета.Ссылка В(&ОбязательныеГрафы)
	|	И ПоказателиБюджета.СтатьяБюджета ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Не ЗначениеЗаполнено(Выборка.КоличествоПустыхГраф);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет соответствие операций перемещений по разделам бюджета, добавляет недостающие записи и удаляет лишние
//Следует использовать после изменения структуры бюджета
//
//Параметры:
//	ВариантБюджета - СправочникСсылка.ВариантыБюджета - проверяемый вариант
//	РазделБюджета - СправочникСсылка.ФинансовыеЦели - раздел, в котором был изменен состав статей
//	НачалоПериода - Дата - календарное начало бюджетного периода, с которого нужно начать проверку
//
Процедура ПроверитьПеремещенияПоРазделамБюджета(ВариантБюджета, РазделБюджета, НачалоПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("РазделБюджета", РазделБюджета);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показатели.ВариантБюджета КАК ВариантБюджета,
	|	Показатели.НачалоПериода КАК НачалоПериода,
	|	Показатели.РазделБюджета КАК РазделБюджета,
	|	Показатели.ТипПоказателя КАК ТипПоказателя,
	|	Показатели.ГрафаБюджета КАК ГрафаБюджета,
	|	Показатели.СтатьяБюджета КАК СтатьяБюджета,
	|	Показатели.Сумма КАК Сумма,
	|	Показатели.Порядок КАК Порядок,
	|	Показатели.Комментарий КАК Комментарий,
	|	Зеркало.ВариантБюджета КАК ВариантБюджета1,
	|	Зеркало.НачалоПериода КАК НачалоПериода1,
	|	Зеркало.РазделБюджета КАК РазделБюджета1,
	|	Зеркало.ТипПоказателя КАК ТипПоказателя1,
	|	Зеркало.ГрафаБюджета КАК ГрафаБюджета1,
	|	Зеркало.СтатьяБюджета КАК СтатьяБюджета1,
	|	Зеркало.Сумма КАК Сумма1,
	|	Зеркало.Порядок КАК Порядок1,
	|	Зеркало.Комментарий КАК Комментарий1
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК Показатели
	|		ПОЛНОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК Зеркало
	|		ПО (Зеркало.ВариантБюджета = Показатели.ВариантБюджета)
	|			И (Зеркало.НачалоПериода = Показатели.НачалоПериода)
	|			И (Зеркало.РазделБюджета = Показатели.СтатьяБюджета)
	|			И (Зеркало.СтатьяБюджета = Показатели.РазделБюджета)
	|			И Зеркало.ТипПоказателя = ВЫБОР КОГДА Показатели.ТипПоказателя = Значение(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|					ТОГДА Значение(Перечисление.ТипыБюджетныхПоказателей.Списание)
	|					ИНАЧЕ Значение(Перечисление.ТипыБюджетныхПоказателей.Поступление)
	|				КОНЕЦ
	|ГДЕ
	|	ЕстьNULL(Зеркало.ВариантБюджета, Показатели.ВариантБюджета) = &ВариантБюджета
	|	И ЕстьNULL(Зеркало.НачалоПериода, Показатели.НачалоПериода) >= &НачалоПериода
	|	И (Показатели.РазделБюджета = &РазделБюджета ИЛИ Зеркало.СтатьяБюджета = &РазделБюджета)
	|	И ЕСТЬNULL(Показатели.ГрафаБюджета.ОтношениеКНакоплениям, Зеркало.ГрафаБюджета.ОтношениеКНакоплениям) <> 0
	|	И НЕ ЕСТЬNULL(Показатели.СтатьяБюджета, Зеркало.СтатьяБюджета) ССЫЛКА Справочник.ГрафыБюджета
	|	И ЕстьNULL(Показатели.Сумма, Зеркало.Сумма) <> 0
	|	И (ЕстьNULL(Показатели.Сумма, 0) <> ЕстьNULL(Зеркало.Сумма, 0) ИЛИ ЕстьNULL(Показатели.Комментарий, """") <> ЕстьNULL(Зеркало.Комментарий, """"))
	|	";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ВариантБюджета) Тогда
			// удаляем или очищаем сумму записи
			
			Запись = РегистрыСведений.ПоказателиБюджета.СоздатьМенеджерЗаписи();
			Запись.ВариантБюджета = Выборка.ВариантБюджета1;
			Запись.НачалоПериода  = Выборка.НачалоПериода1;
			Запись.РазделБюджета  = Выборка.РазделБюджета1;
			Запись.ТипПоказателя  = Выборка.ТипПоказателя1;
			Запись.ГрафаБюджета   = Выборка.ГрафаБюджета1;
			Запись.СтатьяБюджета  = Выборка.СтатьяБюджета1;
			
			Если Запись.СтатьяБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка() 
				Или Запись.СтатьяБюджета = Справочники.ФинансовыеЦели.ОбщиеНакопления Тогда
				Запись.Порядок = Выборка.Порядок1;
				Запись.Записать();
			Иначе
				Запись.Удалить();
			КонецЕсли;
			
		Иначе
			// обновляем значения показателей
			
			ДобавитьСвязаннуюЗаписьПоРазделуБюджета(Выборка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// На основании оригинальной записи создает "зеркальную" запись в корреспондируемом разделе бюджета.
//например, при переводе в финансовую цель из свободных денег сумма и комментарий бюдут одинаковыми в обоих разделах бюджета
//
// ОригинальнаяЗапись - Запись регистра сведений ПоказателиБюджета или структура - на основании которой нужно сделать зеркальную запись
//
Процедура ДобавитьСвязаннуюЗаписьПоРазделуБюджета(ОригинальнаяЗапись) Экспорт

	// заркальный тип показателя
	ТипПоказателя2 = ?(ОригинальнаяЗапись.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление,
				Перечисления.ТипыБюджетныхПоказателей.Списание, Перечисления.ТипыБюджетныхПоказателей.Поступление);
	
	// Разделом будет статья, по которой двинулись деньги в редактируемом разделе
	РазделБюджета2  = ?(ЗначениеЗаполнено(ОригинальнаяЗапись.СтатьяБюджета), 
			ОригинальнаяЗапись.СтатьяБюджета, Справочники.ФинансовыеЦели.ПустаяСсылка());
	// Статьёй будет текущий раздел
	СтатьяБюджета2  = ?(ЗначениеЗаполнено(ОригинальнаяЗапись.РазделБюджета), 
			ОригинальнаяЗапись.РазделБюджета, Справочники.ФинансовыеЦели.ПустаяСсылка());
	
	// Определяем графу бюджета
	Если ОригинальнаяЗапись.ГрафаБюджета = Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления Тогда
		ГрафаБюджета2 = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления;
	ИначеЕсли ОригинальнаяЗапись.ГрафаБюджета = Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление Тогда
		ГрафаБюджета2 = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление;
	ИначеЕсли ОригинальнаяЗапись.ГрафаБюджета = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления Тогда
		ГрафаБюджета2 = ?(ЗначениеЗаполнено(РазделБюджета2),
				Справочники.ГрафыБюджета.ФинЦельПереводВНакопление,
				Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления);
	ИначеЕсли ОригинальнаяЗапись.ГрафаБюджета = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление Тогда
		ГрафаБюджета2 = ?(ЗначениеЗаполнено(РазделБюджета2),
				Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления,
				Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление);
	КонецЕсли;
	
	// Формируем заркальную запись
	Запись2 = РегистрыСведений.ПоказателиБюджета.СоздатьМенеджерЗаписи();
	Запись2.ВариантБюджета  = ОригинальнаяЗапись.ВариантБюджета;
	Запись2.НачалоПериода   = ОригинальнаяЗапись.НачалоПериода;
	Запись2.РазделБюджета   = РазделБюджета2;
	Запись2.ТипПоказателя   = ТипПоказателя2;
	Запись2.ГрафаБюджета    = ГрафаБюджета2;
	Запись2.СтатьяБюджета   = СтатьяБюджета2;
	Запись2.Прочитать();
	
	ДобавленаНоваяЗапись = Не Запись2.Выбран();
	Если ДобавленаНоваяЗапись Тогда
		Запись2.ВариантБюджета  = ОригинальнаяЗапись.ВариантБюджета;
		Запись2.НачалоПериода   = ОригинальнаяЗапись.НачалоПериода;
		Запись2.РазделБюджета   = РазделБюджета2;
		Запись2.ТипПоказателя   = ТипПоказателя2;
		Запись2.ГрафаБюджета    = ГрафаБюджета2;
		Запись2.СтатьяБюджета   = СтатьяБюджета2;
		Запись2.Порядок = МаксимальныйПорядокВРазделеБюджета(ОригинальнаяЗапись.ВариантБюджета, ОригинальнаяЗапись.НачалоПериода, 
					РазделБюджета2, ГрафаБюджета2) + 1;
	КонецЕсли;
	
	Запись2.Сумма       = ОригинальнаяЗапись.Сумма;
	Запись2.Комментарий = ОригинальнаяЗапись.Комментарий;
	Запись2.Записать(Истина);
	
	Если Не ДобавленаНоваяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	// проверяем следующие периоды
	ПериодБюджета = НоваяСтрукрураБюджетногоПериода(ОригинальнаяЗапись.ВариантБюджета, ТекущаяДатаСеанса());
	Если ОригинальнаяЗапись.НачалоПериода < ПериодБюджета.КалендарноеНачало Тогда
		// Изменения в завершенных периодах на будущие периоды не копируются
		Возврат;
	КонецЕсли;
	
	КрайняяДата = ПоследнийЗаполненныйПериодВарианта(ОригинальнаяЗапись.ВариантБюджета, РазделБюджета2);
	Если КрайняяДата = Неопределено Или КрайняяДата = ОригинальнаяЗапись.НачалоПериода Тогда
		// будущие периоды не заполнялись
		Возврат;
	КонецЕсли;
	
	СледующийПериод = ДобавитьПериодУказанногоТипа(ОригинальнаяЗапись.НачалоПериода, ОригинальнаяЗапись.ВариантБюджета.ДетальностьПланирования, 1);
	Пока СледующийПериод <= КрайняяДата Цикл
		
		Запись2 = РегистрыСведений.ПоказателиБюджета.СоздатьМенеджерЗаписи();
		Запись2.ВариантБюджета  = ОригинальнаяЗапись.ВариантБюджета;
		Запись2.НачалоПериода   = СледующийПериод;
		Запись2.РазделБюджета   = РазделБюджета2;
		Запись2.ТипПоказателя   = ТипПоказателя2;
		Запись2.ГрафаБюджета    = ГрафаБюджета2;
		Запись2.СтатьяБюджета   = СтатьяБюджета2;
		Запись2.Прочитать();
		
		Если Запись2.Выбран() Тогда
			СледующийПериод = ДобавитьПериодУказанногоТипа(СледующийПериод, ОригинальнаяЗапись.ВариантБюджета.ДетальностьПланирования, 1);
			Продолжить;;
		КонецЕсли;
		
		Запись2.ВариантБюджета  = ОригинальнаяЗапись.ВариантБюджета;
		Запись2.НачалоПериода   = СледующийПериод;
		Запись2.РазделБюджета   = РазделБюджета2;
		Запись2.ТипПоказателя   = ТипПоказателя2;
		Запись2.ГрафаБюджета    = ГрафаБюджета2;
		Запись2.СтатьяБюджета   = СтатьяБюджета2;
		Запись2.Порядок = МаксимальныйПорядокВРазделеБюджета(ОригинальнаяЗапись.ВариантБюджета, СледующийПериод, 
					РазделБюджета2, ГрафаБюджета2) + 1;
		Запись2.Записать(Истина);
		
		СледующийПериод = ДобавитьПериодУказанногоТипа(СледующийПериод, ОригинальнаяЗапись.ВариантБюджета.ДетальностьПланирования, 1);
		
	КонецЦикла;

КонецПроцедуры

Функция МаксимальныйПорядокВРазделеБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, ГрафаБюджета)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("РазделБюджета", РазделБюджета);
	Запрос.УстановитьПараметр("ГрафаБюджета", ГрафаБюджета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПоказателиБюджета.ГрафаБюджета = &ГрафаБюджета
	|				ТОГДА ПоказателиБюджета.Порядок
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Порядок,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоказателиБюджета.СтатьяБюджета) КАК КоличесвтоСтатей
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И ПоказателиБюджета.НачалоПериода = &НачалоПериода
	|	И ПоказателиБюджета.РазделБюджета = &РазделБюджета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = 0;
	Если Выборка.Следующий() Тогда
		Результат = ?(ЗначениеЗаполнено(Выборка.Порядок), Выборка.Порядок, 
					?(ЗначениеЗаполнено(Выборка.КоличесвтоСтатей), Выборка.КоличесвтоСтатей, 0));
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


#КонецОбласти 



Процедура ОбновитьПорядокИзСоставаСтатей(ВариантБюджета, ДатаПериода = Неопределено, РазделБюджета = Неопределено) Экспорт
	
	Если ДатаПериода = Неопределено Тогда
		ДатаПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Детальность = ?(ЗначениеЗаполнено(ВариантБюджета.ДетальностьПланирования), ВариантБюджета.ДетальностьПланирования, Перечисления.ПериодичностьПланирования.Месяц);
	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("КалендарноеНачало", ПериодБюджета.КалендарноеНачало);
	Запрос.УстановитьПараметр("РазделБюджета", ?(РазделБюджета = Неопределено, "", РазделБюджета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиБюджета.ВариантБюджета КАК ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|	ПоказателиБюджета.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиБюджета.ГрафаБюджета КАК ГрафаБюджета,
	|	ПоказателиБюджета.СтатьяБюджета КАК СтатьяБюджета,
	|	ПоказателиБюджета.Сумма КАК Сумма,
	|	ПоказателиБюджета.Порядок КАК Порядок,
	|	ПоказателиБюджета.Комментарий КАК Комментарий,
	|	ЕСТЬNULL(СоставСтатейБюджета.Порядок, -1) КАК ПорядокИзСостава
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСтатейБюджета КАК СоставСтатейБюджета
	|		ПО ПоказателиБюджета.ВариантБюджета = СоставСтатейБюджета.ВариантБюджета
	|			И ПоказателиБюджета.РазделБюджета = СоставСтатейБюджета.РазделБюджета
	|			И ПоказателиБюджета.ГрафаБюджета = СоставСтатейБюджета.ГрафаБюджета
	|			И ПоказателиБюджета.СтатьяБюджета = СоставСтатейБюджета.СтатьяБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И ПоказателиБюджета.НачалоПериода >= &КалендарноеНачало
	|	И (&РазделБюджета = """"
	|			ИЛИ ПоказателиБюджета.РазделБюджета = &РазделБюджета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантБюджета,
	|	НачалоПериода
	|ИТОГИ ПО
	|	НачалоПериода";
	
	ВыборкаПериодов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НачалоПериода");
	Пока ВыборкаПериодов.Следующий() Цикл
		
		Набор = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
		Набор.Отбор.ВариантБюджета.Установить(ВариантБюджета);
		Набор.Отбор.НачалоПериода.Установить(ВыборкаПериодов.НачалоПериода);
		Если РазделБюджета <> Неопределено Тогда
			Набор.Отбор.РазделБюджета.Установить(РазделБюджета);
		КонецЕсли;
		
		ВыборкаЗаписей = ВыборкаПериодов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗаписей);
			Если ВыборкаЗаписей.ПорядокИзСостава >= 0 Тогда
				Запись.Порядок = ВыборкаЗаписей.ПорядокИзСостава;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Запись.ГрафаБюджета) Тогда
				Запись.ГрафаБюджета = БюджетированиеСервер.ГрафаБюжетаДляСтатьи(Запись.СтатьяБюджета, Запись.ТипПоказателя, РазделБюджета);
			КонецЕсли;
			
		КонецЦикла;
		
		Набор.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПорядокСтатейИзПоказателейБюджета(ВариантБюджета, ДатаПериода = Неопределено) Экспорт
	
	Если ДатаПериода = Неопределено Тогда
		ДатаПериода = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Детальность = ?(ЗначениеЗаполнено(ВариантБюджета.ДетальностьПланирования), ВариантБюджета.ДетальностьПланирования, Перечисления.ПериодичностьПланирования.Месяц);
	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
				
	Если Не БюджетированиеСервер.СтатьиНаБюджетныйПериодЗаполнены(ВариантБюджета,  ПериодБюджета.КалендарноеНачало) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("КалендарноеНачало", ПериодБюджета.КалендарноеНачало);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоставСтатейБюджета.ВариантБюджета ЕСТЬ NULL 
	|			ТОГДА ""Добавить""
	|		КОГДА ПоказателиБюджета.ВариантБюджета ЕСТЬ NULL 
	|				И СоставСтатейБюджета.Видимость
	|			ТОГДА ""Удалить""
	|		КОГДА ЕСТЬNULL(СоставСтатейБюджета.Порядок, 0) <> ЕСТЬNULL(ПоказателиБюджета.Порядок, 0)
	|				ИЛИ НЕ ПоказателиБюджета.ВариантБюджета ЕСТЬ NULL 
	|					И НЕ СоставСтатейБюджета.Видимость
	|			ТОГДА ""Обновить""
	|		ИНАЧЕ ""--""
	|	КОНЕЦ КАК Действие,
	|	ЕСТЬNULL(СоставСтатейБюджета.ВариантБюджета, ПоказателиБюджета.ВариантБюджета) КАК ВариантБюджета,
	|	ЕСТЬNULL(СоставСтатейБюджета.РазделБюджета, ПоказателиБюджета.РазделБюджета) КАК РазделБюджета,
	|	ЕСТЬNULL(СоставСтатейБюджета.ГрафаБюджета, ПоказателиБюджета.ГрафаБюджета) КАК ГрафаБюджета,
	|	ЕСТЬNULL(СоставСтатейБюджета.ГрафаБюджета.ТипПоказателя, ПоказателиБюджета.ГрафаБюджета.ТипПоказателя) КАК ТипПоказателя,
	|	ЕСТЬNULL(СоставСтатейБюджета.СтатьяБюджета, ПоказателиБюджета.СтатьяБюджета) КАК СтатьяБюджета,
	|	НЕ ПоказателиБюджета.ВариантБюджета ЕСТЬ NULL  КАК Видимость,
	|	ЕСТЬNULL(СоставСтатейБюджета.Видимость, ЛОЖЬ) КАК ВидимостьИзСостава,
	|	ЕСТЬNULL(СоставСтатейБюджета.Порядок, 0) КАК ПорядокИзСостава,
	|	ЕСТЬNULL(СоставСтатейБюджета.РодительскаяСтатья, ВЫБОР
	|			КОГДА ПоказателиБюджета.СтатьяБюджета ССЫЛКА Справочник.Имущество
	|					ИЛИ ПоказателиБюджета.СтатьяБюджета ССЫЛКА Справочник.КошелькиИСчета
	|					ИЛИ ПоказателиБюджета.СтатьяБюджета ССЫЛКА Справочник.Долги
	|				ТОГДА ПоказателиБюджета.ГрафаБюджета
	|			КОГДА ПоказателиБюджета.СтатьяБюджета ССЫЛКА Справочник.СтатьиРасходов
	|					ИЛИ ПоказателиБюджета.СтатьяБюджета ССЫЛКА Справочник.СтатьиДоходов
	|				ТОГДА ПоказателиБюджета.СтатьяБюджета.Родитель
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК РодительскаяСтатья,
	|	ЕСТЬNULL(ПоказателиБюджета.Порядок, 0) КАК ПорядокИзПоказателей,
	|	СоставСтатейБюджета.СтатьяБюджета КАК ИзСостава,
	|	ПоказателиБюджета.СтатьяБюджета КАК ИзПоказателей
	|ИЗ
	|	РегистрСведений.СоставСтатейБюджета КАК СоставСтатейБюджета
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО (ПоказателиБюджета.ВариантБюджета = СоставСтатейБюджета.ВариантБюджета)
	|			И (ПоказателиБюджета.РазделБюджета = СоставСтатейБюджета.РазделБюджета)
	|			И (ПоказателиБюджета.ГрафаБюджета = СоставСтатейБюджета.ГрафаБюджета)
	|			И (ПоказателиБюджета.СтатьяБюджета = СоставСтатейБюджета.СтатьяБюджета)
	|			И (ПоказателиБюджета.НачалоПериода = &КалендарноеНачало)
	|ГДЕ
	|	ЕСТЬNULL(СоставСтатейБюджета.ВариантБюджета, ПоказателиБюджета.ВариантБюджета) = &ВариантБюджета
	|	И ЕСТЬNULL(ПоказателиБюджета.НачалоПериода, &КалендарноеНачало) = &КалендарноеНачало
	|	И (
	|			СоставСтатейБюджета.ВариантБюджета ЕСТЬ NULL
	|			ИЛИ
	|			(ЕСТЬNULL(СоставСтатейБюджета.Порядок, 0) > 0
	|				И ЕСТЬNULL(СоставСтатейБюджета.Порядок, 0) <> ЕСТЬNULL(ПоказателиБюджета.Порядок, 0))
	|			ИЛИ 
	|			ВЫБОР
	|				КОГДА ПоказателиБюджета.ВариантБюджета ЕСТЬ NULL 
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ <> СоставСтатейБюджета.Видимость
	|			)
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставСтатейБюджета.ВариантБюджета" ;
	
	Набор = РегистрыСведений.СоставСтатейБюджета.СоздатьНаборЗаписей();
	Набор.ДополнительныеСвойства.Вставить("НеОбновлятьПорядокВПоказателях", Истина);
	
	ТипФинЦель = Тип("СправочникСсылка.ФинансовыеЦели");
	
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Набор.Очистить();
		Набор.Отбор.ВариантБюджета.Установить(ВыборкаЗаписей.ВариантБюджета);
		Набор.Отбор.РазделБюджета.Установить(ВыборкаЗаписей.РазделБюджета);
		Набор.Отбор.ГрафаБюджета.Установить(ВыборкаЗаписей.ГрафаБюджета);
		Набор.Отбор.СтатьяБюджета.Установить(ВыборкаЗаписей.СтатьяБюджета);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаЗаписей);
		
		// Проверяем обязательные статьи бюджета
		Если ЗначениеЗаполнено(Запись.РазделБюджета) И
			(Запись.СтатьяБюджета = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления
			ИЛИ Запись.СтатьяБюджета = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление
			)Тогда
			Запись.Видимость = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Запись.РазделБюджета) И
			(Запись.СтатьяБюджета = Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления
			ИЛИ Запись.СтатьяБюджета = Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление
			)Тогда
			Запись.Видимость = Истина;
		КонецЕсли;
		Если  Запись.СтатьяБюджета = Справочники.ГрафыБюджета.ПрочиеДоходы
			ИЛИ Запись.СтатьяБюджета = Справочники.ГрафыБюджета.ПрочиеРасходы
			Или ТипЗнч(Запись.СтатьяБюджета) = ТипФинЦель И Запись.СтатьяБюджета <> Запись.РазделБюджета
			Тогда
			Запись.Видимость = Истина;
		КонецЕсли;
		
		Набор.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПрефиксКИменам(ТекстЗапроса, ПрефиксИмен, ИмяТаблицы)

	Если ПрефиксИмен = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицы <> "" Тогда
		Если Лев(ИмяТаблицы, 8) = "Выборка_" Тогда
			ИмяТаблицы = СтрЗаменить(ИмяТаблицы, "Выборка_", "Выборка_" + ПрефиксИмен);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ " + ИмяТаблицы, "ПОМЕСТИТЬ " + ПрефиксИмен + ИмяТаблицы);
			ИмяТаблицы = ПрефиксИмен + ИмяТаблицы;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем префикс к именам параметров
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрТаблицыПериодов", "&" + ПрефиксИмен + "ПараметрТаблицыПериодов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВалютаВарианта", "&" +ПрефиксИмен + "ВалютаВарианта");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВариантБюджета", "&" +ПрефиксИмен + "ВариантБюджета");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РазделБюджета", "&" +ПрефиксИмен + "РазделБюджета");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&БюджетноеНачалоВыборки", "&" +ПрефиксИмен + "БюджетноеНачалоВыборки");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&БюджетноеОкончаниеВыборки", "&" +ПрефиксИмен + "БюджетноеОкончаниеВыборки");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КалендарноеНачалоВыборки",  "&" +ПрефиксИмен + "КалендарноеНачалоВыборки");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КалендарноеОкончаниеВыборки",  "&" +ПрефиксИмен + "КалендарноеОкончаниеВыборки");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&БюджетноеНачалоРедактируемогоПериода", "&" +ПрефиксИмен + "БюджетноеНачалоРедактируемогоПериода");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КалендарноеНачалоРедактируемогоПериода", "&" +ПрефиксИмен + "КалендарноеНачалоРедактируемогоПериода");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОстатков", "&" +ПрефиксИмен + "ДатаОстатков");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОтбораСоставаСтатей", "&" +ПрефиксИмен + "ДатаОтбораСоставаСтатей");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачТаблицыПериодов", "&" +ПрефиксИмен + "НачТаблицыПериодов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецТаблицыПериодов", "&" +ПрефиксИмен + "КонецТаблицыПериодов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаПоследнихКурсов", "&" +ПрефиксИмен + "ДатаПоследнихКурсов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидПериода", "&" +ПрефиксИмен + "ВидПериода");
	
	// заменяем имена таблиц
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаЦифр КАК", ПрефиксИмен + "ТаблицаЦифр КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНомеров КАК", ПрефиксИмен + "ТаблицаНомеров КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПериодов КАК", ПрефиксИмен + "ТаблицаПериодов КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктивныеСтатьиПериода КАК", ПрефиксИмен + "АктивныеСтатьиПериода КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктуальныеСтатьи КАК", ПрефиксИмен + "АктуальныеСтатьи КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоследниеКурсы КАК", ПрефиксИмен + "ПоследниеКурсы КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОборотыОпераций КАК", ПрефиксИмен + "ОборотыОпераций КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОборотыПланОпераций КАК", ПрефиксИмен + "ОборотыПланОпераций КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОборотыФактОпераций КАК", ПрефиксИмен + "ОборотыФактОпераций КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВесьБюджет КАК", ПрефиксИмен + "ВесьБюджет КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГотовыеОборотыПланФакт КАК", ПрефиксИмен + "ГотовыеОборотыПланФакт КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОборотыИОстатки КАК", ПрефиксИмен + "ОборотыИОстатки КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОборотыИОстаткиПоПериодам КАК", ПрефиксИмен + "ОборотыИОстаткиПоПериодам КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КурсыВалютПоВсемПериодам КАК", ПрефиксИмен + "КурсыВалютПоВсемПериодам КАК");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоказателиБюджетаЗаВсеПериоды КАК", ПрефиксИмен + "ПоказателиБюджетаЗаВсеПериоды КАК");
	
	
КонецПроцедуры

Функция НачалоПериодаУказанногоТипа(Дата, ТипПериода) 

	Если ТипПериода = Перечисления.ПериодичностьПланирования.Месяц Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Квартал Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Год Тогда
		Возврат НачалоГода(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Неделя Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.День Тогда
		Возврат НачалоДня(Дата);
	Иначе
		Возврат Дата;
	КонецЕсли;

КонецФункции

Функция ОкончаниеПериодаУказанногоТипа(Дата, ТипПериода) 

	Если ТипПериода = Перечисления.ПериодичностьПланирования.Месяц Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Квартал Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Год Тогда
		Возврат КонецГода(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.Неделя Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли ТипПериода = Перечисления.ПериодичностьПланирования.День Тогда
		Возврат КонецДня(Дата);
	Иначе
		Возврат Дата;
	КонецЕсли;

КонецФункции

Процедура УдалитьРегистрациюНабораЗаписейИзОбмена(Узел, НаборЗаписей) 
	
	МетаданныеНабора = НаборЗаписей.Метаданные();
	СтрокаКлючей = "";
	Для каждого Измерение Из МетаданныеНабора.Измерения Цикл
		Если Измерение.ОсновнойОтбор Тогда
			СтрокаКлючей = СтрокаКлючей + ?(СтрокаКлючей = "", "", ",") + Измерение.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗаписей = НаборЗаписей.Выгрузить(, СтрокаКлючей);
	ТаблицаЗаписей.Свернуть(СтрокаКлючей);
	
	Для каждого СтрокаНабора Из ТаблицаЗаписей Цикл
		
		Набор = РегистрыСведений[МетаданныеНабора.Имя].СоздатьНаборЗаписей();
		Для каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
			Набор.Отбор[Колонка.Имя].Установить(СтрокаНабора[Колонка.Имя]);
		КонецЦикла;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Набор);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтборыВариантаБюджетаПоРазделу(ВариантБюджета, ФинансоваяЦель, ДатаПериода) 

	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
	Если Не ЗначениеЗаполнено(ПериодБюджета.Начало) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("РазделБюджета", ФинансоваяЦель);
	Запрос.УстановитьПараметр("ТекущееНачало", ПериодБюджета.КалендарноеНачало);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиБюджета.ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И ПоказателиБюджета.РазделБюджета = &РазделБюджета
	|	И ПоказателиБюджета.НачалоПериода >= &ТекущееНачало
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ОтборыВариантаБюджета(ВариантБюджета, ДатаПериода, ВоВсеРазделы) 

	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
	Если Не ЗначениеЗаполнено(ПериодБюджета.Начало) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("ТекущееНачало", ПериодБюджета.КалендарноеНачало);
	Запрос.УстановитьПараметр("ВоВсеРазделы",  ВоВсеРазделы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиБюджета.ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета,
	|	МАКСИМУМ(ПоказателиБюджета.Порядок) КАК Порядок
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И ПоказателиБюджета.НачалоПериода >= &ТекущееНачало
	|	И (&ВоВсеРазделы
	|			ИЛИ ПоказателиБюджета.РазделБюджета = ЗНАЧЕНИЕ(Справочник.ФинансовыеЦели.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоказателиБюджета.РазделБюджета,
	|	ПоказателиБюджета.НачалоПериода,
	|	ПоказателиБюджета.ВариантБюджета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ПоказателиВариантаБюджетаПоСтатье(ВариантБюджета, Статья, ДатаПериода) 

	ПериодБюджета = БюджетированиеСервер.НоваяСтрукрураБюджетногоПериода(ВариантБюджета, ДатаПериода);
	Если Не ЗначениеЗаполнено(ПериодБюджета.Начало) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантБюджета", ВариантБюджета);
	Запрос.УстановитьПараметр("СтатьяБюджета", Статья);
	Запрос.УстановитьПараметр("ТекущееНачало", ПериодБюджета.КалендарноеНачало);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиБюджета.ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода,
	|	ПоказателиБюджета.СтатьяБюджета
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.ВариантБюджета = &ВариантБюджета
	|	И ПоказателиБюджета.СтатьяБюджета = &СтатьяБюджета
	|	И ПоказателиБюджета.НачалоПериода >= &ТекущееНачало
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ДобавитьЗаписьПоказателяБюджета(НаборЗаписей, ВариантБюджета, НачалоПериода, ГрафаБюджета, СтатьяБюджета, Порядок, РазделБюджета = Неопределено) 

	Запись = НаборЗаписей.Добавить();
	Запись.ВариантБюджета  = ВариантБюджета;
	Запись.НачалоПериода   = НачалоПериода;
	Запись.РазделБюджета   = РазделБюджета;
	Запись.ГрафаБюджета    = ГрафаБюджета;
	Запись.ТипПоказателя   = ГрафаБюджета.ТипПоказателя;
	Запись.СтатьяБюджета   = СтатьяБюджета;
	Запись.Порядок         = Порядок;
	
	Порядок = Порядок + 1;
	Возврат Запись;

КонецФункции

Функция СписокОбязательныхГрафбюджета(РазделБюджета) 

	Результат = Новый Массив;
	
	Результат.Добавить(Справочники.ГрафыБюджета.ПрочиеДоходы);
	Результат.Добавить(Справочники.ГрафыБюджета.ПрочиеРасходы);
	
	Если Не ЗначениеЗаполнено(РазделБюджета) Или Врег(РазделБюджета) = "" Тогда
		Результат.Добавить(Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления);
		Результат.Добавить(Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление);
	КонецЕсли;
	Если ЗначениеЗаполнено(РазделБюджета) Или Врег(РазделБюджета) = "" Тогда
		Результат.Добавить(Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления);
		Результат.Добавить(Справочники.ГрафыБюджета.ФинЦельПереводВНакопление);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ЗаписатьКлючиСтатейБюджета(СтрокиСтатей, РодительскаяСататья, КлючРодительскойСтатьи, ЕстьИерархия) 
	
	Счетчик = 0;
	Для каждого Строка Из СтрокиСтатей Цикл
		
		Счетчик = Счетчик + 1;
		Ключ = КлючРодительскойСтатьи + Формат(Счетчик, "ЧДЦ=; ЧГ=") + ".";
		
		Запись = РегистрыСведений.КлючиСтатей.СоздатьМенеджерЗаписи();
		Запись.СтатьяБюджета       = Строка.Ссылка;
		Запись.РодительскаяСтатья = Строка.РодительскаяСтатья;
		Запись.ТипСтатьи          = Строка.ТипСтатьи;
		Запись.Код                = Счетчик;
		Запись.Ключ               = Ключ;
		
		ТипРодительскойСтроки = ТипЗнч(Запись.РодительскаяСтатья);
		Если ТипРодительскойСтроки = Тип("СправочникСсылка.КошелькиИСчета") Или ТипРодительскойСтроки = Тип("СправочникСсылка.Имущество") 
			Или Запись.РодительскаяСтатья = Справочники.СтатьиДоходов.ПустаяСсылка() Или Запись.РодительскаяСтатья = Справочники.СтатьиРасходов.ПустаяСсылка()
			Тогда
			Запись.РодительскаяСтатьяВБюджете = Неопределено;
		Иначе
			Запись.РодительскаяСтатьяВБюджете = Строка.РодительскаяСтатья;
		КонецЕсли;
		
		Запись.ИсключатьИзБюджета = Строка.ИсключатьИзБюджета;
		
		Запись.Записать(Истина);
		
		Если ЕстьИерархия Тогда
			ЗаписатьКлючиСтатейБюджета(Строка.Строки, РодительскаяСататья, Ключ, ЕстьИерархия) 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаборСтатейПоРазделуБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, СписокЦелей) 
	
	Если РазделБюджета = Справочники.ФинансовыеЦели.ПустаяСсылка() Тогда
		
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.Доходы, Неопределено);
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.Расходы, Неопределено);
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления, Неопределено);
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление, Неопределено);
		
		Для каждого СтрокаЦели Из СписокЦелей Цикл
			
			ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление, СтрокаЦели.Ссылка);
			ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления, СтрокаЦели.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления, Неопределено);
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.ФинЦельПереводВНакопление, Неопределено);
					
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления, Справочники.ФинансовыеЦели.ПустаяСсылка());
		ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.ФинЦельПереводВНакопление, Справочники.ФинансовыеЦели.ПустаяСсылка());
					
		
		Для каждого СтрокаЦели Из СписокЦелей Цикл
			
			Если СтрокаЦели.Ссылка = РазделБюджета Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление, СтрокаЦели.Ссылка);
			ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
					Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления, СтрокаЦели.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
 
	ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
				Справочники.ГрафыБюджета.ПрочиеДоходы, Неопределено);
	ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, 
				Справочники.ГрафыБюджета.ПрочиеРасходы, Неопределено);

КонецПроцедуры

Процедура ПроверитьСтатьюВПоказателяхБюджета(ВариантБюджета, НачалоПериода, РазделБюджета, ГрафаБюджета, СтатьяБюджета) 
	
	Набор = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
	Набор.Отбор.ВариантБюджета.Установить(ВариантБюджета);
	Набор.Отбор.НачалоПериода.Установить(НачалоПериода);
	Набор.Отбор.РазделБюджета.Установить(РазделБюджета);
	Набор.Отбор.ГрафаБюджета.Установить(ГрафаБюджета);
	Набор.Отбор.ТипПоказателя.Установить(ГрафаБюджета.ТипПоказателя);
	Если СтатьяБюджета <> Неопределено Тогда
		Набор.Отбор.СтатьяБюджета.Установить(СтатьяБюджета);
	КонецЕсли;
	
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		// В показателях есть нужные записи
		Возврат;
	КонецЕсли;
	
	// Если нет записей, добавляем новую
	Запись = Набор.Добавить();
	Запись.ВариантБюджета = ВариантБюджета;
	Запись.НачалоПериода  = НачалоПериода;
	Запись.РазделБюджета  = РазделБюджета;
	Запись.ГрафаБюджета   = ГрафаБюджета;
	Запись.ТипПоказателя  = ГрафаБюджета.ТипПоказателя;
	Запись.СтатьяБюджета  = ?(СтатьяБюджета = Неопределено, ГрафаБюджета, СтатьяБюджета);
	
	Набор.Записать(Истина);
	
КонецПроцедуры



#КонецОбласти