
////////////////////////////////////////////////////////////////////////////////
// Парсер текстовых данных в формате JSON
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Выполняет разбор структуры данных формата JSON в набор значений
//
// Параметры:
//  Текст	 - Строка - данные JSON
//  ФорматРезультата - Число - формат результирующих данных
//     * 0 - Соответствие
//     * 1 - СписокЗначений
// 
// Возвращаемое значение:
//  * Соответствие - результат разбора данных (если ФорматРезультата = 0)
//  * СписокЗначений - результат разбора данных (если ФорматРезультата = 1)
//  * Неопределено - произошли логические ошибки или данные переданы неверно
//
Функция РаспарситьJSON(Знач Текст, Знач ФорматРезультата = 0) Экспорт
	
	Возврат ДанныеИзСтрокиJSON(Текст, "", ФорматРезультата = 0);
	
КонецФункции

// Возвращает строку записи данных в формате JSON
Функция ДанныеВСтрокуJSON(Данные) Экспорт

	#Если ВебКлиент Тогда
		Возврат ПарсерJSONВызовСервера.ДанныеВСтрокуJSON(Данные);
	#Иначе

		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, Данные, , "ЗначениеДляЗаписиВJSON", ДеньгиВызовСервера);
		Возврат ЗаписьJSON.Закрыть();

	#КонецЕсли 

КонецФункции

// Возвращает произвольные данные, восттановоенные из строки формате JSON
//
//Параметры:
// 	Строка - текст в формате json
// 	ИменаПолейТипаДата - Строка - имена полей через запятую, в которых хранится дата
// 	ВСоответствие - Булево - если Истина, будет возвращено соответсвие
// 	
//Возвращаемое значение:
//	Произвольное - значение, считанное из json
//
Функция ДанныеИзСтрокиJSON(Строка, ИменаПолейТипаДата = "", ВСоответствие = Ложь) Экспорт

	#Если ВебКлиент Тогда
		Возврат ПарсерJSONВызовСервера.ДанныеИзСтрокиJSON(Строка, ИменаПолейТипаДата);
	#Иначе

		Если Строка = Неопределено Или ПустаяСтрока(Строка) 
			Или Лев(СокрЛ(Строка), 1) <> "{" И Строка <> "true"  И Строка <> "false" Тогда
			// Строка не содержит json
			Возврат Неопределено;
		КонецЕсли;
		
		ДопПараметрыВосстановления = Новый Структура;
		ДопПараметрыВосстановления.Вставить("ИменаПолейТипаДата", ИменаПолейТипаДата);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Строка);
		Ответ = ПрочитатьJSON(ЧтениеJSON, ВСоответствие, ИменаПолейТипаДата, ФорматДатыJSON.ISO, "ЗначениеВосстановленноеИзJSON", ДеньгиВызовСервера, ДопПараметрыВосстановления); 
		
		Возврат Ответ;

	#КонецЕсли 

КонецФункции

// Возвращает структуру, составленную из соответствия - для записи в JSON
//Ключами структуры являются строки "ЭлементN", значениями - структура("КлючЭлемента, ЗначениеЭлемента")
//
//Параметры:
//	ВходящееСоответствие
//
//Возвращаемое значение:
//	Структура
//
Функция СоответствиеВСтруктуру(ВходящееСоответствие) Экспорт
	Результат = Новый Структура;
	
	Если Не ЗначениеЗаполнено(ВходящееСоответствие) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Счетчик = 0;
	Для каждого КлючИЗначение Из ВходящееСоответствие Цикл
		
		ЗначениеЭлемента = ?(ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Или ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированноеСоответствие"),
					СоответствиеВСтруктуру(КлючИЗначение.Значение), КлючИЗначение.Значение);
		Результат.Вставить( "Элемент" + Формат(Счетчик, "ЧДЦ=0; ЧГ="), Новый Структура("КлючЭлемента, ЗначениеЭлемента", КлючИЗначение.Ключ, ЗначениеЭлемента));
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


#Область СлужебныеПроцедурыИФункции

//Пытается получить из слова числовое значение 
//
//Параметры:
// Слово - Строка - Значение, которое надо преобразовать
//
//Возвращаемое значение:
//   * Число - Результирующие значение
//   * Неопределено - в случае ошибки
//
Функция ПолучитьЧисло(Знач Слово) 
	
	Если ТипЗнч(Слово) = Тип("Число") Тогда
		Возврат Слово;
	КонецЕсли;
	
	Возврат Неопределено;	
КонецФункции

// Преобразует список значений токенов в соответсвие.
//
// Параметры:
//  СписокДанных - СписокЗначений - Список слов из структуры JSON
// 
// Возвращаемое значение:
//  Соответствие - Результат преобразования
//
Функция ПреобразоватьВСоответсвие(Знач СписокДанных)
	
	Результат = Новый Соответствие;
	
	Индекс = 1;	
	Смещение = 0;
	Ключ = "";
	Для Каждого Данные Из СписокДанных Цикл
		Если Индекс % 2 = 0 Тогда //Четный индекс = значение
			Если НЕ ПустаяСтрока(Ключ) Тогда
				Значение = Данные.Значение;
				КакЧисло = ПолучитьЧисло(Значение);
				
				Если ТипЗнч(Ключ) = Тип("СписокЗначений") Тогда
					Результат[Смещение] = ПреобразоватьВСоответсвие(Ключ);
					Смещение = Смещение + 1;
					Ключ = "";
					Продолжить;
				ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					Значение = ПреобразоватьВСоответсвие(Значение);
				КонецЕсли;
								
				// Создаем соответсвие с ключем
				Если КакЧисло <> Неопределено Тогда
					Результат[Ключ] = КакЧисло;
				Иначе
					Результат[Ключ] = Значение;
				КонецЕсли;
				Ключ = "";
			КонецЕсли;
		Иначе
			Ключ = Данные.Значение;
		КонецЕсли;
		Индекс = Индекс + 1; 
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаСправочникаВСтруктуру(Ссылка, Уровень = 0) 

	Результат = Новый Структура("ID", Ссылка.УникальныйИдентификатор());
	Если Ссылка.Предопределенный Тогда
		Результат.Вставить("ИмяПредопределенного", Ссылка.ИмяПредопределенныхДанных);
	КонецЕсли;
	ЕстьКод = Ссылка.Метаданные().ДлинаКода > 0;
	Если ЕстьКод Тогда
		Результат.Вставить("Код", Ссылка.Код);
	КонецЕсли;
	ЕстьНаименование = Ссылка.Метаданные().ДлинаНаименования > 0;
	Если ЕстьНаименование Тогда
		Результат.Вставить("Наименование", Ссылка.Наименование);
	КонецЕсли;
	Если Ссылка.Метаданные().Иерархический Тогда
		Если Уровень > 0 Тогда
			Результат.Вставить("Родитель", Новый Структура("ID", Ссылка.Родитель.УникальныйИдентификатор()));
			Если ЕстьКод Тогда
				Результат.Родитель.Вставить("Код", Ссылка.Родитель.Код);
			КонецЕсли;
			Если ЕстьНаименование Тогда
				Результат.Родитель.Вставить("Наименование", Ссылка.Родитель.Наименование);
			КонецЕсли;
		Иначе
			Результат.Вставить("Родитель", СсылкаСправочникаВСтруктуру(Результат.Родитель, Уровень + 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти