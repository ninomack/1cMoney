////////////////////////////////////////////////////////////////////////////////
// РаботаСФормамиСправочников: общий функционал по обслуживанию справочников
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает стандартное условное оформление для формы списка справочника:
//	Активность, ПометкаУдаления, поля сумм и валют, и т.д.
//Параметры:
//	Форма		    - <УправляемаяФорма>, для которой устанавливается условное оформление
//	ИмяСписка	    - <Строка>, имя реквизита формы, являющегося списком.
//	Иерархический	- <Булево>, имя реквизита формы, являющегося списком.
//	ПрефиксСтандартныхКолонок - <Строка>, префикс, которым нужно предворять имена элементов-колонок списка 
//	ПоляСуммы       - <Структура>, в которой Ключ = имя поля суммы, значение = структура или массив с именами полей, 
//						в которых нужно очищать текст при нулвом значении суммы
Процедура УстановитьУсловноеОформлениеФормыСписка(Форма, ИмяСписка, Иерархический = Истина, ПрефиксСтандартныхКолонок = "", ПоляСуммы = Неопределено, Очищать = Истина) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	Если Очищать Тогда
		УсловноеОформление.Элементы.Очистить();
	КонецЕсли; 
	
	СтандартныйШрифт = Элементы[ИмяСписка].Шрифт;
	
	// Неактивность
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСписка);

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ИмяСписка + ".Активность");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ИмяСписка + ".Ссылка");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Пометка удаления
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСписка);

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ИмяСписка + ".ПометкаУдаления");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(СтандартныйШрифт, , , , , , Истина));
	
	// Условное оформление для сумм и валют:
	Если ПоляСуммы <> Неопределено Тогда
		Для Каждого ПолеСуммы Из ПоляСуммы Цикл
			
			// очищаем текст для суммы и валюты если сумма не заполнена
			Элемент = УсловноеОформление.Элементы.Добавить();

			Если ЗначениеЗаполнено(ПолеСуммы.Значение) Тогда
				Для Каждого ЭлементПоляСуммы Из ПолеСуммы.Значение Цикл
					ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементПоляСуммы);
				КонецЦикла; 
			Иначе
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяСписка);
			КонецЕсли; 

			ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных(ИмяСписка + "." + ПолеСуммы.Ключ);
			ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
			
		КонецЦикла; 
	КонецЕсли; 
	

КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере для форм справочников
//
//Параметры:
//	Форма - Управляемая форма объекта справочника
//	ЕстьПрикрепленныеФайлы - Булево - Истина, если в форме используются прикрепленные файлы
//	ЕстьПодключаемыеКоманды - Булево - Истина, если в форме используются подключаемые команды
//	Свойства - Булево - Истина, если в форме используются дополнительные реквизиты и свойства
//
Процедура ФормаОбъектаПриЧтенииНаСервере(Форма, ТекущийОбъект, ЕстьПрикрепленныеФайлы, ЕстьПодключаемыеКоманды, ЕстьСвойства) Экспорт
	
	Если ЕстьПрикрепленныеФайлы Тогда
		Форма.МедиаФайлы = ПрикрепленныеФайлыСервер.ПрочитатьСписокФайлов(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ЕстьПодключаемыеКоманды Тогда
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	КонецЕсли;
	
	Если ЕстьСвойства Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере для форм справочников
//
//Параметры:
//	Форма - Управляемая форма объекта справочника
//	ЕстьПрикрепленныеФайлы - Булево - Истина, если в форме используются прикрепленные файлы
//	ЕстьПодключаемыеКоманды - Булево - Истина, если в форме используются подключаемые команды
//	ЕстьСвойства - Булево - Истина, если в форме используются дополнительные реквизиты и свойства
//
Процедура ФормаОбъектаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ЕстьПрикрепленныеФайлы, ЕстьПодключаемыеКоманды, ЕстьСвойства) Экспорт
	
	ПрименитьРежимОткрытияИзНастроекПользователя(Форма);
	
	ОбщегоНазначенияДеньги.СброситьРазмерИПоложениеФормы(Форма);
	
	Если ЕстьПрикрепленныеФайлы Тогда
		Форма.ИндексТекущегоФайла = ПрикрепленныеФайлыКлиентСервер.ИндексПервогоГрафическогоФайла(Форма.МедиаФайлы);
		ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеТекущегоФайла(Форма);
	КонецЕсли;
	
	Если ЕстьПодключаемыеКоманды Тогда
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	Если ЕстьСвойства Тогда
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		УправлениеСвойствами.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
	 
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере для форм справочников
//
//Параметры:
//	Форма - Управляемая форма объекта справочника
//	ТекущийОбъект - справочникобъект 
//	ПараметрыЗаписи - Структура
//	ЕстьПрикрепленныеФайлы - Булево - Истина, если в форме используются прикрепленные файлы
//	ЕстьПодключаемыеКоманды - Булево - Истина, если в форме используются подключаемые команды
//	ЕстьСвойства - Булево - Истина, если в форме используются дополнительные реквизиты и свойства
//
Процедура ФормаОбъектаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи, ЕстьПрикрепленныеФайлы, ЕстьПодключаемыеКоманды, ЕстьСвойства) Экспорт
	
	Если ЕстьПрикрепленныеФайлы Тогда
		//
	КонецЕсли;
	
	Если ЕстьСвойства Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.Свойства
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере для форм справочников
//
//Параметры:
//	Форма - Управляемая форма объекта справочника
//	ТекущийОбъект - справочникобъект 
//	ПараметрыЗаписи - Структура
//	ЕстьПрикрепленныеФайлы - Булево - Истина, если в форме используются прикрепленные файлы
//	ЕстьПодключаемыеКоманды - Булево - Истина, если в форме используются подключаемые команды
//	Свойства - Булево - Истина, если в форме используются дополнительные реквизиты и свойства
//
Процедура ФормаОбъектаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи, ЕстьПрикрепленныеФайлы, ЕстьПодключаемыеКоманды, Свойства) Экспорт
	
	Если ЕстьПрикрепленныеФайлы Тогда
		ПрикрепленныеФайлыСервер.ОбработатьИЗаписатьДанныеМультимедиа(Форма.МедиаФайлы, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ЕстьПодключаемыеКоманды Тогда
		ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры





// Функционал общий для всех справочников при создании форм их элементов
Процедура ФормаЭлементаПриСозданииНаСервере(Форма) Экспорт

	Если ДеньгиВызовСервераПовтИсп.ИспользуетсяВариантИнтерфейсаТакси() Тогда
		СпособОткрытияФормОбъектов    = ПользовательскиеНастройкиДеньгиСервер.СпособОткрытияФорм();
		Если СпособОткрытияФормОбъектов = 1 Тогда
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Иначе
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Определяет, просматривал ли пользователь указанную форму обработки ОбзорОсновныхВозможностей
//
//Передаваемые параметры:
//	ИмяФормыПодсказки - <Строка> наименование формы обработки, как оно задано в конфигураторе
//
//Возвращаемое значение
//	<Булево>
Функция ПользовательСмотрелПодсказку(ИмяФормыПодсказки) Экспорт

	НастройкиПоказа = ХранилищеСистемныхНастроек.Загрузить("Общее/ПросмотрКраткихПодсказок", ИмяФормыПодсказки, Неопределено);
	Если НастройкиПоказа <> Неопределено Тогда
		Возврат НастройкиПоказа;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Отменяет отметку о просмотре подсказки
Процедура ОтметитьПросмотрПодсказкиПользователем(ИмяФормыПодсказки) Экспорт

	ХранилищеСистемныхНастроек.Сохранить("Общее/ПросмотрКраткихПодсказок", ИмяФормыПодсказки, Истина, Неопределено);

КонецПроцедуры

// Изменяет шрифт панели быстрых отборов в списках справочников - для 
//	корректного отображения в режиме "не такси"
Процедура ИзменитьШрифтПанелиОтбораСпискаВыбора(ГруппаЭлементов, Шрифт) Экспорт

	Для Каждого Элемент Из ГруппаЭлементов.ПодчиненныеЭлементы Цикл
		
		ТипЭлемента = ТипЗнч(Элемент);
		Если ТипЭлемента = Тип("ГруппаФормы") ИЛИ ТипЭлемента = Тип("ПолеФормы") Тогда
			Элемент.ШрифтЗаголовка =  ШрифтыСтиля.ОбычныйШрифтТекста;
		КонецЕсли; 
			
		Если ТипЭлемента = Тип("ПолеФормы") ИЛИ ТипЭлемента = Тип("КнопкаФормы") Тогда
			Элемент.Шрифт =  ШрифтыСтиля.ОбычныйШрифтТекста;
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

// Устраняет проблемы пересечения отборов с настройками пользователей в стандартных списках справочников
Процедура ФормаСпискаСправочникаОбработатьПараметрыОтбора(Форма, ИмяСписка, ОписаниеОтбора = "", ОчищатьПараметрОтбор = Истина) Экспорт

	Список = Форма[ИмяСписка];
	ЭтоСписокКошельков = Список.ОсновнаяТаблица = "Справочник.КошелькиИсчета";
	ЭтоСписокВыбора = Форма.Элементы[ИмяСписка].РежимВыбора;
	Параметры = Форма.Параметры;
	Если Параметры.Отбор.Количество() > 0 ИЛИ ЭтоСписокВыбора Тогда
		Форма.КлючНазначенияИспользования = "ОтборПоПолученнымПараметрам";
		Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли; 
	
	ОтборСписка = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	
	Если ОтборСписка <> Неопределено Тогда
		
		Если Параметры.Свойство("ВыборГруппы") И Параметры.ВыборГруппы Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "ЭтоГруппа", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
			Если ЭтоСписокВыбора Тогда
				Форма.Элементы[ИмяСписка].ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
			Если ЭлементОтбора.Ключ = "Владелец" Тогда
				Продолжить;
			КонецЕсли; 
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
				СписокЭлементаОтбора = Новый СписокЗначений;
				СписокЭлементаОтбора.ЗагрузитьЗначения(Новый Массив(ЭлементОтбора.Значение));
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, ЭлементОтбора.Ключ, СписокЭлементаОтбора, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияКомпоновкиДанных.Равно, , Истина);
			КонецЕсли; 
		КонецЦикла; 
		
		Если ЭтоСписокВыбора И НЕ Параметры.Отбор.Свойство("Активность") Тогда
			Форма.Актуальность = 1;
			Если Не ЭтоСписокКошельков Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
			КонецЕсли;
		КонецЕсли; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		Если ПустаяСтрока(ОписаниеОтбора) Тогда
			ОписаниеОтбора = НСтр("ru = 'не установлен'");
		Иначе
			ОписаниеОтбора = РаботаСФормамиСправочниковКлиентСервер.УпроститьСтрокуОтбораНаРусском(ОписаниеОтбора);
		КонецЕсли; 
		
		Если ОчищатьПараметрОтбор = Истина Тогда
			Параметры.Отбор.Очистить();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ПрименитьРежимОткрытияИзНастроекПользователя(Форма) 
	
	Если ДеньгиВызовСервераПовтИсп.ИспользуетсяВариантИнтерфейсаТакси() Тогда
		СпособОткрытияФормОбъектов    = ПользовательскиеНастройкиДеньгиСервер.СпособОткрытияФорм();
		Если СпособОткрытияФормОбъектов = 1 Тогда
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Иначе
			Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры
 

#КонецОбласти







