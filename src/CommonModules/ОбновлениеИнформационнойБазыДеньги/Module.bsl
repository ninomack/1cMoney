////////////////////////////////////////////////////////////////////////////////
// ОбновлениеИнформационнойБазыДеньги: Обновление информационной базы "1С:Деньги"
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	Описание.ИдентификаторИнтернетПоддержки = "Money";
	
	// Требуемые библиотеки
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("ИнтернетПоддержкаПользователей");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса") Тогда
		Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаТехнологииСервиса");
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
//
//	ПРИМЕРЫ:
//
//	// Обработчики, выполняемые при каждом обновлении ИБ
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "*";
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбязательныйОбработчик";
//	Обработчик.РежимВыполнения = "Монопольно";
//	
//	// Обработчики, выполняемые при заполнении пустой ИБ
//	Обработчик = Обработчики.Добавить();
//	Обработчик.НачальноеЗаполнение = Истина;
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПервыйЗапуск";
//	
//	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "1.0.2.2";
//	Обработчик.НачальноеЗаполнение = Истина;
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ИнициализироватьРолиИсполнителей";
//
//	// Обработчики, выполняемые при переходе на новую версию.
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "2.0.1.5";
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбновитьДополнительныеОбработки_2_0_1_5";
//	
//	// Обработчики отложенного обновления
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия = "2.1.4.11";
//	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ТестированиеОтложенногоОбновления";
//	Обработчик.РежимВыполнения = "Отложенно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики, выполняемые при каждом обновлении ИБ
	
	// Пример объявления обработчика:
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "*";
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ОбязательныйОбработчик";
	//Обработчик.РежимВыполнения = "Монопольно";
	
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	#Область Заполнение_пустой_ИБ
		
	// Заполняем неразделенные справочники и реквизиты предопределенных элементов неразделенных справочников
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДеньги.ЗаполнитьПустуюИБВНеразделенномРежиме";
	Обработчик.Версия = "1.0.0.1";
	Обработчик.ОбщиеДанные = Истина;
	
	
	// Начальное заполнение разделенных данных
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Версия = "1.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДеньги.ЗаполнитьПустуюИБ";
	
	#КонецОбласти 
	
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию
	
	// Пример объявления обработчика:
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.2.2";
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ИнициализироватьРолиИсполнителей";
	
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики, выполняемые при переходе на новую версию
	
	// Обновление на версию 2.0.34
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.34.27";
	Обработчик.ОбщиеДанные = Истина; // Обработка в неразделенном режиме
	Обработчик.Процедура   = "ОбновлениеИнформационнойБазыДеньги.Обновление_203420_Общие";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.34.33";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДеньги.Обновление_203433";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.35.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДеньги.Обновление_203515";
	
	
	////////////////////////////////////////////////////////////////////////////////
	// Обработчики отложенного обновления
	
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
		
	Если ОбщегоНазначения.РазделениеВключено() 
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьГраницыИтогов();
	ОбновитьСлужебныеЗаписиСправочников();
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Макет) Экспорт
	// в текущих версиях не используется
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение ИБ при первом запуске

#Область ЗаполнитьПустуюИБ

// Начальное заполнение пустой базы неразделяемыми данными
Процедура ЗаполнитьПустуюИБВНеразделенномРежиме(Параметр = Неопределено) Экспорт

	Если Не ОбщегоНазначения.ПодсистемаСуществует("ОблачныеСервисыДенег") Или 
		ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбновленияВНеразделенномРежиме = ОбщегоНазначения.ОбщийМодуль("ОСДОбновлениеИнформационнойБазы");
	Если МодульОбновленияВНеразделенномРежиме <> Неопределено Тогда
		МодульОбновленияВНеразделенномРежиме.ЗаполнитьПустуюИБ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПустуюИБ(Параметр = Неопределено) Экспорт

	Если ОбщегоНазначения.РазделениеВключено() 
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	// Валюта учета:
	ВалютаУчета = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", Неопределено);
	ЗначениеКонстанты = Константы.ВалютаУчета.Получить();
	Если НЕ ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
		Константы.ВалютаУчета.Установить(ВалютаУчета);
	КонецЕсли;
	
	// Прочие валюты:
	НайтиСоздатьВалюту("840", "USD", "Доллар США", "доллар, доллара, долларов, м, цент, цента, центов, м, 2", ВалютаУчета);
	НайтиСоздатьВалюту("978", "EUR", "Евро", "евро, евро, евро, м, цент, цента, центов, м, 2", ВалютаУчета);
	
	// Обновление способа и функциональных опций синхронизации
	Константы.ДеньгиВыбранныйСпособСинхронизации.Установить(Перечисления.СпособыСинхронизацииДанных.НеИспользовать);
	
	// Проверяем справочники:
	ПроверитьКонтакты();
	ПроверитьСтатьиДоходов();
	ПроверитьСтатьиРасходов();
	ОбновитьПодсистемуСвойств();
	
	ОбновитьСлужебныеЗаписиСправочников();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ФункционалКонфигурацииДеньги.ДеньгиВОблаке") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДеньгиВОблаке");
		Модуль.ЗаполнитьПустуюИБ();
	КонецЕсли;
	
	// Безусловные проверки и настройки
	ВыполнятьВсегдаПриПервомЗапуске();

КонецПроцедуры

Процедура ПроверитьКонтакты()

	Если СправочникПустой("Контакты") Тогда
		
		Свойства       = Новый Структура("Активность,Родитель,ПометкаУдаления", Истина, Неопределено, Ложь);
		ИмяСправочника = "Справочник.Контакты";
		
		ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "Магазины", 
					НСтр("ru='Магазины'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Свойства);
		
		ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ЧленыСемьи", 
					НСтр("ru='Семья'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					Свойства);
		
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверитьСтатьиДоходов()
	
	Свойства       = Новый Структура("Активность,Родитель,ПометкаУдаления", Истина, Неопределено, Ложь);
	ИмяСправочника = "Справочник.СтатьиДоходов";
	
	ГруппаПрочие = ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ПрочиеДоходы", 
				НСтр("ru='Прочие доходы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Свойства);
				
	Свойства.Родитель = ГруппаПрочие;
	
	ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ИзменениеОстатка", 
				НСтр("ru='Увеличение остатка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Свойства);
	
	ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ОбменВалюты", 
				НСтр("ru='Поступление валюты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Свойства);
	
КонецПроцедуры

Процедура ПроверитьСтатьиРасходов()

	Свойства       = Новый Структура("Активность,Родитель,ПометкаУдаления", Истина, Неопределено, Ложь);
	ИмяСправочника = "Справочник.СтатьиРасходов";
	
	ГруппаПрочие = ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ПрочиеРасходы", 
				НСтр("ru='Прочие расходы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Свойства);
				
	Свойства.Родитель = ГруппаПрочие;
	
	ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ИзменениеОстатка", 
				НСтр("ru='Уменьшение остатка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Свойства);
	
	ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ОбменВалюты", 
				НСтр("ru='Расход валюты'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Свойства);

КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                 - значение соответствующего реквизита справочника,
//  Наименование          - значение соответствующего реквизита справочника,
//  НаименованиеПолное    - значение соответствующего реквизита справочника,
//  ПараметрыПрописи      - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописи, ВалютаУчета) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда

		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи          = ПараметрыПрописи;
		СправочникОбъект.Активность                = Истина;
		СправочникОбъект.ЗагружаетсяИзИнтернета    = Код <> "643";
		СправочникОбъект.СпособУстановкиКурса      = ?(Код = "643", Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод,
					Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета);

		ЗаписатьСсылочныйОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
		
	КонецЕсли;

	Если ВалютаУчета <> Неопределено Тогда
		РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка, ВалютаУчета);
		Если  Код <> "643" Тогда
			ПроверитьКорректностьНачальныхКурсовВалюты(Ссылка, Код, ВалютаУчета);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции

Процедура ПроверитьКорректностьНачальныхКурсовВалюты(Валюта, КодВалюты, ВалютаУчета) 
	
	Если КодВалюты = "840" Тогда //Доллар США
		
		ПроверитьУстановитьКурс('20000101', Валюта, ВалютаУчета, 27.0000);
		ПроверитьУстановитьКурс('20010101', Валюта, ВалютаУчета, 28.1600);
		ПроверитьУстановитьКурс('20020101', Валюта, ВалютаУчета, 30.1372);
		ПроверитьУстановитьКурс('20030101', Валюта, ВалютаУчета, 31.7844);
		ПроверитьУстановитьКурс('20040101', Валюта, ВалютаУчета, 29.4545);
		ПроверитьУстановитьКурс('20050101', Валюта, ВалютаУчета, 27.7487);
		ПроверитьУстановитьКурс('20060101', Валюта, ВалютаУчета, 28.7825);
		ПроверитьУстановитьКурс('20070101', Валюта, ВалютаУчета, 26.3311);
		ПроверитьУстановитьКурс('20080101', Валюта, ВалютаУчета, 24.5462);
		ПроверитьУстановитьКурс('20090101', Валюта, ВалютаУчета, 29.3916);
		ПроверитьУстановитьКурс('20100101', Валюта, ВалютаУчета, 30.1851);
		ПроверитьУстановитьКурс('20110101', Валюта, ВалютаУчета, 30.3505);
		ПроверитьУстановитьКурс('20120101', Валюта, ВалютаУчета, 32.1961);
		ПроверитьУстановитьКурс('20130101', Валюта, ВалютаУчета, 30.3727);
		ПроверитьУстановитьКурс('20140101', Валюта, ВалютаУчета, 32.6587);
		ПроверитьУстановитьКурс('20150101', Валюта, ВалютаУчета, 56.2376);
		ПроверитьУстановитьКурс('20160101', Валюта, ВалютаУчета, 72.9299);
		ПроверитьУстановитьКурс('20170101', Валюта, ВалютаУчета, 60.6569);
		ПроверитьУстановитьКурс('20180101', Валюта, ВалютаУчета, 57.6002);

				
	ИначеЕсли КодВалюты = "978" Тогда //Евро
		
		ПроверитьУстановитьКурс('20000101', Валюта, ВалютаУчета, 27.2000);
		ПроверитьУстановитьКурс('20010101', Валюта, ВалютаУчета, 26.1400);
		ПроверитьУстановитьКурс('20020101', Валюта, ВалютаУчета, 26.6172);
		ПроверитьУстановитьКурс('20030101', Валюта, ВалютаУчета, 33.2719);
		ПроверитьУстановитьКурс('20040101', Валюта, ВалютаУчета, 37.0979);
		ПроверитьУстановитьКурс('20050101', Валюта, ВалютаУчета, 37.8409);
		ПроверитьУстановитьКурс('20060101', Валюта, ВалютаУчета, 34.1850);
		ПроверитьУстановитьКурс('20070101', Валюта, ВалютаУчета, 34.6965);
		ПроверитьУстановитьКурс('20080101', Валюта, ВалютаУчета, 35.9332);
		ПроверитьУстановитьКурс('20090101', Валюта, ВалютаУчета, 41.4275);
		ПроверитьУстановитьКурс('20100101', Валюта, ВалютаУчета, 43.4605);
		ПроверитьУстановитьКурс('20110101', Валюта, ВалютаУчета, 40.4876);
		ПроверитьУстановитьКурс('20120101', Валюта, ВалютаУчета, 41.6714);
		ПроверитьУстановитьКурс('20130101', Валюта, ВалютаУчета, 40.2286);
		ПроверитьУстановитьКурс('20140101', Валюта, ВалютаУчета, 45.0559);
		ПроверитьУстановитьКурс('20150101', Валюта, ВалютаУчета, 68.3681);
		ПроверитьУстановитьКурс('20160101', Валюта, ВалютаУчета, 79.6395);
		ПроверитьУстановитьКурс('20170101', Валюта, ВалютаУчета, 63.8111);
		ПроверитьУстановитьКурс('20180101', Валюта, ВалютаУчета, 68.8668);
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУстановитьКурс(ДатаКурса, Валюта, ВалютаУчета, Курс) 
	
	СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта, БазоваяВалюта", Валюта, ВалютаУчета));
	
	Если (СтруктураКурса.Курс <> Курс) Тогда
		
		РегистрКурсыВалют = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
		
		РегистрКурсыВалют.Период    = ДатаКурса;
		РегистрКурсыВалют.Валюта    = Валюта;
		РегистрКурсыВалют.БазоваяВалюта   = ВалютаУчета;
		РегистрКурсыВалют.Курс      = Курс;
		РегистрКурсыВалют.Кратность = 1;
		РегистрКурсыВалют.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Создает настройки транспортов обмена данными 
//
Процедура СоздатьНастройкиТранспортовОбмена() 
	
	УзелСервера = СинхронизацияАвтономныхКопийВызовСервера.УзелЦентральнойБазы("СинхронизацияАвтономныхКопий");
	
	// Обновление настроек WS-соединения с узлом плана обмена
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Узел", УзелСервера);
	СтруктураЗаписи.Вставить("WSURLВебСервиса", "");
	СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
	СтруктураЗаписи.Вставить("WSИмяПользователя", "");
	СтруктураЗаписи.Вставить("WSПароль", "");
	СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	СтруктураЗаписи.Вставить("FILEКаталогОбменаИнформацией", КаталогВременныхФайлов());
	
	РегистрыСведений.НастройкиТранспортаОбменаДанными.ОбновитьЗапись(СтруктураЗаписи);
	
	// проверка этого узла для синхронизации с мобильными приложениями
	УзелСервера = СинхронизацияАвтономныхКопийВызовСервера.УзелЦентральнойБазы("МобильноеПриложение");
	
КонецПроцедуры
 
Процедура ОбновитьПодсистемуСвойств() Экспорт
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Долги");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Имущество");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Контакты");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_КошелькиИСчета");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_СтатьиДоходов");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_СтатьиРасходов");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_Доход");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_МыВернулиДолг");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_МыВзялиВДолг");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_МыДалиВДолг");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_НамВернулиДолг");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ОбменВалюты");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_Перемещение");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_Расход");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_УниверсальнаяОперация");
	
КонецПроцедуры


#КонецОбласти


#Область ВыполнятьВсегдаПриПервомЗапуске

// Неразделенные данные
Процедура ПроверитьГрафыБюджетов() Экспорт

	// Справочник "ГрафыБюджета" используется для упорядочивания статей бюджета.
	//	Предопределенные элементы должны по умолчанию иметь однозначные коды, т.к. именно по ним 
	//	сворачиваются показатели бюджета.
	
	
	// Доходы:
	ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление;
	
	// "Прочие доходы" имеет код "10." - корень для всех планируемых поступлений
	//	Если для бюджетной статьи дохода не найдется родителя с более длинным кодом, 
	//	такая статья автоматически попадет в "Прочие доходы"
	Графа = Справочники.ГрафыБюджета.ПрочиеДоходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Другие доходы'");
	Графа.Код                      = "10.99.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 9999;
	Графа.ТипСтатьи                = "ВсеДоходы";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.Доходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Доходы по статьям'");
	Графа.Код                      = "10.1.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1100;
	Графа.ТипСтатьи                = "СтатьяДоходов";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	// Только для свободных денег: возврат из накоплений в свободные деньги
	Графа = Справочники.ГрафыБюджета.СвободныеДеньгиВозвратИзНакопления.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Перевод из накоплений'");
	Графа.Код                      = "10.2.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Ложь;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1200;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = -1;
	ЗаписатьСсылочныйОбъект(Графа);
	
	Графа = Справочники.ГрафыБюджета.ИспользованиеКредитнойКарты.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Использование кредитных карт'");
	Графа.Код                      = "10.3.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1300;
	Графа.ТипСтатьи                = "КредитнаяКарта";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ПолучениеКредита.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Получение кредитов, займов'");
	Графа.Код                      = "10.4.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1400;
	Графа.ТипСтатьи                = "НашДолг";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ВозвратВыданногоЗайма.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Возврат от должников'");
	Графа.Код                      = "10.5.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1500;
	Графа.ТипСтатьи                = "ДолгНам";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ВыручкаЗаИмущество.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Продажа имущества'");
	Графа.Код                      = "10.6.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1600;
	Графа.ТипСтатьи                = "Имущество";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	
	// Только для накоплений: поревод в накопление на фин.цель из св. денег или др. накоплений
	Графа = Справочники.ГрафыБюджета.ФинЦельПереводВНакопление.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Поступления из свободных денег или др. фин.целей'");
	Графа.Код                      = "10.7.";
	Графа.ДляСвободныхДенег        = Ложь;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1100;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = 1;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	
	// Рахсоды
	ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание;
	
	// "Прочие расходы" имеет код "20." - корень для всех планируемых списаний.
	//	Если для бюджетной статьи расходв не найдется родителя с более длинным кодом, 
	//	такая статья автоматически попадет в "Прочие расходы"
	Графа = Справочники.ГрафыБюджета.ПрочиеРасходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Другие расходы'");
	Графа.Код                      = "20.99.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 9999;
	Графа.ТипСтатьи                = "ВсеРасходы";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.Расходы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Расходы по статьям'");
	Графа.Код                      = "20.1.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1100;
	Графа.ТипСтатьи                = "СтатьяРасходов";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	// Только для свободных денег: перевод в накопления
	Графа = Справочники.ГрафыБюджета.СвободныеДеньгиПереводВНакопление.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Перевод в накопления'");
	Графа.Код                      = "20.2.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Ложь;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1200;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = -1;
	ЗаписатьСсылочныйОбъект(Графа);
	
	Графа = Справочники.ГрафыБюджета.ПереводНаКредитнуюКарту.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Пополнение кредитных карт'");
	Графа.Код                      = "20.3.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1300;
	Графа.ТипСтатьи                = "КредитнаяКарта";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ПогашениеКредита.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Погашение кредитов, займов'");
	Графа.Код                      = "20.4.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1400;
	Графа.ТипСтатьи                = "НашДолг";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	Графа = Справочники.ГрафыБюджета.ВыдачаВзаймы.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Выдача в долг'");
	Графа.Код                      = "20.5.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1500;
	Графа.ТипСтатьи                = "ДолгНам";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	Графа = Справочники.ГрафыБюджета.ПокупкаИмущества.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Покупка имущества'");
	Графа.Код                      = "20.6.";
	Графа.ДляСвободныхДенег        = Истина;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1600;
	Графа.ТипСтатьи                = "Имущество";
	Графа.ОтношениеКНакоплениям    = 0;
	ЗаписатьСсылочныйОбъект(Графа);
	
	
	// Только для накоплений: перевод из накоплений в свободные деньги или на другую фин.цель
	Графа = Справочники.ГрафыБюджета.ФинЦельВозвратИзНакопления.ПолучитьОбъект();
	Графа.Наименование = НСтр("ru = 'Перевод в св. деньги или на другую фин.цель'");
	Графа.Код                      = "20.7.";
	Графа.ДляСвободныхДенег        = Ложь;
	Графа.ДляФинансовыхЦелей       = Истина;
	Графа.Родитель                 = Справочники.ГрафыБюджета.ПустаяСсылка();
	Графа.ТипПоказателя            = ТипПоказателя;
	Графа.ПорядокПоУмолчанию       = 1150;
	Графа.ТипСтатьи                = "Финцель";
	Графа.ОтношениеКНакоплениям    = 1;
	ЗаписатьСсылочныйОбъект(Графа);
	
	// удаляем предопределенные данные, ставшие лишними
	
	СсылкаПредопределенного = ПолучитьПредопределенный("Справочник.ГрафыБюджета", "ФинЦельНакопление");
	Если СсылкаПредопределенного <> Неопределено Тогда
		Графа = СсылкаПредопределенного.ПолучитьОбъект();
		Графа.ИмяПредопределенныхДанных = "";
		Графа.ПометкаУдаления = Истина;
		Графа.Наименование = НСтр("ru='Поступление накоплений (не используется)'");
		Графа.Записать();
	КонецЕсли;
	
	СсылкаПредопределенного = ПолучитьПредопределенный("Справочник.ГрафыБюджета", "СвободныеДеньгиНакопление");
	Если СсылкаПредопределенного <> Неопределено Тогда
		Графа = СсылкаПредопределенного.ПолучитьОбъект();
		Графа.ИмяПредопределенныхДанных = "";
		Графа.ПометкаУдаления = Истина;
		Графа.Наименование = НСтр("ru='Поступление накоплений (не используется)'");
		Графа.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнятьВсегдаПриПервомЗапуске() 

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ПроверитьГрафыБюджетов();
		
	КонецЕсли;
	
	Константы.ВалютаИндикаторовРабочегоСтола.Установить(Константы.ВалютаУчета.Получить());
	Константы.ИспользоватьФинансовыеЦели.Установить(Истина);
	ПроверитьРазделыУчета();
	ПроверитьВидыСубконто();
	ПроверитьВидыАналитики();
	ПроверитьФинансовыеЦели();
	ПроверитьВариантыБюджетов();
	БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();

КонецПроцедуры

Процедура ПроверитьРазделыУчета()

	СчетОбъект = ПланыСчетов.РазделыУчета.Деньги.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Деньги'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.СвободныеДеньги.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Свободные деньги'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Деньги;
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Накопления.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Накопления'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Деньги;
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Имущество.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Имущество'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.ПустаяСсылка();
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Долги.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Долги'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.ПустаяСсылка();
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Основные суммы долгов'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Долги;
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.ПроцентыПоДолгам.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Проценты по долгам'");
	СчетОбъект.Родитель     = ПланыСчетов.РазделыУчета.Долги;
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыСчетов.РазделыУчета.Капитал.ПолучитьОбъект();
	СчетОбъект.Наименование = НСтр("ru = 'Капитал'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);

КонецПроцедуры

Процедура ПроверитьВидыСубконто()

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.КошелькиИСчета.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КошелькиИСчета");
	СчетОбъект.Наименование = НСтр("ru = 'Кошельки и счета'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.Имущество.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Имущество");
	СчетОбъект.Наименование = НСтр("ru = 'Имущество'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.Долги.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Долги");
	СчетОбъект.Наименование = НСтр("ru = 'Долги'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.Аналитика.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСубконтоАналитика");
	СчетОбъект.Наименование = НСтр("ru = 'Аналитика статей'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);

	СчетОбъект = ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов, СправочникСсылка.СтатьиДоходов");
	СчетОбъект.Наименование = НСтр("ru = 'Статьи доходов и расходов'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);

КонецПроцедуры

Процедура ПроверитьВидыАналитики()

	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Важность.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Важность'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.ГеографияСделки.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'География сделки'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Имущество.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Имущество");
	СчетОбъект.Наименование = НСтр("ru = 'Имущество'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.КарточкаСкидок.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Карточка скидок'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Кредит.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Долги");
	СчетОбъект.Наименование = НСтр("ru = 'Кредит'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.МестоПолученияДохода.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контакты");
	СчетОбъект.Наименование = НСтр("ru = 'Плательщик дохода'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.МестоТраты.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контакты");
	СчетОбъект.Наименование = НСтр("ru = 'Магазин, продавец'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.НаправлениеИспользования.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'На что использовано?'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Пометка.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Пометка'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.Проект.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДополнительныеЗначенияВидовАналитик");
	СчетОбъект.Наименование = НСтр("ru = 'Проект'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.ФинансоваяЦель.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ФинансовыеЦели");
	СчетОбъект.Наименование = НСтр("ru = 'Финансовая цель'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
	СчетОбъект = ПланыВидовХарактеристик.ВидыАналитик.ЧленыСемьи.ПолучитьОбъект();
	СчетОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контакты");
	СчетОбъект.Наименование = НСтр("ru = 'Члены семьи'");
	ЗаписатьСсылочныйОбъект(СчетОбъект);
	
КонецПроцедуры

Процедура ПроверитьФинансовыеЦели()

	Свойства       = Новый Структура("Активность,ПометкаУдаления", Истина, Ложь);
	ИмяСправочника = "Справочник.ФинансовыеЦели";
	
	ВосстановитьПредопределенныйЭлемент(ИмяСправочника, "ОбщиеНакопления", 
				НСтр("ru='Накопление без конкретной цели'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				Свойства);
				
	ОбъектВсеЦели = Справочники.ФинансовыеЦели.ОбщиеНакопления.ПолучитьОбъект();
	ОбъектВсеЦели.Активность   = Истина;
	ОбъектВсеЦели.Валюта       = Константы.ВалютаУчета.Получить();
	ОбъектВсеЦели.Наименование = НСтр("ru = 'Накопление без конкретной цели'");
	ОбъектВсеЦели.РеквизитДопУпорядочивания = 1;
	ЗаписатьСсылочныйОбъект(ОбъектВсеЦели);
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФинансовыеЦели.Ссылка,
	|	ФинансовыеЦели.РеквизитДопУпорядочивания КАК Приоритет,
	|	ФинансовыеЦели.Активность,
	|	ФинансовыеЦели.ПометкаУдаления
	|ИЗ
	|	Справочник.ФинансовыеЦели КАК ФинансовыеЦели
	|ГДЕ
	|	ФинансовыеЦели.Предопределенный = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ФинансовыеЦели.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Счетчик = 2;
	Пока Выборка.Следующий() Цикл
	
		ОбъектЦель = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектЦель.РеквизитДопУпорядочивания = Счетчик;
		ЗаписатьСсылочныйОбъект(ОбъектЦель);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьВариантыБюджетов()

	ПределПланирования = Константы.ПределПланирования.Получить();
	ПределНеУстановлен = НЕ ЗначениеЗаполнено(ПределПланирования);
	Если ПределНеУстановлен Тогда
		ПределПланирования = НачалоДня(КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 24)));
	КонецЕсли;
	
	// заполним основной вариант бюджета значенниями по умолчанию
	ВариантОбъект = Справочники.ВариантыБюджетов.БазовыйВариант.ПолучитьОбъект();
	ВариантОбъект.Валюта = Константы.ВалютаУчета.Получить();
	ВариантОбъект.ДетальностьПланирования = Перечисления.ПериодичностьПланирования.Месяц;
	ВариантОбъект.Наименование = НСтр("ru = 'Основной вариант'");
	ТекущаяДата = ТекущаяДатаСеанса();
	ВариантОбъект.НачалоПланирования    = НачалоГода(?(Месяц(ТекущаяДата) < 2, ДобавитьМесяц(ТекущаяДата, -12), ТекущаяДата));
	ВариантОбъект.НомерМесяца = 1;
	ВариантОбъект.ЧислоМесяца = 1;
	ВариантОбъект.Активность  = Истина;
	ЗаписатьСсылочныйОбъект(ВариантОбъект);
	ОсновнойВариант = Константы.ОсновнойВариантБюджета.Получить();
	Если НЕ ЗначениеЗаполнено(ОсновнойВариант) Тогда
		Константы.ОсновнойВариантБюджета.Установить(Справочники.ВариантыБюджетов.БазовыйВариант);
		БюджетированиеСервер.ЗаполнитьВариантБюджетаСтатьямиПоУмолчанию(Справочники.ВариантыБюджетов.БазовыйВариант);
	КонецЕсли; 
	
	// Проверяем и устанавливаем предел планирования
	Если ПределНеУстановлен Тогда
		Константы.ПределПланирования.Установить(ПределПланирования);
	Иначе
		// Пересчитаем показатели плановых операций и бюджетов
		ПлановыеОперации.ПересчитатьПланыПриИзмененииПределаПланирования();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	Константы.ИсточникДанныхАдресногоКлассификатора.Установить("Сервис1С");
	
	Если ОбщегоНазначения.РазделениеВключено() 
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиАдреса = Новый Структура;
	ПараметрыПроверкиАдреса.Вставить("АдресТолькоРоссийский", Истина);
	ПараметрыПроверкиАдреса.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ЗапрещатьВводНекорректного", Ложь);
	ПараметрыПроверкиАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	ПараметрыАдреса = Новый Структура;
	ПараметрыАдреса.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыАдреса.Вставить("МожноИзменятьСпособРедактирования",    Истина);
	ПараметрыАдреса.Вставить("РедактированиеТолькоВДиалоге",         Ложь);
	ПараметрыАдреса.Вставить("ОбязательноеЗаполнение",               Ложь);
	ПараметрыАдреса.Вставить("РазрешитьВводНесколькихЗначений",      Ложь);
	ПараметрыАдреса.Вставить("ЗапретитьРедактированиеПользователем", Ложь);
	ПараметрыАдреса.Вставить("Используется",                         Истина);
	ПараметрыАдреса.Вставить("НастройкиПроверки",                    ПараметрыПроверкиАдреса);
	ПараметрыАдреса.Вставить("ХранитьИсториюИзменений",              Ложь);
	ПараметрыАдреса.Вставить("МеждународныйФорматАдреса",            Ложь);
	ПараметрыАдреса.Вставить("Наименование",                         "");
	ПараметрыАдреса.Вставить("Имя",                                  "");
	ПараметрыАдреса.Вставить("ВидРедактирования",                    "Диалог");
	
	ПараметрыАдреса.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ПараметрыАдреса.Вставить("Порядок", 1);
	ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Юридический адрес организации'"));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
	ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	ПараметрыАдреса.Порядок  = 2;
	ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Фактический адрес организации'"));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
	ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	ПараметрыАдреса.Порядок  = 6;
	ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Почтовый адрес организации'"));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
	ПараметрыАдреса.НастройкиПроверки = Неопределено;
	
	ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПараметрыАдреса.Порядок  = 3;
	ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Телефон организации'"));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
	ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
	ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.Факс;
	ПараметрыАдреса.Порядок  = 4;
	ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Факс организации'"));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
	ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
	ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПараметрыАдреса.Порядок  = 5;
	ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Адрес электронной почты организации'"));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
	ПараметрыАдреса.Вид      = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	ПараметрыАдреса.Тип      = Перечисления.ТипыКонтактнойИнформации.Другое;
	ПараметрыАдреса.Порядок  = 5;
	ПараметрыАдреса.Вставить("Подсказка", НСтр("ru='Любая другая контактная информация'"));
	ПараметрыАдреса.Вставить("ВидПоляДругое",     "ОднострочноеШирокое");
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыАдреса);
	
КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//  Сообщать - булево - признак необходимости выводить сообщения
//  НеРегистрироватьВПланахОбмена - булево - необходимость исключить регистрацию изменений в планах обмена
//
Функция ЗаписатьСсылочныйОбъект(СправочникОбъект, НеРегистрироватьВПланахОбмена = Истина) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат Истина;
	КонецЕсли;

	СправочникОбъект.ДополнительныеСвойства.Вставить("НеПроверятьСостояние", Истина);
	Если НеРегистрироватьВПланахОбмена Тогда
		СправочникОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		СправочникОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Попытка
		
		СправочникОбъект.Записать();
		Возврат Истина;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось записать %1 ""%2"" по причине: %2, %4'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
					Строка(ТипЗнч(СправочникОбъект)), 
					?(СправочникОбъект.Метаданные().ДлинаНаименования > 0, СправочникОбъект.Наименование, ""),
					Символы.ПС, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьСобытияОбновления(УровеньЖурналаРегистрации.Ошибка, ТекстСообщения, , СправочникОбъект.Метаданные(), СправочникОбъект.Ссылка);

	КонецПопытки;

	Возврат Ложь;
	
КонецФункции


#КонецОбласти 


#Область ВыполнятьПриКаждомОбновлении

#КонецОбласти


#Область ОбновлениеНа_2_0_34

Процедура Обновление_203420_Общие() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ОблачныеСервисыДенег") Или 
		ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбновленияВНеразделенномРежиме = ОбщегоНазначения.ОбщийМодуль("ОСДОбновлениеИнформационнойБазы");
	Если МодульОбновленияВНеразделенномРежиме <> Неопределено Тогда
		МодульОбновленияВНеразделенномРежиме.Обновление_203420();
	КонецЕсли;
	
КонецПроцедуры

Процедура Обновление_203433() Экспорт
	
	// Обновление способа и функциональных опций синхронизации
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если РазделениеВключено Тогда
		Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			Возврат;
		Иначе
			Способ = Перечисления.СпособыСинхронизацииДанных.СинхронизацияССервисом;
		КонецЕсли;
	Иначе
		Способ = ?(Константы.ИспользоватьСинхронизациюДанных.Получить(), 
				Перечисления.СпособыСинхронизацииДанных.ОбменФайлами, 
				Перечисления.СпособыСинхронизацииДанных.НеИспользовать);
	КонецЕсли;
	Константы.ДеньгиВыбранныйСпособСинхронизации.Установить(Способ);
	
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеНа_2_0_35

Процедура Обновление_203515() Экспорт
	
	ОбновитьНастройкиТранспортаWS();
	ОбновитьПодсистемуСвойств();
	ПроверитьФорматОбменаМобильныхУстройств();
	
КонецПроцедуры

Процедура ПроверитьФорматОбменаМобильныхУстройств()
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МобильноеПриложение.Ссылка КАК Ссылка,
		|	МобильноеПриложение.ВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
		|	МобильноеПриложение.ВерсияОбмена КАК ВерсияОбмена
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	Не МобильноеПриложение.ЭтотУзел
		|	И МобильноеПриложение.ВерсияФорматаОбмена = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		УзелОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		УзелОбъект.ВерсияФорматаОбмена = "1.6.3";
		УзелОбъект.ОбменДанными.Загрузка = Истина;
		УзелОбъект.Записать();
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
КонецПроцедуры

Процедура ОбновитьНастройкиТранспортаWS() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиТранспортаОбменаДанными.*
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбменаДанными КАК НастройкиТранспортаОбменаДанными
	|ГДЕ
	|	ВЫРАЗИТЬ(НастройкиТранспортаОбменаДанными.WSURLВебСервиса КАК СТРОКА(100)) <> """"
	|	И Не НастройкиТранспортаОбменаДанными.WSИспользоватьПередачуБольшогоОбъемаДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Запись = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.WSИспользоватьПередачуБольшогоОбъемаДанных = Истина;
		Запись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры
 

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

#Область ВспомогательныеПроцедурыИФункции

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры


#КонецОбласти 

#Область Служебный_функционал_модуля


Процедура ПроверитьГраницыИтогов()

	Если ОбщегоНазначения.РазделениеВключено() 
		И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеИтогамиИАгрегатамиСлужебный.НадоСдвинутьГраницуИтогов() Тогда
		УправлениеИтогамиИАгрегатамиСлужебный.РассчитатьИтоги();
	КонецЕсли;

КонецПроцедуры

Функция УзлыМобильныхУстройств() 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РАЗЛИЧНЫЕ МобильноеПриложение.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
	|ГДЕ
	|	НЕ МобильноеПриложение.ЭтотУзел";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Узел");
	КонецЕсли;

КонецФункции

Функция ВосстановитьПредопределенныйЭлемент(ИмяСправочника, ИмяПредопределенного, Наименование, Свойства) 
	
	Ссылка = ПолучитьПредопределенный(ИмяСправочника, ИмяПредопределенного);
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	СправочникОбъект = Ссылка.ПолучитьОбъект();
	СправочникОбъект.Наименование = Наименование;
	
	Если Свойства <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Свойства);		
	КонецЕсли;
	
	ЗаписатьСсылочныйОбъект(СправочникОбъект, Ложь);
	
	Возврат Ссылка;
	
КонецФункции
 
Функция ПолучитьПредопределенный(ПолноеИмяиМетаданных, ИмяПредопределенныхДанных, ПрерыватьПоИсключению = Ложь)

	ПолноеИмяПредопределенного = ПолноеИмяиМетаданных + "." + ИмяПредопределенныхДанных;
	Если ПрерыватьПоИсключению Тогда
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяПредопределенного);
	КонецЕсли;
	 
	Попытка
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяПредопределенного);
	Исключение
		// Исключение записываем, но обработку не прерываем
		ЗаписьСобытияОбновления(УровеньЖурналаРегистрации.Ошибка, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), 
				НСтр("ru='Обновление предопределенных данных'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ,ПолноеИмяПредопределенного);
		Возврат Неопределено;
	КонецПопытки; 

КонецФункции

Процедура ЗаписьСобытияОбновления(Уровень, ТекстКомментария, ТипСобытия = "", ОбъектМетаданных = Неопределено, Данные = Неопределено) 
	
	ИмяСобытия = НСтр("ru='Обновление ИБ ""Деньги""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Если ЗначениеЗаполнено(ТипСобытия) Тогда
		ИмяСобытия = ИмяСобытия + "." + ТипСобытия;
	КонецЕсли;
	 
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, ТекстКомментария);
	
КонецПроцедуры
 
Функция СправочникПустой(ИмяСправочника)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаСтправочника.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ТаблицаСтправочника
	|ГДЕ
	|	ТаблицаСтправочника.Предопределенный = Ложь
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка = 0;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции

Процедура ОбновитьСлужебныеЗаписиСправочников() 
	
	БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	РегистрыСведений.СтатистикаСправочников.ОбновитьВсюСтатистикуСправочников();
	РегистрыСведений.ОбработанныеЗначенияСправочников.ОбновитьОбработанныеРеквизитыСправочников();
	
КонецПроцедуры


#КонецОбласти 