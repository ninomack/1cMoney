////////////////////////////////////////////////////////////////////////////////
// ДеньгиКлиент: Общий фунционал конфигурации 1С:Деньги
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает форму обработки ОбзорОсновныхВозможностей
//	
//Параметры:
//	РазделПодсказки - <Строка> - имя раздела, для которого нужно открыть подсказку
//	Форма - <Форма> - форма, из которой открывают подсказку
Процедура ОткрытьПодсказку(РазделПодсказки, Форма = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(РазделПодсказки) Тогда
		Возврат;
	КонецЕсли; 

	ОткрытьФорму("Обработка.ОбзорОсновныхВозможностей.Форма." + РазделПодсказки, , Форма);
	
КонецПроцедуры

// Проверяет, является ли оповещение результатом удаления помеченных объектов
//
//Параметры:
//	ИмяСобытия- Строка - см. ОбработкаОповещения()
//	Параметр- произволный - см. ОбработкаОповещения()
//	Источник- Произвольный - см. ОбработкаОповещения()
//
//Возвращаемое значение:
//	Булево - Истина, если это удаление помеченных
//
Функция ЭтоОповещениеОбУдаленииПомеченных(ИмяСобытия, Параметр, Источник) Экспорт

	Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("УдалениеПомеченных") Тогда
		Возврат Параметр.УдалениеПомеченных = Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Открывает инструкцию из макета во внешнем браузере
//
//Параметры:
//	ИмяМакета    - Строка - имя макета открываемой инструкции
//	ИмяОбработки - Строка - имя обработки, из которой нужно получить макет
//	КаталогИнструкций - Строка - каталог, в который выгружаются макеты
//
Процедура ОткрытьМакетВоВнешнемБраузере(ИмяМакета, ИмяОбработки, КаталогИнструкций = "") Экспорт
	
	#Если Не ВебКлиент Тогда

	Если Не ЗначениеЗаполнено(КаталогИнструкций) Тогда
		КаталогИнструкций = КаталогИнструкций();
	КонецЕсли;
	ИмяФайлаИнструкции = КаталогИнструкций + ИмяМакета + ПолучитьРазделительПутиКлиента() + ИмяМакета + ".htm";
	
	Файл = Новый Файл(ИмяФайлаИнструкции);
	Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() ИЛИ Файл.ПолучитьВремяИзменения() < НачалоЧаса(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
		ИмяФайлаИнструкции = ДеньгиВызовСервера.РаспаковатьФайлыИнструкции(КаталогИнструкций, ИмяМакета, ИмяОбработки);
		Если ИмяФайлаИнструкции = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Извините, эта инструкция не найдена в текущей версии программы'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяФайлаИнструкции = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Извините, эта инструкция не найдена в текущей версии программы'"));
		Возврат;
	ИначеЕсли ИмяФайлаИнструкции = "" Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не удалось распаковать файл инструкции.'"));
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(ИмяФайлаИнструкции);
	
	#КонецЕсли

КонецПроцедуры


#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс


#Область Управление_фоновыми_заданиями

// Пустая структура с описанием условий выполнения последовательности фоновых заданий
Функция НовыйНастройкиЗапускаФоновогоЗадания(НаименованиеФоновогоЗадания = "") Экспорт

	Результат = Новый Структура;
	Результат.Вставить("НаименованиеФоновогоЗадания", НаименованиеФоновогоЗадания);
	Результат.Вставить("ПоследовательностьПроцедур", Новый Массив);
	Результат.Вставить("ОбработчикОжидания");
	Результат.Вставить("ОбработчикЗавершения");
	Результат.Вставить("ОбработчикОшибки");
	Результат.Вставить("ПараметрыМетода");
	Результат.Вставить("ИнтервалОжидания", 0);

	Возврат Результат;
	
КонецФункции

// Последовательно запускает фоновые задания, указанные в параметре "ПоследовательностьПроцедур"
//Алгоритм:
//	1. запускается фоновое задание из первой записи в ПоследовательностьПроцедур. 
//		Если задание не завершено, вызывается ОбработчикОжидания и запускается ожидание завершения задания.
//		В случае ошибки вызывается ОбработчикОшибки
//	2. по завершении фонового задания из ПоследовательностьПроцедур удаляется первая строка и вызывается 
//		ОбработчикЗавершения, в котором можно изменить ПоследовательностьПроцедур и установить новые ПараметрыМетода
//	3. если в ПоследовательностьПроцедур остались записи, выполняется п. 1
//
//Параметры:
//	НастройкиЗапуска - Структура - см. НовыйНастройкиЗапускаФоновогоЗадания()
//
//
Процедура ВыполнитьЭтапФоновогоЗадания(Форма, НастройкиЗапуска, ФоновоеЗадание = Неопределено) Экспорт

	РезультатВыполнения = Новый Структура("НастройкиЗапуска,ВыполненныйЭтап,ФоновоеЗадание", НастройкиЗапуска, "");
	
	ФоновоеЗадание = ДеньгиВызовСервера.ФоновоеЗаданиеЭтапа(Форма.УникальныйИдентификатор, НастройкиЗапуска.ПоследовательностьПроцедур[0], 
								НастройкиЗапуска.ПараметрыМетода, НастройкиЗапуска.НаименованиеФоновогоЗадания);
	РезультатВыполнения.ВыполненныйЭтап = РезультатВыполнения.НастройкиЗапуска.ПоследовательностьПроцедур[0];
	РезультатВыполнения.НастройкиЗапуска.ПоследовательностьПроцедур.Удалить(0);
	
	ДополнительныеПараметры = Новый Структура("Форма, РезультатВыполнения", Форма, РезультатВыполнения);
	ОбработкаЗавершенияОжидания(ФоновоеЗадание, ДополнительныеПараметры);

КонецПроцедуры

// Выполняет обработку результата, полученного из ДлительныеОперацииКлиент.ОжидатьЗавершение
Процедура ОбработкаЗавершенияОжидания(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = ДополнительныеПараметры.РезультатВыполнения;
	РезультатВыполнения.ФоновоеЗадание = ФоновоеЗадание;
	
	Если РезультатВыполнения.ФоновоеЗадание <> Неопределено И РезультатВыполнения.ФоновоеЗадание.Статус = "Выполняется" Тогда
		
		Если РезультатВыполнения.НастройкиЗапуска.ОбработчикОжидания <> Неопределено Тогда
			// оповещение формы об ожидании завершения
			ВыполнитьОбработкуОповещения(РезультатВыполнения.НастройкиЗапуска.ОбработчикОжидания, РезультатВыполнения);
		КонецЕсли;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ДополнительныеПараметры.Форма);
		ПараметрыОжидания.ВыводитьОкноОжидания  = Ложь;
		ПараметрыОжидания.ВыводитьСообщения     = Истина;
		//ПараметрыОжидания.Интервал              = ?(РезультатВыполнения.НастройкиЗапуска.Свойство("ИнтервалОжидания"), РезультатВыполнения.НастройкиЗапуска.ИнтервалОжидания, 0);
		ПараметрыОжидания.Интервал              = 0;
		СлужебныйОбработчик = Новый ОписаниеОповещения("ОбработкаЗавершенияОжидания", ДеньгиКлиент, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения.ФоновоеЗадание, СлужебныйОбработчик, ПараметрыОжидания);
		
	ИначеЕсли РезультатВыполнения.ФоновоеЗадание <> Неопределено И РезультатВыполнения.ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		Если РезультатВыполнения.НастройкиЗапуска.ОбработчикЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(РезультатВыполнения.НастройкиЗапуска.ОбработчикЗавершения, РезультатВыполнения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатВыполнения.НастройкиЗапуска.ПоследовательностьПроцедур) Тогда
			
			Если РезультатВыполнения.НастройкиЗапуска.ОбработчикОжидания <> Неопределено Тогда
				// оповещение формы об ожидании завершения
				ВыполнитьОбработкуОповещения(РезультатВыполнения.НастройкиЗапуска.ОбработчикОжидания, РезультатВыполнения);
			КонецЕсли;
			// Запуск следующего этапа задания в фоне
			ВыполнитьЭтапФоновогоЗадания(ДополнительныеПараметры.Форма, РезультатВыполнения.НастройкиЗапуска);
			
		КонецЕсли;
		
	Иначе 
		// прекрщено пользователем или по исключению
		Если РезультатВыполнения.НастройкиЗапуска.ОбработчикОшибки <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(РезультатВыполнения.НастройкиЗапуска.ОбработчикОшибки, РезультатВыполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьФоновоеЗадание(РезультатЗапускаФоновогоЗадания) Экспорт
	
	ОчиститьСообщения();
	Если РезультатЗапускаФоновогоЗадания <> Неопределено и РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ДеньгиВызовСервера.ОтменитьФоновоеЗадание(РезультатЗапускаФоновогоЗадания);
	КонецЕсли;
	РезультатЗапускаФоновогоЗадания = Неопределено;
	НастройкиЗапуска = Неопределено;
	
КонецПроцедуры

#КонецОбласти 




#КонецОбласти


#Область СлужебныеПроцедурыИФункции


Функция КаталогИнструкций()

	Разделитель = ПолучитьРазделительПутиКлиента();
	КаталогВсехИнструкций = КаталогВременныхФайлов();
	КаталогВсехИнструкций = КаталогВсехИнструкций + ?(Прав(КаталогВсехИнструкций, 1) = Разделитель, "", Разделитель) + "MoneyTutorials.tmp";
	Возврат КаталогВсехИнструкций;

КонецФункции


#КонецОбласти
