#Если Не ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// ДЕНЬГИ

#Область ФормыОтчетов

Процедура ЗаполнитьСлужебныеРеквизитыФормы(ЭтаФорма) Экспорт
	
	Параметры       = ЭтаФорма.Параметры;
	ОтчетОбъект     = ПолучитьОтчетОбъект(ЭтаФорма);
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	// Параметры работы формы
	ЭтаФорма.ПараметрыРаботыФормы = Новый Структура(
	"ВыводитьСуммуВыделенныхЯчеек,
	|РежимРасшифровкиСКД, 
	|РежимРасшифровкиОтбор, 
	|СформироватьПриОткрытии");
	
	ПараметрыРаботыФормы = ЭтаФорма.ПараметрыРаботыФормы;
	ПараметрыРаботыФормы.РежимРасшифровкиСКД = Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено;
	ПараметрыРаботыФормы.РежимРасшифровкиОтбор = Параметры.Свойство("Отбор") И ЗначениеЗаполнено(Параметры.Отбор);
	ПараметрыРаботыФормы.СформироватьПриОткрытии = (Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина);
	ПараметрыРаботыФормы.ВыводитьСуммуВыделенныхЯчеек = НЕ (Параметры.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Параметры.ВыводитьСуммуВыделенныхЯчеек = Ложь);
	
	// Параметры объекта Отчет
	ЭтаФорма.ПараметрыОбъекта = Новый Структура(
	"АдресСхемыКомпоновкиДанных, 
	|ИмяОбъекта, 
	|ИмяХранилищаВариантов, 
	|КлючОбъекта, 
	|ЭтоВнешнийОтчет");
	
	ПараметрыОбъекта = ЭтаФорма.ПараметрыОбъекта;
	ПараметрыОбъекта.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбъекта.ИмяОбъекта = ОтчетМетаданные.Имя;
	ПараметрыОбъекта.КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	ПараметрыОбъекта.ИмяХранилищаВариантов = ?(ОтчетМетаданные.ХранилищеВариантов = Неопределено, "", ОтчетМетаданные.ХранилищеВариантов.Имя);
	ПараметрыОбъекта.ЭтоВнешнийОтчет = (Метаданные.Отчеты.Найти(ПараметрыОбъекта.ИмяОбъекта) = Неопределено);
	
	Если НЕ ПараметрыРаботыФормы.РежимРасшифровкиСКД Тогда
		ПроверитьКлючТекущегоВарианта(ЭтаФорма.КлючТекущегоВарианта, ПараметрыОбъекта);
	КонецЕсли;
	
	// Параметры событий отчета
	ТекущаяВерсияСобытийОтчетов = ОтчетыКлиентСервер.ТекущаяВерсияСобытийОтчетов();
	
	Попытка
		ЭтаФорма.ПараметрыСобытийОтчета = ОтчетОбъект.ПараметрыСобытийОтчета();
	Исключение
		ЭтаФорма.ПараметрыСобытийОтчета = ОтчетыКлиентСервер.ПараметрыСобытийОтчетаПоУмолчанию(ТекущаяВерсияСобытийОтчетов);
	КонецПопытки;
	
	Если ЭтаФорма.ПараметрыСобытийОтчета.ВерсияСобытийОтчета <> ТекущаяВерсияСобытийОтчетов Тогда
		ОтчетыКлиентСервер.ПривестиПараметрыСобытийОтчетаКТекущейВерсии(ЭтаФорма.ПараметрыСобытийОтчета);
	КонецЕсли;
	
КонецПроцедуры

// Создает и удаляет элементы и реквизиты формы для пользовательских параметров отчета.
// Добавленные реквизиты формы хранятся в структуре ПользовательскиеПараметрыОтчета:
// Ключ - имя реквизита формы, Значение - имя параметра.
//
// Параметры:
//	ИменаИсключаемыхПараметров  - Строка - Имена параметров через запятую. Элементы формы для этих параметров будут созданы платформой.
//
Процедура ОбновитьЭлементыПользовательскихПараметров(ЭтаФорма, ИменаИсключаемыхПараметров) Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	УдаляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	
	ИсключаемыеПараметры = Новый Структура(ИменаИсключаемыхПараметров);
	
	Если ЭтаФорма.ПользовательскиеПараметрыОтчета = Неопределено Тогда
		ЭтаФорма.ПользовательскиеПараметрыОтчета = Новый Структура;
	КонецЕсли;
	ПользовательскиеПараметрыОтчета = ЭтаФорма.ПользовательскиеПараметрыОтчета;
	
	// Запомним удаляемые реквизиты, удалим элементы формы
	Для каждого КлючИЗначение Из ПользовательскиеПараметрыОтчета Цикл
		УдаляемыеРеквизиты.Добавить(КлючИЗначение.Ключ);
		Элементы.Удалить(Элементы[КлючИЗначение.Ключ]);
	КонецЦикла;
	ПользовательскиеПараметрыОтчета.Очистить();
	
	// Добавим реквизиты формы для пользовательских параметров
	ДоступныеПараметры = Новый Структура;
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	Для каждого ЗначениеПараметраДанных Из ПараметрыДанных.Элементы Цикл
		
		ДоступныйПараметр = ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ЗначениеПараметраДанных.Параметр);
		
		Если НЕ ДоступныйПараметр.Видимость
			ИЛИ НЕ ЗначениеЗаполнено(ЗначениеПараметраДанных.ИдентификаторПользовательскойНастройки)
			ИЛИ ЗначениеПараметраДанных.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
			ИЛИ ИсключаемыеПараметры.Свойство(Строка(ДоступныйПараметр.Параметр)) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПараметра = Строка(ДоступныйПараметр.Параметр);
		ПредставлениеПараметра = ОтчетыКлиентСервер.ПредставлениеПараметраДанныхНКДПоИмени(КомпоновщикНастроек, ИмяПараметра);
		ИмяРеквизитаФормы = "ПараметрОтчета_" + ИмяПараметра;
		
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизитаФормы, ДоступныйПараметр.ТипЗначения, , ПредставлениеПараметра);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		ПользовательскиеПараметрыОтчета.Вставить(ИмяРеквизитаФормы, ИмяПараметра);
		ДоступныеПараметры.Вставить(ИмяРеквизитаФормы, ДоступныйПараметр);
		
		ПользовательскоеЗначениеПараметра = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЗначениеПараметраДанных.ИдентификаторПользовательскойНастройки);
		ПользовательскоеЗначениеПараметра.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		
	КонецЦикла;
	
	// Обновим реквизиты формы
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Добавим элементы формы
	ТипБулево = Тип("Булево");
	Для каждого КлючИЗначение Из ПользовательскиеПараметрыОтчета Цикл
		ИмяПараметра = КлючИЗначение.Ключ;
		Флажок = ТипЗнч(ЭтаФорма[ИмяПараметра]) = ТипБулево И НЕ ЗначениеЗаполнено(ДоступныеПараметры[ИмяПараметра].ФорматРедактирования);
		НовыйЭлементФормы = Элементы.Добавить(ИмяПараметра, Тип("ПолеФормы"), Элементы.ПараметрыОтчета);
		НовыйЭлементФормы.ПутьКДанным = ИмяПараметра;
		НовыйЭлементФормы.Вид = ?(Флажок, ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		НовыйЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ПараметрОтчетаПриИзменении");
		НовыйЭлементФормы.ФорматРедактирования = ДоступныеПараметры[ИмяПараметра].ФорматРедактирования;
		Если НЕ Флажок И ТипЗнч(ЭтаФорма[ИмяПараметра]) = ТипБулево Тогда
			НовыйЭлементФормы.РастягиватьПоГоризонтали = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает объект текущего отчета из экспортной переменной формы ОтчетОбъект или создает из реквизита формы.
//
Функция ПолучитьОтчетОбъект(ЭтаФорма) Экспорт
	
	Если ЭтаФорма.ОтчетОбъект <> Неопределено Тогда
		Возврат ЭтаФорма.ОтчетОбъект; 
	Иначе
		Возврат ЭтаФорма.РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
КонецФункции

// Группирует область параметров по ячейкам-идентификаторам, содержащим текст "ИД_НачатьГруппировку", "ИД_ЗакончитьГруппировку".
// Колонка, содержащая ячейки-идентификаторы удаляется.
//
Процедура СгруппироватьОбластьПараметров(ТабличныйДокумент, НомерКолонкиИдентификаторов = 3) Экспорт

	НомерПервойСтроки = Неопределено;
	НомерПоследнейСтроки = Неопределено;
	Для Инд = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		Область = ТабличныйДокумент.Область(Инд, НомерКолонкиИдентификаторов);
		Если Область.Текст = "ИД_НачатьГруппировку" Тогда
			НомерПервойСтроки = Инд;
		ИначеЕсли Область.Текст = "ИД_ЗакончитьГруппировку" Тогда
			НомерПоследнейСтроки = Инд;
			ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(, НомерКолонкиИдентификаторов, Инд, НомерКолонкиИдентификаторов), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НомерПервойСтроки <> Неопределено И НомерПоследнейСтроки <> Неопределено Тогда
		ТабличныйДокумент.Область(НомерПервойСтроки, , НомерПоследнейСтроки).Сгруппировать();
	КонецЕсли;

КонецПроцедуры

// Изменяет параметры ВыбранногоПоляКомпоновкиДанных по указанному пути к данным
//Изменяются только те параметры, которые не равны НЕОПРЕДЕЛЕНО
//
//Параметры:
//	Настройки - НастройкиКомпоновкиДанных - обязательный
//	ПутьКДанным - Строка - обязательный
//	Заголовок  - Строка или Неопределено - (здесь и далее см. синтаксис-помощник ВыбранноеПолеКомпоновкиДанных)
//	Использование - Булево или Неопределено
//	РежимОтображения  - РежимОтображенияЭлементаНастройкиКомпоновкиДанных  или Неопределено
//
Процедура ИзменитьНастройкиВыбранногоПоля(Настройки, ПутьКДанным, Заголовок = Неопределено, Использование = Неопределено, РежимОтображения = Неопределено) Экспорт

	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ВыбранныеПоля  = ПолучитьВыбранныеПоляНастроекСКД(Настройки.Выбор.Элементы, ПолеКомпоновки);
	
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		
		Если Заголовок <> Неопределено Тогда
			ВыбранноеПоле.Заголовок = Заголовок;
		КонецЕсли;
		
		Если Использование <> Неопределено Тогда
			ВыбранноеПоле.Использование = Использование;
		КонецЕсли;
		
		Если РежимОтображения <> Неопределено Тогда
			ВыбранноеПоле.РежимОтображения = РежимОтображения;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает массив выбранных полей компоновки данных
Функция ПолучитьВыбранныеПоляНастроекСКД(КоллекцияВыбранныхПолей, ПолеКомпоновки, Массив = Неопределено) Экспорт

	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;
	
	ТипГруппа = Тип("ГруппаВыбранныхПолейКомпоновкиДанных");
	ТипПоле   = Тип("ВыбранноеПолеКомпоновкиДанных");
	
	Для каждого ВыбранноеПоле Из КоллекцияВыбранныхПолей Цикл
		
		Если ТипЗнч(ВыбранноеПоле) = ТипГруппа Тогда
			Массив = ПолучитьВыбранныеПоляНастроекСКД(ВыбранноеПоле.Элементы, ПолеКомпоновки, Массив);
		ИначеЕсли ТипЗнч(ВыбранноеПоле) = ТипПоле И ВыбранноеПоле.Поле = ПолеКомпоновки Тогда
			Массив.Добавить(ВыбранноеПоле);
		КонецЕсли;
		
	КонецЦикла;

	Возврат Массив;
	
КонецФункции

// Возвращает массив группировок с указанным именем
Функция НайтиГруппировкуПоИмени(КоллекцияГруппировок, ИмяГруппировки, Массив = Неопределено) Экспорт

	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из КоллекцияГруппировок Цикл
		
		Если ЭлементКоллекции.Имя = ИмяГруппировки Тогда
			Массив.Добавить(ЭлементКоллекции);
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ЭлементКоллекции);
		Если ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Или ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			НайтиГруппировкуПоИмени(ЭлементКоллекции.Структура, ИмяГруппировки, Массив);
			
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			НайтиГруппировкуПоИмени(ЭлементКоллекции.Строки, ИмяГруппировки, Массив);
			НайтиГруппировкуПоИмени(ЭлементКоллекции.Колонки, ИмяГруппировки, Массив);
			
		ИначеЕсли ТипЭлемента = Тип("ДиаграммаКомпоновкиДанных") Тогда
			
			НайтиГруппировкуПоИмени(ЭлементКоллекции.Точки, ИмяГруппировки, Массив);
			НайтиГруппировкуПоИмени(ЭлементКоллекции.Серии, ИмяГруппировки, Массив);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат Массив;
	
КонецФункции

// Изменяет свойства группировок с указанным именем
Процедура ИзменитьНастройкиГруппировкиПоИмени(Настройки, ИмяГруппировки, СтруктураИзменяемыхЗначений, ПользовательскиеНастройки = Неопределено) Экспорт
	
	МассивГруппировок = ОтчетыСервер.НайтиГруппировкуПоИмени(Настройки.Структура, ИмяГруппировки);
	Для каждого Группировка Из МассивГруппировок Цикл
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			ПользовательскаяНастройкаГруппировки = ПользовательскиеНастройки.Элементы.Найти(Группировка.ИдентификаторПользовательскойНастройки);
			Если ПользовательскаяНастройкаГруппировки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ПользовательскаяНастройкаГруппировки, СтруктураИзменяемыхЗначений);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Группировка, СтруктураИзменяемыхЗначений);
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает новые настройки в компоновщик без сброса пользовательских настроек.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Куда надо загрузить настройки.
//   НастройкиКД - НастройкиКомпоновкиДанных - Загружаемые настройки варианта.
//   ПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено - Необязательный.
//       Загружаемые пользовательские настройки. Если не указан, то пользовательские настройки не загружаются.
//
Функция ЗагрузитьНастройки(КомпоновщикНастроекКД, НастройкиКД, ПользовательскиеНастройкиКД = Неопределено) Экспорт
	НастройкиЗагружены = (ТипЗнч(НастройкиКД) = Тип("НастройкиКомпоновкиДанных") И НастройкиКД <> КомпоновщикНастроекКД.Настройки);
	Если НастройкиЗагружены Тогда
		Если ТипЗнч(ПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
		КонецЕсли;
		КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
	КонецЕсли;
	Если ТипЗнч(ПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных")
		И ПользовательскиеНастройкиКД <> КомпоновщикНастроекКД.ПользовательскиеНастройки Тогда
		КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиКД);
	КонецЕсли;
	Возврат НастройкиЗагружены;
КонецФункции

#КонецОбласти 


#Область РаботаСЗапросами

// Добавляет в текст пакетного запроса строку, отделяющую один запрос от другого
//
//Параметры:
//	ТекстЗапроса - Строка - текст, в который нужно добавить разделитель
//	ИмяДобавляемогоЗапроса - Строка (необязательно) - имя создаваемой временной таблицы или выборки
//	СтруктураЗапроса - Структура (необязательно) - структура, в которую следует добавить индекс для получения результата запроса по его имени
//
Процедура ДобавитьРазделительВТекстЗапроса(ТекстЗапроса, ИмяДобавляемогоЗапроса = "", СтруктураЗапроса = Неопределено) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", Символы.ПС + ";" + Символы.ПС + Символы.ПС);
	ТекстЗапроса = ТекстЗапроса + "//" + ?(ПустаяСтрока(ИмяДобавляемогоЗапроса), "", " " + ИмяДобавляемогоЗапроса + " ") 
				+ "//////////////////////////////////////////////////////////////////////////////" + Символы.ПС;
	
	Если ЗначениеЗаполнено(ИмяДобавляемогоЗапроса) И ТипЗнч(СтруктураЗапроса) = Тип("Структура") Тогда
		СтруктураЗапроса.Вставить(ИмяДобавляемогоЗапроса, СтруктураЗапроса.Количество());
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, заполненную результатами пакетного запроса:
//	Ключ - Имя результата запроса, начинающегося с "Выборка_"
//	Значение - Результат запроса
//т.о. из результатов пакетного запроса исключаются лишние результаты, 
//а к оставшимся можно обращаться по имени
//
//Параметры:
//	Запрос - Запрос, готовый к исполнению (параметры установлены, текст заполнен)
//	СтруктураЗапроса - Структура, описывающая все запросы, используемые в пакетном запросе.
//
//Возвращаемое значение:
//	Структура - заполнена результатами пакетного запроса
//
Функция ПолучитьВыборкиИзПакетногоЗапроса(Запрос, СтруктураЗапроса) Экспорт

	КоличествоЗапросов = СтруктураЗапроса.Количество();
	Если КоличествоЗапросов = 0 Тогда
		ВызватьИсключение НСтр("ru='Структура запроса не заполнена!'");
	КонецЕсли;
	Если КоличествоЗапросов > 250 Тогда
		ВызватьИсключение НСтр("ru='Слишком много запросов в пакете!'");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Для каждого КлючИЗначение Из СтруктураЗапроса Цикл
		Если Лев(КлючИЗначение.Ключ, 8) = "Выборка_" Тогда
			Результат.Вставить(КлючИЗначение.Ключ, МассивРезультатов[КлючИЗначение.Значение]);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Добавляет в запрос параметр и тексты запросов для создания временных таблиц с курсами валют.
//	Создаваемые таблицы: ВалютыНаНачало, КурсыНаНачало
//	Добавляемый параметр запроса: ДатаКурсовНаНачало
//
//Парметры:
//	Запрос - Запрос, который будет дополнен временными таблицами
//	СтруктураЗапроса - Структура, в которой будут добавлены имена временных таблиц и их индексы в массиве результатов запроса
//	ДатаКурсовНаначало - Дата - которая будет установлена в параметрах запроса
//
Процедура ДополнитьЗапросКурсамиВалютНаНачало(Запрос, СтруктураЗапроса, ДатаКурсовНаНачало) Экспорт

	Запрос.УстановитьПараметр("ДатаКурсовНаНачало", ДатаКурсовНаНачало);
	ДополнитьТекстЗапросаКурсамиВалют(Запрос, СтруктураЗапроса, Истина);

КонецПроцедуры

// Добавляет в запрос параметр и тексты запросов для создания временных таблиц с курсами валют.
//	Создаваемые таблицы: ВалютыНаКонец, КурсыНаКонец
//	Добавляемый параметр запроса: ДатаКурсовНаКонец
//
//Парметры:
//	Запрос - Запрос, который будет дополнен временными таблицами
//	СтруктураЗапроса - Структура, в которой будут добавлены имена временных таблиц и их индексы в массиве результатов запроса
//	ДатаКурсовКонец - Дата - которая будет установлена в параметрах запроса
//
Процедура ДополнитьЗапросКурсамиВалютНаКонец(Запрос, СтруктураЗапроса, ДатаКурсовНаКонец) Экспорт

	Запрос.УстановитьПараметр("ДатаКурсовНаКонец", ДатаКурсовНаКонец);
	ДополнитьТекстЗапросаКурсамиВалют(Запрос, СтруктураЗапроса, Ложь);

КонецПроцедуры



#КонецОбласти 

#Область QR_коды

Функция КомпонентаФормированияQRКода()
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода. Подробности в журнале регистрации.'");
	
	QRCodeGenerator = ОбщегоНазначения.ПодключитьКомпонентуИзМакета("QRCodeExtension", "ОбщийМакет.КомпонентаПечатиQRКода");
	Если QRCodeGenerator = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат QRCodeGenerator;
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	ГенераторQRКода = КомпонентаФормированияQRКода();
	Если ГенераторQRКода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции


#КонецОбласти 

// Конец ДЕНЬГИ

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// ДЕНЬГИ

// Фоновое задание по формированию отчета
//
//Параметры:
//	Параметры - Структура - параметры формирования отчета
//	АдресХранилища - Строка - адрес для размещения результата
//
Процедура СформироватьОтчетВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("ТабличныйДокумент, Расшифровка,
		|Успех, ТекстОшибки");
	Результат.Успех       = Ложь;
	Результат.ТекстОшибки = "";
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	ТекстСообщений  = "";
	Если Не Параметры.ПараметрыОбъекта.ЭтоВнешнийОтчет Тогда
		Отчет  = Отчеты[Параметры.ПараметрыОбъекта.ИмяОбъекта].Создать();
	Иначе
		ВызватьИсключение НСтр("ru='Внешние отчеты не предназначены для выполнения в фоновом задании'");
	КонецЕсли;
	
	Параметры.ОтчетТабличныйДокумент.Очистить();
	
	// Заполняем настройки
	КомпоновщикНастроекКД = Отчет.КомпоновщикНастроек;
	КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет.СхемаКомпоновкиДанных));
	Если Параметры.ФиксированныеНастройкиКД <> Неопределено Тогда
		КомпоновщикНастроекКД.ЗагрузитьФиксированныеНастройки(Параметры.ФиксированныеНастройкиКД);
	КонецЕсли;
	Если Параметры.НастройкиКД <> Неопределено Или Параметры.ПользовательскиеНастройкиКД <> Неопределено Тогда
		ЗагрузитьНастройки(КомпоновщикНастроекКД, Параметры.НастройкиКД, Параметры.ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	// Сформируем отчет
	Попытка
		
		Отчет.СкомпоноватьРезультат(Параметры.ОтчетТабличныйДокумент, Параметры.ДанныеРасшифровки);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Если НЕ Параметры.ПовторноеФормирование И Найти(ПодробноеОписание, "Поле не найдено") > 0 Тогда
			
			// В случае изменения настроек или схемы отчета некоторые поля могли стать недоступными.
			//Для обхода этой проблемы попробуем восстановить в отчете настройки по умолчанию и повторить формирование
			
			ЭтоСтандартныйВариант = ОтчетыВызовСервера.ЭтоСтандартныйВариант(Параметры.КлючТекущегоВарианта, Параметры.ПараметрыОбъекта.АдресСхемыКомпоновкиДанных);
			Если ЭтоСтандартныйВариант Тогда
				ТекстСообщений = НСтр("ru='В отчете изменился состав полей. 
					|Для корректной работы отчета восстановите настройки по умолчанию с помощью меню ""Еще..."" - ""Установить стандартные настройки"".'");
			Иначе
				ТекстСообщений = НСтр("ru='В отчете изменился состав полей! 
					|Откройте вариант отчета в меню  ""Еще..."" - ""Изменить вариант..."", найдите и замените все поля, помеченные красным крестиком.'");
			КонецЕсли;
			
			ВызватьИсключение(ТекстСообщений);
			
		КонецЕсли;
		
		// Сбросим служебные пользовательские настройки
		Если Параметры.Свойство("ПараметрЗаголовокОтчета") И Параметры.ПараметрЗаголовокОтчета <> Неопределено Тогда
			Параметры.ПараметрЗаголовокОтчета.ИдентификаторПользовательскойНастройки = "";
		КонецЕсли;
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	// Свернем группы, включая вложенные
	Если Параметры.УровеньСверткиСтрокПриФормировании > 0 Тогда
		ТекУровень = Параметры.ОтчетТабличныйДокумент.КоличествоУровнейГруппировокСтрок() - 1;
		Пока ТекУровень >= Параметры.УровеньСверткиСтрокПриФормировании - 1 Цикл
			Параметры.ОтчетТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(ТекУровень);
			ТекУровень = ТекУровень - 1;
		КонецЦикла;
	КонецЕсли; 
	
	Результат.ТабличныйДокумент = Параметры.ОтчетТабличныйДокумент;
	Результат.Расшифровка       = Параметры.ДанныеРасшифровки;
	Результат.Успех             = Истина;
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры
 
 

// Конец ДЕНЬГИ


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// ДЕНЬГИ

// Проверяет, существует ли вариант с ключом КлючТекущегоВарианта.
// Если нет, заменяет на ключ первого варианта текущей СКД.
//
Процедура ПроверитьКлючТекущегоВарианта(КлючТекущегоВарианта, ПараметрыОбъекта)
	
	ВариантНайден = Ложь;
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыОбъекта.АдресСхемыКомпоновкиДанных);
	Если СхемаКомпоновкиДанных <> Неопределено И СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючТекущегоВарианта) <> Неопределено Тогда
		// Это вариант из метаданных отчета
		ВариантНайден = Истина;
	Иначе
		Если ПараметрыОбъекта.ИмяХранилищаВариантов = "" Тогда
			МенеджерХранилища = ХранилищеВариантовОтчетов;
		Иначе
			МенеджерХранилища = ХранилищаНастроек[ПараметрыОбъекта.ИмяХранилищаВариантов];
		КонецЕсли;
		Если МенеджерХранилища.ПолучитьОписание(ПараметрыОбъекта.КлючОбъекта, КлючТекущегоВарианта) <> Неопределено Тогда
			// Это пользовательский вариант
			ВариантНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВариантНайден И СхемаКомпоновкиДанных <> Неопределено Тогда
		КлючТекущегоВарианта = СхемаКомпоновкиДанных.ВариантыНастроек[0].Имя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаКурсамиВалют(Запрос, СтруктураЗапроса, НаНачало)

	ИмяВремТаблицы = ?(Наначало, "ВалютыНаНачало", "ВалютыНаКонец");
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КурсыНаКонец.Валюта КАК Валюта,
	|	КурсыНаКонец.Курс КАК Курс,
	|	КурсыНаКонец.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВалютыНаКонец
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурсовНаКонец, БазоваяВалюта = &ВалютаУчета) КАК КурсыНаКонец
	|";
	
	Если НаНачало Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НаКонец", "НаНачало");
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(Запрос.Текст, ИмяВремТаблицы, СтруктураЗапроса);
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	#КонецОбласти 
	
	ИмяВремТаблицы = ?(Наначало, "КурсыНаНачало", "КурсыНаКонец");
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Курсы.Валюта КАК Валюта,
	|	КурсыПересчета.Валюта КАК ВалютаПересчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыПересчета.Курс, 0) = 0
	|				ИЛИ ЕСТЬNULL(Курсы.Кратность, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Курсы.Курс, 0) * ЕСТЬNULL(КурсыПересчета.Кратность, 0) / (КурсыПересчета.Курс * Курсы.Кратность)
	|	КОНЕЦ КАК КурсПересчета
	|ПОМЕСТИТЬ КурсыНаКонец
	|ИЗ
	|	ВалютыНаКонец КАК Курсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютыНаКонец КАК КурсыПересчета
	|		ПО ИСТИНА
	|";
	
	Если НаНачало Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НаКонец", "НаНачало");
	КонецЕсли;
	
	ОтчетыСервер.ДобавитьРазделительВТекстЗапроса(Запрос.Текст, ИмяВремТаблицы, СтруктураЗапроса);
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	#КонецОбласти 
	
КонецПроцедуры


// Конец ДЕНЬГИ

#КонецОбласти


#КонецЕсли

