////////////////////////////////////////////////////////////////////////////////
// Общий модуль РазделыУчета: содержит универсальный функционал по работе с 
//	регистром бухгалтерии, планом счетов и субконто.
//		* Обслуживание плана счетов РазделыУчета, 
//		* Формаирование движений по регистру бухгалтерии ЖурналОпераций
//		* Получение остатков по счетам с учетом субконто
//		* Определение субконто для использования в операциях 
//		* Различные проверки
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// * Формирование проводок документов

// Добавляет одну проводку, если вавлюты Дт и Кт одинаоквы, и две проводки 
//	(по правилу обмена валюты) - если валюты различаются
// Возвращает массив добавленных проводок
Функция ДобавитьПроводкуВДвижения(ЖурналОпераций, Период, Регистратор, 
									СчетДт, СубконтоДт1, СубконтоДт2, СуммаВВалютеДт, ВалютаДт, 
									СчетКт, СубконтоКт1, СубконтоКт2, СуммаВВалютеКт, ВалютаКт, 
									Содержание = "", ДопАналитика = Неопределено) Экспорт

	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СчетДт) ИЛи НЕ ЗначениеЗаполнено(СчетКт) 
		ИЛИ НЕ ЗначениеЗаполнено(ВалютаДт) ИЛи НЕ ЗначениеЗаполнено(ВалютаКт) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	СвойствоСчетаДт = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(СчетДт);
	СвойствоСчетаКт = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(СчетКт);
	
	Если ВалютаДт = ВалютаКт Тогда
		
		// Добавляем 1 проводку
		НоваяПроводка = ЖурналОпераций.Добавить();
		НоваяПроводка.Период      = Период;
		НоваяПроводка.Регистратор = Регистратор;
		НоваяПроводка.Валюта      = ВалютаДт;
		
		НоваяПроводка.СчетДт = СчетДт;
		НоваяПроводка.СубконтоДт.Вставить(СвойствоСчетаДт.ВидСубконто1, СубконтоДт1);
		Если СвойствоСчетаДт.КоличествоСубконто > 1 И ЗначениеЗаполнено(СубконтоДт2) Тогда
			НоваяПроводка.СубконтоДт.Вставить(СвойствоСчетаДт.ВидСубконто2, СубконтоДт2);
		КонецЕсли; 
		
		НоваяПроводка.СчетКт = СчетКт;
		НоваяПроводка.СубконтоКт.Вставить(СвойствоСчетаКт.ВидСубконто1, СубконтоКт1);
		Если СвойствоСчетаКт.КоличествоСубконто > 1 И ЗначениеЗаполнено(СубконтоКт2) Тогда
			НоваяПроводка.СубконтоКт.Вставить(СвойствоСчетаКт.ВидСубконто2, СубконтоКт2);
		КонецЕсли; 
		
		НоваяПроводка.ВалютнаяСумма = СуммаВВалютеДт;
		НоваяПроводка.Содержание    = Содержание;
		
		Результат.Добавить(НоваяПроводка);
		
	Иначе
		
		// по правилам обмена валют: расход валюты в разделе учета (например, в кошельке)
		НоваяПроводка = ЖурналОпераций.Добавить();
		НоваяПроводка.Период      = Период;
		НоваяПроводка.Регистратор = Регистратор;
		НоваяПроводка.Валюта      = ВалютаКт;
		
		НоваяПроводка.СчетДт = ПланыСчетов.РазделыУчета.Капитал;
		НоваяПроводка.СубконтоДт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов, Справочники.СтатьиРасходов.ОбменВалюты);
		Если ДопАналитика <> Неопределено Тогда
			НоваяПроводка.СубконтоДт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.Аналитика, ДопАналитика);
		КонецЕсли; 
		
		НоваяПроводка.СчетКт = СчетКт;
		НоваяПроводка.СубконтоКт.Вставить(СвойствоСчетаКт.ВидСубконто1, СубконтоКт1);
		Если СвойствоСчетаКт.КоличествоСубконто > 1 И ЗначениеЗаполнено(СубконтоКт2) Тогда
			НоваяПроводка.СубконтоКт.Вставить(СвойствоСчетаКт.ВидСубконто2, СубконтоКт2);
		КонецЕсли; 
		
		НоваяПроводка.ВалютнаяСумма = СуммаВВалютеКт;
		НоваяПроводка.Содержание    = Содержание;
		
		// Заполняем информацию для представления в отчетах движения в разных валютах
		НоваяПроводка.РазделВалютнойОперации = СчетДт;
		НоваяПроводка.ОбъектВалютнойОперации = СубконтоДт1;
		НоваяПроводка.СуммаВалютнойОперации  = СуммаВВалютеДт;
		НоваяПроводка.ВалютаВалютнойОперации = ВалютаДт;
		
		Результат.Добавить(НоваяПроводка);
		
		
		// ...и доход валюты в кредите
		НоваяПроводка = ЖурналОпераций.Добавить();
		НоваяПроводка.Период      = Период;
		НоваяПроводка.Регистратор = Регистратор;
		НоваяПроводка.Валюта      = ВалютаДт;
		
		НоваяПроводка.СчетДт = СчетДт;
		НоваяПроводка.СубконтоДт.Вставить(СвойствоСчетаДт.ВидСубконто1, СубконтоДт1);
		Если СвойствоСчетаДт.КоличествоСубконто > 1 И ЗначениеЗаполнено(СубконтоДт2) Тогда
			НоваяПроводка.СубконтоДт.Вставить(СвойствоСчетаДт.ВидСубконто2, СубконтоДт2);
		КонецЕсли; 
		
		НоваяПроводка.СчетКт = ПланыСчетов.РазделыУчета.Капитал;
		НоваяПроводка.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов, Справочники.СтатьиДоходов.ОбменВалюты);
		Если ДопАналитика <> Неопределено Тогда
			НоваяПроводка.СубконтоДт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.Аналитика, ДопАналитика);
		КонецЕсли; 
		
		НоваяПроводка.ВалютнаяСумма = СуммаВВалютеДт;
		НоваяПроводка.Содержание    = Содержание;
		
		// Заполняем информацию для представления в отчетах движения в разных валютах
		НоваяПроводка.РазделВалютнойОперации = СчетКт;
		НоваяПроводка.ОбъектВалютнойОперации = СубконтоКт1;
		НоваяПроводка.СуммаВалютнойОперации  = СуммаВВалютеКт;
		НоваяПроводка.ВалютаВалютнойОперации = ВалютаКт;
		
		Результат.Добавить(НоваяПроводка);
		
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// * Получение остатков

// Возвращает остаток регистра бухгалтерии для указанных счета и субконто
Функция ПолучитьОстатокПоСубконто(Счет, Субконто, Период = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Счет) ИЛИ НЕ ЗначениеЗаполнено(Субконто) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субконто", Субконто);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, КонецДня(ТекущаяДатаСеанса()), Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(жОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(&Период, Счет В ИЕРАРХИИ (&Счет), , Субконто1 = &Субконто) КАК жОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат ?(Не ЗначениеЗаполнено(Выборка.ВалютнаяСуммаОстаток), 0, Выборка.ВалютнаяСуммаОстаток);
	КонецЕсли; 

КонецФункции

// Возвращает остаток регистра бухгалтерии для указанных кошелька и финансовой цели
Функция ПолучитьОстатокПоФинцели(Кошелек, ФинансоваяЦель, Период = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Кошелек) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субконто1", Кошелек);
	Запрос.УстановитьПараметр("Субконто2", ФинансоваяЦель);
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, КонецДня(ТекущаяДатаСеанса()), Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(жОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(
	|			&Период,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.разделыУчета.Накопления),
	|			,
	|			Субконто1 = &Субконто1
	|				И Субконто2 = &Субконто2) КАК жОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат ?(Не ЗначениеЗаполнено(Выборка.ВалютнаяСуммаОстаток), 0, Выборка.ВалютнаяСуммаОстаток);
	КонецЕсли; 

КонецФункции

// Возвращает кошелек, чаще всего использовавшийся для накоплений на указанную финансовую цель
Функция ПолучитьКошелекДляНакоплений(ФинансоваяЦель = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФинансоваяЦель", ФинансоваяЦель);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КошелькиИСчета.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбъектыОпераций.Операция) КАК Операция,
	|	СУММА(ВЫБОР
	|			КОГДА ОбъектыОпераций.ФинансоваяЦель = &ФинансоваяЦель
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧастотаФинЦели
	|ПОМЕСТИТЬ Статистика
	|ИЗ
	|	Справочник.КошелькиИСчета КАК КошелькиИСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыОпераций КАК ОбъектыОпераций
	|		ПО КошелькиИСчета.Ссылка = ОбъектыОпераций.ПредметУчета
	|ГДЕ
	|	КошелькиИСчета.ПометкаУдаления = ЛОЖЬ
	|	И КошелькиИСчета.Активность
	|	И КошелькиИСчета.ИспользоватьДляНакоплений
	|
	|СГРУППИРОВАТЬ ПО
	|	КошелькиИСчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Статистика.Ссылка
	|ИЗ
	|	Статистика КАК Статистика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статистика.ЧастотаФинЦели УБЫВ,
	|	Статистика.Операция УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.КошелькиИСчета.ПустаяСсылка();
	КонецЕсли; 

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// * Получение информации по долгам

// Возвращает последний по порядку создания актуальный долг контакта 
// с учетом опций поиска ИскатьЗаем, ИскатьКредит, ИскатьВзаиморасчет.
// Опции поиска объединяются по ИЛИ, поиск осуществляется сначала среди займов и кредитов, затем среди взаиморасчетов.
//
// Возвращаемое значение:
//	СправочникСсылка.Долги
//
Функция ПолучитьДолгКонтактаПоУмолчанию(Контакт, ИскатьЗаем, ИскатьКредит, ИскатьВзаиморасчет) Экспорт

	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Справочники.Долги.ПустаяСсылка();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ИскатьЗаймы",         ИскатьЗаем);
	Запрос.УстановитьПараметр("ИскатьКредиты",       ИскатьКредит);
	Запрос.УстановитьПараметр("ИскатьВзаиморасчеты", ИскатьВзаиморасчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Долги.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Долги.ИспользоватьДляУчетаВыданныхДолгов <> Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокПоВидуДолгу
	|ИЗ
	|	Справочник.Долги КАК Долги
	|ГДЕ
	|	Долги.Контакт = &Контакт
	|	И (&ИскатьЗаймы
	|				И Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И НЕ Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ИЛИ &ИскатьКредиты
	|				И НЕ Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ИЛИ &ИскатьВзаиморасчеты
	|				И Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И Долги.ИспользоватьДляУчетаВзятыхДолгов)
	|	И Долги.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПоВидуДолгу,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Долги.ПустаяСсылка();
	КонецЕсли; 

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПолучитьОстатокПоКонтакту(Счет, Контакт, Период = Неопределено, Валюта = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Счет) ИЛИ НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат 0;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("БазоваяВалюта", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаОтчета", ?(ЗначениеЗаполнено(Валюта), Валюта, Запрос.Параметры.БазоваяВалюта));
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, КонецДня(ТекущаяДатаСеанса()), Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(жОстатки.ВалютнаяСуммаОстаток, 0) * ЕСТЬNULL(КурсыВалютОборота.Курс, 0) * ЕСТЬNULL(КурсВалютыОтчета.Кратность, 0) / (ЕСТЬNULL(КурсВалютыОтчета.Курс, 1) * ЕСТЬNULL(КурсыВалютОборота.Кратность, 1))) КАК ВалютнаяСуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(&Период, Счет В ИЕРАРХИИ (&Счет), , Субконто1.Контакт = &Контакт) КАК жОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютОборота
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, БазоваяВалюта = &БазоваяВалюта) КАК КурсВалютыОтчета
	|			ПО КурсыВалютОборота.БазоваяВалюта = КурсВалютыОтчета.БазоваяВалюта
	|				И (КурсВалютыОтчета.Валюта = &ВалютаОтчета)
	|		ПО жОстатки.Валюта = КурсыВалютОборота.Валюта";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат ?(Выборка.ВалютнаяСуммаОстаток = NULL, 0, Выборка.ВалютнаяСуммаОстаток);
	КонецЕсли; 

КонецФункции

// Возвращает актуальные долги контакта, упорядоченные по виду долга и убыванию ссылки,
// с учетом опций поиска ИскатьЗаем, ИскатьКредит, ИскатьВзаиморасчет.
// Опции поиска объединяются по ИЛИ.
//
// Возвращаемое значение:
//	ТаблицаЗначений, Неопределено
//
Функция ПолучитьАктуальныеДолгиКонтакта(Контакт, ИскатьЗаем, ИскатьКредит, ИскатьВзаиморасчет = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ИскатьЗаймы",         ИскатьЗаем);
	Запрос.УстановитьПараметр("ИскатьКредиты",       ИскатьКредит);
	Запрос.УстановитьПараметр("ИскатьВзаиморасчеты", ИскатьВзаиморасчет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Долги.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И НЕ Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДолгов.ВыданныйЗаем)
	|		КОГДА НЕ Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДолгов.ПолученныйКредит)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДолгов.ВзаимныйРасчет)
	|	КОНЕЦ КАК ВидДолга,
	|	ВЫБОР
	|		КОГДА Долги.ИспользоватьДляУчетаВыданныхДолгов <> Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокПоВидуДолгу
	|ИЗ
	|	Справочник.Долги КАК Долги
	|ГДЕ
	|	Долги.Контакт = &Контакт
	|	И (&ИскатьЗаймы
	|				И Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И НЕ Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ИЛИ &ИскатьКредиты
	|				И НЕ Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И Долги.ИспользоватьДляУчетаВзятыхДолгов
	|			ИЛИ &ИскатьВзаиморасчеты
	|				И Долги.ИспользоватьДляУчетаВыданныхДолгов
	|				И Долги.ИспользоватьДляУчетаВзятыхДолгов)
	|	И Долги.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПоВидуДолгу,
	|	Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат Неопределено;
	//КонецЕсли; 

	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Заполняет список контактами, для которых имеется задолженность.
// Сумма долгов пересчитывается в ВалютаПересчета
//
Процедура ЗаполнитьСписокВыбораЗаемщиковКредиторов(СписокВыбора, ДатаОстатков, ВалютаПересчета, ИскатьВыданныеДолги, ИскатьВзятыеДолги) Экспорт
	
	СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаУчета",  Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаОтчета", ВалютаПересчета);
	Запрос.УстановитьПараметр("ИскатьВыданные", ИскатьВыданныеДолги);
	Запрос.УстановитьПараметр("ИскатьВзятые",   ИскатьВзятыеДолги);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОперацийОстатки.Субконто1.Контакт КАК Контакт,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналОперацийОстатки.Субконто1) КАК КоличествоДолгов,
	|	СУММА(ЖурналОперацийОстатки.ВалютнаяСуммаОстаток * (ЕСТЬNULL(КурсыОстатков.Курс, 0) * ЕСТЬNULL(КурсОтчета.Кратность, 0)) / (ЕСТЬNULL(КурсОтчета.Курс, 1) * ЕСТЬNULL(КурсыОстатков.Кратность, 1))) КАК ОстатокДолгов
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(
	|			&Период,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Долги),
	|			&ИскатьВыданные
	|					И Субконто1.ИспользоватьДляУчетаВыданныхДолгов
	|					И НЕ Субконто1.ИспользоватьДляУчетаВзятыхДолгов
	|				ИЛИ &ИскатьВзятые
	|					И НЕ Субконто1.ИспользоватьДляУчетаВыданныхДолгов
	|					И Субконто1.ИспользоватьДляУчетаВзятыхДолгов
	|				ИЛИ Субконто1.ИспользоватьДляУчетаВыданныхДолгов
	|					И Субконто1.ИспользоватьДляУчетаВзятыхДолгов) КАК ЖурналОперацийОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, БазоваяВалюта = &ВалютаУчета) КАК КурсыОстатков
	|		ПО ЖурналОперацийОстатки.Валюта = КурсыОстатков.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, БазоваяВалюта = &ВалютаУчета) КАК КурсОтчета
	|		ПО КурсОтчета.Валюта = &ВалютаОтчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОперацийОстатки.Субконто1.Контакт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналОперацийОстатки.Субконто1.Контакт.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДолгПрописью = ЧислоПрописью(Выборка.КоличествоДолгов, "Л = ru_RU; НД = Ложь", "долг,долга,долгов,м,,,,,0");
		ДолгПрописью = Сред(ДолгПрописью, Найти(ДолгПрописью, "долг"));
		
		Представление = НСтр("ru = '%1,  %2 %3 на сумму %4 %5'"); // "Иванов,  3 долга на сумму 9 999 руб."
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Представление, 
			?(ЗначениеЗаполнено(Выборка.Контакт), Выборка.Контакт, НСтр("ru = '<Контакт не задан>'")), 
			Формат(Выборка.КоличествоДолгов, "ЧГ=0"), 
			ДолгПрописью, 
			Формат(Выборка.ОстатокДолгов, ?(Выборка.ОстатокДолгов % 1 = 0, "ЧДЦ=0", "ЧДЦ=2")), 
			ВалютаПересчета);
		
		СписокВыбора.Добавить(Выборка.Контакт, Представление);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список долгами контакта или всеми долгами, если контакт не заполнен.
//
Процедура ЗаполнитьСписокВыбораДолговКонтакта(СписокВыбора, Контакт, ДатаОстатков, ИскатьВыданныеДолги, ИскатьВзятыеДолги) Экспорт
	
	СписокВыбора.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ДатаОстатков);
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("ИскатьВыданные", ИскатьВыданныеДолги);
	Запрос.УстановитьПараметр("ИскатьВзятые",   ИскатьВзятыеДолги);
	Запрос.УстановитьПараметр("ВалютаУчета", Константы.ВалютаУчета.Получить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОперацийОстатки.Субконто1.Контакт КАК Контакт,
	|	ЖурналОперацийОстатки.Субконто1 КАК Долг,
	|	ЖурналОперацийОстатки.Субконто1.Валюта КАК ВалютаДолга,
	|	СУММА(ЖурналОперацийОстатки.ВалютнаяСуммаОстаток * (ЕСТЬNULL(КурсыОстатков.Курс, 0) * ЕСТЬNULL(КурсыДолгов.Кратность, 0)) / (ЕСТЬNULL(КурсыДолгов.Курс, 1) * ЕСТЬNULL(КурсыОстатков.Кратность, 1))) КАК ОстатокДолга
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(
	|			&Период,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Долги)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Долги),
	|			(Субконто1.Контакт = &Контакт
	|				ИЛИ &Контакт = НЕОПРЕДЕЛЕНО
	|				ИЛИ &Контакт = ЗНАЧЕНИЕ(Справочник.Контакты.ПустаяСсылка))
	|				И (&ИскатьВыданные
	|						И Субконто1.ИспользоватьДляУчетаВыданныхДолгов
	|						И НЕ Субконто1.ИспользоватьДляУчетаВзятыхДолгов
	|					ИЛИ &ИскатьВзятые
	|						И НЕ Субконто1.ИспользоватьДляУчетаВыданныхДолгов
	|						И Субконто1.ИспользоватьДляУчетаВзятыхДолгов
	|					ИЛИ Субконто1.ИспользоватьДляУчетаВыданныхДолгов
	|						И Субконто1.ИспользоватьДляУчетаВзятыхДолгов)) КАК ЖурналОперацийОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, БазоваяВалюта = &ВалютаУчета) КАК КурсыОстатков
	|		ПО ЖурналОперацийОстатки.Валюта = КурсыОстатков.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, БазоваяВалюта = &ВалютаУчета) КАК КурсыДолгов
	|		ПО ЖурналОперацийОстатки.Субконто1.Валюта = КурсыДолгов.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналОперацийОстатки.Субконто1,
	|	ЖурналОперацийОстатки.Субконто1.Контакт,
	|	ЖурналОперацийОстатки.Субконто1.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналОперацийОстатки.Субконто1.Контакт.Наименование,
	|	ЖурналОперацийОстатки.Субконто1.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеДолга = НСтр("ru = '""%1"",  остаток %2 %3'");
		ПредставлениеДолга = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеДолга, 
			Выборка.Долг, Формат(Выборка.ОстатокДолга, ?(Выборка.ОстатокДолга % 1 = 0, "ЧДЦ=0", "ЧДЦ=2")), Выборка.ВалютаДолга);
		СписокВыбора.Добавить(Выборка.Долг, ПредставлениеДолга);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДатуВозвратаДолга(Долг, Знач Период = Неопределено) Экспорт

	Если Период = Неопределено Тогда
		Период  = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Долг", Долг);
	Запрос.УстановитьПараметр("Дата2", КонецДня(Период));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата,
	|	ДатыРасписаний.АктуальнаяДата
	|ИЗ
	|	РегистрСведений.ПараметрыГрафикаПогашенияДолгов КАК ПараметрыГрафикаПогашенияДолгов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|		ПО ПараметрыГрафикаПогашенияДолгов.ШаблонОперации = ДатыРасписаний.ВладелецРасписания
	|ГДЕ
	|	ПараметрыГрафикаПогашенияДолгов.Долг = &Долг
	|	И ДатыРасписаний.ПлановаяДата <= &Дата2
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПлановаяДата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ПлановаяДата) Тогда
		Возврат Выборка.ПлановаяДата;
	Иначе
		Возврат '00010101';
	КонецЕсли; 

КонецФункции
 
Функция ПолучитьСуммыВыплатПоГрафикуПогашения(Счет, Долг, Период = Неопределено) Экспорт

	Результат = Новый Структура("ПоГрафикуСуммаПроцентов,ПоГрафикуСуммаДолга,ПоГрафикуСуммаКомиссии", 0,0,0);
	Если НЕ ЗначениеЗаполнено(Счет) ИЛИ НЕ ЗначениеЗаполнено(Долг) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Долг",  Долг);
	Запрос.УстановитьПараметр("Счет",  Счет);
	Запрос.УстановитьПараметр("Дата2", КонецМесяца(?(Период = Неопределено, ТекущаяДатаСеанса(), Период)));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ДолгиГрафикПогашения.СуммаПроцентов) КАК ПоГрафикуСуммаПроцентов,
	|	СУММА(ДолгиГрафикПогашения.СуммаДолга) КАК ПоГрафикуСуммаДолга,
	|	СУММА(ДолгиГрафикПогашения.СуммаКомиссии) КАК ПоГрафикуСуммаКомиссии
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДолгиГрафикПогашения
	|ГДЕ
	|	ДолгиГрафикПогашения.ВладелецРасписания В
	|			(ВЫБРАТЬ
	|				ПараметрыГрафикаПогашенияДолгов.ШаблонОперации
	|			ИЗ
	|				РегистрСведений.ПараметрыГрафикаПогашенияДолгов КАК ПараметрыГрафикаПогашенияДолгов
	|			ГДЕ
	|				ПараметрыГрафикаПогашенияДолгов.Долг = &Долг)
	|	И НАЧАЛОПЕРИОДА(ДолгиГрафикПогашения.ПлановаяДата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&Дата2, МЕСЯЦ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Если Выборка.ПоГрафикуСуммаПроцентов <> NULL Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// * Различные проверки

// Проверяет наличие движений по объекту учета. Возвращает Истина, если есть хотя бы одна
//проводка
Функция ЕстьПроводкиПоОбъектуУчета(СсылкаНаОбъект) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналОперацийСубконто.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Субконто КАК ЖурналОперацийСубконто
	|ГДЕ
	|	ЖурналОперацийСубконто.Значение = &СсылкаНаОбъект";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

// Определяет раздел учета по указанному в параметрах объекту
//	Внимание! По долгам назначается только расчеты по основным суммам, расчеты проценты этой процедурой не определяются
//
Процедура ЗаполнитьРазделУчетаПоОбъекту(РазделУчета, ОбъектУчета) Экспорт
	
	ТипОбъекта = ТипЗнч(ОбъектУчета);
	
	Если ТипОбъекта = Тип("Неопределено") Тогда
		
		РазделУчета = ПланыСчетов.РазделыУчета.СвободныеДеньги;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		
		Если ОбъектУчета.ИспользоватьДляНакоплений Тогда
			РазделУчета = ПланыСчетов.РазделыУчета.Накопления;
		Иначе
			РазделУчета = ПланыСчетов.РазделыУчета.СвободныеДеньги;
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Имущество") Тогда
		
		РазделУчета = ПланыСчетов.РазделыУчета.Имущество;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Долги") Тогда
		
		РазделУчета = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтатьиДоходов") Или ТипОбъекта = Тип("СправочникСсылка.СтатьиРасходов") Тогда
		
		РазделУчета = ПланыСчетов.РазделыУчета.Капитал;
		
	КонецЕсли;
	
КонецПроцедуры

// Приводит значение объекта к нужному типу значения раздела учета
Процедура ЗаполнитьОбъектПоРазделуУчета(РазделУчета, ОбъектУчета) Экспорт
	
	Если Не ЗначениеЗаполнено(РазделУчета) Тогда
		
		ОбъектУчета = Неопределено;
		
	Иначе
		
		СвойстваРаздела = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(РазделУчета);
		Если СвойстваРаздела.КоличествоСубконто > 0 Тогда
			
			ОбъектУчета = СвойстваРаздела.ВидСубконто1ТипЗначения.ПривестиЗначение(ОбъектУчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет раздел и объект учета значениями по умолчанию
//
Процедура ПроверитьЗначенияРазделаИОбъектаУчета(РазделУчета, ОбъектУчета) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектУчета) И Не ЗначениеЗаполнено(РазделУчета) Тогда
		
		// Определяем раздел по объекту
		ЗаполнитьРазделУчетаПоОбъекту(РазделУчета, ОбъектУчета);
		
	Иначе
		
		// Проверяем корректность указания раздела:
		Если Не ЗначениеЗаполнено(РазделУчета) Или РазделУчета = ПланыСчетов.РазделыУчета.Деньги Тогда
			РазделУчета = ПланыСчетов.РазделыУчета.СвободныеДеньги;
		ИначеЕсли РазделУчета = ПланыСчетов.РазделыУчета.Долги Тогда
			РазделУчета = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов;
		КонецЕсли;
		
		// Приводим значение объекта к типу значения раздела учета
		ЗаполнитьОбъектПоРазделуУчета(РазделУчета, ОбъектУчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет и при необходимости изменяет значение финансовой цели:
//	если объектом учета является кошелек для накоплений, финансовая цель должна быть заполнена
//	во всех остальных случаях финансовая цель должна быть пустой
Процедура ЗаполнитьФинансовуюЦельПоОбъектуУчета(ОбъектУчета, ФинансоваяЦель) Экспорт
	
	Если ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") И ОбъектУчета.ИспользоватьДляНакоплений Тогда
		
		Если Не ЗначениеЗаполнено(ФинансоваяЦель) Или ТипЗнч(ФинансоваяЦель) <> Тип("СправочникСсылка.ФинансовыеЦели") Тогда
			ФинансоваяЦель = Справочники.ФинансовыеЦели.ОбщиеНакопления;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ФинансоваяЦель) Тогда
			ФинансоваяЦель = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
 

#КонецОбласти
