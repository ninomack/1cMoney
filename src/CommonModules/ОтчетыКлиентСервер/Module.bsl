
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Параметры данных настроек компоновки данных
//

// Возвращает значение параметра данных по имени из настроек компоновки данных.
// Параметр данных ищется в пользовательских настройках, 
// а если они не заданы, тогда в настройках варианта.
//
// Параметры:
//	КомпоновщикНастроек  - КомпоновщикНастроек
//  ИмяПараметра         - Строка
//	ИскатьВПользовательскихНастройках  - Булево
//	ВызыватьИсключениеЕслиНеНайден     - Булево
//
// Возвращаемое значение:
//   ЗначениеПараметраНастроекКомпоновкиДанных, Неопределено
//
// Примеры использования:
//	ЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "Период")
//
Функция ЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНастроек, ИмяПараметра, ИскатьВПользовательскихНастройках = Истина, ВызыватьИсключениеЕслиНеНайден = Истина) Экспорт
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;

	ЗначениеПараметраВарианта = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ЗначениеПараметраВарианта = Неопределено Тогда
		Если ВызыватьИсключениеЕслиНеНайден Тогда
			ВызватьИсключение "Не найден параметр " + ИмяПараметра;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ИскатьВПользовательскихНастройках И ЗначениеЗаполнено(ЗначениеПараметраВарианта.ИдентификаторПользовательскойНастройки) Тогда
		Возврат ПользовательскиеНастройки.Элементы.Найти(ЗначениеПараметраВарианта.ИдентификаторПользовательскойНастройки);
	Иначе
		Возврат ЗначениеПараметраВарианта;
	КонецЕсли;
	
КонецФункции

// Возвращает представление параметра данных по имени.
// Параметр данных ищется в следующем порядке: в пользовательских настройках, в настройках варианта, в доступных параметрах варианта.
//
// Параметры:
//	КомпоновщикНастроек  - КомпоновщикНастроек
//  ИмяПараметра         - Строка
//	ИскатьВПользовательскихНастройках  - Булево
//	ВызыватьИсключениеЕслиНеНайден     - Булево
//
// Возвращаемое значение:
//	Строка, Неопределено
//
// Примеры использования:
//	ПредставлениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "Период")
//
Функция ПредставлениеПараметраДанныхНКДПоИмени(КомпоновщикНастроек, ИмяПараметра, ИскатьВПользовательскихНастройках = Истина, ВызыватьИсключениеЕслиНеНайден = Истина) Экспорт
	
	Перем ПользовательскоеЗначениеПараметра;
	
	Настройки = КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	ДоступныеПараметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры;

	ЗначениеПараметраВарианта = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ЗначениеПараметраВарианта = Неопределено Тогда
		Если ВызыватьИсключениеЕслиНеНайден Тогда
			ВызватьИсключение "Не найден параметр " + ИмяПараметра;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Представление = Неопределено;
	
	Если ИскатьВПользовательскихНастройках И ЗначениеЗаполнено(ЗначениеПараметраВарианта.ИдентификаторПользовательскойНастройки) Тогда
		Попытка
			Представление = ПользовательскиеНастройки.Элементы.Найти(ЗначениеПараметраВарианта.ИдентификаторПользовательскойНастройки).ПредставлениеПользовательскойНастройки;
		Исключение
			// обработка не требуется
		КонецПопытки; 
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Представление = ЗначениеПараметраВарианта.ПредставлениеПользовательскойНастройки;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Представление = ДоступныеПараметры.Элементы.Найти(ИмяПараметра).Заголовок;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Устанавливает значение параметра данных по имени.
// Параметр данных ищется в пользовательских настройках, 
// а если они не заданы, тогда в настройках варианта.
//
// Параметры:
//	КомпоновщикНастроек  - КомпоновщикНастроек
//  ИмяПараметра         - Строка
//	НовоеЗначение        - Произвольный
//	НовоеИспользование   - Булево, Неопределено - Если Неопределено, значение не изменяется
//	ИскатьВПользовательскихНастройках  - Булево
//	ВызыватьИсключениеЕслиНеНайден     - Булево
//
// Примеры использования:
//	УстановитьЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "Период", Период)
//
Процедура УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНастроек, ИмяПараметра, НовоеЗначение, НовоеИспользование = Истина, ИскатьВПользовательскихНастройках = Истина, ВызыватьИсключениеЕслиНеНайден = Истина) Экспорт
	
	ЗначениеПараметра = ЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНастроек, ИмяПараметра, ИскатьВПользовательскихНастройках, ВызыватьИсключениеЕслиНеНайден);
	УстановитьЗначениеПараметраДанныхНКД(ЗначениеПараметра, НовоеЗначение, НовоеИспользование);
	
КонецПроцедуры

// Устанавливает значение параметра данных.
//
// Параметры:
//	ЗначениеПараметра    - ЗначениеПараметраНастроекКомпоновкиДанных
//	НовоеЗначение        - Произвольный
//	НовоеИспользование   - Булево, Неопределено - Если Неопределено, значение не изменяется
//
// Примеры использования:
//	ЗначениеПараметра = ЗначениеПараметраДанныхНКДПоИмени(Отчет.КомпоновщикНастроек, "Период");
//	УстановитьЗначениеПараметраДанныхНКД(ЗначениеПараметра, Период)
//
Процедура УстановитьЗначениеПараметраДанныхНКД(ЗначениеПараметра, НовоеЗначение, НовоеИспользование = Истина) Экспорт
	
	ЗначениеПараметра.Значение = НовоеЗначение;
	Если НовоеИспользование <> Неопределено Тогда
		ЗначениеПараметра.Использование = НовоеИспользование;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление пользовательскими настройками
//

// Установливает режим отображения Обычный для всех элементов коллекции
//
Процедура СкрытьЭлементыОтбора(КоллекцияЭлементовКД) Экспорт
	
	ТипОтборКД = Тип("ОтборКомпоновкиДанных");
	ТипЭлементОтбораКД = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипГруппаЭлементовОтбораКД = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	РежимОтображенияОбычный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
	Для каждого Элемент Из КоллекцияЭлементовКД Цикл
		
		ТипЭлемента = ТипЗнч(Элемент);
		
		Если ТипЭлемента = ТипЭлементОтбораКД ИЛИ ТипЭлемента = ТипГруппаЭлементовОтбораКД Тогда
			Если Элемент.РежимОтображения <> РежимОтображенияОбычный Тогда
				Элемент.РежимОтображения = РежимОтображенияОбычный;
			КонецЕсли;
		КонецЕсли;
			
		Если ТипЭлемента = ТипОтборКД ИЛИ ТипЭлемента = ТипГруппаЭлементовОтбораКД Тогда
			СкрытьЭлементыОтбора(Элемент.Элементы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление внешним видом форм отчетов
//

// Возвращает представлении варианта без префикса "<N>".
//
Функция ПредставлениеВариантаБезСтандартногоПрефикса(Знач ПредставлениеВарианта) Экспорт
	
	ПозицияПоследнегоСимволаПрефикса = Найти(ПредставлениеВарианта, "> ");
	Если ПозицияПоследнегоСимволаПрефикса <> 0 Тогда
		ПредставлениеВарианта = Сред(ПредставлениеВарианта, ПозицияПоследнегоСимволаПрефикса + 2);
	КонецЕсли;
	
	Возврат ПредставлениеВарианта;
	
КонецФункции

// В режиме расшифровки дополняет представление варианта суффиксом " - расшифровка".
//
// Примеры использования:
//	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
//	НастройкиДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
//	ПредставлениеТекущегоВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаСУчетомРасшифровки(ПредставлениеТекущегоВарианта, РежимРасшифровки, НастройкиДополнительныеСвойства);
//
Функция ПредставлениеВариантаСУчетомРасшифровки(Знач ПредставлениеВарианта, РежимРасшифровки, НастройкиДополнительныеСвойства) Экспорт
	
	ПредставлениеВарианта = ?(НастройкиДополнительныеСвойства.Свойство("ИсходноеПредставлениеВарианта"), 
		НастройкиДополнительныеСвойства.ИсходноеПредставлениеВарианта, ПредставлениеВарианта);
	
	// Через ДополнительныеСвойства настроек КД ПредставлениеВарианта будет передано в настройки расшифровки
	НастройкиДополнительныеСвойства.Вставить("ИсходноеПредставлениеВарианта", ПредставлениеВарианта);
	
	Если РежимРасшифровки Тогда
		ТекстРасшифровка = НСтр("ru = ' - расшифровка'");
		Если ВРег(Прав(ПредставлениеВарианта, СтрДлина(ТекстРасшифровка))) <> ВРег(ТекстРасшифровка) Тогда
			ПредставлениеВарианта = ПредставлениеВарианта + ТекстРасшифровка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеВарианта;
	
КонецФункции

Процедура ОформитьЭлементыПользовательскихНастроек(ГруппаПользовательскихНастроек) Экспорт
	
	УстановитьПоложениеЗаголовковФлажков(ГруппаПользовательскихНастроек, ПоложениеЗаголовкаЭлементаФормы.Право);
	
КонецПроцедуры

Процедура УстановитьПоложениеЗаголовковФлажков(ЭлементГруппаФормы, ПоложениеЗаголовкаФлажка, ВыполнятьРекурсивно = Истина) Экспорт
	
	ТипГруппаФормы = Тип("ГруппаФормы");
	
	Для каждого Элемент Из ЭлементГруппаФормы.ПодчиненныеЭлементы Цикл
		Если Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаФлажка;
		ИначеЕсли ВыполнятьРекурсивно И ТипЗнч(Элемент) = ТипГруппаФормы Тогда
			УстановитьПоложениеЗаголовковФлажков(Элемент, ПоложениеЗаголовкаФлажка)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек) Экспорт
	
	Если ВидимостьПанелиНастроек Тогда
		Кнопка.Заголовок = НСтр("ru = 'Скрыть настройки'");
	Иначе
		Кнопка.Заголовок = НСтр("ru = 'Показать настройки'");
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление компоновкой результата
//

// В режиме расшифровки дополняет заголовок отчета суффиксом " (расшифровка)".
//
// Примеры использования:
//	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
//	НастройкиДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
//	ПредставлениеТекущегоВарианта = ОтчетыКлиентСервер.ЗаголовокОтчетаСУчетомРасшифровки(ПредставлениеТекущегоВарианта, РежимРасшифровки, НастройкиДополнительныеСвойства);
//
Функция ЗаголовокОтчетаСУчетомРасшифровки(Знач ЗаголовокОтчета, РежимРасшифровки, НастройкиДополнительныеСвойства) Экспорт
	
	ЗаголовокОтчета = ?(НастройкиДополнительныеСвойства.Свойство("ИсходныйЗаголовокОтчета"), 
		НастройкиДополнительныеСвойства.ИсходныйЗаголовокОтчета, ЗаголовокОтчета);
	
	// Через ДополнительныеСвойства настроек КД ЗаголовокОтчета будет передан в настройки расшифровки
	НастройкиДополнительныеСвойства.Вставить("ИсходныйЗаголовокОтчета", ЗаголовокОтчета);
	
	Если РежимРасшифровки Тогда
		ТекстРасшифровка = НСтр("ru = ' (расшифровка)'");
		Если ВРег(Прав(ЗаголовокОтчета, СтрДлина(ТекстРасшифровка))) <> ВРег(ТекстРасшифровка) Тогда
			ЗаголовокОтчета = ЗаголовокОтчета + ТекстРасшифровка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

// Переносит фиксированные настройки в основные и пользовательские.
//
Процедура ОбработатьФиксированныеНастройки(КомпоновщикНастроек) Экспорт
	
	// Обработка параметров
	Для каждого ЗначениеПараметраФН Из КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы Цикл
		Если НЕ ЗначениеПараметраФН.Использование Тогда
			Продолжить;
		КонецЕсли;
		УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНастроек, Строка(ЗначениеПараметраФН.Параметр), ЗначениеПараметраФН.Значение, ЗначениеПараметраФН.Использование);
		ЗначениеПараметраФН.Использование = Ложь;
	КонецЦикла;
	
	// Обработка отбора
	ПрежнийИДОтбора = КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = "";
	СкопироватьОтборКомпоновкиДанных(КомпоновщикНастроек.Настройки.Отбор.Элементы, КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, Ложь);
	КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = ПрежнийИДОтбора;
	
	//// Очистим фиксированные настройки
	//КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Новый НастройкиКомпоновкиДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка переопределяемых событий отчетов
//

Функция ТекущаяВерсияСобытийОтчетов() Экспорт
	Возврат "1";
КонецФункции

Функция ПараметрыСобытийОтчетаПоУмолчанию(ВерсияСобытийОтчета) Экспорт
	
	ПараметрыСобытийОтчета = Новый Структура;
	ПараметрыСобытийОтчета.Вставить("ВерсияСобытийОтчета", ВерсияСобытийОтчета);
	
	Если ВерсияСобытийОтчета = "1" Тогда
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПриСозданииФормыНаСервере", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПриОбработкеПараметраФормыОтбор", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПередСозданиемЭлементовФормыПользовательскихНастроек", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПриСозданииЭлементовФормыПользовательскихНастроек", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПослеСозданияЭлементовФормыПользовательскихНастроек", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПриЗаполненииРеквизитовФормыПоПараметрамНКД", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПриУстановкеСлужебныхПараметровНКД", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПередКомпоновкойРезультата", Ложь);
		ПараметрыСобытийОтчета.Вставить("ВыполнятьПослеКомпоновкиРезультата", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыСобытийОтчета;
	
КонецФункции

Процедура ПривестиПараметрыСобытийОтчетаКТекущейВерсии(ПараметрыСобытийОтчета) Экспорт
	
	Если ПараметрыСобытийОтчета.ВерсияСобытийОтчета = ТекущаяВерсияСобытийОтчетов() Тогда
		// Обработка не требуется. Предполагается, что отчет сам заботится о корректности параметров.
		Возврат;
	КонецЕсли;
	
	// Приведение версии
	//...
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции
//

// Устанавливает для пользовательских настроек значения по умолчанию.
//
Процедура СброситьПользовательскиеНастройки(КомпоновщикНастроек) Экспорт
	
	НовыйКомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	НовыйКомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыйКомпоновщикНастроек.ПользовательскиеНастройки);
	
КонецПроцедуры

// Копирует отбор компоновки данных. Копируются только элементы, у которых свойство Использование = Истина.
//
Процедура СкопироватьОтборКомпоновкиДанных(КоллекцияЭлементовОтбораПриемника, КоллекцияЭлементовОтбораИсточника, НовоеИспользованиеИсточника = Неопределено) Экспорт
	
	Для каждого Элемент Из КоллекцияЭлементовОтбораИсточника Цикл
		
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = КоллекцияЭлементовОтбораПриемника.Добавить(ТипЗнч(Элемент));
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборКомпоновкиДанных(НовыйЭлемент.Элементы, Элемент.Элементы);
		КонецЕсли;
		
		Если НовоеИспользованиеИсточника <> Неопределено Тогда
			Элемент.Использование = НовоеИспользованиеИсточника;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредставлениеПериода(ДатаНачала, ДатаОкончания, ДобавлятьПредлоги = Истина) Экспорт 
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат ?(ДобавлятьПредлоги, НСтр("ru = 'за '"), "") + ПредставлениеПериода(ДатаНачала, ДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат НСтр("ru = 'с '") + Формат(ДатаНачала, "ДФ='д ММММ гггг ""г.""'") ;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат НСтр("ru = 'по '") + Формат(ДатаОкончания, "ДФ='д ММММ гггг ""г.""'") ;
	Иначе
		Возврат ?(ДобавлятьПредлоги, НСтр("ru = 'за все время'"), НСтр("ru = 'все время'"));
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
