////////////////////////////////////////////////////////////////////////////////
// ДеньгиВызовСервера: Общий фунционал конфигурации 1С:Деньги
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает и очищает параметр, передаваемый в форму, открытую по навигационной ссылке
Функция ПолучитьПараметрПереходаПоСсылке() Экспорт

	Попытка
		
		Если ПараметрыСеанса.ПараметрыПереходаПоНавигационнойСсылке <> "" Тогда
			Результат = ПолучитьИзВременногоХранилища(ПараметрыСеанса.ПараметрыПереходаПоНавигационнойСсылке);
			ПараметрыСеанса.ПараметрыПереходаПоНавигационнойСсылке = "";
			Возврат Результат;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	
	Исключение
		
		// Запись в журнал регистрации не требуется
		ПараметрыСеанса.ПараметрыПереходаПоНавигационнойСсылке = "";
		Возврат Неопределено;
		
	КонецПопытки; 

КонецФункции

// Сохраняет параметр для передачи в форму, открываемую по навигационной ссылке
Функция ЗаписатьПараметрПереходаПоСсылке(Параметры) Экспорт

	Попытка
	
		ПараметрыСеанса.ПараметрыПереходаПоНавигационнойСсылке = ПоместитьВоВременноеХранилище(Параметры);
		Возврат ПараметрыСеанса.ПараметрыПереходаПоНавигационнойСсылке;
	
	Исключение
		
		// Запись в журнал регистрации не требуется
		Возврат Неопределено;
		
	КонецПопытки; 

КонецФункции

// Изменяет настройки стандартного интерфейса: на начальной странице открывает указанную в параметрах форму, 
//	при необходимости скрывает панели
//
//Параметры:
//	ИмяФормы - Строка - полное иня формы, которую нужно открыть на начальной странице
//	СкрыватьПанели - Булево - нужно ли убирать панели?
//
Процедура УстановитьИнтерфейсПриложенияПоФорме(ИмяФормы, СкрыватьПанели = Истина) Экспорт
	
	Если СкрыватьПанели Тогда
		Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
		НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
		Настройки.УстановитьСостав(НастройкиСостава);
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки);
	КонецЕсли;
	
	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	СоставФорм.ЛеваяКолонка.Добавить(ИмяФормы);
	НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница);
	
КонецПроцедуры

// Настраивает пользовательский интерфейс по умолчанию: панели, начальная страница и т.д.
//
//Параметры:
//	нет
//
Процедура УстановитьСтандартныйИнтерфейс() Экспорт
	
	// Натройка панелей
	Настройки = Новый НастройкиИнтерфейсаКлиентскогоПриложения;
	НастройкиСостава = Новый НастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	
	// Вверху группируем панель инструментов и функции открытого раздела
	Верх = Новый ГруппаНастройкиСоставаИнтерфейсаКлиентскогоПриложения;
	Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельФункцийТекущегоРаздела"));
	Верх.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельИнструментов"));
	НастройкиСостава.Верх.Добавить(Верх);
	
	// Внизу размещаем панель открытых
	НастройкиСостава.Низ.Очистить();
	НастройкиСостава.Низ.Добавить(Новый ЭлементНастройкиСоставаИнтерфейсаКлиентскогоПриложения("ПанельОткрытых"));
	
	// По сторонам ничего нет
	НастройкиСостава.Лево.Очистить();
	НастройкиСостава.Право.Очистить();
	
	// Записываем настройки панелей
	Настройки.УстановитьСостав(НастройкиСостава);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Настройки);
	
	// Настройки интерфейса
	НастройкиИнтерфейса = Новый НастройкиКомандногоИнтерфейса();
	НастройкиИнтерфейса.ОтображениеПанелиРазделов = Вычислить("ОтображениеПанелиРазделов.Текст");
	ХранилищеСистемныхНастроек.Сохранить("Общее/ПанельРазделов/НастройкиКомандногоИнтерфейса", "", НастройкиИнтерфейса);
	
	// Состав начальной страницы
	НачальнаяСтраница = Новый НастройкиНачальнойСтраницы;
	СоставФорм = Новый СоставФормНачальнойСтраницы;
	
	СоставФорм.ЛеваяКолонка.Добавить("Обработка.НачальнаяСтраница.Форма.Обзор");
	НачальнаяСтраница.УстановитьСоставФорм(СоставФорм);
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы", "", НачальнаяСтраница);
	
КонецПроцедуры

// Проверяет наличие начальных настроеки для пользователя информационной базы.
//
// Параметры:
//  Отказ - Булево - возможность продолжать работу. Устанавливается в Истина, если настройки изменились и для их применения требуется перезагрузить программу.
//  ПовторитьПринудительно - Булево - позволяет повторно применить настройки, даже если они уже применялись ранее.
//  ОбновлятьИнтерфейс - Булево - Возвращаемый параметр, в который устанавливается признак необходимости обновить интерфейс
//
Процедура ПроверитьНачальныеНастройкиИнтерфейса(Отказ, ПовторитьПринудительно = Ложь, ОбновлятьИнтерфейс = Ложь, ПараметрЗапуска) Экспорт
	
	ОбновлятьИнтерфейс = Ложь;
	
	// Проверяем, выполнялась ли настройка
	ИмяКонтрольногоПараметра = "Общее/НачальныеНастройкиИнтерфейсаВыполнены/Версия838";
	НачальныеНастройкиПрименены = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяКонтрольногоПараметра, "", Ложь);
	Если НачальныеНастройкиПрименены = Истина И ПовторитьПринудительно <> Истина Тогда
		Возврат; // Настройки уже применены, принудительно сбрасывать их не требуется
	КонецЕсли; 
		
	// Опредеяем текущий вариант интерфейса. Переключение на другой вариант возможно только после перезагрузки (Отказ устанавливается в Истина)
	ПравильныйВариантИнтерфейса = Вычислить("ВариантИнтерфейсаКлиентскогоПриложения.Такси");
	ТекущиеНастройкиКлиента = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить("Общее/НастройкиКлиентскогоПриложения", "", Неопределено);
	Если ТекущиеНастройкиКлиента = Неопределено ИЛИ ТекущиеНастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения <> ПравильныйВариантИнтерфейса Тогда
		Отказ = Не ЗначениеЗаполнено(ПараметрЗапуска) Или СтрНайти(НРег(ПараметрЗапуска), "автотест") = 0; // Приложение будет перезагружено
	КонецЕсли; 
		
	// Делаем отметку о применении настроек
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(ИмяКонтрольногоПараметра, "", Истина);
	
	// Настраиваем отображение панелей и режимы приложения
	НастройкиКлиента = Новый НастройкиКлиентскогоПриложения();
	НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
	НастройкиКлиента.ОтображатьПанельРазделов = Ложь;
	НастройкиКлиента.РежимОткрытияФормПриложения  = РежимОткрытияФормПриложения.Закладки;
	НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ПравильныйВариантИнтерфейса;
		
	ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", НастройкиКлиента);
		
	// Устанавливаем настройку по умолчанию для панелей и начальной страницы
	ОбновлятьИнтерфейс = Истина;
	Если ОбщегоНазначенияДеньги.ИнформационнаяБазаПустая() Тогда
		УстановитьИнтерфейсПриложенияПоФорме("Обработка.ПомощникНачалаРаботы.Форма", Истина);
	Иначе
		УстановитьСтандартныйИнтерфейс();
	КонецЕсли;
	
	// Сохраняем настройки с ключем БСП для корректной обработки первого запуска
	КлючОбъекта         = "Общее/НастройкиНачальнойСтраницы";
	КлючОбъектаХранения = "Общее/НастройкиНачальнойСтраницыПередОчисткой";
	ТекущиеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта);
	ТекущиеНастройки = Новый ХранилищеЗначения(ТекущиеНастройки);
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъектаХранения, "", ТекущиеНастройки);
	
КонецПроцедуры

// Устарела. Оставлена для совместимости с регламентированной отчетностью
//	Следует использовать ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);

КонецФункции
 
// Возвращает список значений с видами операций. 
//	Используется для выбора вида операции перед их добавлением, для установки отборов и т.п.
//
//Параметры:
//	ВключаемыеВиды - Массив или Неопределено - содержит строки, которые нужно добавить в список. 
//			Если неопределено, добавляются все виды операций
//	ИсключаемыеВиды - Массив или Неопределено - содержит строки, которые нужно исключить из списка. 
//			Если неопределено, добавляются все виды операций. При наличии вида операции в обоих массивах одновременно
//			вид операции будет исключен
//
//
Функция ПолучитьСписокВидовОпераций(Знач ВключаемыеВиды = Неопределено, Знач ИсключаемыеВиды = Неопределено) Экспорт

	Если ТипЗнч(ВключаемыеВиды) = Тип("Строка") Тогда
		ВключаемыеВиды = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ВключаемыеВиды, ",");
	КонецЕсли;
	Если ТипЗнч(ИсключаемыеВиды) = Тип("Строка") Тогда
		ИсключаемыеВиды = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИсключаемыеВиды, ",");
	КонецЕсли;
	
	Возврат ОбщегоНазначенияДеньги.ПолучитьСписокВидовОпераций(ВключаемыеВиды, ИсключаемыеВиды);
	
КонецФункции

// Добавляет в журнал регистрации запись об ошибке, возникшей при выполнении указанного действия. Заполняет ТекстСообщенияПользователю
//	информацией, достаточной для понимания пользователем
//
//Параметры:
//	КлючЗаписиЖурнала - Строка - ключ регистрируемых событий. Например, "Обмен с мобильным приложением", "Обновление информационной базы"
//	Действие - Строка - краткое название выполняемого действия, при котором возникла ошибка
//	ИнформацияОбОшибке - ИнформацияОбОшибке или строка - подробности, которые нужно сообщить пользователю и записать в журнал регистрации
//	Отказ - Булево (не обязательно, по умолчнанию Ложь) - возращаемый параметр
//	ТекстСообщенияПользователю - Строка (не обязательно, по умолчнанию "") - возращаемый параметр, сообщение для показа пользователю
//
//Пример использования:
//	Ключ = "Загрузка данных из файла";
//	
//	Попытка
//	
//		Действие = "Чтение файла";
//		Чтение = Новый ЧтениеФайла(ИмяФайла);
//		текст = Чтение.Прочитать();
//
//		Действие = "Удаление файла";
//		УдалитьФайлы(ИмяФайла);
//	
//	Исключение
//
//		ДеньгиВызовСервера.ЗаписатьОшибкуДействияВЖурналРегистрации(Ключ, Действие, ИнформацияОбОшибке());
//
//	КонецПопытки
//
Процедура ЗаписатьОшибкуДействияВЖурналРегистрации(КлючЗаписиЖурнала, Действие, ИнформацияОбОшибке, Отказ = Ложь, ТекстСообщенияПользователю = "") Экспорт


	Отказ = Истина;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		КраткаяИнформация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПолнаяИнформация  = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		КраткаяИнформация = ИнформацияОбОшибке;
		ПолнаяИнформация  = ИнформацияОбОшибке;
	КонецЕсли; 
	
	ТекстСообщенияПользователю = НСтр("ru = 'Ошибка при выполнении действия'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ТекстСообщенияПользователю = ТекстСообщенияПользователю + ": " + Действие + Символы.ПС + КраткаяИнформация;
	
	ЗаписьЖурналаРегистрации(КлючЗаписиЖурнала,
				УровеньЖурналаРегистрации.Ошибка,,,
				Действие + ?(Действие = "", "", ":" + Символы.ПС) + ПолнаяИнформация);


КонецПроцедуры

// Выполняет автоматическую проверку предела планирования и, при необходимости, сдвигает его до конца следующего года
Процедура ПроверитьПределПланирования() Экспорт
	
	ЕстьДоступКДанным = ОбщегоНазначенияДеньги.РазделяемыеДанныеДоступны();
	Если Не ЕстьДоступКДанным Тогда
		Возврат;
	КонецЕсли;
	
	ПределПланирования = Константы.ПределПланирования.Получить();
	Если НачалоМесяца(ПределПланирования) <= НачалоМесяца(ТекущаяДатаСеанса()) Тогда
		НовыйПредел = КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 12));
		Константы.ПределПланирования.Установить(НовыйПредел);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие на форме элемента с указанным именем и изменяет значения его свойств
//
//Параметры:
//	Форма - УправляемаяФорма, на которой нужно найти элемент
//	ИмяЭлемента - Строка - имя изменяемого элемента
//	СтруктраСвойств - Структура с ключами именами свойств элемента и их значениями
//
Процедура ИзменитьСвойстваЭлементаФормы(Форма, ИмяЭлемента, СтруктураСвойств) Экспорт
	
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураСвойств Цикл
		Если Элемент[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
			Элемент[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает из обработки указанный макет и распаковывает его по указанному адресу
//
//Параметры:
//	КаталогИнструкций - Строка - полное имя каталога, в который нужно распаковать макет обработки
//	ИмяМакета    - Строка - имя макета открываемой инструкции
//	ИмяОбработки - Строка - имя обработки, из которой нужно получить макет
//
//Возвращаемое значение:
//	Строка или Неопределено - полное имя файла инструкции или пустая строка, если макет не найден - Неопределено
//
Функция РаспаковатьФайлыИнструкции(КаталогИнструкций, ИмяМакета, ИмяОбработки) Экспорт
	
	ЕстьИнструкция = Метаданные.Обработки[ИмяОбработки].Макеты.Найти(ИмяМакета) <> Неопределено;
	Если Не ЕстьИнструкция Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектОбработки = Обработки[ИмяОбработки].Создать();
	
	Архив = ОбъектОбработки.ПолучитьМакет(ИмяМакета);
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла("tmp");
	Архив.Записать(ИмяВремФайла);
	
	ЧтениеАрхива = Новый ЧтениеZipФайла(ИмяВремФайла);
	ЧтениеАрхива.ИзвлечьВсе(КаталогИнструкций, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	
	РазделительПути = ПолучитьРазделительПутиКлиента();
	Файл = Новый Файл(КаталогИнструкций + РазделительПути + ИмяМакета + РазделительПути + ИмяМакета + ".htm");
	Если Файл.Существует() И Файл.ЭтоФайл() Тогда
		Возврат Файл.ПолноеИмя;
	КонецЕсли; 
	
	Возврат "";
	
КонецФункции

// Возвращает значение, подготовленное для записи в JSON
//
//Параметры:
//	ЗначениеДляЗаписи
//
//Возвращаемое значение:
//	Произвольное значение
//
Функция ЗначениеДляЗаписиВJSON(ИмяСвойства, ЗначениеДляЗаписи, ДополнительныеПараметры = Неопределено, Отказ = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(ЗначениеДляЗаписи);
	
	Если ЗначениеДляЗаписи = Null Тогда
		Возврат Неопределено;
		
	ИначеЕсли ТипИсточника = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(ЗначениеДляЗаписи);
		
	ИначеЕсли ТипИсточника = Тип("Структура") Или ТипЗнч(ЗначениеДляЗаписи) = Тип("ФиксированнаяСтруктура") Тогда
		
		Результат = Новый Структура();
		Для каждого КлючИЗначение Из ЗначениеДляЗаписи Цикл
			Результат.Вставить(КлючИЗначение.Ключ, ЗначениеДляЗаписиВJSON(ИмяСвойства + "." + КлючИЗначение.Ключ, КлючИЗначение.Значение, ДополнительныеПараметры, Отказ));
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("Соответствие") Или ТипЗнч(ЗначениеДляЗаписи) = Тип("ФиксированноеСоответствие") Тогда
		
		Результат = Новый Соответствие();
		Для каждого КлючИЗначение Из ЗначениеДляЗаписи Цикл
			Результат.Вставить(Строка(КлючИЗначение.Ключ), ЗначениеДляЗаписиВJSON(ИмяСвойства + "." + КлючИЗначение.Ключ, КлючИЗначение.Значение, ДополнительныеПараметры, Отказ));
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("Массив") Или ТипЗнч(ЗначениеДляЗаписи) = Тип("ФиксированныйМассив") Тогда
		
		Результат = Новый Массив;
		Для каждого Элемент Из ЗначениеДляЗаписи Цикл
			Результат.Добавить(ЗначениеДляЗаписиВJSON(ИмяСвойства, Элемент, ДополнительныеПараметры, Отказ));
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ТаблицаЗначений") Тогда
		
		Результат = Новый Структура("ЭтоТаблица,Строки,Колонки", Истина, Новый Массив, Новый Структура);
		СтрокаИмен = "";
		Для каждого Колонка Из ЗначениеДляЗаписи.Колонки Цикл
			Результат.Колонки.Вставить(Колонка.Имя, Строка(Колонка.ТипЗначения));
			СтрокаИмен = СтрокаИмен + ?(СтрокаИмен = "", "", ",") + Колонка.Имя;
		КонецЦикла;
		
		НомерСтроки = 0;
		Для каждого Строка Из ЗначениеДляЗаписи Цикл
			
			ЗначениеСтроки = Новый Структура(СтрокаИмен);
			Для каждого Колонка Из ЗначениеДляЗаписи.Колонки Цикл
				ЗначениеСтроки[Колонка.Имя] = ЗначениеДляЗаписиВJSON(Строка(ИмяСвойства) + "[" + Формат(НомерСтроки, "ЧДЦ=0; ЧН=0; ЧГ=") + "]." + Колонка.Имя, 
									Строка[Колонка.Имя], ДополнительныеПараметры, Отказ);
				Если Отказ Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			Результат.Строки.Добавить(ЗначениеСтроки);
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли ТипИсточника = Тип("ХранилищеЗначения") Тогда
		
		Результат = Новый Структура("ЭтоХранилищеЗначения,Значение", Истина, ЗначениеВСтрокуВнутр(ЗначениеДляЗаписи.Получить()));
		Возврат Результат;
		
	Иначе
		
		ЭтоСсылка    = ОбщегоНазначения.ЭтоСсылка(ТипИсточника);
		Если ЭтоСсылка Тогда
			
			Если ОбщегоНазначения.ЭтоПеречисление(ЗначениеДляЗаписи.Метаданные()) Тогда
				
				Возврат Новый Структура("ЭтоСсылка,Тип,Значение", Истина, "Перечисление." + ЗначениеДляЗаписи.Метаданные().Имя, 
						?(ЗначениеЗаполнено(ЗначениеДляЗаписи), ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеДляЗаписи), "00000000-0000-0000-0000-000000000000"));
				
			ИначеЕсли ОбщегоНазначения.ЭтоСправочник(ЗначениеДляЗаписи.Метаданные()) Или ОбщегоНазначения.ЭтоПланВидовХарактеристик(ЗначениеДляЗаписи.Метаданные()) Тогда
				
				Возврат СтруктураИзСсылкиСправочника(ЗначениеДляЗаписи);
				
			ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ЗначениеДляЗаписи.Метаданные()) Тогда
				
				Возврат Новый Структура("ЭтоСсылка,Тип, ИмяПредопределенного,Наименование", 
							Истина, "ПланСчетов." + ЗначениеДляЗаписи.Метаданные().Имя,
							ЗначениеДляЗаписи.ИмяПредопределенныхДанных, ЗначениеДляЗаписи.Наименование);
				
			ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ЗначениеДляЗаписи.Метаданные()) Тогда
				
				Возврат СтруктураИзСсылкиДокумента(ЗначениеДляЗаписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеДляЗаписи;
	
КонецФункции

// Пытается восстановить значение, считаное из JSON. Структуры, подготовленные ЗначениеДляЗаписиВJSON() будут восстановлены в ссылки, 
//остальные типы данных будут возвращены "один-в-один"
//
//Параметры:
//	ИмяСвойства - Строка - имя восстаналиваемого свойства
//	ЗначениеДляВосстановления - произвольное значение, допустимое для записи в JSON
//	СоздаватьНовыеОбъекты - Булево - добавлять ли ссылочные объекты, если они не найдены по ссылкам
//	ОбменДанными - Булево - создавать ли объекты в режиме обмена даннными
//
//Возвращаемое значение
//	произвольное
//
Функция ЗначениеВосстановленноеИзJSON(ИмяСвойства, ЗначениеДляВосстановления, ДополнительныеПараметры) Экспорт

	ТипПараметра = ТипЗнч(ЗначениеДляВосстановления);
	
	Если ТипПараметра = Тип("Структура") Тогда
		
		Если ЗначениеДляВосстановления.Свойство("ЭтоСсылка") И ЗначениеДляВосстановления.ЭтоСсылка = Истина Тогда
			//Восстановление ссылочного значения
			
			ТипВид = СтрРазделить(ЗначениеДляВосстановления.Тип, ".", Ложь);
			Если НРег(ТипВид[0]) = "перечисление" Тогда
				
				Если ЗначениеЗаполнено(ЗначениеДляВосстановления.Значение) Тогда
					Возврат Перечисления[ТипВид[1]][ЗначениеДляВосстановления.Значение];
				Иначе
					Возврат Перечисления[ТипВид[1]].ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли НРег(ТипВид[0]) = "документ" Тогда
				Возврат СсылкаДокументаИзСтруктуры(ЗначениеДляВосстановления, ТипВид[1], ДополнительныеПараметры);
			Иначе
				Возврат СсылкаСправочникаИзСтруктуры(ЗначениеДляВосстановления, ТипВид[0], ТипВид[1], ДополнительныеПараметры);
			КонецЕсли;
			
		ИначеЕсли ЗначениеДляВосстановления.Свойство("ЭтоТаблица") И ЗначениеДляВосстановления.ЭтоТаблица = Истина Тогда
			
			Результат = Новый ТаблицаЗначений;
			Для каждого КолонкаТаблицы Из ЗначениеДляВосстановления.Колонки Цикл
				Результат.Колонки.Добавить(КолонкаТаблицы.Ключ);
			КонецЦикла;
			
			НомерСтроки = 0;
			Для каждого СтрокаИсточника Из ЗначениеДляВосстановления.Строки Цикл
				
				Строка = Результат.Добавить();
				Для каждого Колонка Из Результат.Колонки Цикл
					Строка[Колонка.Имя] = ЗначениеВосстановленноеИзJSON(
							Строка(ИмяСвойства) + "[" + Формат(НомерСтроки, "ЧДЦ=0; ЧН=0; ЧГ=") + "]." + Колонка.Имя, 
							СтрокаИсточника[Колонка.Имя], ДополнительныеПараметры);
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			Возврат Результат;
			
		ИначеЕсли ЗначениеДляВосстановления.Свойство("ЭтоХранилищеЗначения") И ЗначениеДляВосстановления.ЭтоХранилищеЗначения = Истина Тогда
			
			Попытка
				ЗначениеДляХранилища = ЗначениеИзСтрокиВнутр(ЗначениеДляВосстановления.Значение);
			Исключение
				ЗначениеДляХранилища = Неопределено;
			КонецПопытки; 
			Возврат Новый ХранилищеЗначения(ЗначениеДляХранилища);
			
		Иначе
			
			Результат = Новый Структура;
			Для каждого КлючИЗначение Из ЗначениеДляВосстановления Цикл
				Результат.Вставить(КлючИЗначение.Ключ, ЗначениеВосстановленноеИзJSON(
							ИмяСвойстваСУчетомКлюча(ИмяСвойства, КлючИЗначение.Ключ),
							КлючИЗначение.Значение, ДополнительныеПараметры));
			КонецЦикла;
			
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ТипПараметра = Тип("Соответствие") Тогда
		
		Результат = Новый Соответствие;
		Для каждого КлючИЗначение Из ЗначениеДляВосстановления Цикл
			Результат.Вставить(КлючИЗначение.Ключ, ЗначениеВосстановленноеИзJSON(
						ИмяСвойстваСУчетомКлюча(ИмяСвойства, КлючИЗначение.Ключ),
						КлючИЗначение.Значение, ДополнительныеПараметры));
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		
		Результат = Новый Массив;
		Для каждого Элемент Из ЗначениеДляВосстановления Цикл
			Результат.Добавить(ЗначениеВосстановленноеИзJSON(ИмяСвойства, 
						Элемент, ДополнительныеПараметры));
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли ТипПараметра = Тип("Строка") И ЗначениеЗаполнено(ИмяСвойства) И СтрНайти(ДополнительныеПараметры.ИменаПолейТипаДата + ",", ИмяСвойства + ",") > 0 Тогда
		
		Возврат ДатаИзСтрокиISO(ЗначениеДляВосстановления);
		
	КонецЕсли;
	
	Возврат ЗначениеДляВосстановления;

КонецФункции

Функция ДаныеИзЧтенияJSON(ЧтениеJSON) Экспорт

	Возврат ПрочитатьJSON(ЧтениеJSON,,, ФорматДатыJSON.ISO)

КонецФункции

Процедура ДобавитьДанныеВЗаписьJSON(ЗаписьJSON, Данные) Экспорт

	ЗаписатьJSON(ЗаписьJSON, Данные, , "ЗначениеДляЗаписиВJSON", ДеньгиВызовСервера)

КонецПроцедуры

// Возвращает дату, восстановленную из строки в формате ISO
//
//Параметры:
//	СтрокаДаты - Строка, которую нужно привести к дате
//
//Возвращаемое значение:
//	Дата
//
Функция ДатаИзСтрокиISO(СтрокаДаты) Экспорт

	Если Не ЗначениеЗаполнено(СтрокаДаты) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Если СтрДлина(СтрокаДаты) = 10 Тогда
		МассивЧисел = СтрРазделить(СтрокаДаты, "./-", Ложь);
		Если МассивЧисел.Количество() = 3 Тогда
			Если СтрДлина(МассивЧисел[2]=4) Тогда
				Возврат Дата(МассивЧисел[2],МассивЧисел[1],МассивЧисел[0]);
			Иначе
				Возврат Дата(МассивЧисел[0],МассивЧисел[1],МассивЧисел[2]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодготовленнаяСтрока = "";
	ДатаИВремя = СтрРазделить(СтрокаДаты, "T");
	ПодготовленнаяСтрока = СтрЗаменить(ДатаИВремя[0], "-", "");
	ПодготовленнаяСтрока = СтрЗаменить(ПодготовленнаяСтрока, ".", "");
	Если ДатаИВремя.Количество() > 1 Тогда
		ПодготовленнаяСтрока = ПодготовленнаяСтрока + СтрЗаменить(ДатаИВремя[1], ":", "");
	КонецЕсли;
	
	Попытка
		Возврат Дата(ПодготовленнаяСтрока);
	Исключение
		ЗаписатьОшибкуДействияВЖурналРегистрации("Работа с JSON", "Преобразование даты в формате ISO", ИнформацияОбОшибке());
		Возврат Дата(1,1,1);
	КонецПопытки; 

КонецФункции

Процедура ОтменитьФоновоеЗадание(ПараметрыЗадания) Экспорт
	
	Если ПараметрыЗадания <> Неопределено И ПараметрыЗадания.Статус = "Выполняется" Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ПараметрыЗадания.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры
 

#КонецОбласти



#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру с описанием фонового задания
//
Функция ФоновоеЗаданиеЭтапа(ИДФормы, ИмяПроцедуры, ПараметрыМетода, НаименованиеЗадания) Экспорт

	ПараметрыЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(ИДФормы);
	ПараметрыЗадания.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	//ПараметрыЗадания.БезРасширений     = Истина;
	//ПараметрыЗадания.ЗапуститьВФоне    = Истина;
	
	Задание = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыЗадания);
	
	Возврат Задание;

КонецФункции



#КонецОбласти



#Область СлужебныеПроцедурыИФункции


Функция СтруктураИзСсылкиСправочника(Ссылка, Уровень = 0) 

	Результат = Новый Структура("ЭтоСсылка,ID", Истина, Ссылка.УникальныйИдентификатор());
	Результат.Вставить("Тип", ?(ОбщегоНазначения.ЭтоСправочник(Ссылка.Метаданные()), "Справочник.", "ПланВидовХарактеристик.") + Ссылка.Метаданные().Имя );
	Результат.Вставить("ПометкаУдаления", Ссылка.ПометкаУдаления);
	
	Если Ссылка.Предопределенный Тогда
		Результат.Вставить("ИмяПредопределенного", Ссылка.ИмяПредопределенныхДанных);
	КонецЕсли;
	ЕстьКод = Ссылка.Метаданные().ДлинаКода > 0;
	Если ЕстьКод Тогда
		Результат.Вставить("Код", Ссылка.Код);
	КонецЕсли;
	ЕстьНаименование = Ссылка.Метаданные().ДлинаНаименования > 0;
	Если ЕстьНаименование Тогда
		Результат.Вставить("Наименование", Ссылка.Наименование);
	КонецЕсли;
	
	Если Ссылка.Метаданные().Владельцы.Количество() > 0 Тогда
		Результат.Вставить("Владелец", СтруктураИзСсылкиСправочника(Ссылка.Владелец));
	КонецЕсли;
	
	Если Ссылка.Метаданные().Иерархический Тогда
		
		Если Ссылка.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Результат.Вставить("ЭтоГруппа", Ссылка.ЭтоГруппа);
		Иначе
			Результат.Вставить("ЭтоГруппа", Ложь);
		КонецЕсли;
		
		Если Уровень > 0 Тогда
			Результат.Вставить("Родитель", Новый Структура("ЭтоСсылка,ID", Истина, Ссылка.Родитель.УникальныйИдентификатор()));
			Если ЕстьКод Тогда
				Результат.Родитель.Вставить("Код", Ссылка.Родитель.Код);
			КонецЕсли;
			Если ЕстьНаименование Тогда
				Результат.Родитель.Вставить("Наименование", Ссылка.Родитель.Наименование);
			КонецЕсли;
		Иначе
			Результат.Вставить("Родитель", СтруктураИзСсылкиСправочника(Результат.Родитель, Уровень + 1));
		КонецЕсли;
		
	Иначе
		Результат.Вставить("ЭтоГруппа", Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураИзСсылкиДокумента(Ссылка, Уровень = 0) 

	Результат = Новый Структура("ЭтоСсылка,ID", Истина, Ссылка.УникальныйИдентификатор());
	Результат.Вставить("Тип", "Документ." + Ссылка.Метаданные().Имя);
	Результат.Вставить("Дата", Ссылка.Дата);
	Результат.Вставить("ПометкаУдаления", Ссылка.ПометкаУдаления);
	Результат.Вставить("Проведен", Ссылка.Проведен);
	
	Если Ссылка.Метаданные().ДлинаНомера > 0 Тогда
		Результат.Вставить("Номер", Ссылка.Номер);
	КонецЕсли;
	
	
	Возврат Результат;

КонецФункции

Функция СсылкаДокументаИзСтруктуры(Структура, ВидДокумента, ДополнительныеПараметры) 

	// В данной версии документы не создаются
	
	Менеджер = Документы[ВидДокумента];
	Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Структура.ID));
	Если Ссылка.Пустая() Или Не ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Возврат Менеджер.ПустаяСсылка;
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции

Функция СсылкаСправочникаИзСтруктуры(Структура, Тип, Вид, ДополнительныеПараметры) 

	// В данной версии документы не создаются
	
	Если НРег(Тип) = "планвидовхарактеристик" Тогда
		Менеджер = ПланыВидовХарактеристик[Вид];
	Иначе
		Менеджер = Справочники[Вид];
	КонецЕсли;
	
	Если Структура.ID = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Структура.ID));
	Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Родитель     = Неопределено;
	ЕстьРодитель = Структура.Свойство("Родитель", Родитель);
	Если ЕстьРодитель И ТипЗнч(Родитель) = Тип("Структура") И Родитель.Свойство("ЭтоСсылка") Тогда
		Родитель = СсылкаСправочникаИзСтруктуры(Родитель, Тип, Вид, ДополнительныеПараметры);
	КонецЕсли;
	
	Владелец     = Неопределено;
	ЕстьВладелец = Структура.Свойство("Владелец", Владелец);
	Если ЕстьВладелец И ТипЗнч(Владелец) = Тип("Структура") И Владелец.Свойство("ЭтоСсылка") Тогда
		
		ТипВид = СтрРазделить(Владелец.Тип, ".", Ложь);
		Владелец = ЗначениеВосстановленноеИзJSON("Владелец", Владелец, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Код = Неопределено;
	Если Структура.Свойство("Код", Код) И ЗначениеЗаполнено(Код) Тогда
		Ссылка = Менеджер.НайтиПоКоду(Код, Ложь, Родитель, Владелец);
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Наименование = Неопределено;
	Если Структура.Свойство("Наименование", Наименование) И ЗначениеЗаполнено(Наименование) Тогда
		Ссылка = Менеджер.НайтиПоНаименованию(Наименование, Истина, Родитель, Владелец);
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Возврат Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		СоздаватьНовыеОбъекты = ДополнительныеПараметры.Свойство("СоздаватьНовыеОбъекты") И ДополнительныеПараметры.СоздаватьНовыеОбъекты;
		ОбменДанными = ДополнительныеПараметры.Свойство("ОбменДанными") И ДополнительныеПараметры.ОбменДанными;
	Иначе
		СоздаватьНовыеОбъекты = Ложь;
		ОбменДанными          = Ложь;
	КонецЕсли;
	
	Если СоздаватьНовыеОбъекты И (ЗначениеЗаполнено(Наименование) Или ЗначениеЗаполнено(Код)) Тогда
		
		Если Структура.ЭтоГруппа Тогда
			НовыйОбъект = Менеджер.СоздатьГруппу();
		Иначе
			НовыйОбъект = Менеджер.СоздатьЭлемент();
		КонецЕсли;
		НовыйОбъект.УстановитьСсылкуНового(Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Структура.ID)));
		НовыйОбъект.Заполнить(Неопределено);
		
		Если ЗначениеЗаполнено(Наименование) Тогда
			НовыйОбъект.Наименование = Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(Код) Тогда
			НовыйОбъект.Код = Код;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родитель) Тогда
			НовыйОбъект.Родитель = Родитель;
		КонецЕсли;
		Если ЗначениеЗаполнено(Владелец) Тогда
			НовыйОбъект.Владелец = Владелец;
		КонецЕсли;
		
		Если Структура.Свойство("ПометкаУдаления") Тогда
			НовыйОбъект.ПометкаУдаления = Структура.ПометкаУдаления;
		КонецЕсли;
		
		Если ОбменДанными Тогда
			НовыйОбъект.ОбменДанными = Истина;
		КонецЕсли;
		
		НовыйОбъект.Записать();
		Ссылка = НовыйОбъект.Ссылка;
		
	КонецЕсли;
	
	
	Возврат Ссылка;

КонецФункции

Функция ИмяСвойстваСУчетомКлюча(ИмяСвойства, Ключ) 
	
	Возврат ?(ЗначениеЗаполнено(ИмяСвойства), "" + ИмяСвойства, "")
			+?(ЗначениеЗаполнено(Ключ), "." + Ключ, "");
	
КонецФункции 



#КонецОбласти



