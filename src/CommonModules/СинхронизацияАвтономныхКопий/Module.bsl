////////////////////////////////////////////////////////////////////////////////
// СинхронизацияАвтономныхКопий - обслуживание обмена данными
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регистрирует изменения для указанного узла плана обмена
Процедура ЗарегистрироватьВсеОбъектыДляОтправкиНаУзел(УзелКорреспондента, ПараметрыОбмена = Неопределено) Экспорт

	Если ПараметрыОбмена = Неопределено Тогда
		ПараметрыОбмена = ПараметрыОбменаСУзлом(УзелКорреспондента);
	КонецЕсли;
	
	ВидПериода = Неопределено;
	КоличествоПериодов = Неопределено;
	ПараметрыОбмена.Свойство("ВидПериода", ВидПериода);
	ПараметрыОбмена.Свойство("КоличествоПериодов", КоличествоПериодов);
	МинДатаДокументов = МинимальнаяДатаДляДокументов(ВидПериода, КоличествоПериодов);
	
	Если Не ЗначениеЗаполнено(МинДатаДокументов) Тогда
		// Регистрируется все
		ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента);
		Возврат;
	КонецЕсли;

	МинДатаКурсов = ДобавитьМесяц(МинДатаДокументов, -1);
	МинДатаПланов = ДобавитьМесяц(МинДатаДокументов, -1);
	 
	СоставПланаОбмена = УзелКорреспондента.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			Выборка = ВыбратьДокументыДляРегистрации(ЭлементСоставаПланаОбмена.Метаданные, МинДатаДокументов);
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента, Выборка.Ссылка);
			КонецЦикла;
			
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			Если ЭлементСоставаПланаОбмена.Метаданные = Метаданные.РегистрыСведений.КурсыВалют Тогда
				
				Выборка = ВыбратьКурсыВалютДляРегистрации(МинДатаКурсов);
				НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.БазоваяВалюта.Установить(Константы.ВалютаУчета.Получить());
				Пока Выборка.Следующий() Цикл
					НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
					НаборЗаписей.Отбор.Валюта.Установить(Выборка.Валюта);
					ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента, НаборЗаписей);
				КонецЦикла;
				 
			ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные = Метаданные.РегистрыСведений.ДатыРасписаний Тогда
				
				Выборка = ВыбратьДатыРасписанияДляРегистрации(МинДатаПланов);
				НаборЗаписей = РегистрыСведений.ДатыРасписаний.СоздатьНаборЗаписей();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей.Отбор.ВладелецРасписания.Установить(Выборка.ВладелецРасписания);
					НаборЗаписей.Отбор.ПлановаяДата.Установить(Выборка.ПлановаяДата);
					ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента, НаборЗаписей);
				КонецЦикла;
				
			ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные = Метаданные.РегистрыСведений.ПоказателиБюджета Тогда
				
				Выборка = ВыбратьПоказателиБюджетаДляРегистрации(МинДатаДокументов);
				НаборЗаписей = РегистрыСведений.ПоказателиБюджета.СоздатьНаборЗаписей();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей.Отбор.ВариантБюджета.Установить(Выборка.ВариантБюджета);
					НаборЗаписей.Отбор.НачалоПериода.Установить(Выборка.НачалоПериода);
					НаборЗаписей.Отбор.РазделБюджета.Установить(Выборка.РазделБюджета);
					НаборЗаписей.Отбор.ГрафаБюджета.Установить(Выборка.ГрафаБюджета);
					НаборЗаписей.Отбор.СтатьяБюджета.Установить(Выборка.СтатьяБюджета);
					ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента, НаборЗаписей);
				КонецЦикла;
				
			ИначеЕсли ЭлементСоставаПланаОбмена.Метаданные = Метаданные.РегистрыСведений.ОперацииШаблонов Тогда
				
				Выборка = ВыбратьОперацииШаблонов(МинДатаПланов);
				НаборЗаписей = РегистрыСведений.ОперацииШаблонов.СоздатьНаборЗаписей();
				Пока Выборка.Следующий() Цикл
					НаборЗаписей.Отбор.Шаблон.Установить(Выборка.Шаблон);
					НаборЗаписей.Отбор.Операция.Установить(Выборка.Операция);
					ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента, НаборЗаписей);
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента, ЭлементСоставаПланаОбмена.Метаданные);
				
			КонецЕсли;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелКорреспондента, ЭлементСоставаПланаОбмена.Метаданные);
			
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры

// Возвращает дату, вычисленную по параметрам синхронизации
//
//Параметры:
//	ВидПериода - ПеречислениеСсылка.Периодичность - вид периода, по которому определяется дата для документов
//	КоличествоПериодов - число - количество заданных периодов
//
//Возвращаемое значение:
//	Дата
//
Функция МинимальнаяДатаДляДокументов(ВидПериода, КоличествоПериодов, ДатаОтсчета = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
		ДатаОтсчета = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПериода) Или Не ЗначениеЗаполнено(КоличествоПериодов) Тогда
		Возврат Дата(1,1,1);
	ИначеЕсли ВидПериода = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоДня(ДобавитьМесяц(ДатаОтсчета, -КоличествоПериодов));
	ИначеЕсли ВидПериода = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоДня(ДатаОтсчета - КоличествоПериодов * 604800);
	Иначе
		Возврат НачалоДня(ДатаОтсчета - КоличествоПериодов * 86400);
	КонецЕсли; 

КонецФункции

// Добавляет в план обмена новый узел и возвращает ссылку на него
//
//Параметры:
//	ИмяПланаОбмена - Строка - Наименование плана обмена, в котором нужно создать узел
//	Код - Строка - код нового узла
//	Наименование - Строка - Наименование нового узла
//	ЗначенияРеквизитов - Структура - значения реквизитов, которые нужно назначить новому узлу
//
//Возвращаемое значение:
//	ПланОбменаСсылка
//
Функция НовыйУзелПланаОбмена(ИмяПланаОбмена, Код, Наименование, ЗначенияРеквизитов = Неопределено, ОбменДаннымиЗагрузка = Ложь) Экспорт

	ОбъектУзла = ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();
	ОбъектУзла.Код            = Код;
	ОбъектУзла.Наименование   = Наименование;
	ОбъектУзла.Активность     = Истина;
	
	ОбъектУзла.ЗатребованныйСценарий    = Перечисления.СценарииОбменаСМобильнымПриложением.ОбъединениеДанных;
	ОбъектУзла.РегистрироватьИзменения  = Истина;
	ОбъектУзла.МобильноеУстройство      = НРег(ИмяПланаОбмена) = "мобильноеприложение";
	ОбъектУзла.ВерсияФорматаОбмена      = СинхронизацияАвтономныхКопийКлиентСервер.ТекущаяВерсияФормата(); 
	
	Если ЗначенияРеквизитов <> Неопределено Тогда
		Для каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
			ОбъектУзла[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбменДаннымиЗагрузка Тогда
		ОбъектУзла.ОбменДанными.Загрузка    = Истина;
	КонецЕсли;
	
	ОбъектУзла.Записать();
	
	// Создание насроек танспорта, без которого обмен через файлы может вызвать ошибку
	НастройкаТранспорта = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьМенеджерЗаписи();
	НастройкаТранспорта.Корреспондент = ОбъектУзла.Ссылка;
	НастройкаТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	НастройкаТранспорта.FILEКаталогОбменаИнформацией = КаталогВременныхФайлов();
	НастройкаТранспорта.Записать(Истина);
	
	Возврат ОбъектУзла.Ссылка;

КонецФункции

// Возвращает ссылку на узел плана обмена по его коду. При остуствии узел может быть создан автоматически
//
//Параметры:
//	ИмяПланаОбмена - Строка - Наименование плана обмена, в котором нужно создать узел
//	Код - Строка - код нового узла
//	СоздаватьНовый - Булево - нужно ли создавать новый узел, если не найден код
//
//Возвращаемое значение:
//	ПланОбменаСсылка
//
Функция УзелПланаОбменаПоКоду(ИмяПланаОбмена, Код, СоздаватьНовый = Ложь, Наименование = Неопределено) Экспорт

	Результат = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(Код);
	Если Результат.Пустая() И СоздаватьНовый И ЗначениеЗаполнено(Код) Тогда
		
		Если Наименование = Неопределено Тогда
			Наименование = ?(НРег(ИмяПланаОбмена) = "мобильноеприложение", 
					НСтр("ru='Новое устройство'"), НСтр("ru='Новая автономная копия'"));
		КонецЕсли;
		
		РеквизитыУзла = Новый Структура;
		РеквизитыУзла.Вставить("ЗатребованныйСценарий", ?(КоличествоАвтономныхКопий() = 0,
			Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВЦентральнойБазе, 
			Перечисления.СценарииСинхронизацииАвтономныхКопий.ОбъединениеДанных));
			
		Результат = НовыйУзелПланаОбмена(ИмяПланаОбмена, Код, Наименование, РеквизитыУзла, Истина);
		
	КонецЕсли;

	Возврат ?(ЗначениеЗаполнено(Результат), Результат, Неопределено);
	
КонецФункции

// Проверяет блокировку узла плана обмена
//
//Параметры:
//	Узел - ПланОбменаСсылка
//
Функция УзелДоступенДляОбмена(Узел) Экспорт
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		ОбъектУзла = Узел.ПолучитьОбъект();
		ОбъектУзла.Заблокировать();
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции


#Область ПараметрыОбмена

// Возвращает структуру с параметрами обмена: коды, настройки, сценарий и т.п.
//
//Параметры:
//	УзелКорреспондента - ПланОбменаСсылка
//	ДляЗаписиВJSON - Булево - нужно ли подготовить результат для записи в Json
//
//Возвращаемое значение:
//	Структура
//
Функция ПараметрыОбменаСУзлом(УзелКорреспондента, ДляЗаписиВJSON = Ложь) Экспорт

	Если УзелКорреспондента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПланаОбмена = УзелКорреспондента.Метаданные().Имя;
	ПараметрыОбмена = Новый Структура;

	ПараметрыОбмена.Вставить("КодЦентральнойБазы", СинхронизацияАвтономныхКопийВызовСервера.КодЦентральнойБазы(ИмяПланаОбмена));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелКорреспондента", УзелКорреспондента);
	Запрос.УстановитьПараметр("МобильноеУстройство", ИмяПланаОбмена = "МобильноеПриложение");
	Запрос.УстановитьПараметр("СценарийПоУмолчанию", Перечисления.СценарииСинхронизацииАвтономныхКопий.ОбъединениеДанных);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланОбмена.Наименование КАК ИмяУзла,
	|	ПланОбмена.Наименование КАК Наименование,
	|	ПланОбмена.Код КАК КодУзла,
	|	ПланОбмена.Активность КАК Активность,
	|	ПланОбмена.СинхронизацияЗапрещена КАК СинхронизацияЗапрещена,
	|	&МобильноеУстройство КАК МобильноеУстройство,
	|	ПланОбмена.ПользовательБазы КАК ПользовательБазы,
	|	ПланОбмена.ВерсияФорматаОбмена КАК ВерсияФорматаОбмена,
	|	ПланОбмена.ЗатребованныйСценарий КАК ЗатребованныйСценарий,
	|	ПланОбмена.НомерОтправленного КАК НомерОтправленного,
	|	ПланОбмена.НомерПринятого КАК НомерПринятого,
	|	ЕСТЬNULL(ПараметрыСинхронизации.СценарийПереданныхДанных, &СценарийПоУмолчанию) КАК СценарийПереданныхДанных,
	|	ЕСТЬNULL(ПараметрыСинхронизации.ПрежнееСценарийПереданныхДанных, &СценарийПоУмолчанию) КАК ПрежнееСценарийПереданныхДанных,
	|	ЕСТЬNULL(ПараметрыСинхронизации.СценарийЗапрашиваемыхДанных, &СценарийПоУмолчанию) КАК СценарийЗапрашиваемыхДанных,
	|	ЕСТЬNULL(ПараметрыСинхронизации.ПрежнееСценарийЗапрашиваемыхДанных, &СценарийПоУмолчанию) КАК ПрежнееСценарийЗапрашиваемыхДанных,
	|	ЕСТЬNULL(ПараметрыСинхронизации.КоличествоПериодов, 0) КАК КоличествоПериодов,
	|	ЕСТЬNULL(ПараметрыСинхронизации.ПрежнееКоличествоПериодов, 0) КАК ПрежнееКоличествоПериодов,
	|	ЕСТЬNULL(ПараметрыСинхронизации.ВидПериода, НЕОПРЕДЕЛЕНО) КАК ВидПериода,
	|	ЕСТЬNULL(ПараметрыСинхронизации.ПрежнееВидПериода, НЕОПРЕДЕЛЕНО) КАК ПрежнееВидПериода,
	|	ЕСТЬNULL(ПараметрыСинхронизации.УчитыватьОтборПоКошелькам, ЛОЖЬ) КАК УчитыватьОтборПоКошелькам,
	|	ЕСТЬNULL(ПараметрыСинхронизации.ПрежнееУчитыватьОтборПоКошелькам, ЛОЖЬ) КАК ПрежнееУчитыватьОтборПоКошелькам,
	|	ЕСТЬNULL(ПараметрыСинхронизации.КлючОтбораПоКошелькам, """") КАК КлючОтбораПоКошелькам,
	|	ЕСТЬNULL(ПараметрыСинхронизации.ПрежнееКлючОтбораПоКошелькам, """") КАК ПрежнееКлючОтбораПоКошелькам
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК ПланОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыСинхронизацииАвтономныхКопий КАК ПараметрыСинхронизации
	|		ПО ПараметрыСинхронизации.Узел = ПланОбмена.Ссылка
	|ГДЕ
	|	ПланОбмена.Ссылка = &УзелКорреспондента";

	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() = 0 Тогда
		Выборка.Добавить();
	КонецЕсли;
	
	Для Каждого Колонка Из Выборка.Колонки Цикл
		ПараметрыОбмена.Вставить(Колонка.Имя, Выборка[0][Колонка.Имя]);
		Если ДляЗаписиВJSON Тогда
			ПараметрыОбмена[Колонка.Имя] = ДеньгиВызовСервера.ЗначениеДляЗаписиВJSON(Колонка.Имя, ПараметрыОбмена[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;

	Если СинхронизацияАвтономныхКопийВызовСервера.ЭтоАвтономнаяКопия() Тогда
		ПараметрыОбмена.СценарийЗапрашиваемыхДанных = ПараметрыОбмена.ЗатребованныйСценарий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена.ВерсияФорматаОбмена) И ИмяПланаОбмена = "МобильноеПриложение" Тогда
		ПараметрыОбмена.ВерсияФорматаОбмена = "1.6.3";
	КонецЕсли;
	
	Возврат ПараметрыОбмена;
	
КонецФункции

// Обновляет значения параметров синхронизации с указанным узлом плана обмена. Новые значения записываются в 
//РС ПараметрыСинхронизацииАвтономныхКопий и узел плана обмена. Анализ новых значений осуществляется в обработчиках
//ПередЗагрузкой... и ПередВыгрузкой... путем сравнения новых значений с значениями параметров, имеющих префикс "Прежнее"
//
//Параметры:
//	УзелКорреспондента - ПланОбменаСсылка - узел, от которого получены новые параметры
//	ПараметрыОбмена - Структура - Значения параметров, полученные от указанного узла
//
Процедура ЗаписатьНовыеПараметрыОбменаСУзлом(УзелКорреспондента, ПараметрыОбмена) Экспорт
	
	ТекущиеЗначения    = ПараметрыОбменаСУзлом(УзелКорреспондента);
	ЭтоЦентральнаяБаза = СинхронизацияАвтономныхКопийВызовСервера.ЭтоЦентральнаяБаза();
	
	// Подготовка объектов к обновлению
	ОбъектУзла     = УзелКорреспондента.ПолучитьОбъект();
	НаборРегистра  = РегистрыСведений.ПараметрыСинхронизацииАвтономныхКопий.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Узел.Установить(УзелКорреспондента);
	НаборРегистра.Прочитать();
	Если НаборРегистра.Количество() = 0  Тогда
		НаборРегистра.Отбор.Узел.Установить(УзелКорреспондента);
		НаборРегистра.Добавить();
	КонецЕсли;
	ЗаписьРегистра = НаборРегистра[0];
	ЗаписьРегистра.Узел = УзелКорреспондента;
	
	РеквизитыЗаписи  = Новый Структура;
	РеквизитыОбъекта = Новый Структура("ВерсияФорматаОбмена,Наименование,ЗатребованныйСценарий");
	Если ЭтоЦентральнаяБаза Тогда
		РеквизитыОбъекта.Вставить("ПользовательБазы", Неопределено);
		Для каждого Ресурс Из Метаданные.РегистрыСведений.ПараметрыСинхронизацииАвтономныхКопий.Ресурсы Цикл
			РеквизитыЗаписи.Вставить(Ресурс.Имя);
		КонецЦикла;
	Иначе
		РеквизитыЗаписи.Вставить("СценарийПереданныхДанных", Неопределено);
		РеквизитыЗаписи.Вставить("СценарийЗапрашиваемыхДанных", Неопределено);
	КонецЕсли;
	
	ИсключаемыеПараметры = НРег("НомерОтправленного,НомерПринятого,");
	РегистрМодифицирован = Ложь;
	
	Для каждого КлючИЗначение Из ПараметрыОбмена Цикл
		
		Если СтрНайти(ИсключаемыеПараметры, НРег(КлючИЗначение.Ключ) + ",") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущиеЗначения.Свойство(КлючИЗначение.Ключ) 
			Или ТекущиеЗначения[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыОбъекта.Свойство(КлючИЗначение.Ключ) Тогда
			ОбъектУзла[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
		Если РеквизитыЗаписи.Свойство(КлючИЗначение.Ключ) Тогда
			ЗаписьРегистра[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			РегистрМодифицирован = Истина;
		КонецЕсли;
		 
	КонецЦикла;
	
	Если ОбъектУзла.Модифицированность() Тогда
		ОбъектУзла.ОбменДанными.Загрузка = Истина;
		ОбъектУзла.Записать();
	КонецЕсли;
	
	Если РегистрМодифицирован Тогда
		НаборРегистра.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет прежние значения параметров синхронизации с указанным узлом плана обмена.
//
//Параметры:
//	УзелКорреспондента - ПланОбменаСсылка - узел, от которого получены новые параметры
//	ПараметрыОбмена - Структура - Значения параметров, полученные от указанного узла
//
Процедура ОбновитьОбработанныеПараметрыОбменаСУзлом(УзелКорреспондента, ПараметрыОбмена) Экспорт
	
	ТекущиеЗначения    = ПараметрыОбменаСУзлом(УзелКорреспондента);
	ЭтоЦентральнаяБаза = СинхронизацияАвтономныхКопийВызовСервера.ЭтоЦентральнаяБаза();
	
	// Подготовка объектов к обновлению
	НаборРегистра  = РегистрыСведений.ПараметрыСинхронизацииАвтономныхКопий.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Узел.Установить(УзелКорреспондента);
	НаборРегистра.Прочитать();
	Если НаборРегистра.Количество() = 0  Тогда
		НаборРегистра.Добавить();
	КонецЕсли;
	ЗаписьРегистра = НаборРегистра[0];
	ЗаписьРегистра.Узел = УзелКорреспондента;
	ЗаписьИзменена = Ложь;
	
	РеквизитыЗаписи = Новый Структура;
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ПараметрыСинхронизацииАвтономныхКопий.Реквизиты Цикл
		РеквизитыЗаписи.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ПараметрыОбмена Цикл
		
		Если Не ТекущиеЗначения.Свойство(КлючИЗначение.Ключ) Или Не РеквизитыЗаписи.Свойство("Прежнее" + КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьРегистра["Прежнее" + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		ЗаписьИзменена = Истина;
		 
	КонецЦикла;
	
	Если ЗаписьИзменена Тогда
		НаборРегистра.Отбор.Узел.Установить(УзелКорреспондента);
		НаборРегистра.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку справочника СценарииОбменовДанными для узла центральной базы
//
//Параметры:
//	УзелЦБ - ПланОбменаСсылка.СинхронизацияАвтономныхКопий - узел центральной базы
//
//Возвращаемое значение:
//	СправочникСсылка.СценарииОбменовДанными
//
Функция СценарийОбменаДаннымиСЦентральнойБазой(УзелЦБ = Неопределено) Экспорт
	
	Результат = Справочники.СценарииОбменовДанными.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(УзелЦБ) Тогда
		УзелЦБ = СинхронизацияАвтономныхКопийВызовСервера.УзелЦентральнойБазы();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УзелЦБ) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелЦБ", УзелЦБ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СценарииОбменовДаннымиНастройкиОбмена.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы = &УзелЦБ
	|	И СценарииОбменовДаннымиНастройкиОбмена.ВидТранспортаОбмена = Значение(Перечисление.ВидыТранспортаСообщенийОбмена.WS)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Заменяет в параметрах синхронизации сценарий обмена данными на "ОбъединениеДанных"
//
//Параметры:
//	Узел - узел плана обмена, для которого следует изменить сценарий обмена
//
Процедура УстановитьСтандартныйСценарийЗапросаДанных(Узел) Экспорт
	
	СтандартныйСценарий = Перечисления.СценарииСинхронизацииАвтономныхКопий.ОбъединениеДанных;
	
	ПараметрыОбмена = ПараметрыОбменаСУзлом(Узел);
	Если ПараметрыОбмена.ЗатребованныйСценарий = СтандартныйСценарий 
		И ПараметрыОбмена.СценарийЗапрашиваемыхДанных = СтандартныйСценарий Тогда
		Возврат;
	КонецЕсли;
	
	НовыеЗначения = Новый Структура;
	НовыеЗначения.Вставить("СценарийЗапрашиваемыхДанных", СтандартныйСценарий);
	НовыеЗначения.Вставить("ЗатребованныйСценарий", СтандартныйСценарий);
	НовыеЗначения.Вставить("СценарийПереданныхДанных", СтандартныйСценарий);
	ЗаписатьНовыеПараметрыОбменаСУзлом(Узел, НовыеЗначения);
	
КонецПроцедуры

// Устанавливает новый сценарий для списка узлов плана обмена.
//	Например, если какой-либо узел передал пакет со сценарием "ЗаменитьВсеВЦентральнойБазе", 
//для всех остальных узлов следует установить сценарий "ЗаменитьВсеВАвтономнойКопии"
//
//Параметры:
//	НовыйСценарий - ПеречислениеСсылка - сценарий обмена, который нужно установить
//	СписокУзлов - Массив или Неопределено - узлы, для которых нужно установить новый сценарий
//	СписокИсключений - Массив - узлы, которые нужно исключить из установки нового сценария
//
Процедура УстановитьСценарийДляУзлов(ИмяПланаОбмена, НовыйСценарий, СписокУзлов = Неопределено, СписокИсключений = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокУзлов", СписокУзлов);
	Запрос.УстановитьПараметр("СписокИсключений", СписокИсключений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	План.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК План
	|ГДЕ
	|	НЕ План.ЭтотУзел
	|	И (&СписокУзлов = НЕОПРЕДЕЛЕНО
	|			ИЛИ План.Ссылка В (&СписокУзлов))
	|	И (&СписокИсключений = НЕОПРЕДЕЛЕНО
	|			ИЛИ НЕ План.Ссылка В (&СписокИсключений))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ЗначенияДляЗаписи = Новый Структура("СценарийЗапрашиваемыхДанных,ПрежнееСценарийЗапрашиваемыхДанных", 
				НовыйСценарий, 
				Перечисления.СценарииСинхронизацииАвтономныхКопий.ОбъединениеДанных);
	Пока Выборка.Следующий() Цикл
		ЗаписатьНовыеПараметрыОбменаСУзлом(Выборка.Ссылка, ЗначенияДляЗаписи);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти 


#Область ЗагрузкаДанных

Процедура ПрочитатьПараметрыЗагружаемогоПакета(ИмяФайла, ПараметрыОбмена) Экспорт
	
	ПараметрыОбмена.Вставить("ЗаголовокИзФайла", Неопределено);
	ПараметрыОбмена.Вставить("НастройкиИзФайла", Неопределено);
	ПараметрыОбмена.Вставить("НомерВерсииФайла", Неопределено);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ЧтениеXML.Прочитать();
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Message" Тогда
		ЧтениеXML.Прочитать();
	Иначе
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	ПространствоИмен = Неопределено;
	
	Если  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Header" Тогда
		// Чтение объекта Header
		
		ЗаголовокИзФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЧтениеXML.ЛокальноеИмя));
		ПространствоИмен = ?(ЗаголовокИзФайла.Свойства().Получить("Format") = Неопределено, Неопределено, НРег(ЗаголовокИзФайла.Format));
		ПараметрыОбмена.ЗаголовокИзФайла = СтруктураЗаголовкаИзXDTO(ЗаголовокИзФайла);
		
		Если ПараметрыОбмена.ЗаголовокИзФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыОбмена.НомерВерсииФайла) И ПараметрыОбмена.ЗаголовокИзФайла.Свойство("ДопустимыеВерсии") Тогда
			Если ТипЗнч(ПараметрыОбмена.ЗаголовокИзФайла.ДопустимыеВерсии) = Тип("Массив") Тогда
				ПараметрыОбмена.НомерВерсииФайла = ПараметрыОбмена.ЗаголовокИзФайла.ДопустимыеВерсии[ПараметрыОбмена.ЗаголовокИзФайла.ДопустимыеВерсии.ВГраница()];
			Иначе
				ПараметрыОбмена.НомерВерсииФайла = ПараметрыОбмена.ЗаголовокИзФайла.ДопустимыеВерсии;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если  ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.ЛокальноеИмя = "Body" Тогда
		// Чтение параметров обмена
		
		ЧтениеXML.Прочитать();
		ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
		Если ЛокальноеИмя = "Settings" Или ЛокальноеИмя = "ПараметрыОбмена" Тогда
			ПараметрыИзФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ЧтениеXML.URIПространстваИмен, ЛокальноеИмя));
			ПараметрыОбмена.НастройкиИзФайла = СтруктураПараметровОбменаИзXDTO(ПараметрыИзФайла, ЛокальноеИмя);
		КонецЕсли;
		
		Если ПараметрыОбмена.НастройкиИзФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыОбмена.НомерВерсииФайла) И ЗначениеЗаполнено(ПараметрыОбмена.НастройкиИзФайла.ВерсияФорматаОбмена) Тогда
			ПараметрыОбмена.НомерВерсииФайла = ПараметрыОбмена.НастройкиИзФайла.ВерсияФорматаОбмена;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена.НомерВерсииФайла) И ЗначениеЗаполнено(ПространствоИмен) Тогда
		ПараметрыОбмена.НомерВерсииФайла = СинхронизацияАвтономныхКопийКлиентСервер.ВерсияФорматаОбменаИзПространстваИмен(ПространствоИмен);
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Возвращает структуру параметров обмена, полученную из XDTO-объекта
//
//Параметры:
//	ОбъектXDTO - объект, из которого нужно получить структуру
//	ИмяСтруктурыВФайле - Строка - локальное имя объекта в файле
//
//Возвращаемое значение:
//	Структура
//
Функция СтруктураПараметровОбменаИзXDTO(ОбъектXDTO, ИмяСтруктурыВФайле) Экспорт

	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Заполнениями значениями по умолчанию
	Настройки = Новый Структура;
	Настройки.Вставить("ИДЦентральнойБазы", "");  // Идентификатор базы, являющейся центральной
	Настройки.Вставить("Сценарий", "ОбъединениеДанных");     // (для совместимости со старыми версиями) Сценарий обмена (Перечисление.СценарииОбменаСМобильнымПриложением)
	Настройки.Вставить("СценарийПереданныхДанных",    "ОбъединениеДанных");     // Сценарий, по которому быди подготовлены данные в принимаемом пакете
	Настройки.Вставить("СценарийЗапрашиваемыхДанных", "ОбъединениеДанных");     // Сценарий, по которому нужно выгрузить данные на удаленный узел
	Настройки.Вставить("КоличествоПеридов", 0); // Количество периодов хранения операций 
	Настройки.Вставить("ВидПериода", Перечисления.Периодичность.Месяц); // вид периода хранения операций ("День", "Неделя", "Месяц")
	Настройки.Вставить("ДатаПакета", Неопределено); // Момент, в который был сформирован пакет
	Настройки.Вставить("ОграничиватьКошельками", Ложь); // флаг ограничения остатков и операций кошельками
	Настройки.Вставить("СписокКошельков", Новый Массив);
	Настройки.Вставить("ИмяУзла", Неопределено);
	Настройки.Вставить("ПользовательБазы", Неопределено);
	Настройки.Вставить("ВерсияФорматаОбмена", Неопределено);
	
	// Фактическое заполнение зависит от версии формата
	Если ИмяСтруктурыВФайле = "Settings" Тогда
		
		Настройки.Вставить("ИДЦентральнойБазы", ОбъектXDTO.IDMainAPP);
		Настройки.Вставить("Сценарий", ОбъектXDTO.Script);
		Настройки.Вставить("КоличествоПеридов", ОбъектXDTO.NumPeriods);
		Настройки.Вставить("ВидПериода", Перечисления.Периодичность[?(ЗначениеЗаполнено(ОбъектXDTO.PeriodType), ОбъектXDTO.PeriodType, "Месяц")]);
		Настройки.Вставить("ДатаПакета", ОбъектXDTO.DateOfSending);
		Настройки.Вставить("ОграничиватьКошельками", ОбъектXDTO.LimitWallets);
		Настройки.Вставить("СписокКошельков", Новый Массив);
		Настройки.Вставить("ИмяУзла", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "Name", ""));
		Настройки.Вставить("ВерсияФорматаОбмена", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "VersionExchange", "1.6.3"));
		
	ИначеЕсли ИмяСтруктурыВФайле = "ПараметрыОбмена" Тогда
		
		Настройки.Вставить("ИДЦентральнойБазы", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "КодЦентральнойБазы"));
		Настройки.Вставить("СценарийПереданныхДанных", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "СценарийПереданныхДанных", "ОбъединениеДанных"));
		Настройки.Вставить("СценарийЗапрашиваемыхДанных", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "СценарийЗапрашиваемыхДанных", "ОбъединениеДанных"));
		Настройки.Вставить("КоличествоПеридов", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "КоличествоПериодов", 0));
		Настройки.Вставить("ВидПериода", Перечисления.Периодичность[ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "ВидПериода", "Месяц")]);
		Настройки.Вставить("ДатаПакета", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "ДатаОтправкиПакета"));
		Настройки.Вставить("УчитыватьОтборПоКошелькам", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "УчитыватьОтборПоКошелькам"));
		Настройки.Вставить("ИмяУзла", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "ИмяУзла"));
		Настройки.Вставить("ПользовательБазы", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "ПользовательБазы"));
		Настройки.Вставить("ВерсияФорматаОбмена", ОбщегоНазначенияДеньги.СвойствоXDTOЕслиЕсть(ОбъектXDTO, "ВерсияФорматаОбмена", СинхронизацияАвтономныхКопийКлиентСервер.ТекущаяВерсияФормата()));
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки.СценарийПереданныхДанных    = ПриведенноеЗначениеСценария(Настройки.СценарийПереданныхДанных);
	Настройки.СценарийЗапрашиваемыхДанных = ПриведенноеЗначениеСценария(Настройки.СценарийЗапрашиваемыхДанных);
	
	Возврат Настройки;

КонецФункции

// Возвращает структуру заголовка пакета обмена из объекта XDTO с учетом версии формата обмена
//
//Параметры:
//	ОбъектXDTO - объект, из которого нужно получить структуру
//
//Возвращаемое значение:
//	Структура
//		* НомерПакета - Номер переданного сообщения
//		* НомерПолученогоПакета - номер сообщения, полученного отправителем пакета
//		* КодОтправителя - Строка - код узла отправителя пакета
//		* КодПолучателя - Строка - код получателя пакета
//		* ИмяПланаОбмена - Строка
//	Неопределено будет возвращено, если в ОбъектеXDTO нет нужных реквизитов
//
Функция СтруктураЗаголовкаИзXDTO(Знач ОбъектXDTO) Экспорт

	Результат = Новый Структура;
	СтруктураXDTO = ОбщегоНазначенияДеньги.ОбъектXDTOВСтруктуру(ОбъектXDTO);
	
	Если СтруктураXDTO.Свойство("MessageNo") Тогда
		// Старая версия формата
		
		Результат.Вставить("НомерПакета", СтруктураXDTO.MessageNo);
		Результат.Вставить("НомерПолученогоПакета", СтруктураXDTO.ReceivedNo);
		Результат.Вставить("КодОтправителя", СтруктураXDTO.From);
		Результат.Вставить("КодПолучателя", СтруктураXDTO.To);
		Результат.Вставить("ИмяПланаОбмена", СтруктураXDTO.ExchangePlan);
		
		
	ИначеЕсли СтруктураXDTO.Свойство("Confirmation") И СтруктураXDTO.Confirmation <> Неопределено
		И СтруктураXDTO.Confirmation.Свойство("MessageNo") Тогда
		// Новая версия формата
		
		Результат.Вставить("НомерПакета", СтруктураXDTO.Confirmation.MessageNo);
		Результат.Вставить("НомерПолученогоПакета", СтруктураXDTO.Confirmation.ReceivedNo);
		Результат.Вставить("КодОтправителя", СтруктураXDTO.Confirmation.From);
		Результат.Вставить("КодПолучателя", СтруктураXDTO.Confirmation.To);
		Результат.Вставить("ИмяПланаОбмена", СтруктураXDTO.Confirmation.ExchangePlan);
		
		Если СтруктураXDTO.Свойство("AvailableVersion") Тогда
			Результат.Вставить("ДопустимыеВерсии", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтруктураXDTO.AvailableVersion));
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

// Выполняет чтение пакета из указанного файла. Предварительно проверяет настройки,
//	при необходимости создает узел плана обмена
Процедура ВыполнитьЧтениеПакетаИзФайла(ИмяФайла, УзелКорреспондента, Отказ = Ложь, ОписаниеПроблемы = "", Транспорт = Неопределено) Экспорт

	// Вспомогательные переменные
	Отказ             = Ложь; // флаг запрета на продолжение работы после завершения этой процедуры
	ОписаниеПроблемы  = "";   // Текст с описанием проблемы. Имеет смысл, если Отказ = Истина
	ЭтапОбмена        = "ЗагрузкаДанных";
	ТекущееДействие   = "";   // Описание текущего действия, с которым будет сделана запись в журнал регистрации в случае возникновения исключительной ситуации
	Транспорт         = ?(ЗначениеЗаполнено(Транспорт), Транспорт, Справочники.ТранспортыОбменаДанными.ПустаяСсылка());
	
	// Чтение пакета данных
	Попытка
		
		ПроверитьПолученныйФайлПередЗагрузкой(ИмяФайла, УзелКорреспондента, Ложь, Отказ, ОписаниеПроблемы, Транспорт);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОтметитьТекущееДействие(УзелКорреспондента, НСтр("ru='Чтение пакета'") );
		
		СтруктураНастроекОбмена = ОбменДаннымиСервер.НастройкиОбменаДляУзлаИнформационнойБазы(
					УзелКорреспондента, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, 
					Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
					
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайла;
		ОбработкаОбменаДаннымиXML.ВыполнитьЗагрузкуДанных();
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
		
		// Фиксация результатов обмена данными
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикЗагруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриЗагрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		
		ОтметитьРезультатЗагрузки(УзелКорреспондента, 0, ?(ЗначениеЗаполнено(СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке), СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке, Неопределено));
	
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		Отказ = Истина;
		ОтметитьРезультатЗагрузки(УзелКорреспондента, , Ошибка);
		Возврат;
		
	КонецПопытки; 
	
	// Удаление файла
	Попытка
	
		ТекущееДействие = НСтр("ru = 'Удаление принятого файла сообщения'"); 
		Файл = Новый Файл(ИмяФайла);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли; 
	
	Исключение
	
		Ошибка = ИнформацияОбОшибке();
		Отказ = Истина;
		ОтметитьРезультатЗагрузки(УзелКорреспондента, , Ошибка);
		
	КонецПопытки; 
	
КонецПроцедуры

// Выполняет проверку полученного файла и записывает параметры обмена в регистр сведений
//При обнаружении проблем вызывается исключение
//
//Параметры:
//	ИмяФайла - Строка - имя проверяемого файла
//
Процедура ПроверитьПолученныйФайлПередЗагрузкой(ИмяФайла, УзелКорреспондента, ВызыватьИсключение = Истина, Отказ = Ложь, ОписаниеПроблемы = "", Транспорт = Неопределено) Экспорт
	
	// Вспомогательные переменные
	Отказ             = Ложь; // флаг запрета на продолжение работы после завершения этой процедуры
	ОписаниеПроблемы  = "";   // Текст с описанием проблемы. Имеет смысл, если Отказ = Истина
	ЭтапОбмена        = "ЗагрузкаДанных";
	ТекущееДействие   = "";   // Описание текущего действия, с которым будет сделана запись в журнал регистрации в случае исключения
	Транспорт         = ?(ЗначениеЗаполнено(Транспорт), Транспорт, Справочники.ТранспортыОбменаДанными.ПустаяСсылка());
	Режим             = ДеньгиВызовСервераПовтИсп.РежимИспользованияПриложения();
	
	// Чтение настроек из файла
	ПараметрыОбмена = Новый Структура;
	ТекущееДействие = НСтр("ru = 'Проверка полученного файла'"); 
	
	// Чтение заголовка и узла настроек
	ПрочитатьПараметрыЗагружаемогоПакета(ИмяФайла, ПараметрыОбмена);
	Если ПараметрыОбмена.ЗаголовокИзФайла = Неопределено Или ПараметрыОбмена.НастройкиИзФайла = Неопределено Тогда
		
		// Не удалось прочитать настройки из файла
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'В файле не найдены настройки или другие обязательные элементы'");
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(ТекстСообщения, УзелКорреспондента, ЭтапОбмена, ОписаниеПроблемы);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПланаОбмена = ПараметрыОбмена.ЗаголовокИзФайла.ИмяПланаОбмена;
	
	ПараметрыОбмена.Вставить("ЭтотУзел", ПланыОбмена[ПараметрыОбмена.ЗаголовокИзФайла.ИмяПланаОбмена].ЭтотУзел());
	ЭтоВерсия2    = ДеньгиКлиентСервер.СравнитьВерсии("2.0", ПараметрыОбмена.НомерВерсииФайла) <= 0;
	СоздаватьУзел = Ложь;
	
	// Проверка настроек
	// 1. Привязка устройства к этой базе
	Если (ПараметрыОбмена.ЗаголовокИзФайла.КодПолучателя = "" Или ПараметрыОбмена.ЗаголовокИзФайла.КодПолучателя = "000")
		И (Режим = "Разделенный" Или Режим = "ЦентрМобильных") Тогда
		
		// Файл получен вручную и это первая синхронизация с мобильным устройством
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
		Текст = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		Если ЭтоВерсия2 Тогда
			Текст = СтрЗаменить(Текст, "<msg:To>000</msg:To>", "<msg:To>" + ПараметрыОбмена.ЭтотУзел.Код + "</msg:To>");
			Текст = СтрЗаменить(Текст, "<КодЦентральнойБазы>000</КодЦентральнойБазы>", "<КодЦентральнойБазы>" + ПараметрыОбмена.ЭтотУзел.Код + "</КодЦентральнойБазы>");
		Иначе
			Текст = СтрЗаменить(Текст, "<v8msg:To>000</v8msg:To>", "<v8msg:To>" + ПараметрыОбмена.ЭтотУзел.Код + "</v8msg:To>");
			Текст = СтрЗаменить(Текст, "<IDMainAPP/>", "<IDMainAPP>" + ПараметрыОбмена.ЭтотУзел.Код + "</IDMainAPP>");
			Текст = СтрЗаменить(Текст, "<IDMainAPP>000</IDMainAPP>", "<IDMainAPP>" + ПараметрыОбмена.ЭтотУзел.Код + "</IDMainAPP>");
		КонецЕсли;
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
		ЗаписьТекста.Записать(Текст);
		ЗаписьТекста.Закрыть();
		
		СоздаватьУзел = Истина
		
	ИначеЕсли ПараметрыОбмена.ЗаголовокИзФайла.КодПолучателя <> ПараметрыОбмена.ЭтотУзел.Код Тогда
		
		// Файл не предназначен для этой базы
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Данный файл не предназначен для загрузки в эту базу'");
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(ТекстСообщения, УзелКорреспондента, ЭтапОбмена, ОписаниеПроблемы);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УзелКорреспондента) И ЗначениеЗаполнено(ПараметрыОбмена.ЗаголовокИзФайла.КодОтправителя) Тогда
		// При обмене файлами вручную узел корреспондента определяется после чтения настроек
		УзелКорреспондента = УзелПланаОбменаПоКоду(ИмяПланаОбмена, ПараметрыОбмена.ЗаголовокИзФайла.КодОтправителя, Ложь);
	КонецЕсли;
	
	// 2. Проверка разрешения на обмен
	Если УзелКорреспондента = Неопределено Или УзелКорреспондента.Пустая() Тогда
		
		Если СоздаватьУзел Тогда
			
			ИмяУзла = Неопределено;
			Если Не ПараметрыОбмена.ЗаголовокИзФайла.Свойство("ИмяУзла", ИмяУзла) Тогда
				Если ПараметрыОбмена.НастройкиИзФайла = Неопределено Или Не ПараметрыОбмена.НастройкиИзФайла.Свойство("ИмяУзла", ИмяУзла) Тогда
					ИмяУзла = "Новая информационная база";
				КонецЕсли;
			КонецЕсли;
			УзелКорреспондента = НовыйУзелПланаОбмена(ИмяПланаОбмена, ПараметрыОбмена.ЗаголовокИзФайла.КодОтправителя, ИмяУзла);
			
		Иначе
			
			// Узел не найден
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'В плане обмена нет узла для этого мобильного устройства. Проверьте настройки на мобильном устройстве или пересинхронизируйте его'");
			СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(ТекстСообщения, УзелКорреспондента, ЭтапОбмена, ОписаниеПроблемы);
			Если ВызыватьИсключение Тогда
				ВызватьИсключение ТекстСообщения;
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
			
		
	КонецЕсли;
	
	Если Не УзелКорреспондента.Активность Тогда 
	
		Отказ = Истина;
		ТекстСообщения = НСтр("ru='Обмен с мобильным устройством запрещен. Проверить разрешение можно в настройках синхронизации настольной программы'"); 
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(ТекстСообщения, УзелКорреспондента, ЭтапОбмена, ОписаниеПроблемы);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат;
		КонецЕсли;
		
	ИначеЕсли СоздаватьУзел Тогда 
		// Пересинхронизация: узел уже есть, но код ЦБ пустой - обнулить номера полученных и отправленных пакетов
		
		Попытка
		
			УзелОбъект = УзелКорреспондента.ПолучитьОбъект();
			УзелОбъект.НомерПринятого     = 0;
			УзелОбъект.НомерОтправленного = 0;
			УзелОбъект.Записать();
			
			ОбновитьОбработанныеПараметрыОбменаСУзлом(УзелКорреспондента, 
					Новый Структура("СценарийПереданныхДанных,СценарийЗапрашиваемыхДанных"));
		
		Исключение
			
			Отказ = Истина;
			Ошибка = ИнформацияОбОшибке();
			СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(Ошибка, УзелКорреспондента, ЭтапОбмена, ОписаниеПроблемы);
			Если ВызыватьИсключение Тогда
				ВызватьИсключение ТекстСообщения;
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецПопытки; 
		
	КонецЕсли;
	
	// 3. Проверка доступности узла для выполнения обмена
	Если Не УзелДоступенДляОбмена(УзелКорреспондента) Тогда
		Отказ = Истина;
		Ошибка = СтрШаблон(НСтр("ru='Узел ""%1"" заблокирован. Возможно, с ним выполняется обмен данными'"), УзелКорреспондента); 
		ОтметитьРезультатЗагрузки(УзелКорреспондента, , Ошибка);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеПроблемы;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Запись новых параметров
	ЗаписатьНовыеПараметрыОбменаСУзлом(УзелКорреспондента, ПараметрыОбмена.НастройкиИзФайла);
	
КонецПроцедуры

// Вызывается после загрузки и конвертации данных
//
//Параметры:
//	КомпонентыОбмена - Структура - см. 
//
Процедура ОбработкаПослеЗагрузкиДанных(КомпонентыОбмена) Экспорт
	
	Режим = ДеньгиВызовСервераПовтИсп.РежимИспользованияПриложения();
	Если Режим = "Разделенный" Или Режим = "Независимый" Тогда
		Возврат;
	КонецЕсли;
	
	БюджетированиеСервер.ОбновитьВсеКлючиСтатейБюджета();
	РегистрыСведений.СтатистикаСправочников.ОбновитьВсюСтатистикуСправочников();
	
	Если КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Количество() > 0 Тогда
		МинимальнаяДата = КомпонентыОбмена.ДокументыДляОтложенногоПроведения[0].ДатаДокумента;
		Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
			ОбслуживаниеДокументов.ПерепровестиИзмененияОстатков(МинимальнаяДата, КомпонентыОбмена.УзелКорреспондента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый из ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных()
//выполняет проверку полученного файла, запись параметров и, при необходимости, измененяет параметр СтандартнаяОбработка
//
//Параметры:
//	см. ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных()
//
Процедура ОбработчикПриЗагрузкеДанных(СтандартнаяОбработка,
								Отправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов) Экспорт
								
	ТипОтправителя   = ТипЗнч(Отправитель);
	ОбменСМобильным  = ТипОтправителя = Тип("ПланОбменаСсылка.МобильноеПриложение") 
			Или ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Отправитель, "МобильноеУстройство") И Отправитель.МобильноеУстройство;
	ОбменСНастольным = Не ОбменСМобильным;
	Если Не ОбменСМобильным И Не ОбменСНастольным Тогда
		Возврат;
	КонецЕсли;
	
	// Вспомогательные переменные
	Отказ             = Ложь; // флаг запрета на продолжение работы после завершения этой процедуры
	ОписаниеПроблемы  = "";   // Текст с описанием проблемы. Имеет смысл, если Отказ = Истина
	ЭтапОбмена        = "ЗагрузкаДанных";
	ТекущееДействие   = "";   // Описание текущего действия, с которым будет сделана запись в журнал регистрации в случае возникновения исключительной ситуации
	ВидТранспорта     = ?(ЗначениеЗаполнено(ИмяФайлаСообщения), Перечисления.ВидыТранспортаСообщенийОбмена.FILE, Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	Транспорт         = Справочники.ТранспортыОбменаДанными.ТранспортПоВидуТранспорта(ВидТранспорта);
	
	Если ЗначениеЗаполнено(ИмяФайлаСообщения) И Не СинхронизацияАвтономныхКопийВызовСервера.ЭтоЦентральнаяБаза() Тогда
		// При обмене через файл параметры узла считываются из полученного файла
		// При обмене через веб-серврер параметры узла обновлены до получения данных обмена
		ПроверитьПолученныйФайлПередЗагрузкой(ИмяФайлаСообщения, Отправитель);
	КонецЕсли;
	
	// Получаем текущие значения парамтеров обмена
	ПараметрыОбмена = ПараметрыОбменаСУзлом(Отправитель);
	
	Если ОбменСМобильным И ДеньгиКлиентСервер.СравнитьВерсии("2.0", ПараметрыОбмена.ВерсияФорматаОбмена) > 0 Тогда
		// файлы старых версий мобильных приложений загружаются по старым алгоритмам
		
		СтандартнаяОбработка = Ложь;
		
		Отказ = Ложь;
		РезультатВыполненияОбмена = Неопределено;
		ОбменМобильноеПриложение.ПринятьПакетОбмена(Отправитель, Отказ, ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(Отправитель, "ЗагрузкаДанных"),
								КоличествоПолученныхОбъектов,
								РезультатВыполненияОбмена);

		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка загрузки данных от мобильного приложения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Готовит файл к загрузке и вызывает процедуры БСП для загрузки данных
//
//Параметры:
//	УзелКорреспондента - ПланОбменаСсылка - узел, от которого получен файл с данными
//	ИмяФайла - Строка - полное имя загружаемого файла
//	Отказ - Булево - устанавливается в Истина, если загрузка не выполнена
//	Транспорт - СправочникСсылка.ТрансопртыОбменаДанными - транспорт, для регистрации контроля обмена в регистрах сведений
//
Процедура ЗагрузитьДанныеИзФайлаДляУзлаИнформационнойБазы(УзелКорреспондента, ИмяФайла, Отказ = Ложь, Транспорт = Неопределено, ОписаниеПроблемы = "") Экспорт
	
	// Отметка о начале загрузки данных
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, "Чтение пакета");
	
	// Проверка файла и узла корреспондента
	ПроверитьПолученныйФайлПередЗагрузкой(ИмяФайла, УзелКорреспондента, Ложь, Отказ, ОписаниеПроблемы, Транспорт);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КодПолучателя   = СинхронизацияАвтономныхКопийВызовСервера.КодЭтогоУзла(УзелКорреспондента.Метаданные().Имя);
	КодОтправителя  = УзелКорреспондента.Код;
	КаталогОбмена   = РегистрыСведений.НастройкиТранспортаОбменаДанными.ИмяКаталогаОбменаИнформацией(Перечисления.ВидыТранспортаСообщенийОбмена.FILE, УзелКорреспондента);
	Если Не ЗначениеЗаполнено(КаталогОбмена) Или Не ДеньгиКлиентСервер.ФайлСуществует(КаталогОбмена) Тогда
		КаталогОбмена = КаталогВременныхФайлов();
		РегистрыСведений.НастройкиТранспортаОбменаДанными.ОбновитьЗапись(Новый Структура("Корреспондент,FILEКаталогОбменаИнформацией", УзелКорреспондента, КаталогОбмена));
	КонецЕсли;
	ИмяФайлаОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогОбмена, 
				ИмяФайлаСообщенияОбмена(КодОтправителя, КодПолучателя, Ложь) + ".xml");
				
	Если Нрег(ИмяФайла) <> НРег(ИмяФайлаОбмена) Тогда
		ПереместитьФайл(ИмяФайла, ИмяФайлаОбмена);
	КонецЕсли;
	
	// запуск загрузки данных
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелКорреспондента, ПараметрыОбмена, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление файлов
	Файл = Новый Файл(ИмяФайлаОбмена);
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(ИмяФайлаОбмена);
		Исключение
			// Обработка не требуется
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 


#Область ВыгрузкаДанных

// Возвращает структуру с параметрами обмена для записи в пакет обмена данными
//
//Параметры:
//	УзелКорреспондента - Узел плана обмена
//	ТекущиеПараметрыОбмена - Структура - см. ПараметрыОбменаСУзлом()
//
//Возвращаемое значение:
//	Структура - см. XDTO-пакеты.MoneyData_х_х
//
Функция СтруктураПараметровОбменаДляОтправки(УзелКорреспондента, ТекущиеПараметрыОбмена = Неопределено) Экспорт

	Если ТекущиеПараметрыОбмена = Неопределено Тогда
		ТекущиеПараметрыОбмена = ПараметрыОбменаСУзлом(УзелКорреспондента);
	КонецЕсли;
	
	Если ДеньгиКлиентСервер.СравнитьВерсии(ТекущиеПараметрыОбмена.ВерсияФорматаОбмена, "2.0") >= 0 Тогда
		
		Результат = Новый Структура("ВерсияФорматаОбмена,КодЦентральнойБазы,КоличествоПериодов,УчитыватьОтборПоКошелькам,КодУзла,ИмяУзла,МобильноеУстройство");
		ЗаполнитьЗначенияСвойств(Результат, ТекущиеПараметрыОбмена);
		
		// Сценарий передаваемых данных = сценарий, по которому данные быди затребованы узлом
		Результат.Вставить("СценарийПереданныхДанных", ?(ЗначениеЗаполнено(ТекущиеПараметрыОбмена.СценарийЗапрашиваемыхДанных), 
					ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущиеПараметрыОбмена.СценарийЗапрашиваемыхДанных), "ОбъединениеДанных"));
		// Сценарий запрашиваемых данных берется из реквизитов узла 
		Результат.Вставить("СценарийЗапрашиваемыхДанных", ?(ЗначениеЗаполнено(ТекущиеПараметрыОбмена.ЗатребованныйСценарий), 
					ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущиеПараметрыОбмена.ЗатребованныйСценарий), "ОбъединениеДанных"));
		// Вид периода
		Результат.Вставить("ВидПериода", ?(ЗначениеЗаполнено(ТекущиеПараметрыОбмена.ВидПериода), 
					ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущиеПараметрыОбмена.ВидПериода), "Месяц"));
		// Вид периода
		Результат.Вставить("ДатаОтправкиПакета", ТекущаяУниверсальнаяДата());
		
	Иначе
		
		// Синхронизация с форматом 1-й версии
		Результат = Новый Структура("IDMainAPP,NumPeriods,PeriodType,LimitWallets,WalletList,Script,DateOfSending,VersionExchange,Name");
		Результат.IDMainAPP    = ТекущиеПараметрыОбмена.КодЦентральнойБазы;
		Результат.NumPeriods   = ТекущиеПараметрыОбмена.КоличествоПериодов;
		Результат.PeriodType   = ?(ЗначениеЗаполнено(ТекущиеПараметрыОбмена.ВидПериода), 
					ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущиеПараметрыОбмена.ВидПериода), "Месяц");
					
		Результат.LimitWallets = Ложь;
		Результат.WalletList   = Новый Массив;
		Результат.Script       = ?(ЗначениеЗаполнено(ТекущиеПараметрыОбмена.ЗатребованныйСценарий), 
					ОбщегоНазначения.ИмяЗначенияПеречисления(ТекущиеПараметрыОбмена.ЗатребованныйСценарий), "ОбъединениеДанных");
					
		Результат.DateOfSending   = ТекущаяУниверсальнаяДата();
		Результат.VersionExchange = ТекущиеПараметрыОбмена.ВерсияФорматаОбмена;
		Результат.Name            = ТекущиеПараметрыОбмена.ИмяУзла;
		
	КонецЕсли;
				
	Возврат Результат;

КонецФункции

// Обработчик, вызываемый из ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных()
//выполняет проверку полученного файла, запись параметров и, при необходимости, измененяет параметр СтандартнаяОбработка
//
//Параметры:
//	см. ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных()
//
Процедура ОбработчикПриВыгрузкеДанных(СтандартнаяОбработка,
								Получатель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов) Экспорт
								
	ТипОтправителя   = ТипЗнч(Получатель);
	ОбменСМобильным  = ТипОтправителя = Тип("ПланОбменаСсылка.МобильноеПриложение");
	Если Не ОбменСМобильным Тогда
		// Проверка версии формата осуществляется только для мобильного приложения
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Получатель) Или Не ЗначениеЗаполнено(Получатель.ВерсияФорматаОбмена)
		Или ДеньгиКлиентСервер.СравнитьВерсии(Получатель.ВерсияФорматаОбмена, "2.0") >= 0 Тогда
		// Узел обновлен до нового формата данных
		Возврат;
	КонецЕсли;
	
	// Выгрузка данных по старому формату
	Отказ = Ложь;
	СтандартнаяОбработка = Ложь;
	ОбменМобильноеПриложение.СформироватьПакетОбмена(Получатель, Отказ, ИмяФайлаСообщения,
							ДанныеСообщения,
							КоличествоЭлементовВТранзакции,
							ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(Получатель, "ВыгрузкаДанных"),
							КоличествоОтправленныхОбъектов); ;
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru='Ошибка выгрузки данных в мобильное приложение'"); 
	КонецЕсли; 
	
	
КонецПроцедуры

// Выгружает данные в файл с помощью методов БСП и готовит его к отправке
//
//Параметры:
//	УзелКорреспондента - ПланОбменаСсылка - узел, для которого нужно выполнить выгрузку данных в файл
//	ИмяФайла - Строка - полное имя файла выгрузки
//	Отказ - Булево - устанавливается в Истина, если выгрузка не выполнена
//	Транспорт - СправочникСсылка.ТрансопртыОбменаДанными - транспорт, для регистрации контроля обмена в регистрах сведений
//
Процедура ВыгрузитьДанныеВФайлДляУзлаИнформационнойБазы(УзелКорреспондента, ИмяФайла = Неопределено, Отказ = Ложь, Транспорт = Неопределено, ОписаниеПроблемы = "") Экспорт
	
	// запуск выгрузки данных
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	Если Не ЗначениеЗаполнено(Транспорт) Тогда
		Транспорт = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортКаталога();
	КонецЕсли;
	ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Транспорт.ВидТранспорта;
	ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
	
	КаталогОбмена   = РегистрыСведений.НастройкиТранспортаОбменаДанными.ИмяКаталогаОбменаИнформацией(Перечисления.ВидыТранспортаСообщенийОбмена.FILE, УзелКорреспондента);
	Если Не ЗначениеЗаполнено(КаталогОбмена) Или Не ДеньгиКлиентСервер.ФайлСуществует(КаталогОбмена) Тогда
		КаталогОбмена = КаталогВременныхФайлов();
		РегистрыСведений.НастройкиТранспортаОбменаДанными.ОбновитьЗапись(Новый Структура("Корреспондент,FILEКаталогОбменаИнформацией", УзелКорреспондента, КаталогОбмена));
	КонецЕсли;
	
	Попытка
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелКорреспондента, ПараметрыОбмена, Отказ);
	Исключение
		Отказ = Истина;
		ОписаниеПроблемы = НСтр("ru='Ошибка выгрузки изменений в файл'");
		КлючСообщения    = ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(УзелКорреспондента, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
		ЗаписьЖурналаРегистрации(КлючСообщения, УровеньЖурналаРегистрации.Ошибка,,, 
			ОписаниеПроблемы + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки; 
	
	Если Отказ Тогда
		ОписаниеПроблемы = НСтр("ru='При выгрузке данных в файл возникли ошибки'");
		Возврат;
	КонецЕсли;
	
	// Проверка файла
	КодПолучателя   = УзелКорреспондента.Код;
	КодОтправителя  = СинхронизацияАвтономныхКопийВызовСервера.КодЭтогоУзла(УзелКорреспондента.Метаданные().Имя);
	ИмяФайлаОбмена = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогОбмена, 
				ИмяФайлаСообщенияОбмена(КодОтправителя, КодПолучателя, Истина) + ".xml");
	
	Файл = Новый Файл(ИмяФайлаОбмена);
	Если Не Файл.Существует() Тогда
		ОписаниеПроблемы = "Файл выгрузки отсутствует на диске";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = ИмяФайлаОбмена;
		Возврат;
	КонецЕсли;
	
	Если Нрег(ИмяФайла) <> НРег(ИмяФайлаОбмена) Тогда
		ПереместитьФайл(ИмяФайлаОбмена, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти 


#Область Отчеты_о_результатах_синхронизации


// Отмечает начало синхронизации с указанным узлом
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	Транспорт - СправочникСсылка.ТранспортыОбменаДанными - транспорт, с помощью которого выполняется обмен
//
Процедура ОтметитьНачалоОбмена(Узел, Транспорт) Экспорт
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КонтрольОбменаДанными.ОтметитьНачалоОбмена(Узел, Транспорт);
	
КонецПроцедуры

// Отмечает начало синхронизации с указанным узлом
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	Транспорт - СправочникСсылка.ТранспортыОбменаДанными - транспорт, с помощью которого выполняется обмен
//
Процедура ОтметитьРезультатЗагрузки(Узел, ПолученоОбъектов = Неопределено, Ошибка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	Если Ошибка <> Неопределено Тогда
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(Ошибка, Узел, "ЗагрузкаДанных");
	Иначе
		РегистрыСведений.КонтрольОбменаДанными.ОтметитьРезультатПолученияДанных(Узел, ПолученоОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// Отмечает начало синхронизации с указанным узлом
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	Транспорт - СправочникСсылка.ТранспортыОбменаДанными - транспорт, с помощью которого выполняется обмен
//
Процедура ОтметитьРезультатВыгрузки(Узел, ОтправленоОбъектов = Неопределено, Ошибка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	Если Ошибка <> Неопределено Тогда
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(Ошибка, Узел, "ВыгрузкаДанных");
	Иначе
		РегистрыСведений.КонтрольОбменаДанными.ОтметитьРезультатОтправкиДанных(Узел, ОтправленоОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// Отмечает начало синхронизации с указанным узлом
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	Транспорт - СправочникСсылка.ТранспортыОбменаДанными - транспорт, с помощью которого выполняется обмен
//
Процедура ОтметитьТекущееДействие(Узел, ТекущееДействие) Экспорт
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КонтрольОбменаДанными.ОтметитьТекущееДействие(Узел, ТекущееДействие);
	
КонецПроцедуры

// Отмечает начало синхронизации с указанным узлом
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	Ошибка - ИнформацияОбОшибке, Строка или Неопределено - отмечает ошибку завершения обмена
//
Процедура ОтметитьЗавершениеОбмена(Узел, Ошибка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	Если Ошибка <> Неопределено Тогда
		СинхронизацияАвтономныхКопийВызовСервера.ЗарегистрироватьОшибкуОбменаСУзлом(Ошибка, Узел, "");
	КонецЕсли;
	РегистрыСведений.КонтрольОбменаДанными.ОтметитьЗавершениеОбмена(Узел);
	
КонецПроцедуры

// Возвращает структуру с описанием результатов синхронизации с центральной базой
//
//Параметры:
//	нет
//
//Возвращаемое значение:
//	Структура
//
Функция РезультатОбменаСЦентральнойБазой() Экспорт
	Перем Результат;
	
	ЦентральнаяБаза = СинхронизацияАвтономныхКопийВызовСервера.УзелЦентральнойБазы("СинхронизацияАвтономныхКопий");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", ЦентральнаяБаза);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияОбменовДанными.ДействиеПриОбмене КАК ДействиеПриОбмене,
	|	СостоянияОбменовДанными.РезультатВыполненияОбмена КАК РезультатВыполненияОбмена,
	|	СостоянияОбменовДанными.ДатаНачала КАК ДатаНачала,
	|	СостоянияОбменовДанными.ДатаНачала КАК ДатаОкончания,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ПоследняяУспешнаяДата
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
	|		ПО СостоянияОбменовДанными.УзелИнформационнойБазы = СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы
	|			И СостоянияОбменовДанными.ДействиеПриОбмене = СостоянияУспешныхОбменовДанными.ДействиеПриОбмене
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &Узел";
	
	Результат = Новый Структура("ДатаВыгрузки,ДатаЗагрузки,ДатаУспешнойВыгрузки,ДатаУспещнойЗагрузки,ЕстьОшибкаВыгрузки,ЕстьОшибкаЗагрузки,
			|РезультатЗагрузки,РезультатВыгрузки");
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СостоянияОбменовДанными", "РегистрСведений.СостоянияОбменовДаннымиОбластейДанных");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СостоянияУспешныхОбменовДанными", "РегистрСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных Тогда
			Результат.ДатаВыгрузки = Выборка.ДатаОкончания;
			Результат.ДатаУспешнойВыгрузки = Выборка.ПоследняяУспешнаяДата;
			Результат.ЕстьОшибкаВыгрузки = (
					Выборка.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка
					Или Выборка.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения
					Или Не ЗначениеЗаполнено(Выборка.РезультатВыполненияОбмена)
				);
			Результат.РезультатВыгрузки = Выборка.РезультатВыполненияОбмена;
		ИначеЕсли Выборка.ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ЗагрузкаДанных Тогда
			Результат.ДатаЗагрузки = Выборка.ДатаОкончания;
			Результат.ДатаУспещнойЗагрузки = Выборка.ПоследняяУспешнаяДата;
			Результат.ЕстьОшибкаЗагрузки = (
					Выборка.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка
					Или Выборка.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения
					Или Не ЗначениеЗаполнено(Выборка.РезультатВыполненияОбмена)
				);
			Результат.РезультатЗагрузки = Выборка.РезультатВыполненияОбмена;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти 


#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Обрабочтчик подписки на событие узла плана обмена
Процедура УзелОбменаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("ПрежниеЗначения") Тогда
		// Дополнительные свойства уже заполнены
		Возврат;
	КонецЕсли;
	
	Ссылка = Источник.Ссылка;
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый",        Источник.ЭтоНовый());
	Источник.ДополнительныеСвойства.Вставить("ПрежниеЗначения",   Новый Структура);
	Источник.ДополнительныеСвойства.ПрежниеЗначения.Вставить("Активность",      Ссылка.Активность);
	Источник.ДополнительныеСвойства.ПрежниеЗначения.Вставить("ПометкаУдаления", Ссылка.ПометкаУдаления);
	
	Источник.ДополнительныеСвойства.ПрежниеЗначения.Вставить("СинхронизацияЗапрещена", Ссылка.СинхронизацияЗапрещена);
	
КонецПроцедуры

// Обрабочтчик подписки на событие узла плана обмена
Процедура УзелОбменаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ЭтотУзел Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Источник.ДополнительныеСвойства.Свойство("ЗаписьНовогоУзла") И Источник.ДополнительныеСвойства.ЗаписьНовогоУзла;
	
	// При добавлении нового узла и при восстановлении активности нужно зарегистрировать все объекты для отправки
	Если ЭтоНовый Или (Источник.Активность И Не Источник.ДополнительныеСвойства.ПрежниеЗначения.Активность) Тогда
		СинхронизацияАвтономныхКопий.ЗарегистрироватьВсеОбъектыДляОтправкиНаУзел(Источник.Ссылка);
	ИначеЕсли Не ЭтоНовый И Не Источник.Активность И Источник.ДополнительныеСвойства.ПрежниеЗначения.Активность Тогда 
		ПланыОбмена.УдалитьРегистрациюИзменений(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, заполненную настройками обмена
//
// Параметры:
//	ТранспортОбмена - СправочникСсылка.ТранспортыОбменаДанными - транспорт, используемый в обмене
// 
// Возвращаемое значение:
//  Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция СтруктураНастроекОбменаДанными(ТранспортОбмена, ИмяПланаОбмена = Неопределено) Экспорт

	СтруктураНастроекОбмена = СтруктураНастроекОбменаБазовая(ТранспортОбмена, ИмяПланаОбмена);
	
	СтруктураНастроекОбмена.ВидТранспортаОбмена    = СтруктураНастроекОбмена.НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
	
	// Инициализируем значения настроек
	СтруктураНастроекОбмена.НастройкаВыполненияОбмена             = Неопределено;
	СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование = "";
	
	СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных = Истина;
	СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных = Истина;
	
	СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов = Ложь;
	
	СтруктураНастроекОбмена.ТекущийУзелПланаОбмена    = СинхронизацияАвтономныхКопийВызовСервера.ЭтотУзел(СтруктураНастроекОбмена.ИмяПланаОбмена);
	СтруктураНастроекОбмена.ТекущийУзелПланаОбменаКод = СокрЛП(СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код);
	
	Если ЗначениеЗаполнено(СтруктураНастроекОбмена.ВидТранспортаОбмена) Тогда
		
		//СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = ОбменДаннымиСервер.ИмяОбработкиТранспортаСообщенийОбмена(СтруктураНастроекОбмена.ВидТранспортаОбмена);
		СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = "ТранспортСообщенийОбменаОблачныйФайловыйСервис";
		
		// создаем обработку транспорта
		ОбработкаТранспортаСообщенийОбмена = Обработки[СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена].Создать();
		
		// заполняем настойки транспорта, различные для каждой обработки транспорта
		ЗаполнитьЗначенияСвойств(ОбработкаТранспортаСообщенийОбмена, СтруктураНастроекОбмена.НастройкиТранспорта);
		ОбработкаТранспортаСообщенийОбмена.КлючСообщенияЖурналаРегистрации = СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации;
		
		// Инициализируем транспорт
		ОбработкаТранспортаСообщенийОбмена.Инициализация();
		
		СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена", ОбработкаТранспортаСообщенийОбмена);
		
	КонецЕсли; 

	Возврат СтруктураНастроекОбмена;
	
КонецФункции


// Проверяет сценарий обмена данными и, по возможности, выполняет синхронизацию
//Вызывается из ОбменДаннымиСервер.ВыполнитьОбменДаннымиПоСценариюОбменаДанными()
//
//Параметры:
//	Сценарий - СправочникСсылка.СценарииОбменовДанными
//  НомерСтроки               - Число - Номер строки по которой будет выполнен обмен данными.
//                              Если не указан, то обмен данными будет выполнен для всех строк.
//	СтандартнаяОбработка - булево. Если установить в Истина, обработчик БСП не будет продолжен
//
Процедура ОбработкаОбменаДаннымиПоСценарию(Сценарий, НомерСтроки = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
	СвойстваСценария = СвойстваСценарияОбмена(Сценарий);
	Если Не ЗначениеЗаполнено(СвойстваСценария.ИмяПланаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Режим = ДеньгиВызовСервераПовтИсп.РежимИспользованияПриложения();
	Если Режим = "КлиентОблака" Тогда
		
		СтандартнаяОбработка = Ложь;
		МодульОбмена = ОбщегоНазначения.ОбщийМодуль("ДеньгиОбменСЦентральнойБазой");
		МодульОбмена.ВыполнитьОбменСЦентральнойБазой(СвойстваСценария.ВидТранспорта);
		
	ИначеЕсли Режим = "ЦентрМобильных" Тогда
		
		СтандартнаяОбработка = Ложь;
		Транспорт = Справочники.ТранспортыОбменаДанными.ТранспортПоВидуТранспорта(СвойстваСценария.ВидТранспорта);
		ОбменМобильноеПриложение.ВыполнитьОбменДаннымиПоСценариюТранспортаОбмена(Транспорт);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьФункциоанльныеОпцииЭтойБазы(ВыбранныйСпособСинхронизации) Экспорт
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если РазделениеВключено И Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	ДоступнаСинхронизацияСЦБ = ОбщегоНазначения.ПодсистемаСуществует("ФункционалКонфигурацииДеньги.ОбменСЦентральнойБазой");
	
	
	ИменаКонстант = "СинхронизацияАвтономныхКопийЭтоЦентральнаяБаза, СинхронизацияАвтономныхКопийЭтоАвтономнаяКопия,
			|ДеньгиСинхронизацияНеИспользуется,ДеньгиИспользуетсяОбменСМобильными" 
			+ ?(ДоступнаСинхронизацияСЦБ, ",ДеньгиИспользуетсяОблако", "");
	
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();

	Если ВыбранныйСпособСинхронизации = Перечисления.СпособыСинхронизацииДанных.СинхронизацияССервисом Тогда
		
		НаборКонстант.ДеньгиСинхронизацияНеИспользуется    = Ложь;
		ИспользуетсяОблако             = Истина;
		НаборКонстант.ДеньгиИспользуетсяОбменСМобильными   = Ложь;
		
	ИначеЕсли ВыбранныйСпособСинхронизации = Перечисления.СпособыСинхронизацииДанных.ОбменФайлами Тогда
		
		НаборКонстант.ДеньгиСинхронизацияНеИспользуется    = Ложь;
		ИспользуетсяОблако             = Ложь;
		НаборКонстант.ДеньгиИспользуетсяОбменСМобильными   = Истина;
		
	Иначе 
		
		НаборКонстант.ДеньгиСинхронизацияНеИспользуется    = Истина;
		ИспользуетсяОблако             = Ложь;
		НаборКонстант.ДеньгиИспользуетсяОбменСМобильными   = Ложь;
		
	КонецЕсли;
	
	Если ДоступнаСинхронизацияСЦБ Тогда
		НаборКонстант.ДеньгиИспользуетсяОблако = ИспользуетсяОблако;
	КонецЕсли;
	
	НаборКонстант.СинхронизацияАвтономныхКопийЭтоЦентральнаяБаза = (РазделениеВключено 
					Или ВыбранныйСпособСинхронизации = Перечисления.СпособыСинхронизацииДанных.ОбменФайлами);
	НаборКонстант.СинхронизацияАвтономныхКопийЭтоАвтономнаяКопия = Не РазделениеВключено
					И (ВыбранныйСпособСинхронизации = Перечисления.СпособыСинхронизацииДанных.СинхронизацияССервисом);
	
	НаборКонстант.Записать();
	
КонецПроцедуры

// Вызывается из метода веб-сервиса для подготовки файла к отправке в автономную копию или мобильное приложение
Процедура ПодготовитьДанныеДляВыгрузкиИзИнформационнойБазы(ПараметрыПроцедуры, СообщениеОбОшибке) Экспорт
	
	ПараметрыWEBСервиса = ПараметрыПроцедуры["ПараметрыWEBСервиса"];
	СообщениеОбОшибке   = ПараметрыПроцедуры["СообщениеОбОшибке"];
	
	УстановитьПривилегированныйРежим(Истина);
	
	КомпонентыОбмена = КомпонентыОбмена("Отправка", ПараметрыWEBСервиса);
	ИмяФайла         = Строка(Новый УникальныйИдентификатор()) + ".xml";
	
	КаталогВременныхФайлов = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
	ПолноеИмяФайла         = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		КаталогВременныхФайлов, ИмяФайла);
	
	// Открываем файл обмена.
	ОбменДаннымиXDTOСервер.ОткрытьФайлВыгрузки(КомпонентыОбмена, ПолноеИмяФайла);
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		КомпонентыОбмена.ФайлОбмена = Неопределено;
		ОбменДаннымиXDTOСервер.ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена);
		ВызватьИсключение(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецЕсли;
	
	// Выгрузка данных.
	ЗаписьЖурналаРегистрации("Отметка ФЗ.1 - Выгрузка", 
			УровеньЖурналаРегистрации.Предупреждение, , , "Старт: " + Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм:сс") );
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = "Начало выгрузки";
	Сообщение.Сообщить();
			
			
			
	Попытка
		ОбменДаннымиXDTOСервер.ПроизвестиВыгрузкуДанных(КомпонентыОбмена);
	Исключение
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
			РазблокироватьДанныеДляРедактирования(КомпонентыОбмена.УзелКорреспондента);
		КонецЕсли;
		ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбменДаннымиXDTOСервер.ЗавершитьВедениеПротоколаОбмена(КомпонентыОбмена);
		КомпонентыОбмена.ФайлОбмена = Неопределено;
		ВызватьИсключение(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = "Продолжение выгрузки";
	Сообщение.Сообщить();
	
	КомпонентыОбмена.ФайлОбмена.Закрыть();
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		
		СообщениеОбОшибке = КомпонентыОбмена.СтрокаСообщенияОбОшибке;
		ВызватьИсключение(СообщениеОбОшибке);
		
	Иначе
		
		// Поместить файл во временное хранилище.
		ИдентификаторФайлаВоВременномХранилище = Строка(ОбменДаннымиСервер.ПоместитьФайлВХранилище(ПолноеИмяФайла));
		
		// Создаем временный каталог для хранения частей файла данных.
		ВременныйКаталог                     = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(
			ИдентификаторФайлаВоВременномХранилище);
		ИмяИсходногоФайлаВоВременномКаталоге = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			ВременныйКаталог, "data.xml");
		
		СоздатьКаталог(ВременныйКаталог);
		КопироватьФайл(ПолноеИмяФайла, ИмяИсходногоФайлаВоВременномКаталоге);
		
		Если ПараметрыWEBСервиса.ИмяПланаОбмена <> "МобильноеПриложение" Тогда
			ИмяНеразделенногоФайла               = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				ВременныйКаталог, ИдентификаторФайлаВоВременномХранилище + ?(ПараметрыWEBСервиса.РазмерЧастиФайла > 0, ".zip", ".zip.1"));
			// Архивируем файл.
			Архиватор = Новый ЗаписьZipФайла(ИмяНеразделенногоФайла);
			Архиватор.Добавить(ИмяИсходногоФайлаВоВременномКаталоге);
			Архиватор.Записать();
		Иначе
			ИмяНеразделенногоФайла               = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				ВременныйКаталог, ИдентификаторФайлаВоВременномХранилище + ?(ПараметрыWEBСервиса.РазмерЧастиФайла > 0, ".xml", ".xml.1"));
			ПереместитьФайл(ИмяИсходногоФайлаВоВременномКаталоге, ИмяНеразделенногоФайла);
		КонецЕсли;
		
		Если ПараметрыWEBСервиса.РазмерЧастиФайла > 0 Тогда
			// Разделение файла на части.
			ИменаФайлов = РазделитьФайл(ИмяНеразделенногоФайла, ПараметрыWEBСервиса.РазмерЧастиФайла * 1024);
		Иначе
			ИменаФайлов = Новый Массив();
			ИменаФайлов.Добавить(ИмяНеразделенногоФайла);
		КонецЕсли;
		
		ВозвращаемоеЗначение = "{WEBService}$%1$%2";
		ВозвращаемоеЗначение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВозвращаемоеЗначение, ИменаФайлов.Количество(), ИдентификаторФайлаВоВременномХранилище);
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ВозвращаемоеЗначение;
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации("Отметка ФЗ.1 - Выгрузка", 
				УровеньЖурналаРегистрации.Предупреждение, , , "Завершение: " + Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм:сс") + Символы.ПС + ВозвращаемоеЗначение );
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтатусВыполненияПодготовкиДанныхКОтправке(ИдентификаторФоновогоЗадания, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемаяСтруктура = ФабрикаXDTO.Создать(
		ФабрикаXDTO.Тип("http://v8.1c.ru/SSL/Exchange/EnterpriseDataExchange", "PrepareDataOperationResult"));
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторФоновогоЗадания));
	МассивСообщений = Новый Массив;
	
	Если ФоновоеЗадание = Неопределено Тогда
		СостояниеТекущегоФоновогоЗадания = СостоянияФоновыхЗаданий().Получить(СостояниеФоновогоЗадания.Отменено);
	Иначе
	
		СообщениеОбОшибке        = "";
		КоличествоЧастейФайла    = 0;
		ИдентификаторФайла       = "";
		СостояниеТекущегоФоновогоЗадания = СостоянияФоновыхЗаданий().Получить(ФоновоеЗадание.Состояние);
		
		Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
		Иначе
			Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
				МассивСообщений  = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
				СообщениеНайдено = Ложь;
				Для Каждого СообщениеФоновогоЗадания Из МассивСообщений Цикл
					Если СтрНайти(СообщениеФоновогоЗадания.Текст, "{WEBService}") > 0 Тогда
						МассивРезультата = СтрРазделить(СообщениеФоновогоЗадания.Текст, "$", Истина);
						КоличествоЧастейФайла = МассивРезультата[1];
						ИдентификаторФайла    = МассивРезультата[2];
						СообщениеНайдено = Истина;
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;
				
				Если Не СообщениеНайдено Тогда
					СообщениеОбОшибке = НСтр("ru='Фоновое задание завершилось, но не найдено описание файла выгрузки'");
					СостояниеТекущегоФоновогоЗадания = СостоянияФоновыхЗаданий().Получить(СостояниеФоновогоЗадания.Отменено);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВозвращаемаяСтруктура.ErrorMessage = СообщениеОбОшибке;
	ВозвращаемаяСтруктура.FileID       = ИдентификаторФайла;
	ВозвращаемаяСтруктура.PartCount    = КоличествоЧастейФайла;
	ВозвращаемаяСтруктура.Status       = СостояниеТекущегоФоновогоЗадания;
	
	ЗаписьЖурналаРегистрации("Отметка ФЗ.ПолучитьСтатусВыполненияПодготовкиДанныхКОтправке", 
			УровеньЖурналаРегистрации.Предупреждение, , , "Status="""+ ФоновоеЗадание.Состояние +"""; сообщений="
						+МассивСообщений.Количество()+" PartCount="""+КоличествоЧастейФайла+"""");
			
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Вызывается из метода веб-сервиса для отправки части файла в автономную копию или мобильное приложение
Функция ВыгрузитьЧастьФайла(ИмяПлана, ИдентификаторФайла, НомерВыгружаемойЧастиФайла, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке      = "";
	ИмяЧастиФайла          = "";
	КаталогВременныхФайлов = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(ИдентификаторФайла);
	
	Для КоличествоРазрядов = СтрДлина(Формат(НомерВыгружаемойЧастиФайла, "ЧДЦ=0; ЧГ=0")) По 5 Цикл
		
		ФорматнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧЦ=%1; ЧВН=; ЧГ=0", Строка(КоличествоРазрядов));
		
		МаскаИмени = ?(ИмяПлана = "МобильноеПриложение", "%1.xml.%2", "%1.zip.%2");
		ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(МаскаИмени, ИдентификаторФайла, Формат(НомерВыгружаемойЧастиФайла, ФорматнаяСтрока));
		
		ИменаФайлов = НайтиФайлы(КаталогВременныхФайлов, ИмяФайла);
		
		Если ИменаФайлов.Количество() > 0 Тогда
			
			ИмяЧастиФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ИмяФайла);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧастьФайла = Новый Файл(ИмяЧастиФайла);
	
	Если ЧастьФайла.Существует() Тогда
		Возврат Новый ДвоичныеДанные(ИмяЧастиФайла);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'Часть файла с указанным номером не найдена.'");
	КонецЕсли;
	
КонецФункции

// Вызывается из метода веб-сервиса для получения части файла из автономной копии или мобильного приложения
Функция ЗагрузитьЧастьФайла(ИмяПлана, ИдентификаторФайла, НомерЗагружаемойЧастиФайла, ЗагружаемаяЧастьФайла, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	
	Если Не ЗначениеЗаполнено(ИдентификаторФайла) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не указан идентификатор загружаемого файла. Дальнейшее выполнение метода невозможно.
				|Необходимо для загружаемого файла назначить уникальный идентификатор.'");
		ВызватьИсключение(СообщениеОбОшибке);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗагружаемаяЧастьФайла)
		И ТипЗнч(ЗагружаемаяЧастьФайла) <> Тип("ДвоичныеДанные") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Метод не может быть выполнен, т.к. переданные данные не соответствуют типу для получения данных.'");
		ВызватьИсключение(СообщениеОбОшибке);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерЗагружаемойЧастиФайла) 
		Или НомерЗагружаемойЧастиФайла = 0 Тогда
		НомерЗагружаемойЧастиФайла = 1;
	КонецЕсли;
	
	КаталогВременныхФайлов = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(ИдентификаторФайла);
	
	Каталог = Новый Файл(КаталогВременныхФайлов);
	Если Не Каталог.Существует() Тогда
		СоздатьКаталог(КаталогВременныхФайлов);
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, ПолучитьИмяЧастиФайла(ИмяПлана, НомерЗагружаемойЧастиФайла));
	ЗагружаемаяЧастьФайла.Записать(ИмяФайла);
	
КонецФункции

// Вызывается из метода веб-сервиса для подготовки файла к загрузке данных
Функция ПодготовитьФайлДляЗагрузки(ИмяПлана, ИдентификаторФайла, СообщениеОбОшибке) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторФайлаВоВременномХранилище = "";
	Расширение = ?(ИмяПлана = "МобильноеПриложение", "xml", "zip");
	
	КаталогВременныхФайлов = ОбменДаннымиСлужебный.ВременныйКаталогВыгрузки(ИдентификаторФайла);
	ИмяАрхива              = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, "datafile." + Расширение);
	
	МассивПолученныхФайлов = НайтиФайлы(КаталогВременныхФайлов,"data." + Расширение + ".*");
	
	Если МассивПолученныхФайлов.Количество() > 0 Тогда
		
		ФайлыДляОбъединения = Новый Массив();
		ИмяЧастиФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, "data." + Расширение + ".%1");
		
		Для НомерЧасти = 1 По МассивПолученныхФайлов.Количество() Цикл
			ФайлыДляОбъединения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяЧастиФайла, НомерЧасти));
		КонецЦикла;
		
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не найден ни один фрагмент сессии передачи с идентификатором %1.
				|Необходимо убедиться, что в настройках программы заданы параметры
				|""Каталог временных файлов для Linux"" и ""Каталог временных файлов для Windows"".'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(ИдентификаторФайла));
		ВызватьИсключение(СообщениеОбОшибке);
	КонецЕсли;
	
	Попытка 
		ОбъединитьФайлы(ФайлыДляОбъединения, ИмяАрхива);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение(СообщениеОбОшибке);
	КонецПопытки;
	
	Если ИмяПлана <> "МобильноеПриложение" Тогда
		// Распаковать.
		
		Разархиватор = Новый ЧтениеZipФайла(ИмяАрхива);
		
		Если Разархиватор.Элементы.Количество() = 0 Тогда
			
			Попытка
				УдалитьФайлы(КаталогВременныхФайлов);
			Исключение
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
					УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
				ВызватьИсключение(СообщениеОбОшибке);
			КонецПопытки;
			
			СообщениеОбОшибке = НСтр("ru = 'Файл архива не содержит данных.'");
			ВызватьИсключение(СообщениеОбОшибке);
			
		КонецЕсли;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВременныхФайлов, Разархиватор.Элементы[0].Имя);
		Разархиватор.Извлечь(Разархиватор.Элементы[0], КаталогВременныхФайлов);
		Разархиватор.Закрыть();
		
	Иначе
		
		ИмяФайла = ИмяАрхива;
		
	КонецЕсли;
	
	// Помещаем файл в каталог временного хранилища файлов.
	КаталогЗагрузки          = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
	ИмяФайлаСДанными         = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИдентификаторФайла, ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));
	ИмяФайлаВКаталогеЗагрузки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогЗагрузки, ИмяФайлаСДанными);
	
	Попытка
		ПереместитьФайл(ИмяФайла, ИмяФайлаВКаталогеЗагрузки);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		ВызватьИсключение(СообщениеОбОшибке);
	КонецПопытки;
	
	ИдентификаторФайлаВоВременномХранилище = ОбменДаннымиСервер.ПоместитьФайлВХранилище(ИмяФайлаВКаталогеЗагрузки);
	
	// Удаляем временные файлы.
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, СообщениеОбОшибке);
		ВызватьИсключение(СообщениеОбОшибке);
	КонецПопытки;
	
	Возврат ИдентификаторФайлаВоВременномХранилище;
	
КонецФункции

// Возвращает имя файла сообщения обмена данными по данным узла-отправителя и узла-получателя.
//
Функция ИмяФайлаСообщенияОбмена(КодУзлаОтправителя, КодУзлаПолучателя, ЭтоИсходящееСообщение) Экспорт
	
	ШаблонИмени = "[Префикс]_[УзелОтправитель]_[УзелПолучатель]";
	Если СтрДлина(КодУзлаОтправителя) = 36 И ЭтоИсходящееСообщение Тогда
		ПрефиксИБИсточника = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
		Если ЗначениеЗаполнено(ПрефиксИБИсточника) Тогда
			ШаблонИмени = "[Префикс]_[ПрефиксИБИсточника]_[УзелОтправитель]_[УзелПолучатель]";
		КонецЕсли;
	КонецЕсли;
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[Префикс]",         "Message");
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[ПрефиксИБИсточника]",ПрефиксИБИсточника);
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелОтправитель]", КодУзлаОтправителя);
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелПолучатель]",  КодУзлаПолучателя);
	
	Возврат ШаблонИмени;
КонецФункции

Функция КоличествоЗаписейВТаблице(ИмяТаблицы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	" + ИмяТаблицы + " КАК Табл";
	
	Если СтрНайти("Справочник.Пользователи", НРег(ИмяТаблицы) + ",") > 0 Тогда
		Запрос.Текст = Запрос.Текст +  "
		|ГДЕ НЕ Табл.Служебный";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.Количество), Выборка.Количество, 0);
	КонецЕсли;
	
	Возврат 0;

КонецФункции

Функция КонтрольныйОстатокРазделаУчета(ИмяРаздела) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РазделУчета", ПланыСчетов.РазделыУчета[ИмяРаздела]);
	Запрос.УстановитьПараметр("ТекущийДень", КонецДня(ТекущаяДатаСеанса()));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналОперацийОстатки.Валюта) КАК КоличествоВалют,
	|	СУММА(ЖурналОперацийОстатки.ВалютнаяСуммаОстаток) КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(&ТекущийДень, Счет В ИЕРАРХИИ (&РазделУчета), , ) КАК ЖурналОперацийОстатки";
	
	Результат = Новый Структура("КоличествоВалют,Остаток", 0, 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Возвращает количество узлов всех планов обмена, используемых в синхронизации автононмых копий
//
//Параметры:
//	нет
//
//Возвращаемое значение:
//	Число
//
Функция КоличествоАвтономныхКопий()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ФункционалКонфигурацииДеньги.ОбменСЦентральнойБазой") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДеньгиОбменСЦентральнойБазой");
		Возврат Модуль.КоличествоАвтономныхКопий();
	Иначе
		Возврат ОбменМобильноеПриложение.КоличествоМобильныхПриложений();
	КонецЕсли;

КонецФункции

Функция ВыбратьДокументыДляРегистрации(МетаданныеДокумента, МинимальнаяДата)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + " КАК ТаблицаДокументов
	|ГДЕ
	|	//УсловияОтбора
	|";
	
	Если МетаданныеДокумента.Реквизиты.Найти("ЭтоШаблон") <> Неопределено Тогда
		ТекстУсловий = "ТаблицаДокументов.ЭтоШаблон Или ТаблицаДокументов.Дата >= &МинимальнаяДата";
	Иначе
		ТекстУсловий = "ТаблицаДокументов.Дата >= &МинимальнаяДата";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловияОтбора", ТекстУсловий + Символы.ПС);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ВыбратьКурсыВалютДляРегистрации(МинимальнаяДата) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.УстановитьПараметр("БазоваяВалюта", Константы.ВалютаУчета.Получить());
	Запрос.УстановитьПараметр("НачальнаяДата", Дата(2000,1,1));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПервых.Период КАК Период,
	|	КурсыВалютСрезПервых.Валюта КАК Валюта,
	|	КурсыВалютСрезПервых.БазоваяВалюта КАК БазоваяВалюта
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПервых(&НачальнаяДата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютСрезПервых
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.БазоваяВалюта
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период >= &МинимальнаяДата
	|	И КурсыВалют.БазоваяВалюта = &БазоваяВалюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Валюта";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ВыбратьДатыРасписанияДляРегистрации(МинимальнаяДата) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДатыРасписаний.ВладелецРасписания КАК ВладелецРасписания,
	|	ДатыРасписаний.ПлановаяДата КАК ПлановаяДата
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	(ДатыРасписаний.ПлановаяДата >= &МинимальнаяДата
	|			ИЛИ ДатыРасписаний.АктуальнаяДата >= &МинимальнаяДата)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецРасписания,
	|	ПлановаяДата";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ВыбратьПоказателиБюджетаДляРегистрации(МинимальнаяДата) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказателиБюджета.ВариантБюджета КАК ВариантБюджета,
	|	ПоказателиБюджета.НачалоПериода КАК НачалоПериода,
	|	ПоказателиБюджета.РазделБюджета КАК РазделБюджета,
	|	ПоказателиБюджета.ГрафаБюджета КАК ГрафаБюджета,
	|	ПоказателиБюджета.СтатьяБюджета КАК СтатьяБюджета
	|ИЗ
	|	РегистрСведений.ПоказателиБюджета КАК ПоказателиБюджета
	|ГДЕ
	|	ПоказателиБюджета.НачалоПериода >= ВЫБОР
	|			КОГДА ПоказателиБюджета.ВариантБюджета.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Год)
	|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&МинимальнаяДата, ГОД, -1), ГОД)
	|			КОГДА ПоказателиБюджета.ВариантБюджета.ДетальностьПланирования = ЗНАЧЕНИЕ(Перечисление.ПериодичностьПланирования.Квартал)
	|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&МинимальнаяДата, КВАРТАЛ, -1), КВАРТАЛ)
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&МинимальнаяДата, МЕСЯЦ, -2), МЕСЯЦ)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантБюджета,
	|	НачалоПериода,
	|	РазделБюджета";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ВыбратьОперацииШаблонов(МинимальнаяДата) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МинимальнаяДата", НачалоМесяца(ДобавитьМесяц(МинимальнаяДата, -3)));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацииШаблонов.Шаблон КАК Шаблон,
	|	ОперацииШаблонов.Операция КАК Операция
	|ИЗ
	|	РегистрСведений.ОперацииШаблонов КАК ОперацииШаблонов
	|ГДЕ
	|	ОперацииШаблонов.ПлановаяДата >= &МинимальнаяДата";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции 

Функция ПриведенноеЗначениеСценария(Сценарий) 

	Перем Результат;
	
	Если ТипЗнч(Сценарий) = Тип("ПеречислениеСсылка.СценарииСинхронизацииАвтономныхКопий") Тогда
		Результат = Сценарий;
	Иначе
		
		Если Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.МобильныеЗаменитьНастольными
			Или Сценарий = "МобильныеЗаменитьНастольными"
			Или Сценарий = "ЗаменитьВсеВАвтономнойКопии" Тогда
			Результат = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВАвтономнойКопии;
		ИначеЕсли Сценарий = Перечисления.СценарииОбменаСМобильнымПриложением.НастольныеЗаменитьМобильными
			Или Сценарий = "НастольныеЗаменитьМобильными"
			Или Сценарий = "ЗаменитьВсеВЦентральнойБазе" Тогда
			Результат = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВЦентральнойБазе;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ?(ЗначениеЗаполнено(Результат), Результат, Перечисления.СценарииСинхронизацииАвтономныхКопий.ОбъединениеДанных);
	
КонецФункции

Функция КомпонентыОбмена(НаправлениеОбмена, ПараметрыWEBСервиса)
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена(НаправлениеОбмена);
	
	Если ЗначениеЗаполнено(ПараметрыWEBСервиса.ИмяПланаОбмена) И ЗначениеЗаполнено(ПараметрыWEBСервиса.КодУзлаПланаОбмена) Тогда
		КомпонентыОбмена.УзелКорреспондента = ПланыОбмена[ПараметрыWEBСервиса.ИмяПланаОбмена].НайтиПоКоду(ПараметрыWEBСервиса.КодУзлаПланаОбмена);
	Иначе
		КомпонентыОбмена.ЭтоОбменЧерезПланОбмена = Ложь;
	КонецЕсли;
	
	КомпонентыОбмена.ВедениеПротоколаДанных.ВыводВПротоколИнформационныхСообщений = Ложь;
	КомпонентыОбмена.СостояниеОбменаДанными.ДатаНачала = ТекущаяДатаСеанса();
	КомпонентыОбмена.ИспользоватьТранзакции = Ложь;

	Если НаправлениеОбмена = "Получение" Тогда
		
		КомпонентыОбмена.КлючСообщенияЖурналаРегистрации = СформироватьКлючСообщенияЖР(НаправлениеОбмена, ПараметрыWEBСервиса);
		
		ИмяФайла = ОбменДаннымиСервер.ПолучитьФайлИзХранилища(ПараметрыWEBСервиса.ИдентификаторФайлаВоВременномХранилище);
		ОбменДаннымиXDTOСервер.ОткрытьФайлЗагрузки(КомпонентыОбмена, ИмяФайла);
		
	Иначе
		
		КомпонентыОбмена.КлючСообщенияЖурналаРегистрации   = СформироватьКлючСообщенияЖР(НаправлениеОбмена, ПараметрыWEBСервиса);
		КомпонентыОбмена.ВерсияФорматаОбмена               = ОбменДаннымиXDTOСервер.ВерсияФорматаОбменаПриВыгрузке(
			КомпонентыОбмена.УзелКорреспондента);
		КомпонентыОбмена.XMLСхема                          = ОбменДаннымиXDTOСервер.ФорматОбмена(
			ПараметрыWEBСервиса.ИмяПланаОбмена, КомпонентыОбмена.ВерсияФорматаОбмена);
		КомпонентыОбмена.МенеджерОбмена                    = ОбменДаннымиXDTOСервер.МенеджерОбменаВерсииФормата(
			КомпонентыОбмена.ВерсияФорматаОбмена, КомпонентыОбмена.УзелКорреспондента);
		КомпонентыОбмена.ТаблицаПравилаРегистрацииОбъектов = ОбменДаннымиXDTOСервер.ПравилаРегистрацииОбъектов(
			КомпонентыОбмена.УзелКорреспондента);
		КомпонентыОбмена.СвойстваУзлаПланаОбмена           = ОбменДаннымиXDTOСервер.СвойстваУзлаПланаОбмена(
			КомпонентыОбмена.УзелКорреспондента);
		
	КонецЕсли;
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		Возврат КомпонентыОбмена;
	КонецЕсли;
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);
	
	Возврат КомпонентыОбмена;
	
КонецФункции

Функция СформироватьКлючСообщенияЖР(НаправлениеОбмена, ПараметрыWEBСервиса)
	
	Возврат ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными();
	
КонецФункции

Функция ПолучитьИмяЧастиФайла(ИмяПлана, НомерЧастиФайла, ИмяАрхива = "")
	
	Если Не ЗначениеЗаполнено(ИмяАрхива) Тогда
		ИмяАрхива = "data";
	КонецЕсли;
	Расширение = ?(ИмяПлана = "МобильноеПриложение", "xml", "zip");
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1." + Расширение + ".%2", ИмяАрхива, Формат(НомерЧастиФайла, "ЧГ=0"));
	
	Возврат Результат;
	
КонецФункции

Функция СостоянияФоновыхЗаданий()
	
	СостоянияФоновогоЗадания = Новый Соответствие;
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.Активно,           "Active");
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.Завершено,         "Completed");
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.ЗавершеноАварийно, "Failed");
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.Отменено,          "Canceled");
	
	Возврат СостоянияФоновогоЗадания;
	
КонецФункции

Процедура ПроверитьИспользованиеТранспорта(Транспорт)

	Если НЕ ЗначениеЗаполнено(Транспорт) ИЛИ Транспорт.ЗапретитьИспользование Тогда
		
		ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'В настольном приложении запрещено использование транспорта <%1>.'"), Строка(Транспорт));
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеПроблемы);
		ВызватьИсключение ОписаниеПроблемы;
		
	КонецЕсли;
	
	Если Не РегистрыСведений.КонтрольТранспортовОбмена.ТранспортДоступенДляНовогоОбмена(Транспорт) Тогда
		
		ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'Транспорт %1 сейчас недоступен. Возможно, он уже используется в другом сеансе'"), Строка(Транспорт));
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеПроблемы);
		ВызватьИсключение ОписаниеПроблемы;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция СтруктураНастроекОбменаБазовая(СсылкаНаТранспорт = Неопределено, ИмяПланаОбмена = Неопределено)
	
	СтруктураНастроекОбмена = Новый Структура;
	
	// Список устройств, с которыми осуществляется обмен по указанному транспорту
	СтруктураНастроекОбмена.Вставить("ТаблицаУзловКорреспондентов", Новый ТаблицаЗначений);
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("УзелИнформационнойБазыКод");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("УзелИнформационнойБазыНаименование");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("ВыгружатьИзменения");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("ИмяПолученногоФайла");
	СтруктураНастроекОбмена.ТаблицаУзловКорреспондентов.Колонки.Добавить("ИмяОтправленногоФайла");
	
	// Настройки, используемыя процедурами БСП по обмену с конкретным узлом
	СтруктураНастроекОбмена.Вставить("ДатаНачала");
	СтруктураНастроекОбмена.Вставить("ДатаОкончания");
	СтруктураНастроекОбмена.Вставить("Отказ", Ложь);
	СтруктураНастроекОбмена.Вставить("ЭтоОбменВРИБ", Ложь);
	
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбмена",             Неопределено);
	СтруктураНастроекОбмена.Вставить("НастройкаВыполненияОбменаНаименование", "");
	
	СтруктураНастроекОбмена.Вставить("ИмяПланаОбмена", ?(ИмяПланаОбмена = Неопределено, "МобильноеПриложение", ИмяПланаОбмена));
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбмена", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаКод", СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Код);
	СтруктураНастроекОбмена.Вставить("ТекущийУзелПланаОбменаНаименование", СтруктураНастроекОбмена.ТекущийУзелПланаОбмена.Наименование);
	
	СтруктураНастроекОбмена.Вставить("ОбменПоПравиламКонвертацииОбъектов", Ложь);
	
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазы");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыКод", "");
	СтруктураНастроекОбмена.Вставить("УзелИнформационнойБазыНаименование", "");
	
	СтруктураНастроекОбмена.Вставить("ВидТранспортаОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакции", 1); // на каждый элемент отдельная транзакция
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗагрузкуДанных", Истина);
	СтруктураНастроекОбмена.Вставить("ПроизводитьВыгрузкуДанных", Истина);
	СтруктураНастроекОбмена.Вставить("ИспользоватьПередачуБольшогоОбъемаДанных", Ложь);
	
	// структура настроек дополнительная (БСП)
	СтруктураНастроекОбмена.Вставить("ОбработкаОбменаДанными");
	СтруктураНастроекОбмена.Вставить("ОбработкаТранспортаСообщенийОбмена");
	СтруктураНастроекОбмена.Вставить("ИмяОбработкиТранспортаСообщенийОбмена");
	
	СтруктураНастроекОбмена.Вставить("КлючСообщенияЖурналаРегистрации", "Обмен данными." + СтруктураНастроекОбмена.ИмяПланаОбмена);
	СтруктураНастроекОбмена.Вставить("ТекущееДействие");
	
	СтруктураНастроекОбмена.Вставить("ТранспортОбмена", СсылкаНаТранспорт);
	СтруктураНастроекОбмена.Вставить("НастройкиТранспорта");
	Если СсылкаНаТранспорт <> Неопределено Тогда
		СтруктураНастроекОбмена.НастройкиТранспорта = НастройкиТранспортаОбмена(СсылкаНаТранспорт, СтруктураНастроекОбмена.ИмяПланаОбмена);
		СтруктураНастроекОбмена.ВидТранспортаОбмена = СтруктураНастроекОбмена.НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
	КонецЕсли; 
	
	// Правила конвертации в обмене с мобильными приложениями не используются
	СтруктураНастроекОбмена.Вставить("ПравилаКонвертацииОбъектов");
	СтруктураНастроекОбмена.Вставить("ПравилаЗагружены", Ложь);
	
	// Параметры для использования механизмов БСП по отладке обмена даннымм
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковВыгрузки ", Ложь);
	СтруктураНастроекОбмена.Вставить("ОтладкаОбработчиковЗагрузки", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиВыгрузки", "");
	СтруктураНастроекОбмена.Вставить("ИмяФайлаВнешнейОбработкиОтладкиЗагрузки", "");
	СтруктураНастроекОбмена.Вставить("РежимПротоколированияОбменаДанными", Ложь);
	СтруктураНастроекОбмена.Вставить("ИмяФайлаПротоколаОбмена", "");
	СтруктураНастроекОбмена.Вставить("ПродолжитьПриОшибке", Ложь);
	
	// структура для регистрации событий в ЖР
	СтруктураНастроекОбмена.Вставить("РезультатВыполненияОбмена");
	СтруктураНастроекОбмена.Вставить("ДействиеПриОбмене");
	СтруктураНастроекОбмена.Вставить("КоличествоОбъектовОбработано", 0);
	СтруктураНастроекОбмена.Вставить("СообщениеПриОбмене",           "");
	СтруктураНастроекОбмена.Вставить("СтрокаСообщенияОбОшибке",      "");
	
	Возврат СтруктураНастроекОбмена;
	
КонецФункции

Функция ДействиеОбменаВыполнено(РезультатВыполненияОбмена) 

	Возврат РезультатВыполненияОбмена = Неопределено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;

КонецФункции

Функция НастройкиТранспортаОбмена(СсылкаНаТранспорт, ИмяПанаОбмена)

	Результат = Справочники.ТранспортыОбменаДанными.СтруктураПараметровТранспорта(СсылкаНаТранспорт);
	
	// Добавление реквизитов для процедур БСП
	Результат.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Результат.ВидТранспорта);
	Результат.Вставить("ПарольАрхиваСообщенияОбмена", Результат.ПарольАрхиваСообщенияОбмена);
	Результат.Вставить("Узел", СинхронизацияАвтономныхКопийВызовСервера.ЭтотУзел(ИмяПанаОбмена));
	Результат.Вставить("ИспользоватьВременныйКаталогДляОтправкиИПриемаСообщений", Истина);
	
	Если Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.COM Тогда
		
		Результат.Вставить("COMИмяПользователя",    Результат.ИмяПользователяНаРесурсе);
		Результат.Вставить("COMПарольПользователя", Результат.ПарольПользователяНаРесурсе);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL Тогда
		
		Результат.Вставить("EMAILУчетнаяЗапись",                         Результат.EMAILУчетнаяЗапись);
		Результат.Вставить("EMAILСжиматьФайлИсходящегоСообщения",        Результат.СжиматьФайлИсходящегоСообщения);
		Результат.Вставить("EMAILМаксимальныйДопустимыйРазмерСообщения", Результат.МаксимальныйДопустимыйРазмерСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		Результат.Вставить("FILEСжиматьФайлИсходящегоСообщения",  Результат.СжиматьФайлИсходящегоСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.ЯндексДиск Тогда
		
		Результат.Вставить("ЯндексДискСжиматьФайлИсходящегоСообщения",  Результат.СжиматьФайлИсходящегоСообщения);
		Результат.Вставить("ЯндексДискСжиматьФайлИсходящегоСообщения", Результат.СжиматьФайлИсходящегоСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.Dropbox Тогда
		
		Результат.Вставить("DropBoxСжиматьФайлИсходящегоСообщения",  Результат.СжиматьФайлИсходящегоСообщения);
		
	ИначеЕсли Результат.ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS Тогда
		
		Результат.Вставить("WSИмяПользователя",  Результат.ИмяПользователяНаРесурсе);
		Результат.Вставить("WSПароль",           Результат.ПарольПользователяНаРесурсе);
		Результат.Вставить("WSЗапомнитьПароль",  Результат.ЗапомнитьПароль);
		
	КонецЕсли; 

	ОбменДаннымиСервер.ДополнитьНастройкиТранспортаКоличествомЭлементовВТранзакции(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСценарияОбмена(Сценарий) 
	Результат = СвойстваСценарияПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы КАК Узел,
	|	СценарииОбменовДаннымиНастройкиОбмена.ВидТранспортаОбмена КАК ВидТранспорта,
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы.МобильноеУстройство КАК МобильноеУстройство
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|	СценарииОбменовДаннымиНастройкиОбмена.Ссылка = &Сценарий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.МобильноеУстройство = NULL Или Не ЗначениеЗаполнено(Выборка.Узел) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат.ИмяПланаОбмена = Выборка.Узел.Метаданные().Имя;
		Результат.ВидТранспорта = Выборка.ВидТранспорта;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСценарияПоУмолчанию() 
	Возврат Новый Структура("ИмяПланаОбмена,ВидТранспорта", Неопределено, Неопределено);
КонецФункции 



#КонецОбласти