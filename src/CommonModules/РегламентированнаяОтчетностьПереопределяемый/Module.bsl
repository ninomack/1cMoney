////////////////////////////////////////////////////////////////////////////////
// Модуль содержит переопределяемые процедуры и функции.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения сведений об обособленном подразделении.

// Процедура возвращает признак того, что в конфигурации используется механизм отправки
// по различным направлениям в Росстат (для обособленных подразделений).
//
// Параметры:
// ПризнакИспользования - Булево - Истина, если реализована отправка по различным направлениям
Процедура ИспользуетсяОтправкаВРосстатПоРазнымНаправлениям(ПризнакИспользования) Экспорт
	
	ПризнакИспользования = Ложь; // ДЕНЬГИ ВариантыПриложений.ЭтоВерсияКОРП();
	
КонецПроцедуры

// Получает код ОКПО обособленного подразделения.
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение организации.
//   КодОКПО       - Строка (длина - 14) - код ОКПО обособленного подразделения.
//
Процедура ПолучитьКодОКПОПодразделения(Знач Подразделение, КодОКПО) Экспорт
	
	КодОКПО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КодПоОКПО");
	
КонецПроцедуры

// Получает код органа ФСГС обособленного подразделения.
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение организации.
//   КодФСГС       - Строка (длина - 5) - код органа ФСГС для подразделения (например, "23-45").
//
Процедура ПолучитьКодОрганаФСГСПодразделения(Знач Подразделение, КодФСГС) Экспорт
	
	КодФСГС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КодОрганаФСГС");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции статистики.

// Автоматически заполняет отчет в фоновом режиме.
//
Процедура ЗаполнитьОтчетВФоне(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ЗаполнитьОтчет(ПараметрыОтчета.ИДОтчета, ПараметрыОтчета.ИДРедакцииОтчета, ПараметрыОтчета.ПараметрыОтчета, ПараметрыОтчета.Контейнер);
	Попытка
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыОтчета.ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	Исключение
		ТаблицаРасшифровки = Неопределено;
	КонецПопытки;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Контейнер", ПараметрыОтчета.Контейнер);
	СтруктураДанных.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры интеграции со списком задач бухгалтера.

// Процедура изменят заголовки кнопок.
//
// Параметры:
//   КнопкаСправочникОтчетов - Строка - заголовок кнопки, при щелчке по которой открывается справочник регл. отчетов.
//   КнопкаКалендарь - Строка - заголовок кнопки, при щелчке по которой открывается календарь бухгалтера.
//
Процедура НастроитьКнопкиКалендаряБухгалтера(КнопкаСправочникОтчетов = Неопределено, КнопкаКалендарь = Неопределено) Экспорт
	
	Если КнопкаКалендарь <> Неопределено Тогда
		КнопкаКалендарь.Заголовок = НСтр("ru = 'Календарь бухгалтера'");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры интерфейса взаимодействия с конфигурациями (библиотеками)
// - потребителями.

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на регламентированный отчет.
//   СтруктураРазделов     - Структура - разделы:
//     * ключ     - Строка - имя раздела;
//     * значение - Массив - массив структур с полями:
//      ** Описание - Строка - описание;
//      ** ТабличныйДокумент - ТабличныйДокумент - раздел.
//   НумероватьСтраницы              - Булево - признак нумерации страниц.
//   НомерПервойстраницыРаздела25    - Число - номер первой страницы раздела 2.5.
//   НомерПоследнейстраницыРаздела25 - Число - номер последней страницы раздела 2.5.
//   НомерПервойстраницыРаздела6     - Число - номер первой страницы раздела 6.
//   ОбщееКоличествоСтраницРаздела6  - Число - общее количество страниц раздела 6.
//
Процедура ПолучитьРаздел25иРаздел6ФормыРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов,
	                                        НумероватьСтраницы,
											НомерПервойстраницыРаздела25,
											НомерПоследнейстраницыРаздела25,
											НомерПервойстраницыРаздела6,
											ОбщееКоличествоСтраницРаздела6) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура вызывается при создании на сервере формы регламентированного отчета.
//
// Параметры:
//  ИмяОтчета - Строка - имя отчета в дереве объектов метаданных;
//  ИмяФормы  - Строка - имя формы отчета;
//  Форма     - УправляемаФорма - форма, из которой вызывается процедура.
//
Процедура ПриСозданииФормыРеглОтчета(ИмяОтчета, ИмяФормы, Форма) Экспорт
			
КонецПроцедуры

#Область ПроцедурыИФункцииСпискаЗадачБухгалтера

// Вызывается при изменении ручных статусов.
// См. также ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на документ.
//	Статус - Строка         - актуальный статус; предполагает сравнение с СтатусСданоСтрокой().
//
// Пример реализации:
//  ВыполнениеЗадачБухгалтера.ЗарегистрироватьИзменениеСтатусаЗадачиПодготовкиОтчета(Ссылка, Статус);
//
Процедура ИзменитьРучнойСтатус(Ссылка, Статус) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОтчетностиПоАлкогольнойПродукции

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта, 
// соответствующего "РегистрСведений.СведенияОбАлкогольнойПродукции" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//  СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "РегистрСведений.СведенияОбАлкогольнойПродукции" в БП. 
//
// Пример реализации:
//  СтрокаИмениОбъекта = "РегистрСведений.СведенияОбАлкогольнойПродукции";
//
Процедура СтрокаРегистрСведенийСведенияОбАлкогольнойПродукции(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "РегистрСведений.СведенияОбАлкогольнойПродукции";
КонецПроцедуры

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта,
// соответствующего "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//	СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво" в БП.
//
// Пример реализации:
//  СтрокаИмениОбъекта = "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво";
//
Процедура СтрокаПеречислениеВидыЛицензийНаПродажуАлкоголяПиво(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво";
КонецПроцедуры

// Возвращает в параметре "СтрокаИмениОбъекта" имя объекта,
// соответствующего "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции" в БП.
// Если такого объекта нет - пустая строка.
//
// Параметры:
//	СтрокаИмениОбъекта - Строка - имя объекта, соответствующего "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции" в БП.
//
// Пример реализации:
//  СтрокаИмениОбъекта = "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции";
//
Процедура СтрокаРегистрСведенийЛицензииПоставщиковАлкогольнойПродукции(СтрокаИмениОбъекта) Экспорт
	СтрокаИмениОбъекта = "РегистрСведений.ЛицензииПоставщиковАлкогольнойПродукции";
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции.

// Функция возвращает идентификатор конфигурации.
// Длина идентификатора не должна превышать 8 символов.
//
// Возвращаемое значение:
//   Строка - идентификатор конфигурации.
//
// Пример:
//   Возврат "БПКОРП";
//
Функция ИДКонфигурации() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая1" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		Возврат "БП";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "БПКОРП";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

// Функция возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
// Возвращаемое значение:
//   Строка - краткое название конфигурации.
//
// Пример:
//   Возврат "1С:Бухгалтерия";
//
Функция КраткоеНазваниеПрограммы() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая1"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		Возврат "1С:Бухгалтерия";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "1С:Бухгалтерия КОРП";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

// Возвращает признак уплаты налогоплательщиком единого налога на вмененный доход (ЕНВД).
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   Период        - Дата - дата, на которую нужно получить признак.
//   НачалоПериода - Дата - дата начала периода, за который нужно получить признак.
//
// Возвращаемое значение:
//   Истина - налогоплательщик уплачивает ЕНВД.
//   Ложь   - налогоплательщик не уплачивает ЕНВД.
//
// Пример:
// Если НачалоПериода = Неопределено Тогда
//     Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период);
// Иначе
//     Возврат УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, Период);
// КонецЕсли;
//
Функция ПлательщикЕНВД(Организация, Период, НачалоПериода = Неопределено) Экспорт
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат Ложь;
	// Конец ДЕНЬГИ
	
КонецФункции

// Процедура добавляет в форму назначаемую команду.
//
// Параметры:
//   Форма - Форма - форма, в которую добавляется команда.
//   ГруппаФормы - Форма.Элементы - группа формы, в которой будет располагаться команда.
//
Процедура ДобавитьНазначаемуюКоманду(Форма, ГруппаФормы) Экспорт
	
	ИмяКоманды = "ОткрытьЭкспрессПроверкуВеденияУчета";
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = НСтр("ru = 'Экспресс-проверка ведения учета'");
	Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
	
	Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаФормы);
	Кнопка.ИмяКоманды = ИмяКоманды;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	
	ГруппаФормы.Видимость = Истина;
	
КонецПроцедуры

// Функция возвращает заголовок формы "УправлениеОтчетностью" обработки "ОбщиеОбъектыРеглОтчетности".
// Если функция возвращает пустую строку, то используется заголовок формы, указанный по умолчанию.
//
// Возвращаемое значение:
//   Строка - заголовок формы управление отчетностью.
//
// Пример:
//   Возврат "";
//
Функция ЗаголовокФормыУправлениеОтчетностью() Экспорт
	
	Возврат "";
	
КонецФункции

// Процедура возвращает признак - является ли индивидуальный предприниматель работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//  ИПИспользуетТрудНаемныхРаботников - Булево - признак - является ли индивидуальный предприниматель
//                                               работодателем для наемных сотрудников.
//                                               Истина - ИП является работодателем;
//                                               Ложь   - ИП не является работодателем.
//  ДатаНачалаПериодаОтчета - Дата - дата начала периода отчета.
//  ДатаКонцаПериодаОтчета - Дата - дата конца периода отчета.
//
// Пример:
//	ИПИспользуетТрудНаемныхРаботников = НЕ ЭтоЮридическоеЛицо(Организация)
//		И (ЗначениеЗаполнено(Организация.РегистрационныйНомерПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.КодОрганаПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаПФР)
//		ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерТФОМС)
//		ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерФСС)
//		ИЛИ ЗначениеЗаполнено(Организация.КодПодчиненностиФСС)
//		ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаФСС));
//
Процедура ПолучитьПризнакИспользованияИПТрудаНаемныхРаботников(Организация,
															   ИПИспользуетТрудНаемныхРаботников,
															   ДатаНачалаПериодаОтчета = Неопределено,
										  					   ДатаКонцаПериодаОтчета  = Неопределено) Экспорт
															   
	// ДЕНЬГИ
	ИПИспользуетТрудНаемныхРаботников = ИПИспользуетТрудНаемныхРаботников(Организация);
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Функция возвращает имя справочника обособленных подразделений,
// используемого для автоматического заполнения статистической отчетности.
//
// Параметры:
//   ИмяОтчета - Строка - имя регламентированного отчета (например, "РегламентированныйОтчетСтатистикаФорма1ТГМС").
//
// Возвращаемое значение:
//   Строка - имя справочника обособленных подразделений.
//
// Пример реализации:
//   Возврат "ПодразделенияОрганизаций";
//
Функция ИмяСправочникаОбособленныхПодразделений(ИмяОтчета = "") Экспорт
	
	Возврат "ПодразделенияОрганизаций";
	
КонецФункции

// Функция возвращает имя реквизита справочника подразделений, который
// определяет, является ли подразделение обособленным (в трактовке Росстата).
// Используется для автоматического заполнения статистической отчетности.
//
// Параметры:
//   ИмяОтчета - Строка - имя регламентированного отчета (например, "РегламентированныйОтчетСтатистикаФорма1ТГМС").
//
// Возвращаемое значение:
//   Булево - если значение реквизита равно Истина - подразделение является обособленным,
//            иначе значение реквизита равно Ложь - подразделение не является обособленным.
//
// Пример реализации:
//   Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
//
Функция ИмяРеквизитаПризнакаОбособленногоПодразделения(ИмяОтчета = "") Экспорт
	
	Возврат "ОбособленноеПодразделение";
	
КонецФункции

// Функция возвращает код вида документа физического лица.
//
// Параметры:
//   ВидДокументаФизическогоЛица - СправочникСсылка.ВидыДокументовФизическихЛиц - ссылка на элемент справочника "ВидыДокументовФизическихЛиц".
//
// Возвращаемое значение:
//   Строка (длина - 2) - код вида документа физического лица.
//
// Пример:
//	 Возврат ВидДокументаФизическогоЛица.КодМВД;
//
Функция ПолучитьКодВидаДокументаФизическогоЛица(ВидДокументаФизическогоЛица) Экспорт
	
	КодВидаДокумента = "";
	
	Если ЗначениеЗаполнено(ВидДокументаФизическогоЛица) Тогда
		КодВидаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокументаФизическогоЛица, "КодМВД");
	КонецЕсли;
	
	Возврат КодВидаДокумента;
	
КонецФункции

// Процедура возвращает ссылку на предопределенный элемент из справочника "ВидыКонтактнойИнформации".
//
// Параметры:
//   ВидКИ      - СправочникСсылка.ВидыКонтактнойИнформации - ссылка на предопределенный элемент справочника "ВидыКонтактнойИнформации".
//   НаимВидаКИ - Строка - наименование предопределенного элемента справочника "ВидыКонтактнойИнформации".
//
// Пример:
//   ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
//
Процедура ПолучитьВидКонтактнойИнформации(ВидКИ, НаимВидаКИ) Экспорт
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации[НаимВидаКИ];
	
КонецПроцедуры

// Процедура возвращает признак ведения персонифицированного учета во внешней программе.
//
// Параметры:
//  ПризнакПерсУчета - булево - признак ведения персонифицированного учета во внешней программе.
//                     Истина - персонифицированный учет ведется во внешней программе;
//                     Ложь   - персонифицированный учет ведется в конфигурации.
//
Процедура ПолучитьПризнакВеденияПерсонифицированногоУчетаВоВнешнейПрограмме(ПризнакПерсУчета) Экспорт
	
	ПризнакПерсУчета = Ложь; // ДЕНЬГИ БухгалтерскийУчетПереопределяемый.УчетЗарплатыИКадровВоВнешнейПрограмме();
	
КонецПроцедуры

// Процедура возвращает признак учета расходов по элементам затрат.
//
// Параметры:
//  НачалоПериода        - Дата - начало периода отчета (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).
//  КонецПериода         - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация          - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ПризнакУчетаРасходов - Булево или Неопределено - признак учета расходов по элементам затрат.
//                           Истина       - расходы учитываются по элементам затрат;
//                           Ложь         - расходы не учитываются по элементам затрат;
//                           Неопределено - в конфигурации не реализован функционал учета расходов по элементам затрат.
// Пример:
//  ПризнакУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(
//  	НачалоПериода, КонецПериода, Организация);
//
Процедура ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(НачалоПериода, КонецПериода, Организация, ПризнакУчетаРасходов) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура возвращает признак плательщика торгового сбора.
//
// Параметры:
//  НачалоПериода        - Дата - начало года, предшествовавшему периоду отчета
//                               (НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 12))).
//  КонецПериода         - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация          - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ПризнакПлательщикаТС - Булево - признак плательщика торгового сбора.
//                           Истина - организация является плательщиком торгового сбора;
//                           Ложь   - организация не является плательщиком торгового сбора.
// Пример:
//  ПризнакПлательщикаТС = УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода);
//
Процедура ПолучитьПризнакПлательщикаТорговогоСбораЗаПериод(Организация, НачалоПериода, КонецПериода, ПризнакПлательщикаТС) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура возвращает объект налогообложения УСН.
//
// Параметры:
//  НачалоПериода - Дата - начало периода отчета (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета).
//  КонецПериода  - Дата - окончание периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
//  Организация   - СправочникСсылка - ссылка на элемент справочника "Организации".
//  ОбъектНалУСН  - Число или Неопределено - объект налогообложения УСН.
//                    1 - объект налогообложения - доходы;
//                    2 - объект налогообложения - доходы, уменьшенные на величину расходов;
//                    Неопределено - не применялась УСН за период или в конфигурации не реализован
//                                   функционал получения объекта налогообложения УСН за период.
//
Процедура ПолучитьОбъектНалогообложенияУСНЗаПериод(Организация, НачалоПериода, КонецПериода, ОбъектНалУСН) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура возвращает УИД конфигурации для целей регламентированной отчетности.
//
// Параметры:
// 	УИДКонфигурации - Строка - Уникальный идентификатор конфигурации 
//							   для целей регламентированной отчетности.
//
// Пример:
//  УИДКонфигурации = "e54b72a0-171f-11df-85fa-001b24e002fe";
//
Процедура ПолучитьУИДКонфигурации(УИДКонфигурации) Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая1"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		УИДКонфигурации = "0daf6254-b4b4-42ac-8f62-e0c6ccd5e421";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		УИДКонфигурации = "16cce818-2e61-481d-acc9-0d1b3a8e73ff";
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки актуализации данных учета.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//  Период      - Дата - отчетный период.
//  РезультатПроверки - Структура - возвращаемая структура параметров актуализации.
//
// Пример реализации:
//  АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
//  ПараметрыПроверки = Новый Структура;
//  ПараметрыПроверки.Вставить("Организация", Организация);
//  ПараметрыПроверки.Вставить("Период",      Период);
//  ПараметрыПроверки.Вставить("УИДЗамера",   Новый УникальныйИдентификатор);
//  ПараметрыПроверки.Вставить("АктуализироватьВесьПериод", Истина);
//  Обработки.ЗакрытиеМесяца.ПроверитьАктуальностьВФоне(ПараметрыПроверки, АдресХранилища);
//  РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилища);
//
Процедура ПолучитьРезультатПроверкиАктуализацииДанныхУчета(Организация, Период, РезультатПроверки) Экспорт
КонецПроцедуры

// Возвращает массив ссылок на элементы справочника "РегистрацииВНалоговомОргане".
//
// Параметры:
//   Организация            - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   ДатаКонцаПериодаОтчета - Дата - дата конца периода отчета.
//   НалоговыеОрганы        - Массив - ссылки на элементы справочника "РегистрацииВНалоговомОргане".
//   НаименованиеРеглОтчета - Строка - наименование регламентированного отчета.
//
// Пример реализации:
//   Если НаименованиеРеглОтчета = "РегламентированныйОтчетПрибыль" Тогда
//		...
//	 ИначеЕсли НаименованиеРеглОтчета = "РегламентированныйОтчет6НДФЛ" Тогда	
//	 	...
//	 КонецЕсли;	
//
Процедура ПолучитьНалоговыеОрганы(Организация, ДатаКонцаПериодаОтчета, НалоговыеОрганы, НаименованиеРеглОтчета = "") Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Устанавливает флаг того, что конфигурация дает возможность интерактивно задать подписантов непосредственно
// из формы отчетности.
//
// Параметры:
//   ПризнакИспользования - Булево - флаг, который необходимо установить, если конфигурация будет давать
//									 возможность настроить подписанта прямо из формы отчетности.
//
// Пример реализации:
//   ПризнакИспользования = Истина;
//
Процедура ИспользоватьКонтекстнуюНастройкуПодписантовСтатистики(ПризнакИспользования) Экспорт
КонецПроцедуры

#Область НоваяФормаРегламентированнойОтчетности

// Процедура переопределяет обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности*"
//
// Параметры:
//	Ссылка - СправочникСсылка, ДокументСсылка - Ссылка на объект - источник события
//	Отказ  - Булево - Управляет значением параметра "Отказ" вызывающего обработчика подписки на событие
//	СтандартнаяОбработка - Булево - Если СтандартнаяОбработка = Истина, то будут выполнены действия вызывающего обработчика подписки на событие
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка, Число - Если первичный, то указываем "П", если нет признака первичный/корректирующий - "-",
//				иначе - "К/" + <номер корректировки>; вариант отчета в числовом коде: 0 - первичный, число больше нуля - корректирующий
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности содания новый объектов из формы Отчетность
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений - Таблица, содержащая в себе описания объектов конфигураций-потребителей
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме создания отчета
//			- ТипОбъекта - Тип - Тип описываемого объекта
//			- ВидКонтролирующегоОргана - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетности
//			- ГруппаВДереве - Строка - Определяет имя группы, в которой будет отображаться объект в случае иерархическкого отображения списка объектов
//			- ВидДокумента - Перечисления.СтраницыЖурналаОтчетность - Определяет страницу формы Отчетность, на которой будет отображаться объект
//				Может принимать одно из следующих значений:
//						Перечисления.СтраницыЖурналаОтчетность.Уведомления
//						Перечисления.СтраницыЖурналаОтчетность.Отчеты
//			- НеОтправляетсяВКонтролирующийОрган - Булево - Истина, если объект не отправляется в контролирующий орган по ТКС
//			- ЯвляетсяАктуальным - Булево - Определяет, можно ли создавать новые объекты данного вида
//			- ИмяОсновногоМакетаДляПечати - Строка - имя макета, который будет использоваться для печати по умолчанию
//			- ВидЭлектронногоПредставления - СправочникСсылка.ВидыОтправляемыхДокументов - вид электронного представления (справочник 
// ЭлектронныеПредставленияРегламентированныхОтчетов), соответствующий данному типу объекта. Неопределено, если такого вида отправляемого документа не существует
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Дополняет дерево регламентированных отчетов для использования в форме выбора видов отчетов,
// которая вызывается из формы "Отчетность" при нажатии на кнопку "Создать" на вкладке "Отчеты"
//
// Параметры:
//  ДеревоОтчетов - ДеревоЗначений - Дерево содержит описания видов отчетов, дополняемые из конфигураций-потребителей
//		Деревоз значений содержит следующие колонки:
//			- Наименование - Строка - Наименование вида отчета, как оно должно отображаться в форме
//			- ПолноеИмя - Строка - Полное имя (как в метаданных) документа или справочник для хранения данных отчета,
//				например: "Документ.РегламентированныйОтчет" или "Документ.УниверсальныйРегламентированныйОтчет" (для БГУ)
//			- Ссылка - СправочникСсылка - Ссылка на элемент справочника, содержащий описание вида отчета (если существует),
//				например, ссылка на элемент справочника "ВидыОтчетов" в БГУ
//			- ТипПолучателя - Перечисления.ТипыКонтролирующихОрганов - контролирующий орган, в который сдается отчетность
//			- Категория - Строка - Наименование категории отчета или название группы, в которую входит отчет (для группировки в форме)
//			- ЭтоГруппа - Булево - Если элемент дерева должен отображаться в форме как группа
//
Процедура ДобавитьВДеревоРегламентированныхОтчетовДругиеОтчеты(ДеревоОтчетов) Экспорт
	
КонецПроцедуры

// Процедура переопределяет параметры отчета
//
// Параметры:
//  Отчет                      - Структура("Наименование,ПолноеИмя,Ссылка").
//  ОрганизацияОтчета          - Ссылка или Неопределено, организация отчета.
//  ДатаНачалаПериодаОтчета    - Дата или Неопределено, дата начала периода отчета.
//  ДатаОкончанияПериодаОтчета - Дата или Неопределено, дата окончания периода отчета.
//  ПараметрыОткрытия          - Структура, переопределяемые параметры открытия формы отчета.
//
Процедура ПереопределитьПараметрыОтчета(Отчет, ОрганизацияОтчета, ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, ПараметрыОткрытия) Экспорт
	
КонецПроцедуры

// Дополняет функционал обработчика "ПриСозданииНаСервере" общей формы "Регламентированная отчетность",
// здесь можно добавлять новые конопки в командные панели, расширять возможности интерфейса.
//
// Параметры:
//  Форма - УправляемаяФорма, общая форма "Регламентированная отчетность".
//
// Пример:
//  ГруппаКоманды = Форма.Элементы["ОтчетыГруппа3"];
//  
//  ИмяКоманды = "ОтчетыПоказатьДополнительнуюИнформацию";
//  Команда = Форма.Команды.Добавить(ИмяКоманды);
//  Команда.Подсказка = НСтр("ru = 'Показать дополнительную информацию'");
//  Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
//  Команда.Картинка = БиблиотекаКартинок.Лупа;
//  Команда.Действие = "Подключаемый_ВыполнитьНазначаемуюКоманду";
//  
//  Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКоманды);
//  Кнопка.Заголовок = НСтр("ru = 'Инфо'");
//  Команда.ИзменяетСохраняемыеДанные = Ложь;
//  Кнопка.ИмяКоманды = ИмяКоманды;
//
Процедура ФормаРегламентированнойОтчетности_ПриСозданииНаСервере(Форма) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

#КонецОбласти

#Область РасширенныйФункционал

// Дополняет функционал обработчика "ПриСозданииНаСервере" формы списка справочника "Регламентированные отчеты",
// здесь можно инициализировать переменные, расширять возможности интерфейса.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма списка справочника "Регламентированные отчеты".
//
// Пример реализации:
//
//  ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  
//  Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
//  	Если ТипЗнч(ЭлементСписка.Значение) = Тип("Строка") Тогда
//  		
//  		Форма.Ограничения.Добавить(ЭлементСписка.Представление);
//  		
//  	КонецЕсли;
//  КонецЦикла;
//
Процедура СправочникРегламентированныеОтчеты_ПриСозданииНаСервере(Форма) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура удаляет из исходного дерева отчеты, которые отключатся функциональной опцией "Расширенный функционал".
//
// Параметры:
//  ДеревоОтчетов - Дерево значений - Содержит исходное дерево используемых в конфигурации регламентированных отчетов.
//
// Пример реализации:
//  РасширенныйФункционалФО = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
//
//  Если НЕ РасширенныйФункционалФО Тогда // удаляем отчеты входящие в расширенный функционал
//  	
//  	ОтчетыВходяшиеВРасширенныйФункционал = Новый СписокЗначений;
//  	ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(ОтчетыВходяшиеВРасширенныйФункционал);
//  	
//  	Для Каждого ЭлементСписка Из ОтчетыВходяшиеВРасширенныйФункционал Цикл
//  		Если СтрНачинаетсяС(ЭлементСписка.Значение, "РегламентированныйОтчет") Тогда
//  			
//  			НаименованиеОтчета = ЭлементСписка.Представление;
//  			
//  			УдаляемыеОтчеты = ДеревоОтчетов.Строки.НайтиСтроки(
//  				Новый Структура("Наименование,ЭтоГруппа", НаименованиеОтчета, Ложь), Истина);
//  				
//  			Для Каждого ЭлементОтчет Из УдаляемыеОтчеты Цикл
//  				РодительЭлемента = ЭлементОтчет.Родитель;
//  				Если РодительЭлемента = Неопределено Тогда
//  					РодительЭлемента = ЭлементОтчет.Владелец();
//  				КонецЕсли;
//  				
//  				КоличествоЭлементовВДеревеОтчетов = КоличествоЭлементовВДеревеОтчетов - 1;
//  				
//  				РодительЭлемента.Строки.Удалить(ЭлементОтчет);
//  			КонецЦикла;
//  			
//  		КонецЕсли;
//  	КонецЦикла;
//  	
//  	ВсеГруппыОтчетов = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина), Истина);
//  	
//  	КоличествоГрупп = ВсеГруппыОтчетов.Количество();
//  	Для НомГруппы = 1 По КоличествоГрупп Цикл // просматриваем группы в обратном порядке
//  		
//  		ГруппаОтчетов = ВсеГруппыОтчетов[КоличествоГрупп - НомГруппы];
//  		Если ГруппаОтчетов.Строки.Количество() = 0 Тогда
//  			РодительГруппы = ГруппаОтчетов.Родитель;
//  			Если РодительГруппы = Неопределено Тогда
//  				РодительГруппы = ГруппаОтчетов.Владелец();
//  			КонецЕсли;
//  			
//  			РодительГруппы.Строки.Удалить(ГруппаОтчетов);
//  		КонецЕсли;
//  		
//  	КонецЦикла;
//  	
//  КонецЕсли;
//
Процедура УдалитьОтчетыВходяшиеВРасширенныйФункционал(ДеревоОтчетов, КоличествоЭлементовВДеревеОтчетов) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура возвращает в параметре список регламентированных отчетов и регламентированных уведомлений, входящих в расширенный функционал,
// который определяется функциональной опцией "Расширенный функционал".
//
// Параметры:
//  СписокОтчетовИУведомлений - СписокЗначений - Список регламентированных отчетов и регламентированных уведомлений:
//   Значение      - источник регламентированного отчета или вид уведомления,
//   Представление - синоним основной формы регламентированного отчета или синоним объекта метаданных регламентированного уведомления.
//
// Пример реализации:
//  Если ТипЗнч(СписокОтчетовИУведомлений) <> Тип("СписокЗначений") Тогда
//  	СписокОтчетовИУведомлений = Новый СписокЗначений;
//  КонецЕсли;
//  
//  Если ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
//  	Возврат; // возвращаем пустой список при включенной ФО
//  КонецЕсли;
//  	
//  СписокОтчетовИУведомлений.Добавить("РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО",
//  	"Информация об операциях с денежными средствами НФО");
//  
//  СписокОтчетовИУведомлений.Добавить(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК,
//  	"Уведомление о контролируемых иностранных компаниях");
//
Процедура ПолучитьСписокОтчетовИУведомленийВходяшихВРасширенныйФункционал(СписокОтчетовИУведомлений) Экспорт
	
	Если ТипЗнч(СписокОтчетовИУведомлений) <> Тип("СписокЗначений") Тогда
		СписокОтчетовИУведомлений = Новый СписокЗначений;
	КонецЕсли;
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

#КонецОбласти

#Область ФильтрацияОрганизацийВСтартовойФормеРегламентированногоОтчета

// Процедура возвращает текст запроса для получения организаций - юридических лиц.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся юридическими лицами.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхЮридическихЛиц(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Ссылка";
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций - индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций, являющихся индивидуальными предпринимателями.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
//				   |	И НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхИндивидуальныхПредпринимателей(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Ссылка";
	
КонецПроцедуры

// Процедура возвращает текст запроса для получения организаций -
// юридических лиц и индивидуальных предпринимателей.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса для получения организаций -
//                          юридических лиц и индивидуальных предпринимателей.
//
// Пример:
//	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//				   |	Организации.Ссылка,
//				   |	Организации.Наименование
//				   |ИЗ
//				   |	Справочник.Организации КАК Организации
//				   |ГДЕ
//				   |	НЕ Организации.ПометкаУдаления
//				   |
//				   |УПОРЯДОЧИТЬ ПО
//				   |	Наименование";
//
Процедура СформироватьТекстЗапросаДляПолученияДоступныхОрганизаций(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Наименование";
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеПредставленияУведомления

// Процедура используется для переопределения представления документа УведомлениеОСпецрежимахНалогообложения.
// В случае, если такое переопределение произошло, необходимо установить флаг СтандартнаяОбработка в Ложь.
// Параметры аналогичны событию ОбработкаПолученияПолейПредставления в модуле менеджера документа УведомлениеОСпецрежимахНалогообложения.
//
// Параметры:
//   Поля - Массив - содержит имена полей, которые нужны для формирования представления объекта или ссылки.
//   СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаПолученияПолейПредставления_УведомлениеОСпецрежимахНалогообложения(Поля, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Процедура используется для переопределения представления документа УведомлениеОСпецрежимахНалогообложения.
// В случае, если такое переопределение произошло, необходимо установить флаг СтандартнаяОбработка в Ложь.
// Параметры аналогичны событию ОбработкаПолученияПредставления в модуле менеджера документа УведомлениеОСпецрежимахНалогообложения.
//
// Параметры:
//   Данные - Структура - содержит значения полей, из которых формируется представление.
//   Представление - Строка - строка, в которую нужно поместить представление объекта или ссылки.
//   СтандартнаяОбработка - Булево - в данный параметр передается признак формирования стандартного представления объекта или ссылки.
//
Процедура ОбработкаПолученияПредставления_УведомлениеОСпецрежимахНалогообложения(Данные, Представление, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросВФНСНаПроверкуСведенийРаботников

// Процедура формирует сведения, необходимые для представления в налоговую инспекцию
// запроса работодателя на проверку ИНН, ФИО, СНИЛС работающих лиц в электронной форме.
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация - СправочникСсылка.Организации - организация, по работникам
//                     которой будут формироваться сведения для файла;
//     * ДатаПодписи - Дата - дата, на которую будут формироваться сведения для файла.
//     * ИНН - Строка - возвращается ИНН организации;
//     * КПП - Строка - возвращается КПП организации (пустая строка в случае ИП);
//     * КодНалоговогоОргана - Строка - возвращается четырехзначный код налогового органа;
//     * РазмерПачки - Число - допустимое количество физических лиц в одном файле
//                     (необязательный параметр, по умолчанию допустимое количество равно 200;
//                     в случае превышения, будет записано необходимое количество файлов);
//     * СведенияОРаботниках - ТаблицаЗначений - возвращается таблица с колонками:
//        ** Фамилия - Строка - фамилия физического лица;
//        ** Имя - Строка - имя физического лица;
//        ** Отчество - Строка - отчество физического лица;
//        ** ИНН - Строка - ИНН физического лица;
//        ** СтраховойНомерПФР - Строка - СНИЛС физического лица;
//        ** ДатаРождения - Дата - дата рождения физического лица;
//        ** ВидДокумента - Строка - двузначный код вида документа, удостоверяющего личность физического лица;
//        ** СерияДокумента - Строка - серия документа, удостоверяющего личность физического лица;
//        ** НомерДокумента - Строка - номер документа, удостоверяющего личность физического лица.
//
Процедура ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
КонецПроцедуры

#КонецОбласти

#Область Используется1СОтчетность

// Процедура возвращает признак использования отправки регламентированной отчетности.
//
// Параметры:
//  ПризнакИспользования - Булево - признак использования отправки регламентированной отчетности.
//                         Истина - отправка регл. отчетности выполняется в стандартном режиме
//                                  (при подключенном сервисе "1С-Отчетность");
//                         Ложь   - отправка регл. отчетности выполняется через DataTransfer БТС.
// Пример реализации:
//
//  ПризнакИспользования = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
//
//
Процедура ПолучитьПризнакИспользования1СОтчетности(ПризнакИспользования) Экспорт
	
	ПризнакИспользования = Ложь; // ДЕНЬГИ РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	
КонецПроцедуры

// Процедура возвращает признак отправки объекта РО без использования "1С-Отчетность", состояние (если отправлялся).
//
// Параметры:
//  ОбъектРеглОтчетности - Документ  - Документ регламентированного отчета.
//  ОбъектОтправлялся    - Булево    - признак использования отправки объекта регламентированной отчетности.
//                         Истина    - отправка РО выполнялась без использования "1С-Отчетность" (через DataTransfer БТС);
//                         Ложь      - отправка РО не выполнялась или выполнялась в стандартном режиме.
//  Состояние - Строка, Неопределено - Содержит имя значения перечисления состояния отправленного объекта РО.
// 
//  Пример реализации:
//
//  	ОбъектОтправлялся = Ложь;
//  	
//  	Запрос = Новый Запрос();
//  	Запрос.Параметры.Вставить("Документ", ОбъектРеглОтчетности);
//  	
//  	Запрос.Текст = "ВЫБРАТЬ
//  	|	ДокументыИнтеграцииСБанком.Состояние КАК Состояние
//  	|ИЗ
//  	|	РегистрСведений.ДокументыИнтеграцииСБанком КАК ДокументыИнтеграцииСБанком
//  	|ГДЕ
//  	|	ДокументыИнтеграцииСБанком.Документ = &Документ";
//  	
//  	Выборка = Запрос.Выполнить().Выбрать();
//  	Если Выборка.Следующий() Тогда
//  		
//  		ОбъектОтправлялся = Истина;
//  		
//  		Если ЗначениеЗаполнено(Выборка.Состояние) Тогда
//  			Состояние = ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.Состояние);
//  		Иначе
//  			Состояние = "";
//  		КонецЕсли;
//  		
//  	КонецЕсли;
//
Процедура ПолучитьПризнакОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(ОбъектРеглОтчетности, ОбъектОтправлялся, Состояние) Экспорт
	
	ОбъектОтправлялся = Ложь;
	Состояние = "";
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

// Процедура возвращает результат выполнения фонового задания для получения данных баннера состояния интеграции с банком.
//
//  Пример реализации:
//
//  	ПараметрыПроцедуры = Новый Структура;
//  	
//  	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
//  	ПараметрыВыполнения.ОжидатьЗавершение = 0;
//  	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка состояния интеграции с банками.'");
//  	
//  	Результат = ДлительныеОперации.ВыполнитьВФоне(
//  		"РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомВФоне",
//  		ПараметрыПроцедуры,
//  		ПараметрыВыполнения);
//
Процедура ПолучитьСостояниеИнтеграцииСБанкомВФоне(УникальныйИдентификатор, Результат) Экспорт
	
	// ДЕНЬГИ
	Результат = Неопределено;
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Показывает баннер по предварительно полученным данным баннера.
//
// Параметры:
//  Форма            - УправляемаяФорма - Форма "1С-Отчетность".
//                     Форма должна иметь группу ГруппаБаннерСостоянияОтправки с 2 элементами: БаннерСостоянияОтправкиТекст и ДекорацияБаннерСостоянияОтправкиКартинка.
//                     Также форма должна иметь реквизиты формы ИнтервалПроверкиСостоянияИнтеграцииСБанком (Число) и ХешДанныхБаннера (Число).
//  ДанныеБаннера    - Структура - Структура с данными баннера.
//                     См. РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников.
//  Пример реализации:
//
//  	ИнтеграцияСБанкамиФормы.ПоказатьБаннерСостоянияОтправки(ЭтотОбъект, ДанныеБаннера);
//
Процедура ПоказатьБаннерСостоянияОтправки(ЭтотОбъект, ДанныеБаннера) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура возвращает данные интеграции для баннера в регламентированных отчетах.
//
// Параметры:
//  СсылкаНаОтчет - ДокументСсылка.РегламентированныйОтчет - Ссылка на регламентированный отчет.
//  ДанныеБаннера - Структура - Текст баннера, картинка и т.д.
//                  См. РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников.
//  Пример реализации:
//
//  	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
//  		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаОтчет));
//  		
//  	Если СостоянияИнтеграцииДокументов <> Неопределено 
//  		И ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена() Тогда
//  		
//  		ДанныеБаннера = РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеБаннераИнтеграцииСБанкомДляПомощников(
//  			СостоянияИнтеграцииДокументов);
//  	КонецЕсли;
//
Процедура ПолучитьДанныеБаннераИнтеграцииСБанком(СсылкаНаОтчет, ДанныеБаннера) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет таблицу действующими льготами по кадастровым номерам замельных участков.
// Параметры:
//   ТаблицаЗемельныхУчастков - пустая таблица земельных участков с колонками:
//     * КадастровыйНомер - Строка - кадастровый номер земельного участка.
//     * ПроцентУменьшенияСуммыНалога - Число - значение льготы в виде уменьшения суммы налога.
//     * СниженнаяНалоговаяСтавка - Число - значение льготы в виде понижения налоговой ставки.
//   ОрганизацияВладелец - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//   ДатаСреза - Дата - дата, на момент которой определяются льготы.
//
// Пример:
//
//  Запрос = Новый Запрос;
//  Запрос.Текст = "ВЫБРАТЬ
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.КадастровыйНомер КАК КадастровыйНомер,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога КАК ПроцентУменьшенияСуммыНалога,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка
//                 |ИЗ
//                 |	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних";
//  Запрос.УстановитьПараметр("Организация", ОрганизацияВладелец);
//  Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
//
//  ТаблицаЗемельныхУчастков = Запрос.Выполнить().Выгрузить();
//  ТаблицаЗемельныхУчастков.Индексы.Добавить("КадастровыйНомер");
//
// Пример:
//
//  Запрос = Новый Запрос;
//  Запрос.Текст = "ВЫБРАТЬ
//                 |	СведенияКадастровогоУчетаСрезПоследних.КадастровыйНомер КАК КадастровыйНомер,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.ПроцентУменьшенияСуммыНалога КАК ПроцентУменьшенияСуммыНалога,
//                 |	РегистрацияЗемельныхУчастковСрезПоследних.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка
//                 |ИЗ
//                 |	РегистрСведений.СведенияКадастровогоУчета.СрезПоследних(&ДатаСреза, Учреждение = &Организация) КАК СведенияКадастровогоУчетаСрезПоследних
//                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК РегистрацияЗемельныхУчастковСрезПоследних
//                 |		ПО СведенияКадастровогоУчетаСрезПоследних.ОсновноеСредство = РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство
//                 |			И СведенияКадастровогоУчетаСрезПоследних.Учреждение = РегистрацияЗемельныхУчастковСрезПоследних.Организация";
//  Запрос.УстановитьПараметр("Организация", ОрганизацияВладелец);
//  Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
//
//  ТаблицаЗемельныхУчастков = Запрос.Выполнить().Выгрузить();
//  ТаблицаЗемельныхУчастков.Индексы.Добавить("КадастровыйНомер");
//
Процедура ПолучитьЛьготыПоКадастровымНомерам(ТаблицаЗемельныхУчастков, ОрганизацияВладелец, ДатаСреза) Экспорт
	              	
КонецПроцедуры

// Заполняет контейнер данными бухгалтерской отчетности и помещает его во временное хранилище.
Процедура ПолучитьПоказателиАвтозаполненияБухгалтерскойОтчетности(ПараметрыОтчета, Контейнер) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Процедура возращает код тарифа или размер тарифа страховых взносов в процентах по коду категории и отчетному году.
//
// Параметры:
//  КодКатегории - Строка - код из приложения № 8 Приказ ФНС России от 10.10.2016 N ММВ-7-11/551@
//                          "Об утверждении формы расчета по страховым взносам, порядка его заполнения,
//                          а также формата представления расчета по страховым взносам в электронной форме".
//  ОтчетныйГод - Число - четырехзначное число, соответствующее отчетному году.
//  КодИлиРазмерТарифа  - Строка, Число, Неопределено - код тарифа("Строка"), размер тарифа ("Число"),
//                                      "Неопределено" - в случае, если соответствие коду категории не найдено.
//  ВернутьРазмерТарифа - Булево - если "Истина", то возвращается размер тарифа в процентах, иначе - код тарифа.
//
// Пример реализации:
//  ОтчетныйПериод = Дата(ОтчетныйГод, 1, 1);
//  КатегорияЗастрахованногоЛица = Перечисления.КатегорииЗастрахованныхЛицДляПФР[КодКатегории];
//  
//  Если ВернутьРазмерТарифа Тогда
//  	
//  	ЗначенияТарифов = 
//  		ПерсонифицированныйУчет.ТарифыПоКатегориям(ОтчетныйПериод).Получить(КатегорияЗастрахованногоЛица);
//  	Если ЗначенияТарифов = Неопределено Тогда
//  		КодИлиРазмерТарифа = Неопределено;
//  	Иначе
//  		КодИлиРазмерТарифа = ЗначенияТарифов.ПФРСтраховая;
//  	КонецЕсли;
//  	
//  Иначе
//  	
//  	Запрос = Новый Запрос;
//  	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//  	Запрос.УстановитьПараметр("ОтчетныйГод", ОтчетныйГод);
//  	Запрос.УстановитьПараметр("КатегорияЗастрахованногоЛица", КатегорияЗастрахованногоЛица);
//  	
//  	ПерсонифицированныйУчет.СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(
//  		Запрос.МенеджерВременныхТаблиц, ОтчетныйГод);
//  	УчетСтраховыхВзносов.СоздатьВТКодыВидовТарифаСтраховыхВзносов(
//  		ОтчетныйПериод, ОтчетныйПериод, Запрос.МенеджерВременныхТаблиц);
//  	
//  	ТекстЗапроса =
//  		"ВЫБРАТЬ
//  		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
//  		|	МИНИМУМ(СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов) КАК ВидТарифаСтраховыхВзносов
//  		|ПОМЕСТИТЬ ВТТарифыПоКатегориям
//  		|ИЗ
//  		|	ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
//  		|ГДЕ
//  		|	&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо
//  		|
//  		|СГРУППИРОВАТЬ ПО
//  		|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
//  		|;
//  		|
//  		|////////////////////////////////////////////////////////////////////////////////
//  		|ВЫБРАТЬ
//  		|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
//  		|	КодыВидовТарифаСтраховыхВзносов.ИмяПоля КАК КодТарифа
//  		|ИЗ
//  		|	ВТТарифыПоКатегориям КАК СоответствиеТарифаКатегории
//  		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
//  		|		ПО СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов =
//  		|			КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов
//  		|			И (&ОтчетныйГод = КодыВидовТарифаСтраховыхВзносов.РасчетныйПериод)
//  		|			И (&КатегорияЗастрахованногоЛица = СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц) ";
//  	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяПоля", ?(ОтчетныйГод < 2017, "КодПФР", "КодФНС"));
//  	
//  	КодИлиРазмерТарифа = Неопределено;
//  	
//  	Выборка = Запрос.Выполнить().Выбрать();
//  	Пока Выборка.Следующий() Цикл
//  		Если ЗначениеЗаполнено(Выборка.КатегорияЗастрахованныхЛиц) Тогда
//  			КодИлиРазмерТарифа = Выборка.КодТарифа;
//  			Прервать;
//  		КонецЕсли;
//  	КонецЦикла;
//  	
//  КонецЕсли;
//
Процедура ПолучитьКодИлиРазмерТарифаПоКодуКатегории(КодКатегории,
													ОтчетныйГод,
													КодИлиРазмерТарифа,
													ВернутьРазмерТарифа) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

// Определяет признак учета отложенного налога балансовым методом
// по ПБУ 18/02 с изменениями по приказу Минфина от 20.11.2018 N 236н.
//
// Параметры:
//   УчетБалансовымМетодом - Булево - переменная, в которую будет помещен результат определения.
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   Период      - Дата - дата, на которую нужно получить признак.
//
// Пример реализации:
//   СпособУчетаОтложенногоНалога = НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(Период, Организация);
//   УчетБалансовымМетодом = (СпособУчетаОтложенногоНалога = Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод);
//
Процедура ОпределитьУчетОтложенногоНалогаБалансовымМетодом(УчетБалансовымМетодом, Организация, Период) Экспорт
	
	// ДЕНЬГИ
	Возврат;
	// Конец ДЕНЬГИ	
	
КонецПроцедуры

#КонецОбласти

#Область ФильтрацияИзбранного

// Заполняется таблица избранного по правилам, определяемым в самом потребителе.
//
// Параметры:
// ПараметрыОтбора - структура, содержащая значения:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника Организации.
//   РанееСозданныеОтчеты - пустая таблица избранного с колонками:
//     * Наименование - Строка - наименование отчета.
//     * ПолноеИмя    - Строка - имя объекта отчета.
//     * Ссылка       - ДокументСсылка.РегламентированныйОтчет или иной документ, который приравнен к отчетам.
//     * ЭтоГруппа    - Булево.
//
Процедура ЗаполнитьИзбранноеДоступнымиОтчетами(ПараметрыОтбора) Экспорт
	
	// ДЕНЬГИ
	// удален вызов другой подсистемы
	Возврат;
	// Конец ДЕНЬГИ
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ
//

// Функция возвращает сведения об организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
// Пример:
//	ОргСведения = Новый Структура;
//  Для Каждого Показатель Из СписокПоказателей Цикл
//  	ИмяПоказателя = Показатель.Представление;
//      Если Имяпоказателя = "КодНО" Тогда
//      	Значение = Организация.КодНалоговогоОргана;
//      ИначеЕсли ИмяПоказателя = "ОГРН" Тогда
//      	Значение = Организация.ОГРН;
//      Иначе
//      	Значение = "";
//      КонецЕсли;
//      ОргСведения.Вставить(ИмяПоказателя, Значение);
//  КонецЦикла;
//  Возврат ОргСведения;
//
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	// ДЕНЬГИ
	
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл

		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Значение = "";

		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;
	
	// Конец ДЕНЬГИ

КонецФункции

// Функция возвращает сведения о физлице.
//
// Параметры:
//  ФизЛицо           - ссылка на элемент справочника "ФизическиеЛица";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  МассивПоказателей - массив показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из массива показателей и возвращаемыми значениями.
//
// Пример:
//	Если МассивПоказателей = Неопределено Тогда
//		МассивПоказателей = Новый Массив;
//		МассивПоказателей.Добавить("ИНН");
//		МассивПоказателей.Добавить("Фамилия");
//		МассивПоказателей.Добавить("Имя");
//		МассивПоказателей.Добавить("Отчество");
//	КонецЕсли;
//	ФЛСведения = Новый Структура;
//	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
//		Если ИмяПоказателя = "ИНН" Тогда
//			Значение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ФизЛицо, "ИНН");
//		ИначеЕсли ИмяПоказателя = "Фамилия"
//			  ИЛИ ИмяПоказателя = "Имя"
//			  ИЛИ ИмяПоказателя = "Отчество" Тогда
//			ТаблицаСрезПоследних = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо", ФизЛицо));
//			Если ТаблицаСрезПоследних.Количество() > 0 Тогда
//				Значение = ТаблицаСрезПоследних[0][ИмяПоказателя];
//			Иначе
//				Значение = "";
//			КонецЕсли;
//		Иначе
//			Значение = "";
//		КонецЕсли;
//		ФЛСведения.Вставить(ИмяПоказателя, Значение);
//	КонецЦикла;
//	Возврат ФЛСведения;
//
Функция ПолучитьСведенияОФизЛице(Знач ФизЛицо, Знач МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОМАТИЧЕСКОГО ЗАПОЛНЕНИЯ
//

// Функция возвращает структуру показателей.
// Ключ структуры – идентификатор показателя.
// Значение структуры – массив из двух элементов:
// 	- признак автозаполнения показателя;
//	- признак расшифровки показателя.
//
// Параметры:
// 	ИДОтчета         - идентификатор отчета;
//	ИДРедакцииОтчета - идентификатор редакции формы отчета;
//  ПараметрыОтчета  - структура параметров отчета.
//
// Пример:
//	ПоказателиОтчета = Новый Структура;
//	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда
//			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100010003", Истина, Истина);
//		КонецЕсли;
//	КонецЕсли;
//	Возврат ПоказателиОтчета;
//
Функция ПолучитьСведенияОПоказателяхОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	// ДЕНЬГИ
	ПоказателиОтчета = Новый Структура;
	
	Возврат ПоказателиОтчета;
	// Конец ДЕНЬГИ
	
КонецФункции

// Функция возвращает признак реализации настройки автозаполняемых показателей регл. отчета.
//
// Параметры:
// 	ИДОтчета         - идентификатор отчета;
//	ИДРедакцииОтчета - идентификатор редакции формы отчета;
//
// Пример:
//  Если ИДОтчета = "РегламентированныйОтчетСтатистикаФормаП1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2010Кв1" Тогда	
//			Возврат Истина;
//		КонецЕсли;
//	КонецЕсли;
//	Возврат Ложь;
//
Функция РеализованаНастройкаАвтозаполняемыхПоказателейРеглОтчета(ИДОтчета, ИДРедакцииОтчета) Экспорт
	    	
КонецФункции

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Пример:
//	Если ИДОтчета = "РегламентированныйОтчетРСВ1" Тогда
//		Если ИДРедакцииОтчета = "ФормаОтчета2011Кв1" Тогда	
//			Контейнер.Раздел30.П000300030103 = 100;
//			Контейнер.Раздел41.Добавить();
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ЗаполнитьОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
КонецПроцедуры

// Процедура заполняет данные для выгрузки раздела 2.5 формы РСВ-1
//
// Параметры:
//  СсылкаНаСохрРеглОтчет – ссылка на регламентированный отчет;
//  ДанныеРаздела25       – структура с ключами "Таблица_2_5_1" и "Таблица_2_5_2":
//    "Таблица_2_5_1"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.1 по колонкам 2 - 5:
//      "П000251000102"   - Число (15, 2);
//      "П000251000103"   - Число (15, 2);
//      "П000251000104"   - Число ( 3, 0);
//      "П000251000105"   - Строка  (100);
//    "Таблица_2_5_2"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.2 по колонкам 2 - 8:
//      "П000252000102"   - Число ( 1, 0);
//      "П000252000103"   - Число ( 4, 0);
//      "П000252000104"   - Число (15, 2);
//      "П000252000105"   - Число (15, 2);
//      "П000252000106"   - Число (15, 2);
//      "П000252000107"   - Число ( 3, 0);
//      "П000252000108"   - Строка  (100).
//
Процедура ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25) Экспорт
	
КонецПроцедуры

// Функция возвращает список используемых в конфигурации регламентированных отчетов.
//
// Пример:
// 	СписокРегламентированныхОтчетов = Новый СписокЗначений;
//	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетНДС");
//	Возврат СписокРегламентированныхОтчетов;
//
Функция ПолучитьСписокРегламентированныхОтчетов() Экспорт
	
	// ДЕНЬГИ
	СписокРегламентированныхОтчетов = Новый СписокЗначений;
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет3НДФЛ");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчет4НДФЛ");
	
	Возврат СписокРегламентированныхОтчетов;
	// Конец ДЕНЬГИ
	
КонецФункции

// Функция возвращает признак - является ли организация физ. или юр. лицом.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - организация является юр. лицом;
//  Ложь   - организация является физ. лицом.
//
// Пример:
//  Если Организация.ИностраннаяОрганизация Тогда
//		Возврат Истина;
//	Иначе
//		Возврат (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
//	КонецЕсли;
//
Функция ЭтоЮридическоеЛицо(Организация) Экспорт
	// ДЕНЬГИ
	Возврат Ложь;
	// Конец ДЕНЬГИ
КонецФункции

// Функция возвращает систему налогообложения организации.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить систему налогообложения.
//
// Возвращаемое значение:
//  Общая      - общая система налогообложения.
//  Упрощенная - упрощенная система налогообложения.
//
// Пример:
//  УчетнаяПолитикаОрганизации = УчетнаяПолитика.СистемаНалогообложения(Организация, Период);
//	Если УчетнаяПолитикаОрганизации = Перечисления.СистемыНалогообложения.Общая Тогда
//		Возврат "Общая";
//	Иначе
//		Возврат "Упрощенная";
//	КонецЕсли;
//
Функция СистемаНалогообложения(Организация, Период) Экспорт
	
КонецФункции

// Функция возвращает признак применения ПБУ 18/02.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//  Период      - дата, на которую нужно получить признак.
//
// Возвращаемое значение:
//  Истина - ПБУ 18/02 применяется.
//  Ложь   - ПБУ 18/02 не применяется.
//
// Пример:
//  Возврат УчетнаяПолитика.ПоддержкаПБУ18(Организация, Период);
//
Функция ПрименяетсяПБУ18(Организация, Период) Экспорт
	
КонецФункции 

// Функция возвращает признак - является ли организация иностранной.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - организация является иностранной;
//  Ложь   - организация не является иностранной.
//
// Пример:
//  Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
//		Возврат Организация.ИностраннаяОрганизация;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//
Функция ЭтоИностраннаяОрганизация(Организация) Экспорт
	// ДЕНЬГИ
	Если Организация.Метаданные().Реквизиты.Найти("ИностраннаяОрганизация") <> Неопределено Тогда
		Возврат Организация.ИностраннаяОрганизация;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	// Конец ДЕНЬГИ
КонецФункции

// Функция возвращает сведения о сотрудниках (застрахованных лицах) организации по состоянию на указанную дату.
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которому требуется получить сведения.
//  ДатаЗапроса - дата, по состоянию на которую требуется получить сведения
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками "Фамилия", "Имя", "Отчество" и "СтраховойНомерПФР", в которых
//  содержится информация о фамилии, имени, отчестве и страховом номере (СНИЛС) каждого
//  из сотрудников (застрахованных лиц) организации соответственно.
//
// Пример:
//
//  СтруктураПараметров = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизаций();
//  СтруктураПараметров.Организация = Организация;
//  СтруктураПараметров.ОкончаниеПериода = ДатаЗапроса;
//
//  Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, СтруктураПараметров);
//
//  Возврат КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники.ВыгрузитьКолонку("Сотрудник"), "Фамилия,Имя,Отчество,СтраховойНомерПФР", ДатаЗапроса);
//
Функция ПолучитьСписокЗастрахованныхЛицОрганизации(Организация, ДатаЗапроса) Экспорт
	
КонецФункции

// Функция возвращает признак - является ли индивидуальный предприниматель работодателем для наемных сотрудников.
//
// Параметры:
//  Организация - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//  Истина - ИП является работодателем;
//  Ложь   - ИП не является работодателем.
//
// Пример:
//   Возврат НЕ ЭтоЮридическоеЛицо(Организация)
//	      И (ЗначениеЗаполнено(Организация.РегистрационныйНомерПФР)
//			ИЛИ ЗначениеЗаполнено(Организация.КодОрганаПФР)
//			ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаПФР)
//			ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерТФОМС)
//			ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерФСС)
//			ИЛИ ЗначениеЗаполнено(Организация.КодПодчиненностиФСС)
//			ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаФСС));
//
Функция ИПИспользуетТрудНаемныхРаботников(Организация) Экспорт
	// ДЕНЬГИ
	Возврат НЕ ЭтоЮридическоеЛицо(Организация)
	      И (ЗначениеЗаполнено(Организация.РегистрационныйНомерПФР)
			ИЛИ ЗначениеЗаполнено(Организация.КодОрганаПФР)
			ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаПФР)
			ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерТФОМС)
			ИЛИ ЗначениеЗаполнено(Организация.РегистрационныйНомерФСС)
			ИЛИ ЗначениеЗаполнено(Организация.КодПодчиненностиФСС)
			ИЛИ ЗначениеЗаполнено(Организация.НаименованиеТерриториальногоОрганаФСС));
	// Конец ДЕНЬГИ
КонецФункции

// Функция возвращает значение Раздела 3 Строки 130 Книги учета доходов и расходов.
// Параметры:
//   Организация - Организация по которой построен рег.отчет.
//   ДатаОкончанияПериода - Дата окончания периода отчета (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета).
Функция СуммаФактическогоУменьшенияНалоговойБазы(Организация, ДатаОкончанияПериода) Экспорт 
	
КонецФункции
