////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СхемаКомпоновки = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, ЭтаФорма.УникальныйИдентификатор);
	НастройкиПоУмолчанию = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	Отчет.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	Настройка = НастройкиПоУмолчанию.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодСравнения1"));
	Если Настройка <> Неопределено Тогда
		Период1 = Настройка.Значение;
	КонецЕсли; 
	Настройка = НастройкиПоУмолчанию.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодСравнения2"));
	Если Настройка <> Неопределено Тогда
		Период2 = Настройка.Значение;
	КонецЕсли; 
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	Если НЕ ЗначениеЗаполнено(ВалютаОтчета) Тогда
		ВалютаОтчета = ВалютаУчета;
	КонецЕсли;
	
	Параметры.Свойство("РежимРасшифровки", РежимРасшифровки);
	Если Параметры.Свойство("ПредставлениеВарианта") И Параметры.ПредставлениеВарианта = "Расшифровка" Тогда
		РежимРасшифровки = Истина;
	КонецЕсли; 
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Количество() > 0 Тогда
		ЗаполнитьОтборПоПараметрамФормы(Параметры.Отбор);
	Иначе
		// Настройки по умолчанию 
		// (Если это не первое открытие отчета, далее будут перезаписаны сохраненными значениями)
		ВыводитьДиаграмму = Истина;
		НомерУровняГруппировкиСтрок = 0;
		
		ПроверитьОтборКомпоновщика();
	КонецЕсли; 
	
	Элементы.ГруппаПанельНастроек.Видимость = Параметры.СформироватьПриОткрытии <> Истина;
	Элементы.ПанельНастроек.Пометка = Элементы.ГруппаПанельНастроек.Видимость;
	
	Если Параметры.СформироватьПриОткрытии = Истина Тогда
		СтандартнаяОбработка = Ложь;
		СформироватьОтчетНаСервере();
	КонецЕсли; 
	
	// Настройка внешнего вида
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПанельНастроек.Видимость = Элементы.ПанельНастроек.Пометка;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборПоПараметрамФормы(СтруктураОтбора)
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ЭлементыОтбора = Настройки.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	
	ЗначениеОтбора = Неопределено;
	Если СтруктураОтбора.Свойство("Период1", ЗначениеОтбора) Тогда
		Период1 = ЗначениеОтбора;
	КонецЕсли;
	
	ЗначениеОтбора = Неопределено;
	Если СтруктураОтбора.Свойство("Период2", ЗначениеОтбора) Тогда
		Период2 = ЗначениеОтбора;
	КонецЕсли;
	
	ЗначениеОтбора = Неопределено;
	Если СтруктураОтбора.Свойство("ВалютаОтчета", ЗначениеОтбора) Тогда
		ВалютаОтчета = ЗначениеОтбора;
	КонецЕсли;
	
	ЗначениеОтбора = Неопределено;
	Если СтруктураОтбора.Свойство("ВыводитьДиаграмму", ЗначениеОтбора) Тогда
		ВыводитьДиаграмму = ЗначениеОтбора;
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	ПроверитьОтборКомпоновщика();

КонецПроцедуры

&НаСервере
Процедура ПроверитьОтборКомпоновщика()

	// Очистка пользовательских настроек
	ТекущиеНастройки = Отчет.КомпоновщикНастроек.Настройки;
	ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	ТекущиеНастройки.Выбор.ИдентификаторПользовательскойНастройки              = "";
	ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ЭлементыОтбора = Настройки.Отбор.Элементы;
	
	// Установка элементов отбора по умолчанию 
	// ...

	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");

КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере()

	Результат.Очистить();
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФОРМИРОВАНИЕОТЧЕТА");
	
	// Проверка периода
	ТекущаяДата = ТекущаяДатаСеанса();
	Если НЕ ЗначениеЗаполнено(Период1.ДатаНачала) Тогда
		Период1.ДатаНачала = НачалоГода(ДобавитьМесяц(ТекущаяДата, -12));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период1.ДатаОкончания) Тогда
		Период1.ДатаОкончания = КонецГода(ДобавитьМесяц(ТекущаяДата, -12));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период2.ДатаНачала) Тогда
		Период2.ДатаНачала = НачалоГода(ТекущаяДата);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период2.ДатаОкончания) Тогда
		Период2.ДатаОкончания = КонецГода(ТекущаяДата);
	КонецЕсли;
	
	// Очистка пользовательских настроек
	ТекущиеНастройки = Отчет.КомпоновщикНастроек.Настройки;
	ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	ТекущиеНастройки.Выбор.ИдентификаторПользовательскойНастройки              = "";
	ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	// Изменение прочих настроек
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСравнения1",    Период1);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодСравнения2",    Период2);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВалютаУчета",     ВалютаУчета);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВалютаОтчета",    ВалютаОтчета);
	
	// Формирование заголовка
	ТекстЗаголовка = НСтр("ru = 'Сравнение доходов/расходов за два периода'");
	ТекстЗаголовка = ТекстЗаголовка + " (" + ВалютаОтчета + ")";
	
	Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок", ТекстЗаголовка);
	
	Для каждого ЭлементСтруктуры Из Настройки.Структура Цикл
		Если ЭлементСтруктуры.Имя = "ДиаграммаЗа2Периода" Тогда
			ЭлементСтруктуры.Использование = ВыводитьДиаграмму;
		КонецЕсли;
	КонецЦикла;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Фоновый);
	
	Если ВыводитьДиаграмму Тогда
		Диаграмма = Результат.Рисунки[0].Объект;
		Диаграмма.ФорматЗначенийВПодписях         = "ЧДЦ=0"; 
		Диаграмма.ФорматПроцентовВПодписях        = "ЧЦ=4; ЧДЦ=1"; 
	КонецЕсли;
	
	Если НомерУровняГруппировкиСтрок > -1 Тогда
		ТекУровень = Результат.КоличествоУровнейГруппировокСтрок() - 1;
		Пока ТекУровень > НомерУровняГруппировкиСтрок Цикл
			Результат.ПоказатьУровеньГруппировокСтрок(ТекУровень);
			ТекУровень = ТекУровень - 1;
		КонецЦикла;
		Результат.ПоказатьУровеньГруппировокСтрок(НомерУровняГруппировкиСтрок);
	КонецЕсли; 
	
	Если СкрыватьНастройкиПриФормировании И Элементы.ГруппаПанельНастроек.Видимость Тогда
		Элементы.ГруппаПанельНастроек.Видимость = Ложь;
		Элементы.ПанельНастроек.Пометка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьСтруктуруРасшифровки(Расшифровка)

	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровкиОбъект.Элементы[Расшифровка];
	
	СтруктураРасшифровки = Новый Структура("ПоляОтбора, Действие", Новый Структура, "");
	
	Если ЭлементРасшифровки.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
		СтруктураРасшифровки.ПоляОтбора.Вставить(ЭлементРасшифровки.ПолучитьПоля()[0].Поле, ЭлементРасшифровки.ПолучитьПоля()[0].Значение);
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(СтруктураРасшифровки.ПоляОтбора[ЭлементРасшифровки.ПолучитьПоля()[0].Поле]) Тогда
			СтруктураРасшифровки.Действие = "ОткрытьЗначение";
		Иначе
			СтруктураРасшифровки.Действие = "Расшифровать";
			ЗаполнитьСтруктуруПолей(СтруктураРасшифровки.ПоляОтбора, ЭлементРасшифровки, 0);
		КонецЕсли;
	Иначе
		СтруктураРасшифровки.Действие = "Расшифровать";
		ЗаполнитьСтруктуруПолей(СтруктураРасшифровки.ПоляОтбора, ЭлементРасшифровки, 0);
	КонецЕсли; 
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруПолей(СтруктураПолей, ЭлементРасшифровки, Уровень)

	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ПолеЭлемента = ЭлементРасшифровки.ПолучитьПоля();
		Для Каждого ПолеЭлемента Из ПолеЭлемента Цикл
			Если НЕ СтруктураПолей.Свойство(ПолеЭлемента.Поле) Тогда
				СтруктураПолей.Вставить(ПолеЭлемента.Поле, ПолеЭлемента.Значение);
			КонецЕсли; 
		КонецЦикла; 
		МассивРодительскихЭлементов = ЭлементРасшифровки.ПолучитьРодителей();
		Для Каждого РодительскийЭлемент Из МассивРодительскихЭлементов Цикл
			ЗаполнитьСтруктуруПолей(СтруктураПолей, РодительскийЭлемент, Уровень + 1);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		МассивРодительскихЭлементов = ЭлементРасшифровки.ПолучитьРодителей();
		Для Каждого РодительскийЭлемент Из МассивРодительскихЭлементов Цикл
			ЗаполнитьСтруктуруПолей(СтруктураПолей, РодительскийЭлемент, Уровень + 1);
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаСформировать(Команда)
	
	СформироватьОтчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНастроек(Команда)
	
	Элементы.ПанельНастроек.Пометка = НЕ Элементы.ПанельНастроек.Пометка;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Период1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Период, ЗакрыватьПриВыборе, ОповеститьОВыборе", Период1, Истина, Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Период1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Период1 = ВыбранноеЗначение;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Период2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Период, ЗакрыватьПриВыборе, ОповеститьОВыборе", Период2, Истина, Истина);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Период2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Период2 = ВыбранноеЗначение;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <НАИМЕНОВАНИЕ>


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Результат.ВысотаТаблицы > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	Иначе
		ПроверитьОтборКомпоновщика();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ВариантМодифицирован                    = Ложь;
	ПользовательскиеНастройкиМодифицированы = НЕ РежимРасшифровки;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(Настройки)
	
	Настройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Если НЕ РежимРасшифровки Тогда
		
		ТекущиеНастройки = Отчет.КомпоновщикНастроек.Настройки;
		
		// Очистка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
		
		// Установка пользовательских настроек
		ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		// Дополнительные настройки отчета
		ПрочиеНастройкиОтчета = Новый Структура("ВалютаОтчета,ВыводитьДиаграмму,НаименованиеТекущегоВарианта,Период1,Период2,НомерУровняГруппировкиСтрок,СкрыватьНастройкиПриФормировании");
		ЗаполнитьЗначенияСвойств(ПрочиеНастройкиОтчета, ЭтаФорма);
		ПрочиеНастройкиОтчета.Вставить("ПометкаПанелиНастроек", Элементы.ПанельНастроек.Пометка);
		
		// Сохраняем дополниткльные настройки
		Настройки.ДополнительныеСвойства.Вставить("ПрочиеНастройкиОтчета", Новый ХранилищеЗначения(ПрочиеНастройкиОтчета));
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если РежимРасшифровки Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеНастройки = Отчет.КомпоновщикНастроек.Настройки;

	// Установка пользовательских настроек
	ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
	ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
	ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";

	// Перенос пользовательских настроек в основные
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.ПолучитьНастройки());

	// Очистка пользовательских настроек
	ТекущиеНастройки = Отчет.КомпоновщикНастроек.Настройки;
	ТекущиеНастройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	ТекущиеНастройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	ТекущиеНастройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	// Проверяем дополнительные настройки:
	Если Настройки.ДополнительныеСвойства.Свойство("ПрочиеНастройкиОтчета") Тогда
		
		ПрочиеНастройкиОтчета = Настройки.ДополнительныеСвойства.ПрочиеНастройкиОтчета.Получить();
		Если ПрочиеНастройкиОтчета <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПрочиеНастройкиОтчета);
			ПометкаПанелиНастроек = Неопределено;
			Если ПрочиеНастройкиОтчета.Свойство("ПометкаПанелиНастроек", ПометкаПанелиНастроек) Тогда
				Элементы.ПанельНастроек.Пометка = ПометкаПанелиНастроек;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Проверяем корректность восстановленных настроек:
	ТекущаяДата = ТекущаяДатаСеанса();
	Если НЕ ЗначениеЗаполнено(Период1.ДатаНачала) Тогда
		Период1.ДатаНачала = НачалоГода(ДобавитьМесяц(ТекущаяДата, -12));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период1.ДатаОкончания) Тогда
		Период1.ДатаОкончания = КонецГода(ДобавитьМесяц(ТекущаяДата, -12));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период2.ДатаНачала) Тогда
		Период2.ДатаНачала = НачалоГода(ТекущаяДата);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Период2.ДатаОкончания) Тогда
		Период2.ДатаОкончания = КонецГода(ТекущаяДата);
	КонецЕсли;
	
	ПроверитьОтборКомпоновщика();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтруктураРасшифровки = ПолучитьСтруктуруРасшифровки(Расшифровка);
	Если СтруктураРасшифровки.Действие = "ОткрытьЗначение" Тогда
		Для Каждого ПолеОтбора Из СтруктураРасшифровки.ПоляОтбора Цикл
			ПоказатьЗначение(, ПолеОтбора.Значение);
		КонецЦикла; 
	Иначе
		//СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

