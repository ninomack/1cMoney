////////////////////////////////////////////////////////////////////////////////
//	Помощник заполнения декларации за 2019 год
//	Принцип работы: на соновании документов о доходах и расходах заполняет листы декларации
//	Сохраняет данные помощника вместе с данными самого отчета в документах БРО РегламентированныйОтчет
//	Если в данных отчета документа РегламентированныйОтчет нет данных помощника, значит бланки декларации заполняются вручную
//  
//Параметры формы:  
//	мСохраненныйДок - ДокументСсылка.РегламентированныйОтчет - Документ, в котором сохранены данные отчета 
//	мКопируемыйДок  - ДокументСсылка.РегламентированныйОтчет - Документ, из которого нужно скопировать\обработать данные помощника
////////////////////////////////////////////////////////////////////////////////


#Область ОписаниеПеременных
	
&НаСервере 
Перем ЭтотОтчет;


#КонецОбласти 


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Вспомогательные реквизиты
	ЗаполнитьДопРеквизитыФормы();
	
	// Заполнение значений по умолчанию
	Если Параметры.Свойство("мДатаКонцаПериодаОтчета") И ЗначениеЗаполнено(Параметры.мДатаКонцаПериодаОтчета) Тогда
		ГодОтчета = Год(Параметры.мДатаКонцаПериодаОтчета);
	Иначе
		ГодОтчета = Отчеты.РегламентированныйОтчет3НДФЛ.ГодДекларацииПоУмолчанию();
	КонецЕсли;
	
	// Чтение данных помощника:
	ЭтоКопия = ЗначениеЗаполнено(ДопРеквизитыФормы.мСкопированаФорма) И ЗначениеЗаполнено(ДопРеквизитыФормы.мСохраненныйДок);
	Если ЭтоКопия Тогда
		ОбъектОтчета = ДопРеквизитыФормы.мСохраненныйДок.Скопировать();
		ДопРеквизитыФормы.мСохраненныйДок = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ДопРеквизитыФормы.мСохраненныйДок) Тогда 
		ОбъектОтчета = ДопРеквизитыФормы.мСохраненныйДок.ПолучитьОбъект();
	Иначе
		ОбъектОтчета = Документы.РегламентированныйОтчет.СоздатьДокумент();
	КонецЕсли;
	
	ЗаполнитьФормуИзОтчета(ОбъектОтчета, ЭтоКопия);
	
	Элементы.ГруппаСписокСообщений.Видимость = Ложь;
	ПерейтиПоНавигации(ЭтотОбъект, 1);
	
	ОбновитьИтогиДокументов(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		#Область ПоказатьВопрос
		ТекстВопроса = НСтр("ru='Записать изменения перед закрытием помощника заполнения?'");
		
		ДополнительныеПараметры = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Записать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    НСтр("ru='Закрыть без записи'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить закрытие'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
		#КонецОбласти
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы


#Область НавигацияПоСтраницам
	
&НаКлиенте
Процедура Раздел1КнопкаНажатие(Элемент)
	ПерейтиПоНавигации(ЭтотОбъект, 1);
КонецПроцедуры

&НаКлиенте
Процедура Раздел2КнопкаНажатие(Элемент)
	ПерейтиПоНавигации(ЭтотОбъект, 2);
КонецПроцедуры

&НаКлиенте
Процедура Раздел3КнопкаНажатие(Элемент)
	
	Если Модифицированность Или Не ПроверкаВыполнена Тогда
		ВыполнитьПроверкуДекларации();
	КонецЕсли;
	ПерейтиПоНавигации(ЭтотОбъект, 3);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Раздел1НадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигации(ЭтотОбъект, 1);
КонецПроцедуры

&НаКлиенте
Процедура Раздел2НадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигации(ЭтотОбъект, 2);
КонецПроцедуры

&НаКлиенте
Процедура Раздел3НадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Модифицированность Или Не ПроверкаВыполнена Тогда
		ВыполнитьПроверкуДекларации();
	КонецЕсли;
	ПерейтиПоНавигации(ЭтотОбъект, 3);
КонецПроцедуры

&НаКлиенте
Процедура СписокСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаСообщения = СписокСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигации(ЭтотОбъект, СтрокаСообщения.НомерРаздела);
	
	Если СтрокаСообщения.НомерРаздела = 1 Тогда
		
		ТекущийЭлемент = Элементы[СтрокаСообщения.СтруктураОшибки.ИмяРеквизита];
		
	Иначе
		
		ТекущийЭлемент = Элементы.СписокДокументов;
		СтрокаСпискаДокументов = СписокДокументов[СтрокаСообщения.СтруктураОшибки.СтрокаДокумента];
		Элементы.СписокДокументов.ТекущаяСтрока = СтрокаСпискаДокументов;
		ОткрытьФормуДокументаДоходаИлиВычета(, СтрокаСпискаДокументов.ПолучитьИдентификатор(), СтрокаСообщения.СтруктураОшибки.СписокОшибокДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Страница1

&НаКлиенте
Процедура ВидДекларацииПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикСтатусПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус) Тогда
		ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус = НалогоплательщикСтатус;
	КонецЕсли;
	
	Если ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус = НалогоплательщикСтатус Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение декларации по не-резиденту только в ручном режиме
	Если НалогоплательщикСтатус = 2 Тогда
		
		#Область ПоказатьВопрос
		ТекстВопроса = НСтр("ru='Заполнение декларации не-резидента возможно только в ручном режиме.
				|Открыть бланк декларации для заполнения вручную?
				|
				|Обратите внимание: работа помощника заполнения на этом будет завершена'");
		
		ДополнительныеПараметры = Новый Структура;
		Оповещение = Новый ОписаниеОповещения("НалогоплательщикСтатусПриИзмененииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Открыть бланк и завершить работу помощника'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
		#КонецОбласти
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикКатегорияПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСПриИзменении(Элемент)
	
	Если КодИФНС = "" Тогда
		НаименованиеИФНС = НСтр("ru = '<Инспекция не выбрана>'") ;
		Возврат;
	КонецЕсли; 
	
	КодИФНСПриИзмененииНаСервере(КодИФНС);
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("КодИФНС", ?(ЗначениеЗаполнено(Элемент.ТекстРедактирования), Элемент.ТекстРедактирования, КодИФНС));
	ОткрытьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма.ВыборНалоговойИнспекции", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		КодИФНС = ВыбранноеЗначение.Код;
		НаименованиеИФНС = ВыбранноеЗначение.Наименование;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикФамилияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.СписокВыбора.Очистить();
	Имена = СписокНалогоплательщиковЭтойПрограммы();
	Для каждого ЭлементСписка Из Имена Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("НалогоплательщикФамилияВыборЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Элемент.СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикСтранаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(НалогоплательщикСтрана) Тогда
		НалогоплательщикСтрана = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры


#КонецОбласти 


#Область Страница2

&НаКлиенте
Процедура СписокДокументовПриИзменении(Элемент)
	ОбновитьИтогиРасчетов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	#Область ПоказатьВопрос
	Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru='Удалить документ ""%1""?'"), Элемент.ТекущиеДанные.Представление);
	Иначе
		ТекстВопроса = НСтр("ru='Удалить все выделенные документы?'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВыделенныеСтроки", ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элемент.ВыделенныеСтроки));
	Оповещение = Новый ОписаниеОповещения("СписокДокументовПередУдалениемЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Удалить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти
	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуДокументаДоходаИлиВычета(Неопределено, ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти 


#Область Страница3

&НаКлиенте
Процедура НадписьРекомендацииПечати1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьСписокСообщений(ЭтотОбъект);
	
КонецПроцедуры



#КонецОбласти 

#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьОтчетКлиент();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.СтраницыНавигации.ТекущаяСтраница = Элементы.СтраницаНавигации2 Тогда
		НомерШага = 1;
	ИначеЕсли Элементы.СтраницыНавигации.ТекущаяСтраница = Элементы.СтраницаНавигации3 Тогда
		НомерШага = 2;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигации(ЭтотОбъект, НомерШага);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.СтраницыНавигации.ТекущаяСтраница = Элементы.СтраницаНавигации1 Тогда
		НомерШага = 2;
	ИначеЕсли Элементы.СтраницыНавигации.ТекущаяСтраница = Элементы.СтраницаНавигации2 Тогда
		НомерШага = 3;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НомерШага = 3 И (Модифицированность Или Не ПроверкаВыполнена) Тогда
		ВыполнитьПроверкуДекларации();
	КонецЕсли;
	ПерейтиПоНавигации(ЭтотОбъект, НомерШага);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписок(Команда)
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Область ПоказатьВопрос
	ТекстВопроса = НСтр("ru='Удалить все документы?'");
	
	ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ОчиститьСписокЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Удалить все'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	#КонецОбласти
	 
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходСправка2НДФЛ(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходСдачаВАренду(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходПрочиеДоходыВРФ(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходПродажаПрочегоИмущества(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходПродажаНедвижимости(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходПродажаАвто(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходПредпринимателя(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходПодарок(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходЗаПределамиРФ(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоходДивиденды(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВычетУбыткиПрошлыхЛет(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВычетСтрахования(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВычетСоциальный(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВычетНаНалогоплательщика(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВычетНаДетей(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВычетИмущественный(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВычетИИС(Команда)
	ОткрытьФормуДокументаДоходаИлиВычета(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельСообщений(Команда)
	СкрытьСписокСообщений(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДекларацию(Команда)
	
	ГотовоКВыгрузке   = Ложь;
	ПроверкаВыполнена = Ложь;
	ВыполнитьПроверкуДекларации();
	Если ГотовоКВыгрузке Тогда
		ПоказатьПредупреждение(, НСтр("ru='Ошибок в декларации не найдено'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПростойБланк(Команда)
	
	ВывестиБланкКлиент("ТабличныйДокумент");
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьPDF(Команда)
	
	ВывестиБланкКлиент("PDF");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	ВывестиБланкКлиент("ВыгрузкаВФайл");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезПомощника(Команда)
	
	ТекстВопроса = НСтр("ru = 'После отказа от ""Помощника заполнения"" вы сможете изменять декларацию только вручную.
			|Хотите продолжить работу с бланками декларации без ""Помощника заполнения""?'");
			
	Оповещение= Новый ОписаниеОповещения("ПродолжитьБезПомощникаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Заголовок);
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область НавигацияПоСтраницам

&НаКлиентеНаСервереБезКонтекста 
Процедура ПерейтиПоНавигации(Форма, НомерШага)

	ЭтапВыполнен = ЗначениеЗаполнено(Форма.НалогоплательщикФамилия);
	Форма.Элементы.Раздел1Кнопка.Картинка = ?(НомерШага = 1, БиблиотекаКартинок.Этап1_3_24, ?(ЭтапВыполнен, БиблиотекаКартинок.Этап1_2_24, БиблиотекаКартинок.Этап1_1_24));

	ЭтапВыполнен = Форма.СписокДокументов.Количество() > 0;
	Форма.Элементы.Раздел2Кнопка.Картинка = ?(НомерШага = 2, БиблиотекаКартинок.Этап2_3_24, ?(ЭтапВыполнен, БиблиотекаКартинок.Этап2_2_24, БиблиотекаКартинок.Этап2_1_24));

	Форма.Элементы.Раздел3Кнопка.Картинка = ?(НомерШага = 3, БиблиотекаКартинок.Этап3_3_24, ?(Форма.ПроверкаВыполнена, БиблиотекаКартинок.Этап3_2_24, БиблиотекаКартинок.Этап3_1_24));

	Форма.Элементы.СтраницыНавигации.ТекущаяСтраница = Форма.Элементы["СтраницаНавигации" + НомерШага];
	
	Если НомерШага = 1 Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.НалогоплательщикФамилия;
		Форма.Элементы.Далее1.КнопкаПоУмолчанию = Истина;
	ИначеЕсли НомерШага = 2 Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.СписокДокументов;
		Форма.Элементы.Далее2.КнопкаПоУмолчанию = Истина;
	ИначеЕсли НомерШага = 3 Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.НадписьФормата1;
		Форма.Элементы.Записать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Структура) Экспорт

	// Для совместимости с выгрузкой в файл регл.отчетности
	Возврат;

КонецПроцедуры
 
#КонецОбласти 


#Область ДокументыДоходовИВычетов

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиДокументов(Форма)

	Форма.ИтогВычетыПредпринимателя = 0;
	Форма.ИтогВычетыФизЛица         = 0;
	Форма.ИтогДоходыПредпринимателя = 0;
	Форма.ИтогДоходыФизлица	        = 0;

	Для каждого СтрокаДокумента Из Форма.СписокДокументов Цикл
		
		Если СтрокаДокумента.ВидДокумента = "ДоходПредпринимателя" Тогда
			Форма.ИтогДоходыПредпринимателя = Форма.ИтогДоходыПредпринимателя + СтрокаДокумента.СуммаДохода;
			Форма.ИтогВычетыПредпринимателя = Форма.ИтогВычетыПредпринимателя + СтрокаДокумента.СуммаВычета;
		Иначе
			Форма.ИтогДоходыФизлица = Форма.ИтогДоходыФизлица + СтрокаДокумента.СуммаДохода;
			Форма.ИтогВычетыФизЛица = Форма.ИтогВычетыФизЛица + СтрокаДокумента.СуммаВычета;
		КонецЕсли;
		
		Если СтрокаДокумента.ВидДокумента = "ДоходСправка2НДФЛ" Тогда
			СтрокаДокумента.НомерИконки = 34;
		ИначеЕсли Нрег(Лев(СтрокаДокумента.ВидДокумента,5)) = "доход" Тогда
			СтрокаДокумента.НомерИконки = 7;
		Иначе
			СтрокаДокумента.НомерИконки = 10;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.ИтогВычетыПредпринимателя = 0 И Форма.ИтогВычетыФизЛица = 0
		И Форма.ИтогДоходыПредпринимателя = 0 И Форма.ИтогДоходыФизлица = 0 Тогда
		Форма.Элементы.ГруппаЗаполненныхИтогов.Видимость = Ложь;
		Форма.Элементы.ГруппаОтсутсвиеИтогов.Видимость   = Истина;
	Иначе
		Форма.Элементы.ГруппаЗаполненныхИтогов.Видимость = Истина;
		Форма.Элементы.ГруппаОтсутсвиеИтогов.Видимость   = Ложь;
	КонецЕсли;
	
	ОбновитьИтогиРасчетов(Форма);
	
КонецПроцедуры

// Проверка и корректировка сумм вычетов, для которых установлен предел 
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиРасчетов(Форма)

	ОстатокПеределаИмущества    = Число(?(Форма.ДопРеквизитыФормы.ПределыВычетов.Свойство("ПродажаИногоИмущества"), Форма.ДопРеквизитыФормы.ПределыВычетов.ПродажаИногоИмущества, 0));
	ОстатокПеределаНедвижимости = Число(?(Форма.ДопРеквизитыФормы.ПределыВычетов.Свойство("ПродажаЖилойНедвижимости"), Форма.ДопРеквизитыФормы.ПределыВычетов.ПродажаЖилойНедвижимости, 0));
	ОстатокПеределаДолиВУК      = Число(?(Форма.ДопРеквизитыФормы.ПределыВычетов.Свойство("ПродажаДолиВУК"), Форма.ДопРеквизитыФормы.ПределыВычетов.ПродажаДолиВУК, 0));
	
	ПокупкаЖильяСтоимость      = 0;
	ПокупкаЖильяПроценты       = 0;
	СтрокаИмуществаДо2014      = Неопределено;
	СтрокаПроцентовПоКредиту   = Неопределено;
	КредитОформленДо2014Года        = Ложь;
	СтрокиЖилья = Новый Массив;
	
	Для каждого СтрокаДокумента Из Форма.СписокДокументов Цикл
		
		Если СтрокаДокумента.ВидДокумента = "ДоходПродажаНедвижимости" И СтрокаДокумента.СтруктураДокумента.ВидВычета = "Норматив" Тогда
			
			Если СтрокаДокумента.СтруктураДокумента.ВидИмущества = "Доля" Тогда
				РассчетныйВычет = Форма.ДопРеквизитыФормы.ПределыВычетов.ПродажаЖилойНедвижимости 
					* СтрокаДокумента.СтруктураДокумента.ДоляЧислитель / СтрокаДокумента.СтруктураДокумента.ДоляЗнаменатель;
			Иначе
				РассчетныйВычет = Форма.ДопРеквизитыФормы.ПределыВычетов.ПродажаЖилойНедвижимости;
			КонецЕсли;
			РасчетныйДоход = ?(СтрокаДокумента.СтруктураДокумента.НедвижимостьПриобретенаПосле01012016, 
							Макс(СтрокаДокумента.СтруктураДокумента.КадастроваяСтоимость * СтрокаДокумента.СтруктураДокумента.ПонижающийКоэффициент, 
										СтрокаДокумента.СтруктураДокумента.СуммаДохода),
							СтрокаДокумента.СтруктураДокумента.СуммаДохода);
			РассчетныйВычет = Мин(ОстатокПеределаНедвижимости, РассчетныйВычет, РасчетныйДоход);
			СтрокаДокумента.СтруктураДокумента.СуммаВычета = РассчетныйВычет;
			СтрокаДокумента.СуммаВычета = РассчетныйВычет;
			ОстатокПеределаНедвижимости = Макс(0, ОстатокПеределаНедвижимости - РассчетныйВычет);
			
		ИначеЕсли СтрокаДокумента.ВидДокумента = "ДоходПродажаАвто" Или СтрокаДокумента.ВидДокумента = "ДоходПродажаПрочегоИмущества" Тогда
			
			Если СтрокаДокумента.СтруктураДокумента.ВидВычета = "Норматив" Тогда
				РассчетныйВычет = Мин(ОстатокПеределаИмущества, СтрокаДокумента.СтруктураДокумента.СуммаДохода);
				СтрокаДокумента.СтруктураДокумента.СуммаВычета = РассчетныйВычет;
				СтрокаДокумента.СуммаВычета = РассчетныйВычет;
				ОстатокПеределаИмущества = Макс(0, ОстатокПеределаИмущества - РассчетныйВычет);
			Иначе
				// проверка фактического расхода делается в форме документа
			КонецЕсли;
			
		ИначеЕсли СтрокаДокумента.ВидДокумента = "ВычетИмущественный" Тогда
			
			СтрокиЖилья.Добавить(СтрокаДокумента);
			
			СтруктураДанныхДекларации = СтрокаДокумента.СтруктураДокумента.СтруктураДанныхДекларации;
			Если СтруктураДанныхДекларации.ОбъектПриобретенДо2014Года Тогда
				СтрокаИмуществаДо2014 = СтрокаДокумента;
				ПокупкаЖильяСтоимость = СтруктураДанныхДекларации.СуммаРасходовНаПриобретениеНедвижимости;
			Иначе
				ПокупкаЖильяСтоимость = ПокупкаЖильяСтоимость + СтруктураДанныхДекларации.СуммаРасходовНаПриобретениеНедвижимости;
			КонецЕсли;
			
			Если ПокупкаЖильяПроценты = 0 И СтруктураДанныхДекларации.СуммаПроцентовПоКредитуНаНедвижимость > 0 Тогда
				
				СтрокаПроцентовПоКредиту = СтрокаДокумента;
				ПокупкаЖильяПроценты = СтруктураДанныхДекларации.СуммаПроцентовПоКредитуНаНедвижимость;
				
				КредитОформленДо2014Года = СтруктураДанныхДекларации.КредитОформленДо2014Года;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаДокумента.ВидДокумента = "ДоходПрочиеДоходыВРФ" Тогда 
			
			Если СтрокаДокумента.СтруктураДокумента.КодДохода = "1540" И СтрокаДокумента.СтруктураДокумента.КодВычета = "905" Тогда
				
				РассчетныйВычет = Мин(ОстатокПеределаДолиВУК, СтрокаДокумента.СтруктураДокумента.СуммаДохода);
				СтрокаДокумента.СтруктураДокумента.СуммаВычета = РассчетныйВычет;
				СтрокаДокумента.СуммаВычета = РассчетныйВычет;
				СтрокаДокумента.СтруктураДокумента.СуммаДоходаОблагаемая = Макс(0, СтрокаДокумента.СтруктураДокумента.СуммаДохода - СтрокаДокумента.СтруктураДокумента.СуммаВычета);
				СтрокаДокумента.СтруктураДокумента.СуммаНалога = Окр(СтрокаДокумента.СтруктураДокумента.СуммаДоходаОблагаемая * СтрокаДокумента.СтруктураДокумента.СтавкаНалога / 100, 0);
				ОстатокПеределаДолиВУК = Макс(0, ОстатокПеределаДолиВУК - РассчетныйВычет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиЖилья.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	ПокупкаЖильяСтоимость = Мин(Форма.ДопРеквизитыФормы.ПределыВычетов.НаПриобретениеНедвижимостиСтоимость, ПокупкаЖильяСтоимость);
	Если Не КредитОформленДо2014Года Тогда
		ПокупкаЖильяПроценты = Мин(Форма.ДопРеквизитыФормы.ПределыВычетов.НаПриобретениеНедвижимостиПроценты, ПокупкаЖильяПроценты);
	КонецЕсли;
	
	Для каждого СтрокаЖилья Из СтрокиЖилья Цикл
		
		СтруктураДанныхДекларации = СтрокаЖилья.СтруктураДокумента.СтруктураДанныхДекларации;
		Если СтрокаИмуществаДо2014 <> Неопределено Тогда
			
			Если СтрокаИмуществаДо2014 = СтрокаЖилья Тогда
				СтрокаЖилья.СуммаВычета = ПокупкаЖильяСтоимость;
			Иначе
				СтрокаЖилья.СуммаВычета = 0;
			КонецЕсли;
			
		Иначе
			
			ВычетПоСтроке = Мин(ПокупкаЖильяСтоимость, СтруктураДанныхДекларации.СуммаРасходовНаПриобретениеНедвижимости);
			ПокупкаЖильяСтоимость = Макс(0, ПокупкаЖильяСтоимость - ВычетПоСтроке);
			СтрокаЖилья.СуммаВычета = ВычетПоСтроке;
			
		КонецЕсли;
		
		Если СтрокаЖилья = СтрокаПроцентовПоКредиту Тогда
			
			СтрокаЖилья.СуммаВычета = СтрокаЖилья.СуммаВычета + ПокупкаЖильяПроценты;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСписокДокументов(Форма)

	Форма.СписокДокументов.Очистить();
	Форма.ИтогВычетыПредпринимателя   = 0;
	Форма.ИтогВычетыФизЛица           = 0;
	Форма.ИтогДоходыПредпринимателя   = 0;
	Форма.ИтогДоходыФизлица	          = 0;

	Форма.Модифицированность = Истина;
	ОбновитьИтогиДокументов(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокуДокумента(Форма, ИДСтроки)

	Строка = Форма.СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СписокДокументов.Удалить(Строка);
	
	Форма.Модифицированность = Истина;
	ОбновитьИтогиДокументов(Форма);
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиенте
Функция ДокументСОграничениемПоКоличеству(ВидДокумента)

	Если СтрНайти("ВычетИИС,ВычетНаДетей,ВычетНаНалогоплательщика,ВычетСоциальный", ВидДокумента) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Строки = СписокДокументов.НайтиСтроки(Новый Структура("ВидДокумента", ВидДокумента));
	Если Строки.Количество() > 0 Тогда
		Возврат СТроки[0];
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОткрытиеДокументаБезДублейЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуДокументаДоходаИлиВычета(Неопределено, ДополнительныеПараметры.ИДСтроки, ДополнительныеПараметры.СписокОшибок);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаДоходаИлиВычета(ВидДокумента, ИДСтроки = Неопределено, СписокОшибок = Неопределено)

	Если ВидДокумента = Неопределено Тогда
		
		СтрокаДокумента = СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаДокумента = Неопределено Тогда
			ВызватьИсключение НСтр("ru='Невозмножно открыть документ - строка не найдена'");
		КонецЕсли;
		ВидДокумента = СтрокаДокумента.ВидДокумента;
		
	Иначе
		
		СтрокаДокумента = ДокументСОграничениемПоКоличеству(ВидДокумента);
		Если СтрокаДокумента <> Неопределено Тогда
			// Попытка добавить лишний документ
			ИДСтроки = СтрокаДокумента.ПолучитьИдентификатор();
			Элементы.СписокДокументов.ТекущаяСтрока = ИДСтроки;
			
			#Область ПоказатьВопрос
			ТекстВопроса = НСтр("ru='Такой документ может быть добавлен только в единственном экземпляре.
				|Открыть документ, добавленый ранее?'");
			
			ДополнительныеПараметры = Новый Структура("ИДСтроки,СписокОшибок", ИДСтроки, СписокОшибок);
			Оповещение = Новый ОписаниеОповещения("ОткрытиеДокументаБезДублейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
			#КонецОбласти
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы     = Неопределено;
	ИмяФормыДокумента  = Неопределено;
	СтруктураДокумента = Неопределено;
	ПодготовитьОткрытиеДокументаСервер(ВидДокумента, Декларация3НДФЛВыбраннаяФорма, ИмяФормыДокумента, СтруктураДокумента, ПараметрыФормы, ГодОтчета);
	
	Если Не ЗначениеЗаполнено(ИмяФормыДокумента) Тогда
		ВызватьИсключение "Указан некорректный вид документа: " + ВидДокумента;
	КонецЕсли;
	
	Если СписокОшибок <> Неопределено Тогда
		ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	КонецЕсли;
	
	СтрокаСписка   = ?(ИДСтроки = Неопределено, Неопределено, СписокДокументов.НайтиПоИдентификатору(ИДСтроки));
	Если СтрокаСписка <> Неопределено Тогда
		СтруктураДокумента = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтрокаСписка.СтруктураДокумента);
	КонецЕсли;
	
	// Обработчик оповещения о закрытии формы
	ДополнительныеПараметры = Новый Структура("ВидДокумента,ИДСтроки,ЕстьОшибки", ВидДокумента, ИДСтроки, СписокОшибок <> Неопределено);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуДокументаДоходаИлиВычетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Открытие формы
	ПараметрыФормы.Вставить("СтруктураДокумента",        СтруктураДокумента);
	ПараметрыФормы.Вставить("НалогоплательщикСтатус",    НалогоплательщикСтатус);
	ПараметрыФормы.Вставить("НалогоплательщикКатегория", НалогоплательщикКатегория);
	ПараметрыФормы.Вставить("ГодОтчета",                 ГодОтчета);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма." + ИмяФормыДокумента, ПараметрыФормы, Элементы.СписокДокументов, 
				Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПодготовитьОткрытиеДокументаСервер(ВидДокумента, Декларация3НДФЛВыбраннаяФорма, ИмяФормыДокумента, СтруктураДокумента, ПараметрыФормы, ГодОтчета)

	ИмяФормыДокумента  = Обработки.ПомощникЗаполнения3НДФЛ.ИмяФормыДокументаДоходаВычета(ВидДокумента, Декларация3НДФЛВыбраннаяФорма, ПараметрыФормы);
	СтруктураДокумента = Обработки.ПомощникЗаполнения3НДФЛ.НоваяСтруктураДокументаДоходаВычета(
				ВидДокумента, Декларация3НДФЛВыбраннаяФорма, , Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаДоходаИлиВычетаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИДСтроки = Неопределено Тогда
		СтрокаДокумента = СписокДокументов.Добавить();
	Иначе
		СтрокаДокумента = СписокДокументов.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки);
	КонецЕсли;
	
	СтрокаДокумента.ВидДокумента  = ДополнительныеПараметры.ВидДокумента;
	ЗаполнитьЗначенияСвойств(СтрокаДокумента, Результат, "Представление,СуммаДохода,СуммаВычета,СтавкаНалога");
	СтрокаДокумента.СтруктураДокумента = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Результат.СтруктураДокумента);
	
	Элементы.СписокДокументов.ТекущаяСтрока = ДополнительныеПараметры.ИДСтроки;
	
	Модифицированность = Истина;
	ОбновитьИтогиДокументов(ЭтотОбъект);
	Если ДополнительныеПараметры.ЕстьОшибки Тогда
		// Повторная проверка наличия ошибок
		ВыполнитьПроверкуДекларации();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры


#КонецОбласти 


#Область ЧтениеДанныхИзОчетов

// Заполняет форму данными помощника из существующего отчета или значениями по умолчанию
&НаСервере
Процедура ЗаполнитьФормуИзОтчета(ОтчетДляЗаполнения, ЭтоКопия)

	Если Не ЭтоКопия Тогда
		ГодОтчета = Год(ОтчетДляЗаполнения.ДатаОкончания);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ГодОтчета) Или ГодОтчета < Год(ДопРеквизитыФормы.мДатаНачалаПериодаОтчета) Тогда
		ГодОтчета = Год(ДопРеквизитыФормы.мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	// Структура данных помощника, заполненная значениями по умолчанию
	ДанныеПомощника = Обработки.ПомощникЗаполнения3НДФЛ.НоваяСтруктураДанныхПомощника(ГодОтчета);
	
	ДанныеОтчета   = ОтчетДляЗаполнения.ДанныеОтчета.Получить();
	Если ОтчетДляЗаполнения.ИспользоватьПомощникЗаполнения Тогда
		ПрочитатьИзОтчетаДанныеПомощника(ДанныеОтчета, ДанныеПомощника);
	Иначе
		//TODO: добавить заполнение из отчета без помощника 
	КонецЕсли;
	
	// Заполнение реквизитов формы данными помощника
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПомощника, , "СписокДокументов,ГодОтчета");
	ЗаполнитьТаблицуФормыСпискомДокументов(СписокДокументов, ДанныеПомощника.СписокДокументов);
	
	ДопРеквизитыФормы.Вставить("ТекущееЗначениеНалогоплательщикСтатус", НалогоплательщикСтатус);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПомощникаИзДанныхОтчета(ДанныеОтчета)

	Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru='Отчет не содержит никаких данных'");
	КонецЕсли;
	
	Результат = Неопределено;
	Если Не ДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения", Результат) Тогда
		// В отчетах прошлых лет данные помощника сохранялись с именем "ДанныеПомощника"
		Если Не ДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения", Результат) Тогда
			ВызватьИсключение НСтр("ru='В отчете нет данных помощника заполнения. 
				|Редактирование этого отчета в помощнике невозможно'");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Или Результат.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Данные помощника записаны некорректно. 
			|Редактирование этого отчета в помощнике невозможно'");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции
 

// Получает из отчета данные помощника и заполняе ими акутальную структуру данных
//по возможности импортируются данные из предыдущих версий помощника
&НаСервере
Процедура ПрочитатьИзОтчетаДанныеПомощника(ДанныеОтчета, ДанныеПомощникаЭтойФормы)

	ДанныеПомощникаИзОтчета = ДанныеПомощникаИзДанныхОтчета(ДанныеОтчета);
	
	// Копирование значений из структуры, сохраненной в отчете в актуальную структуру данных помощника
	Для каждого КлючИЗначеие Из ДанныеПомощникаЭтойФормы Цикл
		
		ЗначениеСвойства = Неопределено;
		Если КлючИЗначеие.Ключ = "ВерсияПомощника" Или КлючИЗначеие.Ключ = "ВерсияПомощника" Или Не ДанныеПомощникаИзОтчета.Свойство(КлючИЗначеие.Ключ, ЗначениеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПомощникаЭтойФормы[КлючИЗначеие.Ключ] = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ЗначениеСвойства);
		 
	КонецЦикла;
	
	ВерсияПомощникаИзОтчета = Неопределено;
	ДанныеПомощникаИзОтчета.Свойство("ВерсияПомощника", ВерсияПомощникаИзОтчета);
	
	Если ВерсияПомощникаИзОтчета = ДанныеПомощникаЭтойФормы.ВерсияПомощника Тогда
		// Версия актуальна, импортировать ничего не нужно
		Возврат;
	КонецЕсли;

	// Импорт данных из прежних версий помощника заполнения
	Если ДанныеПомощникаИзОтчета.Свойство("ТаблицаИмущественныхВычетов") Тогда
		ПрочитатьИзСтарогоПомощникаВычетИмущественный(ДанныеПомощникаЭтойФормы, ДанныеПомощникаИзОтчета);
	КонецЕсли;
	
	// Копирование документов страхования
	Если ДанныеПомощникаИзОтчета.Свойство("ТаблицаСоциальныхСтраховыхВычетов") Тогда
		Если ДанныеПомощникаИзОтчета.ТаблицаСоциальныхСтраховыхВычетов.Колонки.Найти("ВидДоговора") = Неопределено Тогда
			ДанныеПомощникаИзОтчета.ТаблицаСоциальныхСтраховыхВычетов.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		ПрочитатьИзСтарогоПомощникаСтраховыеДокументы(ДанныеПомощникаЭтойФормы, ДанныеПомощникаИзОтчета.ТаблицаСоциальныхСтраховыхВычетов);
	КонецЕсли;
	
	// Сокращение таблицы убытков по ценным бумагам
	Если ДанныеПомощникаИзОтчета.Свойство("ТаблицаУбытковПоЦеннымБумагам") Тогда
		ПрочитатьИзСтарогоПомощникаУбыткиПрошлыхЛет(ДанныеПомощникаЭтойФормы, ДанныеПомощникаИзОтчета.ТаблицаУбытковПоЦеннымБумагам, Ложь);
	КонецЕсли;
	Если ДанныеПомощникаИзОтчета.Свойство("ТаблицаУбытковПоЦеннымБумагамИИС") Тогда
		ПрочитатьИзСтарогоПомощникаУбыткиПрошлыхЛет(ДанныеПомощникаЭтойФормы, ДанныеПомощникаИзОтчета.ТаблицаУбытковПоЦеннымБумагам, Истина);
	КонецЕсли;

КонецПроцедуры

// Импорт записей об убытках по ценным бумагам из старых версий помощника
&НаСервере
Процедура ПрочитатьИзСтарогоПомощникаУбыткиПрошлыхЛет(ДанныеПомощника, ТаблицаУбытков, ИИС)

	Если ТаблицаУбытков.Итог("УбытокПоЦеннымБумагам") = 0 И ТаблицаУбытков.Итог("УбытокПоФинансовымИнстументам") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийГод      = ГодОтчета;
	МинимальныйГод  = ТекущийГод - 10;
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаДокумента Из ТаблицаУбытков Цикл
		Если СтрокаДокумента.Год < МинимальныйГод Тогда
			СтрокиКУдалению.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	СчетчикЛет = СтрокиКУдалению.Количество();
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаУбытков.Удалить(СтрокаКУдалению);
		НоваяСтрока = ТаблицаУбытков.Вставить(0);
		НоваяСтрока.Год = ТекущийГод - СчетчикЛет;
		СчетчикЛет = СчетчикЛет - 1;
	КонецЦикла;
	
	// Добавление нового вида документов
	СтрокаДокумента = ДанныеПомощника.СписокДокументов.Добавить();
	СтрокаДокумента.ВидДокумента = "ВычетУбыткиПрошлыхЛет";
	СтрокаДокумента.Представление = "Убытки прошлых лет" + ?(ИИС, " по ИИС", "");
	СтрокаДокумента.СтруктураДокумента = Обработки.ПомощникЗаполнения3НДФЛ.НоваяСтруктураДокументаДоходаВычета(
			СтрокаДокумента.ВидДокумента, Декларация3НДФЛВыбраннаяФорма, ИИС);
	Для каждого СтрокаИсточника Из ТаблицаУбытков Цикл
		СтрокаПомощника = СтрокаДокумента.СтруктураДокумента.ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПомощника, СтрокаИсточника);
	КонецЦикла;
	
	СтрокаДокумента.СуммаВычета = ТаблицаУбытков.Итог("УбытокПоЦеннымБумагам") + ТаблицаУбытков.Итог("УбытокПоФинансовымИнстументам");

КонецПроцедуры

// Импорт записей о страховках из старых версий помощника
&НаСервере
Процедура ПрочитатьИзСтарогоПомощникаСтраховыеДокументы(ДанныеПомощника, ТаблицаСтраховок) 
	
	Для каждого СтрокаИсточника Из ТаблицаСтраховок Цикл
		СтрокаДокумента = ДанныеПомощника.СписокДокументов.Добавить();
		СтрокаДокумента.ВидДокумента = "ВычетСтрахования";
		СтрокаДокумента.СтруктураДокумента = Обработки.ПомощникЗаполнения3НДФЛ.НоваяСтруктураДокументаДоходаВычета(
				СтрокаДокумента.ВидДокумента, Декларация3НДФЛВыбраннаяФорма);
		ЗаполнитьЗначенияСвойств(СтрокаДокумента.СтруктураДокумента, СтрокаИсточника);
		СтрокаДокумента.СтруктураДокумента.Наименование = СтрокаИсточника.НаименованиеОрганизации;
		СтрокаДокумента.СтруктураДокумента.СуммаВычета = СтрокаИсточника.ПринимаетсяКВычету;
		СтрокаДокумента.Представление = "Вычет по страхованию";
		СтрокаДокумента.СуммаВычета = СтрокаИсточника.ПринимаетсяКВычету;
	КонецЦикла;
	
	
КонецПроцедуры
 
// Импорт записей об имущественном вычете из старых версий помощника
&НаСервере
Процедура ПрочитатьИзСтарогоПомощникаВычетИмущественный(ДанныеПомощника, ДанныеОтчета) 
	
	ТаблицаВычетов = ДанныеОтчета.ТаблицаИмущественныхВычетов;
	
	Для каждого СтрокаИсточника Из ТаблицаВычетов Цикл
		
		СтрокаДокумента = ДанныеПомощника.СписокДокументов.Добавить();
		СтрокаДокумента.ВидДокумента       = "ВычетИмущественный";
		СтрокаДокумента.Представление      = "Вычет на покупку и строительство жилья";
		СтрокаДокумента.СтруктураДокумента = Обработки.ПомощникЗаполнения3НДФЛ.НоваяСтруктураДокументаДоходаВычета(
				СтрокаДокумента.ВидДокумента, Декларация3НДФЛВыбраннаяФорма);
		
		СтруктураОбъекта = СтрокаДокумента.СтруктураДокумента;
		СтруктураОбъекта.ОбъектНедвижимости       = СтрокаИсточника.ЖильеНаименование;
		СтруктураОбъекта.ФормаСобственности       = СтрокаИсточника.ЖильеВидСобственности;	
		СтруктураОбъекта.СобственностьСупруга     = СтрокаИсточника.ЖильеПризнакНалогоплательщика = 2;
		СтруктураОбъекта.ДоляЧислитель            = СтрокаИсточника.ЖильеДоляЧислитель;
		СтруктураОбъекта.ДоляЗнаменатель          = СтрокаИсточника.ЖильеДоляЗнаменатель;
		СтруктураОбъекта.КадастровыйНомер         = "";
		СтруктураОбъекта.АдресОбъектаНедвижимости = СтрокаИсточника.ЖильеАдресПредставление;
		СтруктураОбъекта.СтруктураАдреса          = СтрокаИсточника.ЖильеАдресСтруктура;
		СтруктураОбъекта.Стоимость                = СтрокаИсточника.ЖильеСтоимость;
		СтруктураОбъекта.СуммаПроцентовЗаВсеГоды  = СтрокаИсточника.ЖильеСуммаПроцентов;
		
		СтруктураОбъекта.ЖильеПриобретеноНаВторичномРынке     = СтрокаИсточника.ЖильеСпособПриобретения = 1;
		СтруктураОбъекта.ВычетПрименяетсяВпервые              = Ложь;
		СтруктураОбъекта.ДатаАктаПередачиПрав                 = СтрокаИсточника.ЖильеДатаАктаПередачи;
		СтруктураОбъекта.ДатаЗаявленияОРаспределенииРасходов  = СтрокаИсточника.ЖильеДатаЗаявленияОРаспределении;
		СтруктураОбъекта.ДатаРегистрацииПраваНаЗемлю          = СтрокаИсточника.ЖильеДатаПраваНаЗемлю;
		СтруктураОбъекта.ДатаРегистрацииПраваСобственности    = СтрокаИсточника.ЖильеДатаПраваСобственности;
		
		СтруктураОбъекта.НачалоПримененияВычета       = СтрокаИсточника.ЖильеГодНачалаВычета;
		СтруктураОбъекта.ИспользоватьВычетПоПроцентам = ЗначениеЗаполнено(СтрокаИсточника.ЖильеСуммаПроцентов);
		СтруктураОбъекта.КредитОформленДо2014Года     = СтруктураОбъекта.ИспользоватьВычетПоПроцентам 
										И СтруктураОбъекта.НачалоПримененияВычета < 2014;
		СтруктураОбъекта.ПоказыватьДоли               = СтруктураОбъекта.ФормаСобственности = 2 
										И СтруктураОбъекта.ГодПриобретения > 1 
										И СтруктураОбъекта.ГодПриобретения < 2014;
										
		СтрокаДокумента.СтруктураДокумента.ВычетПенсионера = СтрокаДокумента.СтруктураДокумента.ВычетПенсионера 
							Или СтрокаИсточника.ВычетПенсионера;
		
	КонецЦикла;
	
	Если ДанныеОтчета.Свойство("ТаблицаИмущественныхВычетовИтоги") Тогда
		
		ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыНаПриобретение = 0;
		ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыПоПроцентам    = 0;
		ДанныеПомощника.ЖильеПредоставленоАгентомНаПриобретение      = 0;
		ДанныеПомощника.ЖильеПредоставленоАгентомПоПроцентам         = 0;
		
		Для каждого СтрокаИтогов Из ДанныеОтчета.ТаблицаИмущественныхВычетовИтоги Цикл
			
			Если СтрокаИтогов.КодВычета = "140/150" Тогда
				// Вычет прошлых лет
				ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыНаПриобретение = 
						ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыНаПриобретение + СтрокаИтогов.СуммаНаПриобретение;
				ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыПоПроцентам    = 
						ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыПоПроцентам + СтрокаИтогов.СуммаПроцентов;
			ИначеЕсли СтрокаИтогов.КодВычета = "160/170" Тогда
				// Остаток, перешедший с прошлого года
			ИначеЕсли СтрокаИтогов.КодВычета = "180/190" Тогда
				// Предоставлено налоговым агентом в текущем году
				ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыНаПриобретение = 
						ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыНаПриобретение + СтрокаИтогов.СуммаНаПриобретение;
				ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыПоПроцентам    = 
						ДанныеПомощника.ЖильеПредоставленоВПрошлыеГодыПоПроцентам + СтрокаИтогов.СуммаПроцентов;
			КонецЕсли;
			 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 


#Область ПроверкаЗаполнения

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСписокСообщений(Форма)

	Если Форма.Элементы.ГруппаСписокСообщений.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СписокСообщений.Количество() = 0 Тогда
		#Если Не Сервер Тогда
		ПоказатьПредупреждение(, НСтр("ru='Список сообщений пуст!'"));
		#КонецЕсли 
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаСписокСообщений.Видимость = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьСписокСообщений(Форма)

	Если Не Форма.Элементы.ГруппаСписокСообщений.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ГруппаСписокСообщений.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуДекларации()

	ПроверкаВыполнена = Ложь;
	
	СписокОшибок = Новый Массив;
	ГотовоКВыгрузке = Обработки.ПомощникЗаполнения3НДФЛ.ДекларацияНеСодержитОшибок(ЭтотОбъект, СписокОшибок);
	
	СписокСообщений.Очистить();
	Для каждого Ошибка Из СписокОшибок Цикл
		СтрокаОшибки = СписокСообщений.Добавить();
		СтрокаОшибки.ТекстСообщения  = Ошибка.ОписаниеОшибки;
		СтрокаОшибки.НомерРаздела    = ?(Ошибка.МестоОшибки = "ТитульныйЛист", 1, 2);
		СтрокаОшибки.СтруктураОшибки = Ошибка;
	КонецЦикла;

	ПроверкаВыполнена = Истина;
	
	Если ГотовоКВыгрузке Тогда
		Элементы.ГруппаДекларацияГотова.Видимость    = Истина;
		Элементы.ГруппаОшибкиДекларации.Видимость    = Ложь;
		Элементы.ГруппаФорматРезультата1.Доступность = Истина;
		Элементы.ГруппаФорматРезультата3.Доступность = Истина;
		Элементы.Печать.Доступность = Истина;
		Элементы.ВыгрузитьВФайл.Доступность = Истина;
		СкрытьСписокСообщений(ЭтотОбъект);
	Иначе
		Элементы.ГруппаДекларацияГотова.Видимость = Ложь;
		Элементы.ГруппаОшибкиДекларации.Видимость = Истина;
		Элементы.ГруппаФорматРезультата1.Доступность = Ложь;
		Элементы.ГруппаФорматРезультата3.Доступность = Ложь;
		Элементы.Печать.Доступность = Ложь;
		Элементы.ВыгрузитьВФайл.Доступность = Ложь;
		Если СписокСообщений.Количество() > 0 Тогда 
			ПоказатьСписокСообщений(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 


#Область ЗаписьДекларации

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьОтчетКлиент();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОтчетКлиент(ЗаполнятьОтчет = Ложь, ОтказатьсяОтПомощника = Ложь)

	ЗаписатьОтчетСервер(ЗаполнятьОтчет, ОтказатьсяОтПомощника);
	Оповестить("Записан 3-НДФЛ", ДопРеквизитыФормы.мСохраненныйДок);

КонецПроцедуры
 
&НаСервере
Процедура ЗаписатьОтчетСервер(ЗаполнятьОтчет = Ложь, ОтказатьсяОтПомощника = Ложь)

	Обработки.ПомощникЗаполнения3НДФЛ.ЗаписатьДанныеПомощникаВОтчет(ЭтотОбъект, ЗаполнятьОтчет, ОтказатьсяОтПомощника);
	ОбновитьЗаголовок();
	Модифицированность  = Ложь;

КонецПроцедуры


#КонецОбласти 


#Область ПечатьИВыгрузка

&НаКлиенте
Процедура ВывестиБланкКлиент(ТипБланка)

	Если ТипБланка <> "ТабличныйДокумент" Тогда
		
		ВыполнитьПроверкуДекларации();
		Если Не ГотовоКВыгрузке Тогда
			ПоказатьПредупреждение(, НСтр("ru='Пожалуйста, исправьте ошибки во введенных данных.
					|Вывести машиночитаемый бланк или выгрузить в файл можно только корректные данные'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипБланка", ТипБланка);
	Если Модифицированность Тогда
		#Область ПоказатьВопрос
		ТекстВопроса = НСтр("ru='Для продолжения нужно сохранить сделанные изменения.
			|Сохранить и продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("ВывестиБланкКлиентЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,     НСтр("ru='Да'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
		#КонецОбласти
		
	Иначе
		 ВывестиБланкКлиентЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры); // Принудительная повторная запись с перезаполнением регл.отчета
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ВывестиБланкКлиентЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьОтчетКлиент(Истина, Ложь);
	ВывестиБланкДекларации(ДополнительныеПараметры.ТипБланка);

КонецПроцедуры

&НаКлиенте
Процедура ВывестиБланкДекларации(ТипБланка)

	ПараметрыФормы = ПараметрыФормыРеглОтчета();
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	
	ИмяФормыДекларации = ПараметрыФормы.мВыбраннаяФорма;
	ФормаОтчета = ПолучитьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма." +  ИмяФормыДекларации, ПараметрыФормы);
	
	Если ТипБланка = "PDF" Тогда
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ФормаОтчета, "Декларация3НДФЛ");
	ИначеЕсли ТипБланка = "ТабличныйДокумент" Тогда 
		ФормаОтчета.Печать("ПоказатьБланк", Истина);
	Иначе
		ФормаОтчета.Выгрузить(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыРеглОтчета()

	ПараметрыДляФормыОтчета = Новый Структура;
	ПараметрыДляФормыОтчета.Вставить("Ключ",                     ДопРеквизитыФормы.мСохраненныйДок);
	ПараметрыДляФормыОтчета.Вставить("Организация",              ДопРеквизитыФормы.Организация);
	ПараметрыДляФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", Дата(ГодОтчета, 1, 1));
	ПараметрыДляФормыОтчета.Вставить("мДатаКонцаПериодаОтчета",  КонецГода(ПараметрыДляФормыОтчета.мДатаНачалаПериодаОтчета));
	ВыбраннаяФорма = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
		"РегламентированныйОтчет3НДФЛ", ПараметрыДляФормыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыДляФормыОтчета.Вставить("мВыбраннаяФорма", ВыбраннаяФорма);
	ПараметрыДляФормыОтчета.Вставить("мСохраненныйДок", ДопРеквизитыФормы.мСохраненныйДок);
	ПараметрыДляФормыОтчета.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
	ПараметрыДляФормыОтчета.Вставить("НеОтображатьПредупреждение", Ложь);
	ПараметрыДляФормыОтчета.Вставить("БезОткрытияФормы",         Истина);
	
	Возврат ПараметрыДляФормыОтчета;
	
КонецФункции




#КонецОбласти 

&НаСервере
Процедура КодИФНСПриИзмененииНаСервере(Код)
	
	ОтчетОбъект = ОбъектЭтогоОтчета();
	МакетИнспекций = ОтчетОбъект.ПолучитьМакет("СписокИнспекций");
	
	ОбластьМакета = МакетИнспекций.НайтиТекст(Код, , МакетИнспекций.Область(1, 2, МакетИнспекций.ВысотаТаблицы, 2), , Истина);
	Если ОбластьМакета = Неопределено Тогда
		НаименованиеИФНС = НСтр("ru = '<Инспекция с указанным кодом не найдена>'");
	Иначе
		НаименованиеИФНС = МакетИнспекций.Область(ОбластьМакета.Верх, 1, ОбластьМакета.Верх, 1).Текст;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопРеквизитыФормы()

	Организация            = Неопределено;
	Параметры.Свойство("Организация", Организация);
	КонецПериодаОтчета = Неопределено;
	Если Не Параметры.Свойство("мДатаКонцаПериодаОтчета", КонецПериодаОтчета) Или Не ЗначениеЗаполнено(КонецПериодаОтчета) Тогда
		КонецПериодаОтчета = Дата(Отчеты.РегламентированныйОтчет3НДФЛ.ГодДекларацииПоУмолчанию(),1,1);
	КонецЕсли;
	
	Декларация3НДФЛВыбраннаяФорма = Параметры.мВыбраннаяФорма;
	
	// Создание структуры, заполненной параметрами отчета
	ДопРеквизитыФормы = Отчеты.РегламентированныйОтчет3НДФЛ.СтруктураРеквизитовФормы(
				Организация, КонецПериодаОтчета, Декларация3НДФЛВыбраннаяФорма, Параметры);
	
	// Иконки для оформления списков
	МакетИконок = ОбъектЭтогоОтчета().ПолучитьМакет("Иконки");
	ДопРеквизитыФормы.Вставить("ИконкиСписков", Новый Структура);
	Для каждого Рисунок Из МакетИконок.Рисунки Цикл
		ДопРеквизитыФормы.ИконкиСписков.Вставить(рисунок.Имя, рисунок.Картинка);
	КонецЦикла;
	
	// Прочие параметры для сокращения серверных вызовов
	ДопРеквизитыФормы.Вставить("ВидКонтактнойИнформации_АдресВРФ", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ДопРеквизитыФормы.Вставить("ПустаяСтрана", Справочники.СтраныМира.ПустаяСсылка());
	ДопРеквизитыФормы.Вставить("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	ДопРеквизитыФормы.Вставить("ПределыВычетов", Отчеты.РегламентированныйОтчет3НДФЛ.ПределыВычетов(КонецПериодаОтчета));
	
КонецПроцедуры

// Устанавливает и возвращает серверную переменную 
&НаСервере
Функция ОбъектЭтогоОтчета()

	Если ЭтотОтчет = Неопределено Тогда
		//ЭтотОтчет = РеквизитФормыВЗначение("Отчет");
		ЭтотОтчет = Отчеты.РегламентированныйОтчет3НДФЛ;
	КонецЕсли;
	
	Возврат ЭтотОтчет;

КонецФункции


&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	// Элементы на странице 1
	Форма.Элементы.НомерКорректировки.Доступность = Форма.ВидДекларации > 0;
	Форма.Элементы.НалогоплательщикИНН.АвтоотметкаНезаполненного = Форма.НалогоплательщикКатегория <> "760";
	
	// Элементы на странице 2
	ПроверитьВидимостьЭлемента(Форма.Элементы.СтраницаПлатежиИностранца, 
		ЗначениеЗаполнено(Форма.НалогоплательщикСтрана) И Форма.НалогоплательщикСтрана <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	 
	ЕстьДокументыПредпринимателя = ЗначениеЗаполнено(Форма.НалогоплательщикКатегория) И Форма.НалогоплательщикКатегория <> "760";
	ЕстьДокументыФизЛица         = Ложь;
	ЕстьВычетыНаЖилье            = Ложь;
	ВычетыНаЖильеПрошлыхЛет      = Ложь;
	Для каждого СтрокаДокумента Из Форма.СписокДокументов Цикл
		Если СтрокаДокумента.ВидДокумента = "ДоходПредпринимателя" Тогда
			ЕстьДокументыПредпринимателя = Истина;
		Иначе
			ЕстьДокументыФизЛица         = Истина;
		КонецЕсли;
		Если СтрокаДокумента.ВидДокумента = "ВычетИмущественный" Тогда
			ЕстьВычетыНаЖилье = Истина;
			Если Не СтрокаДокумента.СтруктураДокумента.ВычетПрименяетсяВпервые Тогда
				ВычетыНаЖильеПрошлыхЛет = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьВидимостьЭлемента(Форма.Элементы.СтраницаПлатежиПредпринимателя, ЕстьДокументыПредпринимателя);
	ПроверитьВидимостьЭлемента(Форма.Элементы.ГруппаДоходыПредпринимателя, ЕстьДокументыПредпринимателя);
	ПроверитьВидимостьЭлемента(Форма.Элементы.ГруппаДоходыФизЛица, ЕстьДокументыФизЛица);
	ПроверитьВидимостьЭлемента(Форма.Элементы.СтраницаВычетыНаЖилье, ЕстьВычетыНаЖилье);
	ПроверитьВидимостьЭлемента(Форма.Элементы.ГруппаВычетНаЖилье1, ЕстьВычетыНаЖилье И ВычетыНаЖильеПрошлыхЛет);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьВидимостьЭлемента(Элемент, Видимость)

	Если Элемент.Видимость <> Видимость Тогда
		Элемент.Видимость = Видимость;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикСтатусПриИзмененииЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПродолжитьЗаполнениеВручную();
		
	Иначе
		НалогоплательщикСтатус = ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезПомощникаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПродолжитьЗаполнениеВручную();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеВручную()

	ЗаписатьОтчетКлиент(Истина, Истина);
	
	ПараметрыФормы = ПараметрыФормыРеглОтчета();
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	ОткрытьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма.ФормаОтчета2020кв1", ПараметрыФормы);
	
	Закрыть();

КонецПроцедуры
 

&НаКлиенте
Процедура НалогоплательщикФамилияВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Если  ВыбранноеЗначение = Неопределено Или ТипЗнч(ВыбранноеЗначение.Значение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СвойстваНалогоплательщика = ВыбранноеЗначение.Значение;
	НалогоплательщикФамилия   = СвойстваНалогоплательщика.Фамилия;
	НалогоплательщикИмя       = СвойстваНалогоплательщика.Имя;
	НалогоплательщикОтчество  = СвойстваНалогоплательщика.Отчество;
	НалогоплательщикИНН       = СвойстваНалогоплательщика.ИНН;
	
	НалогоплательщикДатаРождения  = СвойстваНалогоплательщика.ДатаРождения;
	НалогоплательщикМестоРождения = СвойстваНалогоплательщика.МестоРождения;
	НалогоплательщикСтрана        = СвойстваНалогоплательщика.Гражданство;
	
	ДокументКодВида       = СвойстваНалогоплательщика.КодВидаДокумента;
	ДокументСерияИНомер   = СвойстваНалогоплательщика.ДокументСерияНомер;
	ДокументДатаВыдачи    = СвойстваНалогоплательщика.ДокументДатаВыдачи;
	ДокументКемВыдан      = СвойстваНалогоплательщика.ДокументМестоВыдачи;
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого ВыделеннаяСтрока Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
			УдалитьСтрокуДокумента(ЭтотОбъект, ВыделеннаяСтрока);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСписокДокументов(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Решение проблемы с передачей таблиц значений с сервера на клиент
&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуФормыСпискомДокументов(ТаблицаФормы, ТаблицаПомощника)

	ТаблицаФормы.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаПомощника Цикл
		
		СтрокаФормы = ТаблицаФормы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаТаблицы, , "СтруктураДокумента");
		СтрокаФормы.СтруктураДокумента = Обработки.ПомощникЗаполнения3НДФЛ.СтруктураДокументаСХранилищамиТаблиц(СтрокаТаблицы.СтруктураДокумента);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокНалогоплательщиковЭтойПрограммы()

	Возврат Отчеты.РегламентированныйОтчет3НДФЛ.СписокВыбораНалогоплательщиков();

КонецФункции

&НаСервере
Процедура ОбновитьЗаголовок()

	ФИО = "";
	Если ЗначениеЗаполнено(НалогоплательщикФамилия) Тогда
		ФИО = СокрЛП(НалогоплательщикФамилия) + ?(ПустаяСтрока(НалогоплательщикИмя), "",
				" " + Лев(СокрЛ(НалогоплательщикИмя), 1) + "." + ?(ПустаяСтрока(НалогоплательщикОтчество), "", Лев(СокрЛ(НалогоплательщикОтчество), 1) + "."));
	КонецЕсли;
	
	Заголовок = СтрШаблон(НСтр("ru='3-НДФЛ за %1 год: %2'"), Формат(ГодОтчета , "ЧДЦ=; ЧГ="), Фио); 

КонецПроцедуры

 

#КонецОбласти
