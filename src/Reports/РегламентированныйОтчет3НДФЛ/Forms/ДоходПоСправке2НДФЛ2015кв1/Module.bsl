&НаСервере 
Перем ЭтотОтчет;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КонтейнерДокумента = Параметры.СтрокаДокумента;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, КонтейнерДокумента, "СтавкаНалога,СуммаДохода,СуммаНалогаНачислено,
				|ИДДокумента,СуммаНалогаУдержано,СуммаВычета,ПредставлениеДокумента,ИспользоватьДляСтандартныхВычетов");
	НалогоплательщикСтатус = Параметры.НалогоплательщикСтатус;
	ГодОтчета              = Параметры.ГодОтчета;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, КонтейнерДокумента.ШапкаДокумента, "ИсточникНаименование,ИсточникИНН,
				|ИсточникКПП,ИсточникОКАТО,НалоговаяБаза");
				
	Если ТипЗнч(КонтейнерДокумента.Строки2НДФЛ) = Тип("СписокЗначений") Тогда
		Для каждого СтрокаТабЧасти Из КонтейнерДокумента.Строки2НДФЛ Цикл
			НоваяСтрока = Строки2НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧасти.Значение);
		КонецЦикла;
	КонецЕсли;
	 
	Если ТипЗнч(КонтейнерДокумента.Вычеты2НДФЛ) = Тип("СписокЗначений") Тогда
		Для каждого СтрокаТабЧасти Из КонтейнерДокумента.Вычеты2НДФЛ Цикл
			НоваяСтрока = Вычеты2НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧасти.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СтавкаНалога.СписокВыбора.Очистить();
	Если НалогоплательщикСтатус = 2 Тогда
		Элементы.СтавкаНалога.СписокВыбора.Добавить(30, "30 %");
		Элементы.СтавкаНалога.СписокВыбора.Добавить(15, "15 %");
		Элементы.СтавкаНалога.СписокВыбора.Добавить(13, "13 %");
	Иначе
		Элементы.СтавкаНалога.СписокВыбора.Добавить(13, "13 %");
		Элементы.СтавкаНалога.СписокВыбора.Добавить(35, "35 %");
		Элементы.СтавкаНалога.СписокВыбора.Добавить(9, " 9 %");
	КонецЕсли;
	
	ПрежняяСтавкаНалога = СтавкаНалога;
	
	ОбновитьТаблицыКодовДоходовИВычетов();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникИННПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаПриИзменении(Элемент)
	
	Если СтавкаНалога = ПрежняяСтавкаНалога ИЛИ (Строки2НДФЛ.Количество() = 0 И Вычеты2НДФЛ.Количество() = 0) Тогда
		Если НалогоплательщикСтатус <> 1 ИЛИ СтавкаНалога <> 13 Тогда
			ИспользоватьДляСтандартныхВычетов = Ложь;
		КонецЕсли;
		ПрежняяСтавкаНалога = СтавкаНалога;
		ИзменениеСтавкиНалогаСервер();
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='После изменения ставки разделы 3 и 4 будут очищены.
			|Изменить ставку налога?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Оповещение = Новый ОписаниеОповещения("СтавкаНалогаПриИзмененииЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru='Справка 2-НДФЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 
	
КонецПроцедуры
 
&НаКлиенте
Процедура НалоговаяБазаПриИзменении(Элемент)
	СуммаВычета = Макс(0, СуммаДохода - НалоговаяБаза);
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСтроки2НДФЛ

&НаКлиенте
Процедура Строки2НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтроки = Элементы.Строки2НДФЛ.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		МаксМесяц = 0;
		Для каждого СтрокаСправки Из Строки2НДФЛ Цикл
			Если СтрокаСправки.Месяц > МаксМесяц Тогда
				МаксМесяц = СтрокаСправки.Месяц;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСтроки.Месяц = ?(МаксМесяц < 12, МаксМесяц + 1, МаксМесяц);
		
		Если НЕ Копирование Тогда
			
			Если СтавкаНалога = 13 ИЛИ СтавкаНалога = 30 Тогда
				ДанныеСтроки.КодДохода = "2000";
			ИначеЕсли СтавкаНалога = 35 Тогда
				ДанныеСтроки.КодДохода = "3020";
			ИначеЕсли СтавкаНалога = 9 ИЛИ СтавкаНалога = 15 Тогда
				ДанныеСтроки.КодДохода = "1010";
				Если СтавкаНалога = 9 Тогда
					ДанныеСтроки.КодыВычетов = "601";
				КонецЕсли;
			КонецЕсли;
			 
		КонецЕсли;
		 
		
	КонецЕсли;
	 
КонецПроцедуры
 
&НаКлиенте
Процедура Строки2НДФЛКодДоходаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Строки2НДФЛ.ТекущиеДанные;
	ПриИзмененииКодаДоходаКлиент(ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура Строки2НДФЛКодДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКодов", "КодыДоходов");
	ПараметрыФормы.Вставить("ТаблицаКодов", ТаблицаВХранилище("КодыДоходов"));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИДСтроки", Элементы.Строки2НДФЛ.ТекущаяСтрока);
	
	Оповещение = Новый ОписаниеОповещения("Строки2НДФЛКодДоходаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ДоходПоСправке2НДФЛ2015кв1", "ВыборКодаДоходаИВычета"), ПараметрыФормы, Элемент, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Строки2НДФЛКодВычетаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Строки2НДФЛ.ТекущиеДанные;
	
	ПриИзмененииКодаВычетаКлиент(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Строки2НДФЛКодВычетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.Строки2НДФЛ.ТекущиеДанные;
	Если НЕ ПустаяСтрока(ДанныеСтроки.КодДохода) И ПустаяСтрока(ДанныеСтроки.КодыВычетов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если НЕ ПустаяСтрока(ДанныеСтроки.КодыВычетов) Тогда
		ПараметрыФормы.Вставить("ВидКодов", "КодыВычетов");
	КонецЕсли; 
	ПараметрыФормы.Вставить("ТаблицаКодов", ТаблицаВычетовВХранидище(ДанныеСтроки.КодыВычетов));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИДСтроки", Элементы.Строки2НДФЛ.ТекущаяСтрока);
	
	Оповещение = Новый ОписаниеОповещения("Строки2НДФЛКодВычетаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ДоходПоСправке2НДФЛ2015кв1", "ВыборКодаДоходаИВычета"), ПараметрыФормы, Элемент, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Строки2НДФЛПриИзменении(Элемент)
	ПересчитатьИтоги();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыВычеты2НДФЛ

&НаКлиенте
Процедура Вычеты2НДФЛКодВычетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидКодов", "КодыВычетов");
	ПараметрыФормы.Вставить("ТаблицаКодов", ТаблицаВычетовВХранидище(""));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИДСтроки", Элементы.Вычеты2НДФЛ.ТекущаяСтрока);
	
	Оповещение = Новый ОписаниеОповещения("Вычеты2НДФЛКодВычетаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ДоходПоСправке2НДФЛ2015кв1", "ВыборКодаДоходаИВычета"), ПараметрыФормы, Элемент, Истина, , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Вычеты2НДФЛКодВычетаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Вычеты2НДФЛ.ТекущиеДанные;
	ПриИзмененииКодаСоцИмущВычета(ДанныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура Вычеты2НДФЛПриИзменении(Элемент)
	ПересчитатьИтоги();
КонецПроцедуры


#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьДокументКлиент();
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ИсточникКПП.АвтоотметкаНезаполненного = НЕ ПустаяСтрока(Форма.ИсточникИНН) И СтрДлина(Форма.ИсточникИНН) < 12; 
	Элементы.ИспользоватьДляСтандартныхВычетов.Доступность = Форма.НалогоплательщикСтатус = 1 И Форма.Ставканалога = 13;

КонецПроцедуры

&НаСервере
Функция ОбъектЭтогоОтчета()

	Если ЭтотОтчет = Неопределено Тогда
		ЭтотОтчет = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ЭтотОтчет;

КонецФункции


&НаСервере
Процедура ОбновитьТаблицыКодовДоходовИВычетов()

	ОбъетОтчета = ОбъектЭтогоОтчета();
	ВсеКодыВычетов.Загрузить(ОбъетОтчета.ТаблицаКодовВычетов(НалогоплательщикСтатус, ГодОтчета, СтавкаНалога));
	КодыДоходов.Загрузить(ОбъетОтчета.ТаблицаКодовДоходов(НалогоплательщикСтатус, ГодОтчета, СтавкаНалога, Истина));

КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ИзменениеСтавкиНалогаСервер();
		
	Иначе
		
		СтавкаНалога = ПрежняяСтавкаНалога;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменениеСтавкиНалогаСервер()

	Вычеты2НДФЛ.Очистить();
	Строки2НДФЛ.Очистить();
	
	ОбновитьТаблицыКодовДоходовИВычетов();
	
	ПрежняяСтавкаНалога = СтавкаНалога;
	
	Если НалогоплательщикСтатус <> 1 ИЛИ СтавкаНалога <> 13 Тогда
		ИспользоватьДляСтандартныхВычетов = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ТаблицаВХранилище(Таблица)

	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		Возврат ПоместитьВоВременноеХранилище(Таблица);
	Иначе
		Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект[Таблица].Выгрузить());
	КонецЕсли;

КонецФункции

&НаСервере
Функция ТаблицаВычетовВХранидище(ДопустимыеКоды)

	Если ПустаяСтрока(ДопустимыеКоды) Тогда
		Возврат ТаблицаВХранилище("ВсеКодыВычетов");
	КонецЕсли;
	
	ТаблицаВычетов = ВсеКодыВычетов.Выгрузить(Новый Массив);
	ТаблицаВычетов.Очистить();
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДопустимыеКоды, ",", Истина);
	Для каждого Слово Из МассивСлов Цикл
		СтрокиВычетов = ВсеКодыВычетов.НайтиСтроки(Новый Структура("Код", Слово));
		Если СтрокиВычетов.Количество() > 0 Тогда
			НоваяСтрока = ТаблицаВычетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиВычетов[0]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВХранилище(ТаблицаВычетов);

КонецФункции
 
&НаКлиенте
Процедура Строки2НДФЛКодДоходаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		СтрокаДохода = Строки2НДФЛ.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки); 
		Если СтрокаДохода <> Неопределено Тогда
			СтрокаДохода.КодДохода = Результат.Код;
			ПриИзмененииКодаДоходаКлиент(СтрокаДохода);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКодаДоходаКлиент(ДанныеСтроки)

	// Проверяем правильность кода
	Если ЗначениеЗаполнено(ДанныеСтроки.КодДохода) Тогда
		
		СтрокиКода = КодыДоходов.НайтиСтроки(Новый Структура("Код", ДанныеСтроки.КодДохода));
		Если СтрокиКода.Количество() = 0 Тогда
			
			ДанныеСтроки.КодВычета   = "";
			ДанныеСтроки.КодыВычетов = "";
			ДанныеСтроки.СуммаВычета = 0;
			Сообщить("Возможно, код дохода указан неверно. Проверьте код дохода и ставку налога.");
			
		Иначе
			
			СтрокаКода = СтрокиКода[0];
			ДанныеСтроки.КодыВычетов = СтрокаКода.КодыВычетов;
			Если ЗначениеЗаполнено(ДанныеСтроки.КодВычета) И Найти(ДанныеСтроки.КодыВычетов + ",", ДанныеСтроки.КодВычета + ",") = 0 Тогда
				ДанныеСтроки.КодВычета = "";
			КонецЕсли;
			
			Если ПустаяСтрока(ДанныеСтроки.КодВычета) Тогда
				ДанныеСтроки.СуммаВычета = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДанныеСтроки.КодВычета   = "";
		ДанныеСтроки.КодыВычетов = "";
		ДанныеСтроки.СуммаВычета = 0;
		
	КонецЕсли;
	 

КонецПроцедуры

&НаКлиенте
Процедура Строки2НДФЛКодВычетаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		СтрокаДохода = Строки2НДФЛ.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки); 
		Если СтрокаДохода <> Неопределено Тогда
			СтрокаДохода.КодВычета = Результат.Код;
			ПриИзмененииКодаВычетаКлиент(СтрокаДохода);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКодаВычетаКлиент(ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.КодВычета) И ЗначениеЗаполнено(ДанныеСтроки.КодДохода) И Найти(ДанныеСтроки.КодыВычетов + ",", ДанныеСтроки.КодВычета + ",") = 0 Тогда
		
		Сообщить("Возможно, код код вычета указан неверно. Проверьте код вычета, а так же код дохода и ставку налога.");
		
	КонецЕсли;
	
	Если ПустаяСтрока(ДанныеСтроки.КодВычета) Тогда
		ДанныеСтроки.СуммаВычета = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКодаСоцИмущВычета(ДанныеСтроки)

	Если ПустаяСтрока(ДанныеСтроки.КодВычета) Тогда
		ДанныеСтроки.СуммаВычета = 0;
	КонецЕсли;
	

КонецПроцедуры
 
&НаКлиенте
Процедура Вычеты2НДФЛКодВычетаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		СтрокаДохода = Вычеты2НДФЛ.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки); 
		Если СтрокаДохода <> Неопределено Тогда
			СтрокаДохода.КодВычета = Результат.Код;
			ПриИзмененииКодаСоцИмущВычета(СтрокаДохода);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоги()

	СуммаДохода = Строки2НДФЛ.Итог("СуммаДохода");
	СуммаВычета = Строки2НДФЛ.Итог("СуммаВычета") + Вычеты2НДФЛ.Итог("СуммаВычета");
	НалоговаяБаза = Макс(0, СуммаДохода - СуммаВычета);
	СуммаНалогаНачислено = Окр(НалоговаяБаза * СтавкаНалога / 100, 0);
	СуммаНалогаУдержано = СуммаНалогаНачислено;

КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьДокументКлиент()

	Если НЕ ДанныеЗаполненыКорректно() Тогда
		ПоказатьВопросНаЗаписьСОшибками();
	Иначе
		ЗаписатьДокументЗавершение();
	КонецЕсли; 

КонецПроцедуры
 


// Проверка и запись изменений

&НаКлиенте
Процедура ЗаписатьДокументЗавершение()

	СтрокаСвойст = "ИДДокумента,СтавкаНалога,СуммаДохода,
			|СуммаНалогаНачислено,СуммаНалогаУдержано,СуммаВычета,ПредставлениеДокумента,
			|ИспользоватьДляСтандартныхВычетов";
	Результат = Новый Структура(СтрокаСвойст + ",ШапкаДокумента,Строки2НДФЛ,Вычеты2НДФЛ");

	ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект, СтрокаСвойст);
	Результат.ПредставлениеДокумента = "2-НДФЛ: " + СокрЛП(ИсточникНаименование);
	
	Результат.Вставить("ШапкаДокумента", Новый Структура);
	Результат.ШапкаДокумента.Вставить("ИсточникНаименование", ИсточникНаименование);
	Результат.ШапкаДокумента.Вставить("ИсточникИНН",   ИсточникИНН);
	Результат.ШапкаДокумента.Вставить("ИсточникКПП",   ИсточникКПП);
	Результат.ШапкаДокумента.Вставить("ИсточникОКАТО", ИсточникОКАТО);
	Результат.ШапкаДокумента.Вставить("НалоговаяБаза", НалоговаяБаза);
	
	Результат.Вставить("Строки2НДФЛ", Новый СписокЗначений);
	Для каждого СтрокаТабЧасти Из Строки2НДФЛ Цикл
		СтруктураСтроки = Новый Структура("Месяц,КодДохода,СуммаДохода,КодВычета,КодыВычетов,СуммаВычета");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабЧасти);
		ЭлементСтроки = Результат.Строки2НДФЛ.Добавить(СтруктураСтроки);
	КонецЦикла;
	 
	Результат.Вставить("Вычеты2НДФЛ", Новый СписокЗначений);
	Для каждого СтрокаТабЧасти Из Вычеты2НДФЛ Цикл
		СтруктураСтроки = Новый Структура("КодВычета,СуммаВычета");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабЧасти);
		ЭлементСтроки = Результат.Вычеты2НДФЛ.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Модифицированность = Ложь;
	
	Закрыть(Результат);

КонецПроцедуры

&НаКлиенте
Функция ДанныеЗаполненыКорректно()

	ОчиститьСообщения();
	
	// Удаляем последние пустые строки
	КоличествоСтрок = Строки2НДФЛ.Количество();
	СтрокаПустая = КоличествоСтрок > 0 И НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].КодДохода)
				И НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].СуммаДохода)
				И НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].КодВычета)
				И НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].СуммаВычета);
	Пока СтрокаПустая Цикл
	
		Строки2НДФЛ.Удалить(Строки2НДФЛ[КоличествоСтрок - 1]);
		КоличествоСтрок = Строки2НДФЛ.Количество();
		СтрокаПустая = КоличествоСтрок > 0 И (НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].КодДохода)
					И НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].СуммаДохода)
					И НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].КодВычета)
					И НЕ ЗначениеЗаполнено(Строки2НДФЛ[КоличествоСтрок - 1].СуммаВычета));
	
	КонецЦикла; 
	
	КоличествоСтрок = Вычеты2НДФЛ.Количество();
	СтрокаПустая = КоличествоСтрок > 0 И НЕ ЗначениеЗаполнено(Вычеты2НДФЛ[КоличествоСтрок - 1].КодВычета)
							И НЕ ЗначениеЗаполнено(Вычеты2НДФЛ[КоличествоСтрок - 1].СуммаВычета);
	Если СтрокаПустая Тогда
		
		Вычеты2НДФЛ.Удалить(Вычеты2НДФЛ[КоличествоСтрок - 1]);
		КоличествоСтрок = Вычеты2НДФЛ.Количество();
		СтрокаПустая = КоличествоСтрок > 0 И НЕ ЗначениеЗаполнено(Вычеты2НДФЛ[КоличествоСтрок - 1].КодВычета)
								И НЕ ЗначениеЗаполнено(Вычеты2НДФЛ[КоличествоСтрок - 1].СуммаВычета);
		
	КонецЕсли; 
	
	// Проверяем шапку справки
	КоллекцияОшибок = Неопределено;
	
	Если СтрДлина(ИсточникИНН) <> 10 И СтрДлина(ИсточникИНН) <> 12 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "ИсточникИНН", 
				НСтр("ru = 'ИНН указан неверно (длина ИНН должна быть равной 10 или 12 символам)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "");
	КонецЕсли; 
	Если СтрДлина(ИсточникИНН) = 10 И СтрДлина(ИсточникКПП) <> 9 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "ИсточникКПП", 
				НСтр("ru = 'КПП указан неверно (длина КПП должна быть равной 9 символам)'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "");
	КонецЕсли; 
	Если (СтрДлина(ИсточникИНН) = 12 ИЛИ СтрДлина(ИсточникИНН) = 0) И СтрДлина(ИсточникКПП) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "ИсточникКПП", 
				НСтр("ru = 'Возможно, напрасно указан КПП - для физических лиц он не нужен'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "");
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ИсточникОКАТО) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "ИсточникОКАТО", 
				НСтр("ru = 'Не указан код ОКТМО налогового агента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ИсточникНаименование) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "ИсточникНаименование", 
				НСтр("ru = 'Не указано наименование организации или ИПбОЮЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "");
	КонецЕсли; 
	
	// Проверяем оставшиеся строки
	НомерСтроки = 0;
	Для Каждого СтрокаСправки Из Строки2НДФЛ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСправки.Месяц) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "Строки2НДФЛ[%1].Месяц", 
					НСтр("ru = 'Не указан номер месяца'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "", НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаСправки.КодДохода) И  НЕ ЗначениеЗаполнено(СтрокаСправки.КодВычета) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "Строки2НДФЛ[%1].КодДохода", 
					НСтр("ru = 'Не указан код дохода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "", НомерСтроки);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СтрокаСправки.КодДохода) И НЕ ЗначениеЗаполнено(СтрокаСправки.СуммаДохода) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "Строки2НДФЛ[%1].СуммаДохода", 
					НСтр("ru = 'Не указана сумма дохода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "", НомерСтроки);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаСправки.КодВычета) ИЛИ ЗначениеЗаполнено(СтрокаСправки.СуммаВычета) Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаСправки.КодВычета) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "Строки2НДФЛ[%1].КодВычета", 
						НСтр("ru = 'Не указан код вычета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "", НомерСтроки);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаСправки.СуммаВычета) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "Строки2НДФЛ[%1].СуммаВычета", 
						НСтр("ru = 'Не указана сумма вычета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "", НомерСтроки);
			КонецЕсли; 
			
		КонецЕсли; 
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла; 
	
	НомерСтроки = 0;
	Для Каждого СтрокаСправки Из Вычеты2НДФЛ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаСправки.КодВычета) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "Вычеты2НДФЛ[%1].КодВычета", 
					НСтр("ru = 'Не указан код вычета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "", НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаСправки.СуммаВычета) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КоллекцияОшибок, "Вычеты2НДФЛ[%1].СуммаВычета", 
					НСтр("ru = 'Не указана сумма вычета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), "", НомерСтроки);
		КонецЕсли; 
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла; 
	
	
	Если КоллекцияОшибок = Неопределено Тогда
		Возврат Истина;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КоллекцияОшибок, Ложь);
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросНаЗаписьСОшибками()

	ТекстВопроса = НСтр("ru = 'При проверке обнаружены ошибки, которые не позволят заполнить машиночитаемый бланк декларации.
		|Хотите записать информацию с ошибками, чтобы исправить их в будущем?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить("Записать", НСтр("ru = 'Записать с ошибками'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Кнопки.Добавить("Отмена", НСтр("ru = 'Исправить ошибки сейчас'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросНаЗаписьСОшибкамиЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , "Отмена", НСтр("ru = 'Помощник заполнения 3-НДФЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())); 

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросНаЗаписьСОшибкамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = "Записать" Тогда
		ЗаписатьДокументЗавершение();
	КонецЕсли; 

КонецПроцедуры
 

#КонецОбласти