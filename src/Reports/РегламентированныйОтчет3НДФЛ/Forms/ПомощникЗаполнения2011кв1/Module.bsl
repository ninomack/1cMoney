////////////////////////////////////////////////////////////////////////////////
// Модуль формы <ПомощникЗаполнения2011кв1>
//	Помощник заполнения 3-НДФЛ. Сохраняет данные помощника вместе с данными самого отчета.
//	Отсутствие данных помощника означает, что отчет заполнялся вручную.
//  
//Параметры формы:  
//	мСохраненныйДок - ДокументСсылка.РегламентированныйОтчет - Документ, в котором сохранены данные отчета 
//	мКопируемыйДок  - ДокументСсылка.РегламентированныйОтчет - Документ, из которого нужно скопировать\обработать данные помощника
//  
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтрокаФИО = ПолучитьФИО(НалогоплательщикФамилия, НалогоплательщикИмя, НалогоплательщикОтчество);
	Заголовок = "Декларация 3-НДФЛ за " + Формат(ГодОтчета, "ЧГ=")  + " год"
		+ ?(ЗначениеЗаполнено(СтрокаФИО), ". " + СтрокаФИО, "");
		
	ПересчитатьСуммуВычетаНаФорме();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗапросСохраненияЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГруппаПанельСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Доходы Тогда
		РасчитатьИтогиНаСтраницеДоходы(ЭтотОбъект);
		РасчитатьИтогиНаСтраницеВычеты(ЭтотОбъект);
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Доход2НДФЛ Тогда
		Доход2НДФЛ_ОбновитьЗаголовкиГрупп();
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Вычеты Тогда
		РасчитатьИтогиНаСтраницеВычеты(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры
 


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ <СтруктураОтчета>

&НаКлиенте
Процедура СтруктураОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		Модифицированность = Истина;
	КонецЕсли; 
	
	Отказ = Истина;
	
	СтрокаСтруктуры = СтруктураОтчета.НайтиПоИдентификатору(Элементы.СтруктураОтчета.ТекущиеДанные.ПолучитьИдентификатор());
	РодительСтроки  = СтрокаСтруктуры.ПолучитьРодителя();
	СтрокаГруппы    = ?(РодительСтроки = Неопределено, СтрокаСтруктуры, РодительСтроки);
	
	Если НЕ СтрокаСтруктуры.РазрешеноДобавлять И РодительСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Копирование И НЕ СтрокаСтруктуры.РазрешеноКопировать Тогда
		Возврат;
	КонецЕсли; 
	
	Если Копирование Тогда
		СкопироватьДокументСтруктуры(СтрокаСтруктуры, РодительСтроки);
	Иначе
		ВыбратьВидДокументаИДобавитьВСтруктуру(СтрокаГруппы);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураОтчетаПередУдалением(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		Модифицированность = Истина;
	КонецЕсли; 
	
	СтрокаСтруктуры = Элементы.СтруктураОтчета.ТекущиеДанные;
	Отказ  = Истина;
	Если НЕ СтрокаСтруктуры.РазрешеноУдалять Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Удалить можно только записи о доходах или вычетах.'"));
		Возврат;
	КонецЕсли; 
	
	Удалить(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураОтчетаПриАктивизацииСтроки(Элемент)
	
	СтрокаСтруктуры = Элементы.СтруктураОтчета.ТекущиеДанные;
	Если ТекущаяСтрокаСтруктуры = СтрокаСтруктуры.ПолучитьИдентификатор() Тогда
		Возврат;
	КонецЕсли; 
	ТекущаяСтрокаСтруктуры = СтрокаСтруктуры.ПолучитьИдентификатор();
	
	Если СтрокаСтруктуры <> Неопределено И Лев(СтрокаСтруктуры.ИДЭлемента, 1) = "!" Тогда
		ВыбратьВидДокументаИДобавитьВСтруктуру(СтрокаСтруктуры);
	Иначе
		ВывестиСтраницуОтчета();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураОтчетаПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаСтруктуры = СтруктураОтчета.НайтиПоИдентификатору(Строка);
	СтрокиСостава = СтрокаСтруктуры.ПолучитьЭлементы();
	Если Лев(СтрокиСостава[0].ИДЭлемента, 1) = "!" Тогда
		Отказ = Истина;
		ВыбратьВидДокументаИДобавитьВСтруктуру(СтрокаСтруктуры);
	КонецЕсли; 
	
КонецПроцедуры



// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <ТитульныйЛист>
#Область ТитульныйЛист

&НаКлиенте
Процедура ВидДекларацииПриИзменении(Элемент)
	
	Элементы.НомерКорректировки.Доступность = ВидДекларации = 1;
	Модифицированность = Истина;
	Если ВидДекларации = 1 Тогда
		НомерКорректировки = 1;
	Иначе
		НомерКорректировки = 0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ГодОтчетаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтрокаФИО = ПолучитьФИО(НалогоплательщикФамилия, НалогоплательщикИмя, НалогоплательщикОтчество);
	Заголовок = "Декларация 3-НДФЛ за " + Формат(ГодОтчета, "ЧГ=")  + " год"
		+ ?(ЗначениеЗаполнено(СтрокаФИО), ". " + СтрокаФИО, "");
	ОбновитьСпискиВыбораПоГодуОчтета();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикФамилияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТитульныйЛист_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНалогоплательщикаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПриИзмененииРезидентаСервер();
	ТитульныйЛист_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорияНалогоплательщикаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТитульныйЛист_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("КодИФНС", ?(ЗначениеЗаполнено(Элемент.ТекстРедактирования), Элемент.ТекстРедактирования, КодИФНС));
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборНалоговойИнспекции"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		КодИФНС = ВыбранноеЗначение.Код;
		НаименованиеИФНС = ВыбранноеЗначение.Наименование;
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если КодИФНС = "" Тогда
		НаименованиеИФНС = НСтр("ru = '<Инспекция не выбрана>'") ;
	КонецЕсли; 
	
	КодИФНСПриИзмененииНаСервере(КодИФНС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <ПерсональныеДанные>
#Область ПерсональныеДанные

&НаКлиенте
Процедура СтранаГражданстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить("", НСтр("ru = 'Без гражданства'"));
	ДанныеВыбора.Добавить("643", "РОССИЯ");
	ДанныеВыбора.Добавить("112", "БЕЛАРУСЬ");
	ДанныеВыбора.Добавить("398", "КАЗАХСТАН");
	ДанныеВыбора.Добавить("804", "УКРАИНА");
	ДанныеВыбора.Добавить("Выбрать", НСтр("ru = 'Выбрать другую страну...'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаГражданстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = "Выбрать" Тогда
		ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
				|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения", 
				НСтр("ru = 'Код'") , НСтр("ru = 'Стрнана'"), НСтр("ru = 'Выбор страны гражданства'"),
				"СтраныМира", "СписокСтран", "КодСтраныГражданства", КодСтраныГражданства);
		ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	ИначеЕсли ВыбранноеЗначение = "" Тогда
		КодСтраныГражданства = "";
		СтранаГражданства = НСтр("ru = 'Без гражданства'");
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		КодСтраныГражданства = ВыбранноеЗначение;
		Если КодСтраныГражданства = "643" Тогда 
			СтранаГражданства = "РОССИЯ"
		ИначеЕсли КодСтраныГражданства = "112" Тогда 
			СтранаГражданства = "БЕЛАРУСЬ"
		ИначеЕсли КодСтраныГражданства = "398" Тогда 
			СтранаГражданства = "КАЗАХСТАН"
		ИначеЕсли КодСтраныГражданства = "804" Тогда 
			СтранаГражданства = "УКРАИНА"
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		КодСтраныГражданства = ВыбранноеЗначение.Код;
		СтранаГражданства = ВыбранноеЗначение.Наименование;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДокументаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ЗначениеЗаполнено(КодВидаДокумента) Тогда
		КодВидаДокументаПриИзмененииСервер();
	Иначе
		НаименованиеВидаДокумента = "<Вид документа не указан>";
	КонецЕсли; 
	ПерсональныеДанные_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяФормыСписка = ?(Год(ДатаПодписи) < 2014, "Списки2011кв1", "Списки2014кв1");
	ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
			|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения", 
			, НСтр("ru = 'Вид документа'"), НСтр("ru = 'Выбор вида документа, удостоверяющего личность'"),
			ИмяФормыСписка, "КодВидаДокумента", "КодВидаДокумента", КодВидаДокумента);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		КодВидаДокумента = ВыбранноеЗначение.Код;
		НаименованиеВидаДокумента = ВыбранноеЗначение.Наименование;
		Модифицированность = Истина;
	КонецЕсли; 
	ПерсональныеДанные_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияИНомерДокументаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПерсональныеДанные_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВРФТипАдресаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.АдресЗаПределамиРФ.Видимость = АдресВРФТипАдреса = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВРФПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ЗначенияПолей = Новый СписокЗначений;
	Для Каждого ЭлементСтруктуры Из АдресВРФСтруктура Цикл
		ЗначенияПолей.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура("Заголовок,ЗначенияПолей,Представление,ВидКонтактнойИнформации",
			НСтр("ru = 'Адрес в РФ'"), ЗначенияПолей, АдресВРФПредставление, 
			СтруктураПредопределенныхЗначений.ВидКонтактнойИнформации_АдресВРФ);
	
	Оповещение = Новый ОписаниеОповещения("АдресВРФПредставлениеНачалоВыбораЗавершение", ЭтотОбъект);
	
	// ДЕНЬГИ
	// Замена устаревшей функции БСП:
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	// Конец ДЕНЬГИ
	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВРФПредставлениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПерсональныеДанные_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры
 
#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <Доходы>

&НаКлиенте
Процедура ДобавитьДокументДохода(Команда)
	
	СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[2];
	ВыбратьВидДокументаИДобавитьВСтруктуру(СтрокаСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычет(Команда)
	
	Если СтатусНалогоплательщика = 1 Тогда
		СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3];
		ВыбратьВидДокументаИДобавитьВСтруктуру(СтрокаСтруктуры);
	КонецЕсли; 
	
КонецПроцедуры



#Область Доход2НДФЛ

&НаКлиенте
Процедура ИсточникДоходаПриИзменении(Элемент)
	
	Элементы.СтруктураОтчета.ТекущиеДанные.Наименование = "2-НДФЛ" + ?(ЗначениеЗаполнено(ИсточникНаименование), ": " + ИсточникНаименование, "");
	Доход2НДФЛ_ОбновитьЗаголовкиГрупп();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьИтоги2НДФЛ();
	Доход2НДФЛ_ОбновитьЗаголовкиГрупп();
	Если СтавкаНалога <> 13 Тогда
		ИспользоватьДляСтандартныхВычетов = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьИтоги2НДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияМесяцПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтрокаДохода = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
	Если СтрокаДохода.Месяц > 12 Тогда
		СтрокаДохода.Месяц = 12;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Модифицированность = Истина;
	Если НоваяСтрока Тогда
		СтрокаДохода = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
		Если НЕ Копирование Тогда
			Если СтавкаНалога=9 ИЛи СтавкаНалога=15 Тогда
				СтрокаДохода.КодДохода = "1010";
			ИначеЕсли СтавкаНалога=35 Тогда
				СтрокаДохода.КодДохода = "2610";
			Иначе
				СтрокаДохода.КодДохода = "2000";
			КонецЕсли;
		КонецЕсли; 
		СтрокаДохода.Месяц = Мин(ДваНДФЛ_Начисления.Количество(), 12);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛВычетыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьИтоги2НДФЛ();
	Доход2НДФЛ_ОбновитьЗаголовкиГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛ_ИтогиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьИтоги2НДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияКодДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ИмяФормыСписка = ?(Год(ДатаПодписи) < 2014, "КодыДоходовИВычетов2011кв1", "КодыДоходовИВычетов2014кв1");
	ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
			|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения,
			|КодыВычетов,КодыДоходов,СтавкаНалога,СтатусНалогоплательщика", 
			НСтр("ru = 'Код'") , НСтр("ru = 'Вид дохода'"), НСтр("ru = 'Выбор вида дохода'"),
			ИмяФормыСписка, "КодыДоходов", "КодДохода", Элементы.ДваНДФЛНачисления.ТекущиеДанные.КодДохода,
			"", "", СтавкаНалога, СтатусНалогоплательщика);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияКодДоходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаНачисления = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
		СтрокаНачисления.КодДохода = ВыбранноеЗначение.Код;
		СтрокаНачисления.КодыВычетов = ВыбранноеЗначение.КодыВычетов;
		Если Найти(ВыбранноеЗначение.КодыВычетов + ",", СтрокаНачисления.КодВычета + ",") = 0 Тогда
			СтрокаНачисления.КодВычета = "";
			СтрокаНачисления.СуммаВычета = 0;
		КонецЕсли; 
	КонецЕсли; 
	ПересчитатьСуммуВычетаВСтроке2НДФЛ(СтрокаНачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияКодВычетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ИмяФормыСписка = ?(Год(ДатаПодписи) < 2014, "КодыДоходовИВычетов2011кв1", "КодыДоходовИВычетов2014кв1");
	ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
			|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения,
			|КодыВычетов,КодыДоходов,СтавкаНалога,СтатусНалогоплательщика", 
			НСтр("ru = 'Код'") , НСтр("ru = 'Вид вычета'"), НСтр("ru = 'Выбор вида вычета'"),
			ИмяФормыСписка, "КодыВычетов", "КодДохода", Элементы.ДваНДФЛНачисления.ТекущиеДанные.КодВычета,
			"", Элементы.ДваНДФЛНачисления.ТекущиеДанные.КодДохода, СтавкаНалога, СтатусНалогоплательщика);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияКодВычетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаНачисления = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
		СтрокаНачисления.КодВычета = ?(ВыбранноеЗначение.Код = "0", "", ВыбранноеЗначение.Код);
		Если СтрокаНачисления.КодВычета = "" Тогда
			СтрокаНачисления.СуммаВычета = 0;
		КонецЕсли; 
	КонецЕсли; 
	ПересчитатьСуммуВычетаВСтроке2НДФЛ(СтрокаНачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияКодДоходаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтрокаНачисления = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаНачисления.КодДохода) Тогда
		СтрокаНачисления.СуммаДохода   = 0;
		СтрокаНачисления.КодВычета     = "";
		СтрокаНачисления.СуммаВычета   = 0;
	Иначе
		СтруктураВидаДохода = ПолучитьВидДоходаПоКоду(СтрокаНачисления.КодДохода, СтавкаНалога);
		СтрокаНачисления.КодДохода = СтруктураВидаДохода.КодДохода;
		СтрокаНачисления.КодыВычетов = СтруктураВидаДохода.КодыВычетов;
		Если НЕ ЗначениеЗаполнено(СтрокаНачисления.КодДохода) Тогда
			СтрокаНачисления.СуммаДохода   = 0;
			СтрокаНачисления.КодВычета     = "";
			СтрокаНачисления.СуммаВычета   = 0;
		ИначеЕсли Найти(СтруктураВидаДохода.КодыВычетов + ",", СтрокаНачисления.КодВычета + ",") = 0 Тогда
			СтрокаНачисления.КодВычета     = "";
			СтрокаНачисления.СуммаВычета   = 0;
		КонецЕсли; 
	КонецЕсли; 
	ПересчитатьСуммуВычетаВСтроке2НДФЛ(СтрокаНачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияСуммаДоходаПриИзменении(Элемент)
	
	СтрокаНачисления = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
	ПересчитатьСуммуВычетаВСтроке2НДФЛ(СтрокаНачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияКодВычетаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтрокаНачисления = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаНачисления.КодДохода) ИЛИ НЕ ЗначениеЗаполнено(СтрокаНачисления.КодВычета) Тогда
		СтрокаНачисления.КодВычета     = "";
		СтрокаНачисления.СуммаВычета   = 0;
	Иначе
		СтруктураВидаВычета = ПолучитьВидВычетаПоКоду(СтрокаНачисления.КодВычета);
		СтрокаНачисления.КодВычета = СтруктураВидаВычета.КодВычета;
		Если НЕ ЗначениеЗаполнено(СтрокаНачисления.КодВычета) Тогда
			СтрокаНачисления.СуммаВычета   = 0;
		КонецЕсли; 
		ПересчитатьСуммуВычетаВСтроке2НДФЛ(СтрокаНачисления);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛНачисленияСуммаВычетаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтрокаНачисления = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаНачисления.КодДохода) ИЛИ НЕ ЗначениеЗаполнено(СтрокаНачисления.КодВычета) Тогда
		СтрокаНачисления.СуммаВычета   = 0;
	КонецЕсли; 
	ПересчитатьСуммуВычетаВСтроке2НДФЛ(СтрокаНачисления);
	
КонецПроцедуры


&НаКлиенте
Процедура ДваНДФЛВычетыКодВычетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ИмяФормыСписка = ?(Год(ДатаПодписи) < 2014, "КодыДоходовИВычетов2011кв1", "КодыДоходовИВычетов2014кв1");
	ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
			|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения,
			|КодыВычетов,КодыДоходов,СтавкаНалога,СтатусНалогоплательщика", 
			НСтр("ru = 'Код'") , НСтр("ru = 'Вид вычета'"), НСтр("ru = 'Выбор вида вычета'"),
			ИмяФормыСписка, "КодыВычетов", "КодДохода", Элементы.ДваНДФЛВычеты.ТекущиеДанные.КодВычета,
			"", "", СтавкаНалога, СтатусНалогоплательщика);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДваНДФЛВычетыКодВычетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаНачисления = Элементы.ДваНДФЛВычеты.ТекущиеДанные;
		СтрокаНачисления.КодВычета = ВыбранноеЗначение.Код;
		Если СтрокаНачисления.КодВычета = "" Тогда
			СтрокаНачисления.СуммаВычета = 0;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти



#Область ДоходПроизвольный

&НаКлиенте
Процедура ИсточникДохода1ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.СтруктураОтчета.ТекущиеДанные.Наименование = "Доход" + ?(ЗначениеЗаполнено(ИсточникНаименование), ": " + ИсточникНаименование, "");
	
КонецПроцедуры

&НаКлиенте
Процедура КодДоходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ИмяФормыСписка = ?(Год(ДатаПодписи) < 2014, "КодыДоходовИВычетов2011кв1", "КодыДоходовИВычетов2014кв1");
	ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
			|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения,
			|КодыВычетов,КодыДоходов,СтавкаНалога,СтатусНалогоплательщика", 
			НСтр("ru = 'Код'") , НСтр("ru = 'Вид дохода'"), НСтр("ru = 'Выбор вида дохода'"),
			ИмяФормыСписка, "КодыДоходов", "КодДохода", КодДохода,
			"", "", Неопределено, СтатусНалогоплательщика);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодДоходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		КодДохода            = ВыбранноеЗначение.Код;
		НаименованиеДохода   = ВыбранноеЗначение.Наименование;
		КодыВычетов          = ВыбранноеЗначение.КодыВычетов;
		СтавкаНалога         = ВыбранноеЗначение.СтавкаНалога;
		Если Найти(ВыбранноеЗначение.КодыВычетов + ",", КодВычета + ",") = 0 Тогда
			СтавкаНалога = 13;
			КодВычета = "";
			НаименованиеВычета = "";
			СуммаВычета = 0;
		КонецЕсли; 
		ПересчитатьСуммуВычетаНаФорме();
		ДоходПроизвольныйИзменитьДоступностьВычета(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КодДоходаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если НЕ ЗначениеЗаполнено(КодДохода) Тогда
		СтавкаНалога = 13;
		СуммаДохода   = 0;
		КодВычета     = "";
		НаименованиеВычета = "";
		СуммаВычета   = 0;
	Иначе
		СтруктураВидаДохода = ПолучитьВидДоходаПоКоду(КодДохода);
		КодДохода            = СтруктураВидаДохода.КодДохода;
		НаименованиеДохода   = СтруктураВидаДохода.НаименованиеДохода;
		КодыВычетов          = СтруктураВидаДохода.КодыВычетов;
		СтавкаНалога         = СтруктураВидаДохода.СтавкаНалога;
		Если НЕ ЗначениеЗаполнено(КодДохода) Тогда
			СтавкаНалога = 13;
			СуммаДохода   = 0;
			КодВычета     = "";
			НаименованиеВычета = "";
			СуммаВычета   = 0;
		ИначеЕсли Найти(СтруктураВидаДохода.КодыВычетов + ",", КодВычета + ",") = 0 Тогда
			КодВычета     = "";
			СуммаВычета   = 0;
			НаименованиеВычета = "";
		Иначе
			ПересчитатьСуммуВычетаНаФорме();
		КонецЕсли; 
	КонецЕсли; 
	ДоходПроизвольныйИзменитьДоступностьВычета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходаПриИзменении(Элемент)
	
	ПересчитатьСуммуВычетаНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура КодВычетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	ИмяФормыСписка = ?(Год(ДатаПодписи) < 2014, "КодыДоходовИВычетов2011кв1", "КодыДоходовИВычетов2014кв1");
	ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
			|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения,
			|КодыВычетов,КодыДоходов,СтавкаНалога,СтатусНалогоплательщика", 
			НСтр("ru = 'Код'") , НСтр("ru = 'Вид вычета'"), НСтр("ru = 'Выбор вида вычета'"),
			ИмяФормыСписка, "КодыВычетов", "КодДохода", КодВычета,
			"", КодДохода, СтавкаНалога, СтатусНалогоплательщика);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВычетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаНачисления = Элементы.ДваНДФЛНачисления.ТекущиеДанные;
		КодВычета = ?(ВыбранноеЗначение.Код = "0", "", ВыбранноеЗначение.Код);
		НаименованиеВычета = ВыбранноеЗначение.Наименование;
		Если КодВычета = "" Тогда
			СуммаВычета = 0;
			НаименованиеВычета = "";
		КонецЕсли; 
	КонецЕсли; 
	ПересчитатьСуммуВычетаНаФорме();
	ДоходПроизвольныйИзменитьДоступностьВычета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВычетаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если НЕ ЗначениеЗаполнено(КодДохода) ИЛИ НЕ ЗначениеЗаполнено(КодВычета) Тогда
		КодВычета     = "";
		НаименованиеВычета = "";
		СуммаВычета   = 0;
	Иначе
		СтруктураВидаВычета = ПолучитьВидВычетаПоКоду(КодВычета);
		КодВычета = СтруктураВидаВычета.КодВычета;
		Если НЕ ЗначениеЗаполнено(КодВычета) Тогда
			НаименованиеВычета = "";
			СуммаВычета   = 0;
		Иначе
			НаименованиеВычета = СтруктураВидаВычета.НаименованиеВычета;
			ПересчитатьСуммуВычетаНаФорме();
		КонецЕсли; 
	КонецЕсли; 
	ДоходПроизвольныйИзменитьДоступностьВычета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВычетаПриИзменении(Элемент)
	
	ПересчитатьСуммуВычетаНаФорме();
	
КонецПроцедуры

#КонецОбласти


#Область ДоходВалютный

&НаКлиенте
Процедура ИсточникСтранаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Модифицированность = Истина;
	ПараметрыФормы = Новый Структура("ЗаголовокКолонкиКода,ЗаголовокКолонкиНаименования,ЗаголовокФормыВыбора,
			|ИмяМакета,ИмяОбласти,ИмяПоказателя,КодТекущегоЗначения", 
			НСтр("ru = 'Код'") , НСтр("ru = 'Стрнана'"), НСтр("ru = 'Выбор страны гражданства'"),
			"СтраныМира", "СписокСтран", "ИсточникКодСтраны", ИсточникКодСтраны);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2011кв1", "ВыборЗначенияИзСписка"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСтранаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ИсточникКодСтраны = ВыбранноеЗначение.Код;
		ИсточникСтрана    = ВыбранноеЗначение.Наименование;
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ВалютаДоходаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ЗначениеЗаполнено(ВалютаДохода) И 
		(ЗначениеЗаполнено(ДатаДохода) ИЛИ ЗначениеЗаполнено(ДатаУплатыНалога)) Тогда
		ОбновитьКурсыСделкиВВалюте(Истина, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДохода1ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ЗначениеЗаполнено(ВалютаДохода) И 
		ЗначениеЗаполнено(ДатаДохода) Тогда
		ОбновитьКурсыСделкиВВалюте(Истина, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДоходаВВалютеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СуммаДохода = ПересчитатьСуммуРублейПоКурсуВалюты(СуммаДоходаВВалюте, КурсНаДатуДохода, КратностьВалютыДохода);
	ПересчитатьСуммуВычетаНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсНаДатуДоходаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СуммаДохода = ПересчитатьСуммуРублейПоКурсуВалюты(СуммаДоходаВВалюте, КурсНаДатуДохода, КратностьВалютыДохода);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДохода1ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	КурсНаДатуДохода = ПересчитатьКурсПоСуммам(СуммаДоходаВВалюте, СуммаДохода, КратностьВалютыДохода);
	ПересчитатьСуммуВычетаНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаУплатыНалогаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ЗначениеЗаполнено(ВалютаДохода) И 
		ЗначениеЗаполнено(ДатаУплатыНалога) Тогда
		ОбновитьКурсыСделкиВВалюте(Ложь, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалогаУплаченоВВалютеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СуммаНалогаУплаченоЗаГраницей = ПересчитатьСуммуРублейПоКурсуВалюты(СуммаНалогаУплаченоВВалюте, КурсНаДатуУплатыНалога, КратностьВалютыДохода);
	
КонецПроцедуры

&НаКлиенте
Процедура КурсНаДатуУплатыНалогаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СуммаНалогаУплаченоЗаГраницей = ПересчитатьСуммуРублейПоКурсуВалюты(СуммаНалогаУплаченоВВалюте, КурсНаДатуУплатыНалога, КратностьВалютыДохода);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалогаУплачено1ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	КурсНаДатуУплатыНалога = ПересчитатьКурсПоСуммам(СуммаНалогаУплаченоВВалюте, СуммаНалогаУплаченоЗаГраницей, КратностьВалютыДохода);
	
КонецПроцедуры

#КонецОбласти



#Область ДоходПредпринимателя

&НаКлиенте
Процедура ВидДеятельностиИндексПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ВидДеятельностиИндекс > 1 И ВидДеятельностиИндекс < 4 Тогда
		ЭтоКФХ = Ложь;
		ГодОбразованияКФХ = 0;
	КонецЕсли; 
	ДоходПредпринимателя_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоКФХПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ЭтоКФХ Тогда
		ГодОбразованияКФХ = ГодОтчета;
	Иначе
		ГодОбразованияКФХ = 0;
	КонецЕсли; 
	ДоходПредпринимателя_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиНаименованиеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.СтруктураОтчета.ТекущиеДанные.Наименование = ?(ВидДеятельностиНаименование = "", "Доход предпринимателя", "Доход ИП: " + ВидДеятельностиНаименование);
	ДоходПредпринимателя_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПредпринимателяПоДокументамПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Для Каждого СтрокаОтчета Из ОтчетПредпринимателя  Цикл
		ПересчитатьРасходыПредпринимателяВСтроке(СтрокаОтчета);
	КонецЦикла; 
	ДоходПредпринимателя_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПредпринимателяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Модифицированность = Истина;
	Если НоваяСтрока Тогда
		Если ОтчетПредпринимателя.Количество() = 1 Тогда
			Элементы.ОтчетПредпринимателя.ТекущиеДанные.Месяц = 1;
		Иначе
			СуммаОтчета = 0;
			МесяцОтчета  = 0;
			Для Каждого СтрокаОтчета Из ОтчетПредпринимателя Цикл
				Если Мин(СтрокаОтчета.Месяц + 1, 12) >= МесяцОтчета Тогда
					МесяцОтчета = Мин(СтрокаОтчета.Месяц + 1, 12);
					СуммаОтчета = СтрокаОтчета.СуммаДохода;
				КонецЕсли; 
			КонецЦикла; 
			Элементы.ОтчетПредпринимателя.ТекущиеДанные.Месяц = МесяцОтчета;
			Элементы.ОтчетПредпринимателя.ТекущиеДанные.СуммаДохода = СуммаОтчета;
			ПересчитатьРасходыПредпринимателяВСтроке(Элементы.ОтчетПредпринимателя.ТекущиеДанные);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПредпринимателяСуммаДоходаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если НЕ РасходыПредпринимателяПоДокументам Тогда
		Элементы.ОтчетПредпринимателя.ТекущиеДанные.СуммаРасходаВсего = Элементы.ОтчетПредпринимателя.ТекущиеДанные.СуммаДохода * 0.2;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПредпринимателяМатериальныеРасходыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьРасходыПредпринимателяВСтроке(Элементы.ОтчетПредпринимателя.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПредпринимателяПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтчетПредпринимателяОбновитьИтогиВКолонках();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляСтандартныхВычетов1ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ИспользоватьДляСтандартныхВычетов Тогда
		ОтчетПредпринимателя.Очистить();
		Для Счетчик = 1 По 12 Цикл
			СтрокаМесяца = ОтчетПредпринимателя.Добавить();
			СтрокаМесяца.Месяц = Счетчик;
		КонецЦикла; 
	Иначе
		ИтогМатериальныеРасходы = ОтчетПредпринимателя.Итог("МатериальныеРасходы");
		ИтогАмортизацияОС       = ОтчетПредпринимателя.Итог("АмортизацияОС");
		ИтогНаОплатуТрудаВсего  = ОтчетПредпринимателя.Итог("НаОплатуТрудаВсего");
		ИтогПоТрудовымДоговорам = ОтчетПредпринимателя.Итог("ПоТрудовымДоговорам");
		ИтогПрочиеРасходы       = ОтчетПредпринимателя.Итог("ПрочиеРасходы");
		ИтогСуммаРасходаВсего   = ОтчетПредпринимателя.Итог("СуммаРасходаВсего");
		ОтчетПредпринимателя.Очистить();
		СтрокаМесяца = ОтчетПредпринимателя.Добавить();
		СтрокаМесяца.МатериальныеРасходы  = ИтогМатериальныеРасходы;
		СтрокаМесяца.АмортизацияОС        = ИтогАмортизацияОС;
		СтрокаМесяца.НаОплатуТрудаВсего   = ИтогНаОплатуТрудаВсего;
		СтрокаМесяца.ПоТрудовымДоговорам  = ИтогПоТрудовымДоговорам;
		СтрокаМесяца.ПрочиеРасходы        = ИтогПрочиеРасходы;
		СтрокаМесяца.СуммаРасходаВсего    = ИтогСуммаРасходаВсего;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти



// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <Вычеты>
#Область Вычеты



#КонецОбласти



// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <ВычетСтандартный>
#Область ВычетСтандартный

&НаКлиенте
Процедура СтандартныеВычетыНаРаботникаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.СтандартныеВычеты.ТекущиеДанные;
	Для Каждого Строка Из СтандартныеВычеты Цикл
		Если Строка.НомерМесяца > ТекущиеДанные.НомерМесяца Тогда
			Строка.НаРаботника = ТекущиеДанные.НаРаботника;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеВычетыЕдинственныйРодительПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.СтандартныеВычеты.ТекущиеДанные;
	Для Каждого Строка Из СтандартныеВычеты Цикл
		Если Строка.НомерМесяца > ТекущиеДанные.НомерМесяца Тогда
			Строка.ЕдинственныйРодитель = ТекущиеДанные.ЕдинственныйРодитель;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеВычетыКоэффициентНаПервогоРебенкаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.СтандартныеВычеты.ТекущиеДанные;
	Для Каждого Строка Из СтандартныеВычеты Цикл
		Если Строка.НомерМесяца > ТекущиеДанные.НомерМесяца Тогда
			Строка.ВычетНаПервогоРебенка = ТекущиеДанные.ВычетНаПервогоРебенка;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеВычетыКоэффициентНаВторогоРебенкаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.СтандартныеВычеты.ТекущиеДанные;
	Для Каждого Строка Из СтандартныеВычеты Цикл
		Если Строка.НомерМесяца > ТекущиеДанные.НомерМесяца Тогда
			Строка.ВычетНаВторогоРебенка = ТекущиеДанные.ВычетНаВторогоРебенка;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеВычетыЧислоДетейСТретьегоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.СтандартныеВычеты.ТекущиеДанные;
	Для Каждого Строка Из СтандартныеВычеты Цикл
		Если Строка.НомерМесяца > ТекущиеДанные.НомерМесяца Тогда
			Строка.ЧислоДетейСТретьего = ТекущиеДанные.ЧислоДетейСТретьего;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеВычетыЧислоДетейИнвалидовПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ТекущиеДанные = Элементы.СтандартныеВычеты.ТекущиеДанные;
	Для Каждого Строка Из СтандартныеВычеты Цикл
		Если Строка.НомерМесяца > ТекущиеДанные.НомерМесяца Тогда
			Строка.ЧислоДетейИнвалидов = ТекущиеДанные.ЧислоДетейИнвалидов;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти



// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <ВычетПенсионный>
#Область ВычетПенсионный

&НаКлиенте
Процедура СуммаВзносовПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СуммаВычета = СуммаВзносов;
	
КонецПроцедуры


#КонецОбласти


// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <ВычетПрочийСоциальный>
#Область ВычетПрочийСоциальный



#КонецОбласти



// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <ВычетИмущественный>
#Область ВычетИмущественный

&НаКлиенте
Процедура ЖильеСпособПриобретенияПриИзменении(Элемент)
	
	ВычетИмущественный_ОбновитьЗаголовкиГрупп();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖильеНаименованиеПриИзменении(Элемент)
	
	Если ЖильеНаименование < 4 Тогда
		ЖильеДатаПраваНаЗемлю = Неопределено;
	КонецЕсли; 
	
	ВычетИмущественный_ОбновитьЗаголовкиГрупп();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖильеВидСобственностиПриИзменении(Элемент)
	
	Если ЖильеВидСобственности <> 3 Тогда
		ЖильеДатаЗаявленияОРаспределении = Неопределено;
	КонецЕсли; 
	
	ВычетИмущественный_ОбновитьЗаголовкиГрупп();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖильеГодНачалаВычетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЖильеГодНачалаВычета) И ЖильеГодНачалаВычета < ГодОтчета Тогда
		ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам  = 0;
		ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам = 0;
		ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам    = 0;
		ЖильеВычетПрошлыхЛетОтАгентаПоРасходам     = 0;
		ЖильеОстатокВычетаПоРасходам               = 0;
		ЖильеОстатокВычетаПоПроцентам              = 0;
	КонецЕсли; 
	Модифицированность = Истина;
	ВычетИмущественный_ОбновитьЗаголовкиГрупп();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖильеСтоимостьПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьИтогиИмущественногоВычета();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЖильеДоляЧислительПриИзменении(Элемент)
	
	Если ЖильеДоляЧислитель = 0 Тогда
		ЖильеДоляЧислитель = 1;
	КонецЕсли; 
	Если ЖильеДоляЗнаменатель = 0 Тогда
		ЖильеДоляЗнаменатель = 1;
	КонецЕсли; 
	Модифицированность = Истина;
	ПересчитатьИтогиИмущественногоВычета();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖильеАдресПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияПолей = Новый СписокЗначений;
	Для Каждого ЭлементСтруктуры Из ЖильеАдресСтруктура Цикл
		ЗначенияПолей.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура("Заголовок,ЗначенияПолей,Представление,ВидКонтактнойИнформации",
			НСтр("ru = 'Адрес купленной недвижимости'"), ЗначенияПолей, ЖильеАдресПредставление, 
			СтруктураПредопределенныхЗначений.ВидКонтактнойИнформации_АдресВРФ);
			
			
	Оповещение = Новый ОписаниеОповещения("ЖильеАдресПредставлениеНачалоВыбораЗавершение", ЭтотОбъект);
	
	// ДЕНЬГИ
	// Замена устаревшей функции БСП:
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	// Конец ДЕНЬГИ
	
КонецПроцедуры


#КонецОбласти


// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <УбыткиПрошлыхЛетПоЦБ>
#Область УбыткиПрошлыхЛетПоЦБ



#КонецОбласти



// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <Платежи>
#Область Платежи



#КонецОбласти



// ОБРАБОТЧИКИ СОБЫТИЙ СТРАНИЦЫ <Результат>
#Область Результат

&НаКлиенте
Процедура ТаблицаОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаОшибки = ТаблицаОшибок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаОшибки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаРаздела = СтруктураОтчета.ПолучитьЭлементы()[СтрокаОшибки.НомерРаздела];
	СтрокаЭлемента = Неопределено;
	Если ЗначениеЗаполнено(СтрокаОшибки.ИДЭлемента) Тогда
		Для Каждого ПодстрокаРаздела Из СтрокаРаздела.ПолучитьЭлементы() Цикл
			Если ПодстрокаРаздела.ИДЭлемента = СтрокаОшибки.ИДЭлемента Тогда
				СтрокаЭлемента = ПодстрокаРаздела;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если СтрокаЭлемента <> Неопределено Тогда
		Элементы.СтруктураОтчета.ТекущаяСтрока = СтрокаЭлемента.ПолучитьИдентификатор();
	Иначе
		Элементы.СтруктураОтчета.ТекущаяСтрока = СтрокаРаздела.ПолучитьИдентификатор();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаОшибки.ИмяЭлемента) И Элементы.Найти(СтрокаОшибки.ИмяЭлемента) <> Неопределено Тогда
		ТекущийЭлемент = Элементы[СтрокаОшибки.ИмяЭлемента];
	КонецЕсли; 
	
КонецПроцедуры



#КонецОбласти




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	
	СтрокаСтруктуры = Элементы.СтруктураОтчета.ТекущиеДанные;
	СтрокиСтруктуры = СтруктураОтчета.ПолучитьЭлементы();
	Если СтрокаСтруктуры = СтрокиСтруктуры[2] ИЛИ СтрокаСтруктуры.ПолучитьРодителя() = СтрокиСтруктуры[2] Тогда
		ВыбратьВидДокументаИДобавитьВСтруктуру(СтрокиСтруктуры[2]);
	ИначеЕсли СтрокаСтруктуры = СтрокиСтруктуры[3] ИЛИ СтрокаСтруктуры.ПолучитьРодителя() = СтрокиСтруктуры[3] Тогда
		ВыбратьВидДокументаИДобавитьВСтруктуру(СтрокиСтруктуры[3]);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ПереходПоСтруктуреНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	ПереходПоСтруктуреВперед();
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	СтрокаСтруктуры    = Элементы.СтруктураОтчета.ТекущиеДанные;
	РодительскаяСтрока = СтрокаСтруктуры.ПолучитьРодителя();
	Если РодительскаяСтрока <> Неопределено Тогда
		УдалитьДокумент(СтрокаСтруктуры, РодительскаяСтрока.ИДЭлемента);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтчет(Команда)
	
	ПараметрыФормы = Неопределено;
	ИмяФормыОтчета = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
	Если ПодготовитьОтчетКПечати(ПараметрыФормы) Тогда
		//ОткрытьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма.ФормаОтчета2011кв1", ПараметрыФормы);
		ФормаОтчета = ПолучитьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма." + ИмяФормыОтчета, ПараметрыФормы);
		ФормаОтчета.Печать("ПоказатьБланк", Истина);
	КонецЕсли; 
	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьПроверку(Команда)
	
	ВыполнитьПроверкуДанныхНаКлиенте();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьБланкПДФ(Команда)
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		РедактируемыйДокумент = "";
		Модифицированность = Истина;
	КонецЕсли; 
	
	ПараметрыФормы = ПолучитьПараметрыФормыОтчета();
	Элементы.СтруктураОтчета.ТекущаяСтрока = СтруктураОтчета.ПолучитьЭлементы()[5].ПолучитьИдентификатор();
	ОбновитьОтображениеДанных();
	Если НЕ ФлагПроверкаВыполнена ИЛИ СсылкаНаДокументОтчета.Пустая() Тогда
		Элементы.ГруппаСтраницыПроверки.ТекущаяСтраница = Элементы.СтраницаСообщения;
		Элементы.ДекорацияРезультатПроверкиОшибок.Заголовок = НСтр("ru = 'Подождите, идет проверка введенной информации...'");
		Если НЕ ПодготовитьОтчетКПечати(ПараметрыФормы) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ЗаписатьНаСервере(Истина);
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	ИмяФормыОтчета = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
	ФормаОтчета = ПолучитьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма." + ИмяФормыОтчета, ПараметрыФормы);
	
	ФормаОтчета.ПоказатьСДвухмернымШтрихкодомPDF417(Новый Структура("Имя", "ПоказатьСДвухмернымШтрихкодомPDF417"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьБланкПДФ(Команда)
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		РедактируемыйДокумент = "";
		Модифицированность = Истина;
	КонецЕсли; 
	
	ПараметрыФормы = ПолучитьПараметрыФормыОтчета();
	Элементы.СтруктураОтчета.ТекущаяСтрока = СтруктураОтчета.ПолучитьЭлементы()[5].ПолучитьИдентификатор();
	Если НЕ ФлагПроверкаВыполнена ИЛИ СсылкаНаДокументОтчета.Пустая() Тогда
		Элементы.ГруппаСтраницыПроверки.ТекущаяСтраница = Элементы.СтраницаСообщения;
		Элементы.ДекорацияРезультатПроверкиОшибок.Заголовок = НСтр("ru = 'Подождите, идет проверка введенной информации...'");
		ОбновитьОтображениеДанных();
		Если НЕ ПодготовитьОтчетКПечати(ПараметрыФормы) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ЗаписатьНаСервере(Истина);
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	ИмяФормыОтчета = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
	ФормаОтчета = ПолучитьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма." + ИмяФормыОтчета, ПараметрыФормы);
	ФормаОтчета.ПечататьСразуСДвухмернымШтрихкодомPDF417(Новый Структура("Имя", "ПечататьСразуСДвухмернымШтрихкодомPDF417"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		РедактируемыйДокумент = "";
		Модифицированность = Истина;
	КонецЕсли; 
	
	ПараметрыФормы = ПолучитьПараметрыФормыОтчета();
	Элементы.СтруктураОтчета.ТекущаяСтрока = СтруктураОтчета.ПолучитьЭлементы()[5].ПолучитьИдентификатор();
	Если НЕ ФлагПроверкаВыполнена ИЛИ СсылкаНаДокументОтчета.Пустая() Тогда
		Элементы.ГруппаСтраницыПроверки.ТекущаяСтраница = Элементы.СтраницаСообщения;
		Элементы.ДекорацияРезультатПроверкиОшибок.Заголовок = НСтр("ru = 'Подождите, идет проверка введенной информации...'");
		ОбновитьОтображениеДанных();
		Если НЕ ПодготовитьОтчетКПечати(ПараметрыФормы) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ЗаписатьНаСервере(Истина);
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	ИмяФормыОтчета = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
	ФормаОтчета = ПолучитьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма." + ИмяФормыОтчета, ПараметрыФормы);
	ФормаОтчета.Печать("ПоказатьБланк", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		РедактируемыйДокумент = "";
		Модифицированность = Истина;
	КонецЕсли; 
	
	ПараметрыФормы = ПолучитьПараметрыФормыОтчета();
	Элементы.СтруктураОтчета.ТекущаяСтрока = СтруктураОтчета.ПолучитьЭлементы()[5].ПолучитьИдентификатор();
	Если НЕ ФлагПроверкаВыполнена ИЛИ СсылкаНаДокументОтчета.Пустая() Тогда
		Элементы.ГруппаСтраницыПроверки.ТекущаяСтраница = Элементы.СтраницаСообщения;
		Элементы.ДекорацияРезультатПроверкиОшибок.Заголовок = НСтр("ru = 'Подождите, идет проверка введенной информации...'");
		ОбновитьОтображениеДанных();
		Если НЕ ПодготовитьОтчетКПечати(ПараметрыФормы) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	ИмяФормыОтчета = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
	ФормаОтчета = ПолучитьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма." + ИмяФормыОтчета, ПараметрыФормы);
	ФормаОтчета.ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьОтчетКПечати(ПараметрыДляФормыОтчета = Неопределено)

	ВыполнитьПроверкуДанныхНаКлиенте();
	Если ТаблицаОшибок.Количество() > 0 Тогда
		Возврат Ложь;
	Иначе
		ЗаписатьНаСервере(Истина);
	КонецЕсли; 
	
	ПараметрыДляФормыОтчета = ПолучитьПараметрыФормыОтчета();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыФормыОтчета()

	ПараметрыДляФормыОтчета = Новый Структура;
	ПараметрыДляФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", Дата(ГодОтчета, 1, 1));
	ПараметрыДляФормыОтчета.Вставить("мСкопированаФорма",        Неопределено);
	ПараметрыДляФормыОтчета.Вставить("мСохраненныйДок",          СсылкаНаДокументОтчета);
	ПараметрыДляФормыОтчета.Вставить("мДатаКонцаПериодаОтчета",  КонецГода(ПараметрыДляФормыОтчета.мДатаНачалаПериодаОтчета));
	ПараметрыДляФормыОтчета.Вставить("мПериодичность",           ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	ПараметрыДляФормыОтчета.Вставить("Организация",              Неопределено);
	Если ГодОтчета < 2014 Тогда
		ПараметрыДляФормыОтчета.Вставить("мВыбраннаяФорма",          "ФормаОтчета2011кв1");
	Иначе
		ПараметрыДляФормыОтчета.Вставить("мВыбраннаяФорма",          "ФормаОтчета2014кв1");
	КонецЕсли; 
	ПараметрыДляФормыОтчета.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
	ПараметрыДляФормыОтчета.Вставить("НеОтображатьПредупреждение", Ложь);
	ПараметрыДляФормыОтчета.Вставить("БезОткрытияФормы",         Истина);
	
	Возврат ПараметрыДляФормыОтчета;

КонецФункции

&НаКлиенте
Процедура УстановитьМодифицированность(Объект)

	Модифицированность = Истина;

КонецПроцедуры
 
&НаКлиенте
Процедура ПродолжитьБезПомощника(Команда)
	
	ТекстВопроса = НСтр("ru = 'После отказа от ""Помощника заполнения"" вы сможете заполнять декларацию только вручную.
			|Хотите продолжить заполнение декларации без ""Помощника заполнения""?'");

	ПоказатьВопрос(Новый ОписаниеОповещения("ПродолжитьБезПомощникаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Заполнение структур значениями по умолчанию:
	ЗаполнитьСтруктурыПоУмолчанию();
	
	// Предопределенные значения:
	ВалютаРубль = Справочники.Валюты.НайтиПоКоду("643");
	Если ВалютаРубль.Пустая() Тогда
		ВалютаРубль = Константы.ВалютаУчета.Получить();
	КонецЕсли; 
	СтруктураПредопределенныхЗначений = Новый Структура;
	СтруктураПредопределенныхЗначений.Вставить("ВидКонтактнойИнформации_АдресВРФ", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СтруктураПредопределенныхЗначений.Вставить("ПрочиеСтандартныеВычеты", ПолучитьСписокПрочихСтандартныхВычетов());
	
	// Чтение данных помощника:
	СсылкаНаДокументОтчета = Параметры.мСохраненныйДок;
	ЗаполнитьТаблицыПомощникаДаннымиОтчета();
	
	ТитульныйЛист_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	ПерсональныеДанные_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	ДоходПредпринимателя_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	ДоходПроизвольныйИзменитьДоступностьВычета(ЭтотОбъект);
	ВычетПенсионный_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
	
	// Заполнение списков выбора
	ОбновитьСпискиВыбораПоГодуОчтета();
	
	// Настройка внешнего вида
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктурыПоУмолчанию()

	// Считываем коллекцию иконок:
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	МакетИконок = ОтчетОбъект.ПолучитьМакет("Иконки");
	ИконкиОтчета = Новый Структура;
	Для каждого Рисунок Из МакетИконок.Рисунки Цикл
		ИконкиОтчета.Вставить(рисунок.Имя, рисунок.Картинка);
	КонецЦикла;
	
	// Заполняем узлы структуры отчета
	СтрокиСтруктуры = СтруктураОтчета.ПолучитьЭлементы();
	СтрокиСтруктуры.Очистить();
	
	ТитульныйЛист = СтрокиСтруктуры.Добавить();
	ТитульныйЛист.ИДЭлемента = "ТитульныйЛист";
	ТитульныйЛист.Наименование = "Титульный лист";
	ТитульныйЛист.ИконкаСтроки = ИконкиОтчета.ТитульныйЛист;
	
	ТитульныйЛист = СтрокиСтруктуры.Добавить();
	ТитульныйЛист.ИДЭлемента = "ПерсональныеДанные";
	ТитульныйЛист.Наименование = "Персональные сведения";
	ТитульныйЛист.ИконкаСтроки = ИконкиОтчета.ПаспортИАдрес;
	
	Доходы = СтрокиСтруктуры.Добавить();
	Доходы.ИДЭлемента         = "Доходы";
	Доходы.Наименование       = "Доходы";
	Доходы.ИконкаСтроки        = ИконкиОтчета.ДоходыГруппа;
	Доходы.РазрешеноДобавлять = Истина;
	
	Вычеты = СтрокиСтруктуры.Добавить();
	Вычеты.ИДЭлемента         = "Вычеты";
	Вычеты.Наименование       = "Вычеты";
	Вычеты.ИконкаСтроки        = ИконкиОтчета.ВычетыГруппа;
	Вычеты.РазрешеноДобавлять = Истина;
	
	Платежи = СтрокиСтруктуры.Добавить();
	Платежи.ИДЭлемента = "Платежи";
	Платежи.Наименование = "Платежи по уведомлениям";
	Платежи.ИконкаСтроки = ИконкиОтчета.УплаченоПоУведомлениям;
	
	Результат = СтрокиСтруктуры.Добавить();
	Результат.ИДЭлемента = "Результат";
	Результат.Наименование = "Результат";
	Результат.ИконкаСтроки = ИконкиОтчета.Результаты;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.НомерКорректировки.Доступность = Форма.ВидДекларации = 1;
	Элементы.АдресЗаПределамиРФ.Видимость = Форма.АдресВРФТипАдреса = 2;

	// Изменяем наименование ОКАТО в зависимости от даты подписи отчета:
	Если Год(Форма.ДатаПодписи) < 2014 Тогда
		Элементы.АдресВРФОкато.Заголовок = "ОКАТО";
		Элементы.ИсточникОКАТО.Заголовок = "ОКАТО";
		Элементы.ИсточникОКАТО1.Заголовок = "ОКАТО";
	Иначе
		Элементы.АдресВРФОкато.Заголовок = "ОКТМО";
		Элементы.ИсточникОКАТО.Заголовок = "ОКТМО";
		Элементы.ИсточникОКАТО1.Заголовок = "ОКТМО";
	КонецЕсли; 
	
	РасчитатьИтогиНаСтраницеДоходы(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьФИО(Знач Фамилия, Знач Имя, Знач Очтество)

	Результат = "";
	Если ЗначениеЗаполнено(Фамилия) Тогда
		Результат = СокрЛП(Фамилия) + " ";
		Если ЗначениеЗаполнено(Имя) Тогда
			Результат = Результат + Врег(Лев(СокрЛ(Имя), 1)) + ". ";
			Если ЗначениеЗаполнено(Очтество) Тогда
				Результат = Результат + Врег(Лев(СокрЛ(Очтество), 1)) + ".";
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Имя) Тогда
			Результат = Врег(Лев(СокрЛ(Имя), 1)) + Сред(Имя, 2) + " ";
			Если ЗначениеЗаполнено(Очтество) Тогда
				Результат = Результат + Врег(Лев(СокрЛ(Очтество), 1)) + Сред(Очтество, 2)  + ".";
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПолучитьОрганизацию(Знач Фамилия, Знач Имя, Знач Отчество, Знач ИНН, Знач КодИФНС)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КодИФНС", КодИФНС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование = &Наименование
	|	И Организации.ИНН = &ИНН
	|	И Организации.КодНалоговогоОргана = &КодИФНС";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		НоваяОрганизация = Справочники.Организации.СоздатьЭлемент();
		НоваяОрганизация.Наименование = Запрос.Параметры.Наименование;
		НоваяОрганизация.ИНН = Запрос.Параметры.ИНН;
		НоваяОрганизация.КодНалоговогоОргана = Запрос.Параметры.КодИФНС;
		НоваяОрганизация.Записать();
		Возврат НоваяОрганизация.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИДСтрокиПоИДЭлемента(Знач Структура, Знач ИДЭлемента)

	Строки = Структура.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Если Строка.ИДЭлемента = ИДЭлемента Тогда
			Возврат Строка.ПолучитьИдентификатор();
		ИначеЕсли Строка.ПолучитьЭлементы().Количество() > 0 Тогда
			ИД = ПолучитьИДСтрокиПоИДЭлемента(Строка, ИДЭлемента);
			Если ИД <> Неопределено Тогда
				Возврат ИД;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуЗначениямиИзИсточникаДоходов(ИДСтроки, ИДИсточника)

	СтрокаИсточника = ТаблицаДокументовДоходов.НайтиПоИдентификатору(ИДИсточника);
	ЗаполнитьСтрокуЗначениямиИзИсточника(ТаблицаДокументовДоходов.НайтиПоИдентификатору(ИДСтроки), 
			СтрокаИсточника, СтрокаИсточника.ВидДокумента);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуЗначениямиИзИсточникаВычета(ИДСтроки, ИДИсточника)

	СтрокаИсточника = ТаблицаДокументовВычета.НайтиПоИдентификатору(ИДИсточника);
	ЗаполнитьСтрокуЗначениямиИзИсточника(ТаблицаДокументовВычета.НайтиПоИдентификатору(ИДСтроки), 
			СтрокаИсточника, СтрокаИсточника.ВидДокумента);

КонецПроцедуры


&НаКлиенте
Процедура СкопироватьДокументСтруктуры(СтрокаСтруктуры, СтрокаГруппы)

	Если СтрокаГруппы.ИДЭлемента = "Доходы" Тогда
		
		СтрокиДокумента = ТаблицаДокументовДоходов.НайтиСтроки(Новый Структура("ИДЭлемента", СтрокаСтруктуры.ИДЭлемента));
		Если СтрокиДокумента.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		КопияСтроки = ТаблицаДокументовДоходов.Добавить();
		ЗаполнитьСтрокуЗначениямиИзИсточникаДоходов(КопияСтроки.ПолучитьИдентификатор(), СтрокиДокумента[0].ПолучитьИдентификатор());
		
	Иначе
		
		СтрокиДокумента = ТаблицаДокументовВычета.НайтиСтроки(Новый Структура("ИДЭлемента", СтрокаСтруктуры.ИДЭлемента));
		Если СтрокиДокумента.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		КопияСтроки = ТаблицаДокументовДоходов.Добавить();
		ЗаполнитьСтрокуЗначениямиИзИсточникаВычета(КопияСтроки.ПолучитьИдентификатор(), СтрокиДокумента[0].ПолучитьИдентификатор());
		
	КонецЕсли; 

	КопияСтроки.ИДЭлемента = Строка(Новый УникальныйИдентификатор);
	КопияСтроки.Наименование = НСтр("ru = 'Копия '") + КопияСтроки.Наименование; 
	КопияСтроки.СтатусНалогоплательщика = СтатусНалогоплательщика;
	
	КопияСтрокиСтруктуры = СтрокаГруппы.ПолучитьЭлементы().Добавить();
	КопияСтрокиСтруктуры.ИДЭлемента = КопияСтроки.ИДЭлемента;
	КопияСтрокиСтруктуры.Наименование = КопияСтроки.Наименование;
	КопияСтрокиСтруктуры.ИконкаСтроки = СтрокаСтруктуры.ИконкаСтроки;
	КопияСтрокиСтруктуры.РазрешеноКопировать = Истина;
	
	Элементы.СтруктураОтчета.ТекущаяСтрока = КопияСтрокиСтруктуры.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидДокументаИДобавитьВСтруктуру(ГруппаСтруктуры)

	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		Модифицированность = Истина;
	КонецЕсли; 
	
	Список = Новый СписокЗначений;
	Если ГруппаСтруктуры.ИДЭлемента = "Доходы" Тогда
		Список.Добавить("2-НДФЛ", "Доход по справке 2-НДФЛ", , ИконкиОтчета.ДокументДохода);
		Список.Добавить("Произвольный", "Доход по произвольному документу (договор, расписка и т.п.)", , ИконкиОтчета.ДоходыВРФ);
		Если СтатусНалогоплательщика = 1 Тогда
			Список.Добавить("Валютный", "Доход в иностранной валюте", , ИконкиОтчета.ДоходыВВалюте);
			Если КатегорияНалогоплательщика <> "760" Тогда
				Список.Добавить("Предприниматель", "Доход предпринимателя", , ИконкиОтчета.ДоходыПредпринимателя);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		
		Если СтатусНалогоплательщика = 2 Тогда
			Возврат;
		КонецЕсли; 
		
		ЕстьСтандартныеВычеты  = Ложь;
		ЕстьСоциальныеВычеты   = Ложь;
		ЕстьИмущественныйВычет = Ложь;
		ЕстьУбытки             = Ложь;
		Для Каждого СтрокаВычета Из ТаблицаДокументовВычета Цикл
			Если СтрокаВычета.ВидДокумента = "Стандартные вычеты" Тогда
				ЕстьСтандартныеВычеты = Истина;
			ИначеЕсли СтрокаВычета.ВидДокумента = "Социальные вычеты" Тогда
				ЕстьСоциальныеВычеты  = Истина;
			ИначеЕсли СтрокаВычета.ВидДокумента = "Имущественный вычет" Тогда
				ЕстьИмущественныйВычет  = Истина;
			ИначеЕсли СтрокаВычета.ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
				ЕстьУбытки            = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		Если НЕ ЕстьСтандартныеВычеты Тогда
			Список.Добавить("Станданртные", "Стандартные вычеты (на детей, и работника)", , ИконкиОтчета.СтандартныеВычеты);
		КонецЕсли; 
		Список.Добавить("Пенсионный", "Социальный вычет по пенсионным взносам", , ИконкиОтчета.ВзносыВПФ);
		Если НЕ ЕстьСоциальныеВычеты Тогда
			Список.Добавить("Социальные", "Прочие социальные вычеты (обучение, лечение, благотворительность и т.п.)", , ИконкиОтчета.СоциальныеВычеты);
		КонецЕсли; 
		Если НЕ ЕстьИмущественныйВычет Тогда
			Список.Добавить("Имущественный", "Имущественный вычет на приобретение жилья", , ИконкиОтчета.ИмущественныйВычет);
		КонецЕсли; 
		Если НЕ ЕстьУбытки Тогда
			Список.Добавить("Убытки", "Убытки прошлых лет по ценным бумагам", , ИконкиОтчета.УбыткиПрошлыхЛетПоЦБ);
		КонецЕсли; 
		
	КонецЕсли;
	
	Список.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыбратьВидДокументаИДобавитьВСтруктуруЗавершение", ЭтотОбъект, Новый Структура("ГруппаСтруктуры", ГруппаСтруктуры)), "Что добавить?");
	
КонецПроцедуры

&НаСервере 
Процедура СохранитьРедактируемыйДокумент()

	Если РедактируемыйРаздел = "Доходы" Тогда
		СтрокаДокумента = ТаблицаДокументовДоходов.НайтиСтроки(Новый Структура("ИДЭлемента", РедактируемыйДокумент));
	Иначе
		СтрокаДокумента = ТаблицаДокументовВычета.НайтиСтроки(Новый Структура("ИДЭлемента", РедактируемыйДокумент));
	КонецЕсли; 
	
	Если СтрокаДокумента.Количество() > 0 Тогда
		ЗаполнитьСтрокуЗначениямиИзИсточника(СтрокаДокумента[0], ЭтотОбъект, СтрокаДокумента[0].ВидДокумента);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокумент(СтрокаСтруктуры, ТипДокумента)

	Если ТипДокумента = "Доходы" Тогда
		ТекстВопроса = НСтр("ru = 'Удалить доход <%1>?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить вычет <%1>?'");
	КонецЕсли; 
	ТекстВопроса = СтрШаблон(ТекстВопроса, СтрокаСтруктуры.Наименование);
	
	ДополнительныеПарметры = Новый Структура("СтрокаСтруктуры, ТипДокумента", СтрокаСтруктуры, ТипДокумента);
	Оповещение = Новый ОписаниеОповещения("УдалитьДокументЗавершение", ЭтотОбъект, ДополнительныеПарметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходПоСтруктуреВперед()

	НоваяСтрока = Неопределено;
	СтрокаСтруктуры = Элементы.СтруктураОтчета.ТекущиеДанные;
	РодительСтроки = СтрокаСтруктуры.ПолучитьРодителя();
	
	Если СтрокаСтруктуры.ПолучитьЭлементы().Количество() > 0 Тогда
		НоваяСтрока = СтрокаСтруктуры.ПолучитьЭлементы()[0];
		Элементы.СтруктураОтчета.Развернуть(СтрокаСтруктуры.ПолучитьИдентификатор());
	Иначе
		Если РодительСтроки = Неопределено Тогда
			СтрокиПерехода = СтруктураОтчета.ПолучитьЭлементы();
		Иначе
			СтрокиПерехода = РодительСтроки.ПолучитьЭлементы();
		КонецЕсли; 
		ИндексТекСтроки = СтрокиПерехода.Индекс(СтрокаСтруктуры);
		Если ИндексТекСтроки < СтрокиПерехода.Количество() - 1 Тогда 
			НоваяСтрока = СтрокиПерехода[ИндексТекСтроки + 1];
		Иначе
			Если РодительСтроки <> Неопределено Тогда
				СтрокиПерехода  = СтруктураОтчета.ПолучитьЭлементы();
				ИндексТекСтроки = СтрокиПерехода.Индекс(РодительСтроки);
				НоваяСтрока = СтрокиПерехода[ИндексТекСтроки + 1];
			Иначе
				НоваяСтрока = СтрокаСтруктуры;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.СтруктураОтчета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();

КонецПроцедуры
 
&НаКлиенте
Процедура ПереходПоСтруктуреНазад()

	НоваяСтрока = Неопределено;
	СтрокаСтруктуры = Элементы.СтруктураОтчета.ТекущиеДанные;
	РодительСтроки = СтрокаСтруктуры.ПолучитьРодителя();
	
	Если РодительСтроки = Неопределено Тогда
		
		СтрокиПерехода = СтруктураОтчета.ПолучитьЭлементы();
		ИндексТекСтроки = СтрокиПерехода.Индекс(СтрокаСтруктуры);
		Если ИндексТекСтроки = 0 Тогда
			НоваяСтрока = СтрокаСтруктуры;
		Иначе
			НоваяСтрока = СтрокиПерехода[ИндексТекСтроки - 1];
		КонецЕсли;
		
		Если НоваяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			Элементы.СтруктураОтчета.Развернуть(НоваяСтрока.ПолучитьИдентификатор());
			НоваяСтрока =  НоваяСтрока.ПолучитьЭлементы()[НоваяСтрока.ПолучитьЭлементы().Количество() - 1];
		КонецЕсли; 
		
	Иначе
		
		ИндексТекСтроки = РодительСтроки.ПолучитьЭлементы().Индекс(СтрокаСтруктуры);
		Если ИндексТекСтроки = 0 Тогда
			НоваяСтрока = РодительСтроки;
		Иначе
			НоваяСтрока = РодительСтроки.ПолучитьЭлементы()[ИндексТекСтроки - 1];
		КонецЕсли; 
		
	КонецЕсли; 
	
	Элементы.СтруктураОтчета.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();

КонецПроцедуры
 
&НаКлиенте
Процедура ВывестиСтраницуОтчета(ИДЭлемента = Неопределено)

	Если ИДЭлемента = Неопределено Тогда
		СтрокаДерева = Элементы.СтруктураОтчета.ТекущиеДанные;
		ИДЭлемента = СтрокаДерева.ИДЭлемента;
	Иначе
		ИДСтроки = ПолучитьИДСтрокиПоИДЭлемента(СтруктураОтчета, ИДЭлемента);
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		Элементы.СтруктураОтчета.ТекущаяСтрока = ИДСтроки;
		СтрокаДерева = СтруктураОтчета.НайтиПоИдентификатору(ИДСтроки);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		Если РедактируемыйДокумент = ИДЭлемента Тогда
			Возврат;
		Иначе
			РедактируемыйДокумент = "";
		КонецЕсли; 
	КонецЕсли; 
	
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Если РодительскаяСтрока = Неопределено Тогда
		Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы[СтрокаДерева.ИДЭлемента];
	Иначе
		ВывестиДокументНаФорму(РодительскаяСтрока.ИДЭлемента, ИДЭлемента);
	КонецЕсли; 
	
	ДоступностьНазад  = Истина;
	ДоступностьВперед = Истина;
	ВидимостьДобавить = Ложь;
	ЗаголовокДобавить = "";
	ВидимостьУдалить  = Ложь;
	ЗаголовокУдалить  = "";
	
	Если Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ТитульныйЛист Тогда
		
		ДоступностьНазад = Ложь;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ПерсональныеДанные Тогда
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Доходы Тогда
		
		РасчитатьИтогиНаСтраницеДоходы(ЭтотОбъект);
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить доход'");
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Доход2НДФЛ Тогда
		
		Доход2НДФЛ_ОбновитьЗаголовкиГрупп();
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить доход'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить доход'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ДоходПредпринимателя Тогда
		ДоходПредпринимателя_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
		ОтчетПредпринимателяОбновитьИтогиВКолонках();
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить доход'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить доход'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ДоходПроизвольный Тогда
		ДоходПроизвольныйИзменитьДоступностьВычета(ЭтотОбъект);
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить доход'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить доход'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ДоходВалютный Тогда
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить доход'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить доход'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Вычеты Тогда
		
		Если СтатусНалогоплательщика = 1 Тогда
			Элементы.ГруппаВычетыСтраницыИтогов.ТекущаяСтраница = Элементы.ВычетыРезидента;
			РасчитатьИтогиНаСтраницеВычеты(ЭтотОбъект);
			ВидимостьДобавить = Истина;
			ЗаголовокДобавить = НСтр("ru = 'Добавить вычет'");
		Иначе
			Элементы.ГруппаВычетыСтраницыИтогов.ТекущаяСтраница = Элементы.ВычетыНерезидента;
		КонецЕсли; 
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ВычетСтандартный Тогда
		
		ВычетПенсионный_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить вычет'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить вычет'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ВычетПенсионный Тогда
		
		ВычетПенсионный_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить вычет'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить вычет'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ВычетПрочийСоциальный Тогда
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить вычет'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить вычет'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ВычетИмущественный Тогда
		
		ВычетИмущественный_ОбновитьЗаголовкиГрупп();
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить вычет'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить вычет'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.УбыткиПрошлыхЛетПоЦБ Тогда
		
		ВидимостьДобавить = Истина;
		ЗаголовокДобавить = НСтр("ru = 'Добавить вычет'");
		ВидимостьУдалить  = Истина;
		ЗаголовокУдалить  = НСтр("ru = 'Удалить вычет'") ;
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Платежи Тогда
		
		
	ИначеЕсли Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.Результат Тогда
		
		ДоступностьВперед = Ложь;
		Если Модифицированность Тогда
			ФлагПроверкаВыполнена = Ложь;
		КонецЕсли; 
		ИзменитьСтраницуПроверки();
		
	КонецЕсли; 

	
	Элементы.Назад.Доступность         = ДоступностьНазад;
	Элементы.Вперед.Доступность        = ДоступностьВперед;
	Элементы.КнопкаДобавить.Доступность  = ВидимостьДобавить;
	//Элементы.КнопкаДобавить.Видимость  = ВидимостьДобавить;
	Элементы.КнопкаДобавить.Заголовок  = ЗаголовокДобавить;
	Элементы.КнопкаУдалить.Доступность   = ВидимостьУдалить;
	//Элементы.КнопкаУдалить.Видимость   = ВидимостьУдалить;
	Элементы.КнопкаУдалить.Заголовок   = ЗаголовокУдалить;
	
	ОбновитьОтображениеДанных();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыДаннымиСтроки(СтрокаДокумента)

	Если СтрокаДокумента.ВидДокумента = "2-НДФЛ" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаДокумента, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,СтавкаНалога,ИспользоватьДляСтандартныхВычетов");
		ДваНДФЛ_Начисления.Загрузить(СтрокаДокумента.ДваНДФЛ_Начисления.Выгрузить());
		ДваНДФЛ_Вычеты.Загрузить(СтрокаДокумента.ДваНДФЛ_Вычеты.Выгрузить());
		ДваНДФЛ_Итоги.Загрузить(СтрокаДокумента.ДваНДФЛ_Итоги.Выгрузить());
		
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Прочий доход" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаДокумента, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,СтавкаНалога,СуммаНалогаУплачено,
				|КодДохода,НаименованиеДохода,СуммаДохода,КодыВычетов,
				|КодВычета,НаименованиеВычета,СуммаВычета,ДатаДохода");
		
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Доход в валюте" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаДокумента, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,СтавкаНалога,ДатаДохода,
				|КодДохода,НаименованиеДохода,СуммаДохода,КодыВычетов,
				|КодВычета,НаименованиеВычета,СуммаВычета,
				|ИсточникКодСтраны,ИсточникСтрана,СуммаНалогаУплачено,
				|СуммаНалогаУплаченоВВалюте,СуммаНалогаУплаченоЗаГраницей,КурсНаДатуУплатыНалога,ДатаУплатыНалога,
				|СуммаДоходаВВалюте,КурсНаДатуДохода,ВалютаДохода");
				
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Доход предпринимателя" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаДокумента, "ВидДеятельностиИндекс,ЭтоКФХ,ГодОбразованияКФХ,
				|СтавкаНалога,ВидДеятельностиНаименование,ВидДеятельностиКод,РасходыПредпринимателяПоДокументам,
				|НачисленоАвансовыхПлатежей,СуммаНалогаУплачено,
				|ИспользоватьДляСтандартныхВычетов");
		ОтчетПредпринимателя.Загрузить(СтрокаДокумента.ОтчетПредпринимателя.Выгрузить());
		
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Стандартные вычеты" Тогда
		
		СтандартныеВычеты.Загрузить(СтрокаДокумента.СтандартныеВычеты.Выгрузить());
		
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Пенсионный взнос" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаДокумента, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,НомерДоговора,ДатаДоговора,ЗастрахованноеЛицо,
				|НегосударственныйФонд,СуммаВзносов,СуммаВычета,СуммаВычетаПредоставленнаяАгентом");
		
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Социальные вычеты" Тогда
		
		ПрочиеСоциальныеВычеты.Загрузить(СтрокаДокумента.ПрочиеСоциальныеВычеты.Выгрузить());
		
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Имущественный вычет" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаДокумента, "ЖильеНаименование,ЖильеПризнакНалогоплательщика,ЖильеВидСобственности,
				|ЖильеДоляЧислитель,ЖильеДоляЗнаменатель,ЖильеДатаЗаявленияОРаспределении,ЖильеДатаПраваСобственности,ЖильеДатаПраваНаЗемлю,
				|ЖильеДатаАктаПередачи,ЖильеСтоимость,ЖильеСуммаПроцентов,ЖильеСтоимостьПоНорме,ЖильеГодНачалаВычета,
				|ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам,ЖильеВычетПрошлыхЛетОтАгентаПоРасходам,ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам,ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам,
				|ЖильеВычетЭтогоГодаОтАгентаПоПроцентам,ЖильеВычетЭтогоГодаОтАгентаПоРасходам,ЖильеОстатокВычетаПоПроцентам,ЖильеОстатокВычетаПоРасходам,
				|ЖильеСпособПриобретения,ЖильеАдресСтруктура,ЖильеАдресПредставление");
				
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаДокумента, "ПрошлыйУбытокПоЦБ,ПрошлыйУбытокПоСрочнымСделкам");
		
	КонецЕсли; 
	

КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьСтрокуЗначениямиИзИсточника(СтрокаДокумента, Источник, ВидДокумента)

	Если ВидДокумента = "2-НДФЛ" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Источник, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,СтавкаНалога,ИспользоватьДляСтандартныхВычетов");
		СтрокаДокумента.Наименование = СтрокаДокумента.ВидДокумента + ?(ЗначениеЗаполнено(СтрокаДокумента.ИсточникНаименование), ": " + СтрокаДокумента.ИсточникНаименование, "");
		СтрокаДокумента.ДваНДФЛ_Начисления.Загрузить(Источник.ДваНДФЛ_Начисления.Выгрузить());
		СтрокаДокумента.ДваНДФЛ_Вычеты.Загрузить(Источник.ДваНДФЛ_Вычеты.Выгрузить());
		СтрокаДокумента.ДваНДФЛ_Итоги.Загрузить(Источник.ДваНДФЛ_Итоги.Выгрузить());
		
		// Расчет итогов начислений и удержаний:
		СтрокаДокумента.СуммаДохода         = Источник.ДваНДФЛ_Итоги[0].Сумма;
		СтрокаДокумента.СуммаНалога         = Источник.ДваНДФЛ_Итоги[2].Сумма;
		СтрокаДокумента.СуммаНалогаУдержано = Источник.ДваНДФЛ_Итоги[3].Сумма;
		СтрокаДокумента.СуммаВычета         = Источник.ДваНДФЛ_Начисления.Итог("СуммаВычета") + Источник.ДваНДФЛ_Вычеты.Итог("СуммаВычета");
		СтрокаДокумента.ОблагаемаяСуммаДохода = СтрокаДокумента.СуммаДохода - СтрокаДокумента.СуммаВычета;
		
	ИначеЕсли ВидДокумента = "Прочий доход" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Источник, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,СтавкаНалога,СуммаНалогаУплачено,
				|КодДохода,НаименованиеДохода,СуммаДохода,КодыВычетов,
				|КодВычета,НаименованиеВычета,СуммаВычета,ДатаДохода");
		СтрокаДокумента.Наименование = "Доход" + ?(ЗначениеЗаполнено(СтрокаДокумента.ИсточникНаименование), ": " + СтрокаДокумента.ИсточникНаименование, "");
		СтрокаДокумента.СуммаНалога = Окр((СтрокаДокумента.СуммаДохода- СтрокаДокумента.СуммаВычета) * (СтрокаДокумента.СтавкаНалога/100), 0, 1);
		СтрокаДокумента.ОблагаемаяСуммаДохода = СтрокаДокумента.СуммаДохода - СтрокаДокумента.СуммаВычета;
		
	ИначеЕсли ВидДокумента = "Доход в валюте" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Источник, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,СтавкаНалога,ДатаДохода,
				|КодДохода,НаименованиеДохода,СуммаДохода,КодыВычетов,
				|КодВычета,НаименованиеВычета,СуммаВычета,
				|ИсточникКодСтраны,ИсточникСтрана,СуммаНалогаУплачено,
				|СуммаНалогаУплаченоВВалюте,СуммаНалогаУплаченоЗаГраницей,КурсНаДатуУплатыНалога,ДатаУплатыНалога,
				|СуммаДоходаВВалюте,КурсНаДатуДохода,ВалютаДохода");
		СтрокаДокумента.Наименование = "Доход" + ?(ЗначениеЗаполнено(СтрокаДокумента.ИсточникНаименование), ": " + СтрокаДокумента.ИсточникНаименование, "");
		СтрокаДокумента.СуммаНалога  = Окр((СтрокаДокумента.СуммаДохода - СтрокаДокумента.СуммаВычета) * (СтрокаДокумента.СтавкаНалога/100), 0, 1);
		СтрокаДокумента.ОблагаемаяСуммаДохода = СтрокаДокумента.СуммаДохода - СтрокаДокумента.СуммаВычета;
		
	ИначеЕсли ВидДокумента = "Доход предпринимателя" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Источник, "ВидДеятельностиИндекс,ЭтоКФХ,ГодОбразованияКФХ,
				|СтавкаНалога,ВидДеятельностиНаименование,ВидДеятельностиКод,РасходыПредпринимателяПоДокументам,
				|НачисленоАвансовыхПлатежей,СуммаНалогаУплачено,
				|ИспользоватьДляСтандартныхВычетов");
		СтрокаДокумента.Наименование = ?(СтрокаДокумента.ВидДеятельностиНаименование = "", "Доход предпринимателя", "Доход ИП: " + СтрокаДокумента.ВидДеятельностиНаименование);
		СтрокаДокумента.ОтчетПредпринимателя.Загрузить(Источник.ОтчетПредпринимателя.Выгрузить());
		
		// Обновляем итоги для строки дохода:
		СтрокаДокумента.СуммаДохода = СтрокаДокумента.ОтчетПредпринимателя.Итог("СуммаДохода");
		СтрокаДокумента.СуммаВычета = СтрокаДокумента.ОтчетПредпринимателя.Итог("СуммаРасходаВсего");
		СтрокаДокумента.ОблагаемаяСуммаДохода = СтрокаДокумента.СуммаДохода - СтрокаДокумента.СуммаВычета;
		СтрокаДокумента.СуммаНалога = СтрокаДокумента.ОблагаемаяСуммаДохода * 0.13;
		
	ИначеЕсли ВидДокумента = "Стандартные вычеты" Тогда
		
		СтрокаДокумента.Наименование = "Стандартные вычеты";
		СтрокаДокумента.СтандартныеВычеты.Загрузить(Источник.СтандартныеВычеты.Выгрузить());
		СтрокаДокумента.СуммаВычета = РассчитатьОбщуюСуммуСтандартногоВычета();
		
	ИначеЕсли ВидДокумента = "Пенсионный взнос" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Источник, "ИсточникНаименование,ИсточникИНН,ИсточникКПП,
				|ИсточникОКАТО,НомерДоговора,ДатаДоговора,ЗастрахованноеЛицо,
				|НегосударственныйФонд,СуммаВзносов,СуммаВычета,СуммаВычетаПредоставленнаяАгентом");
		
		СтрокаДокумента.Наименование = НСтр("ru = 'Взнос в ПФ'") + ?(ЗначениеЗаполнено(СтрокаДокумента.ИсточникНаименование), ": " + СтрокаДокумента.ИсточникНаименование, "");
		
	ИначеЕсли ВидДокумента = "Социальные вычеты" Тогда
		
		СтрокаДокумента.ПрочиеСоциальныеВычеты.Загрузить(Источник.ПрочиеСоциальныеВычеты.Выгрузить());
		СтрокаДокумента.Наименование = "Соц. вычеты";
		СтрокаДокумента.СуммаВычета = СтрокаДокумента.ПрочиеСоциальныеВычеты.Итог("СуммаВычета");
		
	ИначеЕсли ВидДокумента = "Имущественный вычет" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Источник, "ЖильеНаименование,ЖильеПризнакНалогоплательщика,ЖильеВидСобственности,
				|ЖильеДоляЧислитель,ЖильеДоляЗнаменатель,ЖильеДатаЗаявленияОРаспределении,ЖильеДатаПраваСобственности,ЖильеДатаПраваНаЗемлю,
				|ЖильеДатаАктаПередачи,ЖильеСтоимость,ЖильеСуммаПроцентов,ЖильеСтоимостьПоНорме,ЖильеГодНачалаВычета,
				|ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам,ЖильеВычетПрошлыхЛетОтАгентаПоРасходам,ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам,ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам,
				|ЖильеВычетЭтогоГодаОтАгентаПоПроцентам,ЖильеВычетЭтогоГодаОтАгентаПоРасходам,ЖильеОстатокВычетаПоПроцентам,ЖильеОстатокВычетаПоРасходам,
				|ЖильеСпособПриобретения,ЖильеАдресСтруктура,ЖильеАдресПредставление");
		
		СтрокаДокумента.Наименование = НСтр("ru = 'Вычет на жилье'") + ?(ЗначениеЗаполнено(СтрокаДокумента.ИсточникНаименование), ": " + СтрокаДокумента.ИсточникНаименование, "");
		
	ИначеЕсли ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, Источник, "ПрошлыйУбытокПоЦБ,ПрошлыйУбытокПоСрочнымСделкам");
		СтрокаДокумента.Наименование = "Убыток по ЦБ за прошлые годы";
		СтрокаДокумента.СуммаВычета = ПрошлыйУбытокПоЦБ + ПрошлыйУбытокПоСрочнымСделкам;
		
	КонецЕсли; 
	
	СтрокаДокумента.ВидДокумента = ВидДокумента;

КонецПроцедуры
 
&НаСервере 
Процедура ВывестиДокументНаФорму(ВидТаблицы, ИДЭлемента)

	Если ВидТаблицы = "Доходы" Тогда
		СтрокиТаблицы = ТаблицаДокументовДоходов.НайтиСтроки(Новый Структура("ИДЭлемента", ИДЭлемента));
	ИначеЕсли ВидТаблицы = "Вычеты" Тогда
		СтрокиТаблицы = ТаблицаДокументовВычета.НайтиСтроки(Новый Структура("ИДЭлемента", ИДЭлемента));
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтрокиТаблицы.Количество() > 0 Тогда
		
		РедактируемыйРаздел = ВидТаблицы;
		РедактируемыйДокумент = ИДЭлемента;
		
		СтрокаДокумента = СтрокиТаблицы[0];
		
		ЗаполнитьРеквизитыФормыДаннымиСтроки(СтрокаДокумента);
		
		Если СтрокаДокумента.ВидДокумента = "2-НДФЛ" Тогда
			СтраницаДокумента = Элементы.Доход2НДФЛ;
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Прочий доход" Тогда
			СтраницаДокумента = Элементы.ДоходПроизвольный;
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Доход в валюте" Тогда
			СтраницаДокумента = Элементы.ДоходВалютный;
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Доход предпринимателя" Тогда
			СтраницаДокумента = Элементы.ДоходПредпринимателя;
			
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Стандартные вычеты" Тогда
			СтраницаДокумента = Элементы.ВычетСтандартный;
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Пенсионный взнос" Тогда
			СтраницаДокумента = Элементы.ВычетПенсионный;
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Социальные вычеты" Тогда
			СтраницаДокумента = Элементы.ВычетПрочийСоциальный;
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Имущественный вычет" Тогда
			СтраницаДокумента = Элементы.ВычетИмущественный;
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
			СтраницаДокумента = Элементы.УбыткиПрошлыхЛетПоЦБ;
		КонецЕсли;
		
		Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = СтраницаДокумента;
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ОпределитьКартинкуЭлементаСтруктуры(СтрокаДокумента)

	Если СтрокаДокумента.ВидДокумента = "2-НДФЛ" Тогда
		Возврат ИконкиОтчета.ДокументДохода;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Прочий доход" Тогда
		Возврат ИконкиОтчета.ДоходыВРФ;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Доход в валюте" Тогда
		Возврат ИконкиОтчета.ДоходыВВалюте;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Доход предпринимателя" Тогда
		Возврат ИконкиОтчета.ДоходыПредпринимателя;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Стандартные вычеты" Тогда
		Возврат ИконкиОтчета.СтандартныеВычеты;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Пенсионный взнос" Тогда
		Возврат ИконкиОтчета.ВзносыВПФ;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Социальные вычеты" Тогда
		Возврат ИконкиОтчета.СоциальныеВычеты;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Имущественный вычет" Тогда
		Возврат ИконкиОтчета.ИмущественныйВычет;
	ИначеЕсли СтрокаДокумента.ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
		Возврат ИконкиОтчета.УбыткиПрошлыхЛетПоЦБ;
		
	КонецЕсли; 

КонецФункции

&НаСервере
Функция ПолучитьВидДоходаПоКоду(КодДохода, ТолькоДляНалогаСоСтавкой = Неопределено)

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СуффиксМакета = Прав(ЭтаФорма.ИмяФормы, 7);
	
	Макет = ОтчетОбъект.ПолучитьМакет("КодыДоходовИВычетов" + СуффиксМакета).ПолучитьОбласть("КодыДоходов");
	Результат = Новый Структура("КодДохода,НаименованиеДохода,СтавкаНалога,КодыВычетов", "", "", 0, "");
	
	ОбластьДохода = Макет.НайтиТекст(КодДохода, , Макет.Область(1, 1, Макет.ВысотаТаблицы, 1), , Истина);
	
	Если ОбластьДохода <> Неопределено Тогда
		
		Счетчик = ОбластьДохода.Верх;
		Если СтатусНалогоплательщика = 2 Тогда
			СтавкаНалогаПоКоду = Макет.Область(Счетчик,6,Счетчик,6).Текст;
			КодыВычетов = Макет.Область(Счетчик,8,Счетчик,8).Текст;
		Иначе
			СтавкаНалогаПоКоду = Макет.Область(Счетчик,5,Счетчик,5).Текст;
			КодыВычетов = Макет.Область(Счетчик,7,Счетчик,7).Текст;
		КонецЕсли; 
		СтавкаЧислом = ?(ЗначениеЗаполнено(СтавкаНалогаПоКоду), Число(СтавкаНалогаПоКоду), 0);
		
		Если ТолькоДляНалогаСоСтавкой = Неопределено ИЛИ СтавкаЧислом = ТолькоДляНалогаСоСтавкой Тогда
			Результат.КодДохода                  = Макет.Область(Счетчик, 1, Счетчик, 1).Текст;
			Результат.НаименованиеДохода         = Макет.Область(Счетчик, 2, Счетчик, 2).Текст;
			Результат.СтавкаНалога               = СтавкаЧислом;
			Результат.КодыВычетов                = КодыВычетов;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции
 
&НаСервере
Функция ПолучитьВидВычетаПоКоду(КодВычета)

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СуффиксМакета = Прав(ЭтаФорма.ИмяФормы, 7);
	
	Макет = ОтчетОбъект.ПолучитьМакет("КодыДоходовИВычетов" + СуффиксМакета).ПолучитьОбласть("КодыВычетов");
	Результат = Новый Структура("КодВычета,НаименованиеВычета,ПределВычета,ПределДохода,СпособРасчетаВычета", 
		"", "", 0, 0, 0);
	
	ОбластьВычета = Макет.НайтиТекст(КодВычета, , Макет.Область(1, 1, Макет.ВысотаТаблицы, 1), , Истина);
	
	Если ОбластьВычета <> Неопределено Тогда
		
		Счетчик = ОбластьВычета.Верх;
		ПределВычета = Макет.Область(Счетчик, 5, Счетчик, 5).Текст;
		ПределВычета = ?(ЗначениеЗаполнено(ПределВычета), Число(ПределВычета), 0);
		ПределДохода = Макет.Область(Счетчик, 6, Счетчик, 6).Текст;
		ПределДохода = ?(ЗначениеЗаполнено(ПределДохода), Число(ПределДохода), 0);
		СпособВычета = Макет.Область(Счетчик, 7, Счетчик, 7).Текст;
		СпособВычета = ?(ЗначениеЗаполнено(СпособВычета), Число(СпособВычета), 0);
		
		Результат.КодВычета                  = Макет.Область(Счетчик, 1, Счетчик, 1).Текст;
		Результат.НаименованиеВычета         = Макет.Область(Счетчик, 2, Счетчик, 2).Текст;
		Результат.ПределВычета               = ПределВычета;
		Результат.ПределДохода               = ПределДохода;
		Результат.СпособРасчетаВычета        = СпособВычета;
		
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруАдресаВРФ(Знач ОригинальныйАдрес = Неопределено)

	Резкльтат = Новый Структура("Индекс,Регион,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира"
			,"","Москва","77");
	Если ТипЗнч(ОригинальныйАдрес) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Резкльтат, ОригинальныйАдрес);
	КонецЕсли; 
	
	Возврат Резкльтат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСпискиВыбораПоГодуОчтета()

	// стандартные вычеты на работника
	Элементы.СтандартныеВычетыНаРаботника.СписокВыбора.Очистить();
	Элементы.СтандартныеВычетыНаРаботника.СписокВыбора.Добавить(0, "нет вычета");
	Если ГодОтчета < 2011 Тогда
		Элементы.СтандартныеВычетыНаРаботника.СписокВыбора.Добавить(400, "400 руб/мес");
	КонецЕсли;
	Элементы.СтандартныеВычетыНаРаботника.СписокВыбора.Добавить(3000, "3 000 руб/мес");
	Элементы.СтандартныеВычетыНаРаботника.СписокВыбора.Добавить(500, "500 руб/мес");
	 

КонецПроцедуры
 

// Чтение-запись отчета

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуИменСохраняемыхСвойств()

	Возврат "АдресВРФОкато,АдресВРФПредставление,
			|АдресВРФСтруктура,
			|АдресВРФТипАдреса,
			|АдресЗаПределамиРФ,ВидДекларации,ГодОтчета,ДатаПодписи,ДатаВыдачиДокумента,
			|КатегорияНалогоплательщика,КемВыданДокумент,КодВидаДокумента,КодИФНС,КодСтраныГражданства,
			|Комментарий,КПП,НаименованиеВидаДокумента,НаименованиеИФНС,НалогоплательщикДатаРождения,НалогоплательщикМестоРождения,
			|НалогоплательщикИмя,НалогоплательщикИНН,НалогоплательщикОтчество,НалогоплательщикФамилия,
			|НомерКорректировки,НомерТелефона,СерияИНомерДокумента,СтатусНалогоплательщика,СтранаГражданства,
			|СуммаФиксированныхАвансовыхПлатежей,КоличествоПриложений";

КонецФункции

&НаСервере
Процедура ПроверитьСохраненныеДанныеПомощника(ДанныеПомощника)

	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПолучитьСтрокуИменСохраняемыхСвойств(), ",");
	Для Каждого Слово Из МассивСлов Цикл
		Если НЕ ДанныеПомощника.Свойство(Слово) Тогда
			ДанныеПомощника.Вставить(Слово);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
&НаСервере
Процедура ОчиститьДанныеФормы(ОчищатьТитульныйЛист = Истина)

	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ПолучитьСтрокуИменСохраняемыхСвойств(), ",");
	Если ОчищатьТитульныйЛист Тогда
		Для Каждого Слово Из МассивСлов Цикл
			Если ЗначениеЗаполнено(Слово) Тогда
				ЭтотОбъект[СокрЛП(Слово)] = Неопределено;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ТаблицаДокументовВычета.Очистить();
	//ТаблицаДокументовДоходов.Очистить();
	Для Каждого СтрокаНалога Из ТаблицаУплаченныхНалогов Цикл
		СтрокаНалога.СуммаНалога = 0;
	КонецЦикла; 

КонецПроцедуры
 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхПомощникаЗаполнения()

	ДанныеПомощника = Новый Структура(ПолучитьСтрокуИменСохраняемыхСвойств());
			
	ДанныеПомощника.Вставить("ВерсияПомощника", "2.0.0");
	Возврат ДанныеПомощника;

КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицыПомощникаДаннымиОтчета()

	ЗаполнитьЗначенияПоУмлчанию = Истина;
	Если ЗначениеЗаполнено(СсылкаНаДокументОтчета) ИЛИ ЗначениеЗаполнено(Параметры.мСкопированаФорма) Тогда
		
		Если ЗначениеЗаполнено(Параметры.мСкопированаФорма) Тогда
			ДокументОбъект = Параметры.мСохраненныйДок.Скопировать();
			СсылкаНаДокументОтчета = Неопределено;
		Иначе
			ДокументОбъект = СсылкаНаДокументОтчета.ПолучитьОбъект();
		КонецЕсли; 
		ДанныеОтчета   = ДокументОбъект.ДанныеОтчета.Получить();
		
		Если  ТипЗнч(ДанныеОтчета) = Тип("Структура") 
			И ДанныеОтчета.Свойство("ДанныеПомощника")
			И ТипЗнч(ДанныеОтчета.ДанныеПомощника) = Тип("Структура") Тогда
			
			ДанныеПомощника = ДанныеОтчета.ДанныеПомощника;
			ПроверитьСохраненныеДанныеПомощника(ДанныеПомощника);
			
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПомощника, ПолучитьСтрокуИменСохраняемыхСвойств());
			ТаблицаДокументовВычета.Загрузить(ДанныеПомощника.ТаблицаДокументовВычета);
			Для СчетчикСтрок = 0 По ДанныеПомощника.ТаблицаДокументовВычета.Количество() - 1 Цикл
				Если ДанныеПомощника.ТаблицаДокументовВычета.Колонки.Найти("СтандартныеВычеты") <> Неопределено Тогда
					ТаблицаДокументовВычета[СчетчикСтрок].СтандартныеВычеты.Загрузить(ДанныеПомощника.ТаблицаДокументовВычета[СчетчикСтрок].СтандартныеВычеты);
				КонецЕсли; 
				Если ДанныеПомощника.ТаблицаДокументовВычета.Колонки.Найти("ПрочиеСоциальныеВычеты") <> Неопределено Тогда
					ТаблицаДокументовВычета[СчетчикСтрок].ПрочиеСоциальныеВычеты.Загрузить(ДанныеПомощника.ТаблицаДокументовВычета[СчетчикСтрок].ПрочиеСоциальныеВычеты);
				КонецЕсли; 
			КонецЦикла; 
			ТаблицаДокументовДоходов.Загрузить(ДанныеПомощника.ТаблицаДокументовДоходов);
			Для СчетчикСтрок = 0 По ДанныеПомощника.ТаблицаДокументовДоходов.Количество() - 1 Цикл
				Если ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Найти("ДваНДФЛ_Начисления") <> Неопределено Тогда
					ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Начисления.Загрузить(ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Начисления);
				КонецЕсли; 
				Если ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Найти("ДваНДФЛ_Вычеты") <> Неопределено Тогда
					ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Вычеты.Загрузить(ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Вычеты);
				КонецЕсли; 
				Если ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Найти("ДваНДФЛ_Итоги") <> Неопределено Тогда
					ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Итоги.Загрузить(ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Итоги);
				КонецЕсли; 
				Если ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Найти("ОтчетПредпринимателя") <> Неопределено Тогда
					ТаблицаДокументовДоходов[СчетчикСтрок].ОтчетПредпринимателя.Загрузить(ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ОтчетПредпринимателя);
				КонецЕсли; 
			КонецЦикла; 
			ТаблицаУплаченныхНалогов.Загрузить(ДанныеПомощника.ТаблицаУплаченныхНалогов);
			
			ЗаполнитьЗначенияПоУмлчанию = Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Добавляем элементы в группы доходов и расходов:
	Для Каждого СтрокаДохода Из ТаблицаДокументовДоходов Цикл
		Если СтрокаДохода.СтатусНалогоплательщика = СтатусНалогоплательщика Тогда
			СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[2].ПолучитьЭлементы().Добавить();
			СтрокаСтруктуры.ИДЭлемента = СтрокаДохода.ИДЭлемента;
			СтрокаСтруктуры.Наименование = СтрокаДохода.Наименование;
			СтрокаСтруктуры.ИконкаСтроки = ОпределитьКартинкуЭлементаСтруктуры(СтрокаДохода);
			СтрокаСтруктуры.РазрешеноКопировать = Истина;
			СтрокаСтруктуры.РазрешеноУдалять    = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтруктураОтчета.ПолучитьЭлементы()[2].ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[2].ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.ИДЭлемента = "!ДобавитьДоход";
		СтрокаСтруктуры.Наименование = "Добавить документ дохода...";
		СтрокаСтруктуры.ИконкаСтроки = БиблиотекаКартинок.ДобавитьЭлементСписка;
	КонецЕсли; 
	
	Для Каждого СтрокаВычета Из ТаблицаДокументовВычета Цикл
		Если СтрокаВычета.СтатусНалогоплательщика = СтатусНалогоплательщика Тогда
			СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3].ПолучитьЭлементы().Добавить();
			СтрокаСтруктуры.ИДЭлемента = СтрокаВычета.ИДЭлемента;
			СтрокаСтруктуры.Наименование = СтрокаВычета.Наименование;
			СтрокаСтруктуры.ИконкаСтроки = ОпределитьКартинкуЭлементаСтруктуры(СтрокаВычета);
			СтрокаСтруктуры.РазрешеноКопировать = СтрокаВычета.ВидДокумента = "Пенсионный взнос";
			СтрокаСтруктуры.РазрешеноУдалять    = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтруктураОтчета.ПолучитьЭлементы()[3].ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3].ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.ИДЭлемента = "!ДобавитьВычет";
		СтрокаСтруктуры.Наименование = "Добавить вычет...";
		СтрокаСтруктуры.ИконкаСтроки = БиблиотекаКартинок.ДобавитьЭлементСписка;
	КонецЕсли; 
	
	// Зполняем значениями по умолчанию:
	Если ЗаполнитьЗначенияПоУмлчанию Тогда
		Если Параметры.Свойство("мДатаКонцаПериодаОтчета") Тогда
			ГодОтчета = Год(Параметры.мДатаКонцаПериодаОтчета);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ГодОтчета) Тогда
			ГодОтчета = Год(ТекущаяДатаКлиентСервер()) - ?(Месяц(ТекущаяДатаКлиентСервер()) > 6, 0, 1);
		КонецЕсли; 
		СтатусНалогоплательщика = 1;
		ДатаПодписи = Макс(ТекущаяДатаКлиентСервер(), НачалоГода(Параметры.мДатаКонцаПериодаОтчета));
		КодВидаДокумента = "21";
		НаименованиеВидаДокумента = "Паспорт гражданина Российской Федерации";
		СтранаГражданства = "РОССИЯ";
		КодСтраныГражданства = "643";
		КатегорияНалогоплательщика = "760";
		Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
			НаименованиеИФНС = НСтр("ru = '<Инспекция не выбрана>'");
		КонецЕсли; 
		АдресВРФТипАдреса = 1;
	КонецЕсли; 
	
	// Проверяем корректность заполнения данных:
	Если ТипЗнч(АдресВРФСтруктура) <> Тип("Структура") ИЛИ АдресВРФСтруктура.Количество() = 0 Тогда
		АдресВРФСтруктура = ПолучитьСтруктуруАдресаВРФ();
	КонецЕсли; 
	
	Если ТаблицаУплаченныхНалогов.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаУплаченныхНалогов.Добавить();
		НоваяСтрока.КодКБК = "182 1 01 02010 01 1000 110";
		НоваяСтрока.Пояснение = "Налог на доходы, полученные от налоговых агентов";
		НоваяСтрока = ТаблицаУплаченныхНалогов.Добавить();
		НоваяСтрока.КодКБК = "182 1 01 02020 01 1000 110";
		НоваяСтрока.Пояснение = "Налог на доходы предпринимателей и лиц, занимающихся частной практикой";
		НоваяСтрока = ТаблицаУплаченныхНалогов.Добавить();
		НоваяСтрока.КодКБК = "182 1 01 02030 01 1000 110";
		НоваяСтрока.Пояснение = "Налог на доходы, при получении которых не был удержан подоходный налог";
		НоваяСтрока = ТаблицаУплаченныхНалогов.Добавить();
		НоваяСтрока.КодКБК = "182 1 01 02040 01 1000 110";
		НоваяСтрока.Пояснение = "Фиксированные платежи с доходов иностранных граждан, трудящихся по найму и на основании патента";
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаписатьНаСервере(ОбновлятьДанныеОтчета = Ложь, ОтказатьсяОтПомощника = Ложь)
	
	Если ЗначениеЗаполнено(РедактируемыйДокумент) Тогда
		СохранитьРедактируемыйДокумент();
		Модифицированность = Истина;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СсылкаНаДокументОтчета) Тогда
		ДокументОбъект = СсылкаНаДокументОтчета.ПолучитьОбъект();
		ДокументОбъект.ВыбраннаяФорма           = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
	Иначе
		ДокументОбъект = Документы.РегламентированныйОтчет.СоздатьДокумент();
		//{{ 1С:Деньги 8 
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ПрефиксИменМакетов = Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета"));
		//}} 1С:Деньги 8 
		
		// установим текущие значения реквизитов документа
		//{{ 1С:Деньги 8 
		ДокументОбъект.ИсточникОтчета           = "РегламентированныйОтчет3НДФЛ";
		ДокументОбъект.НаименованиеОтчета       = Метаданные.Отчеты.РегламентированныйОтчет3НДФЛ.ОсновнаяФорма.Синоним;
		//}} 1С:Деньги 8 
		ДокументОбъект.Периодичность            = Перечисления.Периодичность.Год;
		ДокументОбъект.ВыбраннаяФорма           = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
		ДокументОбъект.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		ДокументОбъект.ТочностьЕдиницыИзмерения = 0;
		ДокументОбъект.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	КонецЕсли; 

	ДокументОбъект.Дата                     = ДатаПодписи;
	ДокументОбъект.ДатаНачала               = Дата(ГодОтчета, 1, 1);
	ДокументОбъект.ДатаОкончания            = КонецГода(ДокументОбъект.ДатаНачала);
	ДокументОбъект.Организация              = ПолучитьОрганизацию(НалогоплательщикФамилия, НалогоплательщикИмя, НалогоплательщикОтчество, НалогоплательщикИНН, КодИФНС);
	ДокументОбъект.ДатаПодписи              = ДатаПодписи;
	ДокументОбъект.Комментарий              = Комментарий;
	ДокументОбъект.КодНалоговогоОргана      = КодИФНС;
	ДокументОбъект.КПП        			    = КПП;
	ДокументОбъект.Вид                      = ВидДекларации * НомерКорректировки;
	ДокументОбъект.ИспользоватьПомощникЗаполнения = ОтказатьсяОтПомощника <> Истина;
	
	ДанныеОтчета = ДокументОбъект.ДанныеОтчета.Получить();
	
	Если НЕ ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
		ДанныеОтчета = Новый Структура;
	КонецЕсли; 
	
	ДанныеПомощника = ПолучитьСтруктуруДанныхПомощникаЗаполнения();
	ЗаполнитьЗначенияСвойств(ДанныеПомощника, ЭтотОбъект);
	ДанныеПомощника.Вставить("ТаблицаДокументовВычета", ТаблицаДокументовВычета.Выгрузить());
	ДанныеПомощника.ТаблицаДокументовВычета.Колонки.Добавить("СтандартныеВычеты");
	ДанныеПомощника.ТаблицаДокументовВычета.Колонки.Добавить("ПрочиеСоциальныеВычеты");
	Для СчетчикСтрок = 0 По ДанныеПомощника.ТаблицаДокументовВычета.Количество() - 1 Цикл
		ДанныеПомощника.ТаблицаДокументовВычета[СчетчикСтрок].СтандартныеВычеты = ТаблицаДокументовВычета[СчетчикСтрок].СтандартныеВычеты.Выгрузить();
		ДанныеПомощника.ТаблицаДокументовВычета[СчетчикСтрок].ПрочиеСоциальныеВычеты = ТаблицаДокументовВычета[СчетчикСтрок].ПрочиеСоциальныеВычеты.Выгрузить();
	КонецЦикла; 
	ДанныеПомощника.Вставить("ТаблицаДокументовДоходов", ТаблицаДокументовДоходов.Выгрузить());
	ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Добавить("ДваНДФЛ_Начисления");
	ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Добавить("ДваНДФЛ_Вычеты");
	ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Добавить("ДваНДФЛ_Итоги");
	ДанныеПомощника.ТаблицаДокументовДоходов.Колонки.Добавить("ОтчетПредпринимателя");
	Для СчетчикСтрок = 0 По ДанныеПомощника.ТаблицаДокументовДоходов.Количество() - 1 Цикл
		ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Начисления = ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Начисления.Выгрузить();
		ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Вычеты = ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Вычеты.Выгрузить();
		ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Итоги = ТаблицаДокументовДоходов[СчетчикСтрок].ДваНДФЛ_Итоги.Выгрузить();
		ДанныеПомощника.ТаблицаДокументовДоходов[СчетчикСтрок].ОтчетПредпринимателя = ТаблицаДокументовДоходов[СчетчикСтрок].ОтчетПредпринимателя.Выгрузить();
	КонецЦикла; 
	ДанныеПомощника.Вставить("ТаблицаУплаченныхНалогов", ТаблицаУплаченныхНалогов.Выгрузить());
	
	ДанныеОтчета.Вставить("ДанныеПомощника", ДанныеПомощника);
	
	Если ОбновлятьДанныеОтчета Тогда
		ПараметрыЗаполнения = Неопределено;
		ПодготовитьПоказателиОтчетаКЗаписи(ДанныеОтчета, ПараметрыЗаполнения);
		ЗаполнитьОтчетДанными(ДанныеОтчета, ПараметрыЗаполнения);
		ДокументОбъект.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	КонецЕсли; 
	
	ДокументОбъект.ДанныеОтчета = Новый ХранилищеЗначения(ДанныеОтчета);
	ДокументОбъект.Комментарий = ?(ВидДекларации = 0, "Декларация", "Корректировка № " +НомерКорректировки)
			+ ": "  + ПолучитьФИО(НалогоплательщикФамилия, НалогоплательщикИмя, НалогоплательщикОтчество);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	СсылкаНаДокументОтчета = ДокументОбъект.Ссылка;
	
	Модифицированность = Ложь;
	
КонецПроцедуры


// Обслуживание страницы <ТитульныйЛист>

&НаКлиентеНаСервереБезКонтекста 
Процедура ТитульныйЛист_ОбновитьЗаголовкиГрупп(Форма)

	Элементы = Форма.Элементы;
	СтрокаФИО = ПолучитьФИО(Форма.НалогоплательщикФамилия, Форма.НалогоплательщикИмя, Форма.НалогоплательщикОтчество);
	Заголовок = "Декларация 3-НДФЛ за " + Формат(Форма.ГодОтчета, "ЧГ=")  + " год"
		+ ?(ЗначениеЗаполнено(СтрокаФИО), ". " + СтрокаФИО, "");
	ТекстЗаголовка = НСтр("ru = 'Налогоплательщик'");
	//Элементы.ГруппаФИОНалогоплательщика.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаФИОНалогоплательщика.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка + ": " + СтрокаФИО; 
	
	ТекстЗаголовка = НСтр("ru = 'Статус налогоплательщика'");
	//Элементы.ГруппаСтатусНалогоплательщика.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаСтатусНалогоплательщика.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка + ": " + ?(Форма.СтатусНалогоплательщика = 1, НСтр("ru = 'Налоговый резидент РФ'") , НСтр("ru = 'Не резидент'") ); 
	
	ТекстКатегории = НСтр("ru = 'Категория налогоплательщика'"); 
	Если Форма.КатегорияНалогоплательщика = "760" Тогда
		ТекстЗаголовка = ТекстКатегории + ": " + НСтр("ru = 'физ.лицо - не предприниматель'");
	ИначеЕсли Форма.КатегорияНалогоплательщика = "720" Тогда
		ТекстЗаголовка = ТекстКатегории + ": " + НСтр("ru = 'Индивидуальный предприниматель'");
	ИначеЕсли Форма.КатегорияНалогоплательщика = "770" Тогда
		ТекстЗаголовка = ТекстКатегории + ": " + НСтр("ru = 'Глава фермерского хозяйства'");
	ИначеЕсли Форма.КатегорияНалогоплательщика = "740" Тогда
		ТекстЗаголовка = ТекстКатегории + ": " + НСтр("ru = 'Адвокат'");
	ИначеЕсли Форма.КатегорияНалогоплательщика = "730" Тогда
		ТекстЗаголовка = ТекстКатегории + ": " + НСтр("ru = 'Нотариус'");
	КонецЕсли; 
	//Элементы.ГруппаКатегорияНалогоплательщика.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаКатегорияНалогоплательщика.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	Элементы.НалогоплательщикИНН.АвтоОтметкаНезаполненного = (Форма.КатегорияНалогоплательщика <> "760");

КонецПроцедуры

&НаСервере
Процедура КодИФНСПриИзмененииНаСервере(Код)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	МакетИнспекций = ОтчетОбъект.ПолучитьМакет("СписокИнспекций");
	
	ОбластьМакета = МакетИнспекций.НайтиТекст(Код, , МакетИнспекций.Область(1, 2, МакетИнспекций.ВысотаТаблицы, 2), , Истина);
	Если ОбластьМакета = Неопределено Тогда
		НаименованиеИФНС = НСтр("ru = '<Инспекция с указанным кодом не найдена>'");
	Иначе
		НаименованиеИФНС = МакетИнспекций.Область(ОбластьМакета.Верх, 1, ОбластьМакета.Верх, 1).Текст;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРезидентаСервер()

	Если ТаблицаДокументовДоходов.Количество() > 0 Тогда
		
		Для Каждого СтрокаДохода Из ТаблицаДокументовДоходов Цикл
			Если СтрокаДохода.СтатусНалогоплательщика = СтатусНалогоплательщика Тогда
				СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[2].Добавить();
				СтрокаСтруктуры.ИДЭлемента = СтрокаДохода.ИДЭлемента;
				СтрокаСтруктуры.Наименование = СтрокаДохода.Наименование;
				СтрокаСтруктуры.ИконкаСтроки = ОпределитьКартинкуЭлементаСтруктуры(СтрокаДохода);
			КонецЕсли; 
		КонецЦикла; 
		
		Если СтруктураОтчета.ПолучитьЭлементы()[2].Количество() = 0 Тогда
			СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[2].ПолучитьЭлементы().Добавить();
			СтрокаСтруктуры.ИДЭлемента = "!ДобавитьДоход";
			СтрокаСтруктуры.Наименование = "Добавить документ дохода...";
			СтрокаСтруктуры.ИконкаСтроки = БиблиотекаКартинок.ДобавитьЭлементСписка;
		КонецЕсли; 
		
	КонецЕсли; 

	Если ТаблицаДокументовВычета.Количество() > 0 Тогда
		
		СтрокиСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3].ПолучитьЭлементы();
		Для Каждого СтрокаВычета Из ТаблицаДокументовВычета Цикл
			Если СтрокаДохода.СтатусНалогоплательщика = СтатусНалогоплательщика Тогда
				СтрокаСтруктуры = СтрокиСтруктуры.Добавить();
				СтрокаСтруктуры.ИДЭлемента = СтрокаВычета.ИДЭлемента;
				СтрокаСтруктуры.Наименование = СтрокаВычета.Наименование;
				СтрокаСтруктуры.ИконкаСтроки = ОпределитьКартинкуЭлементаСтруктуры(СтрокаВычета);
			КонецЕсли; 
		КонецЦикла; 
		
		Если СтрокиСтруктуры.Количество() = 0 Тогда
			СтрокаСтруктуры = СтрокиСтруктуры.ПолучитьЭлементы().Добавить();
			СтрокаСтруктуры.ИДЭлемента = "!ДобавитьВычет";
			СтрокаСтруктуры.Наименование = "Добавить вычет...";
			СтрокаСтруктуры.ИконкаСтроки = БиблиотекаКартинок.ДобавитьЭлементСписка;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЗаполнитьСписокВыбораСтавкиНалога(Элементы.СтавкаНалога.СписокВыбора, СтатусНалогоплательщика);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораСтавкиНалога(СписокВыбора, Знач СтатусНалогоплательщика)

	СписокВыбора.Очистить();
	Если СтатусНалогоплательщика = 1 Тогда
		СписокВыбора.Добавить(13, "13 %");
		СписокВыбора.Добавить(9,  "9 %");
		СписокВыбора.Добавить(35, "35 %");
	Иначе
		СписокВыбора.Добавить(13, "13 %");
		СписокВыбора.Добавить(15, "15 %");
		СписокВыбора.Добавить(30, "30 %");
	КонецЕсли; 

КонецПроцедуры
 

// Обслуживание страницы <ПерсональныеДанные>

&НаКлиентеНаСервереБезКонтекста 
Процедура ПерсональныеДанные_ОбновитьЗаголовкиГрупп(Форма)

	Элементы = Форма.Элементы;
	ТекстГруппы = НСтр("ru = 'Удостоверение личности'");
	ТекстЗаголовка = ТекстГруппы + ": " +  Форма.НаименованиеВидаДокумента;
	ТекстЗаголовка = ТекстЗаголовка + " № " + ?(ЗначениеЗаполнено(Форма.СерияИНомерДокумента), Форма.СерияИНомерДокумента, НСтр("ru = 'н/д'") );
	ТекстЗаголовка = ТекстЗаголовка + " выдан " + ?(ЗначениеЗаполнено(Форма.ДатаВыдачиДокумента), Формат(Форма.ДатаВыдачиДокумента, "ДФ=дд.ММ.гг") , НСтр("ru = 'н/д'") );
	ТекстЗаголовка = ТекстЗаголовка + ?(ЗначениеЗаполнено(Форма.КемВыданДокумент), ", " + Форма.КемВыданДокумент, "");
	//Элементы.ГруппаУдостоверениеЛичности.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаУдостоверениеЛичности.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 

	ТекстГруппы = НСтр("ru = 'Адрес в РФ'");
	ТекстЗаголовка = ТекстГруппы + ": "  + Форма.АдресВРФПредставление;
	Элементы.ГруппаАдресВРФ.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаАдресВРФ.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
КонецПроцедуры

&НаСервере
Процедура КодВидаДокументаПриИзмененииСервер()

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ИмяМакета = ?(Год(ДатаПодписи) < 2014, "Списки2011кв1", "Списки2014кв1");
	Макет = ОтчетОбъект.ПолучитьМакет(ИмяМакета).ПолучитьОбласть("КодВидаДокумента");
	
	ОбластьМакета = Макет.НайтиТекст(КодВидаДокумента, Макет.Область(1, 1, Макет.ВысотаТаблицы, 1));
	Если ОбластьМакета = Неопределено Тогда
		НаименованиеВидаДокумента = НСтр("ru = '<Неизвестный вид документа>'");
	Иначе
		НаименованиеВидаДокумента = Макет.Область(ОбластьМакета.Верх, 2, ОбластьМакета.Верх, 2).Текст;
	КонецЕсли; 

КонецПроцедуры

// Обслуживание страницы <Доходы>

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьИтогиНаСтраницеДоходы(Форма)

	Элементы = Форма.Элементы;
	
	Форма.ИтогДоходовВведеноДокументов = 0;
	Форма.ИтогДоходовСуммаДохода       = 0;
	Форма.ИтогДоходовНачисленоНалога1  = 0;
	Форма.ИтогДоходовУплаченоНалога1   = 0;
	Форма.ИтогДоходовНачисленоНалога2  = 0;
	Форма.ИтогДоходовУплаченоНалога2   = 0;
	Форма.ИтогДоходовНачисленоНалога3  = 0;
	Форма.ИтогДоходовУплаченоНалога3   = 0;
	
	Для Каждого СтрокаДохода Из Форма.ТаблицаДокументовДоходов Цикл
		
		Если СтрокаДохода.СтатусНалогоплательщика = Форма.СтатусНалогоплательщика Тогда
			
			Форма.ИтогДоходовВведеноДокументов = Форма.ИтогДоходовВведеноДокументов + 1;
			Форма.ИтогДоходовСуммаДохода       = Форма.ИтогДоходовСуммаДохода + СтрокаДохода.СуммаДохода;
			Если СтрокаДохода.СтавкаНалога = 13 Тогда
				Форма.ИтогДоходовНачисленоНалога1 = Форма.ИтогДоходовНачисленоНалога1 + СтрокаДохода.СуммаНалога;
				Форма.ИтогДоходовУплаченоНалога1  = Форма.ИтогДоходовУплаченоНалога1 + СтрокаДохода.СуммаНалогаУдержано + СтрокаДохода.СуммаНалогаУплачено;
			ИначеЕсли СтрокаДохода.СтавкаНалога = 9 ИЛИ СтрокаДохода.СтавкаНалога = 15 Тогда
				Форма.ИтогДоходовНачисленоНалога2 = Форма.ИтогДоходовНачисленоНалога2 + СтрокаДохода.СуммаНалога;
				Форма.ИтогДоходовУплаченоНалога2  = Форма.ИтогДоходовУплаченоНалога2 + СтрокаДохода.СуммаНалогаУдержано + СтрокаДохода.СуммаНалогаУплачено;
			ИначеЕсли СтрокаДохода.СтавкаНалога = 35 ИЛИ СтрокаДохода.СтавкаНалога = 30 Тогда
				Форма.ИтогДоходовНачисленоНалога3 = Форма.ИтогДоходовНачисленоНалога3 + СтрокаДохода.СуммаНалога;
				Форма.ИтогДоходовУплаченоНалога3  = Форма.ИтогДоходовУплаченоНалога3 + СтрокаДохода.СуммаНалогаУдержано + СтрокаДохода.СуммаНалогаУплачено;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Элементы.ИтогДоходовНачисленоНалога1.Заголовок = НСтр("ru = 'Начислено налога по ставке'") + ?(Форма.СтатусНалогоплательщика= 1, " 13%", " 13%");
	Элементы.ИтогДоходовНачисленоНалога2.Заголовок = НСтр("ru = 'Начислено налога по ставке'") + ?(Форма.СтатусНалогоплательщика= 1, " 9%",  " 15%");
	Элементы.ИтогДоходовНачисленоНалога3.Заголовок = НСтр("ru = 'Начислено налога по ставке'") + ?(Форма.СтатусНалогоплательщика= 1, " 35%", " 30%");
	
КонецПроцедуры

// Обслуживание страницы <Доход2НДФЛ>

&НаКлиенте
Процедура Доход2НДФЛ_ОбновитьЗаголовкиГрупп()

	ТекстЗаголовка = НСтр("ru = 'Раздел 1. Данные о налоговом агенте:'") + ?(ЗначениеЗаполнено(ИсточникНаименование), ИсточникНаименование, НСтр("ru = '<не указан>'") );
	Элементы.Группа2НДФЛРаздел1.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.Группа2НДФЛРаздел1.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 

	ТекстЗаголовка = НСтр("ru = 'Раздел 3. Доходы, облагаемые по ставке: '") + ?(ЗначениеЗаполнено(СтавкаНалога), Формат(СтавкаНалога, "ЧЦ=2; ЧДЦ=0") + " %" , "<не указан>");
	Элементы.Группа2НДФЛРаздел3.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.Группа2НДФЛРаздел3.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	ТекстЗаголовка = НСтр("ru = 'Раздел 4. Стандартные, социальные и имущественные налоговые вычеты: '") + Формат(ДваНДФЛ_Вычеты.Итог("СуммаВычета"), "ЧН=0") ;
	Элементы.Группа2НДФЛРаздел4.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.Группа2НДФЛРаздел4.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	ТекстЗаголовка = НСтр("ru = 'Раздел 5. Общие суммы дохода и налога по итогам налогового периода'");
	Элементы.Группа2НДФЛРаздел5.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.Группа2НДФЛРаздел5.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	Элементы.ИспользоватьДляСтандартныхВычетов.Доступность = СтатусНалогоплательщика = 1 И СтавкаНалога = 13;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоги2НДФЛ()

	ДваНДФЛ_Итоги[0].Сумма = ДваНДФЛ_Начисления.Итог("СуммаДохода");
	ДваНДФЛ_Итоги[1].Сумма = ДваНДФЛ_Итоги[0].Сумма 
				- ДваНДФЛ_Начисления.Итог("СуммаВычета") - ДваНДФЛ_Вычеты.Итог("СуммаВычета");
	УдержаноРавноНачислено = ДваНДФЛ_Итоги[2].Сумма = ДваНДФЛ_Итоги[3].Сумма;
	ДваНДФЛ_Итоги[2].Сумма = Окр(ДваНДФЛ_Итоги[1].Сумма * (СтавкаНалога/100), 0, 1);			
	Если УдержаноРавноНачислено Тогда
		ДваНДФЛ_Итоги[3].Сумма = ДваНДФЛ_Итоги[2].Сумма;
	КонецЕсли;
	
	ДолгПоНалогу =  ДваНДФЛ_Итоги[2].Сумма - ДваНДФЛ_Итоги[3].Сумма;
					
	Если ДолгПоНалогу >= 0 Тогда
		ДваНДФЛ_Итоги[5].Сумма = 0;
		ДваНДФЛ_Итоги[6].Сумма = ДолгПоНалогу;
	Иначе
		ДваНДФЛ_Итоги[5].Сумма = -ДолгПоНалогу;
		ДваНДФЛ_Итоги[6].Сумма = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуВычетаВСтроке2НДФЛ(СтрокаДохода)

	ПересчитыватьИтоги = Ложь;
	
	Если СтрокаДохода.КодВычета = "301" Тогда // Имущество, находившееся в собственности менее 3-х лет, не более 1000000 всего
		
		ПересчитыватьИтоги = ЗначениеЗаполнено(СтрокаДохода.СуммаДохода);
		СтрокаДохода.СуммаВычета = Мин(1000000, СтрокаДохода.СуммаДохода);
		
	ИначеЕсли СтрокаДохода.КодВычета = "303" Тогда // Имущество, находившееся в собственности менее 3-х лет, не более 250000 всего
		
		ПересчитыватьИтоги = ЗначениеЗаполнено(СтрокаДохода.СуммаДохода);
		СтрокаДохода.СуммаВычета = Мин(250000, СтрокаДохода.СуммаДохода);
		
	ИначеЕсли СтрокаДохода.КодВычета = "305Н" Тогда // Фактически осуществленные расходы
		
		ПересчитыватьИтоги = ЗначениеЗаполнено(СтрокаДохода.СуммаДохода) ИЛИ ЗначениеЗаполнено(СтрокаДохода.СуммаВычета);
		СтрокаДохода.СуммаВычета = Мин(СтрокаДохода.СуммаВычета, СтрокаДохода.СуммаДохода);
		
	ИначеЕсли СтрокаДохода.КодВычета = "405" Тогда // Вычет по авторским вознаграждениям в пределах номрмы
		
		ПересчитыватьИтоги = ЗначениеЗаполнено(СтрокаДохода.СуммаДохода);
		Если СтрНайти("2201,2207,2208,", СтрокаДохода.КодДохода + ",") > 0 Тогда
			СтрокаДохода.СуммаВычета = СтрокаДохода.СуммаДохода * 0.2;
		ИначеЕсли СтрНайти("2202,2204,2209,", СтрокаДохода.КодДохода + ",") > 0 Тогда
			СтрокаДохода.СуммаВычета = СтрокаДохода.СуммаДохода * 0.3;
		ИначеЕсли СтрНайти("2203,2205,", СтрокаДохода.КодДохода + ",") > 0 Тогда
			СтрокаДохода.СуммаВычета = СтрокаДохода.СуммаДохода * 0.4;
		ИначеЕсли СтрНайти("2206,", СтрокаДохода.КодДохода + ",") > 0 Тогда
			СтрокаДохода.СуммаВычета = СтрокаДохода.СуммаДохода * 0.25;
		КонецЕсли; 
		
	ИначеЕсли СтрНайти("501,502,2760,2761,2770,", СтрокаДохода.КодВычета + ",") > 0  Тогда // Подарки, мат.помощь, не более 4000
		
		ПересчитыватьИтоги = ЗначениеЗаполнено(СтрокаДохода.СуммаДохода) ИЛИ ЗначениеЗаполнено(СтрокаДохода.СуммаВычета);
		СтрокаДохода.СуммаВычета = Мин(СтрокаДохода.СуммаВычета, СтрокаДохода.СуммаДохода, 4000);
		
	ИначеЕсли СтрНайти("2790,", СтрокаДохода.КодДохода + ",") > 0  Тогда //
		
		ПересчитыватьИтоги = ЗначениеЗаполнено(СтрокаДохода.СуммаДохода) ИЛИ ЗначениеЗаполнено(СтрокаДохода.СуммаВычета);
		СтрокаДохода.СуммаВычета = Мин(СтрокаДохода.СуммаВычета, СтрокаДохода.СуммаДохода, 10000);
		
	ИначеЕсли СтрНайти("505,", СтрокаДохода.КодВычета + ",") > 0  Тогда // 
		
		ПересчитыватьИтоги = ЗначениеЗаполнено(СтрокаДохода.СуммаДохода) ИЛИ ЗначениеЗаполнено(СтрокаДохода.СуммаВычета);
		СтрокаДохода.СуммаВычета = Мин(СтрокаДохода.СуммаВычета, СтрокаДохода.СуммаДохода, 4000);
		
	ИначеЕсли СтрНайти("990,", СтрокаДохода.КодВычета + ",") > 0  Тогда // Необлагаемый доход
		
		ПересчитыватьИтоги = Истина;
		СтрокаДохода.СуммаВычета = СтрокаДохода.СуммаДохода;
		
	КонецЕсли;
	
	Если ПересчитыватьИтоги Тогда
		ПересчитатьИтоги2НДФЛ();
	КонецЕсли; 

КонецПроцедуры
 
// Обслуживание страницы <ДоходПроизвольный>

&НаКлиентеНаСервереБезКонтекста 
Процедура ДоходПроизвольныйИзменитьДоступностьВычета(Форма)

	Элементы = Форма.Элементы;
	Элементы.ГруппаИнформацияОВычете.Доступность  = Форма.КодыВычетов <> "";
	Элементы.ГруппаИнформацияОВычете1.Доступность = Форма.КодыВычетов <> "";
	Элементы.СуммаВычета.Доступность = ЗначениеЗаполнено(Форма.КодВычета) И СтрНайти("301,303,405,", Форма.КодВычета + ",") = 0;
	Элементы.СуммаВычета1.Доступность = Элементы.СуммаВычета.Доступность;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуВычетаНаФорме()

	Модифицированность = Истина;
	Если КодВычета = "301" Тогда // Имущество, находившееся в собственности менее 3-х лет, не более 1000000 всего
		
		СуммаВычета = Мин(1000000, СуммаДохода);
		
	ИначеЕсли КодВычета = "303" Тогда // Имущество, находившееся в собственности менее 3-х лет, не более 250000 всего
		
		СуммаВычета = Мин(250000, СуммаДохода);
		
	ИначеЕсли КодВычета = "305Н" Тогда // Фактически осуществленные расходы
		
		СуммаВычета = Мин(СуммаВычета, СуммаДохода);
		
	ИначеЕсли КодВычета = "405" Тогда // Вычет по авторским вознаграждениям в пределах номрмы
		
		Если СтрНайти("2201,2207,2208,", КодДохода + ",") > 0 Тогда
			СуммаВычета = СуммаДохода * 0.2;
		ИначеЕсли СтрНайти("2202,2204,2209,", КодДохода + ",") > 0 Тогда
			СуммаВычета = СуммаДохода * 0.3;
		ИначеЕсли СтрНайти("2203,2205,", КодДохода + ",") > 0 Тогда
			СуммаВычета = СуммаДохода * 0.4;
		ИначеЕсли СтрНайти("2206,", КодДохода + ",") > 0 Тогда
			СуммаВычета = СуммаДохода * 0.25;
		КонецЕсли; 
		
	ИначеЕсли СтрНайти("501,502,2760,2761,2770,", КодВычета + ",") > 0  Тогда // Подарки, мат.помощь, не более 4000
		
		СуммаВычета = Мин(СуммаВычета, СуммаДохода, 4000);
		
	ИначеЕсли СтрНайти("2790,", КодДохода + ",") > 0  Тогда // 
		
		СуммаВычета = Мин(СуммаВычета, СуммаДохода, 10000);
		
	ИначеЕсли СтрНайти("505,", КодВычета + ",") > 0  Тогда // Подарки, мат.помощь, не более 4000
		
		СуммаВычета = Мин(СуммаВычета, СуммаДохода, 4000);
		
	ИначеЕсли СтрНайти("990,", КодВычета + ",") > 0  Тогда // Необлагаемый доход
		
		СуммаВычета = СуммаДохода;
		
	КонецЕсли; 

КонецПроцедуры
 

// Обслуживание страницы <ДоходВалютный>

&НаСервере
Процедура ОбновитьКурсыСделкиВВалюте(ОбновлятьДоход, ОбновлятьНалог)

	Если ОбновлятьДоход И ЗначениеЗаполнено(ДатаДохода) Тогда
		КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДохода, ДатаДохода, ВалютаРубль);
		КурсНаДатуДохода = КурсИКратность.Курс;
		КратностьВалютыДохода = КурсИКратность.Кратность;
		СуммаДохода = ПересчитатьСуммуРублейПоКурсуВалюты(СуммаДоходаВВалюте, КурсНаДатуДохода, КратностьВалютыДохода);
	КонецЕсли; 

	Если ОбновлятьНалог И ЗначениеЗаполнено(ДатаУплатыНалога) Тогда
		КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДохода, ДатаУплатыНалога, ВалютаРубль);
		КурсНаДатуУплатыНалога = КурсИКратность.Курс;
		КратностьВалютыДохода = КурсИКратность.Кратность;
		СуммаНалогаУплаченоЗаГраницей = ПересчитатьСуммуРублейПоКурсуВалюты(СуммаНалогаУплаченоВВалюте, КурсНаДатуУплатыНалога, КратностьВалютыДохода);
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьСуммуРублейПоКурсуВалюты(СуммаВВалюте, Курс, Кратность)

	Возврат СуммаВВалюте * Курс / Макс(Кратность, 1);

КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьКурсПоСуммам(СуммаВВалюте, СуммаВРублях, Кратность)

	Если СуммаВВалюте = 0 Тогда
		Возврат 0
	Иначе
		Возврат (СуммаВРублях / СуммаВВалюте) * Макс(Кратность, 1);
	КонецЕсли; 

КонецФункции

&НаСервере
Функция НалогДругойСтраныПодлежитЗачету(КодСтраны)

	Если СтраныДопускающиеЗачетНалога.Количество() = 0 Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		Макет = ОтчетОбъект.ПолучитьМакет("СтраныМира").ПолучитьОбласть("СписокСтран");
		Результат = Новый СписокЗначений;
		Для Счетчик = 1 По Макет.ВысотаТаблицы Цикл
			Если ЗначениеЗаполнено(Макет.Область(Счетчик, 6, Счетчик, 6).Текст) Тогда
				СтраныДопускающиеЗачетНалога.Добавить(Макет.Область(Счетчик, 1, Счетчик, 1).Текст, Макет.Область(Счетчик, 2, Счетчик, 2).Текст);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат СтраныДопускающиеЗачетНалога.НайтиПоЗначению(КодСтраны) <> Неопределено;

КонецФункции
 

// Обслуживание страницы <ДоходПредпринимателя>

&НаКлиентеНаСервереБезКонтекста 
Процедура ДоходПредпринимателя_ОбновитьЗаголовкиГрупп(Форма)

	Элементы = Форма.Элементы;
	
	ТекстЗаголовка = НСтр("ru = 'Описание вида деятельности: '") + Форма.ВидДеятельностиНаименование;
	//Элементы.ГруппаВидДеятельности.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаВидДеятельности.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	//ТекстЗаголовка = НСтр("ru = 'Доходы и расходы за год'");
	////Элементы.ГруппаДоходыРасходыПоМесяцам.Заголовок = "▼ " + ТекстЗаголовка; 
	//Элементы.ГруппаДоходыРасходыПоМесяцам.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	//
	//ТекстЗаголовка = НСтр("ru = 'Авансовые платежи и уплата налога'");
	////Элементы.ГруппаАвансовыеПлатежи.Заголовок = "▼ " + ТекстЗаголовка; 
	////Элементы.ГруппаАвансовыеПлатежи.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	Элементы.ЭтоКФХ.Доступность = Форма.ВидДеятельностиИндекс = 1 ИЛИ Форма.ВидДеятельностиИндекс = 4;
	Элементы.ГодОбразованияКФХ.Доступность = Элементы.ЭтоКФХ.Доступность И Форма.ЭтоКФХ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыПредпринимателяВСтроке(СтрокаТаблицы)

	Если РасходыПредпринимателяПоДокументам = 1 Тогда
		Если СтрокаТаблицы.НаОплатуТрудаВсего < СтрокаТаблицы.ПоТрудовымДоговорам Тогда
			СтрокаТаблицы.НаОплатуТрудаВсего = СтрокаТаблицы.ПоТрудовымДоговорам;
		КонецЕсли; 
		СтрокаТаблицы.СуммаРасходаВсего = СтрокаТаблицы.МатериальныеРасходы 
				+ СтрокаТаблицы.АмортизацияОС 
				+ СтрокаТаблицы.НаОплатуТрудаВсего 
				+ СтрокаТаблицы.ПрочиеРасходы;
	Иначе
		СтрокаТаблицы.СуммаРасходаВсего = СтрокаТаблицы.СуммаДохода * 0.2;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОтчетПредпринимателяОбновитьИтогиВКолонках()

	Элементы.ОтчетПредпринимателяСуммаДохода.ТекстПодвала          = ОтчетПредпринимателя.Итог("СуммаДохода");
	Элементы.ОтчетПредпринимателяМатериальныеРасходы.ТекстПодвала  = ОтчетПредпринимателя.Итог("МатериальныеРасходы");
	Элементы.ОтчетПредпринимателяАмортизацияОС.ТекстПодвала        = ОтчетПредпринимателя.Итог("АмортизацияОС");
	Элементы.ОтчетПредпринимателяНаОплатуТрудаВсего.ТекстПодвала   = ОтчетПредпринимателя.Итог("НаОплатуТрудаВсего");
	Элементы.ОтчетПредпринимателяПоТрудовымДоговорам.ТекстПодвала  = ОтчетПредпринимателя.Итог("ПоТрудовымДоговорам");
	Элементы.ОтчетПредпринимателяПрочиеРасходы.ТекстПодвала        = ОтчетПредпринимателя.Итог("ПрочиеРасходы");
	Элементы.ОтчетПредпринимателяСуммаРасходаВсего.ТекстПодвала    = ОтчетПредпринимателя.Итог("СуммаРасходаВсего");

КонецПроцедуры
 
// Обслуживание страницы <Вычеты>

&НаКлиентеНаСервереБезКонтекста
Процедура РасчитатьИтогиНаСтраницеВычеты(Форма)

	Элементы = Форма.Элементы;
	
	Форма.ВычетИтогЖилье                     = 0;
	Форма.ВычетИтогЖильеПредоставлено        = 0;
	Форма.ВычетИтогПенсионный                = 0;
	Форма.ВычетИтогПенсионныйПредоставлено   = 0;
	Форма.ВычетИтогСоциальный                = 0;
	Форма.ВычетИтогСтандартный               = 0;
	Форма.ВычетИтогСтандартныйПредоставлено  = 0;
	Форма.ВычетИтогУбыткиПоЦБ                = 0;
	
	// Проверим, что из вычетов уже предоставлено налоговыми агентами
	Для Каждого СтрокаДохода Из Форма.ТаблицаДокументовДоходов Цикл
		
		Если СтрокаДохода.СтатусНалогоплательщика = Форма.СтатусНалогоплательщика Тогда
			
			Если СтрокаДохода.ВидДокумента = "2-НДФЛ" Тогда
				
				ВычетыАгента = СтрокаДохода.ДваНДФЛ_Вычеты;
				Для Каждого СтрокаВычета Из ВычетыАгента Цикл
					Если СтрокаВычета.КодВычета >= "103" И  СтрокаВычета.КодВычета <= "125" Тогда
						Форма.ВычетИтогСтандартныйПредоставлено = Форма.ВычетИтогСтандартныйПредоставлено + СтрокаВычета.СуммаВычета;
					ИначеЕсли СтрокаВычета.КодВычета >= "311" И СтрокаВычета.КодВычета <= "313" ИЛИ СтрокаВычета.КодВычета = "313Н" Тогда
						Форма.ВычетИтогЖильеПредоставлено = Форма.ВычетИтогЖильеПредоставлено + СтрокаВычета.СуммаВычета;
					ИначеЕсли СтрокаВычета.КодВычета = "319" Тогда
						Форма.ВычетИтогПенсионныйПредоставлено = Форма.ВычетИтогПенсионныйПредоставлено + СтрокаВычета.СуммаВычета;
					КонецЕсли; 
				КонецЦикла; 
				
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Обновим итоги по рассчетам вычетов
	Для Каждого СтрокаВычета Из Форма.ТаблицаДокументовВычета Цикл
		Если СтрокаВычета.ВидДокумента = "Стандартные вычеты" Тогда
			Форма.ВычетИтогСтандартный = Форма.ВычетИтогСтандартный + СтрокаВычета.СуммаВычета;
		ИначеЕсли СтрокаВычета.ВидДокумента = "Пенсионный взнос" Тогда
			Форма.ВычетИтогПенсионный = Форма.ВычетИтогПенсионный + Форма.ВычетИтогПенсионный + СтрокаВычета.СуммаВычета;
		ИначеЕсли СтрокаВычета.ВидДокумента = "Социальные вычеты" Тогда
			Форма.ВычетИтогСоциальный = Форма.ВычетИтогСоциальный + СтрокаВычета.СуммаВычета;
		ИначеЕсли СтрокаВычета.ВидДокумента = "Имущественный вычет" Тогда
			Форма.ВычетИтогЖилье = Форма.ВычетИтогЖилье + СтрокаВычета.СуммаВычета;
		ИначеЕсли СтрокаВычета.ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
			Форма.ВычетИтогУбыткиПоЦБ = Форма.ВычетИтогУбыткиПоЦБ + СтрокаВычета.СуммаВычета;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры


// Обслуживание страницы <СтандартныеВычеты>

&НаСервере
Функция РассчитатьОбщуюСуммуСтандартногоВычета(ТаблицаРасчета = Неопределено)

	// Получаем строку с информацией о стандартном вычете
	СтрокаСтандартногоВычета = ТаблицаДокументовВычета.НайтиСтроки(Новый Структура("ИДЭлемента", "Стандартный"));
	Если СтрокаСтандартногоВычета.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли; 
	СтрокаСтандартногоВычета = СтрокаСтандартногоВычета[0];
	
	// Создадим таблицу для расчета стандартного вычета:
	ТаблицаРасчета = СтрокаСтандартногоВычета.СтандартныеВычеты.Выгрузить();
	ТаблицаРасчета.Колонки.Добавить("СуммаДохода", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Колонки.Добавить("СуммаДоходаНарастающимИтогом", Новый ОписаниеТипов("Число"));
	ТаблицаРасчета.Сортировать("НомерМесяца");
	
	// Получаем источники дохода, по которым решено рассчитать стандартный вычет:
	СтрокиИсточников = ТаблицаДокументовДоходов.НайтиСтроки(Новый Структура("ИспользоватьДляСтандартныхВычетов,СтавкаНалога", Истина, 13));
	Если СтрокиИсточников.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли; 
	
	// Отдельно посчитаем доходы предпринимателя:
	ТаблицаДоходовПоМесяцам = Новый ТаблицаЗначений;
	ТаблицаДоходовПоМесяцам.Колонки.Добавить("Месяц");
	ТаблицаДоходовПоМесяцам.Колонки.Добавить("СуммаДохода");
	СтрокиИсточников = ТаблицаДокументовДоходов.НайтиСтроки(Новый Структура("ИспользоватьДляСтандартныхВычетов,СтавкаНалога,ВидДокумента", Истина, 13, "Доход предпринимателя"));
	Если СтрокиИсточников.Количество() > 0 Тогда
		
		Для Каждого ДокументДохода Из СтрокиИсточников Цикл
			Для Каждого СтрокаНачисления Из ДокументДохода.ОтчетПредпринимателя Цикл
				СтрокаТаблицы = ТаблицаДоходовПоМесяцам.Добавить();
				СтрокаТаблицы.Месяц = СтрокаНачисления.Месяц;
				СтрокаТаблицы.СуммаДохода = СтрокаНачисления.СуммаДохода;// - СтрокаНачисления.СуммаРасходаВсего;
			КонецЦикла; 
		КонецЦикла;
		
		ТаблицаДоходовПоМесяцам.Свернуть("Месяц", "СуммаДохода");
		ТаблицаДоходовПоМесяцам.Сортировать("Месяц");
		
		Для Каждого СтрокаДохода Из ТаблицаДоходовПоМесяцам Цикл
			СтрокаМесяца = ТаблицаРасчета.Найти(СтрокаДохода.Месяц, "НомерМесяца");
			Если СтрокаМесяца <> Неопределено Тогда
				СтрокаМесяца.СуммаДохода = СтрокаМесяца.СуммаДохода + Макс(0, СтрокаДохода.СуммаДохода);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	
	// Дополним ТаблицуРасчета доходами из справок 2-НДФЛ:
	СтрокиИсточников = ТаблицаДокументовДоходов.НайтиСтроки(Новый Структура("ИспользоватьДляСтандартныхВычетов,СтавкаНалога,ВидДокумента", Истина, 13, "2-НДФЛ"));
	Для Каждого ДокументДохода Из СтрокиИсточников Цикл
		
		ТаблицаДоходовПоМесяцам = Новый ТаблицаЗначений;
		ТаблицаДоходовПоМесяцам.Колонки.Добавить("Месяц");
		ТаблицаДоходовПоМесяцам.Колонки.Добавить("СуммаДохода");
		
		Для Каждого СтрокаНачисления Из ДокументДохода.ДваНДФЛ_Начисления Цикл
			Если СтрНайти("2762,", СтрокаНачисления.КодДохода + ",") = 0 Тогда
				СтрокаТаблицы = ТаблицаДоходовПоМесяцам.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаНачисления);
			КонецЕсли; 
		КонецЦикла; 
		
		ТаблицаДоходовПоМесяцам.Свернуть("Месяц", "СуммаДохода");
		ТаблицаДоходовПоМесяцам.Сортировать("Месяц");
		
		Для Каждого СтрокаДохода Из ТаблицаДоходовПоМесяцам Цикл
			СтрокаМесяца = ТаблицаРасчета.Найти(СтрокаДохода.Месяц, "НомерМесяца");
			Если СтрокаМесяца <> Неопределено И СтрокаМесяца.СуммаДохода = 0 Тогда
				// Проверим месяц, чтобы не было суммы из двух источников дохода за один и тотже период
				СтрокаМесяца.СуммаДохода = Макс(0, СтрокаДохода.СуммаДохода)
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	// Делаем расчет вычетов:
	ВычетПерсональный   = 0;
	ВычетНаДетей  = 0;
	СуммарныйДоход = 0;

	Для Каждого СтрокаРасчета Из ТаблицаРасчета Цикл
		
		Если СтрокаРасчета.СуммаДохода = 0 Тогда
			СтрокаРасчета.СуммаДоходаНарастающимИтогом = СуммарныйДоход;
			Продолжить;
		КонецЕсли; 
		
		СуммарныйДоход = СуммарныйДоход + Макс(0, СтрокаРасчета.СуммаДохода);
		СтрокаРасчета.СуммаДоходаНарастающимИтогом = СуммарныйДоход;
		
		Если СтрокаРасчета.СуммаДохода > 0 Тогда
			Если СуммарныйДоход <= 40000 ИЛИ СуммарныйДоход > 0 И СтрокаРасчета.НаРаботника > 400 Тогда
				ВычетПерсональный  = ВычетПерсональный + СтрокаРасчета.НаРаботника;
			КонецЕсли; 
			Если СуммарныйДоход <= 280000 Тогда
				ВычетНаДетей = ВычетНаДетей + СтрокаРасчета.ЕдинственныйРодитель 
						* (СтрокаРасчета.ВычетНаПервогоРебенка + СтрокаРасчета.ВычетНаВторогоРебенка + 
								3000 * СтрокаРасчета.ЧислоДетейСТретьего + 3000 * СтрокаРасчета.ЧислоДетейИнвалидов);
			КонецЕсли; 
		КонецЕсли; 
			
	КонецЦикла; 
	
	Возврат ВычетПерсональный + ВычетНаДетей;
	
КонецФункции
 
// Обслуживание страницы <ВычетПенсионный>

&НаКлиентеНаСервереБезКонтекста 
Процедура ВычетПенсионный_ОбновитьЗаголовкиГрупп(Форма)

	Элементы = Форма.Элементы;
	ТекстЗаголовка = НСтр("ru = 'Страховая организация: '") + Форма.ИсточникНаименование;
	Элементы.ГруппаСтраховаяОрганизация.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	//ТекстЗаголовка = НСтр("ru = 'Реквизиты договора'");
	//Элементы.ГруппаРеквизитыДоговора.Заголовок = "▼ " + ТекстЗаголовка; 
	//Элементы.ГруппаРеквизитыДоговора.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	//
	//ТекстЗаголовка = НСтр("ru = 'Суммы взносов и вычетов'");
	//Элементы.ГруппаСуммаСтрахованияВычета.Заголовок = "▼ " + ТекстЗаголовка; 
	//Элементы.ГруппаСуммаСтрахованияВычета.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
КонецПроцедуры

// Обслуживание страницы <ВычетПрочийСоциальный>

&НаСервере
Функция ПолучитьСписокПрочихСтандартныхВычетов()

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ИмяМакета = ?(Год(ДатаПодписи) < 2014, "КодыДоходовИВычетов2011кв1", "КодыДоходовИВычетов2014кв1");
	Макет = ОтчетОбъект.ПолучитьМакет(ИмяМакета).ПолучитьОбласть("ПрочиеСоциальныеВычеты");
	Результат = Новый СписокЗначений;
	Для Счетчик = 1 По Макет.ВысотаТаблицы Цикл
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.Значение = Макет.Область(Счетчик, 2, Счетчик, 2).Текст;
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции
 

// Обслуживание страницы <ВычетИмущественный>

&НаКлиенте
Процедура ВычетИмущественный_ОбновитьЗаголовкиГрупп()

	ТекстЗаголовка = НСтр("ru = 'Информация об объекте недвижимости'");
	Элементы.ГруппаИнформацияОбОбъектеНедвижимости.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаИнформацияОбОбъектеНедвижимости.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	ТекстЗаголовка = НСтр("ru = 'Расходы на приобретение (строительство) объекта недвижимости'");
	Элементы.ГруппаРасходыНаПриобретение.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаРасходыНаПриобретение.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	ТекстЗаголовка = НСтр("ru = 'Расчет имущественного вычета'");
	Элементы.ГруппаСуммаСтрахованияВычета.Заголовок = "▼ " + ТекстЗаголовка; 
	Элементы.ГруппаСуммаСтрахованияВычета.ЗаголовокСвернутогоОтображения = "► " + ТекстЗаголовка; 
	
	Элементы.ГруппаСтраницыДатыПрава.ТекущаяСтраница = ?(ЖильеСпособПриобретения = 2, Элементы.СтраницаДатыАкта, Элементы.СтраницаДатыПрава);
	
	ДоступностьПрошлыхЛет = ЗначениеЗаполнено(ЖильеГодНачалаВычета) И ЖильеГодНачалаВычета < ГодОтчета;
	Элементы.ГруппаВычетПрошлыхЛетОтНалоговой.Доступность     = ДоступностьПрошлыхЛет;
	Элементы.ГруппаВычетПрошлыхЛетОтРаботодателя.Доступность  = ДоступностьПрошлыхЛет;
	Элементы.ГруппаОстатокВычетаСПрошлыхЛет.Доступность       = ДоступностьПрошлыхЛет;
	Элементы.ЖильеДатаПраваНаЗемлю.Доступность                = ЖильеНаименование > 3;
	Элементы.ЖильеДатаЗаявленияОРаспределении.Доступность     = ЖильеВидСобственности = 3;
	
КонецПроцедуры

Процедура ПересчитатьИтогиИмущественногоВычета()

	ВсегоВычет = Мин(ЖильеСтоимость, 2000000);
	ЖильеСтоимостьПоНорме = ВсегоВычет * (ЖильеДоляЧислитель / ?(ЖильеДоляЗнаменатель = 0, 1, ЖильеДоляЗнаменатель));

КонецПроцедуры


#Область ЗагрузкаДанныхИзРаннихОтчетов

&НаКлиенте
Процедура ЗагрузитьДанныеИзОтчета(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗагружаемогоОтчета", ЭтотОбъект);
	ОтборОтчетов = Новый Структура("ИсточникОтчета", "РегламентированныйОтчет3НДФЛ");
	ОткрытьФорму("Документ.РегламентированныйОтчет.ФормаВыбора", Новый Структура("Отбор", ОтборОтчетов),,,,,
		ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветЗагрузкиДанныхОтчета(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СсылкаНаОтчет = ДопПараметры.СсылкаНаОтчет;
		Элементы.ГруппаПанельСтраниц.ТекущаяСтраница = Элементы.ТитульныйЛист;
		Элементы.СтруктураОтчета.ТекущаяСтрока = СтруктураОтчета.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		
		ТекстСообщений = "";
		РезультатЗагрузки = ВыполнитьЗагрузкуДанныхИзДругогоОтчета(СсылкаНаОтчет, ТекстСообщений);
		
		Если НЕ РезультатЗагрузки Тогда
			Сообщить(ТекстСообщений);
		КонецЕсли; 
		
		ПересчитатьСуммуВычетаНаФорме();
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли; 

КонецПроцедуры
 

&НаКлиенте
Процедура ОбработатьВыборЗагружаемогоОтчета(СсылкаНаОтчет, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветЗагрузкиДанныхОтчета", ЭтотОбъект, 
		Новый Структура("СсылкаНаОтчет", СсылкаНаОтчет));
	ТекстВопроса = "Программа загрузит из указанного отчета данные о налогоплательщике и объекте недвижимости, если такой есть.
		|При этом все имеющиеся записи о вычетах из текущего отчета будут удалены.
		|Загрузить данные о налогоплательщике и объекте недвижимости из выбранного отчета?";
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Помощник заполнения 3-НДФЛ", КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗагрузкуДанныхИзДругогоОтчета(СсылкаНаОтчет, ТекстСообщений)

	ДанныеОтчета = СсылкаНаОтчет.ДанныеОтчета.Получить();
	Если НЕ ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
		ТекстСообщений = "Не удалось получить данные для загрузки!";
		Возврат Ложь;
	КонецЕсли; 
	
	ВерсияОтчета = Неопределено;
	ДанныеОтчета.Свойство("ВерсияФормы", ВерсияОтчета);
	Если НЕ ЗначениеЗаполнено(ВерсияОтчета) Тогда
		ВерсияОтчета = "01/01/2011";
	КонецЕсли; 
	
	// Очищаем все текущие значения
	ВремГодОтчета = Число(ГодОтчета);
	ОчиститьДанныеФормы();
	ГодОтчета = ВремГодОтчета;
	ДатаПодписи = ТекущаяДатаКлиентСервер();
	АдресВРФСтруктура   = ПолучитьСтруктуруАдресаВРФ();
	ЖильеАдресСтруктура = ПолучитьСтруктуруАдресаВРФ();
	// удаляем из структуры документы вычетов
	УзелВычетов = СтруктураОтчета.ПолучитьЭлементы()[3];
	УзелВычетов.ПолучитьЭлементы().Очистить();
	Модифицированность = Истина;
	
	Попытка
	
	
	Если ВерсияОтчета = "01/01/2014" Тогда
		ЕстьПомощник = ДанныеОтчета.Свойство("ДанныеПомощника");
		Если ЕстьПомощник Тогда
			ЗагрузитьДанныеПомощника01012014(ДанныеОтчета.ДанныеПомощника);
		Иначе
			// Помощник не использовался. Загружаем данные непосредственно из отчета:
			ЗагрузитьДанныеОтчета01012014(ДанныеОтчета);
		КонецЕсли; 
	Иначе
		ЕстьПомощник = ДанныеОтчета.Свойство("ПараметрыМастераЗаполнения");
		Если ЕстьПомощник Тогда
			ЗагрузитьДанныеПомощника01012011(ДанныеОтчета);
		Иначе
			// Помощник не использовался. Загружаем данные непосредственно из отчета:
			ЗагрузитьДанныеОтчета01012014(ДанныеОтчета);
		КонецЕсли; 
	КонецЕсли;
	
	УзелВычетов = СтруктураОтчета.ПолучитьЭлементы()[3];
	Если УзелВычетов.ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаСтруктуры = УзелВычетов.ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.ИДЭлемента = "!ДобавитьВычет";
		СтрокаСтруктуры.Наименование = "Добавить вычет...";
		СтрокаСтруктуры.ИконкаСтроки = БиблиотекаКартинок.ДобавитьЭлементСписка;
	КонецЕсли; 
	
	Возврат Истина;
	
	Исключение
		
		ТекстСообщений = "Не удалось прочитать данные выбранного отчета! Возможно, версия этого отчета не поддерживается текущей версией программы.";
		Возврат Ложь;
		
	КонецПопытки; 
	

КонецФункции
 
&НаСервере
Процедура ЗагрузитьДанныеПомощника01012014(ДанныеПомощника)

	ВерсияПомощника = Неопределено;
	ДанныеПомощника.Свойство("ВерсияПомощника", ВерсияПомощника);
	
	Если ВерсияПомощника = "2.0.0" Тогда
		СтрокаИменСвойств = "АдресВРФОкато,АдресВРФПредставление,
				|АдресВРФТипАдреса,
				|АдресЗаПределамиРФ,ВидДекларации,ДатаВыдачиДокумента,
				|АдресВРФСтруктура,
				|КатегорияНалогоплательщика,КемВыданДокумент,КодВидаДокумента,КодИФНС,КодСтраныГражданства,
				|Комментарий,КПП,НаименованиеВидаДокумента,НаименованиеИФНС,НалогоплательщикДатаРождения,НалогоплательщикМестоРождения,
				|НалогоплательщикИмя,НалогоплательщикИНН,НалогоплательщикОтчество,НалогоплательщикФамилия,
				|НомерКорректировки,НомерТелефона,СерияИНомерДокумента,СтатусНалогоплательщика,СтранаГражданства,
				|СуммаФиксированныхАвансовыхПлатежей";
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПомощника, СтрокаИменСвойств);
		
		ВремТаблицаВычетов = ТаблицаДокументовВычета.Выгрузить();
		Если ВремТаблицаВычетов.Колонки.Найти("СтандартныеВычеты") = Неопределено Тогда
			ВремТаблицаВычетов.Колонки.Добавить("СтандартныеВычеты", Новый ОписаниеТипов("ТаблицаЗначений"));
		КонецЕсли; 
		ГруппаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3];
		
		Для Каждого ДокументВычета Из ДанныеПомощника.ТаблицаДокументовВычета Цикл
			Если ДокументВычета.ВидДокумента = "Стандартные вычеты" Тогда
				НовыйДокументВычета = ВремТаблицаВычетов.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйДокументВычета, ДокументВычета);
				НовыйДокументВычета.СтандартныеВычеты = ДокументВычета.СтандартныеВычеты.Скопировать();
				НовыйДокументВычета.ИДЭлемента  = "Стандартный";
				
				СтрокаСтруктуры = ГруппаСтруктуры.ПолучитьЭлементы().Добавить();
				СтрокаСтруктуры.ИДЭлемента          = НовыйДокументВычета.ИДЭлемента;
				СтрокаСтруктуры.Наименование        = НовыйДокументВычета.ВидДокумента;
				СтрокаСтруктуры.ИконкаСтроки        = ИконкиОтчета.СтандартныеВычеты;
				СтрокаСтруктуры.РазрешеноКопировать = Ложь;
				СтрокаСтруктуры.РазрешеноУдалять    = Истина;
				
			ИначеЕсли ДокументВычета.ВидДокумента = "Имущественный вычет" Тогда
				НовыйДокументВычета = ВремТаблицаВычетов.Добавить();
				СтрокаИменСвойствЖилья = "ВидДокумента,Наименование,ЖильеНаименование,ЖильеВидСобственности,
					|ЖильеПризнакНалогоплательщика,ЖильеДоляЧислитель,ЖильеДоляЗнаменатель,ЖильеДатаЗаявленияОРаспределении,
					|ЖильеДатаПраваСобственности,ЖильеДатаПраваНаЗемлю,ЖильеДатаАктаПередачи,ЖильеСтоимость,ЖильеСуммаПроцентов,ЖильеСтоимостьПоНорме,
					|ЖильеГодНачалаВычета,ПорядокИспользованияВычетаПоЖилью,ЖильеСпособПриобретения,ЖильеАдресПредставление,ЖильеАдресСтруктура,
					|ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам,ЖильеВычетПрошлыхЛетОтАгентаПоРасходам,
					|ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам,ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам,СтатусНалогоплательщика";
				ЗаполнитьЗначенияСвойств(НовыйДокументВычета, ДокументВычета, СтрокаИменСвойствЖилья);
				НовыйДокументВычета.ВидДокумента = "Имущественный вычет";
				НовыйДокументВычета.ЖильеАдресСтруктура = ПолучитьСтруктуруАдресаВРФ();
				Если ТипЗнч(ДокументВычета.ЖильеАдресСтруктура) = Тип("Структура") Тогда
					ЗаполнитьЗначенияСвойств(НовыйДокументВычета.ЖильеАдресСтруктура, ДокументВычета.ЖильеАдресСтруктура);
				КонецЕсли; 
				НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам    = 
						НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам 
						+ ДокументВычета.ЖильеВычетЭтогоГодаОтАгентаПоПроцентам;
				НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоРасходам     = 
						НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоРасходам 
						+ ДокументВычета.ЖильеВычетЭтогоГодаОтАгентаПоРасходам;
				НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам = 
						НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам 
						+ ДокументВычета.ЖильеОстатокВычетаПоПроцентам;
				НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам  = 
						НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам 
						+ ДокументВычета.ЖильеОстатокВычетаПоРасходам;
				
				НовыйДокументВычета.ИДЭлемента  =  Строка(Новый УникальныйИдентификатор);
				СтрокаСтруктуры = ГруппаСтруктуры.ПолучитьЭлементы().Добавить();
				СтрокаСтруктуры.ИДЭлемента          = НовыйДокументВычета.ИДЭлемента;
				СтрокаСтруктуры.Наименование        = НовыйДокументВычета.ВидДокумента;
				СтрокаСтруктуры.ИконкаСтроки        = ИконкиОтчета.ИмущественныйВычет;
				СтрокаСтруктуры.РазрешеноКопировать = Ложь;
				СтрокаСтруктуры.РазрешеноУдалять    = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ВремТаблицаВычетов.Количество() > 0 Тогда
			ТаблицаДокументовВычета.Загрузить(ВремТаблицаВычетов);
			Счетчик = 0;
			Для Каждого ДокументВычета Из ВремТаблицаВычетов Цикл
				Если ДокументВычета.ВидДокумента = "Стандартные вычеты" Тогда
					ТаблицаДокументовВычета[Счетчик].СтандартныеВычеты.Загрузить(ДокументВычета.СтандартныеВычеты);
					Прервать;
				Иначе
					Счетчик = Счетчик + 1;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ЗагрузитьДанныеПомощника01012011(ДанныеОтчета)

	ДанныеПомощника = Неопределено;
	ДанныеОтчета.Свойство("ПараметрыМастераЗаполнения", ДанныеПомощника);
	Если НЕ ТипЗнч(ДанныеПомощника) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеПомощника.Свойство("АдресВРФ", АдресВРФПредставление);
	ДанныеПомощника.Свойство("МестоЖительства", АдресВРФТипАдреса);
	ДанныеПомощника.Свойство("АдресЗаПределамиРФ", АдресЗаПределамиРФ);
	ДанныеПомощника.Свойство("ОКАТО", АдресВРФОкато);
	ДанныеПомощника.Свойство("ИННФЛ", НалогоплательщикИНН);
	ДанныеПомощника.Свойство("Имя", НалогоплательщикИмя);
	ДанныеПомощника.Свойство("Отчество", НалогоплательщикОтчество);
	ДанныеПомощника.Свойство("Фамилия", НалогоплательщикФамилия);
	ДанныеПомощника.Свойство("КодВидаДокумента", КодВидаДокумента);
	ДанныеПомощника.Свойство("КодВидаДокументаРасшифровка", НаименованиеВидаДокумента);
	ДанныеПомощника.Свойство("ДатаВыдачиДокумента", ДатаВыдачиДокумента);
	ДанныеПомощника.Свойство("КемВыданДокумент", КемВыданДокумент);
	ДанныеПомощника.Свойство("СерияИНомерДокумента", СерияИНомерДокумента);
	ДанныеПомощника.Свойство("КодИМНС", КодИФНС);
	ДанныеПомощника.Свойство("КодИМНСРасшифровка", НаименованиеИФНС);
	ВремСтрана = Неопределено;
	ДанныеПомощника.Свойство("СтранаГражданства", ВремСтрана);
	Если ЗначениеЗаполнено(ВремСтрана) Тогда
		СтранаГражданства    = Строка(ВремСтрана);
		КодСтраныГражданства = ВремСтрана.Код;
	КонецЕсли; 
	ДанныеПомощника.Свойство("СтатусНалогоплательщика", СтатусНалогоплательщика);
	ДанныеПомощника.Свойство("ДатаРождения", НалогоплательщикДатаРождения);
	ДанныеПомощника.Свойство("МестоРождения", НалогоплательщикМестоРождения);
	ДанныеПомощника.Свойство("НомерТелефона", НомерТелефона);
	ДанныеПомощника.Свойство("КатегорияДекларанта", КатегорияНалогоплательщика);
	СтруктураАдреса = Неопределено;
	ДанныеПомощника.Свойство("СтруктураАдресаНалогоплательщика", СтруктураАдреса);
	Если ТипЗнч(СтруктураАдреса) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(АдресВРФСтруктура, СтруктураАдреса);
	КонецЕсли; 

	Если ДанныеПомощника.Свойство("ЕстьИмущественныйВычет") И ДанныеПомощника.ЕстьИмущественныйВычет Тогда
		
		ВремТаблицаВычетов = ТаблицаДокументовВычета.Выгрузить();
		НовыйДокументВычета = ВремТаблицаВычетов.Добавить();
		НовыйДокументВычета.ВидДокумента = "Имущественный вычет";
		НовыйДокументВычета.Наименование = "Вычет на жилье";
		СтрокаИменСвойствЖилья = "ЖильеНаименование,ЖильеВидСобственности,
			|ЖильеПризнакНалогоплательщика,ЖильеДоляЧислитель,ЖильеДоляЗнаменатель,ЖильеДатаЗаявленияОРаспределении,
			|ЖильеДатаПраваСобственности,ЖильеДатаПраваНаЗемлю,ЖильеДатаАктаПередачи,ЖильеСтоимость,ЖильеСуммаПроцентов,ЖильеСтоимостьПоНорме,
			|ЖильеГодНачалаВычета";
		ЗаполнитьЗначенияСвойств(НовыйДокументВычета, ДанныеПомощника, СтрокаИменСвойствЖилья);
		ДанныеПомощника.Свойство("ЖильеАдресПредставление", НовыйДокументВычета.ЖильеАдресПредставление);
		ДанныеПомощника.Свойство("ЖильеСпособПриобретения", НовыйДокументВычета.ЖильеСпособПриобретения);
		Если НЕ ЗначениеЗаполнено(НовыйДокументВычета.ЖильеСпособПриобретения) Тогда
			НовыйДокументВычета.ЖильеСпособПриобретения = 1;
		КонецЕсли; 
		ДанныеПомощника.Свойство("ПорядокИспользованияВычетаПоЖилью", НовыйДокументВычета.ПорядокИспользованияВычетаПоЖилью);
		
		НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам = ДанныеПомощника.ИпотекаПрошлыйВычетОтАгента + ДанныеПомощника.ИпотекаВычетУАгентаВТекущемГоду;
		НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоРасходам  = ДанныеПомощника.ЖильеПрошлыйВычетОтАгента + ДанныеПомощника.ЖильеВычетУАгентаВТекущемГоду;
		
		НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам = ДанныеПомощника.ИпотекаПрошлыйВычетОтНалоговой;
		НовыйДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам  = ДанныеПомощника.ЖильеПрошлыйВычетОтНалоговой;
		
		НовыйДокументВычета.ЖильеАдресСтруктура = ПолучитьСтруктуруАдресаВРФ();
		ДанныеПомощника.Свойство("СтруктураАдресаНедвижимости", СтруктураАдреса);
		Если ТипЗнч(СтруктураАдреса) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(НовыйДокументВычета.ЖильеАдресСтруктура, СтруктураАдреса);
			СтруктураАдреса.Свойство("Представление", НовыйДокументВычета.ЖильеАдресПредставление);
		КонецЕсли; 
		НовыйДокументВычета.ИДЭлемента  =  Строка(Новый УникальныйИдентификатор);
		
		ТаблицаДокументовВычета.Загрузить(ВремТаблицаВычетов);
		
		ГруппаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3];
		СтрокаСтруктуры = ГруппаСтруктуры.ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.ИДЭлемента          = НовыйДокументВычета.ИДЭлемента;
		СтрокаСтруктуры.Наименование        = НовыйДокументВычета.ВидДокумента;
		СтрокаСтруктуры.ИконкаСтроки        = ИконкиОтчета.ИмущественныйВычет;
		СтрокаСтруктуры.РазрешеноКопировать = Ложь;
		СтрокаСтруктуры.РазрешеноУдалять    = Истина;
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура ЗагрузитьДанныеОтчета01012014(ДанныеОтчета)

	Если НЕ ДанныеОтчета.Свойство("ПоказателиОтчета") ИЛИ НЕ ТипЗнч(ДанныеОтчета.ПоказателиОтчета) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	АдресВРФТипАдреса = 1;
	Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный") Тогда
		ТабДокумент = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		ПреобразоватьПосимвольныеДанныеВЗначения(ТабДокумент);
		ТабДокумент.Свойство("ИНН1", НалогоплательщикИНН);
		ТабДокумент.Свойство("Имя", НалогоплательщикИмя);
		ТабДокумент.Свойство("Отчество", НалогоплательщикОтчество);
		ТабДокумент.Свойство("Фамилия", НалогоплательщикФамилия);
		ТабДокумент.Свойство("Окато", АдресВРФОкато);
		ТабДокумент.Свойство("КодИМНС", КодИФНС);
		Если ЗначениеЗаполнено(КодИФНС) Тогда
			КодИФНСПриИзмененииНаСервере(КодИФНС);
		КонецЕсли; 
		ТабДокумент.Свойство("ПоМесту", КатегорияНалогоплательщика);
		ТабДокумент.Свойство("ТелОрганизации", НомерТелефона);
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("АдресЗаПределамиРФ", АдресЗаПределамиРФ);
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("ДатаРождения", НалогоплательщикДатаРождения);
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("МестоРождения", НалогоплательщикМестоРождения);
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("КодСтраныГражданства", КодСтраныГражданства);
		Если КодСтраныГражданства = "643" Тогда 
			СтранаГражданства = "РОССИЯ"
		ИначеЕсли КодСтраныГражданства = "112" Тогда 
			СтранаГражданства = "БЕЛАРУСЬ"
		ИначеЕсли КодСтраныГражданства = "398" Тогда 
			СтранаГражданства = "КАЗАХСТАН"
		ИначеЕсли КодСтраныГражданства = "804" Тогда 
			СтранаГражданства = "УКРАИНА"
		КонецЕсли;
	КонецЕсли; 
	
	Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный002") Тогда
		ТабДокумент = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002;
		ПреобразоватьПосимвольныеДанныеВЗначения(ТабДокумент);
		ТабДокумент.Свойство("МестоЖительства",   АдресВРФТипАдреса);
		ТабДокумент.Свойство("Индекс",            АдресВРФСтруктура.Индекс);
		ТабДокумент.Свойство("Город",             АдресВРФСтруктура.Город);
		ТабДокумент.Свойство("Дом",               АдресВРФСтруктура.Дом);
		ТабДокумент.Свойство("Квартира",          АдресВРФСтруктура.Квартира);
		ТабДокумент.Свойство("Корпус",            АдресВРФСтруктура.Корпус);
		ТабДокумент.Свойство("НаселенныйПункт",   АдресВРФСтруктура.НаселенныйПункт);
		ТабДокумент.Свойство("Район",             АдресВРФСтруктура.Район);
		ТабДокумент.Свойство("Регион",            АдресВРФСтруктура.Регион);
		ТабДокумент.Свойство("Регион",            АдресВРФСтруктура.КодРегиона);
		ТабДокумент.Свойство("Улица",             АдресВРФСтруктура.Улица);
		
		АдресВРФПредставление       = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," 
				+ АдресВРФСтруктура.Индекс + ","
				+ АдресВРФСтруктура.Регион + ","
				+ АдресВРФСтруктура.Район + ","
				+ АдресВРФСтруктура.Город + ","
				+ АдресВРФСтруктура.НаселенныйПункт + ","
				+ АдресВРФСтруктура.Улица + ","
				+ АдресВРФСтруктура.Дом + ","
				+ АдресВРФСтруктура.Корпус + ","
				+ АдресВРФСтруктура.Квартира);
		
		ТабДокумент.Свойство("КодВидаДокумента",     КодВидаДокумента);
		ТабДокумент.Свойство("ДатаВыдачиДокумента", ДатаВыдачиДокумента);
		ТабДокумент.Свойство("СерияИНомерДокумента", СерияИНомерДокумента);
		ТабДокумент.Свойство("СтатусНалогоплательщика", СтатусНалогоплательщика);
		ТабДокумент.Свойство("КемВыданДокумент", КемВыданДокумент);
		Если ЗначениеЗаполнено(КодВидаДокумента) Тогда
			НаименованиеВидаДокумента = ПолучитьЗначениеИзМакетаПоКоду(КодВидаДокумента, "КодВидаДокумента");
		КонецЕсли; 
	КонецЕсли; 

	Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаЛистИ")
		И ЗначениеЗаполнено(ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.П000024024004
			+ ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.П000024025004)	Тогда
		ТабДокумент = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ;
		ПреобразоватьПосимвольныеДанныеВЗначения(ТабДокумент);
		
		ВремТаблицаВычетов = ТаблицаДокументовВычета.Выгрузить();
		СтрокаДокумента = ВремТаблицаВычетов.Добавить();
		СтрокаДокумента.ВидДокумента = "Имущественный вычет";
		
		СтрокаДокумента.ЖильеАдресСтруктура           = ПолучитьСтруктуруАдресаВРФ(АдресВРФСтруктура);
		ТабДокумент.Свойство("ИмИндекс",   СтрокаДокумента.ЖильеАдресСтруктура.Индекс);
		ТабДокумент.Свойство("ИмГород",    СтрокаДокумента.ЖильеАдресСтруктура.Город);
		ТабДокумент.Свойство("ИмДом",      СтрокаДокумента.ЖильеАдресСтруктура.Дом);
		ТабДокумент.Свойство("ИмКвартира", СтрокаДокумента.ЖильеАдресСтруктура.Квартира);
		ТабДокумент.Свойство("ИмКорпус",   СтрокаДокумента.ЖильеАдресСтруктура.Корпус);
		ТабДокумент.Свойство("ИмНаселенныйПункт", СтрокаДокумента.ЖильеАдресСтруктура.НаселенныйПункт);
		ТабДокумент.Свойство("ИмРайон",    СтрокаДокумента.ЖильеАдресСтруктура.Район);
		ТабДокумент.Свойство("ИмРегион",   СтрокаДокумента.ЖильеАдресСтруктура.Регион);
		ТабДокумент.Свойство("ИмРегион",   СтрокаДокумента.ЖильеАдресСтруктура.КодРегиона);
		ТабДокумент.Свойство("ИмУлица",    СтрокаДокумента.ЖильеАдресСтруктура.Улица);
		
		СтрокаДокумента.ЖильеАдресПредставление       = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," 
				+ СтрокаДокумента.ЖильеАдресСтруктура.Индекс + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.Регион + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.Район + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.Город + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.НаселенныйПункт + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.Улица + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.Дом + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.Корпус + ","
				+ СтрокаДокумента.ЖильеАдресСтруктура.Квартира);
				
		ТабДокумент.Свойство("ИмДатаАкта", СтрокаДокумента.ЖильеДатаАктаПередачи);
		ТабДокумент.Свойство("ИмДатаПриобретения", СтрокаДокумента.ЖильеДатаПраваСобственности);
		ТабДокумент.Свойство("ЗемлДатаПриобретения", СтрокаДокумента.ЖильеДатаПраваНаЗемлю);
		ТабДокумент.Свойство("ИмДатаРаспределенияВычета", СтрокаДокумента.ЖильеДатаЗаявленияОРаспределении);
		ТабДокумент.Свойство("ИмГодВычета", СтрокаДокумента.ЖильеГодНачалаВычета);
		ТабДокумент.Свойство("ИмДоля1", СтрокаДокумента.ЖильеДоляЧислитель);
		ТабДокумент.Свойство("ИмДоля3", СтрокаДокумента.ЖильеДоляЗнаменатель);
		
		СтрокаДокумента.ЖильеСпособПриобретения       = 1;
		СтрокаДокумента.ЖильеВидСобственности         = 1;
		СтрокаДокумента.ЖильеНаименование             = 1;
		СтрокаДокумента.ЖильеПризнакНалогоплательщика = 1;
		СтрокаДокумента.ИДЭлемента  =  Строка(Новый УникальныйИдентификатор);
		
		ТаблицаДокументовВычета.Загрузить(ВремТаблицаВычетов);
		
		ГруппаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3];
		СтрокаСтруктуры = ГруппаСтруктуры.ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.ИДЭлемента          = СтрокаДокумента.ИДЭлемента;
		СтрокаСтруктуры.Наименование        = СтрокаДокумента.ВидДокумента;
		СтрокаСтруктуры.ИконкаСтроки        = ИконкиОтчета.ИмущественныйВычет;
		СтрокаСтруктуры.РазрешеноКопировать = Ложь;
		СтрокаСтруктуры.РазрешеноУдалять    = Истина;
	КонецЕсли;	
	
КонецПроцедуры

//Преобразовывает некоторые значения структуры из посимвольного представления в одно поле
//предназначена для совместимости с формами сохраненными в версии 2.0
Процедура ПреобразоватьПосимвольныеДанныеВЗначения(Данные)
	
	Если Данные.Свойство("ИНН1_1") Тогда
		
		ИНН = "";
		Для Поз = 1 По 12 Цикл
			ИНН = ИНН + Данные["ИНН1_" + Поз];
			Данные.Удалить("ИНН1_" + Поз);
		КонецЦикла;	
		Данные.Вставить("ИНН1",ИНН);
	КонецЕсли;
	
	Если Данные.Свойство("ДатаПодписи1") Тогда
		
		мДатаПодписи = "" + Данные["ДатаПодписи5"]
		+ Данные["ДатаПодписи6"]
		+ Данные["ДатаПодписи7"]
		+ Данные["ДатаПодписи8"]
		+ Данные["ДатаПодписи3"]
		+ Данные["ДатаПодписи4"]
		+ Данные["ДатаПодписи1"]
		+ Данные["ДатаПодписи2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаПодписи" + Поз);
		КонецЦикла;
		
		Данные.Вставить("ДатаПодписи", ?(ЗначениеЗаполнено(мДатаПодписи), Дата(мДатаПодписи), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("НомСтр1_1") Тогда	             
			
		Для Поз = 1 По 3 Цикл
			Данные.Удалить("НомСтр1_" + Поз);
		КонецЦикла;	
		
	КонецЕсли;
	Если Данные.Свойство("НомерКорректировки1") Тогда	
		
		НомерКорректировки = "";
		Для Поз = 1 По 3 Цикл
			НомерКорректировки = НомерКорректировки + Данные["НомерКорректировки" + Поз];
			Данные.Удалить("НомерКорректировки" + Поз);
		КонецЦикла;	
		Данные.Вставить("НомерКорректировки", НомерКорректировки);
	
	КонецЕсли;
	Если Данные.Свойство("ОтчетГод1") Тогда
		
		ОтчетГод = "";
		Для Поз = 1 По 4 Цикл
			ОтчетГод = ОтчетГод + Данные["ОтчетГод" + Поз];
			Данные.Удалить("ОтчетГод" + Поз);
		КонецЦикла;	
		Данные.Вставить("ОтчетГод", ОтчетГод);
		
	КонецЕсли;
	Если Данные.Свойство("КодИМНС1") Тогда	             
		
		КодИМНС = "";
		Для Поз = 1 По 4 Цикл
			КодИМНС = КодИМНС + Данные["КодИМНС" + Поз];
			Данные.Удалить("КодИМНС" + Поз);
		КонецЦикла;	
		Данные.Вставить("КодИМНС", КодИМНС);
		
	КонецЕсли;
	Если Данные.Свойство("ПоМесту1") Тогда	             
		
		ПоМесту = "";
		Для Поз = 1 По 3 Цикл
			ПоМесту = ПоМесту + Данные["ПоМесту" + Поз];
			Данные.Удалить("ПоМесту" + Поз);
		КонецЦикла;	
		Данные.Вставить("ПоМесту", ПоМесту);
		
	КонецЕсли;
	Если Данные.Свойство("Период1") Тогда	             
		
		Период = "";
		Для Поз = 1 По 2 Цикл
			Период = Период + Данные["Период" + Поз];
			Данные.Удалить("Период" + Поз);
		КонецЦикла;	
		Данные.Вставить("Период", Период);
		
	КонецЕсли;
	Если Данные.Свойство("СоставленаНа1") Тогда
		
		СоставленаНа = "";
		Для Поз = 1 По 3 Цикл
			СоставленаНа = СоставленаНа + Данные["СоставленаНа" + Поз];
			Данные.Удалить("СоставленаНа" + Поз);
		КонецЦикла;	
		Данные.Вставить("СоставленаНа", СоставленаНа);
		
	КонецЕсли;
	Если Данные.Свойство("ДатаВыдачиДокумента1") Тогда	
		
		ДатаВыдачиДокумента = "" + Данные["ДатаВыдачиДокумента5"]
		+ Данные["ДатаВыдачиДокумента6"]
		+ Данные["ДатаВыдачиДокумента7"]
		+ Данные["ДатаВыдачиДокумента8"]
		+ Данные["ДатаВыдачиДокумента3"]
		+ Данные["ДатаВыдачиДокумента4"]
		+ Данные["ДатаВыдачиДокумента1"]
		+ Данные["ДатаВыдачиДокумента2"];

		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаВыдачиДокумента" + Поз);
		КонецЦикла;	
		
		Данные.Вставить("ДатаВыдачиДокумента", ?(ЗначениеЗаполнено(ДатаВыдачиДокумента), Дата(ДатаВыдачиДокумента), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("ДатаРождения1") Тогда
		
		ДатаРождения = "" + Данные["ДатаРождения5"]
		+ Данные["ДатаРождения6"]
		+ Данные["ДатаРождения7"]
		+ Данные["ДатаРождения8"]
		+ Данные["ДатаРождения3"]
		+ Данные["ДатаРождения4"]
		+ Данные["ДатаРождения1"]
		+ Данные["ДатаРождения2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаРождения" + Поз);
		КонецЦикла;	
		Данные.Вставить("ДатаРождения", ?(ЗначениеЗаполнено(ДатаРождения) , Дата(ДатаРождения), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеИзМакетаПоКоду(Код, ИмяОбласти)

	ИмяФормыСписка = ?(Год(ДатаПодписи) < 2014, "Списки2011кв1", "Списки2014кв1");
	Макет = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьМакет(ИмяФормыСписка).ПолучитьОбласть(ИмяОбласти);
	Область = Макет.НайтиТекст(Код,, Макет.Область(1,1, Макет.ВысотаСтраницы, 1), Истина, Истина, Истина);
	Если Область = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Макет.Область(Область.Верх,2,Область.Верх,2).Текст;
	КонецЕсли; 

КонецФункции
 
#КонецОбласти

// Проверка корректности данных
#Область ПроверкаКорректностиДанных

&НаКлиенте
Процедура ИзменитьСтраницуПроверки()

	Если ФлагПроверкаВыполнена Тогда
		Если ТаблицаОшибок.Количество() > 0 Тогда
			Элементы.ГруппаСтраницыПроверки.ТекущаяСтраница = Элементы.СтраницаСпискаОшибок;
		Иначе
			Элементы.ДекорацияРезультатПроверкиОшибок.Заголовок = НСтр("ru = 'Ошибок не обнаружено. Декларацию можно печатать и выгружать.'"); 
			Элементы.ГруппаСтраницыПроверки.ТекущаяСтраница = Элементы.СтраницаСообщения;
		КонецЕсли; 
	Иначе
		Элементы.ДекорацияРезультатПроверкиОшибок.Заголовок = НСтр("ru = 'Перед заполнением и печатью декларации нужно проверить введенные данные.'");
		Элементы.ГруппаСтраницыПроверки.ТекущаяСтраница = Элементы.СтраницаСообщения;
	КонецЕсли; 
	
	ДоступностьПечати = ФлагПроверкаВыполнена И ТаблицаОшибок.Количество() = 0;
	Элементы.ПоказатьБланкПДФ.Доступность = ДоступностьПечати;
	Элементы.ПечататьБланкПДФ.Доступность = ДоступностьПечати;
	Элементы.ВыгрузитьВФайл.Доступность   = ДоступностьПечати;
	
	ОбновитьОтображениеДанных();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуДанныхНаКлиенте()

	ТаблицаОшибок.Очистить();
	
	ВыполнитьПроверкуТитульныхЛистов();
	ВыполнитьПроверкуДокументовДохода();
	ВыполнитьПроверкуДокументовВычета();

	ФлагПроверкаВыполнена = Истина;
	ИзменитьСтраницуПроверки();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьПроверкуТитульныхЛистов()

	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан код налоговой инспекции'"),
				0, Неопределено, "КодИФНС");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ГодОтчета) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан год получения дохода'"),
				0, Неопределено, "ГодОтчета");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана дата подписания декларации'"),
				0, Неопределено, "ДатаПодписи");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана дата подписания декларации'"),
				0, Неопределено, "ДатаПодписи");
	КонецЕсли; 
	Если ВидДекларации <> 0 И НЕ ЗначениеЗаполнено(НомерКорректировки) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан номер корректировки'"),
				0, Неопределено, "НомерКорректировки");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикФамилия) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана фамилия налогоплательщика'"),
				0, Неопределено, "НалогоплательщикФамилия");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикИмя) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указани имя налогоплательщика'"),
				0, Неопределено, "НалогоплательщикИмя");
	КонецЕсли; 
	Если КатегорияНалогоплательщика <> "760" И НЕ ЗначениеЗаполнено(НалогоплательщикИНН) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан ИНН предпринимателя'"),
				0, Неопределено, "НалогоплательщикИНН");
	КонецЕсли; 
	Если ЗначениеЗаполнено(НалогоплательщикИНН) И СтрДлина(НалогоплательщикИНН) <> 12 Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан некорректный ИНН налогоплательщика (длина должна быть равна 12 символам)'"),
				0, Неопределено, "НалогоплательщикИНН");
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(СтранаГражданства) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указано гражданство налогоплательщика'"),
				1, Неопределено, "СтранаГражданства");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикДатаРождения) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана дата рождения налогоплательщика'"),
				1, Неопределено, "НалогоплательщикДатаРождения");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикМестоРождения) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указано место рождения налогоплательщика'"),
				1, Неопределено, "НалогоплательщикМестоРождения");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(КодВидаДокумента) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан вид документа - удостоверения личности'"),
				1, Неопределено, "КодВидаДокумента");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(СерияИНомерДокумента) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указаны серия и номер документа - удостоверения личности'"),
				1, Неопределено, "СерияИНомерДокумента");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДатаВыдачиДокумента) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана дата выдачи документа - удостоверения личности'"),
				1, Неопределено, "ДатаВыдачиДокумента");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(КемВыданДокумент) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан, кем выдан документ - удостоверение личности'"),
				1, Неопределено, "КемВыданДокумент");
	КонецЕсли; 
	Если АдресВРФТипАдреса = 2 И НЕ ЗначениеЗаполнено(АдресЗаПределамиРФ) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан адрес налогоплательщика за пределами РФ'"),
				1, Неопределено, "АдресЗаПределамиРФ");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(АдресВРФПредставление) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан адрес налогоплательщика в РФ'"),
				1, Неопределено, "АдресВРФПредставление");
	КонецЕсли; 
	Если СтрДлина(СокрЛП(АдресВРФСтруктура.Регион)) < 2 Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан некорректный регион в адресе налогоплательщика в РФ'"),
				1, Неопределено, "АдресВРФПредставление");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(АдресВРФОкато) Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан ОКТМО (ОКАТО) налогоплательщика'"),
				1, Неопределено, "АдресВРФОкато");
	КонецЕсли; 
	Если ЗначениеЗаполнено(АдресВРФОкато) 
		И СтрДлина(АдресВРФОкато) <> 11 И СтрДлина(АдресВРФОкато) <> 8 Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан неверный ОКТМО (ОКАТО) налогоплательщика. Длина ОКТМО должна быть 8 или 11 символов'"),
				1, Неопределено, "АдресВРФОкато");
	КонецЕсли; 
	

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуДокументовДохода()

	ИндексСтроки = 0;
	ЕстьДоходыПредпринимателя = Ложь;
	ЕстьРасходыПредпринимателяПоНорме = Ложь;
	ЕстьРасходыПредпринимателяПоДокументам = Ложь;
	ИДДоходаПредпринимателя = Неопределено;
	Для Каждого СтрокаДохода Из ТаблицаДокументовДоходов Цикл
		
		Если СтрокаДохода.СтатусНалогоплательщика <> СтатусНалогоплательщика Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаДохода.ВидДокумента = "Доход предпринимателя" Тогда
			
			ЕстьДоходыПредпринимателя = Истина;
			Если СтрокаДохода.РасходыПредпринимателяПоДокументам Тогда
				ЕстьРасходыПредпринимателяПоДокументам = Истина;
			Иначе
				ЕстьРасходыПредпринимателяПоНорме = Истина;
			КонецЕсли; 
			Если ИДДоходаПредпринимателя = Неопределено Тогда
				ИДДоходаПредпринимателя = СтрокаДохода.ИДЭлемента;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ВидДеятельностиКод) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан код ОКВЭД'"),
						2, СтрокаДохода.ИДЭлемента, "ВидДеятельностиКод");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ВидДеятельностиНаименование) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указано наименование вида деятельности предпринимателя'"),
						2, СтрокаДохода.ИДЭлемента, "ВидДеятельностиНаименование");
			КонецЕсли; 
			Если СтрокаДохода.ЭтоКФХ И НЕ ЗначениеЗаполнено(СтрокаДохода.ГодОбразованияКФХ) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан год образования КФХ'"),
						2, СтрокаДохода.ИДЭлемента, "ГодОбразованияКФХ");
			КонецЕсли; 
			Если СтрокаДохода.ЭтоКФХ И ЗначениеЗаполнено(СтрокаДохода.ГодОбразованияКФХ)
				И (СтрокаДохода.ГодОбразованияКФХ < 1970 ИЛИ СтрокаДохода.ГодОбразованияКФХ > ГодОтчета) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан неправильный год образования КФХ'"),
						2, СтрокаДохода.ИДЭлемента, "ГодОбразованияКФХ");
			КонецЕсли; 
					
		ИначеЕсли СтрокаДохода.ВидДокумента = "Доход в валюте" Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ИсточникСтрана) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана страна, в которой (из которой) был получен доход в валюте'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникСтрана");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ИсточникНаименование) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан наименование организации или ФИО частного лица, заплатившего доход'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникДохода2");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ВалютаДохода) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана валюта дохода'"),
						2, СтрокаДохода.ИДЭлемента, "ВалютаДохода");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.КодДохода) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан код дохода'"),
						2, СтрокаДохода.ИДЭлемента, "КодДохода1");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ДатаДохода) ИЛИ Год(СтрокаДохода.ДатаДохода) <> ГодОтчета Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Дата дохода не указана или не соответствует отчетному году'"),
						2, СтрокаДохода.ИДЭлемента, "ДатаДохода1");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.СуммаДоходаВВалюте) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана сумма дохода в валюте'"),
						2, СтрокаДохода.ИДЭлемента, "СуммаДоходаВВалюте");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.КурсНаДатуДохода) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан курс на дату дохода'"),
						2, СтрокаДохода.ИДЭлемента, "КурсНаДатуДохода");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.СуммаДохода) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан курс на дату дохода'"),
						2, СтрокаДохода.ИДЭлемента, "СуммаДохода1");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ДатаУплатыНалога) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана дата уплаты налога за гранией'"),
						2, СтрокаДохода.ИДЭлемента, "ДатаУплатыНалога");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.СуммаНалогаУплаченоВВалюте) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана сумма налога в валюте, уплаченная за границей'"),
						2, СтрокаДохода.ИДЭлемента, "СуммаНалогаУплаченоВВалюте");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.КурсНаДатуУплатыНалога) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан курс на дату уплаты налога за границей'"),
						2, СтрокаДохода.ИДЭлемента, "КурсНаДатуУплатыНалога");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.СуммаНалогаУплаченоЗаГраницей) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана сумма налога в рублях, уплаченная за границей'"),
						2, СтрокаДохода.ИДЭлемента, "СуммаНалогаУплаченоЗаГраницей");
			КонецЕсли; 
			
		ИначеЕсли СтрокаДохода.ВидДокумента = "2-НДФЛ" ИЛИ СтрокаДохода.ВидДокумента = "Прочий доход" Тогда
			
			СуффиксПоля = ?(СтрокаДохода.ВидДокумента = "2-НДФЛ", "", "1");
			
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ИсточникНаименование) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан наименование организации или ФИО частного лица, заплатившего доход'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникДохода1");
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаДохода.ИсточникИНН) 
				И СтрДлина(СтрокаДохода.ИсточникИНН) <> 10 И СтрДлина(СтрокаДохода.ИсточникИНН) <> 12    Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан неверный ИНН источника дохода. Длина ИНН должна быть 10 или 12 символов'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникИНН" + СуффиксПоля);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ИсточникИНН) 
				И СтрокаДохода.СуммаНалогаУдержано <> 0    Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан ИНН источника дохода, удержавший налог'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникИНН" + СуффиксПоля);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ИсточникИНН) 
				И (СтрокаДохода.СтавкаНалога = 9 ИЛИ СтрокаДохода.СтавкаНалога = 15)    Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан ИНН источника дохода по дивидендам'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникИНН" + СуффиксПоля);
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаДохода.ИсточникКПП) 
				И СтрДлина(СтрокаДохода.ИсточникКПП) <> 9 Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан неверный КПП источника дохода. Длина КПП должна быть 9 символов'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникКПП" + СуффиксПоля);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ИсточникКПП) 
				И СтрокаДохода.СуммаНалогаУдержано <> 0    Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан КПП источника дохода, удержавший налог'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникКПП" + СуффиксПоля);
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаДохода.ИсточникОКАТО) 
				И СтрДлина(СтрокаДохода.ИсточникОКАТО) <> 11 И СтрДлина(СтрокаДохода.ИсточникОКАТО) <> 8 Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан неверный ОКТМО (ОКАТО) источника дохода. Длина ОКТМО должна быть 8 или 11 символов'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникОКАТО" + СуффиксПоля);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ИсточникОКАТО) 
				И (СтрокаДохода.СуммаНалогаУдержано <> 0 ИЛИ СтрНайти("1510,1511,1520,", СтрокаДохода.КодДохода + ",") > 0) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан ОКТМО (ОКАТО) источника дохода'"),
						2, СтрокаДохода.ИДЭлемента, "ИсточникОКАТО" + СуффиксПоля);
			КонецЕсли; 
			
			Если СтрокаДохода.ВидДокумента = "Прочий доход" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.КодДохода) Тогда
					СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан код дохода'"),
							2, СтрокаДохода.ИДЭлемента, "КодДохода");
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.ДатаДохода) ИЛИ Год(СтрокаДохода.ДатаДохода) <> ГодОтчета Тогда
					СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Дата дохода не указана или не соответствует отчетному году'"),
							2, СтрокаДохода.ИДЭлемента, "ДатаДохода");
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.СуммаДохода) ИЛИ Год(СтрокаДохода.ДатаДохода) <> ГодОтчета Тогда
					СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана сумма дохода'"),
							2, СтрокаДохода.ИДЭлемента, "СуммаДохода");
				КонецЕсли; 
			КонецЕсли; 
			
			Если СтрокаДохода.ВидДокумента = "2-НДФЛ" Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.СтавкаНалога) Тогда
					СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указана ставка налога'"),
							2, СтрокаДохода.ИДЭлемента, "СтавкаНалога");
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
		
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла; 

	Если ЕстьДоходыПредпринимателя И ЕстьРасходыПредпринимателяПоНорме И ЕстьРасходыПредпринимателяПоДокументам Тогда
		СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Одновременное использование расходов по норме и расходов подтвержденных документально не допускается'"),
				2, ИДДоходаПредпринимателя, "РасходыПредпринимателяПоДокументам");
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьПроверкуДокументовВычета()

	Для Каждого СтрокаВычета Из ТаблицаДокументовВычета Цикл
		
		Если СтрокаВычета.СтатусНалогоплательщика <> СтатусНалогоплательщика Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаВычета.ВидДокумента = "Стандартные вычеты" Тогда
			
			
			
		ИначеЕсли СтрокаВычета.ВидДокумента = "Пенсионный взнос" Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ИсточникИНН) ИЛИ 
				СтрДлина(СтрокаВычета.ИсточникИНН) <> 10 И СтрДлина(СтрокаВычета.ИсточникИНН) <> 12    Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан неверный ИНН пенсионного фонда. Длина ИНН должна быть 10 или 12 символов'"),
						3, СтрокаВычета.ИДЭлемента, "ИсточникИНН2");
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаВычета.ИсточникКПП) 
				И СтрДлина(СтрокаВычета.ИсточникКПП) <> 9 Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Указан неверный КПП пенсионного фонда. Длина КПП должна быть 9 символов'"),
						3, СтрокаВычета.ИДЭлемента, "ИсточникКПП2");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ИсточникНаименование) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан наименование пенсионного фонда'"),
						3, СтрокаВычета.ИДЭлемента, "ИсточникНаименование");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ДатаДоговора) ИЛИ Год(СтрокаВычета.ДатаДоговора) > ГодОтчета Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Дата договора с пенсионным фондном не указана или не соответствует отчетному году'"),
						3, СтрокаВычета.ИДЭлемента, "ДатаДоговора");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.НомерДоговора) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан номер договора с пенсионным фондом'"),
						3, СтрокаВычета.ИДЭлемента, "НомерДоговора");
			КонецЕсли; 
			
			
		ИначеЕсли СтрокаВычета.ВидДокумента = "Социальные вычеты" Тогда
			
		ИначеЕсли СтрокаВычета.ВидДокумента = "Имущественный вычет" Тогда
			
			Если СтрокаВычета.ЖильеСпособПриобретения = 1 И  НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДатаПраваСобственности) ИЛИ Год(СтрокаВычета.ЖильеДатаПраваСобственности) > ГодОтчета Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Дата регистрации прав на жилье не указана или не соответствует отчетному году'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеДатаПраваСобственности");
			КонецЕсли; 
			Если СтрокаВычета.ЖильеСпособПриобретения = 2 И  НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДатаАктаПередачи) ИЛИ Год(СтрокаВычета.ЖильеДатаАктаПередачи) > ГодОтчета Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Дата акта передачи жилья в собственность не указана или не соответствует отчетному году'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеДатаАктаПередачи");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеНаименование) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указано наименование жилья'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеНаименование");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеВидСобственности) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан вид собственности жилья'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеВидСобственности");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеВидСобственности) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан вид собственности жилья'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеВидСобственности");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДоляЧислитель) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан числитель в доле собственности жилья'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеДоляЧислитель");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДоляЗнаменатель) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан знаменатель в доле собственности жилья'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеДоляЗнаменатель");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеАдресПредставление) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан адрес местонахождения приобретенного жилья'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеАдресПредставление");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеГодНачалаВычета) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Не указан год начала пользования имущественным вычетом на приобретение жилья'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеГодНачалаВычета");
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаВычета.ЖильеГодНачалаВычета) И 
					(СтрокаВычета.ЖильеСпособПриобретения = 1 И СтрокаВычета.ЖильеГодНачалаВычета < Год(ЖильеДатаПраваСобственности) ИЛИ 
						СтрокаВычета.ЖильеСпособПриобретения = 2 И СтрокаВычета.ЖильеГодНачалаВычета < Год(ЖильеДатаАктаПередачи)) Тогда
				СтрокаОшибки = ДобавитьСтрокуОшибки(ТаблицаОшибок, НСтр("ru = 'Год начала пользования имущественным вычетом меньше даты получения жилья в собственность'"),
						3, СтрокаВычета.ИДЭлемента, "ЖильеГодНачалаВычета");
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры
 

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуОшибки(ТаблицаОшибок, ОписаниеОшибки, НомерРаздела, ИДЭлемента, ИмяЭлемента, ИмяТаблицы = "", НомерСтроки = 0)

	Результат = ТаблицаОшибок.Добавить();
	Результат.НомерРаздела = НомерРаздела;
	Результат.ИДЭлемента = ИДЭлемента;
	Результат.ИмяЭлемента = ИмяЭлемента;
	Результат.ИмяТаблицы = ИмяТаблицы;
	Результат.НомерСтроки = НомерСтроки;
	Результат.ОписаниеОшибки = ОписаниеОшибки;

	Возврат Результат;
	
КонецФункции


#КонецОбласти

// Заполняем структуру данных регламентированного отчета
#Область ЗаполнениеОтчета

#Область ПредварительнаяПодготовкаЛистов

&НаСервере
Процедура ПодготовитьПоказателиОтчетаКЗаписи(СписокСохранения, ПараметрыЗаполнения)

	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Инициал1", Врег(Лев(СокрЛП(НалогоплательщикИмя), 1)));
	ПараметрыЗаполнения.Вставить("Инициал2", Врег(Лев(СокрЛП(НалогоплательщикОтчество), 1)));
	
	ПараметрыЗаполнения.Вставить("мИдГруппыА", "П0000700010");
	ПараметрыЗаполнения.Вставить("мИдГруппыБ", "П0000800010");
	ПараметрыЗаполнения.Вставить("мИдГруппыГ2", "П0000102010");
	ПараметрыЗаполнения.Вставить("мИдГруппыГ3", "П0000272010");
	ПараметрыЗаполнения.Вставить("мИдГруппыЖ3", "П0000220");
	ПараметрыЗаполнения.Вставить("мИдГруппыГ1Продолжение", "П0000251190");
	
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", Истина);
	СписокСохранения.Вставить("Автозаполнение",         Ложь);
	СписокСохранения.Вставить("ВерсияФормы",            ?(Год(ДатаПодписи) < 2014, "01/01/2011", "01/01/2014"));
	СписокСохранения.Вставить("ФлОтклВыборЗначений",    Ложь);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",       Ложь);
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СуффиксИменМакетов = Прав(ЭтаФорма.ИмяФормы, 7);
	
	// Заполняем варианты заполнения из макета
	МакетСоставаПоказателей = ОтчетОбъект.ПолучитьМакет("СоставПоказателей" + СуффиксИменМакетов);
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть =  МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаВариантов = Новый ТаблицаЗначений;
		ТаблицаВариантов.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка"));
		ТаблицаВариантов.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Число"));
		ТаблицаВариантов.Колонки.Добавить("ЗначениеАвто", Новый ОписаниеТипов("Число"));
		ТаблицаВариантов.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число"));
		ТаблицаВариантов.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
		ТаблицаВариантов.Колонки.Добавить("КодПоказателяПоСтруктуре", Новый ОписаниеТипов("Строка"));
		
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = ТаблицаВариантов.Добавить();
			НоваяСтрока.КодПоказателя            = КодПоказателя;
			НоваяСтрока.ВариантЗаполнения        = ?(ЗначениеЗаполнено(стрВариантЗаполнения), Число(стрВариантЗаполнения), 0);
			НоваяСтрока.ЗначениеАвто             = 0;
			НоваяСтрока.Дельта                   = 0;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
		КонецЦикла;
		
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить(ТаблицаВариантов);
		ДанныеВариантовАвтоЗаполнения.Вставить(ИмяСтраницы, МассивВариантов);
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	
	// Формируем структуру показателей, список многостраничных и многострочных листов:
	ПоказателиОтчета = Новый Структура;
	ДанныеМногостраничныхРазделов = Новый Структура;
	ДанныеМногострочныхРазделов = Новый Структура;
	
	ПодготовитьКЗаписиОтчетаТитульныйЛист(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаСтраницыРазделов(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистА(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистБ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистВ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистГ1(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистГ1Продолжение(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистГ2(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистГ3(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистД(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистЕ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистЖ1(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистЖ2(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистЖ3(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистЗ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистЗПродолжение(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	ПодготовитьКЗаписиОтчетаЛистИ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ФормироватьСтруктуруСтраницОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьКЗаписиОтчетаТитульныйЛист(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ДатаПодписи", ДатаПодписи);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ДокУпПред", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("Имя", НалогоплательщикИмя);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("КодИМНС", КодИФНС);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("НомерКорректировки", НомерКорректировки);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ОКАТО", АдресВРФОкато);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ОргПодписантИмя", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ОргПодписантОтчество", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ОргПодписантФамилия", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ОргУп", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("Отчество", НалогоплательщикОтчество);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ОтчетГод", ГодОтчета);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("Период", );
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ПоМесту", КатегорияНалогоплательщика);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ПрПодп", "1");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("Прил", КоличествоПриложений);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("СоставленаНа", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("ТелОрганизации", НомерТелефона);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Вставить("Фамилия", НалогоплательщикФамилия);

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный002", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("АдресЗаПределамиРФ", АдресЗаПределамиРФ);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Город", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Гражданство", ?(КодСтраныГражданства = "", "2", "1"));
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("ДатаВыдачиДокумента", ДатаВыдачиДокумента);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("ДатаРождения", НалогоплательщикДатаРождения);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Дом", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Индекс", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Квартира", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("КемВыданДокумент", КемВыданДокумент);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("КодВидаДокумента", КодВидаДокумента);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("КодСтраны", КодСтраныГражданства);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Корпус", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("МестоЖительства", Строка(АдресВРФТипАдреса));
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("МестоРождения", НалогоплательщикМестоРождения);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("НаселенныйПункт", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Район", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Регион", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("СерияИНомерДокумента", СерияИНомерДокумента);
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("СтатусНалогоплательщика", Строка(СтатусНалогоплательщика));
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Улица", "");
	ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Вставить("Фамилия", НалогоплательщикФамилия);
	
	Если ТипЗнч(АдресВРФСтруктура) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПоказателиОтчета.ПолеТабличногоДокументаТитульный002, АдресВРФСтруктура);
		ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Регион = АдресВРФСтруктура.КодРегиона;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьКЗаписиОтчетаСтраницыРазделов(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	// Раздел 1:
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаРаздел1", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010001003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010002003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010003003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010004003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010005003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010006003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010007003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010007503", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010008003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010009003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010010003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел1.Вставить("П000010011003", 0);

	// Раздел 2:
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаРаздел2", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020001003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020002003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020003003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020004003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020005003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020006003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020007003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020008003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел2.Вставить("П000020009003", 0);
	
	// Раздел 3:
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаРаздел3", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030001003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030002003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030003003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030004003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030005003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030005103", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030006003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030007003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.Вставить("П000030008003", 0);
	
	// Раздел 4:
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаРаздел4", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("П000040001003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("П000040002003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("П000040003003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("П000040004003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("П000040005003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("П000040006003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел4.Вставить("П000040007003", 0);
	
	// Раздел 5:
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаРаздел5", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("П000050001003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("П000050002003", "");
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("П000050003003", "");
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("П000050004003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("П000050005003", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаРаздел5.Вставить("П000050006003", 0);
	
	//Раздел 6
	ДанныеМногостраничныхРазделов.Вставить("Раздел6", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетРаздел6(ДанныеМногостраничныхРазделов.Раздел6, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетРаздел6(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + ТаблицаСтраницРаздела.Количество();
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000060001001", 0);
	СтрокаСтраницы.Данные.Вставить("П000060002003", "");
	СтрокаСтраницы.Данные.Вставить("П000060003003", "");
	СтрокаСтраницы.Данные.Вставить("П000060004003", 0);
	СтрокаСтраницы.Данные.Вставить("П000060005003", 0);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистА(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистА", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистА(ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
	СтрокаСтраницы = ДанныеМногостраничныхРазделов.ЛистА[0];
	
	//Добавляем лист в структуру многосточных разделов
	ДанныеМногострочныхРазделов.Вставить(ПараметрыЗаполнения.мИдГруппыА, СтрокаСтраницы.ДанныеДопСтрок.СкопироватьКолонки()); //П0000700010
	НоваяСтрока = ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыА].Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетЛистА(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000070001001_1", "");
	СтрокаСтраницы.Данные.Вставить("П000070001002_1", "");
	СтрокаСтраницы.Данные.Вставить("П000070001003_1", "");
	СтрокаСтраницы.Данные.Вставить("П000070001004_1", "");
	СтрокаСтраницы.Данные.Вставить("П000070001005_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000070001006_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000070001007_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000070001008_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000070008001", 0);
	СтрокаСтраницы.Данные.Вставить("П000070009001", 0);
	СтрокаСтраницы.Данные.Вставить("П000070010001", 0);
	СтрокаСтраницы.Данные.Вставить("П000070011001", 0);
	СтрокаСтраницы.Данные.Вставить("П000070012001", 0);
	СтрокаСтраницы.Данные.Вставить("СтавкаНалога", 0);
	
	СтрокаСтраницы.ДанныеДопСтрок = Новый ТаблицаЗначений;
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001001", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001002", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001003", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001004", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001005", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001006", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001007", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000070001008", Новый ОписаниеТипов("Число"));
	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетНовуюСтрокуЛистА(СтрокаСтраницы, ПараметрыЗаполнения)

	НомерНовойСтроки = СтрокаСтраницы.ДанныеДопСтрок.Количество() + 1;
	СуффиксНомера = "_" + Строка(НомерНовойСтроки);
	
	СтрокаСтраницы.Данные.Вставить("П000070001001" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000070001002" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000070001003" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000070001004" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000070001005" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000070001006" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000070001007" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000070001008" + СуффиксНомера, 0);
	
	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистБ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистБ", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистБ(ДанныеМногостраничныхРазделов.ЛистБ, ПараметрыЗаполнения);
	СтрокаСтраницы = ДанныеМногостраничныхРазделов.ЛистБ[0];
	
	//Добавляем лист в структуру многосточных разделов
	ДанныеМногострочныхРазделов.Вставить(ПараметрыЗаполнения.мИдГруппыБ, СтрокаСтраницы.ДанныеДопСтрок.СкопироватьКолонки()); //П0000800010
	НоваяСтрока = ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыБ].Добавить();

КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетЛистБ(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000080001001_1", "");
	СтрокаСтраницы.Данные.Вставить("П000080001002_1", "");
	СтрокаСтраницы.Данные.Вставить("П000080001004_1", "");
	СтрокаСтраницы.Данные.Вставить("П000080001005_1", '00010101');
	СтрокаСтраницы.Данные.Вставить("П000080001006_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001007_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001008_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001009_1", '00010101');
	СтрокаСтраницы.Данные.Вставить("П000080001010_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001011_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001012_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001013_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001014_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001501", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001601", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001701", 0);
	СтрокаСтраницы.Данные.Вставить("П000080001801", 0);
	СтрокаСтраницы.Данные.Вставить("СтавкаНалога", 0);

	СтрокаСтраницы.ДанныеДопСтрок = Новый ТаблицаЗначений;
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001001", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001002", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001004", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001005", Новый ОписаниеТипов("Дата"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001006", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001007", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001008", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001009", Новый ОписаниеТипов("Дата"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001010", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001011", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001012", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001013", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000080001014", Новый ОписаниеТипов("Число"));
	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетНовуюСтрокуЛистБ(СтрокаСтраницы, ПараметрыЗаполнения)

	НомерНовойСтроки = СтрокаСтраницы.ДанныеДопСтрок.Количество() + 1;
	СуффиксНомера = "_" + Строка(НомерНовойСтроки);
	
	СтрокаСтраницы.Данные.Вставить("П000080001001" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000080001002" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000080001004" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000080001005" + СуффиксНомера, '00010101');
	СтрокаСтраницы.Данные.Вставить("П000080001006" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000080001007" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000080001008" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000080001009" + СуффиксНомера, '00010101');
	СтрокаСтраницы.Данные.Вставить("П000080001010" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000080001011" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000080001012" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000080001013" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000080001014" + СуффиксНомера, 0);

	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистВ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистВ", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистВ(ДанныеМногостраничныхРазделов.ЛистВ, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетЛистВ(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000090001001", "");
	СтрокаСтраницы.Данные.Вставить("П000090001002", "");
	СтрокаСтраницы.Данные.Вставить("П000090001003", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001004", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001005", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001006", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001007", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001008", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001009", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001010", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001101", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001201", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001301", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001401", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001501", 0);
	СтрокаСтраницы.Данные.Вставить("П000090001601", 0);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистГ1(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаЛистГ1", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010101002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010102004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010103002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010104004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010105002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010106004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010107002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010107002_1", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010108004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010109002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010109002_1", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010110004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010111002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010111002_1", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010112004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010113002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010114004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010115004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.Вставить("П000010116004", 0);

КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистГ1Продолжение(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистГ1Продолжение", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистГ1Продолжение(ДанныеМногостраничныхРазделов.ЛистГ1Продолжение, ДанныеМногострочныхРазделов, ПараметрыЗаполнения);

КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетЛистГ1Продолжение(ТаблицаСтраницРаздела, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000025117002", "");
	СтрокаСтраницы.Данные.Вставить("П000025118004", "");
	СтрокаСтраницы.Данные.Вставить("П000025124002", 0);
	Для Счетчик = 1 По 12 Цикл
		СуффиксИмени = "_" + Формат(Счетчик, "ЧДЦ=0; ЧГ="); 
		СтрокаСтраницы.Данные.Вставить("П000025119002" + СуффиксИмени, 0);
		СтрокаСтраницы.Данные.Вставить("П000025119003" + СуффиксИмени, 0);
		СтрокаСтраницы.Данные.Вставить("П000025119004" + СуффиксИмени, 0);
		СтрокаСтраницы.Данные.Вставить("П000025119005" + СуффиксИмени, 0);
		СтрокаСтраницы.Данные.Вставить("П000025119006" + СуффиксИмени, 0);
	КонецЦикла; 

	СтрокаСтраницы.ДанныеДопСтрок = Новый ТаблицаЗначений;
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000025119002", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000025119003", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000025119004", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000025119005", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000025119006", Новый ОписаниеТипов("Число"));
	Для Счетчик = 1 По 12 Цикл
		ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	КонецЦикла; 
	
	//Добавляем лист в структуру многосточных разделов
	ДанныеМногострочныхРазделов.Вставить(ПараметрыЗаполнения.мИдГруппыГ1Продолжение, СтрокаСтраницы.ДанныеДопСтрок.Скопировать()); //П0000700010
	
КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистГ2(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистГ2", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистГ2(ДанныеМногостраничныхРазделов.ЛистГ2, ПараметрыЗаполнения);
	СтрокаСтраницы = ДанныеМногостраничныхРазделов.ЛистГ2[0];
	
	//Добавляем лист в структуру многосточных разделов
	ДанныеМногострочныхРазделов.Вставить(ПараметрыЗаполнения.мИдГруппыГ2, СтрокаСтраницы.ДанныеДопСтрок.СкопироватьКолонки()); //П0000102010
	НоваяСтрока = ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ2].Добавить();

КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетЛистГ2(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000010201001_1", "");
	СтрокаСтраницы.Данные.Вставить("П000010201002_1", "");
	СтрокаСтраницы.Данные.Вставить("П000010201004_1", "");
	СтрокаСтраницы.Данные.Вставить("П000010201005_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000010201006_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000010207001", 0);

	СтрокаСтраницы.ДанныеДопСтрок = Новый ТаблицаЗначений;
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000010201001", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000010201002", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000010201004", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000010201005", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000010201006", Новый ОписаниеТипов("Число"));
	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетНовуюСтрокуЛистГ2(СтрокаСтраницы, ПараметрыЗаполнения)

	НомерНовойСтроки = СтрокаСтраницы.ДанныеДопСтрок.Количество() + 1;
	СуффиксНомера = "_" + Строка(НомерНовойСтроки);
	
	СтрокаСтраницы.Данные.Вставить("П000010201001" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000010201002" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000010201004" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000010201005" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000010201006" + СуффиксНомера, 0);

	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистГ3(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистГ3", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистГ3(ДанныеМногостраничныхРазделов.ЛистГ3, ПараметрыЗаполнения);
	СтрокаСтраницы = ДанныеМногостраничныхРазделов.ЛистГ3[0];
	
	//Добавляем лист в структуру многосточных разделов
	ДанныеМногострочныхРазделов.Вставить(ПараметрыЗаполнения.мИдГруппыГ3, СтрокаСтраницы.ДанныеДопСтрок.СкопироватьКолонки()); //П0000102010
	НоваяСтрока = ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ3].Добавить();

КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетЛистГ3(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000027201001_1", "");
	СтрокаСтраницы.Данные.Вставить("П000027201002_1", "");
	СтрокаСтраницы.Данные.Вставить("П000027201003_1", "");
	СтрокаСтраницы.Данные.Вставить("П000027201004_1", "");
	СтрокаСтраницы.Данные.Вставить("П000027201005_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000027201006_1", 0);
	СтрокаСтраницы.Данные.Вставить("П000027207001", 0);

	СтрокаСтраницы.ДанныеДопСтрок = Новый ТаблицаЗначений;
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000027201001", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000027201002", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000027201003", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000027201004", Новый ОписаниеТипов("Строка"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000027201005", Новый ОписаниеТипов("Число"));
	СтрокаСтраницы.ДанныеДопСтрок.Колонки.Добавить("П000027201006", Новый ОписаниеТипов("Число"));
	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ДобавитьВОтчетНовуюСтрокуЛистГ3(СтрокаСтраницы, ПараметрыЗаполнения)

	НомерНовойСтроки = СтрокаСтраницы.ДанныеДопСтрок.Количество() + 1;
	СуффиксНомера = "_" + Строка(НомерНовойСтроки);
	
	СтрокаСтраницы.Данные.Вставить("П000027201001" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000027201002" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000027201003" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000027201004" + СуффиксНомера, "");
	СтрокаСтраницы.Данные.Вставить("П000027201005" + СуффиксНомера, 0);
	СтрокаСтраницы.Данные.Вставить("П000027201006" + СуффиксНомера, 0);

	ДопСтрока = СтрокаСтраницы.ДанныеДопСтрок.Добавить();
	
КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистД(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистД", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистД(ДанныеМногостраничныхРазделов.ЛистД, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетЛистД(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000012001001", "");
	СтрокаСтраницы.Данные.Вставить("П000012001010", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001020", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001030", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001040", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001050", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001060", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001070", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001080", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001090", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001100", 0);
	СтрокаСтраницы.Данные.Вставить("П000012001110", 0);
	
КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистЕ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаЛистЕ", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014001002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014002004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014003002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014004004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014005002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014006004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014007002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014008004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014009002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014010004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014011002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014012004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014013002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014014004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014015002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014016004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014017002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014018004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ.Вставить("П000014019002", 0);

КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистЖ1(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаЛистЖ1", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020001002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020002002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020003002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020004002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020005002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020006002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020007002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020008002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020009002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020010002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020011002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020012002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020013002", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020014004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020015004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020016004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020017004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020018004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020019004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020020004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020021004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1.Вставить("П000020022004", 0);

КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистЖ2(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаЛистЖ2", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021001004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021002004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021003004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021004004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021005004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021006004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021007004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021008004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021009004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021010004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021011004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2.Вставить("П000021012004", 0);

КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистЖ3(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	//Добавляем лист в структуру многостраниных разделов
	ДанныеМногостраничныхРазделов.Вставить("ЛистЖ3", ПолучитьТаблицуМногостраничногоРаздела());
	ДобавитьВОтчетЛистЖ3(ДанныеМногостраничныхРазделов.ЛистЖ3, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетЛистЖ3(ТаблицаСтраницРаздела, ПараметрыЗаполнения)

	СтрокаСтраницы = ТаблицаСтраницРаздела.Добавить();
	СтрокаСтраницы.Представление = "Страница N " + Формат(ТаблицаСтраницРаздела.Количество(), "ЧДЦ=0; ЧГ=");
	СтрокаСтраницы.Данные = Новый Структура();
	СтрокаСтраницы.Данные.Вставить("ИНН1", НалогоплательщикИНН);
	СтрокаСтраницы.Данные.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	СтрокаСтраницы.Данные.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	СтрокаСтраницы.Данные.Вставить("Фамилия", НалогоплательщикФамилия);
	СтрокаСтраницы.Данные.Вставить("П000022001001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022002001", "");
	СтрокаСтраницы.Данные.Вставить("П000022003001", "");
	СтрокаСтраницы.Данные.Вставить("П000022004001", "");
	СтрокаСтраницы.Данные.Вставить("П000022005001", '00010101');
	СтрокаСтраницы.Данные.Вставить("П000022006001", "");
	СтрокаСтраницы.Данные.Вставить("П000022007001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022008001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022009001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022010001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022011001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022012001", "");
	СтрокаСтраницы.Данные.Вставить("П000022013001", "");
	СтрокаСтраницы.Данные.Вставить("П000022014001", "");
	СтрокаСтраницы.Данные.Вставить("П000022015001", '00010101');
	СтрокаСтраницы.Данные.Вставить("П000022016001", "");
	СтрокаСтраницы.Данные.Вставить("П000022017001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022018001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022019001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022020001", 0);
	СтрокаСтраницы.Данные.Вставить("П000022021001", 0);
	
КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистЗ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаЛистЗ", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021001001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021002001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021003001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021004001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021005001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021006001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021007001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021008001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021009001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021010001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021011001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021012001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021013001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021014001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021015001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021016001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021017001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021018001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021019001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021020001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021021001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021022001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021023001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021024001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021025001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021026001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ.Вставить("П000021027001", 0);

КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистЗПродолжение(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаЛистЗПродолжение", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022028001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022029001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022030001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022031001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022032001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022033001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022034001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022035001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022036001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022037001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022038001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022039001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022040001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022041001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022042001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение.Вставить("П000022043001", 0);

КонецПроцедуры
 
&НаСервере
Процедура ПодготовитьКЗаписиОтчетаЛистИ(ПоказателиОтчета, ДанныеМногостраничныхРазделов, ДанныеМногострочныхРазделов, ПараметрыЗаполнения)

	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаЛистИ", Новый Структура);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИНН1", НалогоплательщикИНН);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("Имя1", ПараметрыЗаполнения.Инициал1);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("Отчество1", ПараметрыЗаполнения.Инициал2);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("Фамилия", НалогоплательщикФамилия);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмГодВычета", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмГород", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмДатаАкта", '00010101');
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмДатаПриобретения", '00010101');
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ЗемлДатаПриобретения", '00010101');
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмДатаРаспределенияВычета", '00010101');
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмДоля1", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмДоля3", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмДом", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмИндекс", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмКвартира", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмКорпус", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмНаселенныйПункт", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмРайон", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмРегион", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("ИмУлица", "");
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000023001001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000023002001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000023003001", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024011004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024012004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024013004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024014004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024015004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024016004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024017004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024018004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024019004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024020004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024021004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024022004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024023004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024024004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024025004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024026004", 0);
	ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.Вставить("П000024027004", 0);

КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуМногостраничногоРаздела()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Данные");
	Результат.Колонки.Добавить("ДанныеДопСтрок");

	Возврат Результат;
	
КонецФункции
 
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист стр. 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный002";
	СтрокаУровня1.Представление            = "Титульный лист стр. 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистА";
	СтрокаУровня1.Представление            = "Лист А";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистБ";
	СтрокаУровня1.Представление            = "Лист Б";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистВ";
	СтрокаУровня1.Представление            = "Лист В";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ1";
	СтрокаУровня1.Представление            = "Лист Г1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ1Продолжение";
	СтрокаУровня1.Представление            = "Лист Г1 продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ2";
	СтрокаУровня1.Представление            = "Лист Г2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ3";
	СтрокаУровня1.Представление            = "Лист Г3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистД";
	СтрокаУровня1.Представление            = "Лист Д";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЕ";
	СтрокаУровня1.Представление            = "Лист Е";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ1";
	СтрокаУровня1.Представление            = "Лист Ж1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ2";
	СтрокаУровня1.Представление            = "Лист Ж2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ3";
	СтрокаУровня1.Представление            = "Лист Ж3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗ";
	СтрокаУровня1.Представление            = "Лист З";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗПродолжение";
	СтрокаУровня1.Представление            = "Лист З Продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистИ";
	СтрокаУровня1.Представление            = "Лист И";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьОтчетДанными(СписокСохранения, ПараметрыЗаполнения)

	// Сначала определим, какие именно листы требуется заполнять
	ЛистыДекларации = ПолучитьСтруктуруЛистовДекларации();
	
	Для Каждого Строка Из ТаблицаДокументовДоходов Цикл
		
		Если Строка.СтатусНалогоплательщика <> СтатусНалогоплательщика Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Строка.ВидДокумента = "Доход предпринимателя" Тогда
			ЛистыДекларации.Раздел1.Использовать = Истина;
			ЛистыДекларации.Раздел1.СтрокиДокументов.Добавить(Строка);
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистВ.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистВ.СтрокиДокументов.Добавить(Строка);
		ИначеЕсли Строка.ВидДокумента = "Доход в валюте" Тогда
			Если СтрНайти("2620,", Строка.КодДохода + ",") > 0 Тогда
				Продолжить;
			КонецЕсли; 
			ИмяРаздела = ПолучитьИмяРазделаПоСтавкеНалога(Строка.СтавкаНалога);
			Если ИмяРаздела <> "" Тогда
				ЛистыДекларации[ИмяРаздела].Использовать = Истина;
				ЛистыДекларации[ИмяРаздела].СтрокиДокументов.Добавить(Строка);
				ЛистыДекларации[ИмяРаздела].СвязанныеЛисты.ЛистБ.Использовать = Истина;
				ЛистыДекларации[ИмяРаздела].СвязанныеЛисты.ЛистБ.СтрокиДокументов.Добавить(Строка);
				ОпределитьЛистыВычетовПоДокументамДоходов(ЛистыДекларации[ИмяРаздела].СвязанныеЛисты, Строка);
			КонецЕсли; 
		ИначеЕсли Строка.ВидДокумента = "Прочий доход" Тогда
			Если СтрНайти("2620,", Строка.КодДохода + ",") > 0 Тогда
				Продолжить;
			КонецЕсли; 
			ИмяРаздела = ПолучитьИмяРазделаПоСтавкеНалога(Строка.СтавкаНалога);
			Если ИмяРаздела <> "" Тогда
				ЛистыДекларации[ИмяРаздела].Использовать = Истина;
				ЛистыДекларации[ИмяРаздела].СтрокиДокументов.Добавить(Строка);
				ЛистыДекларации[ИмяРаздела].СвязанныеЛисты.ЛистА.Использовать = Истина;
				ЛистыДекларации[ИмяРаздела].СвязанныеЛисты.ЛистА.СтрокиДокументов.Добавить(Строка);
				ОпределитьЛистыВычетовПоДокументамДоходов(ЛистыДекларации[ИмяРаздела].СвязанныеЛисты, Строка);
			КонецЕсли; 
		ИначеЕсли Строка.ВидДокумента = "2-НДФЛ" Тогда
			ИмяРаздела = ПолучитьИмяРазделаПоСтавкеНалога(Строка.СтавкаНалога);
			Если ИмяРаздела <> "" Тогда
				ЛистыДекларации[ИмяРаздела].Использовать = Истина;
				ЛистыДекларации[ИмяРаздела].СтрокиДокументов.Добавить(Строка);
				ЛистыДекларации[ИмяРаздела].СвязанныеЛисты.ЛистА.Использовать = Истина;
				ЛистыДекларации[ИмяРаздела].СвязанныеЛисты.ЛистА.СтрокиДокументов.Добавить(Строка);
				ОпределитьЛистыВычетовПоДокументамДоходов(ЛистыДекларации[ИмяРаздела].СвязанныеЛисты, Строка);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 

	Для Каждого СтрокаВычета Из ТаблицаДокументовВычета Цикл
		
		Если СтрокаВычета.СтатусНалогоплательщика <> СтатусНалогоплательщика Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаВычета.ВидДокумента = "Стандартные вычеты" Тогда
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЖ1.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЖ1.СтрокиДокументов.Добавить(СтрокаВычета);
		ИначеЕсли СтрокаВычета.ВидДокумента = "Пенсионный взнос" Тогда
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЖ2.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЖ3.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЖ3.СтрокиДокументов.Добавить(СтрокаВычета);
		ИначеЕсли СтрокаВычета.ВидДокумента = "Социальные вычеты" Тогда
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЖ2.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЖ2.СтрокиДокументов.Добавить(СтрокаВычета);
		ИначеЕсли СтрокаВычета.ВидДокумента = "Имущественный вычет" Тогда
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистИ.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистИ.СтрокиДокументов.Добавить(СтрокаВычета);
		ИначеЕсли СтрокаВычета.ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЗ.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЗПродолжение.Использовать = Истина;
			ЛистыДекларации.Раздел1.СвязанныеЛисты.ЛистЗ.СтрокиДокументов.Добавить(СтрокаВычета);
		КонецЕсли; 
		
	КонецЦикла; 
	
	//Для определения сумм дохода создадим структуру итоговых показателей:
	ПараметрыЗаполнения.Вставить("ИтогиДекларации", Новый Структура());
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("Раздел1_010", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистГ_1_9", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистГ1_1_9", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистГ2_2", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистГ3_2", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("Раздел1_030", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистВ_3_2", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистД_6_1", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистЕ_4", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистЖ1_2_8", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистЖ2_3", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистЖ3_3", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистЗ_11_3", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистИ_2_5", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистИ_2_6", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистИ_2_8", 0);
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("ЛистИ_2_9", 0);
	
	//Заполняем доходы раздела 1 (ставка 13%)
	ЗаполнитьСтраницыРаздела1(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения);
	
	//Заполняем доходы раздела 2 (ставка 30%)
	ПараметрыЗаполнения.ИтогиДекларации.Вставить("Раздел2_010", 0);
	ЗаполнитьСтраницыРаздела2(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения);
	
	ЗаполнитьСтраницыРаздела3(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения);
	
	ЗаполнитьСтраницыРаздела4(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения);
	
	ЗаполнитьСтраницыРаздела5(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения);
	
	
	//Заполним Данные многострочных разделов:
	// Лист А
	СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыА].Очистить();
	Для Каждого СтраницаРаздела Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА Цикл
		Для Каждого ДопСтрока Из СтраницаРаздела.ДанныеДопСтрок Цикл
			НоваяСтрока = СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыА].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопСтрока);
		КонецЦикла; 
	КонецЦикла; 

	// Лист Б
	СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыБ].Очистить();
	Для Каждого СтраницаРаздела Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ Цикл
		Для Каждого ДопСтрока Из СтраницаРаздела.ДанныеДопСтрок Цикл
			НоваяСтрока = СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыБ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопСтрока);
		КонецЦикла; 
	КонецЦикла; 

	// Лист Г1Продолжение
	СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ1Продолжение].Очистить();
	Для Каждого СтраницаРаздела Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ1Продолжение Цикл
		Для Каждого ДопСтрока Из СтраницаРаздела.ДанныеДопСтрок Цикл
			НоваяСтрока = СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ1Продолжение].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопСтрока);
		КонецЦикла; 
	КонецЦикла; 
	
	// Лист Г2
	СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ2].Очистить();
	Для Каждого СтраницаРаздела Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ2 Цикл
		Для Каждого ДопСтрока Из СтраницаРаздела.ДанныеДопСтрок Цикл
			НоваяСтрока = СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ2].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопСтрока);
		КонецЦикла; 
	КонецЦикла; 
	
	// Лист Г3
	СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ3].Очистить();
	Для Каждого СтраницаРаздела Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ3 Цикл
		Для Каждого ДопСтрока Из СтраницаРаздела.ДанныеДопСтрок Цикл
			НоваяСтрока = СписокСохранения.ДанныеМногострочныхРазделов[ПараметрыЗаполнения.мИдГруппыГ3].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопСтрока);
		КонецЦикла; 
	КонецЦикла; 
	
	// Установим видимость листов декларации:
	ИспользуемыеЛисты = Новый Соответствие;
	Для Каждого Раздел Из ЛистыДекларации Цикл
		Если Раздел.Значение.Использовать Тогда
			ИспользуемыеЛисты.Вставить(Раздел.Ключ, Истина);
			Для Каждого СвязанныйЛист Из Раздел.Значение.СвязанныеЛисты Цикл
				Если СвязанныйЛист.Значение.Использовать Тогда
					ИспользуемыеЛисты.Вставить(СвязанныйЛист.Ключ, Истина);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для Каждого СтрокаДерева Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		Если СтрокаДерева.ИмяСтраницы = "Титульный"
			ИЛИ СтрокаДерева.ИмяСтраницы = "Титульный002" Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ИмяСтраницы = "Раздел6" Тогда
			СтрокаДерева.ПоказатьСтраницу = 1;
			СтрокаДерева.ВыводНаПечать = 1;
		Иначе
			Если ИспользуемыеЛисты[СтрокаДерева.ИмяСтраницы] <> Неопределено Тогда
				СтрокаДерева.ПоказатьСтраницу = 1;
				СтрокаДерева.ВыводНаПечать = 1;
			Иначе
				СтрокаДерева.ПоказатьСтраницу = 0;
				СтрокаДерева.ВыводНаПечать = 0;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРазделаПоСтавкеНалога(Знач СтавкаНалога)

	Если СтавкаНалога = 13 Тогда
		Возврат "Раздел1";
	ИначеЕсли СтавкаНалога = 30 Тогда
		Возврат "Раздел2";
	ИначеЕсли СтавкаНалога = 35 Тогда
		Возврат "Раздел3";
	ИначеЕсли СтавкаНалога = 9 Тогда
		Возврат "Раздел4";
	ИначеЕсли СтавкаНалога = 15 Тогда
		Возврат "Раздел5";
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции

&НаСервере
Процедура ОпределитьЛистыВычетовПоДокументамДоходов(ЛистыДекларации, СтрокаДохода)

	СтруктураЛистов = Новый Структура;
	Если СтрокаДохода.ВидДокумента = "2-НДФЛ" Тогда
		
		Для Каждого СтрокаСправки Из СтрокаДохода.ДваНДФЛ_Начисления Цикл
			Если СтрНайти("2620,", СтрокаСправки.КодДохода + ",") > 0 Тогда
				Продолжить;
			КонецЕсли; 
			ДобавитьЛистыВычетовПоКодамДоходовИВычетов(СтруктураЛистов, СтрокаДохода, СтрокаСправки.КодДохода, СтрокаСправки.КодВычета);
		КонецЦикла; 
		Для Каждого СтрокаСправки Из СтрокаДохода.ДваНДФЛ_Вычеты Цикл
			ДобавитьЛистыВычетовПоКодамДоходовИВычетов(СтруктураЛистов, СтрокаДохода, "", СтрокаСправки.КодВычета);
		КонецЦикла; 
	Иначе
		ДобавитьЛистыВычетовПоКодамДоходовИВычетов(СтруктураЛистов, СтрокаДохода, СтрокаДохода.КодДохода, СтрокаДохода.КодВычета);
	КонецЕсли; 
	
	Для Каждого ЭлементСтруктуры Из СтруктураЛистов Цикл
		ЛистыДекларации[ЭлементСтруктуры.Ключ].Использовать = Истина;
		ЛистыДекларации[ЭлементСтруктуры.Ключ].СтрокиДокументов.Добавить(СтрокаДохода);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ДобавитьЛистыВычетовПоКодамДоходовИВычетов(СтруктураЛистов, СтрокаДокумента, знач КодДохода, знач КодВычета)

	КодДохода = ?(ЗначениеЗаполнено(КодДохода), КодДохода, "+");
	КодВычета = ?(ЗначениеЗаполнено(КодВычета), КодВычета, "+");
	
	Если СтрНайти("2720,2730,2760,2761,2762,2770,2790,2791,", КодДохода + ",") > 0 ИЛИ СтрНайти("501,502,503,504,506,507,508,509,", КодВычета + ",") > 0 Тогда
		СтруктураЛистов.Вставить("ЛистГ1");
		Если КодДохода = "2791" ИЛИ КодВычета = "509" Тогда
			СтруктураЛистов.Вставить("ЛистГ1Продолжение");
		КонецЕсли; 
	КонецЕсли; 
	Если КодДохода = "2740" Тогда
		СтруктураЛистов.Вставить("ЛистГ2");
	КонецЕсли; 
	Если КодДохода = "2620" Тогда
		СтруктураЛистов.Вставить("ЛистГ3");
	КонецЕсли; 
	Если СтрНайти("2010,1540,1550,", КодДохода + ",") > 0 ИЛИ КодДохода >= "2201" И КодДохода <= "2209" 
		ИЛИ СтрНайти("404,", КодВычета + ",") > 0  Тогда
		СтруктураЛистов.Вставить("ЛистД");
	КонецЕсли; 
	Если СтрНайти("1510,1511,1520,4900,", КодДохода + ",") > 0 ИЛИ СтрНайти("301,303,305,313,305Н,", КодВычета + ",") > 0 Тогда
		СтруктураЛистов.Вставить("ЛистЕ");
	КонецЕсли; 
	Если СтрНайти("1530,1536,1531,1532,1535,1533,1537,1539,1541,1538,", КодДохода + ",") > 0 Тогда
		СтруктураЛистов.Вставить("ЛистЗ");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЛистовДекларации()

	Результат = Новый Структура;
	Результат.Вставить("Раздел1", Новый Структура("Использовать,СтрокиДокументов,СвязанныеЛисты", Ложь, Новый Массив, ПолучитьСтруктуруСвязанныхЛистовДекларации()));
	Результат.Вставить("Раздел2", Новый Структура("Использовать,СтрокиДокументов,СвязанныеЛисты", Ложь, Новый Массив, ПолучитьСтруктуруСвязанныхЛистовДекларации()));
	Результат.Вставить("Раздел3", Новый Структура("Использовать,СтрокиДокументов,СвязанныеЛисты", Ложь, Новый Массив, ПолучитьСтруктуруСвязанныхЛистовДекларации()));
	Результат.Вставить("Раздел4", Новый Структура("Использовать,СтрокиДокументов,СвязанныеЛисты", Ложь, Новый Массив, ПолучитьСтруктуруСвязанныхЛистовДекларации()));
	Результат.Вставить("Раздел5", Новый Структура("Использовать,СтрокиДокументов,СвязанныеЛисты", Ложь, Новый Массив, ПолучитьСтруктуруСвязанныхЛистовДекларации()));
	Результат.Вставить("Раздел6", Новый Структура("Использовать,СтрокиДокументов,СвязанныеЛисты", Ложь, Новый Массив, ПолучитьСтруктуруСвязанныхЛистовДекларации()));

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСвязанныхЛистовДекларации()

	Результат = Новый Структура;
	Результат.Вставить("ЛистА",   Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистБ",   Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистВ",   Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистГ1",              Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистГ1Продолжение",   Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистГ2",              Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистГ3",              Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистД",               Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистЕ",               Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистЖ1",              Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистЖ2",              Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистЖ3",              Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистЗ",               Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистЗПродолжение",    Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));
	Результат.Вставить("ЛистИ",               Новый Структура("Использовать,СтрокиДокументов", Ложь, Новый Массив));

	Возврат Результат;
	
КонецФункции


#Область Заполнение_Раздел1

&НаСервере
Процедура ЗаполнитьСтраницыРаздела1(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	ДокументыЛистаА = Новый Массив;
	ДокументыЛистаБ = Новый Массив;
	ДокументыЛистаВ = Новый Массив;
	
	Для Каждого СтрокаДокументаДохода Из ЛистыДекларации.Раздел1.СтрокиДокументов Цикл
		Если СтрокаДокументаДохода.ВидДокумента = "Доход предпринимателя" Тогда
			ДокументыЛистаВ.Добавить(СтрокаДокументаДохода);
		ИначеЕсли СтрокаДокументаДохода.ВидДокумента = "Доход в валюте" Тогда
			ДокументыЛистаБ.Добавить(СтрокаДокументаДохода);
		Иначе
			ДокументыЛистаА.Добавить(СтрокаДокументаДохода);
		КонецЕсли; 
	КонецЦикла; 
	
	ДанныеЛиста = Неопределено;
	
	//Для заполнения раздела 6 потребуется информация о КБК, ОКАТО и расчетов по налогам
	//	по каждому источнику дохода
	ТаблицаРаздела6 = Новый ТаблицаЗначений;
	ТаблицаРаздела6.Колонки.Добавить("КБК");
	ТаблицаРаздела6.Колонки.Добавить("ОКАТО");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаНачислено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаУплачено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаСВычета");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКДоплате");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКВозврату");
	
	
	// Заполняем лист А (доходы в рублях)
	СчетчикСтраниц      = 1;
	СчетчикСтрок        = 0;
	ИтогСуммаДохода           = 0;
	ИтогНалогооблагаемаяБаза  = 0;
	ИтогНалогНачислен         = 0;
	ИтогНалогУдержан          = 0;
	ИтогНалогУплачен          = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаА Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок > 1 И СчетчикСтрок <= 4 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистА(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 4 Тогда
			// На каждом листе по 4 строки
			ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаНалога, 0,1);
		ПоСтрокеНалогооблагаемаяБаза = СтрокаДокументаДохода.ОблагаемаяСуммаДохода;
		
		ДанныеЛиста.Данные["СтавкаНалога"] = 13;
		ДанныеЛиста.Данные["П000070001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникИНН;
		ДанныеЛиста.Данные["П000070001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКПП;
		ДанныеЛиста.Данные["П000070001003" + НомерСтроки] = СтрокаДокументаДохода.ИсточникОКАТО;
		ДанныеЛиста.Данные["П000070001004" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000070001005" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000070001006" + НомерСтроки] = ПоСтрокеНалогооблагаемаяБаза;
		ДанныеЛиста.Данные["П000070001007" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000070001008" + НомерСтроки] = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		
		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогСуммаДохода = ИтогСуммаДохода + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогооблагаемаяБаза = ИтогНалогооблагаемаяБаза + ПоСтрокеНалогооблагаемаяБаза;
		ИтогНалогНачислен  = ИтогНалогНачислен + ПоСтрокеНалогаНачислено;
		ИтогНалогУдержан   = ИтогНалогУдержан + Окр(СтрокаДокументаДохода.СуммаНалогаУдержано + СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1);
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = СтрокаДокументаДохода.ИсточникОКАТО;
		СтрокаРаздела6.СуммаНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаДохода * 0.13, 0,1);
		СтрокаРаздела6.СуммаНалогаУплачено = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		//СтрокаРаздела6.СуммаНалогаСВычета  = Окр(СтрокаДокументаДохода.СуммаВычета * 0.13, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа А
	СчетчикСтраниц = 0;
	СуммаФиксированныхАвансовыхПлатежей = ТаблицаУплаченныхНалогов[3].СуммаНалога;
	ВсегоСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА.Количество();
	Для Каждого ЛистА Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА Цикл
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистА.Данные["П000070008001"] = ИтогСуммаДохода;
			ЛистА.Данные["П000070009001"] = ИтогНалогооблагаемаяБаза;
			ЛистА.Данные["П000070010001"] = ИтогНалогНачислен;
			ЛистА.Данные["П000070011001"] = ИтогНалогУдержан;
			ЛистА.Данные["П000070012001"] = СуммаФиксированныхАвансовыхПлатежей;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистА.Данные.Удалить("П000070008001");
			ЛистА.Данные.Удалить("П000070009001");
			ЛистА.Данные.Удалить("П000070010001");
			ЛистА.Данные.Удалить("П000070011001");
			ЛистА.Данные.Удалить("П000070012001");
		КонецЕсли; 
		
	КонецЦикла; 
	
	//Заполняем Лист Б (доходы в валюте)
	СчетчикСтраниц = 1;
	СчетчикСтрок   = 0;
	ИтогВалютныйДоходВРублях          = 0;
	ИтогНалогУплаченЗаГраницейВРублях = 0;
	ИтогНачисленНалогНаВалютныйДоход  = 0;
	ИтогНалогЗачтенВРФ                = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаБ Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок = 2 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистБ(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 2 Тогда
			// На каждом листе по 2 строки
			ДобавитьВОтчетЛистБ(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаДохода * 0.13, 0,1);
		СуммаНалогаЗасчитанногоВРФ = ?(НалогДругойСтраныПодлежитЗачету(СтрокаДокументаДохода.ИсточникКодСтраны), 
				Мин(ПоСтрокеНалогаНачислено, Окр(СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1)), 0);
		
		ДанныеЛиста.Данные.СтавкаНалога = 13;
		ДанныеЛиста.Данные["П000080001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКодСтраны;
		ДанныеЛиста.Данные["П000080001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000080001004" + НомерСтроки] = СтрокаДокументаДохода.ВалютаДохода.Код;
		ДанныеЛиста.Данные["П000080001005" + НомерСтроки] = СтрокаДокументаДохода.ДатаДохода;
		ДанныеЛиста.Данные["П000080001006" + НомерСтроки] = СтрокаДокументаДохода.КурсНаДатуДохода;
		ДанныеЛиста.Данные["П000080001007" + НомерСтроки] = СтрокаДокументаДохода.СуммаДоходаВВалюте;
		ДанныеЛиста.Данные["П000080001008" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000080001009" + НомерСтроки] = СтрокаДокументаДохода.ДатаУплатыНалога;
		ДанныеЛиста.Данные["П000080001010" + НомерСтроки] = СтрокаДокументаДохода.КурсНаДатуУплатыНалога;
		ДанныеЛиста.Данные["П000080001011" + НомерСтроки] = СтрокаДокументаДохода.СуммаНалогаУплаченоВВалюте;
		ДанныеЛиста.Данные["П000080001012" + НомерСтроки] = СтрокаДокументаДохода.СуммаНалогаУплачено;
		ДанныеЛиста.Данные["П000080001013" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000080001014" + НомерСтроки] = СуммаНалогаЗасчитанногоВРФ;

		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогВалютныйДоходВРублях = ИтогВалютныйДоходВРублях + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогУплаченЗаГраницейВРублях = ИтогНалогУплаченЗаГраницейВРублях + СтрокаДокументаДохода.СуммаНалогаУплачено;
		ИтогНачисленНалогНаВалютныйДоход  = ИтогНачисленНалогНаВалютныйДоход + ПоСтрокеНалогаНачислено;
		ИтогНалогЗачтенВРФ  = ИтогНалогЗачтенВРФ + ДанныеЛиста.Данные["П000080001014" + НомерСтроки];
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = АдресВРФОкато;
		СтрокаРаздела6.СуммаНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаДохода * 0.13, 0,1);
		СтрокаРаздела6.СуммаНалогаУплачено  = СуммаНалогаЗасчитанногоВРФ;
		//СтрокаРаздела6.СуммаНалогаСВычета   = Окр(СтрокаДокументаДохода.СуммаВычета * 0.13, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа Б
	СчетчикСтраниц = 0;
	ВсегоСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ.Количество();
	Для Каждого ЛистБ Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ Цикл
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистБ.Данные.П000080001501 = ИтогВалютныйДоходВРублях;
			ЛистБ.Данные.П000080001601 = ИтогНалогУплаченЗаГраницейВРублях;
			ЛистБ.Данные.П000080001701 = ИтогНачисленНалогНаВалютныйДоход;
			ЛистБ.Данные.П000080001801 = ИтогНалогЗачтенВРФ;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистБ.Данные.Удалить("П000080001501");
			ЛистБ.Данные.Удалить("П000080001601");
			ЛистБ.Данные.Удалить("П000080001701");
			ЛистБ.Данные.Удалить("П000080001801");
		КонецЕсли; 

		
	КонецЦикла; 
	
	//Заполняем Лист В (отчет предпринимателя)
	Счетчик = 0;
	ИтогДоходПредпринимателя       = 0;
	ИтогПрофессиональныйВычет      = 0;
	ИтогНачисленоАвансовыхПлатежей = 0;
	ИтогУплаченоАвансовыхПлатежей  = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаВ Цикл
		
		Счетчик = Счетчик + 1;
		Если Счетчик > 1 Тогда
			ДобавитьВОтчетЛистВ(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистВ, ПараметрыЗаполнения);
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистВ[Счетчик - 1].Данные;
		ДанныеЛиста.П000090001001 = СтрокаДокументаДохода.ВидДеятельностиИндекс;
		ДанныеЛиста.П000090001002 = СтрокаДокументаДохода.ВидДеятельностиКод;
		ДанныеЛиста.П000090001003 = СтрокаДокументаДохода.СуммаДохода;
		Если СтрокаДокументаДохода.РасходыПредпринимателяПоДокументам Тогда
			ДанныеЛиста.П000090001004 = СтрокаДокументаДохода.СуммаВычета;
			ДанныеЛиста.П000090001005 = СтрокаДокументаДохода.ОтчетПредпринимателя.Итог("МатериальныеРасходы");
			ДанныеЛиста.П000090001006 = СтрокаДокументаДохода.ОтчетПредпринимателя.Итог("АмортизацияОС");
			ДанныеЛиста.П000090001007 = СтрокаДокументаДохода.ОтчетПредпринимателя.Итог("НаОплатуТрудаВсего");
			ДанныеЛиста.П000090001008 = СтрокаДокументаДохода.ОтчетПредпринимателя.Итог("ПоТрудовымДоговорам");
			ДанныеЛиста.П000090001009 = СтрокаДокументаДохода.ОтчетПредпринимателя.Итог("ПрочиеРасходы");
		Иначе
			ДанныеЛиста.П000090001010 = СтрокаДокументаДохода.СуммаВычета;
		КонецЕсли; 
		
		ДанныеЛиста.П000090001501 = СтрокаДокументаДохода.ГодОбразованияКФХ;
		Если ГодОтчета - СтрокаДокументаДохода.ГодОбразованияКФХ <=5 Тогда
			ДанныеЛиста.П000090001601 = СтрокаДокументаДохода.СуммаДохода;
		КонецЕсли; 
		
		ИтогДоходПредпринимателя       = ИтогДоходПредпринимателя + СтрокаДокументаДохода.СуммаДохода;
		ИтогПрофессиональныйВычет      = ИтогПрофессиональныйВычет + СтрокаДокументаДохода.СуммаВычета;
		ИтогНачисленоАвансовыхПлатежей = ИтогНачисленоАвансовыхПлатежей + Окр(СтрокаДокументаДохода.НачисленоАвансовыхПлатежей, 0,1);
		ИтогУплаченоАвансовыхПлатежей  = ИтогУплаченоАвансовыхПлатежей + Окр(СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1);
		
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = АдресВРФОкато;
		СтрокаРаздела6.СуммаНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаДохода * 0.13, 0,1);
		СтрокаРаздела6.СуммаНалогаУплачено  = СтрокаДокументаДохода.СуммаНалогаУплачено;
		СтрокаРаздела6.КБК = "182 1 01 02020 01 1000 110"; //предпринимательская деятельность
		
	КонецЦикла; 
	
	// Проверяем итоги Листа В
	СчетчикСтраниц = 0;
	ВсегоСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистВ.Количество();
	Для Каждого ЛистВ Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистВ Цикл
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистВ.Данные.П000090001101 = ИтогДоходПредпринимателя;
			ЛистВ.Данные.П000090001201 = ИтогПрофессиональныйВычет;
			ЛистВ.Данные.П000090001301 = Окр(ИтогНачисленоАвансовыхПлатежей, 0,1);
			ЛистВ.Данные.П000090001401 = Окр(ИтогУплаченоАвансовыхПлатежей, 0,1);
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистВ.Данные.Удалить("П000090001101");
			ЛистВ.Данные.Удалить("П000090001201");
			ЛистВ.Данные.Удалить("П000090001301");
			ЛистВ.Данные.Удалить("П000090001401");
		КонецЕсли; 
		
	КонецЦикла; 
	
	
	ПоказателиРаздела = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	ПоказателиРаздела.П000010001003 = ИтогДоходПредпринимателя + ИтогВалютныйДоходВРублях + ИтогСуммаДохода;
	
	ПараметрыЗаполнения.ИтогиДекларации.Раздел1_010 = ПоказателиРаздела.П000010001003;
	ПараметрыЗаполнения.ИтогиДекларации.ЛистВ_3_2   = ИтогПрофессиональныйВычет;
	ПараметрыЗаполнения.ИтогиДекларации.Раздел1_030 = ПараметрыЗаполнения.ИтогиДекларации.Раздел1_010 - ПараметрыЗаполнения.ИтогиДекларации.ЛистГ_1_9;
	
	// Заполняем листы вычетов:
	ЗаполнитьЛистГ1(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистГ1Продолжение(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	// Для вычисления дальнейших показателей может потребоваться налогооблагаемая база раздела 1
	ПоказателиРаздела.П000010002003 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1.П000010116004;
	ПоказателиРаздела.П000010003003 = Макс(ПоказателиРаздела.П000010001003 - ПоказателиРаздела.П000010002003, 0);
	ЗаполнитьЛистД(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистЕ(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистЖ1(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистЖ2(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	// Лист Ж3 заполняется в процедуре ЗаполнитьЛистЖ2()
	ЗаполнитьЛистЗ(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистИ(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	
	// Заполняем Раздел 1 итогами:
	ПоказателиРаздела.П000010004003 = Макс(0, ПараметрыЗаполнения.ИтогиДекларации.ЛистВ_3_2 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистД_6_1 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЕ_4 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ1_2_8 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ2_3 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ3_3 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЗ_11_3 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_5 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_6 +
		ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_8 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_9);
		
	ПоказателиРаздела.П000010005003 = Макс(0, ПоказателиРаздела.П000010003003 - ПоказателиРаздела.П000010004003);
	ПоказателиРаздела.П000010006003 = Окр(ПоказателиРаздела.П000010005003 * 0.13, 0,1);
	ПоказателиРаздела.П000010007003 = Окр(ИтогНалогУдержан, 0,1);
	ПоказателиРаздела.П000010007503 = Окр(ИтогУплаченоАвансовыхПлатежей, 0,1);
	ПоказателиРаздела.П000010008003 = Окр(СуммаФиксированныхАвансовыхПлатежей, 0,1);
	ПоказателиРаздела.П000010009003 = Окр(ИтогНалогЗачтенВРФ, 0,1);
	
	УплаченоВсего = ПоказателиРаздела.П000010007003 
			+ ПоказателиРаздела.П000010007503 
			+ ПоказателиРаздела.П000010008003;
	Если ПоказателиРаздела.П000010006003 < УплаченоВсего Тогда
		//Сумма возврата из бюджета
		ПоказателиРаздела.П000010010003 = УплаченоВсего - ПоказателиРаздела.П000010006003;
	КонецЕсли; 
	Если ПоказателиРаздела.П000010006003 > УплаченоВсего + ПоказателиРаздела.П000010009003 Тогда
		//Сумма доплаты в бюджет
		ПоказателиРаздела.П000010011003 = ПоказателиРаздела.П000010006003 - УплаченоВсего - ПоказателиРаздела.П000010009003;
	КонецЕсли; 
	
	Если ИтогСуммаДохода <> 0 ИЛИ УплаченоВсего <> 0 ИЛИ ИтогДоходПредпринимателя <> 0 ИЛИ ИтогВалютныйДоходВРублях <> 0 Тогда
		ЗаполнитьРаздел6(ЛистыДекларации.Раздел1.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения, ТаблицаРаздела6, ПоказателиРаздела.П000010010003, ПоказателиРаздела.П000010011003);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистГ1(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистГ1.Использовать Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаВычетов = Новый ТаблицаЗначений;
	ТаблицаВычетов.Колонки.Добавить("КодДохода");
	ТаблицаВычетов.Колонки.Добавить("СуммаДохода");
	ТаблицаВычетов.Колонки.Добавить("КодВычета");
	ТаблицаВычетов.Колонки.Добавить("СуммаВычета");
	
	Для Каждого ДокументДохода Из ЛистыДекларации.ЛистГ1.СтрокиДокументов Цикл
		Если ДокументДохода.ВидДокумента = "2-НДФЛ" Тогда
			Для Каждого СтрокаНачисления Из ДокументДохода.ДваНДФЛ_Начисления Цикл
				КодДоходаДляПоиска = ?(ЗначениеЗаполнено(СтрокаНачисления.КодДохода), СтрокаНачисления.КодДохода, "+"); 
				КодВычетаДляПоиска = ?(ЗначениеЗаполнено(СтрокаНачисления.КодВычета), СтрокаНачисления.КодВычета, "+");
				Если СтрНайти("2720,2730,2760,2761,2762,2770,2790,2791,", КодДохода + ",") > 0 ИЛИ СтрНайти("501,502,503,504,506,507,508,509,", КодВычетаДляПоиска + ",") > 0 Тогда
					СтрокаВычета = ТаблицаВычетов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВычета, СтрокаНачисления);
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			КодДоходаДляПоиска = ?(ЗначениеЗаполнено(ДокументДохода.КодДохода), ДокументДохода.КодДохода, "+"); 
			КодВычетаДляПоиска = ?(ЗначениеЗаполнено(ДокументДохода.КодВычета), ДокументДохода.КодВычета, "+");
			Если СтрНайти("2720,2730,2760,2761,2762,2770,2790,2791,", КодДохода + ",") > 0 ИЛИ СтрНайти("501,502,503,504,506,507,508,509,", КодВычетаДляПоиска + ",") > 0 Тогда
				СтрокаВычета = ТаблицаВычетов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВычета, ДокументДохода);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаВычетов.Свернуть("КодДохода,КодВычета", "СуммаДохода,СуммаВычета");
	ПоказателиЛиста =  СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1;
	
	Для Каждого СтрокаВычета Из ТаблицаВычетов Цикл
		Если СтрокаВычета.КодДохода="2762" Тогда
			ПоказателиЛиста.П000010101002 = ПоказателиЛиста.П000010101002 + СтрокаВычета.СуммаДохода;
			Если СтрокаВычета.КодВычета = "508" Тогда
				ПоказателиЛиста.П000010102004 = ПоказателиЛиста.П000010102004 + СтрокаВычета.СуммаВычета;
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаВычета.КодДохода="2760" Тогда
			ПоказателиЛиста.П000010103002 = ПоказателиЛиста.П000010103002 + СтрокаВычета.СуммаДохода;
			Если СтрокаВычета.КодВычета = "503" Тогда
				ПоказателиЛиста.П000010104004 = Мин(ПоказателиЛиста.П000010104004 + СтрокаВычета.СуммаВычета, СтрокаВычета.СуммаДохода, 4000);
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаВычета.КодДохода="2761" Тогда
			ПоказателиЛиста.П000010105002 = ПоказателиЛиста.П000010105002 + СтрокаВычета.СуммаДохода;
			Если СтрокаВычета.КодВычета = "506" Тогда
				ПоказателиЛиста.П000010106004 = Мин(ПоказателиЛиста.П000010106004 + СтрокаВычета.СуммаВычета, СтрокаВычета.СуммаДохода, 4000);
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаВычета.КодДохода="2720" Тогда
			ПоказателиЛиста.П000010107002 = ПоказателиЛиста.П000010107002 + СтрокаВычета.СуммаДохода;
			Если СтрокаВычета.КодВычета = "501" Тогда
				ПоказателиЛиста.П000010108004 = Мин(ПоказателиЛиста.П000010108004 + СтрокаВычета.СуммаВычета, СтрокаВычета.СуммаДохода, 4000);
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаВычета.КодДохода="2730" Тогда
			ПоказателиЛиста.П000010109002 = ПоказателиЛиста.П000010109002 + СтрокаВычета.СуммаДохода;
			Если СтрокаВычета.КодВычета = "502" Тогда
				ПоказателиЛиста.П000010110004 = Мин(ПоказателиЛиста.П000010110004 + СтрокаВычета.СуммаВычета, СтрокаВычета.СуммаДохода, 4000);
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаВычета.КодДохода="2770" Тогда
			ПоказателиЛиста.П000010111002 = ПоказателиЛиста.П000010111002 + СтрокаВычета.СуммаДохода;
			Если СтрокаВычета.КодВычета = "504" Тогда
				ПоказателиЛиста.П000010112004 =  Мин(ПоказателиЛиста.П000010112004 +СтрокаВычета.СуммаВычета, СтрокаВычета.СуммаДохода, 4000);
			КонецЕсли; 
		КонецЕсли; 
		Если СтрокаВычета.КодДохода="2790" Тогда
			ПоказателиЛиста.П000010113002 = ПоказателиЛиста.П000010113002 + СтрокаВычета.СуммаДохода;
			Если СтрокаВычета.КодВычета = "507" Тогда
				ПоказателиЛиста.П000010114004 = Мин(ПоказателиЛиста.П000010114004 + СтрокаВычета.СуммаВычета, СтрокаВычета.СуммаДохода, 10000);
			КонецЕсли; 
		КонецЕсли; 
		
		//Если СтрокаВычета.КодВычета = "509" Тогда
		//	ПоказателиЛиста.П000010115004 = ПоказателиЛиста.П000010115004 + СтрокаВычета.СуммаВычета;
		//КонецЕсли; 
	КонецЦикла; 

	ПоказателиЛиста.П000010116004 = ПоказателиЛиста.П000010102004 + ПоказателиЛиста.П000010104004
			+ ПоказателиЛиста.П000010106004 + ПоказателиЛиста.П000010108004 + ПоказателиЛиста.П000010110004
			+ ПоказателиЛиста.П000010110004 + ПоказателиЛиста.П000010112004 + ПоказателиЛиста.П000010114004
			+ ПоказателиЛиста.П000010115004;
	
	ПараметрыЗаполнения.ИтогиДекларации.ЛистГ_1_9 = ПоказателиЛиста.П000010116004;
	ПараметрыЗаполнения.ИтогиДекларации.ЛистГ1_1_9 = ПоказателиЛиста.П000010116004;
	ПараметрыЗаполнения.ИтогиДекларации.Раздел1_030 = ПараметрыЗаполнения.ИтогиДекларации.Раздел1_010 - ПараметрыЗаполнения.ИтогиДекларации.ЛистГ_1_9;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистГ1Продолжение(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистГ1Продолжение.Использовать Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаВычетов = Новый ТаблицаЗначений;
	ТаблицаВычетов.Колонки.Добавить("ИНН");
	ТаблицаВычетов.Колонки.Добавить("КПП");
	ТаблицаВычетов.Колонки.Добавить("Месяц");
	ТаблицаВычетов.Колонки.Добавить("ДоходВсего");
	ТаблицаВычетов.Колонки.Добавить("ДоходНатуральный");
	ТаблицаВычетов.Колонки.Добавить("НеОблагается");
	
	Для Каждого СтрокаДокумента Из ЛистыДекларации.ЛистГ1Продолжение.СтрокиДокументов Цикл
		
		Если СтрокаДокумента.ВидДокумента = "2-НДФЛ" Тогда
			Для Каждого СтрокаНачисления Из СтрокаДокумента.ДваНДФЛ_Начисления Цикл
				Если СтрокаНачисления.КодДохода = "2791" ИЛИ СтрокаНачисления.КодВычета = "509" Тогда
					НоваяСтрока = ТаблицаВычетов.Добавить();
					НоваяСтрока.Месяц = СтрокаДокумента.Месяц;
					НоваяСтрока.ИНН = СтрокаДокумента.ИсточникИНН;
					НоваяСтрока.КПП = СтрокаДокумента.ИсточникКПП;
					НоваяСтрока.ДоходВсего = СтрокаНачисления.СуммаДохода;
					Если СтрокаНачисления.КодДохода = "2791" Тогда
						НоваяСтрока.ДоходНатуральный = СтрокаНачисления.СуммаДохода;
					КонецЕсли; 
					Если СтрокаНачисления.КодВычета = "509" Тогда
						НоваяСтрока.НеОблагается = СтрокаНачисления.СуммаВычета;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			Если СтрокаДокумента.КодДохода = "2791" ИЛИ СтрокаДокумента.КодВычета = "509" Тогда
				НоваяСтрока = ТаблицаВычетов.Добавить();
				НоваяСтрока.Месяц = Месяц(СтрокаДокумента.ДатаДохода);
				НоваяСтрока.ИНН = СтрокаДокумента.ИсточникИНН;
				НоваяСтрока.КПП = СтрокаДокумента.ИсточникКПП;
				НоваяСтрока.ДоходВсего = СтрокаДокумента.СуммаДохода;
				Если СтрокаДокумента.КодДохода = "2791" Тогда
					НоваяСтрока.ДоходНатуральный = СтрокаДокумента.СуммаДохода;
				КонецЕсли; 
				Если СтрокаДокумента.КодВычета = "509" Тогда
					НоваяСтрока.НеОблагается = СтрокаДокумента.СуммаВычета;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла;
	
	ТаблицаВычетов.Свернуть("ИНН,КПП,Месяц", "ДоходВсего,ДоходНатуральный,НеОблагается");
	ТаблицаВычетов.Сортировать("ИНН,КПП,Месяц");
	ТаблицаИсточников = ТаблицаВычетов.Скопировать(, "ИНН,КПП");
	ТаблицаИсточников.Свернуть("ИНН,КПП");
	
	СчетчикСтраниц = 0;
	ВсегоНеПодлежит = 0;
	ТаблицаСтраницРаздела = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ1Продолжение;
	Для Каждого СтрокаИсточника Из ТаблицаИсточников Цикл
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц > 1 Тогда
			ДобавитьВОтчетЛистГ1Продолжение(ТаблицаСтраницРаздела, СписокСохранения.ДанныеМногострочныхРазделов, ПараметрыЗаполнения);
		КонецЕсли; 
		СтрокаСтраницы = ТаблицаСтраницРаздела[СчетчикСтраниц];
		
		СтрокаСтраницы.Данные.П000025117002 = СтрокаИсточника.ИНН;
		СтрокаСтраницы.Данные.П000025118004 = СтрокаИсточника.КПП;
		
		СтрокиДоходов = ТаблицаВычетов.НайтиСтроки(Новый Структура("ИНН,КПП", СтрокаИсточника.ИНН, СтрокаИсточника.КПП));
		
		ДоходОбщий                   = 0;
		ДоходНатуральный             = 0;
		НеПодлежитСПрошлогоМесяца    = 0;
		НеПодлежитТекущегоМесяца     = 0;
		НеПодлежитНаСледующийМесяц   = 0;
		НеПодлежитВЭтомИсточнике     = 0;
		
		Для Счетчик = 1 По 12 Цикл
			СуффиксИмени = "_" + Формат(Счетчик, "ЧДЦ=0; ЧГ="); 
			
			СтрокаМесяца = ТаблицаВычетов.НайтиСтроки(Новый Структура("ИНН,КПП,Месяц", СтрокаИсточника.ИНН, СтрокаИсточника.КПП, Счетчик));
			Если СтрокаМесяца.Количество() = 0 Тогда
				СтрокаМесяца = Неопределено;
				СтрокаСтраницы.Данные["П000025119002" + СуффиксИмени] = 0;
				СтрокаСтраницы.Данные["П000025119003" + СуффиксИмени] = 0;
				СтрокаСтраницы.Данные["П000025119004" + СуффиксИмени] = НеПодлежитСПрошлогоМесяца;
				СтрокаСтраницы.Данные["П000025119005" + СуффиксИмени] = 0;
				СтрокаСтраницы.Данные["П000025119006" + СуффиксИмени] = НеПодлежитНаСледующийМесяц;
			Иначе
				СтрокаМесяца = СтрокаМесяца[0];
				СтрокаСтраницы.Данные.Вставить("П000025119002" + СуффиксИмени, СтрокаМесяца.ДоходВсего);
				СтрокаСтраницы.Данные.Вставить("П000025119003" + СуффиксИмени, СтрокаМесяца.ДоходНатуральный);
				СтрокаСтраницы.Данные.Вставить("П000025119004" + СуффиксИмени, НеПодлежитСПрошлогоМесяца);
				
				Вычет = Мин(НеПодлежитСПрошлогоМесяца + 4300, СтрокаМесяца.ДоходНатуральный);
				Доля = ?(СтрокаМесяца.ДоходВсего = 0, 0, СтрокаМесяца.ДоходНатуральный / СтрокаМесяца.ДоходВсего) * 100;
				Если Доля > 20 Тогда
					Вычет = 0;
				КонецЕсли; 
				НеПодлежитНаСледующийМесяц = НеПодлежитСПрошлогоМесяца + ?(Вычет = 0, 0, 4300) - Вычет;
				
				СтрокаСтраницы.Данные.Вставить("П000025119005" + СуффиксИмени, Вычет);
				СтрокаСтраницы.Данные.Вставить("П000025119006" + СуффиксИмени, НеПодлежитНаСледующийМесяц);
				НеПодлежитСПрошлогоМесяца = 0 + НеПодлежитНаСледующийМесяц;
			КонецЕсли; 
			НеПодлежитВЭтомИсточнике = НеПодлежитВЭтомИсточнике + СтрокаСтраницы.Данные["П000025119005" + СуффиксИмени];
		КонецЦикла;
		
		СтрокаСтраницы.Данные.П000025124002 = НеПодлежитВЭтомИсточнике; // общая сумма не подлежащая обложению
		
		ВсегоНеПодлежит = ВсегоНеПодлежит + НеПодлежитВЭтомИсточнике;
		
	КонецЦикла; 

	// Обновим итог в листе Г1
	ПоказателиЛиста =  СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистГ1;
	ПоказателиЛиста.П000010115004 = ВсегоНеПодлежит;
	ПоказателиЛиста.П000010116004 = ПоказателиЛиста.П000010102004 + ПоказателиЛиста.П000010104004
			+ ПоказателиЛиста.П000010106004 + ПоказателиЛиста.П000010108004 + ПоказателиЛиста.П000010110004
			+ ПоказателиЛиста.П000010110004 + ПоказателиЛиста.П000010112004 + ПоказателиЛиста.П000010114004
			+ ПоказателиЛиста.П000010115004;
	
	ПараметрыЗаполнения.ИтогиДекларации.ЛистГ_1_9 = ПоказателиЛиста.П000010116004;
	ПараметрыЗаполнения.ИтогиДекларации.ЛистГ1_1_9 = ПоказателиЛиста.П000010116004;
	ПараметрыЗаполнения.ИтогиДекларации.Раздел1_030 = ПараметрыЗаполнения.ИтогиДекларации.Раздел1_010 - ПараметрыЗаполнения.ИтогиДекларации.ЛистГ_1_9;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистД(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистД.Использовать Тогда
		Возврат;
	КонецЕсли; 
	
	//подготовим таблицу авторских вознаграждений:
	ТаблицаЛистаД = Новый ТаблицаЗначений;
	ТаблицаЛистаД.Колонки.Добавить("ДоходВалютный", Новый ОписаниеТипов("Булево") );
	ТаблицаЛистаД.Колонки.Добавить("НомерРаздела");
	ТаблицаЛистаД.Колонки.Добавить("СуммаДохода");
	ТаблицаЛистаД.Колонки.Добавить("СуммаВычета");
	
	ЕстьДоходыВРФ = Ложь;
	ЕстьДоходыЗаГраницей = Ложь;
	
	Для Каждого СтрокаДохода Из ЛистыДекларации.ЛистД.СтрокиДокументов Цикл
		
		Если СтрокаДохода.ВидДокумента = "2-НДФЛ" Тогда
			
			Для Каждого СтрокаНачисления Из СтрокаДохода.ДваНДФЛ_Начисления Цикл
				Если СтрокаНачисления.КодДохода = "2010" Тогда
					//По договорам ГПХ
					НовСтрока = ТаблицаЛистаД.Добавить();
					НовСтрока.НомерРаздела = 1;
					
				ИначеЕсли СтрокаНачисления.КодДохода >= "2201" И СтрокаНачисления.КодДохода <= "2209" Тогда
					//Авторские вознаграждения
					НовСтрока = ТаблицаЛистаД.Добавить();
					Если СтрокаНачисления.КодВычета = "404" Тогда
						//Фактические подтвержденные расходы
						НовСтрока.НомерРаздела = 2;
					Иначе
						//Расходы по норме
						НовСтрока.НомерРаздела = 3;
					КонецЕсли;
					
				ИначеЕсли СтрокаНачисления.КодДохода = "1540" Тогда
					//Продажа уставного капитала
					НовСтрока = ТаблицаЛистаД.Добавить();
					НовСтрока.НомерРаздела = 4;
					
				ИначеЕсли СтрокаНачисления.КодДохода = "1550" Тогда
					//Уступка прав в долевом строительстве
					НовСтрока = ТаблицаЛистаД.Добавить();
					НовСтрока.НомерРаздела = 5;
					
				Иначе
					Продолжить;
					
				КонецЕсли;
				
				НовСтрока.СуммаДохода   = СтрокаНачисления.СуммаДохода;
				НовСтрока.СуммаВычета   = СтрокаНачисления.СуммаВычета;
				НовСтрока.ДоходВалютный = Ложь;
				
				Если НовСтрока.ДоходВалютный Тогда
					ЕстьДоходыЗаГраницей = Истина;
				Иначе
					ЕстьДоходыВРФ = Истина;
				КонецЕсли; 
				
			КонецЦикла; 
			
		Иначе
			
			Если СтрокаДохода.КодДохода = "2010" Тогда
				//По договорам ГПХ
				НовСтрока = ТаблицаЛистаД.Добавить();
				НовСтрока.НомерРаздела = 1;
				
			ИначеЕсли СтрокаДохода.КодДохода >= "2201" И СтрокаДохода.КодДохода <= "2209" Тогда
				//Авторские вознаграждения
				НовСтрока = ТаблицаЛистаД.Добавить();
				Если СтрокаДохода.КодВычета = "404" Тогда
					//Фактические подтвержденные расходы
					НовСтрока.НомерРаздела = 2;
				Иначе
					//Расходы по норме
					НовСтрока.НомерРаздела = 3;
				КонецЕсли;
				
			ИначеЕсли СтрокаДохода.КодДохода = "1540" Тогда
				//Продажа уставного капитала
				НовСтрока = ТаблицаЛистаД.Добавить();
				НовСтрока.НомерРаздела = 4;
				
			ИначеЕсли СтрокаДохода.КодДохода = "1550" Тогда
				//Уступка прав в долевом строительстве
				НовСтрока = ТаблицаЛистаД.Добавить();
				НовСтрока.НомерРаздела = 5;
				
			Иначе
				Продолжить;
				
			КонецЕсли;
			
			НовСтрока.СуммаДохода   = СтрокаДохода.СуммаДохода;
			НовСтрока.СуммаВычета   = СтрокаДохода.СуммаВычета;
			НовСтрока.ДоходВалютный = СтрокаДохода.ВидДокумента = "Доход в валюте";
			
			Если НовСтрока.ДоходВалютный Тогда
				ЕстьДоходыЗаГраницей = Истина;
			Иначе
				ЕстьДоходыВРФ = Истина;
			КонецЕсли; 
			
		КонецЕсли; 
		
		
		
	КонецЦикла;

	Если ТаблицаЛистаД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаЛистаД.Свернуть("ДоходВалютный, НомерРаздела", "СуммаДохода, СуммаВычета");
	ТаблицаЛистаД.Сортировать("ДоходВалютный, НомерРаздела");
	
	СтруктураЛистов = Новый Структура;
 	Если ЕстьДоходыВРФ Тогда
		СтруктураЛистов.Вставить("ДоходыВРФ", СписокСохранения.ДанныеМногостраничныхРазделов.ЛистД[0]);
		СтруктураЛистов.ДоходыВРФ.Данные.П000012001001 = "1";
		Если ЕстьДоходыЗаГраницей Тогда
			ДобавитьВОтчетЛистД(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистД, ПараметрыЗаполнения);
			СтруктураЛистов.Вставить("ДоходыЗаГраницей", СписокСохранения.ДанныеМногостраничныхРазделов.ЛистД[1]);
			СтруктураЛистов.ДоходыЗаГраницей.Данные.П000012001001 = "2";
		КонецЕсли; 
	Иначе
		СтруктураЛистов.Вставить("ДоходыЗаГраницей", СписокСохранения.ДанныеМногостраничныхРазделов.ЛистД[0]);
		СтруктураЛистов.ДоходыЗаГраницей.Данные.П000012001001 = "2";
	КонецЕсли; 
	
	СчетчикСтраниц = 0;
	Для Каждого СтрокаДистаД Из ТаблицаЛистаД Цикл
		
		Если СтрокаДистаД.ДоходВалютный Тогда
			ДанныеЛиста = СтруктураЛистов.ДоходыЗаГраницей.Данные;
		Иначе
			ДанныеЛиста = СтруктураЛистов.ДоходыВРФ.Данные;
		КонецЕсли; 
		
		Если СтрокаДистаД.НомерРаздела = 1 Тогда
			ДанныеЛиста.П000012001010 = СтрокаДистаД.СуммаДохода;
			ДанныеЛиста.П000012001020 = Мин(СтрокаДистаД.СуммаВычета, СтрокаДистаД.СуммаДохода);
		КонецЕсли; 
	
		Если СтрокаДистаД.НомерРаздела = 2 Тогда
			ДанныеЛиста.П000012001030 = СтрокаДистаД.СуммаДохода;
			ДанныеЛиста.П000012001040 = Мин(СтрокаДистаД.СуммаВычета, СтрокаДистаД.СуммаДохода);
		КонецЕсли; 
	
		Если СтрокаДистаД.НомерРаздела = 3 Тогда
			ДанныеЛиста.П000012001050 = СтрокаДистаД.СуммаДохода;
			ДанныеЛиста.П000012001060 = Мин(СтрокаДистаД.СуммаВычета, СтрокаДистаД.СуммаДохода);
		КонецЕсли; 
	
		Если СтрокаДистаД.НомерРаздела = 4 Тогда
			ДанныеЛиста.П000012001070 = СтрокаДистаД.СуммаДохода;
			ДанныеЛиста.П000012001080 = Мин(СтрокаДистаД.СуммаВычета, СтрокаДистаД.СуммаДохода);
		КонецЕсли; 
	
		Если СтрокаДистаД.НомерРаздела = 5 Тогда
			ДанныеЛиста.П000012001090 = СтрокаДистаД.СуммаДохода;
			ДанныеЛиста.П000012001100 = Мин(СтрокаДистаД.СуммаВычета, СтрокаДистаД.СуммаДохода);
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Расчет итогов листа Д
	Для Каждого Лист Из СтруктураЛистов Цикл
		ДанныеЛиста = Лист.Значение.Данные;
		ДанныеЛиста.П000012001110 = ДанныеЛиста.П000012001020 + ДанныеЛиста.П000012001040
				+ ДанныеЛиста.П000012001060 + ДанныеЛиста.П000012001080 + ДанныеЛиста.П000012001100;
		ПараметрыЗаполнения.ИтогиДекларации.ЛистД_6_1 = ПараметрыЗаполнения.ИтогиДекларации.ЛистД_6_1 + ДанныеЛиста.П000012001110;
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьЛистЕ(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистЕ.Использовать Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПоказателей = Новый Структура;
	СчетчикПоказателей = 0;
	Для СчетчикПоказателей = 1 По 19 Цикл
		Суффикс = Формат(СчетчикПоказателей, "ЧЦ=2; ЧДЦ=0; ЧВН="); 
		СтруктураПоказателей.Вставить("Показатель" + Суффикс + "0", 0);
	КонецЦикла; 
	СтруктураПоказателей.Вставить("ВсегоДоход", 0);
	СтруктураПоказателей.Вставить("ВсегоВычет", 0);
	
	Для Каждого СтрокаДохода Из ЛистыДекларации.ЛистЕ.СтрокиДокументов Цикл
		Если СтрокаДохода.ВидДокумента = "2-НДФЛ" Тогда
			Для Каждого СтрокаНачисления Из СтрокаДохода.ДваНДФЛ_Начисления Цикл
				ОпределитьПоказательЛистЕ(СтруктураПоказателей, СтрокаНачисления.КодДохода, СтрокаНачисления.СуммаДохода, СтрокаНачисления.КодВычета, СтрокаНачисления.СуммаВычета);
			КонецЦикла; 
			Для Каждого СтрокаНачисления Из СтрокаДохода.ДваНДФЛ_Вычеты Цикл
				ОпределитьПоказательЛистЕ(СтруктураПоказателей, Неопределено, 0, СтрокаНачисления.КодВычета, СтрокаНачисления.СуммаВычета);
			КонецЦикла; 
		Иначе
			ОпределитьПоказательЛистЕ(СтруктураПоказателей, СтрокаДохода.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.КодВычета, СтрокаДохода.СуммаВычета);
		КонецЕсли; 
	КонецЦикла; 
	
	Если СтруктураПоказателей.ВсегоДоход = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЛиста = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ;
	
	ДанныеЛиста.П000014001002 = СтруктураПоказателей.Показатель010;  //п1.1.1
	ДанныеЛиста.П000014002004 = СтруктураПоказателей.Показатель020;  //п1.1.2
	
	ДанныеЛиста.П000014003002 = СтруктураПоказателей.Показатель030;  //п1.2.1
	ДанныеЛиста.П000014004004 = СтруктураПоказателей.Показатель040;  //п1.2.2

	ДанныеЛиста.П000014005002 = ДанныеЛиста.П000014001002 + ДанныеЛиста.П000014003002; // п1.3.1 = п1.1.1 + п1.2.1
	ДанныеЛиста.П000014006004 = Мин(1000000, ДанныеЛиста.П000014002004 + ДанныеЛиста.П000014004004); // п1.3.2 = п1.1.2 + п1.2.2, но не более 1 000 000 руб.)
	
	ДанныеЛиста.П000014007002 = СтруктураПоказателей.Показатель070;  //п1.4.1
	ДанныеЛиста.П000014008004 = Мин(СтруктураПоказателей.Показатель080, ДанныеЛиста.П000014007002);  //п1.4.2 но не более п1.4.1

	ДанныеЛиста.П000014009002 = ДанныеЛиста.П000014005002 + ДанныеЛиста.П000014007002; // п1.5.1 = п1.3.1 + п1.4.1
	ДанныеЛиста.П000014010004 = ДанныеЛиста.П000014006004 + ДанныеЛиста.П000014008004; // п1.5.2 = п1.3.2 + п1.4.2
	
	ДанныеЛиста.П000014011002 = СтруктураПоказателей.Показатель110; //п.2.1.1
	ДанныеЛиста.П000014012004 = СтруктураПоказателей.Показатель120; //п.2.1.2

	ДанныеЛиста.П000014013002 = СтруктураПоказателей.Показатель130; //п.2.2.1
	ДанныеЛиста.П000014014004 = СтруктураПоказателей.Показатель140; //п.2.2.2

	ДанныеЛиста.П000014015002 = ДанныеЛиста.П000014011002 + ДанныеЛиста.П000014013002; // п2.3.1 = п2.1.1 + п2.2.1
	ДанныеЛиста.П000014016004 = ДанныеЛиста.П000014012004 + ДанныеЛиста.П000014014004; // п2.3.2 = п2.2.2 + п2.2.2
	
	ДанныеЛиста.П000014017002 = СтруктураПоказателей.Показатель170;  //п.3.1.1
	ДанныеЛиста.П000014018004 = Мин(СтруктураПоказателей.Показатель180, ДанныеЛиста.П000014017002); //п.3.1.2 но не более 3.1.1
	
	// Расчет итогов листа Е
	ДанныеЛиста.П000014019002 = ДанныеЛиста.П000014010004 + ДанныеЛиста.П000014016004 + ДанныеЛиста.П000014018004;// р4 = п1.5.2 + п2.3.2 + п3.1.2
	
	ПараметрыЗаполнения.ИтогиДекларации.ЛистЕ_4 = ДанныеЛиста.П000014019002;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПоказательЛистЕ(СтруктураПоказателей, КодДохода, СуммаДохода, КодВычета, СуммаВычета)

	// продажа недвижимости (кроме долей): КодДохода = "1510", коды вычетов: "301" или "305Н"
	Если КодДохода = "1510" Тогда
		Если КодВычета = "301" Тогда
			СтруктураПоказателей.Показатель010 = СтруктураПоказателей.Показатель010 + СуммаДохода;
			СтруктураПоказателей.Показатель020 = СтруктураПоказателей.Показатель020 + СуммаВычета;
		ИначеЕсли КодВычета = "305Н" Тогда
			СтруктураПоказателей.Показатель070 = СтруктураПоказателей.Показатель070 + СуммаДохода;
			СтруктураПоказателей.Показатель080 = СтруктураПоказателей.Показатель080 + СуммаВычета;
		КонецЕсли; 
		СтруктураПоказателей.ВсегоДоход = СтруктураПоказателей.ВсегоДоход + СуммаДохода;
		СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
	КонецЕсли; 

	// продажа долей недвижимости: КодДохода = "1511", коды вычетов: "313" или "305Н"
	Если КодДохода = "1511" Тогда
		Если КодВычета = "301" Тогда
			СтруктураПоказателей.Показатель030 = СтруктураПоказателей.Показатель030 + СуммаДохода;
			СтруктураПоказателей.Показатель040 = СтруктураПоказателей.Показатель040 + СуммаВычета;
		ИначеЕсли КодВычета = "305Н" Тогда
			СтруктураПоказателей.Показатель070 = СтруктураПоказателей.Показатель070 + СуммаДохода;
			СтруктураПоказателей.Показатель080 = СтруктураПоказателей.Показатель080 + СуммаВычета;
		КонецЕсли; 
		СтруктураПоказателей.ВсегоДоход = СтруктураПоказателей.ВсегоДоход + СуммаДохода;
		СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
	КонецЕсли; 

	// продажа прочего имущества, кроме ЦБ: КодДохода = "1520", коды вычетов: "303" или "305"
	Если КодДохода = "1520" Тогда
		Если КодВычета = "303" Тогда
			СтруктураПоказателей.Показатель110 = СтруктураПоказателей.Показатель110 + СуммаДохода;
			СтруктураПоказателей.Показатель120 = СтруктураПоказателей.Показатель120 + СуммаВычета;
		ИначеЕсли КодВычета = "305" Тогда
			СтруктураПоказателей.Показатель130 = СтруктураПоказателей.Показатель130 + СуммаДохода;
			СтруктураПоказателей.Показатель140 = СтруктураПоказателей.Показатель140 + СуммаВычета;
		КонецЕсли; 
		СтруктураПоказателей.ВсегоДоход = СтруктураПоказателей.ВсегоДоход + СуммаДохода;
		СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
	КонецЕсли; 

	// имущество, изъятое для государственных или муниципальных нужд: КодДохода = "4900"
	Если КодДохода = "4900" Тогда
		СтруктураПоказателей.Показатель170 = СтруктураПоказателей.Показатель170 + СуммаДохода;
		СтруктураПоказателей.Показатель180 = СтруктураПоказателей.Показатель180 + СуммаВычета;
		СтруктураПоказателей.ВсегоДоход = СтруктураПоказателей.ВсегоДоход + СуммаДохода;
		СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
	КонецЕсли; 
	
	// в справке 2-НДФЛ вычет может быть указан отдельно от суммы дохода
	Если НЕ ЗначениеЗаполнено(КодДохода) Тогда
		Если КодВычета = "301" Тогда
			СтруктураПоказателей.Показатель020 = СтруктураПоказателей.Показатель020 + СуммаВычета;
			СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
		ИначеЕсли КодВычета = "313" Тогда
			СтруктураПоказателей.Показатель040 = СтруктураПоказателей.Показатель040 + СуммаВычета;
			СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
		ИначеЕсли КодВычета = "303" Тогда
			СтруктураПоказателей.Показатель120 = СтруктураПоказателей.Показатель120 + СуммаВычета;
			СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
		ИначеЕсли КодВычета = "305" Тогда
			СтруктураПоказателей.Показатель140 = СтруктураПоказателей.Показатель140 + СуммаВычета;
			СтруктураПоказателей.ВсегоВычет = СтруктураПоказателей.ВсегоВычет + СуммаВычета;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистЖ1(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистЖ1.Использовать Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаВычетов = ЛистыДекларации.ЛистЖ1.СтрокиДокументов[0];
	
	ТаблицаРасчета = Неопределено;
	РассчитатьОбщуюСуммуСтандартногоВычета(ТаблицаРасчета);
	
	ДанныеЛиста = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ1;
	
	МесяцевДо40  = 12;
	МесяцевДо280 = 12;
	
	Сумма24 = 0; //п2.4 - стандартный вычет на ребенка
	Сумма25 = 0; //п2.5 - стандартный вычет на ребенка единственному родителю
	Сумма26 = 0; //п2.6 - стандартный вычет на ребенка-инвалида
	Сумма27 = 0; //п2.7 - стандартный вычет на ребенка-инвалида единственному родителю
	
	Для СчетчикМесяцев = 1 По 12 Цикл
		
		МесяцСтрокой = Формат(СчетчикМесяцев, "ЧЦ=2; ЧВН=");
		СтрокаРасчета = ТаблицаРасчета[СчетчикМесяцев - 1];
		СуммаДоходаНарастающимИтогом = СтрокаРасчета.СуммаДоходаНарастающимИтогом;
		ДанныеЛиста["П0000200" + МесяцСтрокой + "002"] = СуммаДоходаНарастающимИтогом;
		
		Если ГодОтчета < 2012 И СуммаДоходаНарастающимИтогом > 40000 И МесяцевДо40 = 12 Тогда
			МесяцевДо40 = СчетчикМесяцев - 1;
		КонецЕсли; 
		Если ГодОтчета < 2012 И СтрокаРасчета.НаРаботника = 400 И СуммаДоходаНарастающимИтогом <= 40000 Тогда
			ДанныеЛиста.П000020017004 = ДанныеЛиста.П000020017004 + СтрокаРасчета.НаРаботника;
		ИначеЕсли СтрокаРасчета.НаРаботника = 500 И СуммаДоходаНарастающимИтогом > 0 Тогда
			ДанныеЛиста.П000020016004 = ДанныеЛиста.П000020016004 + СтрокаРасчета.НаРаботника;
		ИначеЕсли СтрокаРасчета.НаРаботника = 3000 И СуммаДоходаНарастающимИтогом > 0 Тогда
			ДанныеЛиста.П000020015004 = ДанныеЛиста.П000020015004 + СтрокаРасчета.НаРаботника;
		КонецЕсли; 
		
		Если СтрокаРасчета.СуммаДохода > 0 Тогда
			
			Если СуммаДоходаНарастающимИтогом > 280000 И МесяцевДо280 = 12 Тогда
				МесяцевДо280 = СчетчикМесяцев - 1;
			КонецЕсли; 
			
			Если СуммаДоходаНарастающимИтогом <= 280000 Тогда
				
				Если СтрокаРасчета.ЕдинственныйРодитель = 1 Тогда
					// Оба родителя
					Если СтрокаРасчета.ВычетНаПервогоРебенка = 1400 Тогда
						Сумма24 = Сумма24 + 1400;
					ИначеЕсли СтрокаРасчета.ВычетНаПервогоРебенка = 3000 Тогда
						Сумма26 = Сумма26 + 3000;
					КонецЕсли; 
					Если СтрокаРасчета.ВычетНаВторогоРебенка = 1400 Тогда
						Сумма24 = Сумма24 + 1400;
					ИначеЕсли СтрокаРасчета.ВычетНаВторогоРебенка = 3000 Тогда
						Сумма26 = Сумма26 + 3000;
					КонецЕсли; 
					Сумма24 = Сумма24 + 3000 * СтрокаРасчета.ЧислоДетейСТретьего;
					Сумма26 = Сумма26 + 3000 * СтрокаРасчета.ЧислоДетейИнвалидов;
					
				Иначе
					// единственный родитель
					Если СтрокаРасчета.ВычетНаПервогоРебенка = 1400 Тогда
						Сумма25 = Сумма25 + 2 * 1400;
					ИначеЕсли СтрокаРасчета.ВычетНаПервогоРебенка = 3000 Тогда
						Сумма27 = Сумма27 + 2 * 3000;
					КонецЕсли; 
					Если СтрокаРасчета.ВычетНаВторогоРебенка = 1400 Тогда
						Сумма25 = Сумма25 + 2 * 1400;
					ИначеЕсли СтрокаРасчета.ВычетНаВторогоРебенка = 3000 Тогда
						Сумма27 = Сумма27 + 2 * 3000;
					КонецЕсли; 
					Сумма25 = Сумма25 + 2 * 3000 * СтрокаРасчета.ЧислоДетейСТретьего;
					Сумма27 = Сумма27 + 2 * 3000 * СтрокаРасчета.ЧислоДетейИнвалидов;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		ИначеЕсли СтрокаРасчета.СуммаДохода = 0 Тогда
			МесяцевДо280 = МесяцевДо280 - 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ГодОтчета < 2012 Тогда
		ДанныеЛиста.П000020013002 = МесяцевДо40;
	Иначе
		ДанныеЛиста.П000020013002 = 0;
	КонецЕсли; 
	ДанныеЛиста.П000020014004 = МесяцевДо280;
	
	ДанныеЛиста.П000020018004 = Сумма24; //п2.4 - стандартный вычет на ребенка
	ДанныеЛиста.П000020019004 = Сумма25;
	ДанныеЛиста.П000020020004 = Сумма26;
	ДанныеЛиста.П000020021004 = Сумма27;
	
	ДанныеЛиста.П000020022004 = ДанныеЛиста.П000020015004 + ДанныеЛиста.П000020016004 + ДанныеЛиста.П000020017004
			+ ДанныеЛиста.П000020018004 + ДанныеЛиста.П000020019004 + ДанныеЛиста.П000020020004 + ДанныеЛиста.П000020021004;

	ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ1_2_8 = ДанныеЛиста.П000020022004;
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьЛистЖ2(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистЖ2.Использовать 
		ИЛИ ЛистыДекларации.ЛистЖ2.СтрокиДокументов.Количество() = 0 Тогда //Лист Ж2 модет быть заполнен только по пенсионным взносам
		Возврат;
	КонецЕсли; 
	
	//В абз. 2 п. 19.3 Порядка определено, что значение показателя пп. 1.1 п. 1 листа Ж2 
	//		"Расчет социальных налоговых вычетов" формы декларации не должно превышать 25% от общей суммы дохода, 
	//		полученной налогоплательщиком в налоговом периоде и облагаемой по ставке 13%, то есть не более 25% 
	//		от общей суммы дохода по коду строки 010 разд. 1 формы декларации.
	//Однако рассмотренный выше алгоритм расчета предельного размера вычета не учитывает действующую редакцию 
	//		НК РФ, которой определено, что 25%-ный норматив следует определять исходя из полученного дохода, 
	//		подлежащего налогообложению.
	//Названный показатель отражается в строке 030 разд. 1 формы декларации, которая рассчитывается путем 
	//		вычитания из показателя по строке 010 показателя по строке 020 (п. 4.4 Порядка). 
	//		А в строке 020, в свою очередь, отражается сумма доходов, не подлежащих налогообложению, 
	//		в частности, в соответствии с абз. 7 п. 8 ст. 217 НК РФ (п. 4.3 Порядка).

	
	ВычетыЛиста = ЛистыДекларации.ЛистЖ2.СтрокиДокументов[0].ПрочиеСоциальныеВычеты;
	Если ВычетыЛиста = Неопределено ИЛИ ВычетыЛиста.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЛиста = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЖ2;
	ДанныеРаздела1 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаРаздел1;
	
	ДанныеЛиста.П000021001004 = Мин(ДанныеРаздела1.П000010003003 * 0.25, ВычетыЛиста[0].СуммаВычета); //п1.1 = не более 25% от суммы дохода (Раздел 1, строка 010 или 030!)
	ДанныеЛиста.П000021002004 = ВычетыЛиста[1].СуммаВычета; //п1.2 обучение детей
	ДанныеЛиста.П000021003004 = ВычетыЛиста[2].СуммаВычета; //п1.3 дорогостоящее лечение
	ДанныеЛиста.П000021004004 = ДанныеЛиста.П000021001004 + ДанныеЛиста.П000021002004 + ДанныеЛиста.П000021003004; //п1.4 = Итог части 1 
	
	ДанныеЛиста.П000021005004 = ВычетыЛиста[3].СуммаВычета; //п2.1 свое обучение
	ДанныеЛиста.П000021006004 = ВычетыЛиста[4].СуммаВычета; //п2.2 приобретение медикаментов
	ДанныеЛиста.П000021007004 = ВычетыЛиста[5].СуммаВычета; //п2.3 добровольное страхование
	
	// Суммы пенсионных взносов заполняются из листа Ж3
	СуммаВычетаОтАгента = 0;
	ЗаполнитьЛистЖ3(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения, ДанныеЛиста, СуммаВычетаОтАгента);
	
	ДанныеЛиста.П000021010004 = ВычетыЛиста[6].СуммаВычета; //п2.6 дополнительные пенсионные взносы
	
	ДанныеЛиста.П000021011004 = Мин(120000, ДанныеЛиста.П000021005004 + ДанныеЛиста.П000021006004 + ДанныеЛиста.П000021007004
			 + ДанныеЛиста.П000021008004 + ДанныеЛиста.П000021009004 + ДанныеЛиста.П000021010004) - СуммаВычетаОтАгента; //п2.7 Итоги раздела 2, но не более 120000, за минусом вычета, предоставленного налоговым агентом по взносам в ПФ
	
	ДанныеЛиста.П000021012004 = ДанныеЛиста.П000021004004 + ДанныеЛиста.П000021011004; // Раздел 3 = п1.4 + 2.7

	ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ2_3 = ДанныеЛиста.П000021012004;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистЖ3(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения, ДанныеЛистаЖ2, СуммаВычетаОтАгента)

	ДанныеЛистаЖ2.П000021008004 = 0;
	ДанныеЛистаЖ2.П000021009004 = 0;
	Если НЕ ЛистыДекларации.ЛистЖ3.Использовать 
		ИЛИ ЛистыДекларации.ЛистЖ3.СтрокиДокументов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли; 
	
	СтрокиВычетов = ЛистыДекларации.ЛистЖ3.СтрокиДокументов;
	
	//Определим количество листов, которые потребуются для заполнения:
	СтраницыЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистЖ3;
	СписокНПФ = Новый Массив;
	СписокСО  = Новый Массив;
	Для Каждого СтрокаДокумента Из СтрокиВычетов Цикл
		Если СтрокаДокумента.НегосударственныйФонд = 1 Тогда
			СписокНПФ.Добавить(СтрокаДокумента);
		Иначе
			СписокСО.Добавить(СтрокаДокумента);
		КонецЕсли; 
	КонецЦикла; 
	
	ВсегоСтраниц = Макс(СписокНПФ.Количество(), СписокСО.Количество());
	Для СчетчикСтраниц = 2 По ВсегоСтраниц Цикл
		ДобавитьВОтчетЛистЖ3(СтраницыЛиста, ПараметрыЗаполнения);
	КонецЦикла; 
	
	СуммаНПФ = 0;
	СуммаСО = 0;
	СуммаВычетаОтАгента = 0;
	
	Для СчетчикСтраниц = 0 По ВсегоСтраниц - 1 Цикл
		
		ДанныеСтраницы = СтраницыЛиста[СчетчикСтраниц].Данные;
		
		Если СписокНПФ.Количество() >= СчетчикСтраниц + 1 Тогда
			СтрокаДокумента = СписокНПФ[СчетчикСтраниц];
			ДанныеСтраницы.П000022001001 = СтрокаДокумента.ЗастрахованноеЛицо;
			ДанныеСтраницы.П000022002001 = СтрокаДокумента.ИсточникИНН;
			ДанныеСтраницы.П000022003001 = СтрокаДокумента.ИсточникКПП;
			ДанныеСтраницы.П000022004001 = СтрокаДокумента.ИсточникНаименование;
			ДанныеСтраницы.П000022005001 = СтрокаДокумента.ДатаДоговора;
			ДанныеСтраницы.П000022006001 = СтрокаДокумента.НомерДоговора;
			ДанныеСтраницы.П000022007001 = СтрокаДокумента.СуммаВзносов;
			ДанныеСтраницы.П000022008001 = СтрокаДокумента.СуммаВзносов;
			ДанныеСтраницы.П000022009001 = СтрокаДокумента.СуммаВычетаПредоставленнаяАгентом;
			СуммаВычетаОтАгента = СуммаВычетаОтАгента + ДанныеСтраницы.П000022009001;
			СуммаНПФ = СуммаНПФ + СтрокаДокумента.СуммаВзносов;
		КонецЕсли; 
		
		Если СписокСО.Количество() >= СчетчикСтраниц + 1 Тогда
			СтрокаДокумента = СписокСО[СчетчикСтраниц];
			ДанныеСтраницы.П000022011001 = СтрокаДокумента.ЗастрахованноеЛицо;
			ДанныеСтраницы.П000022012001 = СтрокаДокумента.ИсточникИНН;
			ДанныеСтраницы.П000022013001 = СтрокаДокумента.ИсточникКПП;
			ДанныеСтраницы.П000022014001 = СтрокаДокумента.ИсточникНаименование;
			ДанныеСтраницы.П000022015001 = СтрокаДокумента.ДатаДоговора;
			ДанныеСтраницы.П000022016001 = СтрокаДокумента.НомерДоговора;
			ДанныеСтраницы.П000022017001 = СтрокаДокумента.СуммаВзносов;
			ДанныеСтраницы.П000022018001 = СтрокаДокумента.СуммаВзносов;
			ДанныеСтраницы.П000022019001 = СтрокаДокумента.СуммаВычетаПредоставленнаяАгентом;
			СуммаВычетаОтАгента = СуммаВычетаОтАгента + ДанныеСтраницы.П000022019001;
			СуммаСО = СуммаСО + СтрокаДокумента.СуммаВзносов;
		КонецЕсли;
		
		//Если страница не последняя, удалим итоги:
		Если СчетчикСтраниц = ВсегоСтраниц - 1 Тогда
			ДанныеСтраницы.Удалить("П000022010001");
			ДанныеСтраницы.Удалить("П000022020001");
			ДанныеСтраницы.Удалить("П000022021001");
		Иначе
			ДанныеСтраницы.П000022010001 = СуммаНПФ;
			ДанныеСтраницы.П000022020001 = СуммаСО;
			ДанныеСтраницы.П000022021001 = СуммаВычетаОтАгента;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ДанныеЛистаЖ2.П000021008004 = СуммаСО;
	ДанныеЛистаЖ2.П000021009004 = СуммаНПФ;

	ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ3_3 = СуммаВычетаОтАгента;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистЗ(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистЗ.Использовать 
		ИЛИ ЛистыДекларации.ЛистЗ.СтрокиДокументов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли; 

	ДанныеЛистаЗ = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ;
	ДанныеЛистаЗПродолжение = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение;
	
	Для Каждого СтрокаДокумента Из ЛистыДекларации.ЛистЗ.СтрокиДокументов Цикл
		
		Если СтрокаДокумента.ВидДокумента = "2-НДФЛ" Тогда
			Для Каждого СтрокаНачисления Из СтрокаДокумента.ДваНДФЛ_Начисления Цикл
				ЗаполнитьЛистЗПоказателямиДохода(ДанныеЛистаЗ, ДанныеЛистаЗПродолжение, СтрокаНачисления);
			КонецЦикла; 
		ИначеЕсли СтрокаДокумента.ВидДокумента = "Убыток по ЦБ за прошлые годы" Тогда
			ДанныеЛистаЗПродолжение.П000022037001 = СтрокаДокумента.ПрошлыйУбытокПоЦБ;
			ДанныеЛистаЗПродолжение.П000022038001 = СтрокаДокумента.ПрошлыйУбытокПоСрочнымСделкам;
		Иначе
			ЗаполнитьЛистЗПоказателямиДохода(ДанныеЛистаЗ, ДанныеЛистаЗПродолжение, СтрокаДокумента);
		КонецЕсли; 
		
	КонецЦикла;
	
	РассчитатьЛистЗ(ДанныеЛистаЗ, ДанныеЛистаЗПродолжение);
	
	ПараметрыЗаполнения.ИтогиДекларации.ЛистЗ_11_3 = ДанныеЛистаЗПродолжение.П000022043001;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистЗПоказателямиДохода(ДанныеЛистаЗ, ДанныеЛистаЗПродолжение, СтрокаДохода)

	Если СтрНайти("1530,", СтрокаДохода.КодДохода + ",") И СтрокаДохода.СуммаДохода + СтрокаДохода.СуммаВычета > 0 Тогда
		ДанныеЛистаЗ.П000021001001 = ДанныеЛистаЗ.П000021001001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗ.П000021002001 = ДанныеЛистаЗ.П000021002001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 
	Если СтрокаДохода.КодДохода = "1536" И СтрокаДохода.СуммаДохода + СтрокаДохода.СуммаВычета > 0 Тогда
		ДанныеЛистаЗ.П000021008001 = ДанныеЛистаЗ.П000021008001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗ.П000021009001 = ДанныеЛистаЗ.П000021009001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 
	Если СтрокаДохода.КодДохода = "1531" И СтрокаДохода.СуммаДохода + СтрокаДохода.СуммаВычета > 0 Тогда
		ДанныеЛистаЗ.П000021012001 = ДанныеЛистаЗ.П000021012001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗ.П000021013001 = ДанныеЛистаЗ.П000021013001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 
	Если СтрокаДохода.КодДохода = "1532" И СтрокаДохода.СуммаДохода + СтрокаДохода.СуммаВычета > 0 Тогда
		ДанныеЛистаЗ.П000021015001 = ДанныеЛистаЗ.П000021015001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗ.П000021016001 = ДанныеЛистаЗ.П000021016001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 
	Если СтрокаДохода.КодДохода = "1535" И СтрокаДохода.СуммаДохода + СтрокаДохода.СуммаВычета > 0 Тогда
		ДанныеЛистаЗ.П000021022001 = ДанныеЛистаЗ.П000021022001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗ.П000021023001 = ДанныеЛистаЗ.П000021023001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 
	Если СтрокаДохода.КодДохода = "1533" И СтрокаДохода.СуммаДохода + СтрокаДохода.СуммаВычета > 0 Тогда
		ДанныеЛистаЗПродолжение.П000022028001 = ДанныеЛистаЗПродолжение.П000022028001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗПродолжение.П000022029001 = ДанныеЛистаЗПродолжение.П000022029001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 
	Если СтрНайти("1537,1539,1541,", СтрокаДохода.КодДохода + ",") И СтрокаДохода.СуммаДохода + СтрокаДохода.СуммаВычета > 0 Тогда
		ДанныеЛистаЗПродолжение.П000022031001 = ДанныеЛистаЗПродолжение.П000022031001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗПродолжение.П000022032001 = ДанныеЛистаЗПродолжение.П000022032001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 
	Если СтрокаДохода.КодДохода = "1538" И СтрокаДохода.СуммаДохода > 0 Тогда
		ДанныеЛистаЗПродолжение.П000022034001 = ДанныеЛистаЗПродолжение.П000022034001 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаЗПродолжение.П000022035001 = ДанныеЛистаЗПродолжение.П000022035001 + СтрокаДохода.СуммаВычета;
		ВыводитьЛистЗ = Истина;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура РассчитатьЛистЗ(ДанныеЛистаЗ, ДанныеЛистаЗПродолжение)

			Области = ДанныеЛистаЗ;
			ОбластиПродолжения = ДанныеЛистаЗПродолжение;
			
			 //Считаем результаты по разделам ЦБ и ФИСС, обращающимся на ОРЦБ:
			Результат1 = Области.П000021001001 - Области.П000021002001;
			Результат2 = Области.П000021008001 - Области.П000021009001;
			Результат3 = Области.П000021012001 - Области.П000021013001;
			Результат4 = Области.П000021015001 - Области.П000021016001;
			Результат5 = Области.П000021022001 - Области.П000021023001;
			Результат6 = ОбластиПродолжения.П000022028001 - ОбластиПродолжения.П000022029001;
			Результат7 = ОбластиПродолжения.П000022031001 - ОбластиПродолжения.П000022032001;
			Результат8 = ОбластиПродолжения.П000022034001 - ОбластиПродолжения.П000022035001;
			
			//Запомним суммы убытков прошлых лет:
			ПрошлыйУбытокПоЦБ   = ОбластиПродолжения.П000022037001;
			ПрошлыйУбытокПоФИСС = ОбластиПродолжения.П000022038001;
			
			//Порядок расчета разделов отличается от их порядка в бланке.
			
			//Первыми расчитаем разделы, которые не участвуют в расчетах прочих разделов:
			//Раздел 3
			Области.П000021014001 = ?(Результат3 > 0, Результат3, 0);
			Результат3 = Области.П000021014001;
			//Раздел 6
			ОбластиПродолжения.П000022030001 = ?(Результат6 > 0, Результат6, 0);
			Результат6 = ОбластиПродолжения.П000022030001;
			//Раздел 7
			ОбластиПродолжения.П000022033001 = ?(Результат7 > 0, Результат7, 0);
			Результат7 = ОбластиПродолжения.П000022033001;
			//Раздел 8
			ОбластиПродолжения.П000022036001 = ?(Результат8 > 0, Результат8, 0);
			Результат8 = ОбластиПродолжения.П000022036001;
			
			//Раздел 2
			Если Результат2 > 0 Тогда //Прибыль
				Области.П000021011001 = Результат2;
			ИначеЕсли Результат2 < 0 Тогда //Убыток
				Области.П000021010001 = -Результат2;
			КонецЕсли; 
			
			//Далее расчитываем взаимоувязанные разделы:
			
			// Сначала расскладываем по ячейкам суммы убытков:
			Если Результат1 < 0 Тогда
				Области.П000021003001 = -Результат1;
			КонецЕсли; 
			Если Результат4 < 0 Тогда
				Области.П000021017001 = -Результат4;
			КонецЕсли; 
			Если Результат5 < 0 Тогда
				Области.П000021024001 = -Результат5;
			КонецЕсли; 
			
			// Теперь обрабатываем вычеты из сумм доходов в тех разделах, где есть доходы:
			// ВНИМАНИЕ! Обрабатывать доходы нужно в несколько итераций, чтобы правильно распределить убытки прошлых лет !
			
			Если Результат1 > 0 Тогда
				
				// Сперва уменьшаем на сумму убытка из раздела 2:
				Если Результат2 < 0 Тогда
					Области.П000021005001 = Мин(-Результат2, Результат1);
					Результат1                     = Результат1 - Области.П000021005001;
				КонецЕсли; 
				
				// Если остался доход - уменьшаем на сумму ПрошлыйУбытокПоЦБ:
				Если Результат1 > 0 И ПрошлыйУбытокПоЦБ > 0 Тогда
					Области.П000021006001 = Мин(Результат1, ПрошлыйУбытокПоЦБ);
					ПрошлыйУбытокПоЦБ              = ПрошлыйУбытокПоЦБ - Области.П000021006001;
					Результат1                     = Результат1 - Области.П000021006001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021020001 = Мин(Результат4, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021020001;
					Результат4                     = Результат4          - Области.П000021020001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Результат5 > 0 Тогда
				
				// Делаем вычет на величину ПрошлыйУбытокПоФИСС:
				Если ПрошлыйУбытокПоФИСС > 0 Тогда
					Области.П000021026001 = Мин(Результат5, ПрошлыйУбытокПоФИСС);
					ПрошлыйУбытокПоФИСС            = ПрошлыйУбытокПоФИСС - Области.П000021026001;
					Результат5                     = Результат5          - Области.П000021026001;
				КонецЕсли; 
				
			КонецЕсли; 
			
			// Убытки прошлых лет распределены. Теперь распределяем убытки текущего периода:
			Если Результат5 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021018001.Значение = Мин(Результат5, -Результат4);
					Результат4 = Результат4 + Области.П000021018001;
					Результат5 = Результат5 - Области.П000021018001;
				КонецЕсли; 
				
				//Доход по разделу 5:
				Области.П000021027001 = Результат5;
				
			КонецЕсли; 
			
			Если Результат4 > 0 Тогда
				
				Если Результат1 < 0 Тогда
					Области.П000021004001 = Мин(Результат4, -Результат1);
					Результат1 = Результат1 + Области.П000021004001;
					Результат4 = Результат4 - Области.П000021004001;
				КонецЕсли; 
				
				Если Результат5 < 0 Тогда
					Области.П000021025001 = Мин(Результат4, -Результат5);
					Результат5 = Результат5 + Области.П000021025001;
					Результат4 = Результат4 - Области.П000021025001;
				КонецЕсли; 
				
				//Доход по разделу 4:
				Области.П000021021001 = Результат4;
				
			КонецЕсли; 
			
			Если Результат1 > 0 Тогда
				
				Если Результат4 < 0 Тогда
					Области.П000021019001 = Мин(Результат1, -Результат4);
					Результат4 = Результат4 + Области.П000021019001;
					Результат1 = Результат1 - Области.П000021019001;
				КонецЕсли; 
				
				//Доход по разделу 1:
				Области.П000021007001 = Результат1;
				
			КонецЕсли; 
			
			
			//Считаем итоги:
			// Расчет п.10 (продолжение листа З)
			РезультатП390 = ОбластиПродолжения.П000022037001 
			+ Области.П000021003001
			- Области.П000021004001 
			- Области.П000021006001;
			ОбластиПродолжения.П000022039001 = Макс(РезультатП390, 0);
			
			РезультатП400 = ОбластиПродолжения.П000022038001 //9.2
			+ Области.П000021017001 //4.3
			- Области.П000021018001 //4.4
			- Области.П000021019001 //4.5
			- Области.П000021020001 //4.6
			+ Области.П000021024001 //5.3
			- Области.П000021025001 //5.4
			- Области.П000021026001 //5.5
			;
			ОбластиПродолжения.П000022040001 = Макс(РезультатП400, 0);
			
			// Расчет п.11 (продолжение листа З)
			ОбластиПродолжения.П000022041001 = Области.П000021001001 //1.1
			+ Области.П000021008001 //2.1
			+ Области.П000021012001 //3.1
			+ Области.П000021015001 //4.1
			+ Области.П000021022001 //5.1
			+ ОбластиПродолжения.П000022028001 //6.1
			+ ОбластиПродолжения.П000022031001 //7.1
			+ ОбластиПродолжения.П000022034001 //8.1
			;
			ОбластиПродолжения.П000022042001 = Области.П000021007001 //1.7
			+ Области.П000021011001 //2.4
			+ Области.П000021014001 //3.3
			+ Области.П000021021001 //4.7
			+ Области.П000021027001 //5.6
			+ ОбластиПродолжения.П000022030001 //6.3
			+ ОбластиПродолжения.П000022033001 //7.3
			+ ОбластиПродолжения.П000022036001 //8.3
			;
			ОбластиПродолжения.П000022043001 = ОбластиПродолжения.П000022041001 - ОбластиПродолжения.П000022042001;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистИ(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистИ.Использовать 
		ИЛИ ЛистыДекларации.ЛистИ.СтрокиДокументов.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли; 
	
	ДанныеЛиста = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ;
	СтрокаДокумента = ЛистыДекларации.ЛистИ.СтрокиДокументов[0];
	
	ДанныеЛиста.П000023001001 = СтрокаДокумента.ЖильеНаименование;
	ДанныеЛиста.П000023002001 = СтрокаДокумента.ЖильеВидСобственности;
	ДанныеЛиста.П000023003001 = СтрокаДокумента.ЖильеПризнакНалогоплательщика;
	//ФормаРеглОтчета.ПорядокИспользованияВычетаПоЖилью = СтрокаДокумента.ПорядокИспользованияВычетаПоЖилью;
	
	Если СтрокаДокумента.ЖильеАдресСтруктура = Неопределено 
		ИЛИ СтрокаДокумента.ЖильеАдресСтруктура.Количество()=0 Тогда
		ДанныеЛиста.имИндекс   = "";
		ДанныеЛиста.имРегион   = "";
		ДанныеЛиста.имРайон    = "";
		ДанныеЛиста.имГород    = "";
		ДанныеЛиста.имНаселенныйПункт = "";
		ДанныеЛиста.имУлица    = "";
		ДанныеЛиста.имДом      = "";
		ДанныеЛиста.имКорпус   = "";
		ДанныеЛиста.имКвартира = "";

	Иначе
		ДанныеЛиста.имИндекс   = СтрокаДокумента.ЖильеАдресСтруктура.Индекс;
		ДанныеЛиста.имРегион   = СтрокаДокумента.ЖильеАдресСтруктура.КодРегиона;
		ДанныеЛиста.имРайон    = СтрокаДокумента.ЖильеАдресСтруктура.Район;
		ДанныеЛиста.имГород    = СтрокаДокумента.ЖильеАдресСтруктура.Город;
		ДанныеЛиста.имНаселенныйПункт = СтрокаДокумента.ЖильеАдресСтруктура.НаселенныйПункт;
		ДанныеЛиста.имУлица    = СтрокаДокумента.ЖильеАдресСтруктура.Улица;
		ДанныеЛиста.имДом      = СтрокаДокумента.ЖильеАдресСтруктура.Дом;
		ДанныеЛиста.имКорпус   = СтрокаДокумента.ЖильеАдресСтруктура.Корпус;
		ДанныеЛиста.имКвартира = СтрокаДокумента.ЖильеАдресСтруктура.Квартира;

	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДокумента.ЖильеДатаПраваСобственности) Тогда
		//имена полей в регл.отчете переставлены местами!
		ДанныеЛиста.ИмДатаАкта         = СтрокаДокумента.ЖильеДатаПраваСобственности;
		ДанныеЛиста.ИмДатаПриобретения = "";
	Иначе
		ДанныеЛиста.ИмДатаАкта         = "";
		ДанныеЛиста.ИмДатаПриобретения = СтрокаДокумента.ЖильеДатаАктапередачи;
	КонецЕсли; 
	Если СтрокаДокумента.ЖильеНаименование > "3" Тогда
		ДанныеЛиста.ЗемлДатаПриобретения      = СтрокаДокумента.ЖильеДатаПраваНаЗемлю;
	Иначе
		ДанныеЛиста.ЗемлДатаПриобретения      = "";
	КонецЕсли; 
	Если СтрокаДокумента.ЖильеВидСобственности = "2" ИЛИ СтрокаДокумента.ЖильеВидСобственности = "1" И СтрокаДокумента.ЖильеПризнакНалогоплательщика = "1" Тогда
		ДанныеЛиста.ИмДатаРаспределенияВычета = "";
	Иначе
		ДанныеЛиста.ИмДатаРаспределенияВычета = СтрокаДокумента.ЖильеДатаЗаявленияОРаспределении;
	КонецЕсли; 

	ДанныеЛиста.ИмДоля1       = СтрокаДокумента.ЖильеДоляЧислитель;
	ДанныеЛиста.ИмДоля3       = СтрокаДокумента.ЖильеДоляЗнаменатель;
	ДанныеЛиста.ИмГодВычета   = Формат(СтрокаДокумента.ЖильеГодНачалаВычета, "ЧЦ=4; ЧДЦ=0; ЧГ=") ;
	ДанныеЛиста.П000024011004 = СтрокаДокумента.ЖильеСтоимостьПоНорме;
	ДанныеЛиста.П000024012004 = СтрокаДокумента.ЖильеСуммаПроцентов;
	
	ДанныеЛиста.П000024014004 = СтрокаДокумента.ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам;
	ДанныеЛиста.П000024015004 = СтрокаДокумента.ЖильеВычетПрошлыхЛетОтАгентаПоРасходам;
	ДанныеЛиста.П000024013004 = ДанныеЛиста.П000024014004 + ДанныеЛиста.П000024015004;
	
	ДанныеЛиста.П000024017004 = СтрокаДокумента.ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам;
	ДанныеЛиста.П000024018004 = СтрокаДокумента.ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам;
	ДанныеЛиста.П000024016004 = ДанныеЛиста.П000024017004 + ДанныеЛиста.П000024018004;
	
	ДанныеЛиста.П000024019004 = СтрокаДокумента.ЖильеОстатокВычетаПоРасходам;
	ДанныеЛиста.П000024020004 = СтрокаДокумента.ЖильеОстатокВычетаПоПроцентам;
	
	ДанныеЛиста.П000024021004 = СтрокаДокумента.ЖильеВычетЭтогоГодаОтАгентаПоРасходам;
	ДанныеЛиста.П000024022004 = СтрокаДокумента.ЖильеВычетЭтогоГодаОтАгентаПоПроцентам;
	
	// Для расчета налоговой базы получаем сумму дохода за минусом прочих вычетов и имущественного вычета, предоставленного агентом:
	ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_5 = ДанныеЛиста.П000024021004;
	ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_6 = ДанныеЛиста.П000024022004;
	
	СуммаДоходаДляЛистаИ = ПараметрыЗаполнения.ИтогиДекларации.Раздел1_030 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистВ_3_2 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистД_6_1 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЕ_4 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ1_2_8 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ2_3 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЖ3_3 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистЗ_11_3 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_5 - 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_6;
	СуммаДоходаДляЛистаИ = Макс(0, СуммаДоходаДляЛистаИ);
	
	ДанныеЛиста.П000024023004 = 0 + СуммаДоходаДляЛистаИ; // п2.7
	
	// Вычеты текущего периода
	ОстатокНаНачало = Макс(0, ДанныеЛиста.П000024011004 - ДанныеЛиста.П000024013004);
	Если СуммаДоходаДляЛистаИ > 0 И ОстатокНаНачало > 0 Тогда
		ДанныеЛиста.П000024024004 = Мин(СуммаДоходаДляЛистаИ, Макс(ОстатокНаНачало - ДанныеЛиста.П000024021004, 0)); // п2.8
		ДанныеЛиста.П000024026004 = Макс(0, ОстатокНаНачало - ДанныеЛиста.П000024021004 - ДанныеЛиста.П000024024004); // п2.10
	Иначе
		ДанныеЛиста.П000024026004 = ОстатокНаНачало - ДанныеЛиста.П000024021004; // п2.10
	КонецЕсли; 
	
	СуммаДоходаДляЛистаИ = СуммаДоходаДляЛистаИ - ДанныеЛиста.П000024024004;
	ПроцентыНаНачало = Макс(0, ДанныеЛиста.П000024012004 - ДанныеЛиста.П000024016004);
	Если СуммаДоходаДляЛистаИ > 0 Тогда
		ДанныеЛиста.П000024025004 = Мин(СуммаДоходаДляЛистаИ, Макс(ПроцентыНаНачало - ДанныеЛиста.П000024022004, 0));  // п2.9
		ДанныеЛиста.П000024027004 = Макс(0, ПроцентыНаНачало - ДанныеЛиста.П000024022004 - ДанныеЛиста.П000024025004); // п2.11
	Иначе
		ДанныеЛиста.П000024027004 = ПроцентыНаНачало - ДанныеЛиста.П000024022004; // п2.11
	КонецЕсли; 
	
	ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_8 = ДанныеЛиста.П000024024004;
	ПараметрыЗаполнения.ИтогиДекларации.ЛистИ_2_9 = ДанныеЛиста.П000024025004;

КонецПроцедуры

#КонецОбласти


#Область Заполнение_Раздел2

&НаСервере
Процедура ЗаполнитьСтраницыРаздела2(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	ДокументыЛистаА = Новый Массив;
	
	Для Каждого СтрокаДокументаДохода Из ЛистыДекларации.Раздел2.СтрокиДокументов Цикл
		Если СтрокаДокументаДохода.ВидДокумента = "2-НДФЛ" ИЛИ СтрокаДокументаДохода.ВидДокумента = "Прочий доход" Тогда
			ДокументыЛистаА.Добавить(СтрокаДокументаДохода);
		Иначе
			Продолжить;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ДокументыЛистаА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЛиста = Неопределено;
	
	//Для заполнения раздела 6 потребуется информация о КБК, ОКАТО и расчетов по налогам
	//	по каждому источнику дохода
	ТаблицаРаздела6 = Новый ТаблицаЗначений;
	ТаблицаРаздела6.Колонки.Добавить("КБК");
	ТаблицаРаздела6.Колонки.Добавить("ОКАТО");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаНачислено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаУплачено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаСВычета");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКДоплате");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКВозврату");
	
	
	// Заполняем лист А (доходы в рублях)
	СчетчикСтраниц      = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА.Количество();
	Если СчетчикСтраниц > 0 И ЗначениеЗаполнено(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[0].Данные.СтавкаНалога) Тогда
		ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
		СчетчикСтраниц = СчетчикСтраниц + 1;
	КонецЕсли; 
	СчетчикСтрок        = 0;
	ИтогСуммаДохода           = 0;
	ИтогНалогооблагаемаяБаза  = 0;
	ИтогНалогНачислен         = 0;
	ИтогНалогУдержан          = 0;
	ИтогНалогУплачен          = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаА Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок > 1 И СчетчикСтрок <= 4 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистА(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 4 Тогда
			// На каждом листе по 4 строки
			ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаНалога, 0,1);
		ПоСтрокеНалогооблагаемаяБаза = СтрокаДокументаДохода.ОблагаемаяСуммаДохода;
		
		ДанныеЛиста.Данные["СтавкаНалога"] = 30;
		ДанныеЛиста.Данные["П000070001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникИНН;
		ДанныеЛиста.Данные["П000070001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКПП;
		ДанныеЛиста.Данные["П000070001003" + НомерСтроки] = СтрокаДокументаДохода.ИсточникОКАТО;
		ДанныеЛиста.Данные["П000070001004" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000070001005" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000070001006" + НомерСтроки] = ПоСтрокеНалогооблагаемаяБаза;
		ДанныеЛиста.Данные["П000070001007" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000070001008" + НомерСтроки] = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		
		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогСуммаДохода = ИтогСуммаДохода + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогооблагаемаяБаза = ИтогНалогооблагаемаяБаза + ПоСтрокеНалогооблагаемаяБаза;
		ИтогНалогНачислен  = ИтогНалогНачислен + ПоСтрокеНалогаНачислено;
		ИтогНалогУдержан   = ИтогНалогУдержан + Окр(СтрокаДокументаДохода.СуммаНалогаУдержано + СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1);
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = СтрокаДокументаДохода.ИсточникОКАТО;
		СтрокаРаздела6.СуммаНалогаНачислено = ПоСтрокеНалогаНачислено;
		СтрокаРаздела6.СуммаНалогаУплачено = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		СтрокаРаздела6.СуммаНалогаСВычета  = Окр(СтрокаДокументаДохода.СуммаВычета * 0.3, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа А
	СчетчикСтраниц = 0;
	СуммаФиксированныхАвансовыхПлатежей = ТаблицаУплаченныхНалогов[3].СуммаНалога;
	ВсегоСтраниц = ДокументыЛистаА.Количество();
	Для Каждого ЛистА Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА Цикл
		
		Если ЛистА.Данные.СтавкаНалога <> 30 Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистА.Данные["П000070008001"] = ИтогСуммаДохода;
			ЛистА.Данные["П000070009001"] = ИтогНалогооблагаемаяБаза;
			ЛистА.Данные["П000070010001"] = ИтогНалогНачислен;
			ЛистА.Данные["П000070011001"] = ИтогНалогУдержан;
			ЛистА.Данные["П000070012001"] = СуммаФиксированныхАвансовыхПлатежей;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистА.Данные.Удалить("П000070008001");
			ЛистА.Данные.Удалить("П000070009001");
			ЛистА.Данные.Удалить("П000070010001");
			ЛистА.Данные.Удалить("П000070011001");
			ЛистА.Данные.Удалить("П000070012001");
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПоказателиРаздела = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаРаздел2;
	ПоказателиРаздела.П000020001003 = ИтогСуммаДохода;
	
	ПараметрыЗаполнения.ИтогиДекларации.Раздел2_010 = ПоказателиРаздела.П000020001003;
	
	// Заполняем листы вычетов:
	ЗаполнитьЛистГ1(ЛистыДекларации.Раздел2.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистГ1Продолжение(ЛистыДекларации.Раздел2.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистГ2(ЛистыДекларации.Раздел2.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистЗ(ЛистыДекларации.Раздел2.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	
	// Заполняем Раздел 2 итогами:
	ПоказателиРаздела.П000020002003 = ПараметрыЗаполнения.ИтогиДекларации.ЛистГ1_1_9 + 
		ПараметрыЗаполнения.ИтогиДекларации.ЛистГ2_2;
	ПоказателиРаздела.П000020003003 = Макс(0, ПоказателиРаздела.П000020001003 - ПоказателиРаздела.П000020002003);
	ПоказателиРаздела.П000020004003 = ПоказателиРаздела.ЛистЗ_11_3;
	ПоказателиРаздела.П000020005003 = Макс(0, ПоказателиРаздела.П000020003003 - ПоказателиРаздела.П000020004003);
	
	ПоказателиРаздела.П000020006003 = Окр(ИтогНалогНачислен, 0,1);
	ПоказателиРаздела.П000020007003 = Окр(ИтогНалогУдержан, 0,1);
	
	Если ПоказателиРаздела.П000020006003 < ПоказателиРаздела.П000020007003 Тогда
		//Сумма возврата из бюджета
		ПоказателиРаздела.П000020008003 = ПоказателиРаздела.П000020007003 - ПоказателиРаздела.П000020006003;
	Иначе
		//Сумма доплаты в бюджет
		ПоказателиРаздела.П000020009003 = ПоказателиРаздела.П000020006003 - ПоказателиРаздела.П000020007003;
	КонецЕсли; 
	
	Если ИтогСуммаДохода <> 0 ИЛИ ИтогНалогУплачен <> 0 ИЛИ ИтогНалогНачислен <> 0 ИЛИ СуммаФиксированныхАвансовыхПлатежей <> 0 Тогда
		ЗаполнитьРаздел6(ЛистыДекларации.Раздел2.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения, ТаблицаРаздела6, ПоказателиРаздела.П000020008003, ПоказателиРаздела.П000020009003);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистГ2(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистГ2.Использовать Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаВычетов = Неопределено;
	Если НЕ ПараметрыЗаполнения.Свойство("ВычетыЛистаГ2", ТаблицаВычетов) Тогда
		СобратьТаблицуВычетовЛистаГ2(ЛистыДекларации, ПараметрыЗаполнения);
		ТаблицаВычетов = ПараметрыЗаполнения.ВычетыЛистаГ2;
	КонецЕсли; 
	
	СчетчикСтраниц = 0;
	СчетчикСтрок = 0;
	
	ВсегоВычет = 0;
	ВсегоДоход = 0;
	
	Для Каждого СтрокаВычета Из ТаблицаВычетов Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		ДанныеСтраницы = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ2[СчетчикСтраниц];
		Если СчетчикСтрок > 5 Тогда
			ДобавитьВОтчетЛистГ2(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ2, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
			ДанныеСтраницы = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ2[СчетчикСтраниц];
		ИначеЕсли СчетчикСтрок > 1 Тогда
			ДобавитьВОтчетНовуюСтрокуЛистГ2(ДанныеСтраницы, ПараметрыЗаполнения);
		КонецЕсли; 
		СтрокаЛиста = ДанныеСтраницы.Данные;
		
		СтрокаЛиста["П000010201001_" + СчетчикСтрок] = СтрокаВычета.ИНН;
		СтрокаЛиста["П000010201002_" + СчетчикСтрок] = СтрокаВычета.КПП;
		СтрокаЛиста["П000010201004_" + СчетчикСтрок] = СтрокаВычета.Наименование;
		СтрокаЛиста["П000010201005_" + СчетчикСтрок] = СтрокаВычета.СуммаДохода;
		СтрокаЛиста["П000010201006_" + СчетчикСтрок] = Мин(СтрокаВычета.СуммаДохода, СтрокаВычета.СуммаВычета);
		
		ВсегоДоход = ВсегоДоход + СтрокаВычета.СуммаДохода;
		ВсегоВычет = ВсегоВычет + Мин(СтрокаВычета.СуммаДохода, СтрокаВычета.СуммаВычета);
		
	КонецЦикла; 
	
	// Прверяем итоги
	СчетчикСтраниц = 0;
	ВсегоСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ2.Количество();
	Для Каждого ЛистГ2 Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ2 Цикл
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистГ2.Данные.П000010207001 = Мин(ВсегоДоход, ВсегоВычет, 4000);
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистГ2.Данные.Удалить("П000010207001");
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПараметрыЗаполнения.ИтогиДекларации.ЛистГ2_2 = Мин(ВсегоДоход, ВсегоВычет, 4000);

КонецПроцедуры

#КонецОбласти


#Область Заполнение_Раздел3

&НаСервере
Процедура ЗаполнитьСтраницыРаздела3(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	ДокументыЛистаА = Новый Массив;
	ДокументыЛистаБ = Новый Массив;
	
	Для Каждого СтрокаДокументаДохода Из ЛистыДекларации.Раздел3.СтрокиДокументов Цикл
		Если СтрокаДокументаДохода.ВидДокумента = "Доход предпринимателя" Тогда
			Продолжить;;
		ИначеЕсли СтрокаДокументаДохода.ВидДокумента = "Доход в валюте" Тогда
			ДокументыЛистаБ.Добавить(СтрокаДокументаДохода);
		Иначе
			ДокументыЛистаА.Добавить(СтрокаДокументаДохода);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ДокументыЛистаА.Количество() = 0 И ДокументыЛистаБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЛиста = Неопределено;
	
	//Для заполнения раздела 6 потребуется информация о КБК, ОКАТО и расчетов по налогам
	//	по каждому источнику дохода
	ТаблицаРаздела6 = Новый ТаблицаЗначений;
	ТаблицаРаздела6.Колонки.Добавить("КБК");
	ТаблицаРаздела6.Колонки.Добавить("ОКАТО");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаНачислено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаУплачено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаСВычета");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКДоплате");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКВозврату");
	
	
	// Заполняем лист А (доходы в рублях)
	СчетчикСтраниц      = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА.Количество();
	Если СчетчикСтраниц > 0 И ЗначениеЗаполнено(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[0].Данные.СтавкаНалога) Тогда
		ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
		СчетчикСтраниц = СчетчикСтраниц + 1;
	КонецЕсли; 
	СчетчикСтрок        = 0;
	ИтогСуммаДохода           = 0;
	ИтогНалогооблагаемаяБаза  = 0;
	ИтогНалогНачислен         = 0;
	ИтогНалогУдержан          = 0;
	ИтогНалогУплачен          = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаА Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок > 1 И СчетчикСтрок <= 4 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистА(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 4 Тогда
			// На каждом листе по 4 строки
			ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаНалога, 0,1);
		ПоСтрокеНалогооблагаемаяБаза = СтрокаДокументаДохода.ОблагаемаяСуммаДохода;
		
		ДанныеЛиста.Данные["СтавкаНалога"] = 35;
		ДанныеЛиста.Данные["П000070001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникИНН;
		ДанныеЛиста.Данные["П000070001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКПП;
		ДанныеЛиста.Данные["П000070001003" + НомерСтроки] = СтрокаДокументаДохода.ИсточникОКАТО;
		ДанныеЛиста.Данные["П000070001004" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000070001005" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000070001006" + НомерСтроки] = ПоСтрокеНалогооблагаемаяБаза;
		ДанныеЛиста.Данные["П000070001007" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000070001008" + НомерСтроки] = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		
		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогСуммаДохода = ИтогСуммаДохода + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогооблагаемаяБаза = ИтогНалогооблагаемаяБаза + ПоСтрокеНалогооблагаемаяБаза;
		ИтогНалогНачислен  = ИтогНалогНачислен + ПоСтрокеНалогаНачислено;
		ИтогНалогУдержан   = ИтогНалогУдержан + Окр(СтрокаДокументаДохода.СуммаНалогаУдержано + СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1);
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = СтрокаДокументаДохода.ИсточникОКАТО;
		СтрокаРаздела6.СуммаНалогаНачислено = ПоСтрокеНалогаНачислено;
		СтрокаРаздела6.СуммаНалогаУплачено = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		//СтрокаРаздела6.СуммаНалогаСВычета  = Окр(СтрокаДокументаДохода.СуммаВычета * 0.35, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа А
	СчетчикСтраниц = 0;
	СуммаФиксированныхАвансовыхПлатежей = ТаблицаУплаченныхНалогов[3].СуммаНалога;
	ВсегоСтраниц = ДокументыЛистаА.Количество();
	Для Каждого ЛистА Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА Цикл
		
		Если ЛистА.Данные.СтавкаНалога <> 35 Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистА.Данные["П000070008001"] = ИтогСуммаДохода;
			ЛистА.Данные["П000070009001"] = ИтогНалогооблагаемаяБаза;
			ЛистА.Данные["П000070010001"] = ИтогНалогНачислен;
			ЛистА.Данные["П000070011001"] = ИтогНалогУдержан;
			ЛистА.Данные["П000070012001"] = СуммаФиксированныхАвансовыхПлатежей;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистА.Данные.Удалить("П000070008001");
			ЛистА.Данные.Удалить("П000070009001");
			ЛистА.Данные.Удалить("П000070010001");
			ЛистА.Данные.Удалить("П000070011001");
			ЛистА.Данные.Удалить("П000070012001");
		КонецЕсли; 
		
	КонецЦикла; 
	
	//Заполняем Лист Б (доходы в валюте)
	СчетчикСтраниц      = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ.Количество();
	Если СчетчикСтраниц > 0 И ЗначениеЗаполнено(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ[0].Данные.СтавкаНалога) Тогда
		ДобавитьВОтчетЛистБ(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ, ПараметрыЗаполнения);
		СчетчикСтраниц = СчетчикСтраниц + 1;
	КонецЕсли; 
	СчетчикСтрок   = 0;
	ИтогВалютныйДоходВРублях          = 0;
	ИтогНалогУплаченЗаГраницейВРублях = 0;
	ИтогНачисленНалогНаВалютныйДоход  = 0;
	ИтогНалогЗачтенВРФ                = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаБ Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок = 2 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистБ(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 2 Тогда
			// На каждом листе по 2 строки
			ДобавитьВОтчетЛистБ(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаДохода * 0.35, 0,1);
		СуммаНалогаЗасчитанногоВРФ = ?(НалогДругойСтраныПодлежитЗачету(СтрокаДокументаДохода.ИсточникКодСтраны), 
				Мин(ПоСтрокеНалогаНачислено, Окр(СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1)), 0);
		
		ДанныеЛиста.Данные.СтавкаНалога = 35;
		ДанныеЛиста.Данные["П000080001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКодСтраны;
		ДанныеЛиста.Данные["П000080001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000080001004" + НомерСтроки] = СтрокаДокументаДохода.ВалютаДохода.Код;
		ДанныеЛиста.Данные["П000080001005" + НомерСтроки] = СтрокаДокументаДохода.ДатаДохода;
		ДанныеЛиста.Данные["П000080001006" + НомерСтроки] = СтрокаДокументаДохода.КурсНаДатуДохода;
		ДанныеЛиста.Данные["П000080001007" + НомерСтроки] = СтрокаДокументаДохода.СуммаДоходаВВалюте;
		ДанныеЛиста.Данные["П000080001008" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000080001009" + НомерСтроки] = СтрокаДокументаДохода.ДатаУплатыНалога;
		ДанныеЛиста.Данные["П000080001010" + НомерСтроки] = СтрокаДокументаДохода.КурсНаДатуУплатыНалога;
		ДанныеЛиста.Данные["П000080001011" + НомерСтроки] = СтрокаДокументаДохода.СуммаНалогаУплаченоВВалюте;
		ДанныеЛиста.Данные["П000080001012" + НомерСтроки] = СтрокаДокументаДохода.СуммаНалогаУплачено;
		ДанныеЛиста.Данные["П000080001013" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000080001014" + НомерСтроки] = СуммаНалогаЗасчитанногоВРФ;

		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогВалютныйДоходВРублях = ИтогВалютныйДоходВРублях + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогУплаченЗаГраницейВРублях = ИтогНалогУплаченЗаГраницейВРублях + СтрокаДокументаДохода.СуммаНалогаУплачено;
		ИтогНачисленНалогНаВалютныйДоход  = ИтогНачисленНалогНаВалютныйДоход + ПоСтрокеНалогаНачислено;
		ИтогНалогЗачтенВРФ  = ИтогНалогЗачтенВРФ + ДанныеЛиста.Данные["П000080001014" + НомерСтроки];
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = АдресВРФОкато;
		СтрокаРаздела6.СуммаНалогаНачислено = ПоСтрокеНалогаНачислено;
		СтрокаРаздела6.СуммаНалогаУплачено  = СуммаНалогаЗасчитанногоВРФ;
		//СтрокаРаздела6.СуммаНалогаСВычета   = Окр(СтрокаДокументаДохода.СуммаВычета * 0.35, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа Б
	СчетчикСтраниц = 0;
	ВсегоСтраниц = ДокументыЛистаБ.Количество();
	Для Каждого ЛистБ Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ Цикл
		
		Если ЛистБ.Данные.СтавкаНалога <> 35 Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистБ.Данные.П000080001501 = ИтогВалютныйДоходВРублях;
			ЛистБ.Данные.П000080001601 = ИтогНалогУплаченЗаГраницейВРублях;
			ЛистБ.Данные.П000080001701 = ИтогНачисленНалогНаВалютныйДоход;
			ЛистБ.Данные.П000080001801 = ИтогНалогЗачтенВРФ;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистБ.Данные.Удалить("П000080001501");
			ЛистБ.Данные.Удалить("П000080001601");
			ЛистБ.Данные.Удалить("П000080001701");
			ЛистБ.Данные.Удалить("П000080001801");
		КонецЕсли; 

		
	КонецЦикла; 
	
	ПоказателиРаздела = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
	ПоказателиРаздела.П000030001003 = ИтогВалютныйДоходВРублях + ИтогСуммаДохода;
	
	// Заполняем листы вычетов:
	ЗаполнитьЛистГ2(ЛистыДекларации.Раздел3.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьЛистГ3(ЛистыДекларации.Раздел3.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения);
	
	// Заполняем Раздел 3 итогами:
	ПоказателиРаздела.П000030002003 = ПараметрыЗаполнения.ИтогиДекларации.Листг2_2;
		
	ПоказателиРаздела.П000030003003 = Макс(0, ПоказателиРаздела.П000030001003 - ПоказателиРаздела.П000030002003);
	ПоказателиРаздела.П000030004003 = ИтогНалогНачислен + ИтогНачисленНалогНаВалютныйДоход; //общая сумма начисленного налога с листов А и Б
	ПоказателиРаздела.П000030005003 = ИтогНалогУдержан; //общая сумма удержанного налога с листа А
	ПоказателиРаздела.П000030005103 = ПараметрыЗаполнения.ИтогиДекларации.ЛистГ3_2; //итог с листа Г3
	ПоказателиРаздела.П000030006003 = ИтогНалогЗачтенВРФ; //зачет иностранного налога с листа Б
	
	УплаченоВсего = ПоказателиРаздела.П000030005003 + ПоказателиРаздела.П000030005103;
	Если ПоказателиРаздела.П000030004003 < УплаченоВсего Тогда
		//Сумма возврата из бюджета
		ПоказателиРаздела.П000030007003 = УплаченоВсего - ПоказателиРаздела.П000030004003;
	КонецЕсли; 
	Если ПоказателиРаздела.П000030004003 > УплаченоВсего + ПоказателиРаздела.П000030006003 Тогда
		//Сумма доплаты в бюджет
		ПоказателиРаздела.П000030008003 = ПоказателиРаздела.П000030004003 - УплаченоВсего - ПоказателиРаздела.П000030006003;
	КонецЕсли; 
	
	Если ИтогСуммаДохода <> 0 ИЛИ ИтогНалогУплачен <> 0 ИЛИ ИтогНалогНачислен <> 0 ИЛИ ИтогВалютныйДоходВРублях <> 0 Тогда
		ЗаполнитьРаздел6(ЛистыДекларации.Раздел3.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения, ТаблицаРаздела6, ПоказателиРаздела.П000030007003, ПоказателиРаздела.П000030008003);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистГ3(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	Если НЕ ЛистыДекларации.ЛистГ3.Использовать Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаВычетов = Новый ТаблицаЗначений;
	ТаблицаВычетов.Колонки.Добавить("ИНН");
	ТаблицаВычетов.Колонки.Добавить("КПП");
	ТаблицаВычетов.Колонки.Добавить("ОКАТО");
	ТаблицаВычетов.Колонки.Добавить("Наименование");
	ТаблицаВычетов.Колонки.Добавить("СуммаДохода");
	ТаблицаВычетов.Колонки.Добавить("СуммаНалога");
	
	
	Для Каждого СтрокаДохода Из ЛистыДекларации.ЛистГ3.СтрокиДокументов Цикл
		СтрокаВычета = ТаблицаВычетов.Добавить();
		СтрокаВычета.ИНН = СтрокаДохода.ИсточникИНН;
		СтрокаВычета.КПП = СтрокаДохода.ИсточникКПП;
		СтрокаВычета.ОКАТО = СтрокаДохода.ИсточникОКАТО;
		СтрокаВычета.Наименование = СтрокаДохода.ИсточникНаименование;
		СтрокаВычета.СуммаДохода = СтрокаДохода.СуммаДохода;
		СтрокаВычета.СуммаНалога = СтрокаДохода.СуммаНалогаУдержано;
	КонецЦикла; 
	
	ТаблицаВычетов.Свернуть("ИНН,КПП,ОКАТО,Наименование", "СуммаДохода,СуммаНалога");
	
	СчетчикСтраниц = 0;
	СчетчикСтрок = 0;
	
	ВсегоНалог = 0;
	
	Для Каждого СтрокаВычета Из ТаблицаВычетов Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		ДанныеСтраницы = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ3[СчетчикСтраниц];
		Если СчетчикСтрок > 5 Тогда
			ДобавитьВОтчетЛистГ3(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ3, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
			ДанныеСтраницы = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ3[СчетчикСтраниц];
		ИначеЕсли СчетчикСтрок > 1 Тогда
			ДобавитьВОтчетНовуюСтрокуЛистГ3(ДанныеСтраницы, ПараметрыЗаполнения);
		КонецЕсли; 
		СтрокаЛиста = ДанныеСтраницы.Данные;
		
		СтрокаЛиста["П000027201001_" + СчетчикСтрок] = СтрокаВычета.ИНН;
		СтрокаЛиста["П000027201002_" + СчетчикСтрок] = СтрокаВычета.КПП;
		СтрокаЛиста["П000027201003_" + СчетчикСтрок] = СтрокаВычета.ОКАТО;
		СтрокаЛиста["П000027201004_" + СчетчикСтрок] = СтрокаВычета.Наименование;
		СтрокаЛиста["П000027201005_" + СчетчикСтрок] = СтрокаВычета.СуммаДохода;
		СтрокаЛиста["П000027201006_" + СчетчикСтрок] = СтрокаВычета.СуммаНалога;
		
		ВсегоНалог = ВсегоНалог + СтрокаВычета.СуммаНалога;
		
	КонецЦикла; 
	
	// Прверяем итоги
	СчетчикСтраниц = 0;
	ВсегоСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ3.Количество();
	Для Каждого ЛистГ3 Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистГ3 Цикл
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистГ3.Данные.П000027207001 = ВсегоНалог;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистГ3.Данные.Удалить("П000027207001");
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПараметрыЗаполнения.ИтогиДекларации.ЛистГ3_2 = ВсегоНалог;

КонецПроцедуры

#КонецОбласти


#Область Заполнение_Раздел4

&НаСервере
Процедура ЗаполнитьСтраницыРаздела4(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	ДокументыЛистаА = Новый Массив;
	ДокументыЛистаБ = Новый Массив;
	
	Для Каждого СтрокаДокументаДохода Из ЛистыДекларации.Раздел4.СтрокиДокументов Цикл
		Если СтрокаДокументаДохода.ВидДокумента = "Доход предпринимателя" Тогда
			Продолжить;
		ИначеЕсли СтрокаДокументаДохода.ВидДокумента = "Доход в валюте" Тогда
			ДокументыЛистаБ.Добавить(СтрокаДокументаДохода);
		Иначе
			ДокументыЛистаА.Добавить(СтрокаДокументаДохода);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ДокументыЛистаА.Количество() = 0 И ДокументыЛистаБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЛиста = Неопределено;
	
	//Для заполнения раздела 6 потребуется информация о КБК, ОКАТО и расчетов по налогам
	//	по каждому источнику дохода
	ТаблицаРаздела6 = Новый ТаблицаЗначений;
	ТаблицаРаздела6.Колонки.Добавить("КБК");
	ТаблицаРаздела6.Колонки.Добавить("ОКАТО");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаНачислено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаУплачено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаСВычета");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКДоплате");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКВозврату");
	
	
	// Заполняем лист А (доходы в рублях)
	СчетчикСтраниц      = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА.Количество();
	Если СчетчикСтраниц > 0 И ЗначениеЗаполнено(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[0].Данные.СтавкаНалога) Тогда
		ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
		СчетчикСтраниц = СчетчикСтраниц + 1;
	КонецЕсли; 
	СчетчикСтрок        = 0;
	ИтогСуммаДохода           = 0;
	ИтогНалогооблагаемаяБаза  = 0;
	ИтогНалогНачислен         = 0;
	ИтогНалогУдержан          = 0;
	ИтогНалогУплачен          = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаА Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок > 1 И СчетчикСтрок <= 4 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистА(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 4 Тогда
			// На каждом листе по 4 строки
			ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаНалога, 0,1);
		ПоСтрокеНалогооблагаемаяБаза = СтрокаДокументаДохода.ОблагаемаяСуммаДохода;
		
		ДанныеЛиста.Данные["СтавкаНалога"] = 9;
		ДанныеЛиста.Данные["П000070001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникИНН;
		ДанныеЛиста.Данные["П000070001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКПП;
		ДанныеЛиста.Данные["П000070001003" + НомерСтроки] = СтрокаДокументаДохода.ИсточникОКАТО;
		ДанныеЛиста.Данные["П000070001004" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000070001005" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000070001006" + НомерСтроки] = ПоСтрокеНалогооблагаемаяБаза;
		ДанныеЛиста.Данные["П000070001007" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000070001008" + НомерСтроки] = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		
		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогСуммаДохода = ИтогСуммаДохода + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогооблагаемаяБаза = ИтогНалогооблагаемаяБаза + ПоСтрокеНалогооблагаемаяБаза;
		ИтогНалогНачислен  = ИтогНалогНачислен + ПоСтрокеНалогаНачислено;
		ИтогНалогУдержан   = ИтогНалогУдержан + Окр(СтрокаДокументаДохода.СуммаНалогаУдержано + СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1);
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = СтрокаДокументаДохода.ИсточникОКАТО;
		СтрокаРаздела6.СуммаНалогаНачислено = ПоСтрокеНалогаНачислено;
		СтрокаРаздела6.СуммаНалогаУплачено = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		СтрокаРаздела6.СуммаНалогаСВычета  = Окр(СтрокаДокументаДохода.СуммаВычета * 0.9, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа А
	СчетчикСтраниц = 0;
	СуммаФиксированныхАвансовыхПлатежей = ТаблицаУплаченныхНалогов[3].СуммаНалога;
	ВсегоСтраниц = ДокументыЛистаА.Количество();
	Для Каждого ЛистА Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА Цикл
		
		Если ЛистА.Данные.СтавкаНалога <> 9 Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистА.Данные["П000070008001"] = ИтогСуммаДохода;
			ЛистА.Данные["П000070009001"] = ИтогНалогооблагаемаяБаза;
			ЛистА.Данные["П000070010001"] = ИтогНалогНачислен;
			ЛистА.Данные["П000070011001"] = ИтогНалогУдержан;
			ЛистА.Данные["П000070012001"] = СуммаФиксированныхАвансовыхПлатежей;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистА.Данные.Удалить("П000070008001");
			ЛистА.Данные.Удалить("П000070009001");
			ЛистА.Данные.Удалить("П000070010001");
			ЛистА.Данные.Удалить("П000070011001");
			ЛистА.Данные.Удалить("П000070012001");
		КонецЕсли; 
		
	КонецЦикла; 
	
	//Заполняем Лист Б (доходы в валюте)
	СчетчикСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ.Количество();
	Если СчетчикСтраниц > 0 И ЗначениеЗаполнено(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ[0].Данные.СтавкаНалога) Тогда
		ДобавитьВОтчетЛистБ(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ, ПараметрыЗаполнения);
		СчетчикСтраниц = СчетчикСтраниц + 1;
	КонецЕсли; 
	СчетчикСтрок   = 0;
	ИтогВалютныйДоходВРублях          = 0;
	ИтогНалогУплаченЗаГраницейВРублях = 0;
	ИтогНачисленНалогНаВалютныйДоход  = 0;
	ИтогНалогЗачтенВРФ                = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаБ Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок = 2 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистБ(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 2 Тогда
			// На каждом листе по 2 строки
			ДобавитьВОтчетЛистБ(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаДохода * 0.9, 0,1);
		СуммаНалогаЗасчитанногоВРФ = ?(НалогДругойСтраныПодлежитЗачету(СтрокаДокументаДохода.ИсточникКодСтраны), 
				Мин(ПоСтрокеНалогаНачислено, Окр(СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1)), 0);
		
		ДанныеЛиста.Данные.СтавкаНалога = 9;
		ДанныеЛиста.Данные["П000080001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКодСтраны;
		ДанныеЛиста.Данные["П000080001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000080001004" + НомерСтроки] = СтрокаДокументаДохода.ВалютаДохода.Код;
		ДанныеЛиста.Данные["П000080001005" + НомерСтроки] = СтрокаДокументаДохода.ДатаДохода;
		ДанныеЛиста.Данные["П000080001006" + НомерСтроки] = СтрокаДокументаДохода.КурсНаДатуДохода;
		ДанныеЛиста.Данные["П000080001007" + НомерСтроки] = СтрокаДокументаДохода.СуммаДоходаВВалюте;
		ДанныеЛиста.Данные["П000080001008" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000080001009" + НомерСтроки] = СтрокаДокументаДохода.ДатаУплатыНалога;
		ДанныеЛиста.Данные["П000080001010" + НомерСтроки] = СтрокаДокументаДохода.КурсНаДатуУплатыНалога;
		ДанныеЛиста.Данные["П000080001011" + НомерСтроки] = СтрокаДокументаДохода.СуммаНалогаУплаченоВВалюте;
		ДанныеЛиста.Данные["П000080001012" + НомерСтроки] = СтрокаДокументаДохода.СуммаНалогаУплачено;
		ДанныеЛиста.Данные["П000080001013" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000080001014" + НомерСтроки] = СуммаНалогаЗасчитанногоВРФ;

		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогВалютныйДоходВРублях = ИтогВалютныйДоходВРублях + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогУплаченЗаГраницейВРублях = ИтогНалогУплаченЗаГраницейВРублях + СтрокаДокументаДохода.СуммаНалогаУплачено;
		ИтогНачисленНалогНаВалютныйДоход  = ИтогНачисленНалогНаВалютныйДоход + ПоСтрокеНалогаНачислено;
		ИтогНалогЗачтенВРФ  = ИтогНалогЗачтенВРФ + ДанныеЛиста.Данные["П000080001014" + НомерСтроки];
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = АдресВРФОкато;
		СтрокаРаздела6.СуммаНалогаНачислено = ПоСтрокеНалогаНачислено;
		СтрокаРаздела6.СуммаНалогаУплачено  = СуммаНалогаЗасчитанногоВРФ;
		СтрокаРаздела6.СуммаНалогаСВычета   = Окр(СтрокаДокументаДохода.СуммаВычета * 0.9, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа Б
	СчетчикСтраниц = 0;
	ВсегоСтраниц = ДокументыЛистаБ.Количество();
	Для Каждого ЛистБ Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ Цикл
		
		Если ЛистБ.Данные.СтавкаНалога <> 9 Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистБ.Данные.П000080001501 = ИтогВалютныйДоходВРублях;
			ЛистБ.Данные.П000080001601 = ИтогНалогУплаченЗаГраницейВРублях;
			ЛистБ.Данные.П000080001701 = ИтогНачисленНалогНаВалютныйДоход;
			ЛистБ.Данные.П000080001801 = ИтогНалогЗачтенВРФ;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистБ.Данные.Удалить("П000080001501");
			ЛистБ.Данные.Удалить("П000080001601");
			ЛистБ.Данные.Удалить("П000080001701");
			ЛистБ.Данные.Удалить("П000080001801");
		КонецЕсли; 

		
	КонецЦикла; 
	
	ПоказателиРаздела = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	
	// Заполняем Раздел 4 итогами:
	ПоказателиРаздела.П000040001003 = ИтогВалютныйДоходВРублях + ИтогСуммаДохода;
	ПоказателиРаздела.П000040002003 = ИтогВалютныйДоходВРублях + ИтогСуммаДохода;
	ПоказателиРаздела.П000040003003 = ИтогНалогНачислен + ИтогНачисленНалогНаВалютныйДоход; //общая сумма начисленного налога с листов А и Б
	ПоказателиРаздела.П000040004003 = ИтогНалогУдержан; //общая сумма удержанного налога с листа А
	ПоказателиРаздела.П000040005003 = ИтогНалогЗачтенВРФ; //зачет иностранного налога с листа Б
	
	УплаченоВсего = ПоказателиРаздела.П000040004003;
	Если ПоказателиРаздела.П000040003003 < УплаченоВсего Тогда
		//Сумма возврата из бюджета
		ПоказателиРаздела.П000040006003 = УплаченоВсего - ПоказателиРаздела.П000040003003;
	КонецЕсли; 
	Если ПоказателиРаздела.П000040003003 > УплаченоВсего + ПоказателиРаздела.П000040005003 Тогда
		//Сумма доплаты в бюджет
		ПоказателиРаздела.П000040007003 = ПоказателиРаздела.П000040003003 - УплаченоВсего - ПоказателиРаздела.П000040005003;
	КонецЕсли; 
	
	
	Если ИтогСуммаДохода <> 0 ИЛИ ИтогНалогУплачен <> 0 ИЛИ ИтогНалогНачислен <> 0 Тогда
		ЗаполнитьРаздел6(ЛистыДекларации.Раздел4.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения, ТаблицаРаздела6, ПоказателиРаздела.П000040006003, ПоказателиРаздела.П000040007003);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область Заполнение_Раздел5

&НаСервере
Процедура ЗаполнитьСтраницыРаздела5(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения)

	ДокументыЛистаА = Новый Массив;
	
	Для Каждого СтрокаДокументаДохода Из ЛистыДекларации.Раздел5.СтрокиДокументов Цикл
		Если СтрокаДокументаДохода.ВидДокумента = "Доход предпринимателя" 
			ИЛИ СтрокаДокументаДохода.ВидДокумента = "Доход в валюте" Тогда
			Продолжить;
		Иначе
			ДокументыЛистаА.Добавить(СтрокаДокументаДохода);
		КонецЕсли; 
	КонецЦикла; 
	
	Если ДокументыЛистаА.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЛиста = Неопределено;
	
	//Для заполнения раздела 6 потребуется информация о КБК, ОКАТО и расчетов по налогам
	//	по каждому источнику дохода
	ТаблицаРаздела6 = Новый ТаблицаЗначений;
	ТаблицаРаздела6.Колонки.Добавить("КБК");
	ТаблицаРаздела6.Колонки.Добавить("ОКАТО");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаНачислено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаУплачено");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаСВычета");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКДоплате");
	ТаблицаРаздела6.Колонки.Добавить("СуммаНалогаКВозврату");
	
	
	// Заполняем лист А (доходы в рублях)
	СчетчикСтраниц      = 1;
	СчетчикСтрок        = 0;
	ИтогСуммаДохода           = 0;
	ИтогНалогооблагаемаяБаза  = 0;
	ИтогНалогНачислен         = 0;
	ИтогНалогУдержан          = 0;
	ИтогНалогУплачен          = 0;
	Для Каждого СтрокаДокументаДохода Из ДокументыЛистаА Цикл
		
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок > 1 И СчетчикСтрок <= 4 Тогда
			// Добавляем новую строку
			ДобавитьВОтчетНовуюСтрокуЛистА(ДанныеЛиста, ПараметрыЗаполнения);
		ИначеЕсли СчетчикСтрок > 4 Тогда
			// На каждом листе по 4 строки
			ДобавитьВОтчетЛистА(СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА, ПараметрыЗаполнения);
			СчетчикСтрок = 1;
			СчетчикСтраниц = СчетчикСтраниц + 1;
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА[СчетчикСтраниц - 1];
		ДопСтрока = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		НомерСтроки = "_" + Строка(СчетчикСтрок);
		
		ПоСтрокеНалогаНачислено = Окр(СтрокаДокументаДохода.СуммаНалога, 0,1);
		ПоСтрокеНалогооблагаемаяБаза = СтрокаДокументаДохода.ОблагаемаяСуммаДохода;
		
		ДанныеЛиста.Данные["СтавкаНалога"] = 35;
		ДанныеЛиста.Данные["П000070001001" + НомерСтроки] = СтрокаДокументаДохода.ИсточникИНН;
		ДанныеЛиста.Данные["П000070001002" + НомерСтроки] = СтрокаДокументаДохода.ИсточникКПП;
		ДанныеЛиста.Данные["П000070001003" + НомерСтроки] = СтрокаДокументаДохода.ИсточникОКАТО;
		ДанныеЛиста.Данные["П000070001004" + НомерСтроки] = СтрокаДокументаДохода.ИсточникНаименование;
		ДанныеЛиста.Данные["П000070001005" + НомерСтроки] = СтрокаДокументаДохода.СуммаДохода;
		ДанныеЛиста.Данные["П000070001006" + НомерСтроки] = ПоСтрокеНалогооблагаемаяБаза;
		ДанныеЛиста.Данные["П000070001007" + НомерСтроки] = ПоСтрокеНалогаНачислено;
		ДанныеЛиста.Данные["П000070001008" + НомерСтроки] = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		
		СтрокаТаблицыДопСтрок = ДанныеЛиста.ДанныеДопСтрок[СчетчикСтрок - 1];
		Для Каждого Колонка Из ДанныеЛиста.ДанныеДопСтрок.Колонки Цикл
			СтрокаТаблицыДопСтрок[Колонка.Имя] = ДанныеЛиста.Данные[Колонка.Имя + НомерСтроки];
		КонецЦикла; 
		
		ИтогСуммаДохода = ИтогСуммаДохода + СтрокаДокументаДохода.СуммаДохода;
		ИтогНалогооблагаемаяБаза = ИтогНалогооблагаемаяБаза + ПоСтрокеНалогооблагаемаяБаза;
		ИтогНалогНачислен  = ИтогНалогНачислен + ПоСтрокеНалогаНачислено;
		ИтогНалогУдержан   = ИтогНалогУдержан + Окр(СтрокаДокументаДохода.СуммаНалогаУдержано + СтрокаДокументаДохода.СуммаНалогаУплачено, 0,1);
		
		СтрокаРаздела6 = ТаблицаРаздела6.Добавить();
		СтрокаРаздела6.ОКАТО = СтрокаДокументаДохода.ИсточникОКАТО;
		СтрокаРаздела6.СуммаНалогаНачислено = ПоСтрокеНалогаНачислено;
		СтрокаРаздела6.СуммаНалогаУплачено = Окр(СтрокаДокументаДохода.СуммаНалогаУдержано, 0,1);
		СтрокаРаздела6.СуммаНалогаСВычета  = Окр(СтрокаДокументаДохода.СуммаВычета * 0.35, 0,1);
		Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
			СтрокаРаздела6.КБК = "182 1 01 02030 01 1000 110"; //налог на доходы не был удержан
		Иначе
			СтрокаРаздела6.КБК = "182 1 01 02010 01 1000 110"; //налог на доходы от налоговых агентов
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Проверяем итоги Листа А
	СчетчикСтраниц = 0;
	СуммаФиксированныхАвансовыхПлатежей = ТаблицаУплаченныхНалогов[3].СуммаНалога;
	ВсегоСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА.Количество();
	Для Каждого ЛистА Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА Цикл
		
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц = ВсегоСтраниц Тогда
			// Записываем итоги на последнюю страницу
			ЛистА.Данные["П000070008001"] = ИтогСуммаДохода;
			ЛистА.Данные["П000070009001"] = ИтогНалогооблагаемаяБаза;
			ЛистА.Данные["П000070010001"] = ИтогНалогНачислен;
			ЛистА.Данные["П000070011001"] = ИтогНалогУдержан;
			ЛистА.Данные["П000070012001"] = СуммаФиксированныхАвансовыхПлатежей;
		Иначе
			// Удаляем итоговые данные с непоследней страницы
			ЛистА.Данные.Удалить("П000070008001");
			ЛистА.Данные.Удалить("П000070009001");
			ЛистА.Данные.Удалить("П000070010001");
			ЛистА.Данные.Удалить("П000070011001");
			ЛистА.Данные.Удалить("П000070012001");
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПоказателиРаздела = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаРаздел5;
	
	// Заполняем Раздел 4 итогами:
	ПоказателиРаздела.П000050001003 = ИтогСуммаДохода;
	ПоказателиРаздела.П000050002003 = ИтогСуммаДохода;
	
	
	ПоказателиРаздела.П000050003003 = ИтогНалогНачислен ; //общая сумма начисленного налога с листов А и Б
	ПоказателиРаздела.П000050004003 = ИтогНалогУдержан; //общая сумма удержанного налога с листа А
	
	УплаченоВсего = ПоказателиРаздела.П000040004003;
	Если ПоказателиРаздела.П000050003003 < ПоказателиРаздела.П000050004003 Тогда
		//Сумма возврата из бюджета
		ПоказателиРаздела.П000050005003 = ПоказателиРаздела.П000050004003 - ПоказателиРаздела.П000050003003;
	КонецЕсли; 
	Если ПоказателиРаздела.П000050003003 > ПоказателиРаздела.П000050004003 Тогда
		//Сумма доплаты в бюджет
		ПоказателиРаздела.П000050006003 = ПоказателиРаздела.П000050003003 - ПоказателиРаздела.П000050004003;
	КонецЕсли; 
	
	
	Если ИтогСуммаДохода <> 0 ИЛИ ИтогНалогУплачен <> 0 ИЛИ ИтогНалогНачислен <> 0 Тогда
		ЗаполнитьРаздел6(ЛистыДекларации.Раздел5.СвязанныеЛисты, СписокСохранения, ПараметрыЗаполнения, ТаблицаРаздела6, ПоказателиРаздела.П000050005003, ПоказателиРаздела.П000050006003);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура СобратьТаблицуВычетовЛистаГ2(ЛистыДекларации, ПараметрыЗаполнения)

	ТаблицаВычетов = Новый ТаблицаЗначений;
	ТаблицаВычетов.Колонки.Добавить("ИНН");
	ТаблицаВычетов.Колонки.Добавить("КПП");
	ТаблицаВычетов.Колонки.Добавить("Наименование");
	ТаблицаВычетов.Колонки.Добавить("СуммаДохода");
	ТаблицаВычетов.Колонки.Добавить("СуммаВычета");
	
	Для Каждого ДокументЛистаГ2 Из ЛистыДекларации.ЛистГ2.СтрокиДокументов Цикл
		Если ДокументЛистаГ2.ВидДокумента = "2-НДФЛ" Тогда
			Для Каждого СтрокаНачисления Из ДокументЛистаГ2.ДваНДФЛ_Начисления Цикл
				Если СтрокаНачисления.КодДохода = "2740" Тогда
					СтрокаВычета = ТаблицаВычетов.Добавить();
					СтрокаВычета.ИНН = ДокументЛистаГ2.ИсточникИНН;
					СтрокаВычета.КПП = ДокументЛистаГ2.ИсточникКПП;
					СтрокаВычета.Наименование = ДокументЛистаГ2.ИсточникНаименование;
					СтрокаВычета.СуммаДохода = СтрокаНачисления.СуммаДохода;
					СтрокаВычета.СуммаВычета = СтрокаНачисления.СуммаВычета;
				КонецЕсли; 
			КонецЦикла; 
		Иначе
			Если ДокументЛистаГ2.КодДохода = "2740" Тогда
				СтрокаВычета = ТаблицаВычетов.Добавить();
				СтрокаВычета.ИНН = ДокументЛистаГ2.ИсточникИНН;
				СтрокаВычета.КПП = ДокументЛистаГ2.ИсточникКПП;
				СтрокаВычета.Наименование = ДокументЛистаГ2.ИсточникНаименование;
				СтрокаВычета.СуммаДохода = ДокументЛистаГ2.СуммаДохода;
				СтрокаВычета.СуммаВычета = ДокументЛистаГ2.СуммаВычета;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаВычетов.Свернуть("ИНН,КПП,Наименование", "СуммаДохода,СуммаВычета");
	ПараметрыЗаполнения.Вставить("ВычетыЛистаГ2", ТаблицаВычетов);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел6(ЛистыДекларации, СписокСохранения, ПараметрыЗаполнения, ТаблицаРаздела6, СуммаВозвратаИзБюджета, СуммаДоплатыВБюджет)

	СчетчикСтраниц = СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6.Количество();
	
	Если СуммаВозвратаИзБюджета = СуммаДоплатыВБюджет И СуммаВозвратаИзБюджета = 0 Тогда
		
		// Никто никому не должен.
		СчетчикСтраниц = СчетчикСтраниц + 1;
		Если СчетчикСтраниц > 1 Тогда
			ДобавитьВОтчетРаздел6(СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6, ПараметрыЗаполнения);
		КонецЕсли; 
		
		ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6[0].Данные;
		ДанныеЛиста.П000060001001 = 3;  // 010 1- уплата (доплата) в бюджет; 2 - возврат из бюджета; 3 - отсутствие уплаты (доплаты) в бюджет или возврата из бюджета
		ДанныеЛиста.П000060002003 = "18210102030011000110"; // 020 КБК
		ДанныеЛиста.П000060003003 = АдресВРФОкато; // 030 ОКАТО
		ДанныеЛиста.П000060004003 = 0;  // 040 Сумма налога, подлежащая уплате (доплате) в бюджет (руб.)
		ДанныеЛиста.П000060005003 = 0;  // 050 Сумма налога, подлежащая возврату из бюджета (руб.)
		
	ИначеЕсли СуммаДоплатыВБюджет > 0 Тогда
		
		// Разбираем таблицу по кодам КБК, ОКАТО всегда один и тот же:
		Для Каждого СтрокаРаздела6 Из ТаблицаРаздела6 Цикл
			СтрокаРаздела6.Окато = АдресВРФОкато; // ОКАТО - налогоплательщика
			СтрокаРаздела6.КБК = ?(СтрокаРаздела6.КБК = "182 1 01 02020 01 1000 110", СтрокаРаздела6.КБК, "182 1 01 02030 01 1000 110"); // Либо предприниматель, либо недополученный налог
		КонецЦикла; 
		
		ТаблицаРаздела6.Свернуть("КБК,ОКАТО", "СуммаНалогаНачислено,СуммаНалогаУплачено,СуммаНалогаСВычета,СуммаНалогаКДоплате,СуммаНалогаКВозврату");
		
		Нераспределено = 0 + СуммаДоплатыВБюджет;
		
		Для Каждого СтрокаРаздела6 Из ТаблицаРаздела6 Цикл
			
			Если СтрокаРаздела6.СуммаНалогаНачислено = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СчетчикСтраниц = СчетчикСтраниц + 1;
			Если СчетчикСтраниц > 1 Тогда
				ДобавитьВОтчетРаздел6(СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6, ПараметрыЗаполнения);
			КонецЕсли; 
			ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6[СчетчикСтраниц - 1].Данные;
			ДанныеЛиста.П000060001001 = 1;  // 010 1- уплата (доплата) в бюджет; 2 - возврат из бюджета; 3 - отсутствие уплаты (доплаты) в бюджет или возврата из бюджета
			ДанныеЛиста.П000060002003 = СтрЗаменить(СтрокаРаздела6.КБК, " ", ""); // 020 КБК
			ДанныеЛиста.П000060003003 = СтрокаРаздела6.ОКАТО; // 030 ОКАТО
			СуммаКУплатеПоСтроке = Макс(0, Окр(СтрокаРаздела6.СуммаНалогаНачислено - СтрокаРаздела6.СуммаНалогаУплачено - СтрокаРаздела6.СуммаНалогаСВычета, 0,1));
			ДанныеЛиста.П000060004003 = Мин(СуммаКУплатеПоСтроке, Нераспределено);  // 040 Сумма налога, подлежащая уплате (доплате) в бюджет (руб.)
			ДанныеЛиста.П000060005003 = 0;  // 050 Сумма налога, подлежащая возврату из бюджета (руб.)
			
			Нераспределено = Нераспределено - ДанныеЛиста.П000060004003;
			
		КонецЦикла; 
		
	ИначеЕсли СуммаВозвратаИзБюджета > 0 Тогда
		
		// Разбираем таблицу по кодам КБК и ОКАТО:
		ТаблицаРаздела6.Свернуть("КБК,ОКАТО", "СуммаНалогаНачислено,СуммаНалогаУплачено,СуммаНалогаСВычета,СуммаНалогаКДоплате,СуммаНалогаКВозврату");
		
		Нераспределено = 0 + СуммаВозвратаИзБюджета;
		
		Для Каждого СтрокаРаздела6 Из ТаблицаРаздела6 Цикл
			
			Если СтрокаРаздела6.СуммаНалогаУплачено = 0 Тогда
				// Возмещается только уплаченный налог
				Продолжить;
			КонецЕсли; 
			
			СчетчикСтраниц = СчетчикСтраниц + 1;
			Если СчетчикСтраниц > 1 Тогда
				ДобавитьВОтчетРаздел6(СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6, ПараметрыЗаполнения);
			КонецЕсли; 
			ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6[СчетчикСтраниц - 1].Данные;
			ДанныеЛиста.П000060001001 = 2;  // 010 1- уплата (доплата) в бюджет; 2 - возврат из бюджета; 3 - отсутствие уплаты (доплаты) в бюджет или возврата из бюджета
			ДанныеЛиста.П000060002003 = СтрЗаменить(СтрокаРаздела6.КБК, " ", ""); // 020 КБК
			ДанныеЛиста.П000060003003 = СтрокаРаздела6.ОКАТО; // 030 ОКАТО
			СуммаКВозмещениюПоСтроке = Окр(СтрокаРаздела6.СуммаНалогаУплачено, 0,1);
			ДанныеЛиста.П000060004003 = 0;  // 040 Сумма налога, подлежащая уплате (доплате) в бюджет (руб.)
			ДанныеЛиста.П000060005003 = Мин(СуммаКВозмещениюПоСтроке, Нераспределено);  // 050 Сумма налога, подлежащая возврату из бюджета (руб.)
			
			Нераспределено = Нераспределено - ДанныеЛиста.П000060005003;
			
		КонецЦикла;
		
		Если Нераспределено > 0 Тогда
			
			СчетчикСтраниц = СчетчикСтраниц + 1;
			Если СчетчикСтраниц > 1 Тогда
				ДобавитьВОтчетРаздел6(СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6, ПараметрыЗаполнения);
			КонецЕсли; 
			ДанныеЛиста = СписокСохранения.ДанныеМногостраничныхРазделов.Раздел6[СчетчикСтраниц - 1].Данные;
			ДанныеЛиста.П000060001001 = 2;  // 010 1- уплата (доплата) в бюджет; 2 - возврат из бюджета; 3 - отсутствие уплаты (доплаты) в бюджет или возврата из бюджета
			ДанныеЛиста.П000060002003 = "18210102010011000110"; // 020 КБК
			ДанныеЛиста.П000060003003 = АдресВРФОкато; // 030 ОКАТО
			ДанныеЛиста.П000060004003 = 0;  // 040 Сумма налога, подлежащая уплате (доплате) в бюджет (руб.)
			ДанныеЛиста.П000060005003 = Нераспределено;  // 050 Сумма налога, подлежащая возврату из бюджета (руб.)
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


&НаКлиенте
Процедура ЖильеАдресПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, ЖильеАдресСтруктура);
		ЖильеАдресПредставление = Результат.Представление;
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АдресВРФПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, АдресВРФСтруктура);
		АдресВРФПредставление = Результат.Представление;
		ПерсональныеДанные_ОбновитьЗаголовкиГрупп(ЭтотОбъект);
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры


// Завершение диалогов

&НаКлиенте
Процедура ПередЗакрытиемЗапросСохраненияЗавершение(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаписатьНаСервере();
	Модифицированность = Ложь;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезПомощникаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса; 
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаСервере(Истина, Истина);
		ПараметрыФормы = ПолучитьПараметрыФормыОтчета();
		ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
		ИмяФормыОтчета = ?(ГодОтчета < 2014, "ФормаОтчета2011кв1", "ФормаОтчета2014кв1");
		ОткрытьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма." + ИмяФормыОтчета, ПараметрыФормы);
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СтрокаСтруктуры = ДополнительныеПараметры.СтрокаСтруктуры;
	ТипДокумента = ДополнительныеПараметры.ТипДокумента;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да  Тогда
		Возврат;
	КонецЕсли; 
	
	Модифицированность = Истина;
	
	Если ТипДокумента = "Доходы" Тогда
		СтрокаТаблицы = ТаблицаДокументовДоходов.НайтиСтроки(Новый Структура("ИДЭлемента", СтрокаСтруктуры.ИДЭлемента));
		Если СтрокаТаблицы.Количество() > 0 Тогда
			ТаблицаДокументовДоходов.Удалить(СтрокаТаблицы[0]);
		КонецЕсли; 
	Иначе
		СтрокаТаблицы = ТаблицаДокументовВычета.НайтиСтроки(Новый Структура("ИДЭлемента", СтрокаСтруктуры.ИДЭлемента));
		Если СтрокаТаблицы.Количество() > 0 Тогда
			ТаблицаДокументовВычета.Удалить(СтрокаТаблицы[0]);
		КонецЕсли; 
	КонецЕсли; 
	
	ЭлементыРодителя = СтрокаСтруктуры.ПолучитьРодителя().ПолучитьЭлементы();
	ЭлементыРодителя.Удалить(СтрокаСтруктуры);
	
	Если СтруктураОтчета.ПолучитьЭлементы()[2].ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[2].ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.ИДЭлемента = "!ДобавитьДоход";
		СтрокаСтруктуры.Наименование = "Добавить документ дохода...";
		СтрокаСтруктуры.ИконкаСтроки = БиблиотекаКартинок.ДобавитьЭлементСписка;
		ИДСтроки = СтруктураОтчета.ПолучитьЭлементы()[2].ПолучитьИдентификатор();
		Элементы.СтруктураОтчета.ТекущаяСтрока = ИДСтроки;
		Элементы.СтруктураОтчета.Свернуть(ИДСтроки);
	КонецЕсли; 
	Если СтруктураОтчета.ПолучитьЭлементы()[3].ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаСтруктуры = СтруктураОтчета.ПолучитьЭлементы()[3].ПолучитьЭлементы().Добавить();
		СтрокаСтруктуры.ИДЭлемента = "!ДобавитьВычет";
		СтрокаСтруктуры.Наименование = "Добавить вычет...";
		СтрокаСтруктуры.ИконкаСтроки = БиблиотекаКартинок.ДобавитьЭлементСписка;
		ИДСтроки = СтруктураОтчета.ПолучитьЭлементы()[3].ПолучитьИдентификатор();
		Элементы.СтруктураОтчета.ТекущаяСтрока = ИДСтроки;
		Элементы.СтруктураОтчета.Свернуть(ИДСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидДокументаИДобавитьВСтруктуруЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ГруппаСтруктуры = ДополнительныеПараметры.ГруппаСтруктуры;
	
	
	Выбор = ВыбранныйЭлемент;
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Модифицированность = Истина;
	РазрешеноКопировать = Истина;
	
	Если Выбор.Значение = "2-НДФЛ" Тогда
		СтрокаДокумента = ТаблицаДокументовДоходов.Добавить();
		СтрокаДокумента.ВидДокумента = "2-НДФЛ";
		
		СтрокаДокумента.СтавкаНалога = 13;
		
		ИтогСправки = СтрокаДокумента.ДваНДФЛ_итоги.Добавить();
		ИтогСправки.НаименованиеПоказателя = "5.1. Общая сумма дохода";
		ИтогСправки.ЗапрещеноРедактировать = Истина;
		
		ИтогСправки = СтрокаДокумента.ДваНДФЛ_итоги.Добавить();
		ИтогСправки.НаименованиеПоказателя = "5.2. Налоговая база";
		ИтогСправки.ЗапрещеноРедактировать = Истина;
		
		ИтогСправки = СтрокаДокумента.ДваНДФЛ_итоги.Добавить();
		ИтогСправки.НаименованиеПоказателя = "5.3. Сумма налога исчисленная";
		ИтогСправки.ЗапрещеноРедактировать = Истина;
		
		ИтогСправки = СтрокаДокумента.ДваНДФЛ_итоги.Добавить();
		ИтогСправки.НаименованиеПоказателя = "5.4. Сумма налога удержанная";
		//ИтогСправки.ЗапрещеноРедактировать = Истина;
		
		ИтогСправки = СтрокаДокумента.ДваНДФЛ_итоги.Добавить();
		ИтогСправки.НаименованиеПоказателя = "5.5. Сумма налога перечисленная";
		//ИтогСправки.ЗапрещеноРедактировать = Истина;
		
		ИтогСправки = СтрокаДокумента.ДваНДФЛ_итоги.Добавить();
		ИтогСправки.НаименованиеПоказателя = "5.6. Сумма налога, излишне удержанная налоговым агентом";
		ИтогСправки.ЗапрещеноРедактировать = Истина;
		
		ИтогСправки = СтрокаДокумента.ДваНДФЛ_итоги.Добавить();
		ИтогСправки.НаименованиеПоказателя = "5.7. Сумма налога, не удержанная налоговым агентом";
		ИтогСправки.ЗапрещеноРедактировать = Истина;
		
		
	ИначеЕсли Выбор.Значение = "Произвольный" Тогда
		СтрокаДокумента = ТаблицаДокументовДоходов.Добавить();
		СтрокаДокумента.ВидДокумента = "Прочий доход";
		
		СтрокаДокумента.СтавкаНалога = 13;
		СтрокаДокумента.ДатаДохода = Дата(ГодОтчета, 1, 1);
		
	ИначеЕсли Выбор.Значение = "Валютный" Тогда
		СтрокаДокумента = ТаблицаДокументовДоходов.Добавить();
		СтрокаДокумента.ВидДокумента = "Доход в валюте";
		
		СтрокаДокумента.СтавкаНалога = 13;
		СтрокаДокумента.ДатаДохода       = Дата(ГодОтчета, 1, 1);
		СтрокаДокумента.КурсНаДатуДохода = 1;
		СтрокаДокумента.ДатаУплатыНалога = Дата(ГодОтчета, 1, 1);
		СтрокаДокумента.КурсНаДатуУплатыНалога = 1;
		
	ИначеЕсли Выбор.Значение = "Предприниматель" Тогда
		СтрокаДокумента = ТаблицаДокументовДоходов.Добавить();
		СтрокаДокумента.ВидДокумента = "Доход предпринимателя";
		
		СтрокаДокумента.СтавкаНалога = 13;
		СтрокаДокумента.ВидДеятельностиИндекс = 1;
		СтрокаМесяца = СтрокаДокумента.ОтчетПредпринимателя.Добавить();
		
	ИначеЕсли Выбор.Значение = "Станданртные" Тогда
		СтрокаДокумента = ТаблицаДокументовВычета.Добавить();
		СтрокаДокумента.ВидДокумента = "Стандартные вычеты";
		РазрешеноКопировать = Ложь;
		
		Для Счетчик = 1 По 12 Цикл
			СтрокаВычета = СтрокаДокумента.СтандартныеВычеты.Добавить();
			СтрокаВычета.НомерМесяца          = Счетчик;
			СтрокаВычета.ЕдинственныйРодитель = 1;
		КонецЦикла; 
		
		СтрокаДокумента.ИДЭлемента = "Стандартный";
		
	ИначеЕсли Выбор.Значение = "Пенсионный" Тогда
		СтрокаДокумента = ТаблицаДокументовВычета.Добавить();
		СтрокаДокумента.ВидДокумента = "Пенсионный взнос";
		
		СтрокаДокумента.ДатаДоговора = Дата(ГодОтчета, 1, 1);
		СтрокаДокумента.ЗастрахованноеЛицо = 1;
		
	ИначеЕсли Выбор.Значение = "Социальные" Тогда
		СтрокаДокумента = ТаблицаДокументовВычета.Добавить();
		СтрокаДокумента.ВидДокумента = "Социальные вычеты";
		РазрешеноКопировать = Ложь;
		
		Для Каждого Элемент Из СтруктураПредопределенныхЗначений.ПрочиеСтандартныеВычеты Цикл
			СтрокаСтандартногоВычета = СтрокаДокумента.ПрочиеСоциальныеВычеты.Добавить();
			СтрокаСтандартногоВычета.НазначениеРасхода = Элемент.Значение;
		КонецЦикла; 
		
	ИначеЕсли Выбор.Значение = "Имущественный" Тогда
		СтрокаДокумента = ТаблицаДокументовВычета.Добавить();
		СтрокаДокумента.ВидДокумента = "Имущественный вычет";
		РазрешеноКопировать = Ложь;
		
		СтрокаДокумента.ЖильеСпособПриобретения       = 1;
		СтрокаДокумента.ЖильеВидСобственности         = 1;
		СтрокаДокумента.ЖильеНаименование             = 1;
		СтрокаДокумента.ЖильеГодНачалаВычета = ГодОтчета;
		СтрокаДокумента.ЖильеПризнакНалогоплательщика = 1;
		СтрокаДокумента.ЖильеДоляЧислитель            = 1;
		СтрокаДокумента.ЖильеДоляЗнаменатель          = 1;
		СтрокаДокумента.ЖильеАдресСтруктура           = ПолучитьСтруктуруАдресаВРФ(АдресВРФСтруктура);
		СтрокаДокумента.ЖильеАдресПредставление       = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," 
		+ СтрокаДокумента.ЖильеАдресСтруктура.Индекс + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.Регион + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.Район + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.Город + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.НаселенныйПункт + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.Улица + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.Дом + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.Корпус + ","
		+ СтрокаДокумента.ЖильеАдресСтруктура.Квартира);
		
		
	ИначеЕсли Выбор.Значение = "Убытки" Тогда
		СтрокаДокумента = ТаблицаДокументовВычета.Добавить();
		СтрокаДокумента.ВидДокумента = "Убыток по ЦБ за прошлые годы";
		РазрешеноКопировать = Ложь;
		
	КонецЕсли; 
	СтрокаДокумента.СтатусНалогоплательщика = СтатусНалогоплательщика;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ИДЭлемента) Тогда
		СтрокаДокумента.ИДЭлемента = Строка(Новый УникальныйИдентификатор);
	КонецЕсли; 
	
	Если ГруппаСтруктуры.ПолучитьЭлементы().Количество() = 1 
		И Лев(ГруппаСтруктуры.ПолучитьЭлементы()[0].ИДЭлемента, 1) = "!" Тогда
		ГруппаСтруктуры.ПолучитьЭлементы().Очистить();
	КонецЕсли; 
	
	СтрокаСтруктуры = ГруппаСтруктуры.ПолучитьЭлементы().Добавить();
	СтрокаСтруктуры.ИДЭлемента = СтрокаДокумента.ИДЭлемента;
	СтрокаСтруктуры.Наименование = СтрокаДокумента.ВидДокумента;
	СтрокаСтруктуры.ИконкаСтроки = Выбор.Картинка;
	СтрокаСтруктуры.РазрешеноКопировать = РазрешеноКопировать;
	СтрокаСтруктуры.РазрешеноУдалять = Истина;
	
	Элементы.СтруктураОтчета.ТекущаяСтрока = СтрокаСтруктуры.ПолучитьИдентификатор();

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 
