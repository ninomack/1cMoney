////////////////////////////////////////////////////////////////////////////////
// Модуль формы <ПомощникЗаполнения2016кв1>
//	Принцип работы: на соновании документов о доходах и расходах заполняет листы декларации
//	Сохраняет данные помощника вместе с данными самого отчета в документах БРО РегламентированныйОтчет
//	Если в данных отчета документа РегламентированныйОтчет нет данных помощника, значит бланки декларации заполняются вручную
//  
//Параметры формы:  
//	мСохраненныйДок - ДокументСсылка.РегламентированныйОтчет - Документ, в котором сохранены данные отчета 
//	мКопируемыйДок  - ДокументСсылка.РегламентированныйОтчет - Документ, из которого нужно скопировать\обработать данные помощника
//  
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте 
Перем МоментМоидифицированности;
&НаКлиенте 
Перем МоментПроверки;

&НаСервере 
Перем ЭтотОтчет;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Дополнительные параметры формы используются для сокращения обращений на сервер
	ЗаполнитьДопРеквизитыФормы();
	
	// Чтение данных помощника:
	СсылкаНаДокументОтчета = Параметры.мСохраненныйДок;
	ЗаполнитьТаблицыПомощникаДаннымиОтчета();
	
	// Заполним реквизиты помощника значениями по умолчанию
	ЗаполнитьЗначениямиПоУмолчанию(ЭтотОбъект);
	
	// Обновляем заголовки
	ОбновитьПанельНавигации(ЭтотОбъект);
	ОбновитьЗаголовкиРаздела(ЭтотОбъект, Неопределено);
	
	// Устанавливаем видимость / доступность элементов
	УправлениеФормой(ЭтотОбъект);
	
	// Запомним текущие значения некоторых реквизитов, для возможности запроса подтверждения изменений
	ДопРеквизитыФормы.Вставить("ТекущееЗначениеНалогоплательщикСтатус", НалогоплательщикСтатус);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЛюбойРеквизитПриИзменении(Элемент)

	УстановитьМодифицированность();

КонецПроцедуры
 
&НаКлиенте
Процедура Раздел1КнопкаНажатие(Элемент)
	СменитьРазделКлиент("Раздел1");
КонецПроцедуры

&НаКлиенте
Процедура Раздел2КнопкаНажатие(Элемент)
	СменитьРазделКлиент("Раздел2");
КонецПроцедуры

&НаКлиенте
Процедура Раздел3КнопкаНажатие(Элемент)
	СменитьРазделКлиент("Раздел3");
КонецПроцедуры

&НаКлиенте
Процедура Раздел4КнопкаНажатие(Элемент)
	СменитьРазделКлиент("Раздел4");
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыРазделовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Раздел1НадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СменитьРазделКлиент("Раздел1");
КонецПроцедуры

&НаКлиенте
Процедура Раздел2НадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СменитьРазделКлиент("Раздел2");
КонецПроцедуры

&НаКлиенте
Процедура Раздел3НадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СменитьРазделКлиент("Раздел3");
КонецПроцедуры

&НаКлиенте
Процедура Раздел4НадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СменитьРазделКлиент("Раздел4");
КонецПроцедуры

&НаКлиенте
Процедура СписокСообщенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = СписокСообщений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	СменитьРазделКлиент("Раздел" + ДанныеСтроки.НомерРаздела);
	ТекущийЭлемент = Элементы[ДанныеСтроки.Элемент];
	Если ДанныеСтроки.Строка >= 0  Тогда
		Элементы[ДанныеСтроки.Элемент].ТекущаяСтрока = ДанныеСтроки.Строка;
		Попытка
			Элементы[ДанныеСтроки.Элемент].ИзменитьСтроку();
		Исключение
			// Запись в журнал не требуется
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры
 

#КонецОбласти


#Область ОбработчикиСобытийЭлементов_Раздел1

&НаКлиенте
Процедура КодИФНСПриИзменении(Элемент)
	
	УстановитьМодифицированность();
	Если КодИФНС = "" Тогда
		НаименованиеИФНС = НСтр("ru = '<Инспекция не выбрана>'") ;
		Возврат;
	КонецЕсли; 
	
	КодИФНСПриИзмененииНаСервере(КодИФНС);
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("КодИФНС", ?(ЗначениеЗаполнено(Элемент.ТекстРедактирования), Элемент.ТекстРедактирования, КодИФНС));
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2016кв1", "ВыборНалоговойИнспекции"), ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		КодИФНС = ВыбранноеЗначение.Код;
		НаименованиеИФНС = ВыбранноеЗначение.Наименование;
		УстановитьМодифицированность();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДекларацииПриИзменении(Элемент)
	
	УстановитьМодифицированность();
	Если ВидДекларации = 0 И НомерКорректировки <> 0 Тогда
		НомерКорректировки = 0;
	ИначеЕсли ВидДекларации <> 0 И НомерКорректировки = 0 Тогда
		НомерКорректировки = 1;
	КонецЕсли;
	
	Элементы.НомерКорректировки.Доступность = ВидДекларации <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВРФТипАдресаПриИзменении(Элемент)
	Элементы.АдресЗаПределамиРФ.Видимость = АдресВРФТипАдреса = 2;
	УстановитьМодифицированность();
КонецПроцедуры

&НаКлиенте
Процедура АдресВРФПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначенияПолей = Новый СписокЗначений;
	Для Каждого ЭлементСтруктуры Из АдресВРФСтруктура Цикл
		ЗначенияПолей.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура("Заголовок,ЗначенияПолей,Представление,ВидКонтактнойИнформации",
			НСтр("ru = 'Адрес в РФ'"), ЗначенияПолей, АдресВРФПредставление, 
			ДопРеквизитыФормы.ВидКонтактнойИнформации_АдресВРФ);
			
	Оповещение = Новый ОписаниеОповещения("АдресВРФПредставлениеНачалоВыбораЗавершение", ЭтотОбъект);
	
	// ДЕНЬГИ
	// Замена устаревшей функции БСП:
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	// Конец ДЕНЬГИ
	
КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикСтатусПриИзменении(Элемент)
	
	Если НалогоплательщикСтатус = ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус Тогда
		Возврат;
	КонецЕсли; 
	
	НужноОчищатьДанные = ТаблицаДокументовФизЛица.Количество() > 0 
			ИЛИ ТаблицаДокументовПредпринимателя.Количество() > 0 
			ИЛИ ТаблицаИмущественныхВычетов.Количество() > 0
			ИЛИ ТаблицаСтандартныхВычетов.Итог("ВычетНаРаботника") > 0
			ИЛИ ТаблицаСтандартныхВычетов.Итог("ВычетНаДетей") > 0
			ИЛИ ТаблицаСоциальныхСтраховыхВычетов.Количество() > 0
			ИЛИ ТаблицаСоциальныхВычетов.Итог("СуммаВычета") > 0;
	
	Если НужноОчищатьДанные Тогда
		ТекстВопроса = НСтр("ru = 'При изменении статуса будет очищена вся информация о полученных доходах и вычетах.
				|Изменить статус налогоплательщика?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Оповещение = Новый ОписаниеОповещения("НалогоплательщикСтатусПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Помощник заполнения 3-НДФЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	Иначе
		ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус = НалогоплательщикСтатус;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементов_Раздел2

&НаКлиенте
Процедура ГруппаСтраницыРаздела2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоясненияДокументовФизЛицаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ТаблицаДокументовФизЛицаПередНачаломДобавленияЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(Оповещение, СписокВидовДокументовФизЛица());
	
КонецПроцедуры

// Доходы физического лица

&НаКлиенте
Процедура ТаблицаДокументовФизЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если НЕ Копирование Тогда
		
		Оповещение = Новый ОписаниеОповещения("ТаблицаДокументовФизЛицаПередНачаломДобавленияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокВидовДокументовФизЛица(), Элементы.ДекорацияМенюДокументовФизЛица);
		
	Иначе
		
		УстановитьМодифицированность();
		ДанныеСтроки = Элементы.ТаблицаДокументовФизЛица.ТекущиеДанные;
		
		НоваяСтрока = ТаблицаДокументовФизЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки, , "ШапкаДокумента,Строки2НДФЛ,Вычеты2НДФЛ,ДоходыТоварищества");
		НоваяСтрока.ШапкаДокумента = КопияКоллекции(ДанныеСтроки.ШапкаДокумента);
		Если НоваяСтрока.ТипДокумента = "2-НДФЛ" Тогда
			Для каждого СтрокаСправки Из ДанныеСтроки.Строки2НДФЛ Цикл
				КопияСтроки = НоваяСтрока.Строки2НДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаСправки);
			КонецЦикла;
			Для каждого СтрокаСправки Из ДанныеСтроки.Вычеты2НДФЛ Цикл
				КопияСтроки = НоваяСтрока.Вычеты2НДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаСправки);
			КонецЦикла;
		КонецЕсли;
		Если НоваяСтрока.ТипДокумента = "Инвест. товарищество" Тогда
			Для каждого СтрокаТоварищества Из ДанныеСтроки.ДоходыТоварищества Цикл
				КопияСтроки = НоваяСтрока.ДоходыТоварищества.Добавить();
				ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаТоварищества);
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока.ИДДокумента = Строка(Новый УникальныйИдентификатор);
		
		ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
		Элементы.ТаблицаДокументовФизЛица.ТекущаяСтрока = ИДСтроки;
		
		УправлениеФормой(ЭтотОбъект);
		
		ОткрытьФормуДокументаДохода(ИДСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовФизЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуДокументаДохода(Элементы.ТаблицаДокументовФизЛица.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовФизЛицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	МассивСтрок = Новый Массив;
	Для Каждого ИДСтроки Из Элемент.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(ИДСтроки);
	КонецЦикла; 
	
	Оповещение = Новый ОписаниеОповещения("УдалениеСтрокЗавершение", ЭтотОбъект, Новый Структура("ИмяТаблицы,ВыделенныеСтроки", Элемент.Имя, МассивСтрок));
	ТекстВопроса = НСтр("ru = 'Удалить выделенные документы дохода?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Помощник заполнения 3-НДФЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Доходы предпринимателя

&НаКлиенте
Процедура ПредпринимательВычетПодтвержденДокументамиПриИзменении(Элемент)
	
	// Вставить содержимое обработчика.
	УстановитьМодифицированность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПредпринимателяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = истина;
	УстановитьМодифицированность();
	
	НоваяСтрока = ТаблицаДокументовПредпринимателя.Добавить();
	НоваяСтрока.ИДДокумента = Строка(Новый УникальныйИдентификатор);

	Если Копирование Тогда
		
		ДанныеСтроки = Элементы.ТаблицаДокументовПредпринимателя.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки, , "СтрокиОтчетаПредпринимателя,ИДДокумента");
		Для каждого СтрокаОтчета Из ДанныеСтроки.СтрокиОтчетаПредпринимателя Цикл
			КопияСтроки = НоваяСтрока.СтрокиОтчетаПредпринимателя.Добавить();
			ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаОтчета);
		КонецЦикла;
		 
		
	Иначе
		
		ЗаполнитьПоУмолчаниюДоходПредпринимателя(НоваяСтрока);
		
	КонецЕсли;
	
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ТаблицаДокументовПредпринимателя.ТекущаяСтрока = ИДСтроки;
	
	ОткрытьФормуДоходаПредпринимателя(ИДСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПредпринимателяПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуДоходаПредпринимателя(Элементы.ТаблицаДокументовПредпринимателя.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПредпринимателяПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	МассивСтрок = Новый Массив;
	Для Каждого ИДСтроки Из Элемент.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(ИДСтроки);
	КонецЦикла; 
	
	Оповещение = Новый ОписаниеОповещения("УдалениеСтрокЗавершение", ЭтотОбъект, Новый Структура("ИмяТаблицы,ВыделенныеСтроки", Элемент.Имя, МассивСтрок));
	ТекстВопроса = НСтр("ru = 'Удалить выделенные доходы предпринимателя?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Помощник заполнения 3-НДФЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпринимательГодОбразованияКФХПриИзменении(Элемент)
	
	Если ПредпринимательГодОбразованияКФХ = 0 Тогда
		ПредпринимательНеоблагаемыйДоходКФХ = 0;
	КонецЕсли; 
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементов_Раздел3

// Страница Стандартные вычета

&НаКлиенте
Процедура ТаблицаСтандартныхВычетовВычетНаРаботникаПриИзменении(Элемент)
	ЗаполнитьЗначенияТаблицыСтандартныхВычетов(Элементы.ТаблицаСтандартныхВычетов.ТекущиеДанные, "ВычетНаРаботника");
КонецПроцедуры
 
&НаКлиенте
Процедура ТаблицаСтандартныхВычетовВычетНаДетейПриИзменении(Элемент)
	ЗаполнитьЗначенияТаблицыСтандартныхВычетов(Элементы.ТаблицаСтандартныхВычетов.ТекущиеДанные, "ВычетНаДетей");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтандартныхВычетовКоличествоДетейИнвалидовПриИзменении(Элемент)
	ЗаполнитьЗначенияТаблицыСтандартныхВычетов(Элементы.ТаблицаСтандартныхВычетов.ТекущиеДанные, "КоличествоДетейИнвалидов");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтандартныхВычетовКоличествоДетейДоТретьегоПриИзменении(Элемент)
	ЗаполнитьЗначенияТаблицыСтандартныхВычетов(Элементы.ТаблицаСтандартныхВычетов.ТекущиеДанные, "КоличествоДетейДоТретьего");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтандартныхВычетовКоличествоДетейСТретьегоПриИзменении(Элемент)
	ЗаполнитьЗначенияТаблицыСтандартныхВычетов(Элементы.ТаблицаСтандартныхВычетов.ТекущиеДанные, "КоличествоДетейСТретьего");
КонецПроцедуры

// Имущественный вычет

&НаКлиенте
Процедура ТаблицаИмущественныхВычетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	УстановитьМодифицированность();
	
	НоваяСтрока = ТаблицаИмущественныхВычетов.Добавить();
	НоваяСтрока.ИДЭлемента = Строка(Новый УникальныйИдентификатор);
	
	Если Копирование Тогда
		
		ДанныеСтроки = Элементы.ТаблицаИмущественныхВычетов.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки, , "ИДЭлемента,ЖильеАдресСтруктура");
		НоваяСтрока.ЖильеАдресСтруктура = КопияКоллекции(ДанныеСтроки.ЖильеАдресСтруктура);
		
	Иначе
		
		НоваяСтрока.ЖильеНаименование = 2; //жилой дом(1), квартира(2), комната(3), доля (доли) в жилом доме, квартире, комнате, земельном участке(4), земельный участок, предоставленный для индивидуального жилищного строительства(5), земельный участок, на котором расположен жилой дом(6), жилой дом с земельным участком(7)
		НоваяСтрока.ЖильеВидСобственности = 1; //Собственность(1), Собственность общая долевая(2), Собственность общая совместная(3)
		НоваяСтрока.ЖильеПризнакНалогоплательщика = 1; // Собственник(1), супруг(а) собственника(2)
		НоваяСтрока.ЖильеСпособПриобретения = 1; //Покупка(1), Инвестирование(2)
		НоваяСтрока.ЖильеАдресСтруктура     = ПолучитьСтруктуруАдресаВРФ(НоваяСтрока.ЖильеАдресСтруктура);
		НоваяСтрока.ЖильеАдресПредставление = НоваяСтрока.ЖильеАдресСтруктура.Представление;
		НоваяСтрока.ЖильеГодНачалаВычета    = 2015;
		
	КонецЕсли; 
	
	ОткрытьФормуЖилья(НоваяСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмущественныхВычетовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуЖилья(Элементы.ТаблицаИмущественныхВычетов.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИмущественныхВычетовПриИзменении(Элемент)
	ПересчитатьИтогиИмущественногоВычета();
КонецПроцедуры

// Пенсионные взносы

&НаКлиенте
Процедура ТаблицаСоциальныхСтраховыхВычетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	УстановитьМодифицированность();
	НоваяСтрока = ТаблицаСоциальныхСтраховыхВычетов.Добавить();
	
	Если Копирование Тогда
		
		ДанныеСтроки = Элементы.ТаблицаСоциальныхСтраховыхВычетов.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
	КонецЕсли;
	 
	НоваяСтрока.ИДЭлемента = Строка(Новый УникальныйИдентификатор);
	
	ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ТаблицаСоциальныхСтраховыхВычетов.ТекущаяСтрока = ИДСтроки;
	
	ОткрытьФормуПенсионногоВзноса(ИДСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоциальныхСтраховыхВычетовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуПенсионногоВзноса(Элементы.ТаблицаСоциальныхСтраховыхВычетов.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоциальныхСтраховыхВычетовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	МассивСтрок = Новый Массив;
	Для Каждого ИДСтроки Из Элемент.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(ИДСтроки);
	КонецЦикла; 
	
	Оповещение = Новый ОписаниеОповещения("УдалениеСтрокЗавершение", ЭтотОбъект, Новый Структура("ИмяТаблицы,ВыделенныеСтроки", Элемент.Имя, МассивСтрок));
	ТекстВопроса = НСтр("ru = 'Удалить выделенные взносы в пенсионный фонд?'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , НСтр("ru = 'Помощник заполнения 3-НДФЛ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры


// Убытки по ценным бумажкам

&НаКлиенте
Процедура ТаблицаУбытковПоЦеннымБумагамГодПриИзменении(Элемент)
	
	ИДСтроки = Элементы.ТаблицаУбытковПоЦеннымБумагам.ТекущаяСтрока;
	НомерГода = Элементы.ТаблицаУбытковПоЦеннымБумагам.ТекущиеДанные.Год;
	СтрокаНайдена = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаУбытковПоЦеннымБумагам Цикл
		Если СтрокаТаблицы.ПолучитьИдентификатор() = ИДСтроки Тогда
			СтрокаНайдена = Истина;
			Продолжить;
		КонецЕсли; 
		Если СтрокаНайдена И НомерГода < ГодОтчета Тогда
			НомерГода = ?(НомерГода = 0, 0, НомерГода + 1);
			СтрокаТаблицы.Год = НомерГода;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвестиционныйВычетОтчетногоПериодаПриИзменении(Элемент)
	
	Если ИнвестиционныйВычетОтчетногоПериода > 400000 Тогда
		ИнвестиционныйВычетОтчетногоПериода = 400000;
	КонецЕсли;
	
	УстановитьМодифицированность();
	
КонецПроцедуры
 


#КонецОбласти


#Область ОбработчикиСобытийЭлементов_Раздел4

&НаКлиенте
Процедура ТаблицаИмущественныхВычетовИтогиПриИзменении(Элемент)
	
	ПересчитатьИтогиИмущественногоВычета();
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьДекларацию(Команда)
	
	ВыполнитьПроверку();
	Если СписокСообщений.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибок не обнаружено.'") );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельСообщений(Команда)
	Элементы.ГруппаСписокСообщений.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПростойБланк(Команда)
	
	ПоказатьБланкКлиент("MXL");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДекларацию(Команда)
	
	ПоказатьБланкКлиент("PDF");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДекларациюВФайл(Команда)
	
	// Перед выводом отчета данные должны быть сохранены
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Перед выгрузкой в файл необходимо сохранить сделанные изменения.
			|Продолжить с записью изменений?'");
		Оповещение = Новый ОписаниеОповещения("ВыгрузитьВФайлКлиентЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Помощник заполнения 3-НДФЛ");
		
	Иначе
		
		ВыгрузитьВФайл();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезПомощника(Команда)
	
	ТекстВопроса = НСтр("ru = 'После отказа от ""Помощника заполнения"" вы сможете заполнять декларацию только вручную.
			|Хотите продолжить заполнение декларации без ""Помощника заполнения""?'");
			
	Оповещение= Новый ОписаниеОповещения("ПродолжитьБезПомощникаЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Заголовок);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции


&НаКлиентеНаСервереБезКонтекста 
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;

	Элементы.НомерКорректировки.Доступность = Форма.ВидДекларации <> 0;
	Элементы.АдресЗаПределамиРФ.Видимость   = Форма.АдресВРФТипАдреса = 2;
	
	
	Элементы.ГруппаКФХ.Доступность = Форма.НалогоплательщикСтатус = 1;
	Элементы.ПредпринимательНеоблагаемыйДоходКФХ.Доступность = Элементы.ГруппаКФХ.Доступность И Форма.ПредпринимательГодОбразованияКФХ > 0;
	
	Элементы.ТекстВычетаНерезидента.Видимость = Форма.НалогоплательщикСтатус = 2;
	Элементы.ГруппаСтаницыРаздела3.Видимость = Форма.НалогоплательщикСтатус = 1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопРеквизитыФормы()

	ДопРеквизитыФормы = Новый Структура;
	
	// Иконки для оформления разделов 
	ДопРеквизитыФормы.Вставить("ИконкиРазделов", Новый Структура);
	Для Счетчик = 1 По 4 Цикл
		ДопРеквизитыФормы.ИконкиРазделов.Вставить("Раздел" + Счетчик + "_Активно",   БиблиотекаКартинок["Этап" + Счетчик + "_3_24"]);
		ДопРеквизитыФормы.ИконкиРазделов.Вставить("Раздел" + Счетчик + "_Выключено", БиблиотекаКартинок["Этап" + Счетчик + "_1_24"]);
		ДопРеквизитыФормы.ИконкиРазделов.Вставить("Раздел" + Счетчик + "_Неактивно", БиблиотекаКартинок["Этап" + Счетчик + "_2_24"]);
	КонецЦикла;
	
	// Иконки для оформления списков
	МакетИконок = ОбъектЭтогоОтчета().ПолучитьМакет("Иконки");
	ДопРеквизитыФормы.Вставить("ИконкиСписков", Новый Структура);
	Для каждого Рисунок Из МакетИконок.Рисунки Цикл
		ДопРеквизитыФормы.ИконкиСписков.Вставить(рисунок.Имя, рисунок.Картинка);
	КонецЦикла;
	
	// Шрифты для форматированных строк
	ДопРеквизитыФормы.Вставить("Шрифты", Новый Структура);
	ДопРеквизитыФормы.Шрифты.Вставить("ЗаголовокРаздела", Новый Шрифт("Tahoma", 12, Истина));
	ДопРеквизитыФормы.Шрифты.Вставить("ЗаголовокРаздела2", Новый Шрифт("Tahoma", 12, Ложь));
	ДопРеквизитыФормы.Шрифты.Вставить("ТекстРаздела", Новый Шрифт("Tahoma", 10, Ложь));

	// Текущий раздел помощника по умолчанию
	ДопРеквизитыФормы.Вставить("ТекущийРаздел", "Раздел1");
	
	// Прочие параметры для сокращения серверных вызовов
	ДопРеквизитыФормы.Вставить("ВидКонтактнойИнформации_АдресВРФ", Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	ДопРеквизитыФормы.Вставить("ПустаяСтрана", Справочники.СтраныМира.ПустаяСсылка());
	ДопРеквизитыФормы.Вставить("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	
КонецПроцедуры

&НаСервере
Функция ОбъектЭтогоОтчета()

	Если ЭтотОтчет = Неопределено Тогда
		ЭтотОтчет = РеквизитФормыВЗначение("Отчет");
	КонецЕсли;
	
	Возврат ЭтотОтчет;

КонецФункции

// Заполняет реквизиты помощника значениями по умолчанию
//	Используется при открытии новой декларации или после очистки данных
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначениямиПоУмолчанию(Форма)

	// Заполнение Раздела 1
	ТекДата = ТекущаяДатаКлиентСервер();
	Если НЕ ЗначениеЗаполнено(Форма.ГодОтчета) Тогда
		Если Месяц(ТекДата) < 5 Тогда
			Форма.ГодОтчета	= Год(ТекДата) - 1;
		Иначе
			Форма.ГодОтчета	= Год(ТекДата);
		КонецЕсли;
	КонецЕсли;
	 
	Если НЕ ЗначениеЗаполнено(Форма.ДатаПодписи) Тогда
		Форма.ДатаПодписи  = ТекДата;
	КонецЕсли;
	 
	Если Форма.ВидДекларации <> 0 И НЕ ЗначениеЗаполнено(Форма.НомерКорректировки) Тогда
		Форма.НомерКорректировки = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ДокументКодВида) Тогда
		Форма.ДокументКодВида  = "21";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.АдресВРФТипАдреса) Тогда
		Форма.АдресВРФТипАдреса  = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.НалогоплательщикСтатус) Тогда
		Форма.НалогоплательщикСтатус  = 1;
	КонецЕсли;
	 
	Если НЕ ЗначениеЗаполнено(Форма.НалогоплательщикКатегория) Тогда
		Форма.НалогоплательщикКатегория  = "760";
	КонецЕсли;
	
	Если Форма.ТаблицаСтандартныхВычетов.Количество() = 0 Тогда
		Для Счетчик = 1 По 12 Цикл
			НоваяСтрока = Форма.ТаблицаСтандартныхВычетов.Добавить();
			НоваяСтрока.НомерМесяца = Счетчик;
		КонецЦикла;
	КонецЕсли;
	
	Форма.АдресВРФСтруктура     = ПолучитьСтруктуруАдресаВРФ(Форма.АдресВРФСтруктура);
	Форма.АдресВРФПредставление = Форма.АдресВРФСтруктура.Представление;
	
	Если НЕ ЗначениеЗаполнено(Форма.НалогоплательщикСтрана) Тогда
		Форма.НалогоплательщикСтрана = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли; 
	
	Если Форма.ТаблицаСоциальныхВычетов.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.ТаблицаСоциальныхВычетов.Добавить();
		НоваяСтрока.КодВычета          = "090";
		НоваяСтрока.НаименованиеВычета = "Сумма пожертвований";
		
		НоваяСтрока = Форма.ТаблицаСоциальныхВычетов.Добавить();
		НоваяСтрока.КодВычета          = "100";
		НоваяСтрока.НаименованиеВычета = "Обучение детей (не более 50000 руб. за ребенка)";
		
		НоваяСтрока = Форма.ТаблицаСоциальныхВычетов.Добавить();
		НоваяСтрока.КодВычета          = "110";
		НоваяСтрока.НаименованиеВычета = "Дорогостоящее лечение";
		
		НоваяСтрока = Форма.ТаблицаСоциальныхВычетов.Добавить();
		НоваяСтрока.КодВычета          = "130";
		НоваяСтрока.НаименованиеВычета = "За обучение свое или родственников";
		
		НоваяСтрока = Форма.ТаблицаСоциальныхВычетов.Добавить();
		НоваяСтрока.КодВычета          = "140";
		НоваяСтрока.НаименованиеВычета = "Лечение (кроме дорогостоящего)";
		
		НоваяСтрока = Форма.ТаблицаСоциальныхВычетов.Добавить();
		НоваяСтрока.КодВычета          = "150";
		НоваяСтрока.НаименованиеВычета = "Добровольное личное страхование";
		
	КонецЕсли;

	Если Форма.ТаблицаИмущественныхВычетовИтоги.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.ТаблицаИмущественныхВычетовИтоги.Добавить();
		НоваяСтрока.КодВычета          = "140/150";
		НоваяСтрока.НаименованиеВычета = "Вычет, принятый к учету в прошлые годы";
		
		НоваяСтрока = Форма.ТаблицаИмущественныхВычетовИтоги.Добавить();
		НоваяСтрока.КодВычета          = "160/170";
		НоваяСтрока.НаименованиеВычета = "Остаток вычета, перешедший с прошлого года";
		
		НоваяСтрока = Форма.ТаблицаИмущественныхВычетовИтоги.Добавить();
		НоваяСтрока.КодВычета          = "180/190";
		НоваяСтрока.НаименованиеВычета = "Вычет, предоставленный налоговыми агентами в отчетном периоде";
		
	КонецЕсли;
	
	Если Форма.ТаблицаУбытковПоЦеннымБумагам.Количество() < 10 Тогда
		НачальныйГод = Форма.ГодОтчета - 11;
		Для Счетчик = 1 По 10 Цикл
			НоваяСтрока = Форма.ТаблицаУбытковПоЦеннымБумагам.Добавить();
			НоваяСтрока.Год = НачальныйГод + Счетчик;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КопияКоллекции(ОригинальнаяКоллекция)

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ОригинальнаяКоллекция));
	ОписаниеТипаОригинала = Новый ОписаниеТипов(МассивТипов);
	
	Результат = ОписаниеТипаОригинала.ПривестиЗначение(Неопределено);
	
	СпособДобавления = "Вставить";
	КоллекцияПолей   = Неопределено;
	Если МассивТипов[0] = Тип("ТаблицаЗначений") Тогда
		СпособДобавления = "Добавить";
		КоллекцияПолей = ОригинальнаяКоллекция.Колонки;
	ИначеЕсли МассивТипов[0] = Тип("Массив") Тогда
		СпособДобавления = "Добавить";
	КонецЕсли; 
	
	Для Каждого ЭлементКоллекции Из ОригинальнаяКоллекция Цикл
		
		Если СпособДобавления = "Вставить" Тогда
			
			Результат.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			
		Иначе
			
			Если КоллекцияПолей = Неопределено Тогда
				Результат.Добавить(ЭлементКоллекции);
			Иначе
				СтрокаРезультата = Результат.Добавить();
				Для Каждого Поле Из КоллекцияПолей Цикл
					Результат[Поле.Имя] = ЭлементКоллекции[Поле.Имя];
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции
 

&НаКлиенте
Процедура СменитьРазделКлиент(НовыйРаздел)

	Если ДопРеквизитыФормы.ТекущийРаздел <> НовыйРаздел Тогда
		
		ПрежнийРаздел = Строка(ДопРеквизитыФормы.ТекущийРаздел);
		ДопРеквизитыФормы.ТекущийРаздел = НовыйРаздел;
		ОбновитьЗаголовкиРаздела(ЭтотОбъект, ПрежнийРаздел);
		ОбновитьЗаголовкиРаздела(ЭтотОбъект, ДопРеквизитыФормы.ТекущийРаздел);
		ОбновитьПанельНавигацииКлиент();
		
		Если НовыйРаздел = "Раздел1" Тогда
			
			Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаРаздел1;
			Если Элементы.ГруппаСтраницыРаздела1.ТекущаяСтраница = Элементы.СтраницаРаздел1Налоговая Тогда
				ТекущийЭлемент = Элементы.КодИФНС;
			Иначе
				ТекущийЭлемент = Элементы.НалогоплательщикФамилия;
			КонецЕсли;
			
		ИначеЕсли НовыйРаздел = "Раздел2" Тогда
			
			Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаРаздел2;
			Если Элементы.ГруппаСтраницыРаздела2.ТекущаяСтраница = Элементы.СтраницаРаздел2ДоходыПредпринимателя Тогда
				ТекущийЭлемент = Элементы.ТаблицаДокументовПредпринимателя;
			Иначе
				//ТекущийЭлемент = ?(ТаблицаДокументовФизЛица.Количество() = 0, Элементы.ТекстПоясненияДокументовФизЛица, Элементы.ТаблицаДокументовФизЛица);
				ТекущийЭлемент = Элементы.ТаблицаДокументовФизЛица;
			КонецЕсли;
			
		ИначеЕсли НовыйРаздел = "Раздел3" Тогда
			
			Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаРаздел3;
			
		ИначеЕсли НовыйРаздел = "Раздел4" Тогда
			
			Элементы.ГруппаСтраницыРазделов.ТекущаяСтраница = Элементы.СтраницаРаздел4;
			
		КонецЕсли;
		
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовкиРаздела(Форма, ИмяРаздела = Неопределено)

	Элементы            = Форма.Элементы;
	ДопРеквизитыФормы   = Форма.ДопРеквизитыФормы;
	Шрифты              = ДопРеквизитыФормы.Шрифты;
	ТекстПодсказки      = "";
	ТекстПодзаголовка   = "";
	
	Если ИмяРаздела = Неопределено Или ИмяРаздела = "Раздел1" Тогда
		
		// Собираем ФИО налогоплательщика
		ТекстПодзаголовка = СокрЛП(Форма.НалогоплательщикФамилия);
		Если ЗначениеЗаполнено(ТекстПодзаголовка) Тогда
			ТекстПодзаголовка = ТекстПодзаголовка + " " + Врег(Лев(Форма.НалогоплательщикИмя, 1)) + ?(ПустаяСтрока(Форма.НалогоплательщикИмя), "", ".");
			Если НЕ ПустаяСтрока(Форма.НалогоплательщикИмя) И НЕ ПустаяСтрока(Форма.НалогоплательщикОтчество) Тогда
				ТекстПодзаголовка = ТекстПодзаголовка + " " + Врег(Лев(Форма.НалогоплательщикОтчество, 1)) + ".";
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстПодзаголовка) Тогда
			ТекстПодзаголовка = НСтр("ru='нет ФИО'");
		КонецЕсли;
		
		Если ДопРеквизитыФормы.ТекущийРаздел = "Раздел1" Тогда
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Общая информация'"), Шрифты.ЗаголовокРаздела);
		Иначе
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Общая информация'"), Шрифты.ЗаголовокРаздела2, , , "Ссылка");
		КонецЕсли; 
		
		Элементы.Раздел1Надпись.Заголовок = Новый ФорматированнаяСтрока(
				ПерваяСтрока,
				Символы.ПС,
				Новый ФорматированнаяСтрока(ТекстПодзаголовка, Шрифты.ТекстРаздела)
				);
				
		Форма.Заголовок = "Декларация 3-НДФЛ" + ?(ЗначениеЗаполнено(Форма.ГодОтчета), " за " + Формат(Форма.ГодОтчета, "ЧДЦ=; ЧГ="), "" ) 
				+ "г. (" + ТекстПодзаголовка + ")";
		
	КонецЕсли;
	 
	Если ИмяРаздела = Неопределено Или ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.ТаблицаДокументовФизЛица.Количество() = 0 И Форма.ТаблицаДокументовПредпринимателя.Количество() = 0 Тогда
			ТекстПодзаголовка = НСтр("ru='не указаны'") ; 
		Иначе
			//ВсегоДоход = Форма.ТаблицаДокументовФизЛица.Итог("СуммаДохода") + Форма.ТаблицаДокументовПредпринимателя.Итог("СуммаДохода");
			//ТекстПодзаголовка = Формат(ВсегоДоход, "ЧЦ=15; ЧДЦ=2") + " руб." ; 
			ТекстПодзаголовка = НСтр("ru='заполнены'"); 
		КонецЕсли;
		 
		Если ДопРеквизитыФормы.ТекущийРаздел = "Раздел2" Тогда
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Доходы'"), Шрифты.ЗаголовокРаздела);
		Иначе
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Доходы'"), Шрифты.ЗаголовокРаздела2, , , "Ссылка");
		КонецЕсли; 
		
		Элементы.Раздел2Надпись.Заголовок = Новый ФорматированнаяСтрока(
				ПерваяСтрока,
				Символы.ПС,
				Новый ФорматированнаяСтрока(ТекстПодзаголовка, Шрифты.ТекстРаздела)
				);
				

	КонецЕсли;
	 
	Если ИмяРаздела = Неопределено Или ИмяРаздела = "Раздел3" Тогда
		
		ЕстьСтандартыеВычеты = Форма.ТаблицаСтандартныхВычетов.Итог("ВычетНаРаботника") + Форма.ТаблицаСтандартныхВычетов.Итог("ВычетНаДетей") > 0;
		ЕстьСоциальныеВычеты = Форма.ТаблицаСоциальныхВычетов.Итог("СуммаВычета") + Форма.ТаблицаСоциальныхСтраховыхВычетов.Количество() > 0;
		ЕстьИмущественныеВычеты = Форма.ТаблицаИмущественныхВычетов.Количество() > 0;
		
		Если ЕстьСтандартыеВычеты ИЛИ ЕстьСоциальныеВычеты ИЛИ ЕстьИмущественныеВычеты Тогда
			ТекстПодзаголовка = НСтр("ru='заполнены'"); 
		Иначе
			ТекстПодзаголовка = НСтр("ru='не указаны'"); 
		КонецЕсли; 
		
		Если ДопРеквизитыФормы.ТекущийРаздел = "Раздел3" Тогда
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Вычеты'"), Шрифты.ЗаголовокРаздела);
		Иначе
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Вычеты'"), Шрифты.ЗаголовокРаздела2, , , "Ссылка");
		КонецЕсли; 
		
		Элементы.Раздел3Надпись.Заголовок = Новый ФорматированнаяСтрока(
				ПерваяСтрока,
				Символы.ПС,
				Новый ФорматированнаяСтрока(ТекстПодзаголовка, Шрифты.ТекстРаздела)
				);
				

	КонецЕсли;
			
	Если ИмяРаздела = Неопределено Или ИмяРаздела = "Раздел4" Тогда
		
		ТекстПодзаголовка = НСтр("ru='проверка и печать'") ; 
		 
		Если ДопРеквизитыФормы.ТекущийРаздел = "Раздел4" Тогда
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Результат'"), Шрифты.ЗаголовокРаздела);
		Иначе
			ПерваяСтрока = Новый ФорматированнаяСтрока(НСтр("ru='Результат'"), Шрифты.ЗаголовокРаздела2, , , "Ссылка");
		КонецЕсли; 
		
		Элементы.Раздел4Надпись.Заголовок = Новый ФорматированнаяСтрока(
				ПерваяСтрока,
				Символы.ПС,
				Новый ФорматированнаяСтрока(ТекстПодзаголовка, Шрифты.ТекстРаздела)
				);

	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПанельНавигацииКлиент()

	ОбновитьПанельНавигации(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПанельНавигации(Форма)

	Элементы            = Форма.Элементы;
	ДопРеквизитыФормы   = Форма.ДопРеквизитыФормы;
	ТекущийРаздел       = ДопРеквизитыФормы.ТекущийРаздел;
	
	Элементы.Раздел1Кнопка.Картинка = ?(ТекущийРаздел = "Раздел1", ДопРеквизитыФормы.ИконкиРазделов.Раздел1_Активно, ДопРеквизитыФормы.ИконкиРазделов.Раздел1_Неактивно);
	
	Элементы.Раздел2Кнопка.Картинка = ?(ТекущийРаздел = "Раздел2", ДопРеквизитыФормы.ИконкиРазделов.Раздел2_Активно, ДопРеквизитыФормы.ИконкиРазделов.Раздел2_Неактивно);
	Элементы.Раздел3Кнопка.Картинка = ?(ТекущийРаздел = "Раздел3", ДопРеквизитыФормы.ИконкиРазделов.Раздел3_Активно, ДопРеквизитыФормы.ИконкиРазделов.Раздел3_Неактивно);
	Элементы.Раздел4Кнопка.Картинка = ?(ТекущийРаздел = "Раздел4", ДопРеквизитыФормы.ИконкиРазделов.Раздел4_Активно, ДопРеквизитыФормы.ИконкиРазделов.Раздел4_Неактивно);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруАдресаВРФ(Знач ОригинальныйАдрес = Неопределено)

	Результат = Новый Структура("Индекс,Регион,КодРегиона,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира"
			,"","","");
	Результат.Вставить("Представление", "");
			
	Если ТипЗнч(ОригинальныйАдрес) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, ОригинальныйАдрес);
		Если НЕ Результат.Свойство("Представление") ИЛИ НЕ ЗначениеЗаполнено(Результат.Представление) Тогда
			Результат.Вставить("Представление", );
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтейнерСтрокиТаблицыДоходовФизЛица(Форма, ИДСтроки)

	Результат = Новый Структура("ИДДокумента,ТипДокумента,СтавкаНалога,СуммаДохода,
			|СуммаНалогаНачислено,СуммаНалогаУдержано,СуммаВычета,ПредставлениеДокумента,
			|ИспользоватьДляСтандартныхВычетов,ШапкаДокумента,Строки2НДФЛ,Вычеты2НДФЛ,ДоходыТоварищества");
	

	СтрокаДокумента = Форма.ТаблицаДокументовФизЛица.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаДокумента, , "ШапкаДокумента,Строки2НДФЛ,Вычеты2НДФЛ,ДоходыТоварищества");
	
	Результат.Вставить("ШапкаДокумента", Новый Структура);
	Для каждого КлючИЗначение Из СтрокаДокумента.ШапкаДокумента Цикл
		Результат.ШапкаДокумента.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Результат.Вставить("Строки2НДФЛ", Новый СписокЗначений);
	Для каждого СтрокаТабЧасти Из СтрокаДокумента.Строки2НДФЛ Цикл
		СтруктураСтроки = Новый Структура("Месяц,КодДохода,СуммаДохода,КодВычета,КодыВычетов,СуммаВычета");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабЧасти);
		ЭлементСтроки = Результат.Строки2НДФЛ.Добавить(СтруктураСтроки);
	КонецЦикла;
	 
	Результат.Вставить("Вычеты2НДФЛ", Новый СписокЗначений);
	Для каждого СтрокаТабЧасти Из СтрокаДокумента.Вычеты2НДФЛ Цикл
		СтруктураСтроки = Новый Структура("КодВычета,СуммаВычета");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабЧасти);
		ЭлементСтроки = Результат.Вычеты2НДФЛ.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Результат.Вставить("ДоходыТоварищества", Новый СписокЗначений);
	Для каждого СтрокаТабЧасти Из СтрокаДокумента.ДоходыТоварищества Цикл
		СтруктураСтроки = Новый Структура("КодДохода,СуммаДохода,ДоляВРасходах,ВознаграждениеУправляющим,УбытокПрошлыхЛет");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабЧасти);
		ЭлементСтроки = Результат.ДоходыТоварищества.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтейнерСтрокиТаблицыДоходовПредпринимателя(Форма, ИДСтроки)

	Результат = Новый Структура("ИДДокумента,ПредставлениеДокумента,СуммаДохода,СуммаВычета,
			|ИспользоватьДляСтандартныхВычетов,ВидДеятельностиНаименование,ВидДеятельностиКод,ВидДеятельностиИндекс,
			|СтрокиОтчетаПредпринимателя");

	СтрокаДокумента = Форма.ТаблицаДокументовПредпринимателя.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаДокумента, , "СтрокиОтчетаПредпринимателя");
	
	Результат.Вставить("СтрокиОтчетаПредпринимателя", Новый СписокЗначений);
	Для каждого СтрокаТабЧасти Из СтрокаДокумента.СтрокиОтчетаПредпринимателя Цикл
		СтруктураСтроки = Новый Структура("Месяц,СуммаДохода,СуммаРасходаВсего,МатериальныеРасходы,АмортизацияОС,НаОплатуТрудаВсего,ПоТрудовымДоговорам,ПрочиеРасходы");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабЧасти);
		ЭлементСтроки = Результат.СтрокиОтчетаПредпринимателя.Добавить(СтруктураСтроки);
	КонецЦикла;
	 
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуДоходовФизЛицаИзКонтейнера(Форма, Контейнер)

	СтрокиТаблицы = Форма.ТаблицаДокументовФизЛица.НайтиСтроки(Новый Структура("ИДДокумента", Контейнер.ИДДокумента));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = СтрокиТаблицы[0];
	Для Каждого КлючИЗначение Из Контейнер Цикл
		Если СтрНайти("ШапкаДокумента,Строки2НДФЛ,Вычеты2НДФЛ,ДоходыТоварищества,", КлючИЗначение.Ключ + ",") = 0 Тогда
			СтрокаДокумента[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
	СтрокаДокумента.ШапкаДокумента = Новый Структура;
	Для каждого КлючИЗначение Из Контейнер.ШапкаДокумента Цикл
		СтрокаДокумента.ШапкаДокумента.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	СтрокаДокумента.Строки2НДФЛ.Очистить();
	Если Контейнер.Свойство("Строки2НДФЛ") Тогда
		Для каждого СтрокаТабЧасти Из Контейнер.Строки2НДФЛ Цикл
			НоваяСтрока = СтрокаДокумента.Строки2НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧасти.Значение);
		КонецЦикла;
	КонецЕсли; 
	 
	СтрокаДокумента.Вычеты2НДФЛ.Очистить();
	Если Контейнер.Свойство("Вычеты2НДФЛ") Тогда
		Для каждого СтрокаТабЧасти Из Контейнер.Вычеты2НДФЛ Цикл
			НоваяСтрока = СтрокаДокумента.Вычеты2НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧасти.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	СтрокаДокумента.ДоходыТоварищества.Очистить();
	Если Контейнер.Свойство("ДоходыТоварищества") Тогда
		Для каждого СтрокаТабЧасти Из Контейнер.ДоходыТоварищества Цикл
			НоваяСтрока = СтрокаДокумента.ДоходыТоварищества.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧасти.Значение);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуДоходовПредпринимателяИзКонтейнера(Форма, Контейнер)

	СтрокиТаблицы = Форма.ТаблицаДокументовПредпринимателя.НайтиСтроки(Новый Структура("ИДДокумента", Контейнер.ИДДокумента));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = СтрокиТаблицы[0];
	Для Каждого КлючИЗначение Из Контейнер Цикл
		Если КлючИЗначение.Ключ <> "СтрокиОтчетаПредпринимателя" Тогда
			СтрокаДокумента[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
	СтрокаДокумента.СтрокиОтчетаПредпринимателя.Очистить();
	Если Контейнер.Свойство("СтрокиОтчетаПредпринимателя") Тогда
		Для каждого СтрокаТабЧасти Из Контейнер.СтрокиОтчетаПредпринимателя Цикл
			НоваяСтрока = СтрокаДокумента.СтрокиОтчетаПредпринимателя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЧасти.Значение);
		КонецЦикла;
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированность()

	Модифицированность        = Истина;
	МоментМоидифицированности = ТекущаяДатаКлиентСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	ЗаписатьНаКлиенте(Истина);
	Если НЕ Модифицированность Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДоходыИВычеты(Форма)

	Форма.ТаблицаДокументовФизЛица.Очистить();
	Форма.ДоходыФЛФиксированныеПлатежиИностранца = 0;
	
	Форма.ТаблицаДокументовПредпринимателя.Очистить();
	Форма.ПредпринимательНачисленоАвансовыхПлатежей  = 0;
	Форма.ПредпринимательУплаченоФактическихПлатежей = 0;
	Форма.ПредпринимательГодОбразованияКФХ           = 0;
	Форма.ПредпринимательНеоблагаемыйДоходКФХ        = 0;
	Форма.ПредпринимательСуммаПатента  = 0;
	Форма.ПредпринимательТорговыйСбор  = 0;
	
	Для Каждого СтрокаВычета Из Форма.ТаблицаСоциальныхВычетов Цикл
		СтрокаВычета.СуммаВычета = 0;
	КонецЦикла; 
	
	Форма.ТаблицаСоциальныхСтраховыхВычетов.Очистить();
	Форма.ДополнительныеВзносыПФСуммаВзноса            = 0;
	Форма.ДополнительныеВзносыПФПринимаетсяКВычету     = 0;
	Форма.ДополнительныеВзносыПФВычетУНалоговогоАгента = 0;
	
	Форма.ТаблицаИмущественныхВычетов.Очистить();
	Для Каждого СтрокаВычета Из Форма.ТаблицаИмущественныхВычетовИтоги Цикл
		СтрокаВычета.СуммаНаПриобретение = 0;
		СтрокаВычета.СуммаПроцентов = 0;
	КонецЦикла; 
	
	Для Каждого СтрокаВычета Из Форма.ТаблицаСтандартныхВычетов Цикл
		СтрокаВычета.ВычетНаДетей     = 0;
		СтрокаВычета.ВычетНаРаботника = 0;
	КонецЦикла; 

	ОбновитьЗаголовкиРаздела(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеСтрокЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Таблица = ЭтотОбъект[ДополнительныеПараметры.ИмяТаблицы];
		Для Каждого ИДстроки Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
			
			СтрокаТаблицы = Таблица.НайтиПоИдентификатору(ИДСтроки);
			Если СтрокаТаблицы <> Неопределено Тогда
				Таблица.Удалить(СтрокаТаблицы);
			КонецЕсли; 
			
		КонецЦикла; 
		
		ОбновитьЗаголовкиРаздела(ЭтотОбъект);
		
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьФИО(Знач Фамилия, Знач Имя, Знач Очтество)

	Результат = "";
	Если ЗначениеЗаполнено(Фамилия) Тогда
		Результат = СокрЛП(Фамилия) + " ";
		Если ЗначениеЗаполнено(Имя) Тогда
			Результат = Результат + Врег(Лев(СокрЛ(Имя), 1)) + ". ";
			Если ЗначениеЗаполнено(Очтество) Тогда
				Результат = Результат + Врег(Лев(СокрЛ(Очтество), 1)) + ".";
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Имя) Тогда
			Результат = Врег(Лев(СокрЛ(Имя), 1)) + Сред(Имя, 2) + " ";
			Если ЗначениеЗаполнено(Очтество) Тогда
				Результат = Результат + Врег(Лев(СокрЛ(Очтество), 1)) + Сред(Очтество, 2)  + ".";
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	Возврат СокрЛП(Результат);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеФормы(Форма)

	СтрокаСвойств = СтрокаРеквизитовПомощника();
	Результат = Новый Структура(СтрокаСвойств);
	ЗаполнитьЗначенияСвойств(Форма, Результат, СтрокаСвойств);
	
	// Заполняем табличные части:
	СписокТЧ = СписокТаблицПомощника();
	Для Каждого ИмяТаблицы Из СписокТЧ Цикл
		Форма[ИмяТаблицы].Очистить();
	КонецЦикла;

	ЗаполнитьЗначениямиПоУмолчанию(Форма);
	
КонецПроцедуры
 

#Область ОбработчикиИФункционал_Раздел1

&НаСервере
Процедура КодИФНСПриИзмененииНаСервере(Код)
	
	ОтчетОбъект = ОбъектЭтогоОтчета();
	МакетИнспекций = ОтчетОбъект.ПолучитьМакет("СписокИнспекций");
	
	ОбластьМакета = МакетИнспекций.НайтиТекст(Код, , МакетИнспекций.Область(1, 2, МакетИнспекций.ВысотаТаблицы, 2), , Истина);
	Если ОбластьМакета = Неопределено Тогда
		НаименованиеИФНС = НСтр("ru = '<Инспекция с указанным кодом не найдена>'");
	Иначе
		НаименованиеИФНС = МакетИнспекций.Область(ОбластьМакета.Верх, 1, ОбластьМакета.Верх, 1).Текст;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВРФПредставлениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, АдресВРФСтруктура);
		АдресВРФПредставление = Результат.Представление;
		УстановитьМодифицированность();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НалогоплательщикСтатусПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если  Результат = КодВозвратаДиалога.Да Тогда
		
		ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус = НалогоплательщикСтатус;
		ОчиститьДоходыИВычеты(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		НалогоплательщикСтатус = ДопРеквизитыФормы.ТекущееЗначениеНалогоплательщикСтатус;
		
	КонецЕсли; 

КонецПроцедуры
 

#КонецОбласти


#Область ОбработчикиИФункционал_Раздел2

&НаКлиенте
Функция СписокВидовДокументовФизЛица()

	Результат = Новый СписокЗначений;
	Результат.Добавить("2-НДФЛ", "Доход по справке 2-НДФЛ", , ДопРеквизитыФормы.ИконкиСписков.ДокументДохода);
	Результат.Добавить("Прочий доход", "Доход в рублях по произвольному документу (договор, расписка и т.п.)", , ДопРеквизитыФормы.ИконкиСписков.ДоходыВРФ);
	Если НалогоплательщикСтатус = 1 Тогда
		Результат.Добавить("Доход в валюте", "Доход в иностранной валюте", , ДопРеквизитыФормы.ИконкиСписков.ДоходыВВалюте);
		Результат.Добавить("Инвест. товарищество", "Доход от участия в инвестиционном товариществе", , ДопРеквизитыФормы.ИконкиСписков.Результаты);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовФизЛицаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		УстановитьМодифицированность();
		НоваяСтрока = ТаблицаДокументовФизЛица.Добавить();
		ИДСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
		Если Результат.Значение = "2-НДФЛ" Тогда
			ЗаполнитьПоУмолчаниюДокумент2НДФЛ(ИДСтроки);
		ИначеЕсли Результат.Значение = "Прочий доход" Тогда
			ЗаполнитьПоУмолчаниюДокументПрочийДоход(ИДСтроки);
		ИначеЕсли Результат.Значение = "Доход в валюте" Тогда
			ЗаполнитьПоУмолчаниюДокументДоходВВалюте(ИДСтроки);
		ИначеЕсли Результат.Значение = "Инвест. товарищество" Тогда
			ЗаполнитьПоУмолчаниюДокументДоходИнвестТоварищества(ИДСтроки);
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
		Элементы.ТаблицаДокументовФизЛица.ТекущаяСтрока = ИДСтроки;
		ОткрытьФормуДокументаДохода(ИДСтроки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюДокумент2НДФЛ(ИДСтроки)

	СтрокаДокумента = ТаблицаДокументовФизЛица.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДокумента.ИДДокумента = Строка(Новый УникальныйИдентификатор);
	СтрокаДокумента.ТипДокумента = "2-НДФЛ";
	СтрокаДокумента.СтавкаНалога = ?(НалогоплательщикСтатус = 2, 30, 13);
	СтрокаДокумента.СуммаДохода = 0;
	СтрокаДокумента.СуммаНалогаНачислено = 0;
	СтрокаДокумента.СуммаНалогаУдержано = 0;
	СтрокаДокумента.СуммаВычета = 0;
	СтрокаДокумента.ИспользоватьДляСтандартныхВычетов = Ложь;
	СтрокаДокумента.ИконкаСтроки = ДопРеквизитыФормы.ИконкиСписков.ДокументДохода;
	СтрокаДокумента.ПредставлениеДокумента = "Новая справка 2-НДФЛ";
	
	СтрокаДокумента.Строки2НДФЛ.Очистить();
	СтрокаДокумента.Вычеты2НДФЛ.Очистить();
	СтрокаДокумента.ДоходыТоварищества.Очистить();

	// Шапка справки 2-НДФЛ
	СтрокаДокумента.ШапкаДокумента = Новый Структура;
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникНаименование", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникИНН", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникКПП", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникОКАТО", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("НалоговаяБаза", 0);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюДокументПрочийДоход(ИДСтроки)

	СтрокаДокумента = ТаблицаДокументовФизЛица.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДокумента.ИДДокумента = Строка(Новый УникальныйИдентификатор);
	СтрокаДокумента.ТипДокумента = "Прочий доход";
	СтрокаДокумента.СтавкаНалога = ?(НалогоплательщикСтатус = 2, 30, 13);
	СтрокаДокумента.СуммаДохода = 0;
	СтрокаДокумента.СуммаНалогаНачислено = 0;
	СтрокаДокумента.СуммаНалогаУдержано = 0;
	СтрокаДокумента.СуммаВычета = 0;
	СтрокаДокумента.ИспользоватьДляСтандартныхВычетов = Ложь;
	СтрокаДокумента.ИконкаСтроки = ДопРеквизитыФормы.ИконкиСписков.ДоходыВРФ;
	СтрокаДокумента.ПредставлениеДокумента = "Новый доход";
	
	СтрокаДокумента.Строки2НДФЛ.Очистить();
	СтрокаДокумента.Вычеты2НДФЛ.Очистить();
	СтрокаДокумента.ДоходыТоварищества.Очистить();

	// Шапка документа
	СтрокаДокумента.ШапкаДокумента = Новый Структура;
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникНаименование", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникИНН", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникКПП", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникОКАТО", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ДатаДохода", Дата(ГодОтчета, 1, 1));
	СтрокаДокумента.ШапкаДокумента.Вставить("КодДохода", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("НаименованиеДохода", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаДохода", 0);
	СтрокаДокумента.ШапкаДокумента.Вставить("КодВычета", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("КодыВычетов", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("НаименованиеВычета", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаВычета", 0);
	СтрокаДокумента.ШапкаДокумента.Вставить("Месяц", 0);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюДокументДоходВВалюте(ИДСтроки)

	СтрокаДокумента = ТаблицаДокументовФизЛица.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДокумента.ИДДокумента = Строка(Новый УникальныйИдентификатор);
	СтрокаДокумента.ТипДокумента = "Доход в валюте";
	СтрокаДокумента.СтавкаНалога = ?(НалогоплательщикСтатус = 2, 30, 13);
	СтрокаДокумента.СуммаДохода = 0;
	СтрокаДокумента.СуммаНалогаНачислено = 0;
	СтрокаДокумента.СуммаНалогаУдержано = 0;
	СтрокаДокумента.СуммаВычета = 0;
	СтрокаДокумента.ИспользоватьДляСтандартныхВычетов = Ложь;
	СтрокаДокумента.ИконкаСтроки = ДопРеквизитыФормы.ИконкиСписков.ДоходыВВалюте;
	СтрокаДокумента.ПредставлениеДокумента = "Новый доход за границей";
	
	СтрокаДокумента.Строки2НДФЛ.Очистить();
	СтрокаДокумента.Вычеты2НДФЛ.Очистить();
	СтрокаДокумента.ДоходыТоварищества.Очистить();

	// Шапка документа
	СтрокаДокумента.ШапкаДокумента = Новый Структура;
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникНаименование", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникСтрана", ДопРеквизитыФормы.ПустаяСтрана);
	СтрокаДокумента.ШапкаДокумента.Вставить("ВалютаДохода", ДопРеквизитыФормы.ПустаяВалюта);
	
	СтрокаДокумента.ШапкаДокумента.Вставить("ДатаДохода", Дата(ГодОтчета, 1, 1));
	СтрокаДокумента.ШапкаДокумента.Вставить("КодДохода", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("НаименованиеДохода", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаДоходаВВалюте", 0);
	СтрокаДокумента.ШапкаДокумента.Вставить("КурсНаДатуДохода", 0);
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаДохода", 0);
	
	СтрокаДокумента.ШапкаДокумента.Вставить("ДатаУплатыНалога", Дата(1, 1, 1));
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаНалогаУплаченоВВалюте", 0);
	СтрокаДокумента.ШапкаДокумента.Вставить("КурсНаДатуУплатыНалога", 0);
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаНалогаУплаченоЗаГраницей", 0);
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаНалогаПринимаетсяКЗачету", 0);
	
	СтрокаДокумента.ШапкаДокумента.Вставить("КодВычета", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("КодыВычетов", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("НаименованиеВычета", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаВычета", 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюДокументДоходИнвестТоварищества(ИДСтроки)

	СтрокаДокумента = ТаблицаДокументовФизЛица.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаДокумента.ИДДокумента = Строка(Новый УникальныйИдентификатор);
	СтрокаДокумента.ТипДокумента = "Инвест. товарищество";
	СтрокаДокумента.СтавкаНалога = ?(НалогоплательщикСтатус = 2, 30, 13);
	СтрокаДокумента.СуммаДохода = 0;
	СтрокаДокумента.СуммаНалогаНачислено = 0;
	СтрокаДокумента.СуммаНалогаУдержано = 0;
	СтрокаДокумента.СуммаВычета = 0;
	СтрокаДокумента.ИспользоватьДляСтандартныхВычетов = Ложь;
	СтрокаДокумента.ИконкаСтроки = ДопРеквизитыФормы.ИконкиСписков.Результаты;
	СтрокаДокумента.ПредставлениеДокумента = "Новый инвестиционный доход";
	
	СтрокаДокумента.Строки2НДФЛ.Очистить();
	СтрокаДокумента.Вычеты2НДФЛ.Очистить();
	СтрокаДокумента.ДоходыТоварищества.Очистить();

	// Шапка документа
	СтрокаДокумента.ШапкаДокумента = Новый Структура;
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникНаименование", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникИНН", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникКПП", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("ИсточникОКАТО", "");
	СтрокаДокумента.ШапкаДокумента.Вставить("СуммаВкладаВТоварищество", 0);
	
	// Заполняем кодами доходов строки доходов товарищества
	Для Счетчик = 1 По 6 Цикл
		СтрокаДохода = СтрокаДокумента.ДоходыТоварищества.Добавить();
		СтрокаДохода.КодДохода = "991" + Счетчик;
	КонецЦикла;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюДоходПредпринимателя(ДанныеСтроки)

	ДанныеСтроки.ПредставлениеДокумента = "Новый вид деятельности";
	ДанныеСтроки.ИконкаСтроки = ДопРеквизитыФормы.ИконкиСписков.ДоходыПредпринимателя;
	ДанныеСтроки.ВидДеятельностиИндекс = 1;
	
	Если ПредпринимательВычетПодтвержденДокументами > 1 Тогда
		Для Счетчик = 1 По 12 Цикл
			НоваяСтрока = ДанныеСтроки.СтрокиОтчетаПредпринимателя.Добавить();
			НоваяСтрока.Месяц = Счетчик;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры
 

&НаКлиенте
Процедура ОткрытьФормуДокументаДохода(ИДСтроки)

	СтрокаДокумента = ТаблицаДокументовФизЛица.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактораДокумента = Новый Структура;
	ПараметрыРедактораДокумента.Вставить("СтрокаДокумента", КонтейнерСтрокиТаблицыДоходовФизЛица(ЭтотОбъект, ИДСтроки));
	ПараметрыРедактораДокумента.Вставить("НалогоплательщикСтатус", НалогоплательщикСтатус);
	ПараметрыРедактораДокумента.Вставить("ГодОтчета", ГодОтчета);
	
	Если СтрокаДокумента.ТипДокумента = "2-НДФЛ" Тогда
		ИмяФормыРедактора = "ДоходПоСправке2НДФЛ2015кв1";
	ИначеЕсли СтрокаДокумента.ТипДокумента = "Прочий доход" Тогда
		ИмяФормыРедактора = "ДоходВРФПрочий2015кв1";
	ИначеЕсли СтрокаДокумента.ТипДокумента = "Доход в валюте" Тогда
		ИмяФормыРедактора = "ДоходВВалюте2015кв1";
	ИначеЕсли СтрокаДокумента.ТипДокумента = "Инвест. товарищество" Тогда
		ИмяФормыРедактора = "ДоходИнвестТоварищества2015кв1";
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипДокумента", СтрокаДокумента.ТипДокумента);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуДокументаДоходаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2016кв1", ИмяФормыРедактора), ПараметрыРедактораДокумента, ,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаДоходаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		УстановитьМодифицированность();
		ЗаполнитьСтрокуДоходовФизЛицаИзКонтейнера(ЭтотОбъект, Результат);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДоходаПредпринимателя(ИДСтроки)

	СтрокаДокумента = ТаблицаДокументовПредпринимателя.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактораДокумента = Новый Структура;
	ПараметрыРедактораДокумента.Вставить("СтрокаДокумента", КонтейнерСтрокиТаблицыДоходовПредпринимателя(ЭтотОбъект, ИДСтроки));
	ПараметрыРедактораДокумента.Вставить("НалогоплательщикСтатус", НалогоплательщикСтатус);
	ПараметрыРедактораДокумента.Вставить("ГодОтчета", ГодОтчета);
	ПараметрыРедактораДокумента.Вставить("ВычетПодтвержденДокументами", ПредпринимательВычетПодтвержденДокументами);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуДоходаПредпринимателяЗавершение", ЭтотОбъект);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2016кв1", "ДоходПредпринимателя2015кв1"), ПараметрыРедактораДокумента, ,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДоходаПредпринимателяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		УстановитьМодифицированность();
		ЗаполнитьСтрокуДоходовПредпринимателяИзКонтейнера(ЭтотОбъект, Результат);
		
	КонецЕсли;

КонецПроцедуры
 

#КонецОбласти


#Область ОбработчикиИФункционал_Раздел3

&НаКлиенте
Процедура ЗаполнитьЗначенияТаблицыСтандартныхВычетов(СтрокаТаблицы, ИмяКолонки)

	НужноеЗначение = СтрокаТаблицы[ИмяКолонки];
	НачальныйМесяц = СтрокаТаблицы.НомерМесяца;
	Для каждого СтрокаВычета Из ТаблицаСтандартныхВычетов Цикл
		Если СтрокаВычета.НомерМесяца > НачальныйМесяц Тогда
			СтрокаВычета[ИмяКолонки] = НужноеЗначение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЖилья(ИДСтроки)

	СтрокаДокумента = ТаблицаИмущественныхВычетов.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактораДокумента = Новый Структура;
	ПараметрыРедактораДокумента.Вставить("СтрокаДокумента", КонтейнерСтрокиИмущественногоВычета(ЭтотОбъект, ИДСтроки));
	ПараметрыРедактораДокумента.Вставить("НалогоплательщикСтатус", НалогоплательщикСтатус);
	ПараметрыРедактораДокумента.Вставить("ГодОтчета", ГодОтчета);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуЖильяЗавершение", ЭтотОбъект);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2016кв1", "ОбъектИмущественногоВычета2015кв1"), ПараметрыРедактораДокумента, ,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЖильяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		УстановитьМодифицированность();
		ЗаполнитьСтрокуИмущественногоВычетаИзКонтейнера(ЭтотОбъект, Результат);
		ПересчитатьИтогиИмущественногоВычета();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КонтейнерСтрокиИмущественногоВычета(Форма, ИДСтроки)

	Результат = Новый Структура("ИДЭлемента,ЖильеНаименование,ЖильеВидСобственности,ЖильеПризнакНалогоплательщика,ЖильеДоляЧислитель,ЖильеДоляЗнаменатель,
			|ЖильеДатаЗаявленияОРаспределении,ЖильеДатаПраваСобственности,ЖильеДатаПраваНаЗемлю,ЖильеДатаАктаПередачи,ЖильеСтоимость,ЖильеСуммаПроцентов,
			|ЖильеСтоимостьПоНорме,ЖильеГодНачалаВычета,ЖильеСпособПриобретения,ЖильеАдресПредставление,ЖильеАдресСтруктура");

	СтрокаДокумента = Форма.ТаблицаИмущественныхВычетов.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, СтрокаДокумента, , "ЖильеАдресСтруктура");
	
	Результат.Вставить("ЖильеАдресСтруктура", Новый Структура);
	Если ТипЗнч(СтрокаДокумента.ЖильеАдресСтруктура) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из СтрокаДокумента.ЖильеАдресСтруктура Цикл
			Результат.ЖильеАдресСтруктура.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
	КонецЕсли; 
	 
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуИмущественногоВычетаИзКонтейнера(Форма, Контейнер)

	СтрокиТаблицы = Форма.ТаблицаИмущественныхВычетов.НайтиСтроки(Новый Структура("ИДЭлемента", Контейнер.ИДЭлемента));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = СтрокиТаблицы[0];
	Для Каждого КлючИЗначение Из Контейнер Цикл
		Если КлючИЗначение.Ключ <> "ЖильеАдресСтруктура" Тогда
			СтрокаДокумента[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
	СтрокаДокумента.ЖильеАдресСтруктура = Новый Структура;
	Если Контейнер.Свойство("ЖильеАдресСтруктура") Тогда
		Для Каждого КлючИЗначение Из Контейнер.ЖильеАдресСтруктура Цикл
			СтрокаДокумента.ЖильеАдресСтруктура.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПенсионногоВзноса(ИДСтроки)

	СтрокаДокумента = ТаблицаСоциальныхСтраховыхВычетов.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСвойств = СтрокаСвойствПенсионногоВзноса();
	
	ПараметрыРедактораДокумента = Новый Структура();
	ПараметрыРедактораДокумента.Вставить("СтрокаДокумента", Новый Структура(СтрокаСвойств));
	ЗаполнитьЗначенияСвойств(ПараметрыРедактораДокумента.СтрокаДокумента, СтрокаДокумента);
	ПараметрыРедактораДокумента.Вставить("НалогоплательщикСтатус", НалогоплательщикСтатус);
	ПараметрыРедактораДокумента.Вставить("ГодОтчета", ГодОтчета);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуПенсионногоВзносаЗавершение", ЭтотОбъект);
	ОткрытьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2016кв1", "ВзносВПенсионныйФонд2015кв1"), ПараметрыРедактораДокумента, ,,,, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПенсионногоВзносаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СтрокиВзноса = ТаблицаСоциальныхСтраховыхВычетов.НайтиСтроки(Новый Структура("ИДЭлемента", Результат.ИДЭлемента));
		Если СтрокиВзноса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		УстановитьМодифицированность();
		СтрокаВзноса = СтрокиВзноса[0];
		СтрокаСвойств = СтрокаСвойствПенсионногоВзноса();
		ЗаполнитьЗначенияСвойств(СтрокаВзноса, Результат, СтрокаСвойств);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСвойствПенсионногоВзноса()

	Возврат "ИДЭлемента,Представление,СуммаВзноса,ИНН,КПП,НаименованиеОрганизации,
			|НомерДоговора,ДатаДоговора,ВычетУНалоговогоАгента,ПринимаетсяКВычету,ВидДоговора";

КонецФункции
 
&НаКлиенте
Процедура ПересчитатьИтогиИмущественногоВычета()

	//ВсегоСтоимость = Мин(2000000, ТаблицаИмущественныхВычетов.Итог("ЖильеСтоимость"));
	//ВсегоПроценты  = ТаблицаИмущественныхВычетов.Итог("ЖильеСуммаПроцентов");
	//ОграничиватьПроценты = ТаблицаИмущественныхВычетов.Количество() > 1 ИЛИ ТаблицаИмущественныхВычетов.Количество() = 0;
	//
	//Если НЕ ОграничиватьПроценты И ТаблицаИмущественныхВычетов.Количество() = 0 Тогда
	//	ОграничиватьПроценты = ТаблицаИмущественныхВычетов[0].ЖильеГодНачалаВычета >= 2014;
	//КонецЕсли; 
	//
	//Если ОграничиватьПроценты Тогда
	//	ВсегоПроценты = Мин(3000000, ВсегоПроценты);
	//КонецЕсли; 
	//
	//ТаблицаИмущественныхВычетовИтоги[1].СуммаНаПриобретение = ?(ТаблицаИмущественныхВычетовИтоги[0].СуммаНаПриобретение = 0, 0, Макс(0, ВсегоСтоимость - ТаблицаИмущественныхВычетовИтоги[0].СуммаНаПриобретение));
	//ТаблицаИмущественныхВычетовИтоги[1].СуммаПроцентов = ?(ТаблицаИмущественныхВычетовИтоги[0].СуммаПроцентов = 0, 0, Макс(0, ВсегоПроценты - ТаблицаИмущественныхВычетовИтоги[0].СуммаПроцентов));
	
	ЛюбойРеквизитПриИзменении(Неопределено);

КонецПроцедуры
 

#КонецОбласти


#Область ПроверкаРезультата

&НаКлиенте 
Процедура ВыполнитьПроверку()

	ОчиститьСообщения();
	СписокСообщений.Очистить();
	
#Область Проверка_Раздел1

	НомерРаздела = 1;

	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан код налоговой инспекции'"),
				"КодИФНС");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ГодОтчета) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан год получения дохода'"),
				"ГодОтчета");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана дата подписания декларации'"),
				"ДатаПодписи");
	КонецЕсли; 
	Если ВидДекларации <> 0 И НЕ ЗначениеЗаполнено(НомерКорректировки) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан номер корректировки'"),
				"НомерКорректировки");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикФамилия) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана фамилия налогоплательщика'"),
				"НалогоплательщикФамилия");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикИмя) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указани имя налогоплательщика'"),
				"НалогоплательщикИмя");
	КонецЕсли; 
	Если НалогоплательщикКатегория <> "760" И НЕ ЗначениеЗаполнено(НалогоплательщикИНН) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан ИНН предпринимателя'"),
				"НалогоплательщикИНН");
	КонецЕсли; 
	Если ЗначениеЗаполнено(НалогоплательщикИНН) И СтрДлина(НалогоплательщикИНН) <> 12 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Указан некорректный ИНН налогоплательщика (длина должна быть равна 12 символам)'"),
				"НалогоплательщикИНН");
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(НалогоплательщикСтрана) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано гражданство налогоплательщика'"),
				"НалогоплательщикСтрана");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикДатаРождения) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана дата рождения налогоплательщика'"),
				"НалогоплательщикДатаРождения");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(НалогоплательщикМестоРождения) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано место рождения налогоплательщика'"),
				"НалогоплательщикМестоРождения");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДокументКодВида) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан вид документа - удостоверения личности'"),
				"ДокументКодВида");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДокументСерияИНомер) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указаны серия и номер документа - удостоверения личности'"),
				"ДокументСерияИНомер");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДокументДатаВыдачи) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана дата выдачи документа - удостоверения личности'"),
				"ДокументДатаВыдачи");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДокументКемВыдан) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан, кем выдан документ - удостоверение личности'"),
				"ДокументКемВыдан");
	КонецЕсли; 
	Если АдресВРФТипАдреса = 2 И НЕ ЗначениеЗаполнено(АдресЗаПределамиРФ) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан адрес налогоплательщика за пределами РФ'"),
				"АдресЗаПределамиРФ");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(АдресВРФПредставление) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан адрес налогоплательщика в РФ'"),
				"АдресВРФПредставление");
	КонецЕсли; 
	Если СтрДлина(СокрЛП(АдресВРФСтруктура.Регион)) < 2 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Указан некорректный регион в адресе налогоплательщика в РФ'"),
				"АдресВРФПредставление");
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(АдресВРФОКТМО) Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан ОКТМО налогоплательщика'"),
				"АдресВРФОКТМО");
	КонецЕсли; 
	Если ЗначениеЗаполнено(АдресВРФОКТМО) 
		И СтрДлина(АдресВРФОКТМО) <> 8 И СтрДлина(АдресВРФОКТМО) <> 11 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Указан неверный ОКТМО налогоплательщика. Длина ОКТМО должна быть 8 или 11 символов'"),
				"АдресВРФОКТМО");
	КонецЕсли; 
	 
#КонецОбласти

#Область Проверка_Раздел2

	НомерРаздела = 2;
	ИмяПоля = "ТаблицаДокументовФизЛица";
	НомерСтроки = -1;
	
	Если ТаблицаДокументовФизЛица.Количество() + ТаблицаДокументовПредпринимателя.Количество() = 0 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Нет документов дохода. Для заполнения декларации должен быть хотя бы один документ дохода'"),
				ИмяПоля);
	КонецЕсли; 
	
	Если ТаблицаДокументовФизЛица.Итог("СуммаДохода") + ТаблицаДокументовПредпринимателя.Итог("СуммаДохода") = 0 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Сумма доходов по всем документам равна 0.'"),
				ИмяПоля);
	КонецЕсли; 
	
	Для Каждого СтрокаДохода Из ТаблицаДокументовФизЛица Цикл
		
		НомерСтроки = СтрокаДохода.ПолучитьИдентификатор();
		
		Если СтрокаДохода.ТипДокумента = "2-НДФЛ" Тогда
			
			Если СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникИНН) <> 10 И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникИНН) <> 12 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный ИНН плательщика дохода: длина ИНН должна быть 10 или 12 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникКПП) <> 9 И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникИНН) = 10 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный КПП плательщика дохода: длина КПП должна быть 9 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО) <> 8 И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО) <> 11 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный ОКТМО плательщика дохода: длина ОКТМО должна быть 8 или 11 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если ПустаяСтрока(СтрокаДохода.ШапкаДокумента.ИсточникНаименование) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано наименование организации или ФИО предпринимателя, заплатившего доход'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			
			Если СтрокаДохода.Строки2НДФЛ.Количество() = 0 Тогда
				
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'В справке 2-НДФЛ нет строк с доходами'"),
						ИмяПоля, НомерСтроки);
						
			ИначеЕсли СтрокаДохода.СуммаДохода = 0 Тогда
				
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма дохода'"),
						ИмяПоля, НомерСтроки);
						
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.СтавкаНалога) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана ставка налога'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			
			
		ИначеЕсли СтрокаДохода.ТипДокумента = "Прочий доход" Тогда
			
			Если ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ИсточникИНН) И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникИНН) <> 10 И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникИНН) <> 12 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный ИНН плательщика дохода: длина ИНН должна быть 10 или 12 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникКПП) <> 9 И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникИНН) = 10 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный КПП плательщика дохода: длина КПП должна быть 9 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО) И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО) <> 8 И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО) <> 11 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный ОКТМО плательщика дохода: длина ОКТМО должна быть 8 или 11 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если ПустаяСтрока(СтрокаДохода.ШапкаДокумента.ИсточникНаименование) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано наименование организации или ФИО предпринимателя, заплатившего доход'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если СтрокаДохода.СуммаДохода = 0 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма дохода'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.КодДохода) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан код дохода'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.СтавкаНалога) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Указан неверный код дохода (программа не смогла определить ставку налога)'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			
		ИначеЕсли СтрокаДохода.ТипДокумента = "Инвест. товарищество" Тогда
			
			Если СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникИНН) <> 10 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный ИНН товарищества: длина ИНН должна быть 10 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникКПП) <> 9 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный КПП товарищества: длина КПП должна быть 9 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО) <> 8 И СтрДлина(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО) <> 11 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный ОКТМО товарищества: длина ОКТМО должна быть 8 или 11 символов'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если ПустаяСтрока(СтрокаДохода.ШапкаДокумента.ИсточникНаименование) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано наименование товарищества'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			
		ИначеЕсли СтрокаДохода.ТипДокумента = "Доход в валюте" Тогда
			
			Если ПустаяСтрока(СтрокаДохода.ШапкаДокумента.ИсточникНаименование) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано наименование источника дохода'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ИсточникСтрана) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана страна, в которой получен доход'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ВалютаДохода) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана валюта, в которой получен доход'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ДатаДохода) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана дата получения дохода'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.КодДохода) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан код дохода'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.СуммаДоходаВВалюте) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма дохода в валюте'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ВалютаДохода) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.КурсНаДатуДохода) Тогда
					ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан курс валюты на дату дохода'"),
							ИмяПоля, НомерСтроки);
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.СуммаДохода) Тогда
					ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма дохода в рублях'"),
							ИмяПоля, НомерСтроки);
				КонецЕсли; 
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ДатаУплатыНалога) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.КурсНаДатуУплатыНалога) Тогда
					ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан курс валюты на дату уплаты налога.'"),
							ИмяПоля, НомерСтроки);
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.СуммаНалогаУплаченоВВалюте) Тогда
					ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма налога в валюте.'"),
							ИмяПоля, НомерСтроки);
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.СуммаНалогаУплаченоЗаГраницей) Тогда
					ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма налога в рублях.'"),
							ИмяПоля, НомерСтроки);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 

	ИмяПоля     = "ТаблицаДокументовПредпринимателя";
	НомерСтроки = -1;
	
	НужноПроверять = ПредпринимательНачисленоАвансовыхПлатежей > 0  ИЛИ ПредпринимательУплаченоФактическихПлатежей > 0
			ИЛИ ПредпринимательГодОбразованияКФХ > 0;
	
	Если НужноПроверять И ТаблицаДокументовПредпринимателя.Количество() = 0  Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указаны доходы предпринимателя'"),
				ИмяПоля, НомерСтроки);
	КонецЕсли; 
	
	НужноПроверять = НужноПроверять ИЛИ ТаблицаДокументовПредпринимателя.Количество() > 0;
	
	Если НужноПроверять Тогда
		
		Если ЗначениеЗаполнено(ПредпринимательГодОбразованияКФХ) Тогда 
			Если ПредпринимательГодОбразованияКФХ < 1977 ИЛИ ПредпринимательГодОбразованияКФХ > ГодОтчета Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Некорректный год образования КФХ (должен быть более 1976 года но не старше года отчета)'"),
						"ПредпринимательГодОбразованияКФХ");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(ПредпринимательНеоблагаемыйДоходКФХ) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указаны доходы предпринимателя'"),
						"ПредпринимательНеоблагаемыйДоходКФХ");
			КонецЕсли;
		КонецЕсли; 
		
		Для Каждого СтрокаДохода Из ТаблицаДокументовПредпринимателя Цикл
			
			НомерСтроки = СтрокаДохода.ПолучитьИдентификатор();
			
			Если Не ЗначениеЗаполнено(СтрокаДохода.ВидДеятельностиКод) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан код вида деятельности (ОКВЭД)'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			//Если Не ЗначениеЗаполнено(СтрокаДохода.ВидДеятельностиНаименование) Тогда
			//	ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано наименование вида деятельности'"),
			//			ИмяПоля, НомерСтроки);
			//КонецЕсли; 
			Если Не ЗначениеЗаполнено(СтрокаДохода.СуммаДохода) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма дохода по виду деятельности'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
		
		КонецЦикла; 

	КонецЕсли; 
	
#КонецОбласти

#Область Проверка_Раздел3

	НомерРаздела = 3;
	
	// Стандартные вычеты
	ИмяПоля = "ТаблицаСтандартныхВычетов";
	НомерСтроки = -1;
	
	НужноПроверять = ТаблицаСтандартныхВычетов.Итог("ВычетНаДетей") > 0;
	Если НужноПроверять Тогда
		
		Для Каждого СтрокаВычета Из ТаблицаСтандартныхВычетов Цикл
			
			НомерСтроки = СтрокаВычета.ПолучитьИдентификатор();
			
			Если СтрокаВычета.ВычетНаДетей > 0 И СтрокаВычета.КоличествоДетейСТретьего + СтрокаВычета.КоличествоДетейДоТретьего + СтрокаВычета.КоличествоДетейИнвалидов = 0 Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано количество детей'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	// Пенсионные взносы
	ИмяПоля = "ТаблицаСоциальныхСтраховыхВычетов";
	НомерСтроки = -1;
	Для Каждого СтрокаВычета Из ТаблицаСоциальныхСтраховыхВычетов Цикл
		
		НомерСтроки = СтрокаВычета.ПолучитьИдентификатор();
		
		Если СтрДлина(СтрокаВычета.ИНН) <> 10 Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный ИНН (длина ИНН должна быть 10 символов)'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если СтрДлина(СтрокаВычета.Кпп) <> 9 Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Неверный КПП (длина ИНН должна быть 9 символов)'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если ПустаяСтрока(СтрокаВычета.НаименованиеОрганизации) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано наименование пенсионного фонда или страховой организации'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если ПустаяСтрока(СтрокаВычета.НомерДоговора) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан номер договора пенсионного страхования'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если ПустаяСтрока(СтрокаВычета.ДатаДоговора) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана дата договора пенсионного страхования'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если СтрокаВычета.СуммаВзноса = 0 Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма страховых взносов'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ДополнительныеВзносыПФСуммаВзноса = 0 И ДополнительныеВзносыПФПринимаетсяКВычету > 0 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указана сумма страховых взносов на накопительную часть пенсии'"),
				"ДополнительныеВзносыПФСуммаВзноса", НомерСтроки);
	КонецЕсли; 
	
	// Имущественный вычет
	ИмяПоля = "ТаблицаИмущественныхВычетов";
	НомерСтроки = -1;
	
	Если ТаблицаИмущественныхВычетовИтоги.Итог("СуммаНаПриобретение") + ТаблицаИмущественныхВычетовИтоги.Итог("СуммаПроцентов") > 0
			И ТаблицаИмущественныхВычетов.Количество() = 0 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указаны объекты имущества для предоставления имущественного вычета'"),
				ИмяПоля);
	КонецЕсли; 
	
	ГодПравилВычета = 0;
	
	Для Каждого СтрокаВычета Из ТаблицаИмущественныхВычетов Цикл
		
		НомерСтроки = СтрокаВычета.ПолучитьИдентификатор();
		
		Если СтрокаВычета.ЖильеСпособПриобретения = 1 Тогда
			СравниваемыйГод = Год(СтрокаВычета.ЖильеДатаПраваСобственности);
		Иначе
			СравниваемыйГод = Год(СтрокаВычета.ЖильеДатаАктаПередачи);
		КонецЕсли; 
		СравниваемыйГод = ?(СравниваемыйГод = 0, СтрокаВычета.ЖильеГодНачалаВычета, СравниваемыйГод);
		Если ГодПравилВычета = 0 ИЛИ ГодПравилВычета > СравниваемыйГод Тогда
			ГодПравилВычета = СравниваемыйГод;
		КонецЕсли;
		
		Если СтрокаВычета.ЖильеСпособПриобретения = 1 И НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДатаПраваСобственности) 
			ИЛИ Год(СтрокаВычета.ЖильеДатаПраваСобственности) > ГодОтчета  Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Дата регистрации прав на жилье не указана или не соответствует отчетному году'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если СтрокаВычета.ЖильеСпособПриобретения = 2 И  НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДатаАктаПередачи) ИЛИ Год(СтрокаВычета.ЖильеДатаАктаПередачи) > ГодОтчета Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Дата акта передачи жилья в собственность не указана или не соответствует отчетному году'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеНаименование) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указано наименование жилья'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеВидСобственности) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан вид собственности жилья'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеВидСобственности) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан вид собственности жилья'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеГодНачалаВычета) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан год начала пользования имущественным вычетом на приобретение жилья'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		Если ЗначениеЗаполнено(СравниваемыйГод) И СравниваемыйГод < 2014 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДоляЗнаменатель) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан знаменатель в доле собственности жилья'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеДоляЧислитель) Тогда
				ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан числитель в доле собственности жилья'"),
						ИмяПоля, НомерСтроки);
			КонецЕсли; 
		КонецЕсли; 		
		Если НЕ ЗначениеЗаполнено(СтрокаВычета.ЖильеАдресПредставление) Тогда
			ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Не указан адрес местонахождения приобретенного жилья'"),
					ИмяПоля, НомерСтроки);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ГодПравилВычета > 0 И ГодПравилВычета < 2014 И ТаблицаИмущественныхВычетов.Количество() > 1 Тогда
		ДобавитьСтрокуОшибки(НомерРаздела, НСтр("ru = 'Нельзя получить имущественный вычет по нескольким объектам недвижимости, т.к. по крайней мере один из них приобретен до 2014 года.'"),
				ИмяПоля);
	КонецЕсли; 
	
#КонецОбласти


	Элементы.ГруппаСписокСообщений.Видимость = СписокСообщений.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуОшибки(НомерРаздела, Знач ТекстОшибки, Знач ИмяПоля, НомерСтроки = -1, ИмяКолонки = "")

	НоваяСтрока = СписокСообщений.Добавить();
	НоваяСтрока.НомерРаздела   = НомерРаздела;
	НоваяСтрока.Элемент        = ИмяПоля;
	НоваяСтрока.Строка         = НомерСтроки;
	НоваяСтрока.Колонка        = ИмяКолонки;
	НоваяСтрока.ТекстСообщения = ТекстОшибки;
	
	//ПутьКДанным = ИмяПоля;
	//Если НомерСтроки <> Неопределено Тогда
	//	ПутьКДанным = ПутьКДанным + "[" + Формат(НомерСтроки, "ЧДЦ=; ЧГ=") + "]";
	//КонецЕсли; 
	//Если ИмяКолонки <> Неопределено Тогда
	//	ПутьКДанным = ПутьКДанным + "." + ИмяКолонки;
	//КонецЕсли; 
	//
	//Сообщение = Новый СообщениеПользователю;
	//Сообщение.Текст = ТекстОшибки;
	//Сообщение.Поле = ИмяПоля;
	//Сообщение.КлючДанных = Неопределено;
	////Сообщение.ПутьКДанным = ПутьКДанным;
	//Сообщение.Сообщить(); 

КонецПроцедуры


#КонецОбласти


#Область ЧтениеЗаписьДанныхОтчета

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаРеквизитовПомощника()

	Возврат "АдресВРФОКТМО,АдресВРФПредставление,АдресВРФСтруктура,АдресВРФТипАдреса,АдресЗаПределамиРФ,ВидДекларации,
		|ГодОтчета,ДатаПодписи,ДокументДатаВыдачи,ДокументКемВыдан,ДокументКодВида,ДокументНаименованиеВида,ДокументСерияИНомер,
		|ДополнительныеВзносыПФВычетУНалоговогоАгента,ДополнительныеВзносыПФПринимаетсяКВычету,ДополнительныеВзносыПФСуммаВзноса,
		|ДоходыФЛФиксированныеПлатежиИностранца,ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам,ЖильеВычетПрошлыхЛетОтАгентаПоРасходам,
		|ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам,ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам,ЖильеВычетЭтогоГодаОтАгентаПоПроцентам,
		|ЖильеВычетЭтогоГодаОтАгентаПоРасходам,ЖильеОстатокВычетаПоПроцентам,ЖильеОстатокВычетаПоРасходам,КодИФНС,НаименованиеИФНС,
		|НалогоплательщикДатаРождения,НалогоплательщикИмя,НалогоплательщикИНН,НалогоплательщикКатегория,НалогоплательщикМестоРождения,
		|НалогоплательщикНомерТелефона,НалогоплательщикОтчество,НалогоплательщикСтатус,НалогоплательщикСтрана,НалогоплательщикФамилия,
		|НомерКорректировки,ПредпринимательВычетПодтвержденДокументами,ПредпринимательГодОбразованияКФХ,ПредпринимательНачисленоАвансовыхПлатежей,
		|ПредпринимательНеоблагаемыйДоходКФХ,ПредпринимательУплаченоФактическихПлатежей,ПредпринимательСуммаПатента,ПредпринимательТорговыйСбор,
		|ИнвестиционныйВычетОтчетногоПериода,ИнвестиционныйВычетПрошлыхПериодов";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокТаблицПомощника()

	Результат = Новый Массив;
	Результат.Добавить("ТаблицаДокументовПредпринимателя");
	Результат.Добавить("ТаблицаДокументовФизЛица");
	Результат.Добавить("ТаблицаИмущественныхВычетов");
	Результат.Добавить("ТаблицаИмущественныхВычетовИтоги");
	Результат.Добавить("ТаблицаСоциальныхВычетов");
	Результат.Добавить("ТаблицаСоциальныхСтраховыхВычетов");
	Результат.Добавить("ТаблицаСтандартныхВычетов");
	Результат.Добавить("ТаблицаУбытковПоЦеннымБумагам");

	Возврат Результат;
	
КонецФункции
 
// Считывает данные помощника из данных отчета
&НаСервере
Процедура ЗаполнитьТаблицыПомощникаДаннымиОтчета()

	Если Параметры.Свойство("мДатаКонцаПериодаОтчета") И ЗначениеЗаполнено(Параметры.мДатаКонцаПериодаОтчета) Тогда
		ГодОтчета = Год(Параметры.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаДокументОтчета) ИЛИ ЗначениеЗаполнено(Параметры.мСкопированаФорма) Тогда
		
		Если ЗначениеЗаполнено(Параметры.мСкопированаФорма) Тогда
			
			ДокументОбъект = Параметры.мСохраненныйДок.Скопировать();
			СсылкаНаДокументОтчета = Неопределено;
			
		Иначе
			
			ДокументОбъект = СсылкаНаДокументОтчета.ПолучитьОбъект();
			
		КонецЕсли; 
		
		ДанныеОтчета   = ДокументОбъект.ДанныеОтчета.Получить();
		Если ДанныеОтчета.ВерсияФормы = НомерВерсииФормыОтчета() Тогда
			
			ЗаполитьФормуИзДанныхПомощника(ДанныеОтчета);
			
		Иначе
			
			ТекстСообщений = "";
			Если Не ВыполнитьЗагрузкуДанныхИзДругогоОтчета(Параметры.мСохраненныйДок, ТекстСообщений) Тогда
				ВызватьИсключение ТекстСообщений;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполитьФормуИзДанныхПомощника(ДанныеОтчета)

	Если  ТипЗнч(ДанныеОтчета) = Тип("Структура") 
		И ДанныеОтчета.Свойство("ДанныеПомощника")
		И ТипЗнч(ДанныеОтчета.ДанныеПомощника) = Тип("Структура") Тогда
		
		ДанныеПомощника = ДанныеОтчета.ДанныеПомощника;
		
		Если ПроверитьВерсиюДанныхПомощника(ДанныеПомощника, ДанныеОтчета.ВерсияФормы) Тогда
			// Заполняем реквизиты помощника заполнения:
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПомощника, СтрокаРеквизитовПомощника());
		КонецЕсли;
		
		// Заполняем структуры:
		АдресВРФСтруктура = КопияКоллекции(ДанныеПомощника.АдресВРФСтруктура);
		
		// Заполняем табличные части:
		СписокТЧ = СписокТаблицПомощника();
		Для Каждого ИмяТаблицы Из СписокТЧ Цикл
			
			Если НЕ  ДанныеПомощника.Свойство(ИмяТаблицы) Тогда
				Продолжить;
			КонецЕсли; 
			
			// Загружаем табличную часть
			ЭтотОбъект[ИмяТаблицы].Загрузить(ДанныеПомощника[ИмяТаблицы]);
			
			// Загружаем вложенные коллекции
			Если ИмяТаблицы = "ТаблицаДокументовПредпринимателя" Тогда
				
				Если ДанныеПомощника[ИмяТаблицы].Колонки.Найти("СтрокиОтчетаПредпринимателя") <> Неопределено Тогда
					ВсегоСтрок = ДанныеПомощника[ИмяТаблицы].Количество() - 1;
					Для СчетчикСтрок = 0 По ВсегоСтрок Цикл
						ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].СтрокиОтчетаПредпринимателя.Загрузить(ДанныеПомощника[ИмяТаблицы][СчетчикСтрок].СтрокиОтчетаПредпринимателя);
					КонецЦикла; 
				КонецЕсли; 
				
			ИначеЕсли ИмяТаблицы = "ТаблицаДокументовФизЛица" Тогда
				
				ВсегоСтрок = ДанныеПомощника[ИмяТаблицы].Количество() - 1;
				Для СчетчикСтрок = 0 По ВсегоСтрок Цикл
				
					Если ДанныеПомощника[ИмяТаблицы].Колонки.Найти("Строки2НДФЛ") <> Неопределено Тогда
						ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].Строки2НДФЛ.Загрузить(ДанныеПомощника[ИмяТаблицы][СчетчикСтрок].Строки2НДФЛ);
					КонецЕсли; 
				
					Если ДанныеПомощника[ИмяТаблицы].Колонки.Найти("Вычеты2НДФЛ") <> Неопределено Тогда
						ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].Вычеты2НДФЛ.Загрузить(ДанныеПомощника[ИмяТаблицы][СчетчикСтрок].Вычеты2НДФЛ);
					КонецЕсли; 
					
					Если ДанныеПомощника[ИмяТаблицы].Колонки.Найти("ДоходыТоварищества") <> Неопределено Тогда
						ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].ДоходыТоварищества.Загрузить(ДанныеПомощника[ИмяТаблицы][СчетчикСтрок].ДоходыТоварищества);
					КонецЕсли; 
					
				КонецЦикла; 
				
			ИначеЕсли ИмяТаблицы = "ТаблицаИмущественныхВычетов" Тогда
				
				Если ДанныеПомощника[ИмяТаблицы].Колонки.Найти("ЖильеАдресСтруктура") <> Неопределено Тогда
					ВсегоСтрок = ДанныеПомощника[ИмяТаблицы].Количество() - 1;
					Для СчетчикСтрок = 0 По ВсегоСтрок Цикл
						ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].ЖильеАдресСтруктура = КопияКоллекции(ДанныеПомощника[ИмяТаблицы][СчетчикСтрок].ЖильеАдресСтруктура);
					КонецЦикла; 
				КонецЕсли; 
				
			КонецЕсли; 
				
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры

// По номеру версии формы определяет необходимость дополнить струкуру помощника дополнительными реквизитами
&НаСервере
Функция ПроверитьВерсиюДанныхПомощника(ДанныеПомощника, ВерсияФормы)

	Если ВерсияФормы = НомерВерсииФормыОтчета() Тогда
		
		Возврат Истина;
		
	ИначеЕсли ВерсияФормы = "01/01/2016" Тогда
		
		ДанныеПомощника.Вставить("ПредпринимательСуммаПатента", 0);
		ДанныеПомощника.Вставить("ПредпринимательТорговыйСбор", 0);
		
		Возврат Истина;
		
	ИначеЕсли ВерсияФормы = "01/01/2015" Или ВерсияФормы = "10/11/2015" Тогда
		
		ДанныеПомощника.Вставить("ИнвестиционныйВычетОтчетногоПериода", 0);
		ДанныеПомощника.Вставить("ИнвестиционныйВычетПрошлыхПериодов", 0);
		ДанныеПомощника.Вставить("ПредпринимательСуммаПатента", 0);
		ДанныеПомощника.Вставить("ПредпринимательТорговыйСбор", 0);
		
		Если ДанныеПомощника.Свойство("ТаблицаСоциальныхСтраховыхВычетов")
			И ДанныеПомощника.ТаблицаСоциальныхСтраховыхВычетов.Колонки.Найти("ВидДоговора") = Неопределено Тогда
			ДанныеПомощника.ТаблицаСоциальныхСтраховыхВычетов.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
		Если ДанныеПомощника.ГодОтчета < 2015 Тогда
			ДанныеПомощника.ГодОтчета = 2015;
		КонецЕсли;
		
		ДанныеПомощника.ВерсияСтруктурыДанныхПомощника = НомерВерсииДанныхПомощника();
		
		ДанныеПомощника.ДополнительныеВзносыПФВычетУНалоговогоАгента = 0;
		ДанныеПомощника.ДополнительныеВзносыПФПринимаетсяКВычету     = 0;
		ДанныеПомощника.ДополнительныеВзносыПФСуммаВзноса            = 0;
		
		ДанныеПомощника.ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам     = 0;
		ДанныеПомощника.ЖильеВычетПрошлыхЛетОтАгентаПоРасходам      = 0;
		ДанныеПомощника.ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам  = 0;
		ДанныеПомощника.ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам   = 0;
		ДанныеПомощника.ЖильеВычетЭтогоГодаОтАгентаПоПроцентам      = 0;
		ДанныеПомощника.ЖильеВычетЭтогоГодаОтАгентаПоРасходам       = 0;
		ДанныеПомощника.ЖильеОстатокВычетаПоПроцентам               = 0;
		ДанныеПомощника.ЖильеОстатокВычетаПоРасходам                = 0;
		
		ДанныеПомощника.НомерКорректировки                         = 0;
		ДанныеПомощника.ПредпринимательНачисленоАвансовыхПлатежей  = 0;
		ДанныеПомощника.ПредпринимательУплаченоФактическихПлатежей = 0;
		
		// Удаляем прочие доходы из таблицы документов физических лиц
		Если ДанныеПомощника.Свойство("ТаблицаДокументовФизЛица") Тогда
			
			СтрокиКУдалению = Новый Массив;
			Для каждого СтрокаДокумента Из ДанныеПомощника.ТаблицаДокументовФизЛица Цикл
				Если СтрокаДокумента.ТипДокумента = "Прочий доход" Или СтрокаДокумента.ТипДокумента = "Доход в валюте" Тогда
					СтрокиКУдалению.Добавить(СтрокаДокумента);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ДанныеПомощника.ТаблицаДокументовФизЛица.Удалить(СтрокаКУдалению);
			КонецЦикла;
			 
		КонецЕсли;
		
		// Сокращаем таблицу убытков по ценным бумагам
		Если ДанныеПомощника.Свойство("ТаблицаУбытковПоЦеннымБумагам") Тогда
			
			ТекущийГод      = Год(ТекущаяДатаКлиентСервер());
			МинимальныйГод  = ТекущийГод - 1;
			СтрокиКУдалению = Новый Массив;
			Для каждого СтрокаДокумента Из ДанныеПомощника.ТаблицаУбытковПоЦеннымБумагам Цикл
				Если СтрокаДокумента.Год < МинимальныйГод Тогда
					СтрокиКУдалению.Добавить(СтрокаДокумента);
				КонецЕсли;
			КонецЦикла;
			
			СчетчикЛет = СтрокиКУдалению.Количество();
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ДанныеПомощника.ТаблицаУбытковПоЦеннымБумагам.Удалить(СтрокаКУдалению);
				НоваяСтрока = ДанныеПомощника.ТаблицаУбытковПоЦеннымБумагам.Вставить(0);
				НоваяСтрока.Год = ТекущийГод - СчетчикЛет;
				СчетчикЛет = СчетчикЛет - 1;
			КонецЦикла;
			 
		КонецЕсли;
		
		// Обновляем итоги по имущественному вычету
		Если ДанныеПомощника.Свойство("ТаблицаИмущественныхВычетовИтоги") Тогда
			
			ДанныеПомощника.ТаблицаИмущественныхВычетовИтоги[0].СуммаНаПриобретение = 
					ДанныеПомощника.ТаблицаИмущественныхВычетовИтоги[0].СуммаНаПриобретение + ДанныеПомощника.ТаблицаИмущественныхВычетовИтоги[2].СуммаНаПриобретение;
					
			ДанныеПомощника.ТаблицаИмущественныхВычетовИтоги[0].СуммаПроцентов = 
					ДанныеПомощника.ТаблицаИмущественныхВычетовИтоги[0].СуммаПроцентов + ДанныеПомощника.ТаблицаИмущественныхВычетовИтоги[2].СуммаПроцентов;
		
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат ложь;
	
КонецФункции
 
&НаКлиенте
Процедура ЗаписатьНаКлиенте(ОбновлятьДанныеОтчета = Ложь, ОтказатьсяОтПомощника = Ложь)

	ЗаписатьНаСервере(ОбновлятьДанныеОтчета, ОтказатьсяОтПомощника);
	Если НЕ Модифицированность Тогда
		Оповестить("Записан 3-НДФЛ");
	КонецЕсли; 

КонецПроцедуры


// Сохраняет данные в регламментированный отчет
//
//Параметры:
//	ОбновлятьДанныеОтчета - Булево - нужно ли заполнять бланк регламентированного отчета?
//	ОтказатьсяОтПомощника - Булево - запись с отказом от помощника заполнения
//	
&НаСервере
Процедура ЗаписатьНаСервере(ОбновлятьДанныеОтчета = Ложь, ОтказатьсяОтПомощника = Ложь)
	
	Если ЗначениеЗаполнено(СсылкаНаДокументОтчета) Тогда
		
		ДокументОбъект = СсылкаНаДокументОтчета.ПолучитьОбъект();
		ДокументОбъект.ВыбраннаяФорма           = "ФормаОтчета2016кв1";
		
	Иначе
		
		ДокументОбъект = Документы.РегламентированныйОтчет.СоздатьДокумент();
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ПрефиксИменМакетов = Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета"));
		
		// установим текущие значения реквизитов документа
		ДокументОбъект.ИсточникОтчета           = "РегламентированныйОтчет3НДФЛ";
		ДокументОбъект.НаименованиеОтчета       = Метаданные.Отчеты.РегламентированныйОтчет3НДФЛ.ОсновнаяФорма.Синоним;
		ДокументОбъект.Периодичность            = Перечисления.Периодичность.Год;
		ДокументОбъект.ВыбраннаяФорма           = "ФормаОтчета2016кв1";
		ДокументОбъект.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
		ДокументОбъект.ТочностьЕдиницыИзмерения = 0;
		ДокументОбъект.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
		
	КонецЕсли; 

	ДокументОбъект.Дата                     = ДатаПодписи;
	ДокументОбъект.ДатаНачала               = Дата(ГодОтчета, 1, 1);
	ДокументОбъект.ДатаОкончания            = КонецГода(ДокументОбъект.ДатаНачала);
	ДокументОбъект.Организация              = Обработки.ПомощникЗаполнения3НДФЛ.ПолучитьСсылкуНалогоплательщика(
												НалогоплательщикФамилия,
												НалогоплательщикИмя,
												НалогоплательщикОтчество,
												НалогоплательщикИНН,
												КодИФНС, "", НалогоплательщикДатаРождения, НалогоплательщикМестоРождения,
												ДокументКодВида, ДокументСерияИНомер, ДокументДатаВыдачи, ДокументКемВыдан, НалогоплательщикСтрана);
	ДокументОбъект.ДатаПодписи              = ДатаПодписи;
	//ДокументОбъект.Комментарий              = Комментарий;
	ДокументОбъект.КодНалоговогоОргана      = КодИФНС;
	//ДокументОбъект.КПП        			    = КПП;
	ДокументОбъект.Вид                      = ВидДекларации * НомерКорректировки;
	ДокументОбъект.ИспользоватьПомощникЗаполнения = ОтказатьсяОтПомощника <> Истина;
	
	СписокСохранения = ДокументОбъект.ДанныеОтчета.Получить();
	
	Если НЕ ТипЗнч(СписокСохранения) = Тип("Структура") Тогда
		СписокСохранения = Новый Структура;
	КонецЕсли; 
	
	// Получаем сруктуру, заполненную данными помощника, и сохраняем ее в данных отчета 
	ДанныеПомощника = ПолучитьСтруктуруДанныхПомощникаЗаполнения();
	Если НЕ ОтказатьсяОтПомощника Тогда
		СписокСохранения.Вставить("ДанныеПомощника", ДанныеПомощника);
	КонецЕсли; 
	
	Если ОбновлятьДанныеОтчета Тогда
		
		// Воспроизводим структуру данных, сохраняемых в регламентированном отчете
		ПараметрыЗаполнения = Неопределено;  //Вспомогательная структура
		ПодготовитьСписокСохраненияОтчета(СписокСохранения, ПараметрыЗаполнения);
		Если ОтказатьсяОтПомощника Тогда
			СписокСохранения.Автозаполнение = Ложь;
		КонецЕсли; 
		
		// Заполняем отчет данными помощника заполнения
		ЗаполнитьОтчетДанными(СписокСохранения, ПараметрыЗаполнения);
		
		Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() = 0 Тогда
			СформироватьСтруктуруСтраницОтчета();
		КонецЕсли;
		
		//Отмечаем листы, которые должны выводиться на печать:
		Для Каждого СтрокаДерева Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
			
			Если ПараметрыЗаполнения.ЗаполненныеРазделы.Свойство(СтрокаДерева.ИмяСтраницы) 
					И ПараметрыЗаполнения.ЗаполненныеРазделы[СтрокаДерева.ИмяСтраницы] = Истина Тогда
				СтрокаДерева.ПоказатьСтраницу = 1;
				СтрокаДерева.ВыводНаПечать = 1;
			Иначе
				СтрокаДерева.ПоказатьСтраницу = 0;
				СтрокаДерева.ВыводНаПечать = 0;
			КонецЕсли; 
			
		КонецЦикла; 
		
		ДокументОбъект.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
		
	КонецЕсли; 
	
	ДокументОбъект.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	ДокументОбъект.Комментарий = ?(ВидДекларации = 0, "Декларация", "Корректировка № " +НомерКорректировки)
			+ ": "  + ПолучитьФИО(НалогоплательщикФамилия, НалогоплательщикИмя, НалогоплательщикОтчество);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	СсылкаНаДокументОтчета = ДокументОбъект.Ссылка;
	
	ОбновитьЗаголовкиРаздела(ЭтотОбъект);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

// Возвращает структуру, заполненную показателями помощника
&НаСервере
Функция ПолучитьСтруктуруДанныхПомощникаЗаполнения()

	Результат = Новый Структура(СтрокаРеквизитовПомощника());
	ЗаполнитьЗначенияСвойств(Результат, ЭтотОбъект);
	
	// Заполняем табличные части:
	СписокТЧ = СписокТаблицПомощника();
	Для Каждого ИмяТаблицы Из СписокТЧ Цикл
		
		// Выгружаем табличную часть
		Результат.Вставить(ИмяТаблицы, ЭтотОбъект[ИмяТаблицы].Выгрузить());
		
		// Выгружаем вложенные коллекции
		Если ИмяТаблицы = "ТаблицаДокументовПредпринимателя" Тогда
			
			Если Результат[ИмяТаблицы].Колонки.Найти("СтрокиОтчетаПредпринимателя") = Неопределено Тогда
				Результат[ИмяТаблицы].Колонки.Добавить("СтрокиОтчетаПредпринимателя", Новый ОписаниеТипов("ТаблицаЗначений"));
			КонецЕсли;
			
			ВсегоСтрок = ЭтотОбъект[ИмяТаблицы].Количество() - 1;
			Для СчетчикСтрок = 0 По ВсегоСтрок Цикл
				Результат[ИмяТаблицы][СчетчикСтрок].СтрокиОтчетаПредпринимателя = ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].СтрокиОтчетаПредпринимателя.Выгрузить();
			КонецЦикла; 
			
		ИначеЕсли ИмяТаблицы = "ТаблицаДокументовФизЛица" Тогда
			
			Если Результат[ИмяТаблицы].Колонки.Найти("Строки2НДФЛ") = Неопределено Тогда
				Результат[ИмяТаблицы].Колонки.Добавить("Строки2НДФЛ", Новый ОписаниеТипов("ТаблицаЗначений"));
			КонецЕсли;
			Если Результат[ИмяТаблицы].Колонки.Найти("Вычеты2НДФЛ") = Неопределено Тогда
				Результат[ИмяТаблицы].Колонки.Добавить("Вычеты2НДФЛ", Новый ОписаниеТипов("ТаблицаЗначений"));
			КонецЕсли;
			Если Результат[ИмяТаблицы].Колонки.Найти("ДоходыТоварищества") = Неопределено Тогда
				Результат[ИмяТаблицы].Колонки.Добавить("ДоходыТоварищества", Новый ОписаниеТипов("ТаблицаЗначений"));
			КонецЕсли;
			
			ВсегоСтрок = ЭтотОбъект[ИмяТаблицы].Количество() - 1;
			Для СчетчикСтрок = 0 По ВсегоСтрок Цикл
				Результат[ИмяТаблицы][СчетчикСтрок].Строки2НДФЛ        = ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].Строки2НДФЛ.Выгрузить();
				Результат[ИмяТаблицы][СчетчикСтрок].Вычеты2НДФЛ        = ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].Вычеты2НДФЛ.Выгрузить();
				Результат[ИмяТаблицы][СчетчикСтрок].ДоходыТоварищества = ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].ДоходыТоварищества.Выгрузить();
			КонецЦикла; 
			
		ИначеЕсли ИмяТаблицы = "ТаблицаИмущественныхВычетов" Тогда
			
			Если Результат[ИмяТаблицы].Колонки.Найти("ЖильеАдресСтруктура") = Неопределено Тогда
				Результат[ИмяТаблицы].Колонки.Добавить("ЖильеАдресСтруктура");
			КонецЕсли;
			
			ВсегоСтрок = ЭтотОбъект[ИмяТаблицы].Количество() - 1;
			Для СчетчикСтрок = 0 По ВсегоСтрок Цикл
				
				Результат[ИмяТаблицы][СчетчикСтрок].ЖильеАдресСтруктура = Новый Структура;
				Для Каждого КлючИЗначение Из ЭтотОбъект[ИмяТаблицы][СчетчикСтрок].ЖильеАдресСтруктура Цикл
					Результат[ИмяТаблицы][СчетчикСтрок].ЖильеАдресСтруктура.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла; 
			КонецЦикла; 
			
		КонецЕсли; 
			
	КонецЦикла;

	// Добавляем версию структуры данных
	Результат.Вставить("ВерсияСтруктурыДанныхПомощника", НомерВерсииДанныхПомощника());
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру, аналогичную структуре, хранящейся в ДанныхОтчета
&НаСервере
Процедура ПодготовитьСписокСохраненияОтчета(СписокСохранения, ПараметрыЗаполнения)

	// Для временного хранения вспомогательных данных используем структуру "Параметры заполнения"
	ПараметрыЗаполнения = Новый Структура();
	// Из макетов получим описание полей для каждого листа отчета 
	ЗагрузитьСтруктуруЛистовОтчета(ПараметрыЗаполнения); 
	// Создадим пустые таблицы многострочных листов (нужны при интерактивной работе в форме самого отчета)
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов",   Новый Структура);
	СписокСохранения.ДанныеМногострочныхРазделов.Вставить("П000300001", ПараметрыЗаполнения.СтруктураПолейЛистов.ЛистА.ТаблицаМногострочнойЧасти.СкопироватьКолонки());
	СписокСохранения.ДанныеМногострочныхРазделов.Вставить("П000400001", ПараметрыЗаполнения.СтруктураПолейЛистов.ЛистБ.ТаблицаМногострочнойЧасти.СкопироватьКолонки());
	
	// Вспомогательные данные для хранения отчета (нужны при интерактивной работе в форме самого отчета)
	СписокСохранения.Вставить("Автозаполнение",                            Истина);
	СписокСохранения.Вставить("ВерсияФормы",                               НомерВерсииФормыОтчета());
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена",               Истина);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",                       Ложь);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",                          Ложь);
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки",   Ложь);
	
	// Из макета "СоставПоказателей..." собираем варианты автозаполнения (нужен для корректной работы отчета)
	МакетСоставаПоказателей = ОбъектЭтогоОтчета().ПолучитьМакет("СоставПоказателей2016кв1");
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть =  МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ТаблицаВариантов = Новый ТаблицаЗначений;
		ТаблицаВариантов.Колонки.Добавить("КодПоказателя", Новый ОписаниеТипов("Строка"));
		ТаблицаВариантов.Колонки.Добавить("ВариантЗаполнения", Новый ОписаниеТипов("Число"));
		ТаблицаВариантов.Колонки.Добавить("ЗначениеАвто", Новый ОписаниеТипов("Число"));
		ТаблицаВариантов.Колонки.Добавить("Дельта", Новый ОписаниеТипов("Число"));
		ТаблицаВариантов.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
		ТаблицаВариантов.Колонки.Добавить("КодПоказателяПоСтруктуре", Новый ОписаниеТипов("Строка"));
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = ТаблицаВариантов.Добавить();
			НоваяСтрока.КодПоказателя            = КодПоказателя;
			НоваяСтрока.ВариантЗаполнения        = ?(ЗначениеЗаполнено(стрВариантЗаполнения), Число(стрВариантЗаполнения), 0);
			НоваяСтрока.ЗначениеАвто             = 0;
			НоваяСтрока.Дельта                   = 0;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
		КонецЦикла;
		
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить(ТаблицаВариантов);
		ДанныеВариантовАвтоЗаполнения.Вставить(ИмяСтраницы, МассивВариантов);
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// Создаем таблицы для хранения показателей многостраничных листов:
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", Новый Структура);
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("Раздел1", ПустаяТаблицаМногостраничногоРаздела());
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("Раздел2", ПустаяТаблицаМногостраничногоРаздела());
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("ЛистА", ПустаяТаблицаМногостраничногоРаздела());
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("ЛистБ", ПустаяТаблицаМногостраничногоРаздела());
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("ЛистВ", ПустаяТаблицаМногостраничногоРаздела());
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("ЛистД1", ПустаяТаблицаМногостраничногоРаздела());
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("ЛистЕ2", ПустаяТаблицаМногостраничногоРаздела());
	СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("ЛистЖ", ПустаяТаблицаМногостраничногоРаздела());

	// Создаем показатели для всех листов, независимо от их использования и заполнения.
	//	Это позволит открывать и корреткно работать с формой отчета без помощника заполнения.
	СписокСохранения.Вставить("ПоказателиОтчета",              Новый Структура);
	
	// Добавляем однострочные и одностраничные листы отчета
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "Титульный");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистГ");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистД2");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистЕ1");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистЗ");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистЗПродолжение");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистЗПродолжение2");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистЗПродолжение3");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистЗПродолжение4");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистИ");
	ДобавитьВСписокСохраненияЛист(СписокСохранения,  ПараметрыЗаполнения, "ЛистИПродолжение");

	// Добавляем страницы мгогостраничных (но однострочных!) листов и итоговые поля для них:
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "Раздел1");
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "Раздел2");
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистВ");
	ДобавитьНаСтраницуЛистаПоляИтогов(СтраницаЛиста, ПараметрыЗаполнения, "ЛистВ");
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистД1");
	ДобавитьНаСтраницуЛистаПоляИтогов(СтраницаЛиста, ПараметрыЗаполнения, "ЛистД1");
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистЕ2");
	ДобавитьНаСтраницуЛистаПоляИтогов(СтраницаЛиста, ПараметрыЗаполнения, "ЛистЕ2");
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистЖ");
	
	// Добавляем страницы мгогостранично-многострочных листов, по одной строке на каждую страницу и итоговые поля:
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуМногострочногоЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистА"); // добавили пустой лист
	НоваяСтрокаМногострочногоЛиста(СтраницаЛиста); // добавили единственную строку
	СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуМногострочногоЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистБ"); // добавили пустой лист
	НоваяСтрокаМногострочногоЛиста(СтраницаЛиста); // добавили единственную строку
	ДобавитьНаСтраницуЛистаПоляИтогов(СтраницаЛиста, ПараметрыЗаполнения, "ЛистБ"); // Добавили поля итогов
	
	
КонецПроцедуры

// Добавляет в ПарметрыЗаполнения структуру, описывающую поля каждой страницы отчета
//	Для многострочных отчетов так же формируется таблица для хранения дополнительных строк, которая
//	в дальнейшем используется как образец.
//
&НаСервере
Процедура ЗагрузитьСтруктуруЛистовОтчета(ПараметрыЗаполнения)

	СтруктураПолейЛистов = Новый Структура;
	
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "Титульный", Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "Раздел1", Истина, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "Раздел2", Истина, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистА", Истина, Истина);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистБ", Истина, Истина);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистВ", Истина, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистГ", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистД1", Истина, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистД2", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЕ1", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЕ2", Истина, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЖ", Истина, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЗ", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЗПродолжение", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЗПродолжение2", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЗПродолжение3", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистЗПродолжение4", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистИ", Ложь, Ложь);
	ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, "ЛистИПродолжение", Ложь, Ложь);
	
	ПараметрыЗаполнения.Вставить("СтруктураПолейЛистов", СтруктураПолейЛистов);

КонецПроцедуры

// Добавляет в параметр СтруктураПолейЛистов новую структуру, описывающую состав и типы полей для указанного листа отчета 
//
//Параметры:
//	ИмяСтраницы     - Строка - имя страницы, для которой нужно прочитать состав полей
//	Многостраничный - Булево - если Истина, будут добавлены поля итогов
//	Многострочный   - Булево - если Истина, кроме полей самой страницы будут считаны и поля ее строк
//
//Добавляемая структура:
//		* ПоляСтраницы - структура, содержащая имена полей и их типы (описание типов).
//						В случае многострочных или многостраничных листов содержит только поля, выводимые на каждом листе
//		* ПоляМногострочнойЧасти - структура, содержащая имена полей и их типы (описание типов) для многострочной части
//		* ТаблицаМногострочнойЧасти - ТаблицаЗначений - используется для копирования в новые многострочные листы
//		* ПоляИтогов - структура, содержащая имена полей и их типы (описание типов).
//						Имеет смысл только для многостраничных листов
//
&НаСервере
Процедура ДобавитьСтруктуруПолейСтраницы(СтруктураПолейЛистов, ИмяСтраницы, Многостраничный = Ложь, Многострочный = Ложь)

	СтруктураСтраницы = Новый Структура;
	
	СтруктураСтраницы.Вставить("Многостраничный", Многостраничный);
	СтруктураСтраницы.Вставить("Многострочный",   Многострочный);
	
	// Поля и их типы получаем из макета, предназначенного для заполнения
	ИмяМакета = "ФормаОтчета2016кв1_" + ИмяСтраницы;
	ИсходныйМакет = ОбъектЭтогоОтчета().ПолучитьМакет(ИмяМакета);
	
	Если Многостраничный Тогда
		
		// Добавляем описание полей итогов многостраничного листа отчета:
		СтруктураСтраницы.Вставить("ПоляИтогов",    Новый Структура);
		
		Если ИсходныйМакет.Области.Найти("ИтоговыеПоказатели") <> Неопределено Тогда
			
			МакетИтогов = ИсходныйМакет.ПолучитьОбласть("ИтоговыеПоказатели");
			Для каждого Область Из МакетИтогов.Области Цикл
				
				// Интересуют только области - ячейки со значениями
				Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ НЕ Область.СодержитЗначение Тогда
					Продолжить;
				КонецЕсли; 
				
				СтруктураСтраницы.ПоляИтогов.Вставить(Лев(Область.Имя, 13), Область.ТипЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
		 
		
	КонецЕсли;
	
	Если Многострочный Тогда
		
		// Добавляем описание полей многострочной части листа:
		СтруктураСтраницы.Вставить("ПоляМногострочнойЧасти",    Новый Структура);
		// Добавляем бразец таблтичной части листа:
		СтруктураСтраницы.Вставить("ТаблицаМногострочнойЧасти", Новый ТаблицаЗначений);
		
		
		Если ИсходныйМакет.Области.Найти("ИтоговыеПоказатели") <> Неопределено Тогда
			
			МакетСтроки = ИсходныйМакет.ПолучитьОбласть("МногострочнаяЧасть");
			Для каждого Область Из МакетСтроки.Области Цикл
				
				// Интересуют только области - ячейки со значениями
				Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ НЕ Область.СодержитЗначение Тогда
					Продолжить;
				КонецЕсли; 
				
				СтруктураСтраницы.ПоляМногострочнойЧасти.Вставить(Лев(Область.Имя, 13), Область.ТипЗначения);
				СтруктураСтраницы.ТаблицаМногострочнойЧасти.Колонки.Добавить(Лев(Область.Имя, 13), Область.ТипЗначения);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем поля страницы
	СтруктураСтраницы.Вставить("ПоляСтраницы",   Новый Структура);
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		// Интересуют только области - ячейки со значениями
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ НЕ Область.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли; 
		
		Если Многострочный Тогда
			
			// В многострочных листах исключаем поля многострочной части
			Если СтруктураСтраницы.ПоляМногострочнойЧасти.Свойство(Лев(Область.Имя, 13)) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Многостраничный Тогда
			
			// В многостраничных листах исключаем поля итогов
			Если СтруктураСтраницы.ПоляИтогов.Свойство(Лев(Область.Имя, 13)) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		 
		 
		СтруктураСтраницы.ПоляСтраницы.Вставить(Область.Имя, Область.ТипЗначения);
		
	КонецЦикла; 
	
	СтруктураПолейЛистов.Вставить(ИмяСтраницы, СтруктураСтраницы);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокСохраненияЛист(СписокСохранения, ПараметрыЗаполнения, ИмяЛиста)

	ЛистОтчета = Неопределено;
	СоздатьПоляСтраницы(ИмяЛиста, ПараметрыЗаполнения, ЛистОтчета);
	СписокСохранения.ПоказателиОтчета.Вставить("ПолеТабличногоДокумента" + ИмяЛиста, ЛистОтчета);

КонецПроцедуры
 

// Возвращает строку, добавленную в ДанныеМногострочныхРазделов, в которой колонка "Данные" содержит структуру с полями отчета
//
&НаСервере
Функция ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, ИмяЛиста, ДанныеЗаполнения = Неопределено)

	// Убираем пометку активности с прежних листов, она будет автоматически установлена на добавленный лист
	СписокСохранения.ДанныеМногостраничныхРазделов[ИмяЛиста].ЗаполнитьЗначения(Ложь, "АктивнаяСтраница");
	
	//Добавляем лист в структуру многостраничных разделов
	СтрокаЛиста = СписокСохранения.ДанныеМногостраничныхРазделов[ИмяЛиста].Добавить();
	СтрокаЛиста.Представление = "Стр. " + СписокСохранения.ДанныеМногостраничныхРазделов[ИмяЛиста].Количество();
	СтрокаЛиста.АвтоматическоеПредставление = Истина;
	СтрокаЛиста.АктивнаяСтраница = Истина;
	СоздатьПоляСтраницы(ИмяЛиста, ПараметрыЗаполнения, СтрокаЛиста.Данные);
	
	// Если есть данные - заполняем лист
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаЛиста.Данные, ДанныеЗаполнения);
	КонецЕсли;

	Возврат СтрокаЛиста;
	
КонецФункции

// Возвращает строку, добавленную в ДанныеМногострочныхРазделов, в которой колонка "Данные" заполнена только полями, повторяющимися на каждом листе
//	(т.е. без итогов и полей многострочной части). В колонке "ДанныеДопСтрок" содержится пустая таблица значений
//
&НаСервере
Функция ДобавитьВСписокСохраненияОтчетаСтраницуМногострочногоЛиста(СписокСохранения, ПараметрыЗаполнения, ИмяЛиста)

	// Убираем пометку активности с прежних листов, она будет автоматически установлена на добавленный лист
	СписокСохранения.ДанныеМногостраничныхРазделов[ИмяЛиста].ЗаполнитьЗначения(Ложь, "АктивнаяСтраница");
	
	//Добавляем лист в структуру многостраничных разделов
	СтрокаЛиста = СписокСохранения.ДанныеМногостраничныхРазделов[ИмяЛиста].Добавить();
	СтрокаЛиста.Представление = "Стр. " + СписокСохранения.ДанныеМногостраничныхРазделов[ИмяЛиста].Количество();
	СтрокаЛиста.АвтоматическоеПредставление = Истина;
	СтрокаЛиста.АктивнаяСтраница = Истина;
	СоздатьПоляСтраницы(ИмяЛиста, ПараметрыЗаполнения, СтрокаЛиста.Данные);
	СтрокаЛиста.ДанныеДопСтрок = ПараметрыЗаполнения.СтруктураПолейЛистов[ИмяЛиста].ТаблицаМногострочнойЧасти.СкопироватьКолонки();

	Возврат СтрокаЛиста;
	
КонецФункции

// Возвращает строку таблицы, добавленную в колонку "ДанныеДопСтрок" строки листа.
//	Внимание! максимальное количество строк не проверяется!
&НаСервере
Функция НоваяСтрокаМногострочногоЛиста(СтраницаЛиста, ДанныеЗаполнения = Неопределено)

	НоваяСтрока = СтраницаЛиста.ДанныеДопСтрок.Добавить();
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	КонецЕсли;
	
	// Добавим поля и значения строки в поля страницы
	Суффикс = "_" + СтраницаЛиста.ДанныеДопСтрок.Количество();
	Для каждого Колонка Из СтраницаЛиста.ДанныеДопСтрок.Колонки Цикл
		СтраницаЛиста.Данные.Вставить(Колонка.Имя + Суффикс, НоваяСтрока[Колонка.Имя]);
	КонецЦикла;
	
	Возврат НоваяСтрока;

КонецФункции

// Добавляет поля итогов на указанную страницу многострочного листа
&НаСервере
Процедура ДобавитьНаСтраницуЛистаПоляИтогов(СтраницаЛиста, ПараметрыЗаполнения, ИмяЛиста, ДанныеЗаполнения = Неопределено)

	Если НЕ ПараметрыЗаполнения.СтруктураПолейЛистов[ИмяЛиста].Свойство("ПоляИтогов") Тогда
		Возврат;
	КонецЕсли;
	 
	ПоляИтогов = ПараметрыЗаполнения.СтруктураПолейЛистов[ИмяЛиста].ПоляИтогов;
	Для каждого КлючИЗначение Из ПоляИтогов Цикл
		СтраницаЛиста.Данные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение(Неопределено));
	КонецЦикла;

	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтраницаЛиста.Данные, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Функция ПустаяТаблицаМногостраничногоРаздела()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("АвтоматическоеПредставление", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("АктивнаяСтраница", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Данные");
	Результат.Колонки.Добавить("ДанныеДопСтрок");

	Возврат Результат;
	
КонецФункции

// Создает поля для страницы без строк
&НаСервере
Процедура СоздатьПоляСтраницы(ИмяСтраницы, ПараметрыЗаполнения, ПоляТаблицы)

	Если ПоляТаблицы = Неопределено Тогда
		ПоляТаблицы = Новый Структура;
	КонецЕсли;
	 
	СтруктураПолей = ПараметрыЗаполнения.СтруктураПолейЛистов[ИмяСтраницы].ПоляСтраницы;
	Для каждого КлючИЗначение Из СтруктураПолей Цикл
		ПоляТаблицы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение(Неопределено));
	КонецЦикла;

КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура СформироватьСтруктуруСтраницОтчета() 
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистА";
	СтрокаУровня1.Представление            = "Лист А";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистБ";
	СтрокаУровня1.Представление            = "Лист Б";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистВ";
	СтрокаУровня1.Представление            = "Лист В";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистГ";
	СтрокаУровня1.Представление            = "Лист Г";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистД1";
	СтрокаУровня1.Представление            = "Лист Д1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистД2";
	СтрокаУровня1.Представление            = "Лист Д2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЕ1";
	СтрокаУровня1.Представление            = "Лист Е1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЕ2";
	СтрокаУровня1.Представление            = "Лист Е2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЖ";
	СтрокаУровня1.Представление            = "Лист Ж";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗ";
	СтрокаУровня1.Представление            = "Лист З";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗПродолжение";
	СтрокаУровня1.Представление            = "Лист З" + Символы.ПС + "продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗПродолжение2";
	СтрокаУровня1.Представление            = "Лист З" + Символы.ПС + "продолжение 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗПродолжение3";
	СтрокаУровня1.Представление            = "Лист З" + Символы.ПС + "продолжение 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистЗПродолжение4";
	СтрокаУровня1.Представление            = "Лист З" + Символы.ПС + "продолжение 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистИ";
	СтрокаУровня1.Представление            = "Лист И";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ЛистИПродолжение";
	СтрокаУровня1.Представление            = "Лист И" + Символы.ПС + "продолжение";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры


#КонецОбласти


#Область ЗаполнениеБланковПоказателямиПомощника
 

// Заполняет бланки отчета показателями помощника заполнения
&НаСервере
Процедура ЗаполнитьОтчетДанными(СписокСохранения, ПараметрыЗаполнения)

	// Листы, которые нужно выводить в отчет, перечисляем в структуре ЗаполненныеРазделы
	ПараметрыЗаполнения.Вставить("ЗаполненныеРазделы", Новый Структура);
	
	// Обязательно и всегда выводятся следующие листы:
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("Титульный", Истина);
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("Раздел1", Истина);
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("Раздел2", Истина);
	
	//Описания типов для колонок таблиц значений
	ТипСтрока  = Новый ОписаниеТипов("Строка");
	ТипСумма   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	ТипСтавка  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0));
	
	// Все доходы собираем в единую таблицу
	СводДоходов = Новый ТаблицаЗначений;
	СводДоходов.Колонки.Добавить("СтавкаНалога",           ТипСтавка);
	СводДоходов.Колонки.Добавить("ОКТМО",                  ТипСтрока);
	СводДоходов.Колонки.Добавить("КБК",                    ТипСтрока);
	СводДоходов.Колонки.Добавить("СуммаДохода",            ТипСумма);
	СводДоходов.Колонки.Добавить("СуммаВычета",            ТипСумма);
	СводДоходов.Колонки.Добавить("НачисленоНалога",        ТипСумма);
	СводДоходов.Колонки.Добавить("НалогУдержан",           ТипСумма);
	СводДоходов.Колонки.Добавить("НалогУплачен",           ТипСумма);
	СводДоходов.Колонки.Добавить("НалогПринимаемыйКУчету", ТипСумма);
	СводДоходов.Колонки.Добавить("ОсобыйТипДохода",        ТипСтрока); // для разделения по видам доходов в пределах одной ставки
	ПараметрыЗаполнения.Вставить("СводДоходов", СводДоходов);

	// Информацию о вычетах так же собираем в единую таблицу
	СводВычетов = Новый ТаблицаЗначений;
	СводВычетов.Колонки.Добавить("ВидВычета",              ТипСтрока);
	СводВычетов.Колонки.Добавить("КодВычета",              ТипСтрока);
	СводВычетов.Колонки.Добавить("СтавкаНалога",           ТипСтавка);
	СводВычетов.Колонки.Добавить("СуммаВычетаДляРаздела2", ТипСумма);
	СводВычетов.Колонки.Добавить("СуммаВычетаДляД1",       ТипСумма);
	ПараметрыЗаполнения.Вставить("СводВычетов", СводВычетов);

	// Для расчета стандартных вычетов потребуется таблица по месяцам
	ИсточникСтандартныхВычетов = Новый ТаблицаЗначений;
	ИсточникСтандартныхВычетов.Колонки.Добавить("Месяц",              ТипСтавка);
	ИсточникСтандартныхВычетов.Колонки.Добавить("СуммаДохода",        ТипСумма);
	ПараметрыЗаполнения.Вставить("ИсточникСтандартныхВычетов", ИсточникСтандартныхВычетов);

	// Итоги листов для удобства собираем в отдельное соответствие
	ИтогиЛистов = Новый Структура();
	ИтогиЛистов.Вставить("ЛистГ_п10", 0);
	ИтогиЛистов.Вставить("ЛистГ_п11_2", 0);
	ИтогиЛистов.Вставить("ЛистБ_п2_4", Новый Структура);
	ИтогиЛистов.Вставить("ЛистД1_п2_5", 0);
	ИтогиЛистов.Вставить("ЛистД1_п2_6", 0);
	ИтогиЛистов.Вставить("ЛистД1_п2_8", 0);
	ИтогиЛистов.Вставить("ЛистД1_п2_9", 0);
	ИтогиЛистов.Вставить("ЛистД2_п4", 0);
	ИтогиЛистов.Вставить("ЛистЕ1_п4", 0);
	ИтогиЛистов.Вставить("ЛистЕ2_п3_1", 0);
	ИтогиЛистов.Вставить("ЛистЗ_п11_3", 0);
	ИтогиЛистов.Вставить("ЛистИ_п7_3", 0);
	ИтогиЛистов.Вставить("ЛистВ_п3_2", 0); //
	ИтогиЛистов.Вставить("ЛистВ_п3_4", 0); //
	ИтогиЛистов.Вставить("ЛистЖ_п8_1", 0);
	ПараметрыЗаполнения.Вставить("ИтогиЛистов", ИтогиЛистов);
	
	// Титульный лист заполняем как есть
	ОбновитьВСпискеСохраненияОтчетаТитульныйЛист(СписокСохранения, ПараметрыЗаполнения);
	
	// Обрабатываем таблицу доходов физического лица
	ЗаполнитьОтчетДокументамиФизЛица(СписокСохранения, ПараметрыЗаполнения);
	
	// Обрабатываем таблицу доходов предпринимателя
	ЗаполнитьОтчетДокументамиПредпринимателя(СписокСохранения, ПараметрыЗаполнения);
	
	// Заполняем страницу стандартных вычетов
	ЗаполнитьЛистЕ1(СписокСохранения, ПараметрыЗаполнения);
	
	// Рассчитываем итоги листа И 
	ЗаполнитьИтогиЛистаИ(СписокСохранения, ПараметрыЗаполнения);
	
	// Рассчитываем итоги листа З (обязательно после листа И)
	ЗаполнитьИтогиЛистаЗ(СписокСохранения, ПараметрыЗаполнения);
	
	// Заполняем страницы листа имущественных вычетов (после всех прочих вычетов!)
	ЗаполнитьЛистД1(СписокСохранения, ПараметрыЗаполнения);
	
	// Рассчитываем итоги
	ЗаполнитьРаздел2(СписокСохранения, ПараметрыЗаполнения);
	ЗаполнитьРаздел1(СписокСохранения, ПараметрыЗаполнения);
	
КонецПроцедуры

// При обработке таблицы доходов физического лица заполняются строки листов А и Б, 
//	а так же таблицы доходов и вычетов для заполнения других листов
&НаСервере
Процедура ЗаполнитьОтчетДокументамиФизЛица(СписокСохранения, ПараметрыЗаполнения)

	СводДоходов = ПараметрыЗаполнения.СводДоходов;
	СводВычетов = ПараметрыЗаполнения.СводВычетов;
	
	// Массив строк листа А
	СтрокиЛистаА = Новый Массив;
	
	// Для группировки валютных доходов по ставкам используем соответствие
	СтавкиВалютныхДоходов = Новый Соответствие;
	
	// Выбираем информацию из доходов физического лица
	Для каждого СтрокаДохода Из ТаблицаДокументовФизЛица Цикл
		
		СтрокаСводаДоходов = СводДоходов.Добавить();
		СтрокаСводаДоходов.СтавкаНалога     = СтрокаДохода.СтавкаНалога;
		СтрокаСводаДоходов.СуммаДохода      = СтрокаДохода.СуммаДохода;
		СтрокаСводаДоходов.СуммаВычета      = Мин(СтрокаДохода.СуммаДохода, СтрокаДохода.СуммаВычета);
		СтрокаСводаДоходов.НачисленоНалога  = СтрокаДохода.СуммаНалогаНачислено;
		СтрокаСводаДоходов.НалогУдержан     = СтрокаДохода.СуммаНалогаУдержано;
		
		Если СтрокаДохода.ТипДокумента = "2-НДФЛ" Тогда
			
			// Добавляем ссылку на строку в список листа А
			СтрокиЛистаА.Добавить(СтрокаДохода);
			
			СтрокаСводаДоходов.ОКТМО = СтрокаДохода.ШапкаДокумента.ИсточникОКАТО;
			СтрокаСводаДоходов.КБК = "18210102010011000110"; //доход от налогового агента
			
			Для каждого СтрокаСправки Из СтрокаДохода.Строки2НДФЛ Цикл
				
				Если СтрокаСправки.СуммаДохода > 0 Тогда
					// Проверим использование дохода в необлагаемых суммах
					УчестьДоходНаЛистеГ(СписокСохранения, ПараметрыЗаполнения, СтрокаСправки.КодДохода, СтрокаСправки.СуммаДохода, СтрокаСправки.КодВычета, СтрокаСправки.СуммаВычета, СтрокаСправки.Месяц);
					// Проверим наличие имущественных вычетов
					УчестьДоходНаЛистеД2(СписокСохранения, ПараметрыЗаполнения, СтрокаСправки.КодДохода, СтрокаСправки.СуммаДохода, СтрокаСправки.КодВычета, СтрокаСправки.СуммаВычета);
					// Проверим наличие доходов гражданско-правового характера
					УчестьДоходНаЛистеЖ(СписокСохранения, ПараметрыЗаполнения, СтрокаСправки.КодДохода, СтрокаСправки.СуммаДохода, СтрокаСправки.КодВычета, СтрокаСправки.СуммаВычета, 1);
					// Проверим наличие доходов гражданско-правового характера
					УчестьДоходНаЛистеЗ(СписокСохранения, ПараметрыЗаполнения, СтрокаСправки.КодДохода, СтрокаСправки.СуммаДохода, СтрокаСправки.КодВычета, СтрокаСправки.СуммаВычета);
					
					СтрокаСводаДоходов.ОсобыйТипДохода = ОсобыйТипДохода(СтрокаСправки.КодДохода);
					
					Если СтрокаДохода.ИспользоватьДляСтандартныхВычетов И СтрокаДохода.СтавкаНалога = 13 И СтрокаСводаДоходов.ОсобыйТипДохода = "" Тогда
						// Добавляем строку для расчета стандартных вычетов
						СтрокаСтандартныхВычетов = ПараметрыЗаполнения.ИсточникСтандартныхВычетов.Добавить();
						СтрокаСтандартныхВычетов.Месяц = СтрокаСправки.Месяц;
						СтрокаСтандартныхВычетов.СуммаДохода = СтрокаСправки.СуммаДохода;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаСправки.СуммаВычета = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаСводаВычета = СводВычетов.Добавить();
				СтрокаСводаВычета.СтавкаНалога           = СтрокаДохода.СтавкаНалога;
				//СтрокаСводаВычета.ВидВычета              = ВидВычетаПоКоду(СтрокаСправки.КодВычета);
				СтрокаСводаВычета.КодВычета              = СтрокаСправки.КодВычета;
				Если СтрокаСправки.КодВычета <> "320" И СтрокаСводаДоходов.ОсобыйТипДохода = "" Тогда
					// Сумма вычета по пенсионным взносам заполняется отдельно
					СтрокаСводаВычета.СуммаВычетаДляРаздела2 = СтрокаСправки.СуммаВычета;
					СтрокаСводаВычета.СуммаВычетаДляД1       = ?(СтрокаДохода.СтавкаНалога = 13, СтрокаСправки.СуммаВычета, 0);
				КонецЕсли; 
				
				// Взносы в ПФ
				Если СтрокаСправки.КодВычета = "320" Тогда
					//УчестьДоходНаЛистеГ(СписокСохранения, ПараметрыЗаполнения, "", 0, СтрокаСправки.КодВычета, СтрокаСправки.СуммаВычета);
				КонецЕсли; 
				
			КонецЦикла;
			 
			Для каждого СтрокаСправки Из СтрокаДохода.Вычеты2НДФЛ Цикл
				Если СтрокаСправки.СуммаВычета = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаСводаВычета = СводВычетов.Добавить();
				СтрокаСводаВычета.СтавкаНалога           = СтрокаДохода.СтавкаНалога;
				СтрокаСводаВычета.КодВычета              = СтрокаСправки.КодВычета;
				СтрокаСводаВычета.СуммаВычетаДляРаздела2 = СтрокаСправки.СуммаВычета;
				СтрокаСводаВычета.СуммаВычетаДляД1       = ?(СтрокаДохода.СтавкаНалога = 13, СтрокаСправки.СуммаВычета, 0);
				
				// Взносы в ПФ
				Если СтрокаСправки.КодВычета = "320" Тогда
					//УчестьДоходНаЛистеГ(СписокСохранения, ПараметрыЗаполнения, "", 0, СтрокаСправки.КодВычета, СтрокаСправки.СуммаВычета);
				КонецЕсли; 
				
			КонецЦикла;
			
		ИначеЕсли СтрокаДохода.ТипДокумента = "Прочий доход" Тогда
			
			// Добавляем ссылку на строку в список листа А
			СтрокиЛистаА.Добавить(СтрокаДохода);
			
			СтрокаСводаДоходов.ОКТМО = ?(ЗначениеЗаполнено(СтрокаДохода.ШапкаДокумента.ИсточникОКАТО), СтрокаДохода.ШапкаДокумента.ИсточникОКАТО, АдресВРФОКТМО);
			СтрокаСводаДоходов.КБК = "18210102030011000110"; //доход, с которого не был удержан налог
			
			СтрокаСводаДоходов.ОсобыйТипДохода = ОсобыйТипДохода(СтрокаДохода.ШапкаДокумента.КодДохода);
			
			// Проверим использование дохода в необлагаемых суммах
			УчестьДоходНаЛистеГ(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.ШапкаДокумента.КодВычета, СтрокаДохода.СуммаВычета);
			// Проверим наличие имущественных вычетов
			УчестьДоходНаЛистеД2(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.ШапкаДокумента.КодВычета, СтрокаДохода.СуммаВычета);
			// Проверим наличие доходов гражданско-правового характера
			УчестьДоходНаЛистеЖ(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.ШапкаДокумента.КодВычета, СтрокаДохода.СуммаВычета, 1);
			// Проверим наличие доходов по ценным бумагам
			УчестьДоходНаЛистеЗ(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.ШапкаДокумента.КодВычета, СтрокаДохода.СуммаВычета);
			
			// Добавляем строку для расчета стандартных вычетов
			Если СтрокаСводаДоходов.ОсобыйТипДохода = "" И СтрокаДохода.ИспользоватьДляСтандартныхВычетов 
					И СтрокаДохода.СтавкаНалога = 13 И СтрокаДохода.ШапкаДокумента.Свойство("Месяц") Тогда
				СтрокаСтандартныхВычетов = ПараметрыЗаполнения.ИсточникСтандартныхВычетов.Добавить();
				СтрокаСтандартныхВычетов.Месяц = Макс(СтрокаДохода.ШапкаДокумента.Месяц, 1);
				СтрокаСтандартныхВычетов.СуммаДохода = Макс(0, СтрокаДохода.СуммаДохода - СтрокаДохода.СуммаВычета);
			КонецЕсли;
					
			// Добавляем строку в свод вычетов
			Если СтрокаДохода.СуммаВычета <> 0 И СтрокаСводаДоходов.ОсобыйТипДохода = "" Тогда
				СтрокаСводаВычета = СводВычетов.Добавить();
				СтрокаСводаВычета.СтавкаНалога           = СтрокаДохода.СтавкаНалога;
				СтрокаСводаВычета.КодВычета              = СтрокаДохода.ШапкаДокумента.КодВычета;
				СтрокаСводаВычета.СуммаВычетаДляРаздела2 = СтрокаДохода.СуммаВычета;
				СтрокаСводаВычета.СуммаВычетаДляД1       = ?(СтрокаДохода.СтавкаНалога = 13, СтрокаДохода.СуммаВычета, 0);
			КонецЕсли;
			
		ИначеЕсли СтрокаДохода.ТипДокумента = "Инвест. товарищество" Тогда
			
			// Добавляем ссылку на строку в список листа А
			СтрокиЛистаА.Добавить(СтрокаДохода);
			
			СтрокаСводаДоходов.ОКТМО = СтрокаДохода.ШапкаДокумента.ИсточникОКАТО;
			СтрокаСводаДоходов.КБК = "18210102030011000110"; //доход, с которого не был удержан налог
			
			// Добавляем строку в свод вычетов
			Если СтрокаДохода.СуммаВычета <> 0 Тогда
				СтрокаСводаВычета = СводВычетов.Добавить();
				СтрокаСводаВычета.СтавкаНалога           = СтрокаДохода.СтавкаНалога;
				СтрокаСводаВычета.КодВычета              = "991";
				СтрокаСводаВычета.СуммаВычетаДляРаздела2 = Мин(СтрокаДохода.СуммаДохода, СтрокаДохода.СуммаВычета);
				СтрокаСводаВычета.СуммаВычетаДляД1       = ?(СтрокаДохода.СтавкаНалога = 13, Мин(СтрокаДохода.СуммаДохода, СтрокаДохода.СуммаВычета), 0);
			КонецЕсли;

			Для каждого СтрокаИнвестДохода Из СтрокаДохода.ДоходыТоварищества Цикл
				УчестьДоходНаЛистеИ(СписокСохранения, ПараметрыЗаполнения, СтрокаИнвестДохода, СтрокаДохода.ШапкаДокумента.СуммаВкладаВТоварищество);
			КонецЦикла;
			
		ИначеЕсли СтрокаДохода.ТипДокумента = "Доход в валюте" Тогда
			
			// Добавляем ссылку на строку в группирову валютных доходов
			Если СтавкиВалютныхДоходов.Получить(СтрокаДохода.СтавкаНалога) = Неопределено Тогда
				СтавкиВалютныхДоходов.Вставить(СтрокаДохода.СтавкаНалога, Новый Массив);
			КонецЕсли;
			СтавкиВалютныхДоходов[СтрокаДохода.СтавкаНалога].Добавить(СтрокаДохода);
			
			СтрокаСводаДоходов.ОсобыйТипДохода = ОсобыйТипДохода(СтрокаДохода.ШапкаДокумента.КодДохода);
			
			СтрокаДохода.СуммаНалогаНачислено = Окр(Макс(СтрокаДохода.СуммаДохода - СтрокаДохода.СуммаВычета, 0) * СтрокаДохода.СтавкаНалога / 100, 0);
			 
			// Добавляем строку в свод доходов
			СтрокаСводаДоходов.ОКТМО = АдресВРФОКТМО;
			СтрокаСводаДоходов.КБК = "18210102030011000110"; //доход, с которого не был удержан налог
			СтрокаСводаДоходов.НалогПринимаемыйКУчету = СтрокаДохода.ШапкаДокумента.СуммаНалогаПринимаетсяКЗачету;
			
			// Проверим использование дохода в необлагаемых суммах
			УчестьДоходНаЛистеГ(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода,  СтрокаДохода.ШапкаДокумента.КодВычета,  СтрокаДохода.СуммаВычета);
			// Проверим наличие имущественных вычетов
			УчестьДоходНаЛистеД2(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.ШапкаДокумента.КодВычета, СтрокаДохода.СуммаВычета);
			// Проверим наличие доходов гражданско-правового характера
			УчестьДоходНаЛистеЖ(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.ШапкаДокумента.КодВычета, СтрокаДохода.СуммаВычета, 2);
			// Проверим наличие доходов по ценным бумагам
			УчестьДоходНаЛистеЗ(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода.ШапкаДокумента.КодДохода, СтрокаДохода.СуммаДохода, СтрокаДохода.ШапкаДокумента.КодВычета, СтрокаДохода.СуммаВычета);
			
			// Добавляем строку для расчета стандартных вычетов
			Если СтрокаДохода.ИспользоватьДляСтандартныхВычетов И СтрокаДохода.СтавкаНалога = 13 И СтрокаДохода.ШапкаДокумента.Свойство("ДатаДохода") Тогда
				СтрокаСтандартныхВычетов = ПараметрыЗаполнения.ИсточникСтандартныхВычетов.Добавить();
				СтрокаСтандартныхВычетов.Месяц = Месяц(СтрокаДохода.ШапкаДокумента.ДатаДохода);
				СтрокаСтандартныхВычетов.СуммаДохода = СтрокаСправки.СуммаДохода;
			КонецЕсли;
			
			// Добавляем строку в свод вычетов
			Если СтрокаДохода.СуммаВычета <> 0 И СтрокаСводаДоходов.ОсобыйТипДохода = "" Тогда
				СтрокаСводаВычета = СводВычетов.Добавить();
				СтрокаСводаВычета.СтавкаНалога           = СтрокаДохода.СтавкаНалога;
				СтрокаСводаВычета.КодВычета              = СтрокаДохода.ШапкаДокумента.КодВычета;
				СтрокаСводаВычета.СуммаВычетаДляРаздела2 = СтрокаДохода.СуммаВычета;
				СтрокаСводаВычета.СуммаВычетаДляД1       = ?(СтрокаДохода.СтавкаНалога = 13, СтрокаДохода.СуммаВычета, 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выводим строки в листы А
	Если СтрокиЛистаА.Количество() Тогда
		
		МаксимумСтрокНаЛистеА = 3;
		ВыведеноСтрокНаЛистА  = 0;
		
		// Отмечаем, что данный лист будет выводиться в отчет
		ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистА", Истина);
		
		// Очищаем страницы листа и создаем пустую первую страницу
		СписокСохранения.ДанныеМногостраничныхРазделов.ЛистА.Очистить();
		ЛистА = ДобавитьВСписокСохраненияОтчетаСтраницуМногострочногоЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистА");
		
		Для каждого СтрокаДохода Из СтрокиЛистаА Цикл
			
			Если ВыведеноСтрокНаЛистА = МаксимумСтрокНаЛистеА Тогда
				ЛистА = ДобавитьВСписокСохраненияОтчетаСтраницуМногострочногоЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистА");
				ВыведеноСтрокНаЛистА = 0;
			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("П000300001010", СтрокаДохода.СтавкаНалога); // Ставка налога
			Если СтрокаДохода.ТипДокумента = "2-НДФЛ" Тогда
				ДанныеЗаполнения.Вставить("П000300001020", КодВидаДоходаПоСтрокамСправки(СтрокаДохода.Строки2НДФЛ)); // Код вида дохода
			ИначеЕсли СтрокаДохода.ТипДокумента = "Инвест. товарищество" Тогда
				ДанныеЗаполнения.Вставить("П000300001020", "03"); // Код вида дохода
			Иначе
				ДанныеЗаполнения.Вставить("П000300001020", КодВидаДохода(СтрокаДохода.ШапкаДокумента.КодДохода)); // Код вида дохода
			КонецЕсли;
			ДанныеЗаполнения.Вставить("П000300001030", СтрокаДохода.ШапкаДокумента.ИсточникИНН); // ИНН
			ДанныеЗаполнения.Вставить("П000300001040", СтрокаДохода.ШапкаДокумента.ИсточникКПП); // КПП
			ДанныеЗаполнения.Вставить("П000300001050", СтрокаДохода.ШапкаДокумента.ИсточникОКАТО); // ОКТМО
			ДанныеЗаполнения.Вставить("П000300001060", СтрокаДохода.ШапкаДокумента.ИсточникНаименование); // Наименование
			ДанныеЗаполнения.Вставить("П000300001070", СтрокаДохода.СуммаДохода); // Сумма дохода
			ДанныеЗаполнения.Вставить("П000300001080", Макс(СтрокаДохода.СуммаДохода - СтрокаДохода.СуммаВычета, 0)); // Сумма облагаемого дохода
			ДанныеЗаполнения.Вставить("П000300001090", СтрокаДохода.СуммаНалогаНачислено); // Сумма налога начисленного 
			ДанныеЗаполнения.Вставить("П000300001100", СтрокаДохода.СуммаНалогаУдержано); // Сумма налога удержанного
			
			НоваяСтрокаМногострочногоЛиста(ЛистА, ДанныеЗаполнения);
			ВыведеноСтрокНаЛистА = ВыведеноСтрокНаЛистА + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Доходы для листа Б (валютные)
	Если СтавкиВалютныхДоходов.Количество() > 0 Тогда
		
		// Отмечаем, что данный лист будет выводиться в отчет
		ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистБ", Истина);
		
		// Очищаем страницы листа и создаем пустую первую страницу
		СписокСохранения.ДанныеМногостраничныхРазделов.ЛистБ.Очистить();
		ЛистБ = ДобавитьВСписокСохраненияОтчетаСтраницуМногострочногоЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистБ");
		
		// Перебираем ставки налога (для каждой ствки отдельные листы и итоги)
		Для каждого ДоходыПоСтавке Из СтавкиВалютныхДоходов Цикл
			
			МаксимумСтрокНаЛистеБ = 3;
			ВыведеноСтрокНаЛистБ  = 0;
			
			ЛистБ.Данные.П000400001001 = ДоходыПоСтавке.Ключ; // Ставка налога
			
			НалогПринимаемыйКЗачету = 0;
			
			Для каждого СтрокаДохода Из ДоходыПоСтавке.Значение Цикл
				
				Если ВыведеноСтрокНаЛистБ = МаксимумСтрокНаЛистеБ Тогда
					ЛистБ = ДобавитьВСписокСохраненияОтчетаСтраницуМногострочногоЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистБ");
					ЛистБ.Данные.П000400001001 = ДоходыПоСтавке.Ключ; // Ставка налога
					ВыведеноСтрокНаЛистБ = 0;
				КонецЕсли;
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("П000400001010", СтрокаДохода.ШапкаДокумента.ИсточникСтрана.Код); // код страны
				ДанныеЗаполнения.Вставить("П000400001020", СтрокаДохода.ШапкаДокумента.ИсточникНаименование); // Наименование источника выплаты
				ДанныеЗаполнения.Вставить("П000400001030", СтрокаДохода.ШапкаДокумента.ВалютаДохода.Код); // код валюты
				ДанныеЗаполнения.Вставить("П000400001031", ?(ОсобыйТипДохода(СтрокаДохода.ШапкаДокумента.КодДохода) = "", "2", "1")); // код вида дохода
				ДанныеЗаполнения.Вставить("П000400001040", СтрокаДохода.ШапкаДокумента.ДатаДохода); // Дата дохода
				ДанныеЗаполнения.Вставить("П000400001050", СтрокаДохода.ШапкаДокумента.КурсНаДатуДохода);
				ДанныеЗаполнения.Вставить("П000400001060", СтрокаДохода.ШапкаДокумента.СуммаДоходаВВалюте);
				ДанныеЗаполнения.Вставить("П000400001070", СтрокаДохода.СуммаДохода);
				
				ДанныеЗаполнения.Вставить("П000400001080", СтрокаДохода.ШапкаДокумента.ДатаУплатыНалога); // Дата уплаты налога за границей
				ДанныеЗаполнения.Вставить("П000400001090", СтрокаДохода.ШапкаДокумента.КурсНаДатуУплатыНалога);
				ДанныеЗаполнения.Вставить("П000400001100", СтрокаДохода.ШапкаДокумента.СуммаНалогаУплаченоВВалюте);
				ДанныеЗаполнения.Вставить("П000400001110", СтрокаДохода.ШапкаДокумента.СуммаНалогаУплаченоЗаГраницей);
				
				ДанныеЗаполнения.Вставить("П000400001120", СтрокаДохода.СуммаНалогаНачислено);
				ДанныеЗаполнения.Вставить("П000400001130", Мин(СтрокаДохода.СуммаНалогаНачислено, СтрокаДохода.ШапкаДокумента.СуммаНалогаПринимаетсяКЗачету));
				
				НоваяСтрокаМногострочногоЛиста(ЛистБ, ДанныеЗаполнения);
				ВыведеноСтрокНаЛистБ = ВыведеноСтрокНаЛистБ + 1;
				
				НалогПринимаемыйКЗачету = НалогПринимаемыйКЗачету + СтрокаДохода.ШапкаДокумента.СуммаНалогаПринимаетсяКЗачету;
				
			КонецЦикла;
			
			// Запоминаем итог листа Б для конкретной ставки
			ПараметрыЗаполнения.ИтогиЛистов.ЛистБ_п2_4.Вставить("Ставка" + ДоходыПоСтавке.Ключ, НалогПринимаемыйКЗачету);
			
		КонецЦикла;
		
	КонецЕсли;
	 
КонецПроцедуры

// По коду дохода определяет тип дохода, который используется для выделения доходов в отдельную строку раздела 2
&НаКлиентеНаСервереБезКонтекста
Функция ОсобыйТипДохода(КодДохода)

	Если СтрНайти("4910,1000,1010,", КодДохода + ",") > 0 Тогда
		Возврат "Дивиденды";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Возвращает код вида дохода, определенный по коду дохода (для поля 020 листа А)
&НаКлиентеНаСервереБезКонтекста
Функция КодВидаДохода(КодДохода)

	Если СтрНайти("1510,1511,1550,", КодДохода + ",") > 0 Тогда
		Возврат "01"; //Доход от продажи недвижимого имущества и долей в нем, находившегося в собственности менее 3-х лет
	ИначеЕсли СтрНайти("1520,1512,", КодДохода + ",") > 0 Тогда
		Возврат "02"; //Доход от продажи иного имущества
	ИначеЕсли Лев(КодДохода, 3) = "153" ИЛИ Лев(КодДохода, 3) = "153" Тогда
		Возврат "03"; //Доход от операций с ценными бумагами
	ИначеЕсли КодДохода = "1400" Тогда
		Возврат "04"; //Доход от сдачи имущества в аренду (наем) 
	ИначеЕсли СтрНайти("2220,", КодДохода + ",") > 0  Тогда
		Возврат "05"; //Доход, полученный в порядке дарения
	ИначеЕсли (Лев(КодДохода, 3) = "200" ИЛИ Лев(КодДохода, 3) = "201") Тогда
		Возврат "07"; //Доход, полученный на основании трудового (гражданско-правового) договора, налог с которого не удержан налоговым агентом,  в том числе, частично
	ИначеЕсли СтрНайти("4910,1000,1010,", КодДохода + ",") > 0  Тогда
		Возврат "08"; //Доходы от долевого участия в деятельности организаций в виде дивидендов
	Иначе
		Возврат "09";  // Иные доходы
	КонецЕсли;
	 

КонецФункции

// Возвращает код вида дохода, определенный по строкам справки 2-НДФЛ (для поля 020 листа А) 
//	Если в справке встречается несколько разных кодов вида доходов, возвращается "08 - иные доходы"
&НаСервере
Функция КодВидаДоходаПоСтрокамСправки(Строки2НДФЛ)

	КодВидаДохода = "";
	
	Для каждого СтрокаСправки Из Строки2НДФЛ Цикл
		
		Если ПустаяСтрока(СтрокаСправки.КодДохода) ИЛИ СтрокаСправки.СуммаДохода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КодДохода = СтрокаСправки.КодДохода;
		
		Если СтрНайти("1520,", КодДохода + ",") > 0 Тогда
			
			Если КодВидаДохода = "" Тогда
				КодВидаДохода = "02"; //Доход от продажи иного имущества
			ИначеЕсли КодВидаДохода <> "02" Тогда
				КодВидаДохода = "09";
				Прервать;
			КонецЕсли;
			
		ИначеЕсли Лев(КодДохода, 3) = "153" ИЛИ Лев(КодДохода, 3) = "153" Тогда
			
			Если КодВидаДохода = "" Тогда
				КодВидаДохода = "03"; //Доход от операций с ценными бумагами
			ИначеЕсли КодВидаДохода <> "03" Тогда
				КодВидаДохода = "09";
				Прервать;
			КонецЕсли;
			
		ИначеЕсли КодДохода = "1400" Тогда
			
			Если КодВидаДохода = "" Тогда
				КодВидаДохода = "04"; //Доход от сдачи имущества в аренду (наем) 
			ИначеЕсли КодВидаДохода <> "04" Тогда
				КодВидаДохода = "09";
				Прервать;
			КонецЕсли;
			
		ИначеЕсли СтрНайти("4910,1000,1010,", КодДохода + ",") > 0 Тогда
			
			Если КодВидаДохода = "" Тогда
				КодВидаДохода = "08"; //Доходы от долевого участия в деятельности организаций в виде дивидендов
			ИначеЕсли КодВидаДохода <> "08" Тогда
				КодВидаДохода = "09";
				Прервать;
			КонецЕсли;
			
		ИначеЕсли (Лев(КодДохода, 3) = "200" ИЛИ Лев(КодДохода, 3) = "201") Тогда
			
			Если КодВидаДохода = "" Тогда
				КодВидаДохода = "06"; //Доход, полученный на основании трудового (гражданско-правового) договора, налог с которого удержан налоговым агентом
			ИначеЕсли КодВидаДохода <> "06" Тогда
				КодВидаДохода = "09";
				Прервать;
			КонецЕсли;
			
		Иначе
			
			КодВидаДохода = "09";  // Иные доходы
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат КодВидаДохода;
	
КонецФункции

// Заполняет листы В и таблицы доходов и вычетов, использующиеся для заполнения других листов
&НаСервере
Процедура ЗаполнитьОтчетДокументамиПредпринимателя(СписокСохранения, ПараметрыЗаполнения)

	Если ТаблицаДокументовПредпринимателя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	 
	// Отмечаем, что данный лист будет выводиться в отчет
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистВ", Истина);
	
	// Таблицы для сводных данных
	СводДоходов = ПараметрыЗаполнения.СводДоходов;
	СводВычетов = ПараметрыЗаполнения.СводВычетов;
	
	// Очищаем все страницы листа
	СписокСохранения.ДанныеМногостраничныхРазделов.ЛистВ.Очистить();
	
	// Для заполнения итогов:
	ДанныеИтогов = Новый Структура;
	ДанныеИтогов.Вставить("П000500001110", 0); // Всего сумма дохода
	ДанныеИтогов.Вставить("П000500001120", 0); // Всего сумма проф.вычета
	ОстатокФактПлатежей  = ?(ПредпринимательУплаченоФактическихПлатежей > 0, ПредпринимательУплаченоФактическихПлатежей, 0);
	ВсегоНачисленоНалога = Окр((ТаблицаДокументовПредпринимателя.Итог("СуммаДохода") 
				- ?(НалогоплательщикСтатус = 1, ТаблицаДокументовПредпринимателя.Итог("СуммаВычета"), 0)) * ?(НалогоплательщикСтатус = 1, 0.13, 0.30), 0);
	
	Для каждого СтрокаДохода Из ТаблицаДокументовПредпринимателя Цикл
		
		// Добавляем строку в свод доходов
		СтрокаСводаДоходов = СводДоходов.Добавить();
		СтрокаСводаДоходов.ОКТМО            = АдресВРФОКТМО;
		СтрокаСводаДоходов.КБК              = "18210102020011000110"; //налог с дохода предпринимателя
		СтрокаСводаДоходов.СтавкаНалога     = ?(НалогоплательщикСтатус = 1, 13, 30);
		СтрокаСводаДоходов.СуммаДохода      = СтрокаДохода.СуммаДохода;
		СтрокаСводаДоходов.СуммаВычета      = ?(НалогоплательщикСтатус = 1, СтрокаДохода.СуммаВычета, 0);
		СтрокаСводаДоходов.НачисленоНалога  = Окр(Макс((СтрокаДохода.СуммаДохода - СтрокаДохода.СуммаВычета), 0) * СтрокаСводаДоходов.СтавкаНалога / 100, 0);
		
		//Уплаченный налог распределяем пропорционально начисленному
		Если ОстатокФактПлатежей > 0 И ВсегоНачисленоНалога > 0 Тогда
			СтрокаСводаДоходов.НалогУплачен = Окр(СтрокаСводаДоходов.НачисленоНалога * ПредпринимательУплаченоФактическихПлатежей / ВсегоНачисленоНалога, 0);
			СтрокаСводаДоходов.НалогУплачен = Мин(СтрокаСводаДоходов.НалогУплачен, ОстатокФактПлатежей);
			ОстатокФактПлатежей = ОстатокФактПлатежей - СтрокаСводаДоходов.НалогУплачен;
		КонецЕсли; 
		
		// Добавляем строку в свод вычетов
		СтрокаСводаВычета = СводВычетов.Добавить();
		СтрокаСводаВычета.СтавкаНалога           = СтрокаСводаДоходов.СтавкаНалога;
		Если ПредпринимательВычетПодтвержденДокументами Тогда
			СтрокаСводаВычета.КодВычета              = "401"; //вычет по фактическим расходам
		Иначе
			СтрокаСводаВычета.КодВычета              = "402"; //вычет по норме 20%
		КонецЕсли;
		СтрокаСводаВычета.СуммаВычетаДляРаздела2 = СтрокаДохода.СуммаВычета;
		СтрокаСводаВычета.СуммаВычетаДляД1       = ?(СтрокаСводаВычета.СтавкаНалога = 13, СтрокаДохода.СуммаВычета, 0);
		
		// Добавляем страницу листа
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("П000500001010", СтрокаДохода.ВидДеятельностиИндекс); // Код вида деятельности
		ДанныеЗаполнения.Вставить("П000500001020", СтрокаДохода.ВидДеятельностиКод); // ОКВЭД
		ДанныеЗаполнения.Вставить("П000500001030", СтрокаДохода.СуммаДохода);
		Если ПредпринимательВычетПодтвержденДокументами Тогда
			ДанныеЗаполнения.Вставить("П000500001040", СтрокаДохода.СуммаВычета);
			ДанныеЗаполнения.Вставить("П000500001050", СтрокаДохода.СтрокиОтчетаПредпринимателя.Итог("МатериальныеРасходы"));
			ДанныеЗаполнения.Вставить("П000500001060", СтрокаДохода.СтрокиОтчетаПредпринимателя.Итог("АмортизацияОС"));
			ДанныеЗаполнения.Вставить("П000500001070", СтрокаДохода.СтрокиОтчетаПредпринимателя.Итог("НаОплатуТрудаВсего"));
			ДанныеЗаполнения.Вставить("П000500001080", СтрокаДохода.СтрокиОтчетаПредпринимателя.Итог("ПоТрудовымДоговорам"));
			ДанныеЗаполнения.Вставить("П000500001090", СтрокаДохода.СтрокиОтчетаПредпринимателя.Итог("ПрочиеРасходы"));
		Иначе
			ДанныеЗаполнения.Вставить("П000500001100", СтрокаДохода.СуммаВычета);
		КонецЕсли;
		
		ЛистВ = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистВ", ДанныеЗаполнения);
		
		ДанныеИтогов.П000500001110 = ДанныеИтогов.П000500001110 + СтрокаДохода.СуммаДохода;
		ДанныеИтогов.П000500001120 = ДанныеИтогов.П000500001120 + СтрокаДохода.СуммаВычета;
		
		// Если указано, добавляем сведения для расчета стандантных вычетов
		Если СтрокаДохода.ИспользоватьДляСтандартныхВычетов И НалогоплательщикСтатус = 1 Тогда
			Для Каждого СтрокаДокумента Из СтрокаДохода.СтрокиОтчетаПредпринимателя Цикл
				СтрокаСтандартныхВычетов = ПараметрыЗаполнения.ИсточникСтандартныхВычетов.Добавить();
				СтрокаСтандартныхВычетов.Месяц       = СтрокаДокумента.Месяц;
				СтрокаСтандартныхВычетов.СуммаДохода = СтрокаДокумента.СуммаДохода;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОстатокФактПлатежей <> 0 И СтрокаСводаДоходов <> Неопределено Тогда
		СтрокаСводаДоходов.НалогУплачен = СтрокаСводаДоходов.НалогУплачен + ОстатокФактПлатежей;
	КонецЕсли; 
	
	// На последний лист выводим итоги:
	//ДанныеИтогов.Вставить("П000500001110", ДанныеИтогов.П000500001110);
	//ДанныеИтогов.Вставить("П000500001120", ДанныеИтогов.П000500001120);
	ДанныеИтогов.Вставить("П000500001130", ПредпринимательНачисленоАвансовыхПлатежей);
	ДанныеИтогов.Вставить("П000500001140", ПредпринимательУплаченоФактическихПлатежей);
	ДанныеИтогов.Вставить("П000500001150", ПредпринимательГодОбразованияКФХ);
	ДанныеИтогов.Вставить("П000500001160", ПредпринимательНеоблагаемыйДоходКФХ);
	ДанныеИтогов.Вставить("П000500001170", ПредпринимательСкорректированнаяБаза); //???
	ДанныеИтогов.Вставить("П000500001180", ПредпринимательСкорректированныйНалог); //???
	ДобавитьНаСтраницуЛистаПоляИтогов(ЛистВ, ПараметрыЗаполнения, "ЛистВ", ДанныеИтогов);

	ПараметрыЗаполнения.ИтогиЛистов.ЛистВ_п3_2 = ДанныеИтогов.П000500001120;
	ПараметрыЗаполнения.ИтогиЛистов.ЛистВ_п3_4 = ДанныеИтогов.П000500001140;
	
КонецПроцедуры
 
// Заполняет показателями титульный лист декларации
&НаСервере
Процедура ОбновитьВСпискеСохраненияОтчетаТитульныйЛист(СписокСохранения, ПараметрыЗаполнения)

	СтруктураЛиста = Новый Структура;
	СтруктураЛиста.Вставить("АдресЗаПределамиРФ", АдресЗаПределамиРФ);
	СтруктураЛиста.Вставить("ДатаВыдачиДокумента", ДокументДатаВыдачи);
	СтруктураЛиста.Вставить("ДатаПодпси", ДатаПодписи);
	СтруктураЛиста.Вставить("ДатаРождения", НалогоплательщикДатаРождения);
	СтруктураЛиста.Вставить("ДокУдПред", "");
	СтруктураЛиста.Вставить("ИНН", НалогоплательщикИНН);
	СтруктураЛиста.Вставить("Имя", НалогоплательщикИмя);
	СтруктураЛиста.Вставить("КемВыданДокумент", ДокументКемВыдан);
	СтруктураЛиста.Вставить("КодВидаДокумента", ДокументКодВида);
	СтруктураЛиста.Вставить("КодИМНС", КодИФНС);
	СтруктураЛиста.Вставить("КодСтраны", НалогоплательщикСтрана.Код);
	СтруктураЛиста.Вставить("МестоЖительства", АдресВРФТипАдреса);
	СтруктураЛиста.Вставить("МестоРождения", НалогоплательщикМестоРождения);
	СтруктураЛиста.Вставить("НомерКорректировки", НомерКорректировки);
	СтруктураЛиста.Вставить("ОргПодсписантИмя", "");
	СтруктураЛиста.Вставить("ОргПодсписантОтчество", "");
	СтруктураЛиста.Вставить("ОргПодсписантФамилия", "");
	СтруктураЛиста.Вставить("Отчество", НалогоплательщикОтчество);
	СтруктураЛиста.Вставить("ОтчетГод", ГодОтчета);
	СтруктураЛиста.Вставить("Период", "34");
	СтруктураЛиста.Вставить("ПоМесту", НалогоплательщикКатегория);
	СтруктураЛиста.Вставить("ПрПодп", "1");
	СтруктураЛиста.Вставить("ДокУпПред", "");
	СтруктураЛиста.Вставить("Прил", "");
	СтруктураЛиста.Вставить("СерияИНомерДокумента", ДокументСерияИНомер);
	СтруктураЛиста.Вставить("СоставленНа", "");
	СтруктураЛиста.Вставить("СтатусНалогоплательщика", НалогоплательщикСтатус);
	СтруктураЛиста.Вставить("ТелОрганизации", НалогоплательщикНомерТелефона);
	СтруктураЛиста.Вставить("Фамилия", НалогоплательщикФамилия);
	
	СтруктураЛиста.Вставить("ОргПодписантФамилия", "");
	СтруктураЛиста.Вставить("ОргПодписантИмя", "");
	СтруктураЛиста.Вставить("ОргПодписантОтчество", "");
	
	
	СтруктураЛиста.Вставить("Город", АдресВРФСтруктура.Город);
	СтруктураЛиста.Вставить("Дом", АдресВРФСтруктура.Дом);
	СтруктураЛиста.Вставить("Индекс", АдресВРФСтруктура.Индекс);
	СтруктураЛиста.Вставить("Квартира", АдресВРФСтруктура.Квартира);
	СтруктураЛиста.Вставить("Корпус", АдресВРФСтруктура.Корпус);
	СтруктураЛиста.Вставить("НаселенныйПункт", АдресВРФСтруктура.НаселенныйПункт);
	СтруктураЛиста.Вставить("Район", АдресВРФСтруктура.Район);
	СтруктураЛиста.Вставить("Регион", АдресВРФСтруктура.КодРегиона);
	СтруктураЛиста.Вставить("Улица", АдресВРФСтруктура.Улица);
	
	СписокСохранения.ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураЛиста);

КонецПроцедуры

// Проверяет соответстве дохода необлагаемым суммам, которые должны быть отражены на листе Г
//  Процедура вызываетя из ЗаполнитьОтчетДокументамиФизЛица()
&НаСервере
Процедура УчестьДоходНаЛистеГ(СписокСохранения, ПараметрыЗаполнения, КодДохода, СуммаДохода, КодВычета, СуммаВычета, НомерМесяца = 0)

	ДанныеЛиста = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистГ;
	ВыводитьЛистГ = Ложь; // Необходимость выводить лист на печать определяем по наличию статьи, а не по итогам

	
	Если КодДохода = "2762" Тогда	// Мат.помощь по рождению ребенка
		
		ДанныеЛиста.П000600001010 = ДанныеЛиста.П000600001010 + СуммаДохода;
		ДанныеЛиста.П000600001020 = Мин(ДанныеЛиста.П000600001010, ДанныеЛиста.П000600001020);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2760" Тогда //Мат помощь по выходу на пенсию
		
		ДанныеЛиста.П000600001030 = ДанныеЛиста.П000600001030 + СуммаДохода;
		ДанныеЛиста.П000600001040 = Мин(ДанныеЛиста.П000600001030, ДанныеЛиста.П000600001040, 4000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2761" Тогда //Мат помощь от общественных организаций инвалидов
		
		ДанныеЛиста.П000600001050 = ДанныеЛиста.П000600001050 + СуммаДохода;
		ДанныеЛиста.П000600001060 = Мин(ДанныеЛиста.П000600001050, ДанныеЛиста.П000600001060, 4000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2720" Тогда //Подарки
		
		ДанныеЛиста.П000600001070 = ДанныеЛиста.П000600001070 + СуммаДохода;
		ДанныеЛиста.П000600001080 = Мин(ДанныеЛиста.П000600001070, ДанныеЛиста.П000600001080, 4000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2730" Тогда //Призы в соревнованиях, проводимых по решению правительства РФ
		
		ДанныеЛиста.П000600001090 = ДанныеЛиста.П000600001090 + СуммаДохода;
		ДанныеЛиста.П000600001100 = Мин(ДанныеЛиста.П000600001090, ДанныеЛиста.П000600001100, 4000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2770" Тогда //Возмещение оплаты медикаментов
		
		ДанныеЛиста.П000600001110 = ДанныеЛиста.П000600001110 + СуммаДохода;
		ДанныеЛиста.П000600001120 = Мин(ДанныеЛиста.П000600001110, 4000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2790" Тогда //Подарки ветеранам и приравненным к ним
		
		ДанныеЛиста.П000600001130 = ДанныеЛиста.П000600001130 + СуммаДохода;
		ДанныеЛиста.П000600001140 = Мин(ДанныеЛиста.П000600001130, ДанныеЛиста.П000600001140, 10000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "1211" Тогда //Взносы в ПФ выплачиваемые за работника
		
		ДанныеЛиста.П000600001150 = ДанныеЛиста.П000600001150 + СуммаДохода;
		ДанныеЛиста.П000600001160 = Мин(ДанныеЛиста.П000600001150, ДанныеЛиста.П000600001160, 12000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2791" Тогда //Оплата труда в натруальной форме от с/х производителей
		
		ДанныеЛиста.П000600001180 = ДанныеЛиста.П000600001180 + СуммаДохода;
		
		// Запоминаем количество отработанных месяцев:
		Если НЕ ПараметрыЗаполнения.Свойство("МесяцыПолученияОплатыВНатуральнойФорме") Тогда
			ПараметрыЗаполнения.Вставить("МесяцыПолученияОплатыВНатуральнойФорме", Новый Структура);
		КонецЕсли; 
		ИмяМесяца = "Месяц" + НомерМесяца;
		Если НЕ ПараметрыЗаполнения.МесяцыПолученияОплатыВНатуральнойФорме.Свойство(ИмяМесяца) Тогда
			ПараметрыЗаполнения.МесяцыПолученияОплатыВНатуральнойФорме.Вставить("ИмяМесяца", 0);
		КонецЕсли; 
		ДанныеЛиста.П000600001170 = ПараметрыЗаполнения.МесяцыПолученияОплатыВНатуральнойФорме.Количество();
		
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодДохода = "2740" Тогда //Выигрыши в рекламе товаров (ставка 35%)
		
		ДанныеЛиста.П000600001210 = ДанныеЛиста.П000600001210 + СуммаДохода;
		ДанныеЛиста.П000600001220 = Мин(ДанныеЛиста.П000600001210, 4000);
		ВыводитьЛистГ = Истина;
		
	КонецЕсли;
	
	Если КодВычета = "607" Тогда //Сумма уплаченных работодателем доп. страховых взносов в ПФ
				// (является вычетом)
		
		ДанныеЛиста.П000600001150 = ДанныеЛиста.П000600001150 + СуммаДохода;
		ДанныеЛиста.П000600001160 = Мин(ДанныеЛиста.П000600001150, ДанныеЛиста.П000600001160, 12000);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "508" Тогда //Вычет доходу 2762
		
		ДанныеЛиста.П000600001020 = ДанныеЛиста.П000600001020 + СуммаВычета;
		ДанныеЛиста.П000600001020 = Мин(ДанныеЛиста.П000600001010, ДанныеЛиста.П000600001020);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "503" Тогда //Вычет доходу 2760
		
		ДанныеЛиста.П000600001040 = Мин(ДанныеЛиста.П000600001040 + СуммаВычета, 4000);
		ДанныеЛиста.П000600001040 = Мин(ДанныеЛиста.П000600001030, ДанныеЛиста.П000600001040);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "506" Тогда //Вычет доходу 2761
		
		ДанныеЛиста.П000600001060 = Мин(ДанныеЛиста.П000600001060 + СуммаВычета, 4000);
		ДанныеЛиста.П000600001060 = Мин(ДанныеЛиста.П000600001050, ДанныеЛиста.П000600001060);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "501" Тогда //Вычет доходу 2720
		
		ДанныеЛиста.П000600001080 = Мин(ДанныеЛиста.П000600001080 + СуммаВычета, 4000);
		ДанныеЛиста.П000600001080 = Мин(ДанныеЛиста.П000600001070, ДанныеЛиста.П000600001080);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "502" Тогда //Вычет доходу 2730
		
		ДанныеЛиста.П000600001100 = Мин(ДанныеЛиста.П000600001100 + СуммаВычета, 4000);
		ДанныеЛиста.П000600001100 = Мин(ДанныеЛиста.П000600001090, ДанныеЛиста.П000600001100);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "507" Тогда //Вычет доходу 2790
		
		ДанныеЛиста.П000600001140 = Мин(ДанныеЛиста.П000600001140 + СуммаВычета, 10000);
		ДанныеЛиста.П000600001140 = Мин(ДанныеЛиста.П000600001130, ДанныеЛиста.П000600001140);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "509" Тогда //Вычет доходу 2791
		
		ДанныеЛиста.П000600001190 = ДанныеЛиста.П000600001190 + СуммаВычета;
		ДанныеЛиста.П000600001190 = Мин(ДанныеЛиста.П000600001180, ДанныеЛиста.П000600001190);
		ВыводитьЛистГ = Истина;
		
	ИначеЕсли КодВычета = "505" Тогда //Вычет доходу 2740
		
		ДанныеЛиста.П000600001220 = Мин(ДанныеЛиста.П000600001220 + СуммаВычета, 4000);
		ДанныеЛиста.П000600001220 = Мин(ДанныеЛиста.П000600001210, ДанныеЛиста.П000600001220);
		ВыводитьЛистГ = Истина;
		
	КонецЕсли; 

	// Пересчитываем итоги листа:
	ДанныеЛиста.П000600001200 = ДанныеЛиста.П000600001020 + ДанныеЛиста.П000600001040 + ДанныеЛиста.П000600001060
					+ ДанныеЛиста.П000600001080 + ДанныеЛиста.П000600001100 + ДанныеЛиста.П000600001120 + 
					+ ДанныеЛиста.П000600001140 + ДанныеЛиста.П000600001160 + ДанныеЛиста.П000600001190; 
					
	// Итоги могут быть пустыми, но выводить лист все равно нужно.
	Если ВыводитьЛистГ Тогда
		ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистГ", Истина);
	КонецЕсли; 

	ПараметрыЗаполнения.ИтогиЛистов.ЛистГ_п10   = ДанныеЛиста.П000600001200;
	ПараметрыЗаполнения.ИтогиЛистов.ЛистГ_п11_2 = ДанныеЛиста.П000600001220;
	
КонецПроцедуры

// При необходимости учитывает сумму дохода на листе Д2 - имущественные вычеты
//  Процедура вызываетя из ЗаполнитьОтчетДокументамиФизЛица()
&НаСервере
Процедура УчестьДоходНаЛистеД2(СписокСохранения, ПараметрыЗаполнения, КодДохода, СуммаДохода, КодВычета, СуммаВычета)

	ДанныеЛиста = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистД2;
	МаксВычетНедвижимости = 1000000;
	МаксВычетПрочее       = 250000;
	
	// Строка бланка, в которую записывать доход с указанным кодом определяется по коду вычета
	Если КодДохода = "1510" И КодВычета = "301" Тогда	// недвижимость, кроме долей = по норме
		
		ДанныеЛиста.П000800001010 = ДанныеЛиста.П000800001010 + СуммаДохода;
		ДанныеЛиста.П000800001020 = Мин(ДанныеЛиста.П000800001020 + СуммаВычета, ДанныеЛиста.П000800001010, МаксВычетНедвижимости);
		
	ИначеЕсли КодДохода = "1511" И КодВычета = "302"  Тогда //доли в недвижимости =по норме
		
		ДанныеЛиста.П000800001030 = ДанныеЛиста.П000800001030 + СуммаДохода;
		ДанныеЛиста.П000800001040 = Мин(ДанныеЛиста.П000800001040 + СуммаВычета, ДанныеЛиста.П000800001030, МаксВычетНедвижимости);
		
	ИначеЕсли (КодДохода = "1510" ИЛИ КодДохода = "1511") И (КодВычета = "305" Или КодВычета = "305Н")  Тогда //недвижимость, включая доли, по факту
		
		ДанныеЛиста.П000800001050 = ДанныеЛиста.П000800001050 + СуммаДохода;
		ДанныеЛиста.П000800001060 = Мин(ДанныеЛиста.П000800001050, ДанныеЛиста.П000800001060 + СуммаВычета);
		
	ИначеЕсли КодДохода = "1512" И КодВычета = "304"  Тогда //прочая недвижимость по норме прочего имущества
		
		ДанныеЛиста.П000800001070 = ДанныеЛиста.П000800001070 + СуммаДохода;
		ДанныеЛиста.П000800001080 = Мин(ДанныеЛиста.П000800001080 + СуммаВычета, ДанныеЛиста.П000800001070, МаксВычетПрочее);
		
	ИначеЕсли КодДохода = "1512" И (КодВычета = "305" Или КодВычета = "305Н")  Тогда //прочая недвижимость по фактическим расходам
		
		ДанныеЛиста.П000800001090 = ДанныеЛиста.П000800001090 + СуммаДохода;
		ДанныеЛиста.П000800001100 = Мин(ДанныеЛиста.П000800001100 + СуммаВычета, ДанныеЛиста.П000800001090);
		
	ИначеЕсли КодДохода = "1520" И КодВычета = "303"  Тогда //прочее имущество по норме
		
		ДанныеЛиста.П000800001110 = ДанныеЛиста.П000800001110 + СуммаДохода;
		ДанныеЛиста.П000800001120 = Мин(ДанныеЛиста.П000800001120 + СуммаВычета, ДанныеЛиста.П000800001110, МаксВычетПрочее);
		
	ИначеЕсли КодДохода = "1520" И КодВычета = "305"  Тогда //прочее имущество по факту
		
		ДанныеЛиста.П000800001130 = ДанныеЛиста.П000800001130 + СуммаДохода;
		ДанныеЛиста.П000800001140 = Мин(ДанныеЛиста.П000800001130, ДанныеЛиста.П000800001140 + СуммаВычета);
		
	ИначеЕсли КодДохода = "4900"  Тогда //Выкупная стоимость изъятого для гос. нужд имущества
		
		ДанныеЛиста.П000800001150 = ДанныеЛиста.П000800001150 + СуммаДохода;
		
	ИначеЕсли КодВычета = "908"  Тогда //Вычет из выкупной стоимости изъятого для гос. нужд имущества
		
		ДанныеЛиста.П000800001160 = ДанныеЛиста.П000800001160 + СуммаВычета;
		
	КонецЕсли; 

	// Проверка максимальных пределов вычетов
	
	// 1.  сумма значений показателей подпунктов 1.1.2 и 1.2.2 не может превышать предельного значения имущественного 
	//налогового вычета, установленного подпунктом 1 пункта 2 статьи 220 Налогового кодекса Российской Федерации, 
	//предоставляемого в отношении доходов, полученных от продажи жилых домов, квартир, комнат, включая приватизированные 
	//жилые помещения, дач, садовых домиков или земельных участков или доли (долей) в указанном имуществе.
	ПревышениеВычета = ДанныеЛиста.П000800001020 + ДанныеЛиста.П000800001040 - МаксВычетНедвижимости;
	Если ПревышениеВычета > 0 Тогда
		ДанныеЛиста.П000800001040 = Макс(0, ДанныеЛиста.П000800001040 - ПревышениеВычета);
		ПревышениеВычета = ДанныеЛиста.П000800001020 + ДанныеЛиста.П000800001040 - МаксВычетНедвижимости;
	КонецЕсли;
	Если ПревышениеВычета > 0 Тогда
		ДанныеЛиста.П000800001020 = Макс(0, ДанныеЛиста.П000800001020 - ПревышениеВычета);
	КонецЕсли;
	
	
	// Пересчитываем итоги листа:
	ДанныеЛиста.П000800001170 = ДанныеЛиста.П000800001020 + ДанныеЛиста.П000800001040 + ДанныеЛиста.П000800001060
					+ ДанныеЛиста.П000800001080 + ДанныеЛиста.П000800001100 + ДанныеЛиста.П000800001120
					+ ДанныеЛиста.П000800001140 + ДанныеЛиста.П000800001160; 
	
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистД2", ДанныеЛиста.П000800001170 <> 0);

	ПараметрыЗаполнения.ИтогиЛистов.ЛистД2_п4 = ДанныеЛиста.П000800001170;
	
КонецПроцедуры

// Заполняет лист стандартных вычетов
&НаСервере
Процедура ЗаполнитьЛистЕ1(СписокСохранения, ПараметрыЗаполнения)

	НужныВычетыНаРаботника = ТаблицаСтандартныхВычетов.Итог("ВычетНаРаботника") > 0
				ИЛИ ТаблицаСтандартныхВычетов.Итог("ВычетНаДетей") > 0;
	НужныДругиеСоцВычеты = ТаблицаСоциальныхСтраховыхВычетов.Количество() > 0
			ИЛИ ТаблицаСоциальныхВычетов.Итог("СуммаВычета") > 0  ИЛИ ДополнительныеВзносыПФПринимаетсяКВычету <> 0
			ИЛИ ИнвестиционныйВычетОтчетногоПериода <> 0 ИЛИ ИнвестиционныйВычетПрошлыхПериодов <> 0;
			
	// Рассчитываем только в том случае, если указано применение хотя бы какого-то вычета
	Если НЕ НужныВычетыНаРаботника И НЕ НужныДругиеСоцВычеты Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЕ1", Истина);
	ДанныеЛиста = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЕ1;
	
	// Формально количество месяцев должно заполняться независимо от заявленных прав на получение вычета
	
	// Сворачиваем таблицу доходов
	ТаблицаДоходов = ПараметрыЗаполнения.ИсточникСтандартныхВычетов;
	// Стандартные вычеты могут предоставляться даже в те месяцы, в которых не было дохода
	ТаблицаДоходов.Свернуть("Месяц", "СуммаДохода");
	ТаблицаДоходов.Сортировать("Месяц");
	ТаблицаДоходов.Колонки.Добавить("ДоходНарастающим", Новый ОписаниеТипов("Число"));
	
	// Пересчитываем доход нарастающим по месяцам
	ВсегоДоход = 0;
	МесяцевДо280000 = 0;
	СоответствиеМесяцев = Новый Соответствие;
	Для Каждого СтрокаДохода Из ТаблицаДоходов Цикл
		ВсегоДоход = ВсегоДоход + СтрокаДохода.СуммаДохода;
		СтрокаДохода.ДоходНарастающим = ВсегоДоход;
		Если ВсегоДоход < 280000 Тогда
			МесяцевДо280000 = МесяцевДо280000 + 1;
		КонецЕсли; 
		СоответствиеМесяцев.Вставить(СтрокаДохода.Месяц, СтрокаДохода);
	КонецЦикла; 
	
	// Указываем количесво месяцев
	ДанныеЛиста.П000900001030 = МесяцевДо280000;
	
	Если НужныВычетыНаРаботника Тогда
		
		// Рассчитываем суммы вычетов
		Вычет3000 = 0;
		Вычет500 = 0;
		ДетямВПолнойСемье = 0;
		ДетямОдинокогоРодителя = 0;
		ИнвалидамВПолнойСемье = 0;
		ИнвалидамОдинокогоРодителя = 0;
		
		Для Каждого СтрокаВычета Из ТаблицаСтандартныхВычетов Цикл
			
			//Вычет может быть только если был доход
			Если СоответствиеМесяцев.Получить(СтрокаВычета.НомерМесяца) = Неопределено 
					ИЛИ СоответствиеМесяцев[СтрокаВычета.НомерМесяца].СуммаДохода = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаВычета.ВычетНаРаботника = 1 Тогда
				Вычет500 = Вычет500 + 500;
			ИначеЕсли СтрокаВычета.ВычетНаРаботника = 2 Тогда
				Вычет3000 = Вычет3000 + 3000;
			КонецЕсли; 
			
			Если МесяцевДо280000 > 0 И СтрокаВычета.ВычетНаДетей > 0 
				И СоответствиеМесяцев[СтрокаВычета.НомерМесяца].ДоходНарастающим < 280000 Тогда
				
				// Расчет вычета на детей
				Если СтрокаВычета.ВычетНаДетей = 1 Тогда // полная семья
					ДетямВПолнойСемье = ДетямВПолнойСемье 
							+ СтрокаВычета.КоличествоДетейДоТретьего * 1400 
							+ СтрокаВычета.КоличествоДетейСТретьего * 3000;
					ИнвалидамВПолнойСемье = ИнвалидамВПолнойСемье + СтрокаВычета.КоличествоДетейИнвалидов * 3000;
				Иначе // единственный родитель
					ДетямОдинокогоРодителя = ДетямВПолнойСемье
							+ (СтрокаВычета.КоличествоДетейДоТретьего * 1400 
							+ СтрокаВычета.КоличествоДетейСТретьего * 3000) * 2;
					ИнвалидамОдинокогоРодителя = ИнвалидамВПолнойСемье + СтрокаВычета.КоличествоДетейИнвалидов * 3000 * 2;
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Заполняем данные раздела 1
		ДанныеЛиста.П000900001010 = Вычет3000;
		ДанныеЛиста.П000900001020 = Вычет500;
		ДанныеЛиста.П000900001040 = ДетямВПолнойСемье;
		ДанныеЛиста.П000900001050 = ИнвалидамВПолнойСемье;
		ДанныеЛиста.П000900001060 = ДетямОдинокогоРодителя;
		ДанныеЛиста.П000900001070 = ИнвалидамОдинокогоРодителя;
		
		ДанныеЛиста.П000900001080 = ДанныеЛиста.П000900001010 + ДанныеЛиста.П000900001020 + ДанныеЛиста.П000900001040
				 + ДанныеЛиста.П000900001050 + ДанныеЛиста.П000900001060 + ДанныеЛиста.П000900001070;
		
	КонецЕсли; 

	Если НужныДругиеСоцВычеты Тогда
		
		ВсегоДоход = ПолучитьСуммуДоходаПоСтавке(ПараметрыЗаполнения, 13);
		Облагаемыйоход = ВсегоДоход - СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистГ.П000600001200
				- СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистГ.П000600001220;
				
		//Заполняем взносы в ПФ (Лист Е2)
		Если ТаблицаСоциальныхСтраховыхВычетов.Количество() > 0 Или ДополнительныеВзносыПФПринимаетсяКВычету <> 0
			Или ИнвестиционныйВычетОтчетногоПериода <> 0 Или ИнвестиционныйВычетПрошлыхПериодов <> 0 Тогда
			ЗаполнитьЛистЕ2(СписокСохранения, ПараметрыЗаполнения, ДанныеЛиста.П000900001160);
		КонецЕсли; 
		
		// Заполняем разделы 2 и 3
		Для Каждого СтрокаВычета Из ТаблицаСоциальныхВычетов Цикл
			
			Если СтрокаВычета.СуммаВычета = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаВычета.КодВычета = "090" Тогда // пожертвования
				
				// Определяем 25% суммы доходов за вычетом необлагаемых сумм (Итоги Листа Г)
				ДанныеЛиста.П000900001090 = Мин(СтрокаВычета.СуммаВычета, Облагаемыйоход * 0.25);
				
			ИначеЕсли СтрокаВычета.КодВычета = "100" Тогда // Обучение детей
				
				ДанныеЛиста.П000900001100 = СтрокаВычета.СуммаВычета;
				
			ИначеЕсли СтрокаВычета.КодВычета = "110" Тогда // Дорогостоящее лечение
				
				ДанныеЛиста.П000900001110 = СтрокаВычета.СуммаВычета;
				
			ИначеЕсли СтрокаВычета.КодВычета = "130" Тогда // За обучение свое или родственников
				
				ДанныеЛиста.П000900001130 = СтрокаВычета.СуммаВычета;
				
			ИначеЕсли СтрокаВычета.КодВычета = "140" Тогда // медикаменты
				
				ДанныеЛиста.П000900001140 = СтрокаВычета.СуммаВычета;
				
			ИначеЕсли СтрокаВычета.КодВычета = "150" Тогда // Добровольное личное страхование
				
				ДанныеЛиста.П000900001150 = СтрокаВычета.СуммаВычета;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Заполняем итоги разделов 2 и 3:
		ДанныеЛиста.П000900001120 = ДанныеЛиста.П000900001090 + ДанныеЛиста.П000900001100 + ДанныеЛиста.П000900001110;
		ДанныеЛиста.П000900001170 = мин(120000, ДанныеЛиста.П000900001130 + ДанныеЛиста.П000900001140 + ДанныеЛиста.П000900001150 + ДанныеЛиста.П000900001160);
		ДанныеЛиста.П000900001180 = ДанныеЛиста.П000900001120 + ДанныеЛиста.П000900001170;
		
	КонецЕсли; 
	
	// Заполняем итоги листа Е1
	ДанныеЛиста.П000900001190 = ДанныеЛиста.П000900001080 + ДанныеЛиста.П000900001180;
	
	ПараметрыЗаполнения.ИтогиЛистов.ЛистЕ1_п4 = ДанныеЛиста.П000900001190;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛистЕ2(СписокСохранения, ПараметрыЗаполнения, СуммаИтога)

	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЕ2", Истина);
	
	СписокСохранения.ДанныеМногостраничныхРазделов.ЛистЕ2.Очистить();
	СуммаИтога = 0;
	
	ВсегоВзносы      = 0;
	ВсегоПринимается = 0;
	ВсегоУАгентов    = 0;
	СтраницаЛиста    = Неопределено;
	
	Для Каждого СтрокаВзноса Из ТаблицаСоциальныхСтраховыхВычетов Цикл
		
		СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистЕ2");
		ДанныеЛиста   = СтраницаЛиста.Данные;
		
		ДанныеЛиста.П001000001010 = СтрокаВзноса.ИНН;
		ДанныеЛиста.П001000001020 = СтрокаВзноса.КПП;
		ДанныеЛиста.П001000001021 = СтрокаВзноса.ВидДоговора;
		ДанныеЛиста.П001000001030 = СтрокаВзноса.НаименованиеОрганизации;
		ДанныеЛиста.П001000001040 = СтрокаВзноса.ДатаДоговора;
		ДанныеЛиста.П001000001050 = СтрокаВзноса.НомерДоговора;
		ДанныеЛиста.П001000001060 = СтрокаВзноса.СуммаВзноса;
		ДанныеЛиста.П001000001070 = СтрокаВзноса.ПринимаетсяКВычету;
		
		ВсегоВзносы      = ВсегоВзносы + СтрокаВзноса.СуммаВзноса;
		ВсегоПринимается = ВсегоПринимается + СтрокаВзноса.ПринимаетсяКВычету;
		ВсегоУАгентов    = ВсегоУАгентов + СтрокаВзноса.ВычетУНалоговогоАгента;
		
	КонецЦикла; 
	
	Если СтраницаЛиста = Неопределено Тогда
		СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистЕ2");
		ДанныеЛиста   = СтраницаЛиста.Данные;
	КонецЕсли;
	
	// Итоговые строки
	ДобавитьНаСтраницуЛистаПоляИтогов(СтраницаЛиста, ПараметрыЗаполнения, "ЛистЕ2");
	
	ДанныеЛиста.П001000001080 = ДополнительныеВзносыПФСуммаВзноса;
	ДанныеЛиста.П001000001090 = ДополнительныеВзносыПФПринимаетсяКВычету;
	
	ДанныеЛиста.П001000001100 = ВсегоПринимается + ДополнительныеВзносыПФПринимаетсяКВычету;
	СуммаИтога                = ДанныеЛиста.П001000001100;
	
	// Инвестиционные вычеты
	
	ДанныеЛиста.П001000001110 = ИнвестиционныйВычетОтчетногоПериода;
	ДанныеЛиста.П001000001120 = ИнвестиционныйВычетПрошлыхПериодов;

	ПараметрыЗаполнения.ИтогиЛистов.ЛистЕ2_п3_1 = ИнвестиционныйВычетОтчетногоПериода;
	
КонецПроцедуры

// Заполняет листы Ж авторскими вознаграждениями, доходами по договорам ГПХ и т.п.
&НаСервере
Процедура УчестьДоходНаЛистеЖ(СписокСохранения, ПараметрыЗаполнения, КодДохода, СуммаДохода, КодВычета, СуммаВычета, КодИсточника = 1)

	Если СтрНайти("1540,1550,2010,2201,2202,2203,2204,2205,2206,2207,2208,2209,", КодДохода + ",") = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЖ", Истина);
	
	ЛистЖ = Неопределено;
	Для Каждого СтрокаЛиста Из СписокСохранения.ДанныеМногостраничныхРазделов.ЛистЖ Цикл
		Если СтрокаЛиста.Данные.П001100001001 = Строка(КодИсточника) ИЛИ ПустаяСтрока(СтрокаЛиста.Данные.П001100001001) Тогда
			ЛистЖ = СтрокаЛиста;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 

	Если ЛистЖ = Неопределено Тогда
		ЛистЖ = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистЖ");
	КонецЕсли; 
	
	ДанныеЛиста = ЛистЖ.Данные;
	Если ПустаяСтрока(ДанныеЛиста.П001100001001) Тогда
		ДанныеЛиста.П001100001001 = Строка(КодИсточника);
	КонецЕсли;
	
	ВычетДляЗаписи = Мин(СуммаДохода, СуммаВычета);
	
	Если КодДохода = "2210" Тогда // Авторские вознаграждения
		
		ДанныеЛиста.П001100001010 = ДанныеЛиста.П001100001010 + СуммаДохода;
		ДанныеЛиста.П001100001020 = ДанныеЛиста.П001100001020 + ВычетДляЗаписи;
		
	ИначеЕсли СтрНайти("2201,2202,2203,2204,2205,2206,2207,2208,2209,", КодДохода + ",") > 0 Тогда  // Авторские вознаграждения
		
		Если КодВычета = "404" Тогда  // вычет по фактическим расходам
			
			ДанныеЛиста.П001100001030 = ДанныеЛиста.П001100001030 + СуммаДохода;
			ДанныеЛиста.П001100001040 = ДанныеЛиста.П001100001040 + ВычетДляЗаписи;
			
		ИначеЕсли КодВычета = "405" Тогда  // вычет по нормам
			
			ДанныеЛиста.П001100001050 = ДанныеЛиста.П001100001050 + СуммаДохода;
			ДанныеЛиста.П001100001060 = ДанныеЛиста.П001100001060 + СуммаВычета;
			
		КонецЕсли;
	
	ИначеЕсли СтрНайти("1540,1542,", КодДохода + ",") > 0 Тогда // Продажа доли в уставном капитале организации
		
		ДанныеЛиста.П001100001070 = ДанныеЛиста.П001100001070 + СуммаДохода;
		ДанныеЛиста.П001100001080 = ДанныеЛиста.П001100001080 + ВычетДляЗаписи;
		
	ИначеЕсли КодДохода = "1550" Тогда // Устапка прав требования в договое долевого строительства
		
		ДанныеЛиста.П001100001130 = ДанныеЛиста.П001100001130 + СуммаДохода;
		ДанныеЛиста.П001100001140 = ДанныеЛиста.П001100001140 + ВычетДляЗаписи;
		
	КонецЕсли; 
	
	// Подсчет итога
	ДанныеЛиста.П001100001150 = ДанныеЛиста.П001100001020 + ДанныеЛиста.П001100001040
				+ ДанныеЛиста.П001100001060 + ДанныеЛиста.П001100001080 + ДанныеЛиста.П001100001100
				 + ДанныеЛиста.П001100001120 + ДанныеЛиста.П001100001140;
	
	ПараметрыЗаполнения.ИтогиЛистов.ЛистЖ_п8_1 = ПараметрыЗаполнения.ИтогиЛистов.ЛистЖ_п8_1 + ДанныеЛиста.П001100001150;
	
КонецПроцедуры

&НаСервере
Процедура УчестьДоходНаЛистеЗ(СписокСохранения, ПараметрыЗаполнения, КодДохода, СуммаДохода, КодВычета, СуммаВычета)

	// В справке 2-НДФЛ по ценным бумагам могут быть строки без кодов дохода, с одними только кодами вычетов
	Если НЕ (Лев(КодДохода, 3) = "153" ИЛИ ЗначениеЗаполнено(КодВычета) И Число(КодВычета) >= 201 И Число(КодВычета) <= 217) Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЗ", Истина);
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЗПродолжение", Истина);
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЗПродолжение2", Истина);
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЗПродолжение3", Истина);
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистЗПродолжение4", Истина);
	
	ЛистЗ             = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ;
	ЛистЗПродолжение  = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение;
	ЛистЗПродолжение2 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение2;
	ЛистЗПродолжение3 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение3;
	ЛистЗПродолжение4 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение4;
	
	// Заполняем показатель по коду дохода
	Если КодДохода = "1530" Тогда // Доходы, полученные по операциям купли-продажи ценных бумаг, обращающихся на организованном рынке ценных бумаг
		
		ЛистЗ.П001200001101 = ЛистЗ.П001200001101 + СуммаДохода;
		
	ИначеЕсли КодДохода = "1531" Тогда // 
		
		ЛистЗПродолжение.П001300001205 = ЛистЗПродолжение.П001300001205 + СуммаДохода;
		
	ИначеЕсли КодДохода = "1536" Тогда // 
		
		ЛистЗПродолжение.П001300001201 = ЛистЗПродолжение.П001300001201 + СуммаДохода;
		
	ИначеЕсли КодДохода = "1532" Тогда // 
		
		ЛистЗПродолжение2.П001400001301 = ЛистЗПродолжение2.П001400001301 + СуммаДохода;
		
	ИначеЕсли КодДохода = "1533" Тогда // 
		
		ЛистЗПродолжение2.П001400001321 = ЛистЗПродолжение2.П001400001321 + СуммаДохода;
		
	ИначеЕсли КодДохода = "1535" Тогда // 
		
		ЛистЗПродолжение2.П001400001312 = ЛистЗПродолжение2.П001400001312 + СуммаДохода;
		
	ИначеЕсли КодДохода = "1537" Тогда // 
		
		ЛистЗПродолжение3.П001500001401 = ЛистЗПродолжение3.П001500001401 + СуммаДохода;
		
	ИначеЕсли КодДохода = "1538" Тогда // 
		
		ЛистЗПродолжение3.П001500001407 = ЛистЗПродолжение3.П001500001407 + СуммаДохода;
		
	КонецЕсли;

	// Заполняем показатель по коду вычета
	Если КодВычета = "201" Тогда // Доходы, полученные по операциям купли-продажи ценных бумаг, обращающихся на организованном рынке ценных бумаг
		
		ЛистЗ.П001200001102 = ЛистЗ.П001200001102 + СуммаВычета;
		
	ИначеЕсли КодВычета = "218" Тогда // 
		
		ЛистЗ.П001200001105 = ЛистЗ.П001200001105 + СуммаВычета;
		
	ИначеЕсли КодВычета = "203" Тогда // 
		
		ЛистЗПродолжение.П001300001202 = ЛистЗПродолжение.П001300001202 + СуммаВычета;
		
	ИначеЕсли КодВычета = "202" Тогда // 
		
		ЛистЗПродолжение.П001300001206 = ЛистЗПродолжение.П001300001206 + СуммаВычета;
		
	ИначеЕсли КодВычета = "219" Тогда // 
		
		ЛистЗПродолжение.П001300001209 = ЛистЗПродолжение.П001300001209 + СуммаВычета;
		
	ИначеЕсли КодВычета = "206" Тогда // 
		
		ЛистЗПродолжение2.П001400001302 = ЛистЗПродолжение2.П001400001302 + СуммаВычета;
		
	ИначеЕсли КодВычета = "207" Тогда // 
		
		ЛистЗПродолжение2.П001400001313 = ЛистЗПродолжение2.П001400001313 + СуммаВычета;
		
	ИначеЕсли КодВычета = "220" Тогда // 
		
		ЛистЗПродолжение2.П001400001322 = ЛистЗПродолжение2.П001400001322 + СуммаВычета;
		
	ИначеЕсли КодВычета = "211" Тогда // 
		
		ЛистЗПродолжение3.П001500001402 = ЛистЗПродолжение3.П001500001402 + СуммаВычета;
		// тут же обновляем итог, т.к. он используется на других страницах
		
	ИначеЕсли КодВычета = "215" Тогда // 
		
		ЛистЗПродолжение3.П001500001408 = ЛистЗПродолжение3.П001500001408 + СуммаВычета;
		
	КонецЕсли;
	
	// тут же обновляем итоги, которые используется для расчетов других показателей
	
	// Продолжение 2, раздел 4
	ЛистЗПродолжение2.П001400001303 = Макс(0, ЛистЗПродолжение2.П001400001301 - ЛистЗПродолжение2.П001400001302);
	ЛистЗПродолжение2.П001400001304 = Макс(0, ЛистЗПродолжение2.П001400001302 - ЛистЗПродолжение2.П001400001301);
	// Продолжение 2, раздел 5
	ЛистЗПродолжение2.П001400001314 = Макс(0, ЛистЗПродолжение2.П001400001312 - ЛистЗПродолжение2.П001400001313);
	ЛистЗПродолжение2.П001400001315 = Макс(0, ЛистЗПродолжение2.П001400001313 - ЛистЗПродолжение2.П001400001312);
	// Продолжение 2, раздел 6
	ЛистЗПродолжение2.П001400001323 = Макс(0, ЛистЗПродолжение2.П001400001321 - ЛистЗПродолжение2.П001400001322);
	// Продолжение 3, раздел 7
	ЛистЗПродолжение3.П001500001403 = Макс(0, ЛистЗПродолжение3.П001500001401 - ЛистЗПродолжение3.П001500001402);
	ЛистЗПродолжение3.П001500001404 = Макс(0, ЛистЗПродолжение3.П001500001402 - ЛистЗПродолжение3.П001500001401);
	// Продолжение 3, раздел 8
	ЛистЗПродолжение3.П001500001409 = Макс(0, ЛистЗПродолжение3.П001500001407 - ЛистЗПродолжение3.П001500001408);
	ЛистЗПродолжение3.П001500001410 = Макс(0, ЛистЗПродолжение3.П001500001408 - ЛистЗПродолжение3.П001500001407);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтогиЛистаЗ(СписокСохранения, ПараметрыЗаполнения)

	// При расчете Листа З всегда распределяем убыток (т.е. если при расчете раздела определился убыток, 
	//	заполняем колонку "Распределение полученного убытка", и тут же заполняем связанные показатели в
	// 	колонках "Расчет налогооблагаемого дохода"
	
	Если НЕ ПараметрыЗаполнения.ЗаполненныеРазделы.Свойство("ЛистЗ") Тогда
		// Если не было дохдов по ценным бумагам, то заполнять ничего не требуется
		Возврат;
	КонецЕсли; 

	ЛистЗ             = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗ;
	ЛистЗПродолжение  = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение;
	ЛистЗПродолжение2 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение2;
	ЛистЗПродолжение3 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение3;
	ЛистЗПродолжение4 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистЗПродолжение4;
	
	// Сначала заполняем таблицу убытков прошлых лет
	// Общие суммы убытков
	ЛистЗПродолжение4.П001600001501 = ТаблицаУбытковПоЦеннымБумагам.Итог("УбытокПоЦеннымБумагам");
	ЛистЗПродолжение4.П001600001512 = ТаблицаУбытковПоЦеннымБумагам.Итог("УбытокПоФинансовымИнстументам");
	// В том числе по годам
	Для Счетчик = 0 По 9 Цикл
		СуффиксЯчейки1 = Формат(Счетчик + 2, "ЧЦ=2; ЧДЦ=; ЧВН=");
		СуффиксЯчейки2 = Строка(Счетчик + 13);
		ЛистЗПродолжение4["П0016000015" + СуффиксЯчейки1 + "_год"] = ТаблицаУбытковПоЦеннымБумагам[Счетчик].Год;
		ЛистЗПродолжение4["П0016000015" + СуффиксЯчейки1] = ТаблицаУбытковПоЦеннымБумагам[Счетчик].УбытокПоЦеннымБумагам;
		ЛистЗПродолжение4["П0016000015" + СуффиксЯчейки2] = ТаблицаУбытковПоЦеннымБумагам[Счетчик].УбытокПоФинансовымИнстументам;
	КонецЦикла; 
	
	// В приложении 3 вычисляем убытки от РЕПО, уменьшающие суммы доходов по ценным бумагам.
	// Убыток по операциям РЕПО принимается в уменьшение доходов по операциям с ценными бумагами, обращающимися на организованном рынке ценных бумаг, 
	//	а также с ценными бумагами, не обращающимися на организованном рынке ценных бумаг, в пропорции, 
	//	рассчитанной как соотношение стоимости ценных бумаг, являющихся объектом операций РЕПО, обращающихся на организованном рынке ценных бумаг, 
	//	и стоимости ценных бумаг, являющихся объектом операций РЕПО, не обращающихся на организованном рынке ценных бумаг, 
	//	в общей стоимости ценных бумаг, являющихся объектом операций РЕПО.
	// Стоимость ценных бумаг, используемая для определения указанной пропорции, определяется исходя из фактической стоимости 
	//	ценных бумаг по второй части операций РЕПО, надлежаще исполненных в соответствующем налоговом периоде.
	
	// За неимением большего распределяем суммы пропорционально суммам дохода по обращающимся и не образающимся ЦБ
	Если ЛистЗПродолжение3.П001500001404 > 0 Тогда
		
		// Чтобы избежать копеек при определении пропорции проверяем наличие соответствующих доходов
		Если ЛистЗ.П001200001101 > 0 И ЛистЗПродолжение.П001300001205 = 0 Тогда
			ЛистЗПродолжение3.П001500001405 = ЛистЗПродолжение3.П001500001404;
		ИначеЕсли ЛистЗ.П001200001101 = 0 И ЛистЗПродолжение.П001300001205 > 0 Тогда
			ЛистЗПродолжение3.П001500001406 = ЛистЗПродолжение3.П001500001404;
		Иначе
			ВсегоДоход = ЛистЗ.П001200001101 + ЛистЗПродолжение.П001300001205;
			ЛистЗПродолжение3.П001500001405 = ЛистЗ.П001200001101 * ЛистЗПродолжение3.П001500001404 / ВсегоДоход;
			ЛистЗПродолжение3.П001500001406 = ВсегоДоход - ЛистЗПродолжение3.П001500001405;
		КонецЕсли; 
		
		// переносим результат в связанные показатели листа З
		ЛистЗ.П001200001103            = ЛистЗПродолжение3.П001500001405;
		ЛистЗПродолжение.П001300001207 = ЛистЗПродолжение3.П001500001406;
		
	КонецЕсли; 
	
	Если ЛистЗПродолжение3.П001500001410 > 0 Тогда
		
		// Чтобы избежать копеек при определении пропорции проверяем наличие соответствующих доходов
		Если ЛистЗ.П001200001101 > 0 И ЛистЗПродолжение.П001300001205 = 0 Тогда
			ЛистЗПродолжение3.П001500001411 = ЛистЗПродолжение3.П001500001410;
		ИначеЕсли ЛистЗ.П001200001101 = 0 И ЛистЗПродолжение.П001300001205 > 0 Тогда
			ЛистЗПродолжение3.П001500001412 = ЛистЗПродолжение3.П001500001410;
		Иначе
			ВсегоДоход = ЛистЗ.П001200001101 + ЛистЗПродолжение.П001300001205;
			ЛистЗПродолжение3.П001500001411 = ЛистЗ.П001200001101 * ЛистЗПродолжение3.П001500001410 / ВсегоДоход;
			ЛистЗПродолжение3.П001500001412 = ВсегоДоход - ЛистЗПродолжение3.П001500001411;
		КонецЕсли; 
		
		// переносим результат в связанные показатели листа З
		ЛистЗ.П001200001104            = ЛистЗПродолжение3.П001500001411;
		ЛистЗПродолжение.П001300001208 = ЛистЗПродолжение3.П001500001412;
		
	КонецЕсли; 
	
	// Подводим итоги 1-го раздела листа З
	ЛистЗ.П001200001106 = ЛистЗ.П001200001102 + ЛистЗ.П001200001103 + ЛистЗ.П001200001104 + ЛистЗ.П001200001105; // всего уменьшение дохода
	ЛистЗ.П001200001107 = Макс(0, ЛистЗ.П001200001101 - ЛистЗ.П001200001106);
	ЛистЗ.П001200001108 = Макс(0, ЛистЗ.П001200001106 - ЛистЗ.П001200001101);
	
	// Если получился убыток, учитываем его в других разделах листа З
	Если ЛистЗ.П001200001108 > 0 Тогда
		
		Если ЛистЗПродолжение.П001300001201 - ЛистЗПродолжение.П001300001202 > 0 Тогда
			// Значение показателя строки 203 не может быть больше, чем разность между значениями показателей строк 201 и 202.
			ЛистЗПродолжение.П001300001203 = Мин(ЛистЗ.П001200001108, ЛистЗПродолжение.П001300001201 - ЛистЗПродолжение.П001300001202);
			ЛистЗ.П001200001112 = ЛистЗПродолжение.П001300001203;
		КонецЕсли;
		
		Если ЛистЗ.П001200001108 - ЛистЗ.П001200001112 > 0 И ЛистЗПродолжение2.П001400001303 > 0 Тогда
			ЛистЗПродолжение2.П001400001306 = Мин(ЛистЗ.П001200001108 - ЛистЗ.П001200001112, ЛистЗПродолжение2.П001400001303);
			ЛистЗ.П001200001113 = ЛистЗПродолжение2.П001400001306;
		КонецЕсли;
		
		ЛистЗ.П001200001114 = ЛистЗ.П001200001108 - ЛистЗ.П001200001112 - ЛистЗ.П001200001113;
		
	КонецЕсли; 
	
	// Обновляем итоги раздела 2
	ЛистЗПродолжение.П001300001204 = Макс(0, ЛистЗПродолжение.П001300001201 - ЛистЗПродолжение.П001300001202 - ЛистЗПродолжение.П001300001203);
	
	// Обновляем итоги раздела 3
	ЛистЗПродолжение.П001300001211 = ЛистЗПродолжение.П001300001206 + ЛистЗПродолжение.П001300001207 + ЛистЗПродолжение.П001300001208
					+ ЛистЗПродолжение.П001300001209 + ЛистЗПродолжение.П001300001210;
	ЛистЗПродолжение.П001300001212 = Макс(0, ЛистЗПродолжение.П001300001205 - ЛистЗПродолжение.П001300001211);
	
	// Распределяем убыток раздела 4
	Если ЛистЗПродолжение2.П001400001304 > 0 Тогда
		
		Если ЛистЗПродолжение2.П001400001314 > 0 Тогда
			ЛистЗПродолжение2.П001400001317 = Мин(ЛистЗПродолжение2.П001400001314, ЛистЗПродолжение2.П001400001304);
			ЛистЗПродолжение2.П001400001309 = ЛистЗПродолжение2.П001400001317;
		КонецЕсли; 
		
		Если ЛистЗ.П001200001107 > 0 И ЛистЗПродолжение2.П001400001304 - ЛистЗПродолжение2.П001400001309 > 0 Тогда
			ЛистЗ.П001200001109 = Мин(ЛистЗ.П001200001107, ЛистЗПродолжение2.П001400001304 - ЛистЗПродолжение2.П001400001309);
			ЛистЗПродолжение2.П001400001310 = ЛистЗ.П001200001109;
		КонецЕсли; 
		
		ЛистЗПродолжение2.П001400001311 = Макс(0, ЛистЗПродолжение2.П001400001304 - ЛистЗПродолжение2.П001400001309 - ЛистЗПродолжение2.П001400001310);
		
	КонецЕсли; 
	
	// Распределяем убыток раздела 5
	Если ЛистЗПродолжение2.П001400001315 > 0 Тогда
		
		Если ЛистЗПродолжение2.П001400001303 > 0 Тогда
			ЛистЗПродолжение2.П001400001307 = Мин(ЛистЗПродолжение2.П001400001303, ЛистЗПродолжение2.П001400001315);
			ЛистЗПродолжение2.П001400001319 = ЛистЗПродолжение2.П001400001307;
		КонецЕсли; 
		
		ЛистЗПродолжение2.П001400001320 = Макс(0, ЛистЗПродолжение2.П001400001315 - ЛистЗПродолжение2.П001400001319);
		
	КонецЕсли; 
	
	// Заполнем итоги раздела 9
	ЛистЗПродолжение4.П001600001523 = ЛистЗ.П001200001107;
	Если ТаблицаУбытковПоЦеннымБумагам.Итог("УбытокПоЦеннымБумагам") <> 0 Тогда
		ЛистЗПродолжение4.П001600001524 = ЛистЗПродолжение2.П001400001303 + ЛистЗПродолжение2.П001400001314;
	КонецЕсли;
	
	ЛистЗПродолжение4.П001600001525 = Мин(ЛистЗПродолжение4.П001600001501, ЛистЗПродолжение4.П001600001523);
	ЛистЗ.П001200001110 = ЛистЗПродолжение4.П001600001525;
	
	Если ТаблицаУбытковПоЦеннымБумагам.Итог("УбытокПоФинансовымИнстументам") <> 0 Тогда
		ЛистЗПродолжение4.П001600001526 = Мин(ЛистЗПродолжение4.П001600001512, ЛистЗПродолжение4.П001600001524);
	КонецЕсли;
	
	Если ЛистЗПродолжение4.П001600001526 > 0 Тогда
		
		// Значение данного показателя переносится в подпункты 4.5 и 5.5 Листа З.
		// Сумма значений подпунктов 4.5 и 5.5 не должна превышать значения подпункта 9.6.
		Если ЛистЗПродолжение2.П001400001303 > 0 Тогда
			ЛистЗПродолжение2.П001400001305 = Мин(ЛистЗПродолжение4.П001600001526, ЛистЗПродолжение2.П001400001303);
		КонецЕсли; 
		Если ЛистЗПродолжение2.П001400001314 > 0 И ЛистЗПродолжение4.П001600001526 - ЛистЗПродолжение2.П001400001305 > 0 Тогда
			ЛистЗПродолжение2.П001400001305 = Мин(ЛистЗПродолжение4.П001600001526 - ЛистЗПродолжение2.П001400001305, ЛистЗПродолжение2.П001400001314);
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Перед заполнением итогов листа З обновим итоги по колонкам "Расчет налогооблагаемого дохода"
	ЛистЗ.П001200001111 = Макс(0, ЛистЗ.П001200001107 - ЛистЗ.П001200001109 - ЛистЗ.П001200001110);
	ЛистЗПродолжение2.П001400001308 = Макс(0, ЛистЗПродолжение2.П001400001303 - ЛистЗПродолжение2.П001400001305
					 - ЛистЗПродолжение2.П001400001306 - ЛистЗПродолжение2.П001400001307);
	ЛистЗПродолжение2.П001400001318 = Макс(0, ЛистЗПродолжение2.П001400001314 - ЛистЗПродолжение2.П001400001316
					 - ЛистЗПродолжение2.П001400001317);
	
	// Расчет окончательных итогов
	ЛистЗПродолжение4.П001600001527 = Макс(0, ЛистЗПродолжение4.П001600001501 - ЛистЗПродолжение4.П001600001525);
	ЛистЗПродолжение4.П001600001528 = Макс(0, ЛистЗПродолжение4.П001600001512 - ЛистЗПродолжение4.П001600001526);
	
	ЛистЗПродолжение4.П001600001529 = ЛистЗ.П001200001114 + ЛистЗПродолжение4.П001600001527;
	ЛистЗПродолжение4.П001600001530 = ЛистЗПродолжение2.П001400001311 + ЛистЗПродолжение2.П001400001320 + ЛистЗПродолжение4.П001600001528;
	
	ЛистЗПродолжение4.П001600001531 = ЛистЗ.П001200001101 + ЛистЗПродолжение.П001300001201 + ЛистЗПродолжение2.П001400001301
				+ ЛистЗПродолжение2.П001400001312 + ЛистЗПродолжение2.П001400001321 + ЛистЗПродолжение3.П001500001401 + ЛистЗПродолжение3.П001500001407;
				
				
	ЛистЗПродолжение4.П001600001532 = ЛистЗ.П001200001111 + ЛистЗПродолжение.П001300001204 + ЛистЗПродолжение.П001300001212
				+ ЛистЗПродолжение2.П001400001308 + ЛистЗПродолжение2.П001400001318 + ЛистЗПродолжение2.П001400001323 
				+ ЛистЗПродолжение3.П001500001403 + ЛистЗПродолжение3.П001500001409;
				
	ЛистЗПродолжение4.П001600001533 = Макс(0, ЛистЗПродолжение4.П001600001531 - ЛистЗПродолжение4.П001600001532);
	ПараметрыЗаполнения.ИтогиЛистов.ЛистЗ_п11_3 = ЛистЗПродолжение4.П001600001533;
	
КонецПроцедуры
 
// Добавляет суммы доходов и вычетов к показателям листа И и И-продолжение
&НаСервере
Процедура УчестьДоходНаЛистеИ(СписокСохранения, ПараметрыЗаполнения, СтрокаДохода, СуммаВкладаВТоварищество)

	ДанныеЛистаИ1 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ;
	ДанныеЛистаИ2 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистИПродолжение;
	
	Если СтрокаДохода.КодДохода = "9911" Тогда	// ЦБ, обращающиеся на орг.рынке
		
		ДанныеЛистаИ1.П001700001010 = ДанныеЛистаИ1.П001700001010 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаИ1.П001700001020 = ДанныеЛистаИ1.П001700001020 + СтрокаДохода.ДоляВРасходах;
		ДанныеЛистаИ1.П001700001030 = ДанныеЛистаИ1.П001700001030 + СтрокаДохода.ВознаграждениеУправляющим;
		ДанныеЛистаИ1.П001700001040 = ДанныеЛистаИ1.П001700001040 + СтрокаДохода.УбытокПрошлыхЛет;
		
	ИначеЕсли СтрокаДохода.КодДохода = "9912" Тогда // ЦБ, НЕ обращающиеся на орг.рынке
		
		ДанныеЛистаИ1.П001700001070 = ДанныеЛистаИ1.П001700001070 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаИ1.П001700001080 = ДанныеЛистаИ1.П001700001080 + СтрокаДохода.ДоляВРасходах;
		ДанныеЛистаИ1.П001700001090 = ДанныеЛистаИ1.П001700001090 + СтрокаДохода.ВознаграждениеУправляющим;
		ДанныеЛистаИ1.П001700001100 = ДанныеЛистаИ1.П001700001100 + СтрокаДохода.УбытокПрошлыхЛет;
		
	ИначеЕсли СтрокаДохода.КодДохода = "9913" Тогда // Инструменты срочных сделок, НЕ обращающиеся на орг.рынке
		
		ДанныеЛистаИ1.П001700001130 = ДанныеЛистаИ1.П001700001130 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаИ1.П001700001140 = ДанныеЛистаИ1.П001700001140 + СтрокаДохода.ДоляВРасходах;
		ДанныеЛистаИ1.П001700001150 = ДанныеЛистаИ1.П001700001150 + СтрокаДохода.ВознаграждениеУправляющим;
		ДанныеЛистаИ1.П001700001160 = ДанныеЛистаИ1.П001700001160 + СтрокаДохода.УбытокПрошлыхЛет;
		
	ИначеЕсли СтрокаДохода.КодДохода = "9914" Тогда // Операции в уставном каитале предприятий
		
		ДанныеЛистаИ2.П001800001190 = ДанныеЛистаИ2.П001800001190 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаИ2.П001800001200 = ДанныеЛистаИ2.П001800001200 + СтрокаДохода.ДоляВРасходах;
		ДанныеЛистаИ2.П001800001210 = ДанныеЛистаИ2.П001800001210 + СтрокаДохода.ВознаграждениеУправляющим;
		ДанныеЛистаИ2.П001800001220 = ДанныеЛистаИ2.П001800001220 + СтрокаДохода.УбытокПрошлыхЛет;
		
	ИначеЕсли СтрокаДохода.КодДохода = "9915" Тогда // Прочие операции
		
		ДанныеЛистаИ2.П001800001250 = ДанныеЛистаИ2.П001800001250 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаИ2.П001800001260 = ДанныеЛистаИ2.П001800001260 + СтрокаДохода.ДоляВРасходах;
		ДанныеЛистаИ2.П001800001270 = ДанныеЛистаИ2.П001800001270 + СтрокаДохода.ВознаграждениеУправляющим;
		ДанныеЛистаИ2.П001800001280 = ДанныеЛистаИ2.П001800001280 + СтрокаДохода.УбытокПрошлыхЛет;
		
	ИначеЕсли СтрокаДохода.КодДохода = "9916" Тогда // Выход из товарищества
		
		ДанныеЛистаИ2.П001800001310 = ДанныеЛистаИ2.П001800001310 + СтрокаДохода.СуммаДохода;
		ДанныеЛистаИ2.П001800001320 = ДанныеЛистаИ2.П001800001320 + СуммаВкладаВТоварищество;
		
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьИтогиЛистаИ(СписокСохранения, ПараметрыЗаполнения)

	ДанныеЛистаИ1 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ;
	ДанныеЛистаИ2 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛистИПродолжение;
	
	// КодДохода = "9911": ЦБ, обращающиеся на орг.рынке
	ДоходОтОперации = ДанныеЛистаИ1.П001700001010 - ДанныеЛистаИ1.П001700001020 - ДанныеЛистаИ1.П001700001030;
	Если ДоходОтОперации < 0 Тогда
		
		ДанныеЛистаИ1.П001700001040 = 0;
		ДанныеЛистаИ1.П001700001050 = 0;
		ДанныеЛистаИ1.П001700001060 = -ДоходОтОперации;
		
	Иначе
		
		// Сумма убытка прошлых лет не должна превыщать сумму дохода по операции:
		ДанныеЛистаИ1.П001700001040 = Мин(ДанныеЛистаИ1.П001700001040, ДоходОтОперации);
		ДанныеЛистаИ1.П001700001050 = ДоходОтОперации - ДанныеЛистаИ1.П001700001040;
		ДанныеЛистаИ1.П001700001060 = 0;
		
	КонецЕсли;
	
	// КодДохода = "9912": ЦБ, НЕ обращающиеся на орг.рынке
	ДоходОтОперации = ДанныеЛистаИ1.П001700001070 - ДанныеЛистаИ1.П001700001080 - ДанныеЛистаИ1.П001700001090;
	Если ДоходОтОперации < 0 Тогда
		
		ДанныеЛистаИ1.П001700001100 = 0;
		ДанныеЛистаИ1.П001700001110 = 0;
		ДанныеЛистаИ1.П001700001120 = -ДоходОтОперации;
		
	Иначе
		
		// Сумма убытка прошлых лет не должна превыщать сумму дохода по операции:
		ДанныеЛистаИ1.П001700001100 = Мин(ДанныеЛистаИ1.П001700001100, ДоходОтОперации);
		ДанныеЛистаИ1.П001700001110 = ДоходОтОперации - ДанныеЛистаИ1.П001700001100;
		ДанныеЛистаИ1.П001700001120 = 0;
		
	КонецЕсли;

	// СтрокаДохода.КодДохода = "9913": Инструменты срочных сделок, НЕ обращающиеся на орг.рынке
	ДоходОтОперации = ДанныеЛистаИ1.П001700001130 - ДанныеЛистаИ1.П001700001140 - ДанныеЛистаИ1.П001700001150;
	Если ДоходОтОперации < 0 Тогда
		
		ДанныеЛистаИ1.П001700001160 = 0;
		ДанныеЛистаИ1.П001700001170 = 0;
		ДанныеЛистаИ1.П001700001180 = -ДоходОтОперации;
		
	Иначе
		
		// Сумма убытка прошлых лет не должна превыщать сумму дохода по операции:
		ДанныеЛистаИ1.П001700001160 = Мин(ДанныеЛистаИ1.П001700001160, ДоходОтОперации);
		ДанныеЛистаИ1.П001700001170 = ДоходОтОперации - ДанныеЛистаИ1.П001700001160;
		ДанныеЛистаИ1.П001700001180 = 0;
		
	КонецЕсли;

	// СтрокаДохода.КодДохода = "9914": Операции в уставном каитале предприятий
	ДоходОтОперации = ДанныеЛистаИ2.П001800001190 - ДанныеЛистаИ2.П001800001200 - ДанныеЛистаИ2.П001800001210;
	Если ДоходОтОперации < 0 Тогда
		
		ДанныеЛистаИ2.П001800001220 = 0;
		ДанныеЛистаИ2.П001800001230 = 0;
		ДанныеЛистаИ2.П001800001240 = -ДоходОтОперации;
		
	Иначе
		
		// Сумма убытка прошлых лет не должна превыщать сумму дохода по операции:
		ДанныеЛистаИ2.П001800001220 = Мин(ДанныеЛистаИ2.П001800001220, ДоходОтОперации);
		ДанныеЛистаИ2.П001800001230 = ДоходОтОперации - ДанныеЛистаИ2.П001800001220;
		ДанныеЛистаИ2.П001800001240 = 0;
		
	КонецЕсли;

	// СтрокаДохода.КодДохода = "9915": Прочие операции
	ДоходОтОперации = ДанныеЛистаИ2.П001800001250 - ДанныеЛистаИ2.П001800001260 - ДанныеЛистаИ2.П001800001270;
	Если ДоходОтОперации < 0 Тогда
		
		ДанныеЛистаИ2.П001800001280 = 0;
		ДанныеЛистаИ2.П001800001290 = 0;
		ДанныеЛистаИ2.П001800001300 = -ДоходОтОперации;
		
	Иначе
		
		// Сумма убытка прошлых лет не должна превыщать сумму дохода по операции:
		ДанныеЛистаИ2.П001800001280 = Мин(ДанныеЛистаИ2.П001800001280, ДоходОтОперации);
		ДанныеЛистаИ2.П001800001290 = ДоходОтОперации - ДанныеЛистаИ2.П001800001280;
		ДанныеЛистаИ2.П001800001300 = 0;
		
	КонецЕсли;

	// СтрокаДохода.КодДохода = "9916": Прочие операции
	ДоходОтОперации = ?(ДанныеЛистаИ2.П001800001310 = 0, 0, ДанныеЛистаИ2.П001800001310 - ДанныеЛистаИ2.П001800001320);
	Если ДоходОтОперации < 0 Тогда
		ДанныеЛистаИ2.П001800001330 = 0;
		ДанныеЛистаИ2.П001800001340 = -ДоходОтОперации;
	Иначе
		ДанныеЛистаИ2.П001800001330 = ДоходОтОперации;
		ДанныеЛистаИ2.П001800001340 = 0;
	КонецЕсли;

	// Итог листа И
	// Всего доход
	ДанныеЛистаИ2.П001800001350 = ДанныеЛистаИ1.П001700001010 + ДанныеЛистаИ1.П001700001070 
				+ ДанныеЛистаИ1.П001700001130 + ДанныеЛистаИ2.П001800001190 
				+ ДанныеЛистаИ2.П001800001250 + ДанныеЛистаИ2.П001800001310;
				
	// Наологооблагаемая база
	ДанныеЛистаИ2.П001800001360 = ДанныеЛистаИ1.П001700001050 + ДанныеЛистаИ1.П001700001110 
				+ ДанныеЛистаИ1.П001700001170 + ДанныеЛистаИ2.П001800001230 
				+ ДанныеЛистаИ2.П001800001290 + ДанныеЛистаИ2.П001800001330;
				
	// Результат:
	ДанныеЛистаИ2.П001800001370 = Макс(0, ДанныеЛистаИ2.П001800001350 - ДанныеЛистаИ2.П001800001360);
	
	ПараметрыЗаполнения.ИтогиЛистов.ЛистИ_п7_3 = ДанныеЛистаИ2.П001800001370;
	
	Если ДанныеЛистаИ2.П001800001350 <> 0 ИЛИ ДанныеЛистаИ2.П001800001360 <> 0 Тогда
		ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистИ", Истина);
		ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистИПродолжение", Истина);
	КонецЕсли;
	 
				
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьЛистД1(СписокСохранения, ПараметрыЗаполнения)

	Если ТаблицаИмущественныхВычетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыЗаполнения.ЗаполненныеРазделы.Вставить("ЛистД1", Истина);
	
	// очищаем все страницы раздела
	СписокСохранения.ДанныеМногостраничныхРазделов.ЛистД1.Очистить();
	
	ОстатокПределаСтоимости = 2000000;
	ОстатокПределаПроцентов = 3000000;
	ВсегоСтоимость = 0;
	ВсегоПроценты  = 0;
	
	Для Каждого СтрокаВычета Из ТаблицаИмущественныхВычетов Цикл
		
		// Добавляем страницу Листа Д1
		СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "ЛистД1");
		
		// Определяем год актуальных правил
		Если СтрокаВычета.ЖильеСпособПриобретения = 1 Тогда
			СравниваемыйГод = Год(СтрокаВычета.ЖильеДатаПраваСобственности);
		Иначе
			СравниваемыйГод = Год(СтрокаВычета.ЖильеДатаАктаПередачи);
		КонецЕсли; 
		СравниваемыйГод = ?(СравниваемыйГод = 0, СтрокаВычета.ЖильеГодНачалаВычета, СравниваемыйГод);
		
		// Заполняем показатели
		ДанныеЛиста = СтраницаЛиста.Данные;
		
		ДанныеЛиста.П000700001010 = СтрокаВычета.ЖильеНаименование; // Код наименования объекта
		ДанныеЛиста.П000700001020 = СтрокаВычета.ЖильеВидСобственности;
		ДанныеЛиста.П000700001030 = Формат(СтрокаВычета.ЖильеПризнакНалогоплательщика, "ЧЦ=2; ЧДЦ=; ЧВН=");
		ДанныеЛиста.П000700001040 =  Формат(СтрокаВычета.ВычетПенсионера, "ЧЦ=1; ЧН=0; ЧДЦ=; ЧВН="); // Вычет заявлен в порядке, предусмотренном пунктом 10 статьи 220 Налогового кодекса
		Если ТипЗнч(СтрокаВычета.ЖильеАдресСтруктура) = Тип("Структура") Тогда
			ДанныеЛиста.П000700001050_Индекс          = СтрокаВычета.ЖильеАдресСтруктура.Индекс;    
			ДанныеЛиста.П000700001050_Город           = СтрокаВычета.ЖильеАдресСтруктура.Город;
			ДанныеЛиста.П000700001050_Дом             = СтрокаВычета.ЖильеАдресСтруктура.Дом;
			ДанныеЛиста.П000700001050_Индекс          = СтрокаВычета.ЖильеАдресСтруктура.Индекс;
			ДанныеЛиста.П000700001050_Квартира        = СтрокаВычета.ЖильеАдресСтруктура.Квартира;
			ДанныеЛиста.П000700001050_Корпус          = СтрокаВычета.ЖильеАдресСтруктура.Корпус;
			ДанныеЛиста.П000700001050_НаселенныйПункт = СтрокаВычета.ЖильеАдресСтруктура.НаселенныйПункт;
			ДанныеЛиста.П000700001050_Район           = СтрокаВычета.ЖильеАдресСтруктура.Район;
			ДанныеЛиста.П000700001050_Регион          = СтрокаВычета.ЖильеАдресСтруктура.КодРегиона;
			ДанныеЛиста.П000700001050_Улица           = СтрокаВычета.ЖильеАдресСтруктура.Улица;
		КонецЕсли; 
		ДанныеЛиста.П000700001060 = СтрокаВычета.ЖильеДатаАктаПередачи;
		ДанныеЛиста.П000700001070 = СтрокаВычета.ЖильеДатаПраваСобственности;
		ДанныеЛиста.П000700001080 = СтрокаВычета.ЖильеДатаПраваНаЗемлю;
		ДанныеЛиста.П000700001090 = СтрокаВычета.ЖильеДатаЗаявленияОРаспределении;
		Если Год(СтрокаВычета.ЖильеДатаАктаПередачи) >=2014 Или Год(СтрокаВычета.ЖильеДатаПраваСобственности) >=2014 Тогда
			СтрокаВычета.ЖильеДоляЧислитель   = 0;
			СтрокаВычета.ЖильеДоляЗнаменатель = 0;
		Иначе
			СтрокаВычета.ЖильеДоляЧислитель   = ?(СтрокаВычета.ЖильеДоляЧислитель = 0, 1, СтрокаВычета.ЖильеДоляЧислитель);
			СтрокаВычета.ЖильеДоляЗнаменатель = ?(СтрокаВычета.ЖильеДоляЗнаменатель = 0, 1, СтрокаВычета.ЖильеДоляЗнаменатель);;
		КонецЕсли;
		ДанныеЛиста.П000700001100_1 = СтрокаВычета.ЖильеДоляЧислитель;
		ДанныеЛиста.П000700001100_3 = СтрокаВычета.ЖильеДоляЗнаменатель;
		ДанныеЛиста.П000700001110 = СтрокаВычета.ЖильеГодНачалаВычета;
		
		// Сумма стоимости на всех листах не может превышать 2 000 000 руб.
		Если СравниваемыйГод < 2014 Тогда
			ДоляСобственности = ?(ЗначениеЗаполнено(СтрокаВычета.ЖильеДоляЧислитель) И ЗначениеЗаполнено(СтрокаВычета.ЖильеДоляЗнаменатель), СтрокаВычета.ЖильеДоляЧислитель / СтрокаВычета.ЖильеДоляЗнаменатель, 1);
		Иначе
			ДоляСобственности = 1;
		КонецЕсли; 
		ДанныеЛиста.П000700001120 = Мин(СтрокаВычета.ЖильеСтоимость, ОстатокПределаСтоимости * ДоляСобственности);
		ОстатокПределаСтоимости = Макс(0, ОстатокПределаСтоимости - ДанныеЛиста.П000700001120);
		ВсегоСтоимость = ВсегоСтоимость + ДанныеЛиста.П000700001120;
		
		Если СтрокаВычета.ЖильеГодНачалаВычета < 2014 Тогда
			// По вычетам, начавшимся до 2014 года, предел не устанавливается
			ДанныеЛиста.П000700001130 = СтрокаВычета.ЖильеСуммаПроцентов;
		Иначе
			// Для вычетов, начиная с 2014 года установлен предел в 3 000 000 руб.
			ДанныеЛиста.П000700001130 = Мин(СтрокаВычета.ЖильеСуммаПроцентов, ОстатокПределаПроцентов);
			ОстатокПределаПроцентов = Макс(0, ОстатокПределаПроцентов - ДанныеЛиста.П000700001130);
		КонецЕсли; 
		ВсегоПроценты = ВсегоПроценты + ДанныеЛиста.П000700001130;
		
	КонецЦикла; 

	// На последнюю страницу добавляем поля итогов
	ДобавитьНаСтраницуЛистаПоляИтогов(СтраницаЛиста, ПараметрыЗаполнения, "ЛистД1");
	
	// Принято к учету в прошлые годы
	ДанныеЛиста.П000700001140 = ТаблицаИмущественныхВычетовИтоги[0].СуммаНаПриобретение; // сумма приобретения
	ДанныеЛиста.П000700001150 = ТаблицаИмущественныхВычетовИтоги[0].СуммаПроцентов;	// сумма процентов
	
	// Остаток вычета, перешедший с прошлого года
	ДанныеЛиста.П000700001160 = ТаблицаИмущественныхВычетовИтоги[1].СуммаНаПриобретение; // сумма приобретения
	ДанныеЛиста.П000700001170 = ТаблицаИмущественныхВычетовИтоги[1].СуммаПроцентов;	// сумма процентов
	
	// Сумма, предоставленная налоговым агентом в отчетом периоде
	ДанныеЛиста.П000700001180 = ТаблицаИмущественныхВычетовИтоги[2].СуммаНаПриобретение; // сумма приобретения
	ДанныеЛиста.П000700001190 = ТаблицаИмущественныхВычетовИтоги[2].СуммаПроцентов;	// сумма процентов
	
	// Вычисляем размер налоговой базы
	СуммаДохода = ПолучитьСуммуДоходаПоСтавке(ПараметрыЗаполнения, 13);
	ВычетДоИмущества = ПараметрыЗаполнения.ИтогиЛистов.ЛистГ_п10 // п. 10 Листа Г
				+ ПараметрыЗаполнения.ИтогиЛистов.ЛистЕ1_п4
				+ ПараметрыЗаполнения.ИтогиЛистов.ЛистЕ2_п3_1
				+ ПараметрыЗаполнения.ИтогиЛистов.ЛистЗ_п11_3
				+ ПараметрыЗаполнения.ИтогиЛистов.ЛистИ_п7_3
				+ ПараметрыЗаполнения.ИтогиЛистов.ЛистВ_п3_2
				+ ПараметрыЗаполнения.ИтогиЛистов.ЛистД2_п4
				+ ПараметрыЗаполнения.ИтогиЛистов.ЛистЖ_п8_1;
	// Вычитаем из суммы дохода все предписанные порядком заполнения вычеты
	ДанныеЛиста.П000700001200 = Макс(0, СуммаДохода - ВычетДоИмущества - ДанныеЛиста.П000700001180 - ДанныеЛиста.П000700001190);
	
	// Заполняем суммы вычетов текущего периода
	ОстатокДохода = Число(ДанныеЛиста.П000700001200);
	//ОстатокСтоимости = ?(ДанныеЛиста.П000700001140 > 0, ДанныеЛиста.П000700001160, ВсегоСтоимость) - ДанныеЛиста.П000700001180;
	ОстатокСтоимости = Макс(0, ВсегоСтоимость - ДанныеЛиста.П000700001140 - ДанныеЛиста.П000700001180); // вычитаем из стоимости учтенное в прошлые годы и предоставленное налоговым агентом в отчетном году 
	Если ОстатокДохода > 0 И ОстатокСтоимости > 0 Тогда
		ДанныеЛиста.П000700001210 = Мин(ОстатокСтоимости, ОстатокДохода);
		ОстатокДохода = ОстатокДохода - ДанныеЛиста.П000700001210;
	КонецЕсли; 
	
	//ОстатокПроцентов = ?(ДанныеЛиста.П000700001150 > 0, ДанныеЛиста.П000700001170, ВсегоПроценты) - ДанныеЛиста.П000700001190;
	ОстатокПроцентов = Макс(0, ВсегоПроценты - ДанныеЛиста.П000700001150 - ДанныеЛиста.П000700001190); // вычитаем из всех процентов вычет, предоставленный ранне и в отчетом периоде
	Если ОстатокДохода > 0 И ОстатокПроцентов > 0 Тогда
		ДанныеЛиста.П000700001220 = Мин(ОстатокПроцентов, ОстатокДохода);
	КонецЕсли;
	
	ДанныеЛиста.П000700001230 = Макс(0, ОстатокСтоимости - ДанныеЛиста.П000700001210);
	ДанныеЛиста.П000700001240 = Макс(0, ОстатокПроцентов - ДанныеЛиста.П000700001220);
	
	ПараметрыЗаполнения.ИтогиЛистов.ЛистД1_п2_5 = ДанныеЛиста.П000700001180;
	ПараметрыЗаполнения.ИтогиЛистов.ЛистД1_п2_6 = ДанныеЛиста.П000700001190;
	ПараметрыЗаполнения.ИтогиЛистов.ЛистД1_п2_8 = ДанныеЛиста.П000700001210;
	ПараметрыЗаполнения.ИтогиЛистов.ЛистД1_п2_9 = ДанныеЛиста.П000700001220;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаздел2(СписокСохранения, ПараметрыЗаполнения)

	// Удаляем все листы раздела 2
	СписокСохранения.ДанныеМногостраничныхРазделов.Раздел2.Очистить();
	
	// Сворачиваем таблицу доходов:
	СводДоходов = ПараметрыЗаполнения.СводДоходов;
	СводДоходов.Свернуть("СтавкаНалога,ОКТМО,КБК,ОсобыйТипДохода", "СуммаДохода,СуммаВычета,НалогУдержан,НалогУплачен,НалогПринимаемыйКУчету");
	СводДоходов.Колонки.Добавить("РезультатРасчетов", Новый ОписаниеТипов("Число"));
	
	СписокСтавок = Новый Массив;
	СписокСтавок.Добавить(13);
	Если НалогоплательщикСтатус = 1 Тогда
		СписокСтавок.Добавить(35);
		СписокСтавок.Добавить(9);
	Иначе
		СписокСтавок.Добавить(30);
	КонецЕсли; 

	ИтогиЛистов = ПараметрыЗаполнения.ИтогиЛистов;
	
	Для Каждого СтавкаНалога Из СписокСтавок Цикл
		
		СтрокиДохода = СводДоходов.НайтиСтроки(Новый Структура("СтавкаНалога", СтавкаНалога));
		Если СтрокиДохода.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Добавляем страницу раздела 2
		СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "Раздел2");
		ДанныеЛиста = СтраницаЛиста.Данные;
		
		ДанныеЛиста.П000200001001 = СтавкаНалога;
		
		Для Каждого СтрокаДохода Из СтрокиДохода Цикл
			
			Если СтрокаДохода.ОсобыйТипДохода = "" Тогда
				ДанныеЛиста.П000200001010 = ДанныеЛиста.П000200001010 + СтрокаДохода.СуммаДохода; //1. Общая сумма дохода
			Иначе
				//5.1. дивиденды или прибыль от контролируемых организаций
				// заполняются суммой из строк ЛистА.080 и ЛистБ.070
				ДоходПоДивидендам = Макс(0, СтрокаДохода.СуммаДохода - СтрокаДохода.СуммаВычета);
				ДанныеЛиста.П000200001051 = ДанныеЛиста.П000200001051 + ДоходПоДивидендам; 
			КонецЕсли;
			
			ДанныеЛиста.П000200001080 = ДанныеЛиста.П000200001080 + СтрокаДохода.НалогУдержан; // 8. Общая сумма налога, удержанная у источника выплаты
			
		КонецЦикла; 
		
		Если СтавкаНалога = 13 И НалогоплательщикСтатус = 1 Тогда
			
			ДанныеЛиста.П000200001020 = ИтогиЛистов.ЛистГ_п10; // 2. Общая сумма доходов, не подлежащая налогообложению (Лист Г)
			
			// Сумма налоговых вычетов
			//(пп. 3.2 Листа В + пп. 2.5 Листа Д1 + пп. 2.6 Листа Д1 
			//+ пп. 2.8 Листа Д1 + пп. 2.9 Листа Д1 + п. 4 Листа Д2
			//+ п. 4 Листа Е1 + п. 3.1 Листа Е2 + пп. 8.1. Листа Ж )
			ДанныеЛиста.П000200001040 = ИтогиЛистов.ЛистВ_п3_2 + ИтогиЛистов.ЛистД1_п2_5 + ИтогиЛистов.ЛистД1_п2_6
										 + ИтогиЛистов.ЛистД1_п2_8 + ИтогиЛистов.ЛистД1_п2_9 + ИтогиЛистов.ЛистД2_п4
										 + ИтогиЛистов.ЛистЕ1_п4 + ИтогиЛистов.ЛистЕ2_п3_1 + ИтогиЛистов.ЛистЖ_п8_1;
										 
			ДанныеЛиста.П000200001050 = ИтогиЛистов.ЛистЗ_п11_3 + ИтогиЛистов.ЛистИ_п7_3; // 5. Сумма расходов, принимаемая в уменьшение полученных доходов (по ЦБ)
			
		ИначеЕсли СтавкаНалога = 35 Тогда
			
			ДанныеЛиста.П000200001020 = ИтогиЛистов.ЛистГ_п11_2; // 2. Общая сумма доходов, не подлежащая налогообложению (Лист Г)
			
		КонецЕсли; 
		
		ДанныеЛиста.П000200001030 = Макс(0, ДанныеЛиста.П000200001010 - ДанныеЛиста.П000200001020); // 3. Общая сумма дохода, подлежащая налогообложению 
		
		//  Сумма налоговых вычетов (строка 040) и сумма расходов, принимаемая в уменьшение полученных доходов (строка 050), 
		//	в совокупности не может превышать значение показателя строки 030
		Превышение = ДанныеЛиста.П000200001050 + ДанныеЛиста.П000200001040 - ДанныеЛиста.П000200001030;
		Если Превышение > 0 Тогда
			ДанныеЛиста.П000200001050 = Макс(0, ДанныеЛиста.П000200001050 - Превышение);
			Превышение = ДанныеЛиста.П000200001050 + ДанныеЛиста.П000200001040 - ДанныеЛиста.П000200001030;
		КонецЕсли;
		Если Превышение > 0 Тогда
			ДанныеЛиста.П000200001040 = Макс(0, ДанныеЛиста.П000200001040 - Превышение);
		КонецЕсли;
		
		ДанныеЛиста.П000200001060 = Макс(0, ДанныеЛиста.П000200001030 + ДанныеЛиста.П000200001051 - ДанныеЛиста.П000200001040 - ДанныеЛиста.П000200001050); // 6. Налоговая база для исчисления налога
		
		// 2. Расчет суммы налога
		ДанныеЛиста.П000200001070 = Окр(ДанныеЛиста.П000200001060 * СтавкаНалога / 100, 0); // 7. Общая сумма налога, исчисленная к уплате
		
		// 10. Сумма налога, уплаченная налогоплательщиком, подлежащая зачёту (авансовые платежи предпринимателя)
		ДанныеЛиста.П000200001100 = ИтогиЛистов.ЛистВ_п3_4; 
		
		// 11. фискированные авансовые платежи инсторанных рабочих
		ДанныеЛиста.П000200001110 = ?(СтавкаНалога = 13, ДоходыФЛФиксированныеПлатежиИностранца, 0); 
		
		// 12. Сумма налога в иностранных государствах, подлежащая зачету в РФ
		Если ИтогиЛистов.ЛистБ_п2_4.Свойство("Ставка" + СтавкаНалога) Тогда
			ДанныеЛиста.П000200001120 = ИтогиЛистов.ЛистБ_п2_4["Ставка" + СтавкаНалога];
		КонецЕсли; 
		
		// 13. Сумма к уплате (доплате) в бюджет
		ДанныеЛиста.П000200001121 = Макс(0, ДанныеЛиста.П000200001070 - ДанныеЛиста.П000200001080 - ДанныеЛиста.П000200001090
					- ДанныеЛиста.П000200001100 - ДанныеЛиста.П000200001110 - ДанныеЛиста.П000200001120);
					
		// 13.1. налог в виде патентов
		Если СтавкаНалога = 13 И НалогоплательщикСтатус = 1 Или СтавкаНалога = 30 И НалогоплательщикСтатус = 2 Тогда
			ДанныеЛиста.П000200001122 = ПредпринимательСуммаПатента; 
		Иначе
			ДанныеЛиста.П000200001122 = 0; 
		КонецЕсли;
		 
		// 13.2. торговый сбор
		Если СтавкаНалога = 13 И НалогоплательщикСтатус = 1 Или СтавкаНалога = 30 И НалогоплательщикСтатус = 2 Тогда
			ДанныеЛиста.П000200001123 = ПредпринимательТорговыйСбор; 
		Иначе
			ДанныеЛиста.П000200001123 = 0; 
		КонецЕсли;
		
		//13.3 Сумма к уплате
		ДанныеЛиста.П000200001130 = Макс(0, ДанныеЛиста.П000200001121 - ДанныеЛиста.П000200001122 - ДанныеЛиста.П000200001123);
		
		// 13.4. сумма к возврату
		ДанныеЛиста.П000200001140 = Макс(0, ДанныеЛиста.П000200001080 + ДанныеЛиста.П000200001090
					+ ДанныеЛиста.П000200001100 + ДанныеЛиста.П000200001110 - ДанныеЛиста.П000200001070);
					
		ОстатокКДоплате      = Число(ДанныеЛиста.П000200001130);
		ОстатокКВозмещению   = Число(ДанныеЛиста.П000200001140);
		// Проблема: в справке 2-НДФЛ может быть указан вычет, не подтвержденный данными на других листах.
		ЕстьВычетыПоСтавке   = ДанныеЛиста.П000200001010 > ДанныеЛиста.П000200001060;
		ПоследняяСтрока = Неопределено;
		
		// Для сворачивания итога по КБК и ОКТМО распределяем результат расчетов по строкам доходов, рассматриваемой ставки
		// Заполняем колонку "РезультатРасчетов": если к доплате, то больше нуля, если к возмещению - меньше
		Для Каждого СтрокаДохода Из СтрокиДохода Цикл
			
			Если ОстатокКДоплате > 0 Тогда
				
				// Сумма налга к доплате не должна превышать сумму налога, недоплаченного по данному доходу
				ОстатокНалогаПоСтроке = Макс(0, 
									Окр((СтрокаДохода.СуммаДохода - ?(ЕстьВычетыПоСтавке, СтрокаДохода.СуммаВычета, 0)) * СтавкаНалога / 100, 0) 
									- СтрокаДохода.НалогУдержан - СтрокаДохода.НалогУплачен - СтрокаДохода.НалогПринимаемыйКУчету);
				СтрокаДохода.РезультатРасчетов = Мин(ОстатокНалогаПоСтроке, ОстатокКДоплате);
				ОстатокКДоплате = ОстатокКДоплате - СтрокаДохода.РезультатРасчетов;
				СтрокаДохода.ОКТМО = АдресВРФОКТМО; // доплаты налога всегда по ОКТМО налогоплательщика
				
			ИначеЕсли ОстатокКВозмещению > 0 Тогда
				
				// К возмещению не более чем уплачено и удержано
				// Записываем со знаком минус для свертки итогов по КБК и ОКТМО
				СтрокаДохода.РезультатРасчетов = - Мин(ОстатокКВозмещению, СтрокаДохода.НалогУдержан + СтрокаДохода.НалогУплачен + СтрокаДохода.НалогПринимаемыйКУчету);
				ОстатокКВозмещению = ОстатокКВозмещению + СтрокаДохода.РезультатРасчетов;
				Если ПустаяСтрока(СтрокаДохода.ОКТМО) Тогда
					СтрокаДохода.ОКТМО = АдресВРФОКТМО;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если СтрокаДохода.РезультатРасчетов <> 0 ИЛИ ПоследняяСтрока = Неопределено Тогда
				ПоследняяСтрока = СтрокаДохода;
			КонецЕсли; 
			
		КонецЦикла; 
		
		// Убеждаемся, что распределен весь результат расчетов
		Если  ОстатокКДоплате > 0 И ПоследняяСтрока <> Неопределено Тогда
			ПоследняяСтрока.РезультатРасчетов = ПоследняяСтрока.РезультатРасчетов + ОстатокКДоплате;
		ИначеЕсли  ОстатокКВозмещению > 0 И ПоследняяСтрока <> Неопределено Тогда
			СтрокаДохода.РезультатРасчетов = СтрокаДохода.РезультатРасчетов - ОстатокКВозмещению;
		КонецЕсли; 
			
	КонецЦикла; 
	
	// Проверим, чтобы в разделе была хотя бы одна страница
	Если СписокСохранения.ДанныеМногостраничныхРазделов.Раздел2.Количество() = 0 Тогда
		ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "Раздел2");
	КонецЕсли; 
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьРаздел1(СписокСохранения, ПараметрыЗаполнения)

	// Удаляем все листы раздела 1
	СписокСохранения.ДанныеМногостраничныхРазделов.Раздел1.Очистить();
	
	// Сворачиваем таблицу доходов:
	СводДоходов = ПараметрыЗаполнения.СводДоходов;
	СводДоходов.Свернуть("ОКТМО,КБК", "РезультатРасчетов");
	
	// "РезультатРасчетов": если к доплате, то больше нуля, если к возмещению - меньше
	Для Каждого СтрокаСвода Из СводДоходов Цикл
		
		// Пропускаем нулевые результаты
		Если СтрокаСвода.РезультатРасчетов = 0 И СводДоходов.Количество() > 1 Тогда
			Продолжить;
		КонецЕсли; 
		
		// Добавляем страницу раздела 1
		СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "Раздел1");
		ДанныеЛиста = СтраницаЛиста.Данные;
		
		ДанныеЛиста.П000100001020 = СтрокаСвода.КБК;
		ДанныеЛиста.П000100001030 = СтрокаСвода.ОКТМО;
		
		Если СтрокаСвода.РезультатРасчетов > 0 Тогда
			ДанныеЛиста.П000100001010 = 1;
			ДанныеЛиста.П000100001040 = СтрокаСвода.РезультатРасчетов;
		ИначеЕсли СтрокаСвода.РезультатРасчетов < 0 Тогда
			ДанныеЛиста.П000100001010 = 2;
			ДанныеЛиста.П000100001050 = - СтрокаСвода.РезультатРасчетов;
		Иначе
			ДанныеЛиста.П000100001010 = 3;
		КонецЕсли; 
		
	КонецЦикла; 

	// Проверим, чтобы в разделе была хотя бы одна страница
	Если СписокСохранения.ДанныеМногостраничныхРазделов.Раздел1.Количество() = 0 Тогда
		СтраницаЛиста = ДобавитьВСписокСохраненияОтчетаСтраницуЛиста(СписокСохранения, ПараметрыЗаполнения, "Раздел1");
		ДанныеЛиста = СтраницаЛиста.Данные;
		ДанныеЛиста.П000100001020 = "18210102010011000110";
		ДанныеЛиста.П000100001030 = АдресВРФОКТМО;
		ДанныеЛиста.П000100001010 = 3;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммуДоходаПоСтавке(ПараметрыЗаполнения, СтавкаНалога)

	СводДоходов = ПараметрыЗаполнения.СводДоходов;
	СтрокиПоСтавке = СводДоходов.НайтиСтроки(Новый Структура("СтавкаНалога", СтавкаНалога));
	Результат = 0;
	
	Для Каждого СтрокаПоСтавке Из СтрокиПоСтавке Цикл
		Результат = Результат + СтрокаПоСтавке.СуммаДохода;
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область ПечатьИВыгрузка
 
&НаКлиенте
Процедура ПоказатьБланкКлиент(ТипБланка)

	ТекстВопроса = НСтр("ru='Перед показом бланков необходимо сохранить сделанные изменения.
		|Продолжить с записью изменений?'");
	Оповещение = Новый ОписаниеОповещения("ПоказатьБланкКлиентЗавершение", ЭтотОбъект, Новый Структура("ТипБланка", ТипБланка));
	
	// Перед выводом отчета данные должны быть сохранены
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Помощник заполнения 3-НДФЛ");
		
	Иначе
		
		ВывестиБланкДекларации(ТипБланка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкКлиентЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаКлиенте(Истина);
		
		Если НЕ Модифицированность Тогда
			ВывестиБланкДекларации(ДополнительныеПараметры.ТипБланка);
		КонецЕсли;
		
	КонецЕсли;
	 

КонецПроцедуры

&НаКлиенте
Процедура ВывестиБланкДекларации(ТипБланка, БезПоказа = Ложь)

	ПараметрыФормы = ПараметрыФормыРеглОтчета();
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	ФормаОтчета = ПолучитьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2016кв1", ПараметрыФормы.мВыбраннаяФорма), ПараметрыФормы);
	
	Если ТипБланка = "PDF" Тогда
		
		// PDF можно заполнить только данными, не содержащими ошибки
		ВыполнитьПроверку();
		Если СписокСообщений.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПечати = Новый Структура("Имя", "ПоказатьСДвухмернымШтрихкодомPDF417");
		
		Если БезПоказа Тогда
			ФормаОтчета.ПечататьСразуСДвухмернымШтрихкодомPDF417(ПараметрыПечати);
		Иначе
			ФормаОтчета.ПоказатьСДвухмернымШтрихкодомPDF417(ПараметрыПечати);
		КонецЕсли;
		
	Иначе
		ФормаОтчета.Печать("ПоказатьБланк", Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлКлиентЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаКлиенте(Истина);
		
		Если НЕ Модифицированность Тогда
			ВыгрузитьВФайл();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл()

	// Выгрузка в файл допускается только после успешной проверки данных
	ВыполнитьПроверку();
	Если СписокСообщений.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыРеглОтчета();
	ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
	ФормаОтчета = ПолучитьФорму(СтрЗаменить(ЭтаФорма.ИмяФормы, "ПомощникЗаполнения2016кв1", ПараметрыФормы.мВыбраннаяФорма), ПараметрыФормы);
	ФормаОтчета.ВыгрузитьОтчет();

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезПомощникаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаписатьНаКлиенте(Истина, Истина);
		
		Если НЕ Модифицированность Тогда
			
			ПараметрыФормы = ПараметрыФормыРеглОтчета();
			ПараметрыФормы.Вставить("БезОткрытияФормы", Ложь);
			ОткрытьФорму("Отчет.РегламентированныйОтчет3НДФЛ.Форма.ФормаОтчета2016кв1", ПараметрыФормы);
			
			Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
 

&НаКлиенте
Функция ПараметрыФормыРеглОтчета()

	ПараметрыДляФормыОтчета = Новый Структура;
	ПараметрыДляФормыОтчета.Вставить("мДатаНачалаПериодаОтчета", Дата(ГодОтчета, 1, 1));
	ПараметрыДляФормыОтчета.Вставить("мСкопированаФорма",        Неопределено);
	ПараметрыДляФормыОтчета.Вставить("мСохраненныйДок",          СсылкаНаДокументОтчета);
	ПараметрыДляФормыОтчета.Вставить("мДатаКонцаПериодаОтчета",  КонецГода(ПараметрыДляФормыОтчета.мДатаНачалаПериодаОтчета));
	ПараметрыДляФормыОтчета.Вставить("мПериодичность",           ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	ПараметрыДляФормыОтчета.Вставить("Организация",              Неопределено);
	ПараметрыДляФормыОтчета.Вставить("мВыбраннаяФорма",          "ФормаОтчета2016кв1");
	ПараметрыДляФормыОтчета.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
	ПараметрыДляФормыОтчета.Вставить("НеОтображатьПредупреждение", Ложь);
	ПараметрыДляФормыОтчета.Вставить("БезОткрытияФормы",         Истина);
	
	Возврат ПараметрыДляФормыОтчета;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзОтчета(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеИзОтчетаЗавершение", ЭтотОбъект);
	ОтборОтчетов = Новый Структура("ИсточникОтчета", "РегламентированныйОтчет3НДФЛ");
	ОткрытьФорму("Документ.РегламентированныйОтчет.ФормаВыбора", Новый Структура("Отбор", ОтборОтчетов),,,,,
		ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьДанныеИзОтчетаЗавершение(СсылкаНаОтчет, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветЗагрузкиДанныхОтчета", ЭтотОбъект, 
		Новый Структура("СсылкаНаОтчет", СсылкаНаОтчет));
	ТекстВопроса = "Программа загрузит из указанного отчета данные о налогоплательщике и объекте недвижимости, если такой есть.
		|При этом все имеющиеся записи о вычетах из текущего отчета будут удалены.
		|Загрузить данные о налогоплательщике и объекте недвижимости из выбранного отчета?";
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Помощник заполнения 3-НДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветЗагрузкиДанныхОтчета(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СсылкаНаОтчет = ДопПараметры.СсылкаНаОтчет;
		
		ТекстСообщений = "";
		РезультатЗагрузки = ВыполнитьЗагрузкуДанныхИзДругогоОтчета(СсылкаНаОтчет, ТекстСообщений);
		
		Если НЕ РезультатЗагрузки Тогда
			Сообщить(ТекстСообщений);
		КонецЕсли; 
		
		СменитьРазделКлиент("Раздел1");
		Элементы.ГруппаСтраницыРаздела1.ТекущаяСтраница = Элементы.СтраницаРаздел1ЛичныеДанные;
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Функция ВыполнитьЗагрузкуДанныхИзДругогоОтчета(СсылкаНаОтчет, ТекстСообщений)

	ДанныеОтчета = СсылкаНаОтчет.ДанныеОтчета.Получить();
	Если НЕ ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
		ТекстСообщений = НСтр("ru = 'Не удалось получить данные для загрузки.'");
		Возврат Ложь;
	КонецЕсли; 
	
	ВерсияОтчета = Неопределено;
	ДанныеОтчета.Свойство("ВерсияФормы", ВерсияОтчета);
	Если НЕ ЗначениеЗаполнено(ВерсияОтчета) Тогда
		ВерсияОтчета = НомерВерсииФормыОтчета();
	КонецЕсли; 
	
	// Очищаем все текущие значения с одновременным заполнением значениями по умолчанию
	ОчиститьДанныеФормы(ЭтотОбъект);
	Модифицированность = Истина;
	
	Попытка
	
		
		ЕстьПомощник = ДанныеОтчета.Свойство("ДанныеПомощника");
		Если ВерсияОтчета = "01/01/2014" Тогда
			Если ЕстьПомощник Тогда
				ЗагрузитьДанныеПомощника01012014(ДанныеОтчета.ДанныеПомощника);
			Иначе
				// Помощник не использовался. Загружаем данные непосредственно из отчета:
				ЗагрузитьДанныеОтчета01012014(ДанныеОтчета);
			КонецЕсли; 
		ИначеЕсли ВерсияОтчета = "01/01/2015" Или  ВерсияОтчета = "10/11/2015" Или  ВерсияОтчета = "10/01/2015" Или ВерсияОтчета = "01/01/2016" Тогда
			Если ЕстьПомощник Тогда
				ЗагрузитьДанныеПомощника01012015(ДанныеОтчета);
			Иначе
				// Помощник не использовался. Загружаем данные непосредственно из отчета:
				ЗагрузитьДанныеОтчета01012015(ДанныеОтчета);
			КонецЕсли; 
		Иначе
			ТекстСообщений = НСтр("ru = 'Загрузка данных из отчетов старше 2014 года не поддерживается'");
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	
	Исключение
		
		ТекстСообщений = "Не удалось прочитать данные выбранного отчета! Возможно, версия этого отчета не поддерживается текущей версией программы.";
		Возврат Ложь;
		
	КонецПопытки; 
	

КонецФункции

// Оставляем!
&НаСервере
Процедура ЗагрузитьДанныеПомощника01012014(ДанныеПомощника)

	ВерсияПомощника = Неопределено;
	ДанныеПомощника.Свойство("ВерсияСтруктурыДанныхПомощника", ВерсияПомощника);
	
	Если ВерсияПомощника = НомерВерсииДанныхПомощника() Тогда
		
		// Реквизиты, имена которых не изменились:
		СтрокаИменСвойств = "НомерКорректировки,АдресВРФПредставление,
				|АдресВРФТипАдреса,АдресЗаПределамиРФ,
				|ВидДекларации,КодИФНС,НаименованиеИФНС,
				|НалогоплательщикИмя,НалогоплательщикИНН,НалогоплательщикОтчество,НалогоплательщикФамилия,
				|НалогоплательщикДатаРождения,НалогоплательщикМестоРождения";
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПомощника, СтрокаИменСвойств);
		
		// Прочие реквизиты шапки:
		АдресВРФОКТМО                 = ДанныеПомощника.АдресВРФОКАТО;
		НалогоплательщикКатегория     = ДанныеПомощника.КатегорияНалогоплательщика;
		НалогоплательщикСтатус        = ДанныеПомощника.СтатусНалогоплательщика;
		НалогоплательщикСтрана        = Справочники.СтраныМира.НайтиПоКоду(ДанныеПомощника.КодСтраныГражданства);
		НалогоплательщикНомерТелефона = ДанныеПомощника.НомерТелефона;
		ДокументДатаВыдачи            = ДанныеПомощника.ДатаВыдачиДокумента;
		ДокументКемВыдан              = ДанныеПомощника.КемВыданДокумент;
		ДокументКодВида               = ДанныеПомощника.КодВидаДокумента;
		ДокументНаименованиеВида      = ДанныеПомощника.НаименованиеВидаДокумента;
		ДокументСерияИНомер           = ДанныеПомощника.СерияИНомерДокумента;
		АдресВРФСтруктура             = КопияКоллекции(ДанныеПомощника.АдресВРФСтруктура);
		
		ДоходыФЛФиксированныеПлатежиИностранца = ДанныеПомощника.СуммаФиксированныхАвансовыхПлатежей;
		
		// Заполняем информацию по стандартным и имущественному вычетам
		Для Каждого ДокументВычета Из ДанныеПомощника.ТаблицаДокументовВычета Цикл
			
			Если ДокументВычета.ВидДокумента = "Стандартные вычеты" Тогда
				
				// Все строки стандартных вычетов заполняем данными последней строки вычета прошлых лет
				Если ДокументВычета.СтандартныеВычеты.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли; 
				
				ПоследняяСтрокаВычета = ДокументВычета.СтандартныеВычеты[ДокументВычета.СтандартныеВычеты.Количество() - 1];
				
				Для Каждого СтрокаВычета Из ТаблицаСтандартныхВычетов Цикл
					Если ПоследняяСтрокаВычета.НаРаботника = 500 Тогда
						СтрокаВычета.ВычетНаРаботника = 1;
					ИначеЕсли ПоследняяСтрокаВычета.НаРаботника = 3000 Тогда
						СтрокаВычета.ВычетНаРаботника = 2;
					Иначе
						СтрокаВычета.ВычетНаРаботника = 0;
					КонецЕсли; 
					
					//Считаем количество детей
					СтрокаВычета.КоличествоДетейИнвалидов  = ПоследняяСтрокаВычета.ЧислоДетейИнвалидов;
					СтрокаВычета.КоличествоДетейСТретьего  = ПоследняяСтрокаВычета.ЧислоДетейСТретьего;
					СтрокаВычета.КоличествоДетейДоТретьего = ?(ПоследняяСтрокаВычета.ВычетНаПервогоРебенка <> 0, 1, 0) 
								+ ?(ПоследняяСтрокаВычета.ВычетНаВторогоРебенка <> 0, 1, 0);
					Если СтрокаВычета.КоличествоДетейИнвалидов + СтрокаВычета.КоличествоДетейСТретьего + СтрокаВычета.КоличествоДетейДоТретьего > 0 Тогда
						СтрокаВычета.ВычетНаДетей = ПоследняяСтрокаВычета.ЕдинственныйРодитель;
					Иначе
						СтрокаВычета.ВычетНаДетей = 0;
					КонецЕсли; 
				КонецЦикла; 
				
			ИначеЕсли ДокументВычета.ВидДокумента = "Имущественный вычет" Тогда
				
				// Добавляем строку объекта имущества и заполняем значениями по умолчанию
				ТаблицаИмущественныхВычетов.Очистить();
				СтрокаИмущества = ТаблицаИмущественныхВычетов.Добавить();
				СтрокаИмущества.ИДЭлемента = Строка(Новый УникальныйИдентификатор);
				СтрокаИмущества.ЖильеНаименование = 2; //жилой дом(1), квартира(2), комната(3), доля (доли) в жилом доме, квартире, комнате, земельном участке(4), земельный участок, предоставленный для индивидуального жилищного строительства(5), земельный участок, на котором расположен жилой дом(6), жилой дом с земельным участком(7)
				СтрокаИмущества.ЖильеВидСобственности = 1; //Собственность(1), Собственность общая долевая(2), Собственность общая совместная(3)
				СтрокаИмущества.ЖильеПризнакНалогоплательщика = 1; // Собственник(1), супруг(а) собственника(2)
				СтрокаИмущества.ЖильеСпособПриобретения = 1; //Покупка(1), Инвестирование(2)
				СтрокаИмущества.ЖильеАдресСтруктура     = ПолучитьСтруктуруАдресаВРФ(СтрокаИмущества.ЖильеАдресСтруктура);
				СтрокаИмущества.ЖильеАдресПредставление = СтрокаИмущества.ЖильеАдресСтруктура.Представление;
				
				
				СтрокаИменСвойствЖилья = "ЖильеНаименование,ЖильеВидСобственности,
					|ЖильеПризнакНалогоплательщика,ЖильеДоляЧислитель,ЖильеДоляЗнаменатель,ЖильеДатаЗаявленияОРаспределении,
					|ЖильеДатаПраваСобственности,ЖильеДатаПраваНаЗемлю,ЖильеДатаАктаПередачи,ЖильеСтоимость,ЖильеСуммаПроцентов,ЖильеСтоимостьПоНорме,
					|ЖильеГодНачалаВычета,ЖильеСпособПриобретения,ЖильеАдресПредставление";
				ЗаполнитьЗначенияСвойств(СтрокаИмущества, ДокументВычета, СтрокаИменСвойствЖилья);
				СтрокаИмущества.ЖильеАдресСтруктура = КопияКоллекции(ДокументВычета.ЖильеАдресСтруктура);
				
				СтрокаИмущества.ЖильеСтоимостьПоНорме = Мин(СтрокаИмущества.ЖильеСтоимость, 
							2000000 * ?(СтрокаИмущества.ЖильеДоляЧислитель = 0, 1, СтрокаИмущества.ЖильеДоляЧислитель) 
								/ ?(СтрокаИмущества.ЖильеДоляЗнаменатель = 0, 1, СтрокаИмущества.ЖильеДоляЗнаменатель));
				
				// Заполняем итоги по имущественному вычету:
					
				СтрокаИтогаВычетов = ТаблицаИмущественныхВычетовИтоги[0]; // Вычет, принятый к учету в прошлые годы
				СтрокаИтогаВычетов.СуммаНаПриобретение = ДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоРасходам + ДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоРасходам;
				СтрокаИтогаВычетов.СуммаПроцентов      = ДокументВычета.ЖильеВычетПрошлыхЛетОтАгентаПоПроцентам + ДокументВычета.ЖильеВычетПрошлыхЛетОтНалоговойПоПроцентам;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПомощника01012015(ДанныеОтчета)

	ЗаполитьФормуИзДанныхПомощника(ДанныеОтчета);

КонецПроцедуры
 
&НаСервере
Процедура ЗагрузитьДанныеОтчета01012014(ДанныеОтчета)

	Если НЕ ДанныеОтчета.Свойство("ПоказателиОтчета") ИЛИ НЕ ТипЗнч(ДанныеОтчета.ПоказателиОтчета) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	АдресВРФТипАдреса = 1;
	Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный") Тогда
		ТабДокумент = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		ПреобразоватьПосимвольныеДанныеВЗначения(ТабДокумент);
		ТабДокумент.Свойство("ИНН1",     НалогоплательщикИНН);
		ТабДокумент.Свойство("Имя",      НалогоплательщикИмя);
		ТабДокумент.Свойство("Отчество", НалогоплательщикОтчество);
		ТабДокумент.Свойство("Фамилия",  НалогоплательщикФамилия);
		ТабДокумент.Свойство("Окато",    АдресВРФОКТМО);
		ТабДокумент.Свойство("КодИМНС",  КодИФНС);
		
		Если ЗначениеЗаполнено(КодИФНС) Тогда
			КодИФНСПриИзмененииНаСервере(КодИФНС);
		КонецЕсли; 
		
		ТабДокумент.Свойство("ПоМесту",        НалогоплательщикКатегория);
		ТабДокумент.Свойство("ТелОрганизации", НалогоплательщикНомерТелефона);
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("АдресЗаПределамиРФ", АдресЗаПределамиРФ);
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("ДатаРождения",       НалогоплательщикДатаРождения);
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("МестоРождения",      НалогоплательщикМестоРождения);
		КодСтраныГражданства = "";
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002.Свойство("КодСтраныГражданства", КодСтраныГражданства);
		Если НЕ ЗначениеЗаполнено(КодСтраныГражданства) ИЛИ КодСтраныГражданства = "643" Тогда 
			НалогоплательщикСтрана = Справочники.СтраныМира.Россия;
		Иначе
			НалогоплательщикСтрана = Справочники.СтраныМира.НайтиПоКоду(КодСтраныГражданства);
		КонецЕсли;
	КонецЕсли; 
	
	Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный002") Тогда
		ТабДокумент = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный002;
		ПреобразоватьПосимвольныеДанныеВЗначения(ТабДокумент);
		ТабДокумент.Свойство("МестоЖительства",   АдресВРФТипАдреса);
		ТабДокумент.Свойство("Индекс",            АдресВРФСтруктура.Индекс);
		ТабДокумент.Свойство("Город",             АдресВРФСтруктура.Город);
		ТабДокумент.Свойство("Дом",               АдресВРФСтруктура.Дом);
		ТабДокумент.Свойство("Квартира",          АдресВРФСтруктура.Квартира);
		ТабДокумент.Свойство("Корпус",            АдресВРФСтруктура.Корпус);
		ТабДокумент.Свойство("НаселенныйПункт",   АдресВРФСтруктура.НаселенныйПункт);
		ТабДокумент.Свойство("Район",             АдресВРФСтруктура.Район);
		ТабДокумент.Свойство("Регион",            АдресВРФСтруктура.Регион);
		ТабДокумент.Свойство("Регион",            АдресВРФСтруктура.КодРегиона);
		ТабДокумент.Свойство("Улица",             АдресВРФСтруктура.Улица);
		
		АдресВРФПредставление       = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," 
				+ АдресВРФСтруктура.Индекс + ","
				+ АдресВРФСтруктура.Регион + ","
				+ АдресВРФСтруктура.Район + ","
				+ АдресВРФСтруктура.Город + ","
				+ АдресВРФСтруктура.НаселенныйПункт + ","
				+ АдресВРФСтруктура.Улица + ","
				+ АдресВРФСтруктура.Дом + ","
				+ АдресВРФСтруктура.Корпус + ","
				+ АдресВРФСтруктура.Квартира);
		
		ТабДокумент.Свойство("КодВидаДокумента",        ДокументКодВида);
		ТабДокумент.Свойство("ДатаВыдачиДокумента",     ДокументДатаВыдачи);
		ТабДокумент.Свойство("СерияИНомерДокумента",    ДокументСерияИНомер);
		ТабДокумент.Свойство("СтатусНалогоплательщика", НалогоплательщикСтатус);
		ТабДокумент.Свойство("КемВыданДокумент",        ДокументКемВыдан);
		Если ЗначениеЗаполнено(ДокументКодВида) Тогда
			ДокументНаименованиеВида = ПолучитьЗначениеИзМакетаПоКоду(ДокументКодВида, "КодВидаДокумента");
		КонецЕсли; 
	КонецЕсли; 

	Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаЛистИ")
		И ЗначениеЗаполнено(ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.П000024024004
			+ ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ.П000024025004)	Тогда
			
		ТабДокумент = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаЛистИ;
		ПреобразоватьПосимвольныеДанныеВЗначения(ТабДокумент);
		
		СтрокаИмущества = ТаблицаИмущественныхВычетов.Добавить();
		СтрокаИмущества.ИДЭлемента = Строка(Новый УникальныйИдентификатор);
		СтрокаИмущества.ЖильеНаименование             = 2; //жилой дом(1), квартира(2), комната(3), доля (доли) в жилом доме, квартире, комнате, земельном участке(4), земельный участок, предоставленный для индивидуального жилищного строительства(5), земельный участок, на котором расположен жилой дом(6), жилой дом с земельным участком(7)
		СтрокаИмущества.ЖильеВидСобственности         = 1; //Собственность(1), Собственность общая долевая(2), Собственность общая совместная(3)
		СтрокаИмущества.ЖильеПризнакНалогоплательщика = 1; // Собственник(1), супруг(а) собственника(2)
		СтрокаИмущества.ЖильеСпособПриобретения       = 1; //Покупка(1), Инвестирование(2)
		
		СтрокаИмущества.ЖильеАдресСтруктура           = ПолучитьСтруктуруАдресаВРФ(АдресВРФСтруктура);
		ТабДокумент.Свойство("ИмИндекс",   СтрокаИмущества.ЖильеАдресСтруктура.Индекс);
		ТабДокумент.Свойство("ИмГород",    СтрокаИмущества.ЖильеАдресСтруктура.Город);
		ТабДокумент.Свойство("ИмДом",      СтрокаИмущества.ЖильеАдресСтруктура.Дом);
		ТабДокумент.Свойство("ИмКвартира", СтрокаИмущества.ЖильеАдресСтруктура.Квартира);
		ТабДокумент.Свойство("ИмКорпус",   СтрокаИмущества.ЖильеАдресСтруктура.Корпус);
		ТабДокумент.Свойство("ИмНаселенныйПункт", СтрокаИмущества.ЖильеАдресСтруктура.НаселенныйПункт);
		ТабДокумент.Свойство("ИмРайон",    СтрокаИмущества.ЖильеАдресСтруктура.Район);
		ТабДокумент.Свойство("ИмРегион",   СтрокаИмущества.ЖильеАдресСтруктура.Регион);
		ТабДокумент.Свойство("ИмРегион",   СтрокаИмущества.ЖильеАдресСтруктура.КодРегиона);
		ТабДокумент.Свойство("ИмУлица",    СтрокаИмущества.ЖильеАдресСтруктура.Улица);
		
		СтрокаИмущества.ЖильеАдресПредставление       = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," 
				+ СтрокаИмущества.ЖильеАдресСтруктура.Индекс + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.Регион + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.Район + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.Город + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.НаселенныйПункт + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.Улица + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.Дом + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.Корпус + ","
				+ СтрокаИмущества.ЖильеАдресСтруктура.Квартира);
				
		ТабДокумент.Свойство("ИмДатаАкта",                СтрокаИмущества.ЖильеДатаАктаПередачи);
		ТабДокумент.Свойство("ИмДатаПриобретения",        СтрокаИмущества.ЖильеДатаПраваСобственности);
		ТабДокумент.Свойство("ЗемлДатаПриобретения",      СтрокаИмущества.ЖильеДатаПраваНаЗемлю);
		ТабДокумент.Свойство("ИмДатаРаспределенияВычета", СтрокаИмущества.ЖильеДатаЗаявленияОРаспределении);
		ТабДокумент.Свойство("ИмГодВычета",               СтрокаИмущества.ЖильеГодНачалаВычета);
		ТабДокумент.Свойство("ИмДоля1",                   СтрокаИмущества.ЖильеДоляЧислитель);
		ТабДокумент.Свойство("ИмДоля3",                   СтрокаИмущества.ЖильеДоляЗнаменатель);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеОтчета01012015(ДанныеОтчета)


	Если НЕ ДанныеОтчета.Свойство("ПоказателиОтчета") ИЛИ НЕ ТипЗнч(ДанныеОтчета.ПоказателиОтчета) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	АдресВРФТипАдреса = 1;
	Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный") Тогда
		
		СтруктураЛиста = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		
		КодСтраныГражданства = "";
		
		СтруктураЛиста.Свойство("АдресЗаПределамиРФ", АдресЗаПределамиРФ);
		СтруктураЛиста.Свойство("ДатаВыдачиДокумента", ДокументДатаВыдачи);
		СтруктураЛиста.Свойство("ДатаПодпси", ДатаПодписи);
		СтруктураЛиста.Свойство("ДатаРождения", НалогоплательщикДатаРождения);
		СтруктураЛиста.Свойство("ДокУдПред", "");
		СтруктураЛиста.Свойство("ИНН", НалогоплательщикИНН);
		СтруктураЛиста.Свойство("Имя", НалогоплательщикИмя);
		СтруктураЛиста.Свойство("КемВыданДокумент", ДокументКемВыдан);
		СтруктураЛиста.Свойство("КодВидаДокумента", ДокументКодВида);
		СтруктураЛиста.Свойство("КодИМНС", КодИФНС);
		СтруктураЛиста.Свойство("КодСтраны", КодСтраныГражданства);
		СтруктураЛиста.Свойство("МестоЖительства", АдресВРФТипАдреса);
		СтруктураЛиста.Свойство("МестоРождения", НалогоплательщикМестоРождения);
		СтруктураЛиста.Свойство("НомерКорректировки", НомерКорректировки);
		СтруктураЛиста.Свойство("Отчество", НалогоплательщикОтчество);
		СтруктураЛиста.Свойство("ОтчетГод", ГодОтчета);
		СтруктураЛиста.Свойство("ПоМесту", НалогоплательщикКатегория);
		СтруктураЛиста.Свойство("СерияИНомерДокумента", ДокументСерияИНомер);
		СтруктураЛиста.Свойство("СтатусНалогоплательщика", НалогоплательщикСтатус);
		СтруктураЛиста.Свойство("ТелОрганизации", НалогоплательщикНомерТелефона);
		СтруктураЛиста.Свойство("Фамилия", НалогоплательщикФамилия);
		
		СтруктураЛиста.Свойство("Город",           АдресВРФСтруктура.Город);
		СтруктураЛиста.Свойство("Дом",             АдресВРФСтруктура.Дом);
		СтруктураЛиста.Свойство("Индекс",          АдресВРФСтруктура.Индекс);
		СтруктураЛиста.Свойство("Квартира",        АдресВРФСтруктура.Квартира);
		СтруктураЛиста.Свойство("Корпус",          АдресВРФСтруктура.Корпус);
		СтруктураЛиста.Свойство("НаселенныйПункт", АдресВРФСтруктура.НаселенныйПункт);
		СтруктураЛиста.Свойство("Район",           АдресВРФСтруктура.Район);
		СтруктураЛиста.Свойство("Регион",          АдресВРФСтруктура.КодРегиона);
		СтруктураЛиста.Свойство("Улица",           АдресВРФСтруктура.Улица);
		
		Если НЕ ЗначениеЗаполнено(КодСтраныГражданства) ИЛИ КодСтраныГражданства = "643" Тогда 
			НалогоплательщикСтрана = Справочники.СтраныМира.Россия;
		Иначе
			НалогоплательщикСтрана = Справочники.СтраныМира.НайтиПоКоду(КодСтраныГражданства);
		КонецЕсли;
		
	КонецЕсли; 
	

КонецПроцедуры
 

//Преобразовывает некоторые значения структуры из посимвольного представления в одно поле
//предназначена для совместимости с формами сохраненными в версии 2.0
Процедура ПреобразоватьПосимвольныеДанныеВЗначения(Данные)
	
	Если Данные.Свойство("ИНН1_1") Тогда
		
		ИНН = "";
		Для Поз = 1 По 12 Цикл
			ИНН = ИНН + Данные["ИНН1_" + Поз];
			Данные.Удалить("ИНН1_" + Поз);
		КонецЦикла;	
		Данные.Вставить("ИНН1",ИНН);
	КонецЕсли;
	
	Если Данные.Свойство("ДатаПодписи1") Тогда
		
		мДатаПодписи = "" + Данные["ДатаПодписи5"]
		+ Данные["ДатаПодписи6"]
		+ Данные["ДатаПодписи7"]
		+ Данные["ДатаПодписи8"]
		+ Данные["ДатаПодписи3"]
		+ Данные["ДатаПодписи4"]
		+ Данные["ДатаПодписи1"]
		+ Данные["ДатаПодписи2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаПодписи" + Поз);
		КонецЦикла;
		
		Данные.Вставить("ДатаПодписи", ?(ЗначениеЗаполнено(мДатаПодписи), Дата(мДатаПодписи), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("НомСтр1_1") Тогда	             
			
		Для Поз = 1 По 3 Цикл
			Данные.Удалить("НомСтр1_" + Поз);
		КонецЦикла;	
		
	КонецЕсли;
	Если Данные.Свойство("НомерКорректировки1") Тогда	
		
		НомерКорректировки = "";
		Для Поз = 1 По 3 Цикл
			НомерКорректировки = НомерКорректировки + Данные["НомерКорректировки" + Поз];
			Данные.Удалить("НомерКорректировки" + Поз);
		КонецЦикла;	
		Данные.Вставить("НомерКорректировки", НомерКорректировки);
	
	КонецЕсли;
	Если Данные.Свойство("ОтчетГод1") Тогда
		
		ОтчетГод = "";
		Для Поз = 1 По 4 Цикл
			ОтчетГод = ОтчетГод + Данные["ОтчетГод" + Поз];
			Данные.Удалить("ОтчетГод" + Поз);
		КонецЦикла;	
		Данные.Вставить("ОтчетГод", ОтчетГод);
		
	КонецЕсли;
	Если Данные.Свойство("КодИМНС1") Тогда	             
		
		КодИМНС = "";
		Для Поз = 1 По 4 Цикл
			КодИМНС = КодИМНС + Данные["КодИМНС" + Поз];
			Данные.Удалить("КодИМНС" + Поз);
		КонецЦикла;	
		Данные.Вставить("КодИМНС", КодИМНС);
		
	КонецЕсли;
	Если Данные.Свойство("ПоМесту1") Тогда	             
		
		ПоМесту = "";
		Для Поз = 1 По 3 Цикл
			ПоМесту = ПоМесту + Данные["ПоМесту" + Поз];
			Данные.Удалить("ПоМесту" + Поз);
		КонецЦикла;	
		Данные.Вставить("ПоМесту", ПоМесту);
		
	КонецЕсли;
	Если Данные.Свойство("Период1") Тогда	             
		
		Период = "";
		Для Поз = 1 По 2 Цикл
			Период = Период + Данные["Период" + Поз];
			Данные.Удалить("Период" + Поз);
		КонецЦикла;	
		Данные.Вставить("Период", Период);
		
	КонецЕсли;
	Если Данные.Свойство("СоставленаНа1") Тогда
		
		СоставленаНа = "";
		Для Поз = 1 По 3 Цикл
			СоставленаНа = СоставленаНа + Данные["СоставленаНа" + Поз];
			Данные.Удалить("СоставленаНа" + Поз);
		КонецЦикла;	
		Данные.Вставить("СоставленаНа", СоставленаНа);
		
	КонецЕсли;
	Если Данные.Свойство("ДатаВыдачиДокумента1") Тогда	
		
		ДатаВыдачиДокумента = "" + Данные["ДатаВыдачиДокумента5"]
		+ Данные["ДатаВыдачиДокумента6"]
		+ Данные["ДатаВыдачиДокумента7"]
		+ Данные["ДатаВыдачиДокумента8"]
		+ Данные["ДатаВыдачиДокумента3"]
		+ Данные["ДатаВыдачиДокумента4"]
		+ Данные["ДатаВыдачиДокумента1"]
		+ Данные["ДатаВыдачиДокумента2"];

		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаВыдачиДокумента" + Поз);
		КонецЦикла;	
		
		Данные.Вставить("ДатаВыдачиДокумента", ?(ЗначениеЗаполнено(ДатаВыдачиДокумента), Дата(ДатаВыдачиДокумента), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;
	Если Данные.Свойство("ДатаРождения1") Тогда
		
		ДатаРождения = "" + Данные["ДатаРождения5"]
		+ Данные["ДатаРождения6"]
		+ Данные["ДатаРождения7"]
		+ Данные["ДатаРождения8"]
		+ Данные["ДатаРождения3"]
		+ Данные["ДатаРождения4"]
		+ Данные["ДатаРождения1"]
		+ Данные["ДатаРождения2"];
		
		Для Поз = 1 По 8 Цикл
			Данные.Удалить("ДатаРождения" + Поз);
		КонецЦикла;	
		Данные.Вставить("ДатаРождения", ?(ЗначениеЗаполнено(ДатаРождения) , Дата(ДатаРождения), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"))));
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеИзМакетаПоКоду(Код, ИмяОбласти)

	ИмяФормыСписка = "Списки2016кв1";
	Макет = Отчеты.РегламентированныйОтчет3НДФЛ.ПолучитьМакет(ИмяФормыСписка).ПолучитьОбласть(ИмяОбласти);
	Область = Макет.НайтиТекст(Код,, Макет.Область(1,1, Макет.ВысотаСтраницы, 1), Истина, Истина, Истина);
	Если Область = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Макет.Область(Область.Верх,2,Область.Верх,2).Текст;
	КонецЕсли; 

КонецФункции

 
 
#КонецОбласти
  
// Процедура вызывается из списка ошибок БРО
//Параметры:
//	Ячейка - структура, описывающая местоположение ячейки на бланке отчета
//		* Графа - строка
//		* ИмяЯчейки - строка типа "П000700001040"
//		* Описание  - описание ошибки
//		* Раздел  - имя листа, например "ЛистД1"
//		* Страница - строка
//		* Строка - строка
//		* СтрокаПП - строка
&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	// Обработка не требуется

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерВерсииДанныхПомощника()

	Возврат "20160101";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерВерсииФормыОтчета()

	Возврат "10/01/2016";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

#КонецОбласти
