#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ПараметрыСобытийОтчета() Экспорт
	
	ВерсияСобытийОтчета = "1";  // номер версии универсального механизма, с которой совместим отчет
	ПараметрыСобытийОтчета = ОтчетыКлиентСервер.ПараметрыСобытийОтчетаПоУмолчанию(ВерсияСобытийОтчета);
	
	//ПараметрыСобытийОтчета.ВыполнятьПриСозданииФормыНаСервере       = Истина;
	//ПараметрыСобытийОтчета.ВыполнятьПриОбработкеПараметраФормыОтбор = Истина;
	//ПараметрыСобытийОтчета.ВыполнятьПередСозданиемЭлементовФормыПользовательскихНастроек = Истина;
	//ПараметрыСобытийОтчета.ВыполнятьПриСозданииЭлементовФормыПользовательскихНастроек = Истина;
	//ПараметрыСобытийОтчета.ВыполнятьПослеСозданияЭлементовФормыПользовательскихНастроек = Истина;
	//ПараметрыСобытийОтчета.ВыполнятьПриЗаполненииРеквизитовФормыПоПараметрамНКД = Истина;
	//ПараметрыСобытийОтчета.ВыполнятьПриУстановкеСлужебныхПараметровНКД = Истина;
	//ПараметрыСобытийОтчета.ВыполнятьПередКомпоновкойРезультата = Истина;
	ПараметрыСобытийОтчета.ВыполнятьПослеКомпоновкиРезультата = Истина;
	
	Возврат ПараметрыСобытийОтчета;
	
КонецФункции

// Вызывается из обработчика события ПриСозданииНаСервере.
//
Процедура ПриСозданииФормыНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, СтандартнаяОбработкаВФорме) Экспорт
	
	Отбор = ЭтаФорма.Параметры.Отбор;
	
	Если НЕ ЗначениеЗаполнено(Отбор) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка данных для расшифровки
	КлючВарианта = ?(ЭтаФорма.Параметры.Свойство("КлючВарианта") И ЗначениеЗаполнено(ЭтаФорма.Параметры.КлючВарианта), ЭтаФорма.Параметры.КлючВарианта, Неопределено);
	Если КлючВарианта <> Неопределено Тогда
		ВариантКД = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючВарианта);
	Иначе
		ВариантКД = СхемаКомпоновкиДанных.ВариантыНастроек[0];
	КонецЕсли;
	ПредставлениеВарианта = ВариантКД.Представление;
	
	КомпоновщикНКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНКД.ЗагрузитьНастройки(ВариантКД.Настройки);
	
	//Если Отбор.Свойство("ПериодОтчета") Тогда
	//	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ПериодОтчета", Отбор.ПериодОтчета);
	//	Отбор.Удалить("ПериодОтчета");
	//КонецЕсли;
	// 
	//Если Отбор.Свойство("ВалютаОтчета") Тогда
	//	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(КомпоновщикНКД, "ВалютаОтчета", Отбор.ВалютаОтчета);
	//	Отбор.Удалить("ВалютаОтчета");
	//КонецЕсли;
	//
	Если Отбор.Свойство("СтатьяРасхода") Тогда
		ЭлементОтбора = КомпоновщикНКД.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяРасхода");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.ПравоеЗначение = Отбор.СтатьяРасхода;
		Отбор.Удалить("СтатьяРасхода");
	КонецЕсли;
	//
	//// Заголовок отчета
	//ЗаголовокОтчета = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	//ЗаголовокОтчетаРасшифровки = КомпоновщикНКД.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
	//ЗаголовокОтчетаРасшифровки.Использование = ЗаголовокОтчета.Использование;
	//ЗаголовокОтчетаРасшифровки.Значение = ЗаголовокОтчета.Значение + НСтр("ru = ' (расшифровка)'");
	//
	//// Представление варианта
	//ПредставлениеВарианта = ОтчетыКлиентСервер.ПредставлениеВариантаБезСтандартногоПрефикса(ПредставлениеВарианта);
	//ПредставлениеВарианта = ПредставлениеВарианта + НСтр("ru = ' - расшифровка'");
	//
	//ЭтаФорма.Параметры.Вариант = ПоместитьВоВременноеХранилище(КомпоновщикНКД.Настройки);
	//ЭтаФорма.Параметры.ПредставлениеВарианта = ПредставлениеВарианта;
	
КонецПроцедуры

// Вызывается один раз после создания формы, когда уже заполнен Отчет.КомпоновщикНастроек.
//
Процедура ПриОбработкеПараметраФормыОтбор(Отбор, ЭтаФорма) Экспорт
	
	Перем КомпоновщикНастроек;
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	
	// Если есть отбор по статье расходов, надо установить вид сравнения ВИерархии
	Если Отбор.Свойство("СтатьяРасхода") Тогда
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.ФиксированныеНастройки.Отбор, "СтатьяРасхода");
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЦикла;
	КонецЕсли;
	
	Если Отбор.Свойство("ВыводитьДиаграмму") Тогда
		
		// Установим использование всех диаграмм, которые найдем
		ТипДиаграммаКД = Тип("ДиаграммаКомпоновкиДанных");
		Для каждого Элемент Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(Элемент) = ТипДиаграммаКД Тогда
				Элемент.Использование = Отбор.ВыводитьДиаграмму;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события ПриОбновленииСоставаПользовательскихНастроекНаСервере.
//
// Параметры:
//	ИменаИсключаемыхПараметров  - Строка - Имена параметров через запятую. Элементы формы для этих параметров будут созданы платформой.
//
Процедура ПередСозданиемЭлементовФормыПользовательскихНастроек(ЭтаФорма, ИменаИсключаемыхПараметров, Отказ, СтандартнаяОбработка, СтандартнаяОбработкаВФорме) Экспорт
	// Пример:
	//ИменаИсключаемыхПараметров = ИменаИсключаемыхПараметров + ",ВалютаОтчета";
КонецПроцедуры

// Вызывается из обработчика события ПриОбновленииСоставаПользовательскихНастроекНаСервере.
//
Процедура ПриСозданииЭлементовФормыПользовательскихНастроек(ЭтаФорма, СтандартнаяОбработка, СтандартнаяОбработкаВФорме) Экспорт
	
КонецПроцедуры

// Вызывается из обработчика события ПриОбновленииСоставаПользовательскихНастроекНаСервере.
//
Процедура ПослеСозданияЭлементовФормыПользовательскихНастроек(ЭтаФорма, СтандартнаяОбработка, СтандартнаяОбработкаВФорме) Экспорт
	
КонецПроцедуры

// Вызывается из процедуры ЗаполнитьРеквизитыФормыПоПараметрамНКД.
// Выполняется в обработчике события ПриОбновленииСоставаПользовательскихНастроекНаСервере.
//
Процедура ПриЗаполненииРеквизитовФормыПоПараметрамНКД(ЭтаФорма, СтандартнаяОбработкаВФорме) Экспорт
	
КонецПроцедуры

// Вызывается из процедуры УстановитьСлужебныеПараметрыНКД.
// Выполняется в обработчике команды СформироватьОтчет до начала формирования отчета.
//
Процедура ПриУстановкеСлужебныхПараметровНКД(ЭтаФорма, СтандартнаяОбработкаВФорме) Экспорт
	
	СтандартнаяОбработкаВФорме = Ложь;
	
	// Параметр СтатьяНабора
	СтатьяНабора = Справочники.СтатьиРасходов.ПустаяСсылка();
	ПолеКомпоновкиСтатья          = Новый ПолеКомпоновкиДанных("СтатьяРасхода");
	ПолеКомпоновкиСтатьяДиаграммы = Новый ПолеКомпоновкиДанных("СтатьяДляДиаграммы");
	Для Каждого ЭлементНастройки Из ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементНастройки.Использование 
			И (ЭлементНастройки.ЛевоеЗначение = ПолеКомпоновкиСтатья) Тогда // ИЛИ ЭлементНастройки.ЛевоеЗначение = ПолеКомпоновкиСтатьяДиаграммы) Тогда
			Если ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии 
				ИЛИ ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				СтатьяНабора = ЭлементНастройки.ПравоеЗначение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
			Для Каждого ЭлементОтбора Из ЭлементНастройки.Элементы Цикл
				Если (ЭлементОтбора.Использование И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиСтатья)// ИЛИ ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновкиСтатьяДиаграммы)
					И (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии 
					ИЛИ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) Тогда
					СтатьяНабора = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	//ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(ЭтаФорма.Отчет.КомпоновщикНастроек, "СтатьяНабора", СтатьяНабора);
	
	// Параметр БазоваяВалюта
	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(ЭтаФорма.Отчет.КомпоновщикНастроек, "ВалютаУчета", ЭтаФорма.ВалютаУчета);
	
	//// Параметр ВидАналитики1
	//Если ЭтаФорма.ПользовательскиеПараметрыОтчета <> Неопределено
	//	И НЕ ЭтаФорма.ПользовательскиеПараметрыОтчета.Свойство("ПараметрОтчета_ВидАналитики1") Тогда
	//	// Очистим значение, если параметр не используется
	//	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(ЭтаФорма.Отчет.КомпоновщикНастроек, "ВидАналитики1", Неопределено);
	//КонецЕсли;
	//
	//// Параметр ВидАналитики2
	//Если ЭтаФорма.ПользовательскиеПараметрыОтчета <> Неопределено
	//	И НЕ ЭтаФорма.ПользовательскиеПараметрыОтчета.Свойство("ПараметрОтчета_ВидАналитики2") Тогда
	//	// Очистим значение, если параметр не используется
	//	ОтчетыКлиентСервер.УстановитьЗначениеПараметраДанныхНКДПоИмени(ЭтаФорма.Отчет.КомпоновщикНастроек, "ВидАналитики2", Неопределено);
	//КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика команды СформироватьОтчет.
//
Процедура ПередКомпоновкойРезультата(ЭтаФорма, Отказ, СтандартнаяОбработкаВФорме) Экспорт
	
КонецПроцедуры

// Вызывается из обработчика команды СформироватьОтчет.
// Здесь можно доработать ОтчетТабличныйДокумент после выполнения системной обработки.
//
Процедура ПослеКомпоновкиРезультата(ОтчетТабличныйДокумент, ЭтаФорма) Экспорт
	
	Для каждого ТисунокТаблицы Из ОтчетТабличныйДокумент.Рисунки Цикл
		
		Если ТипЗнч(ТисунокТаблицы.Объект) <> Тип("Диаграмма") Тогда
			Продолжить;
		КонецЕсли;
		
		Диаграмма = ТисунокТаблицы.Объект;
		Минимум = Неопределено;
		Для каждого Серия Из Диаграмма.Серии Цикл
			
			Серия.Маркер = ТипМаркераДиаграммы.Нет;
			ПредЗначение = 0;
			
			Для каждого Точка Из Диаграмма.Точки Цикл
				Значение = Диаграмма.ПолучитьЗначение(Точка,Серия);
				Если Значение = Неопределено Или Не ЗначениеЗаполнено(Значение.Значение) Тогда
					Если ПредЗначение <> 0 Тогда
						Диаграмма.УстановитьЗначение(Точка, Серия, ПредЗначение);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ПредЗначение = Значение.Значение;
				Если Минимум = Неопределено Или Значение.Значение < Минимум Тогда
					Минимум = Значение.Значение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Минимум) И Минимум > 0 Тогда
			Диаграмма.БазовоеЗначение = Минимум - Макс(2, Минимум * 0.2);
		КонецЕсли;
		
	КонецЦикла;
	 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли
