#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработка отбора
	ЭтоСписокВыбора = Элементы.Список.РежимВыбора;
	Если Параметры.Отбор.Количество() > 0 ИЛИ ЭтоСписокВыбора Тогда
		КлючНазначенияИспользования = "ОтборПоПолученнымПараметрам";
		Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	КонецЕсли; 
	ОтборСписка = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ОтборСписка <> Неопределено Тогда
		
		Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
			Измерение = Метаданные.РегистрыСведений.ДатыРасписаний.Измерения.Найти(ЭлементОтбора.Ключ);
			Представление = ?(Измерение = Неопределено, "", Измерение.Синоним);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда
				СписокЭлементаОтбора = Новый СписокЗначений;
				СписокЭлементаОтбора.ЗагрузитьЗначения(Новый Массив(ЭлементОтбора.Значение));
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, ЭлементОтбора.Ключ, СписокЭлементаОтбора, ВидСравненияКомпоновкиДанных.ВСписке, Представление, Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияКомпоновкиДанных.Равно, Представление, Истина);
			КонецЕсли; 
		КонецЦикла; 
		
		Если Параметры.Отбор.Свойство("Активность") Тогда
			Актуальность = Параметры.Отбор.Активность;
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("ШаблонОперации") Тогда
			Шаблон = Параметры.Отбор.ШаблонОперации;
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("ВладелецРасписания") Тогда
			Шаблон = Параметры.Отбор.ВладелецРасписания;
		КонецЕсли; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		ОписаниеОтбора = ?(ПустаяСтрока(ОписаниеОтбора), НСтр("ru = 'не установлен'"), ОтборСписка);
		
		Параметры.Отбор.Очистить();
		
	КонецЕсли; 
	
	Если НЕ ДеньгиВызовСервераПовтИсп.ИспользуетсяВариантИнтерфейсаТакси() Тогда
		// Для обычного интерфейса заменим шрифт на обычный
		РаботаСФормамиСправочников.ИзменитьШрифтПанелиОтбораСпискаВыбора(Элементы.ГруппаБыстрыеОтборы, ШрифтыСтиля.ОбычныйШрифтТекста);
	КонецЕсли; 
	
	// Установка условного оформления для форм списков:
	УстановитьДополнительноеОформлениеСписка();
	
	НастроитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" ИЛИ ИмяСобытия = "Изменилась дата плановой операции" Тогда
		Элементы.Список.Обновить();
	КонецЕсли; 
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы


// Обработчики Панели ГруппаБыстрыеОтборы
#Область ГруппаБыстрыеОтборы 

&НаКлиенте
Процедура АктуальностьПриИзменении(Элемент)
	
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект); 
	НастроитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ЖурналДокументов.ОбщийЖурналДокументов.Форма.ФормаВыбораШаблона", , Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект); 
	НастроитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект); 
	НастроитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Шаблон = "Все";
	УстановитьБыстрыйОтборПоРеквизитам(ЭтотОбъект); 
	НастроитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьБыстрыйОтборПоРеквизитам(Форма)

	ОтборСписка = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ОтборСписка <> Неопределено Тогда
		Если Форма.Актуальность = 1 Тогда
			// Только активные
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
			
		ИначеЕсли Форма.Актуальность = 2 Тогда
			// Только неактивные
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина);
			
		Иначе
			// Все шаблоны
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "Активность", , , , Ложь);
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Форма.Шаблон) ИЛИ Форма.Шаблон = "Все" Тогда
			// Все типы операций
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "ШаблонОперации", , , , Ложь);
		Иначе
			// Только одного типа
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, "ШаблонОперации", Форма.Шаблон, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		КонецЕсли; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		Форма.ОписаниеОтбора = ?(ПустаяСтрока(ОписаниеОтбора), НСтр("ru = 'не установлен'"), СтрЗаменить(ОтборСписка, "Тип документа", "Тип операции"));
		
	КонецЕсли; 

КонецПроцедуры
 
&НаСервере
Процедура СписокПриЗагрузкеПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	АктуализироватьЗначенияБыстрыхОтборов(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	АктуализироватьЗначенияБыстрыхОтборов(Список.КомпоновщикНастроек.ПользовательскиеНастройки);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗначенияБыстрыхОтборов(Настройки)

	// Восстанавливаем значения быстрых отборов, если они были
	ОтборСписка = Настройки.Элементы.Найти(Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	Если ОтборСписка <> Неопределено Тогда
		
		// "обнуляем" значения быстрого отбора:
		Актуальность    = 0;
		ОписаниеОтбора  = "";
		Шаблон          = "Все";
		
		ПолеАктивность = Новый ПолеКомпоновкиДанных("Активность");
		ПолеШаблонОперации = Новый ПолеКомпоновкиДанных("ВладелецРасписания");
		Для Каждого ЭлементОтбора Из ОтборСписка.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = ПолеАктивность Тогда
				Если НЕ ЭлементОтбора.Использование Тогда
					Актуальность = 0;
				ИначеЕсли ЭлементОтбора.ПравоеЗначение = Ложь Тогда
					Актуальность = 2;
				Иначе
					Актуальность = 1;
				КонецЕсли; 
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеШаблонОперации Тогда
				Если НЕ ЭлементОтбора.Использование Тогда
					Шаблон = "Все";
				Иначе
					Шаблон = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		ОписаниеОтбора = Строка(ОтборСписка);
		ОписаниеОтбора = ?(ПустаяСтрока(ОписаниеОтбора), НСтр("ru = 'не установлен'"), СтрЗаменить(ОтборСписка, "Тип документа", "Тип операции"));
		
	КонецЕсли; 
	НастроитьВидимостьКолонок();

КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКолонок()

	ОтборПоШаблону = ЗначениеЗаполнено(Шаблон) И ТипЗнч(Шаблон) <> Тип("Строка");
	Элементы.ШаблонОперации.Видимость                 = НЕ ОтборПоШаблону;
	Элементы.ШаблонОперацииОписаниеОперации.Видимость = НЕ ОтборПоШаблону;

	Если ОтборПоШаблону Тогда
		ТипШаблона = Шаблон.Метаданные().Имя;
		ВидимостьСумм = СтрНайти("НамВернулиДолг,МыВернулиДолг,", 
			ТипШаблона + ",") > 0;
	Иначе
		ВидимостьСумм = Истина;
	КонецЕсли; 
	Элементы.ГруппаСуммыДолгов.Видимость = ВидимостьСумм;
	
КонецПроцедуры
 
#КонецОбласти


#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сегодня(Команда)
	
	КлючЗаписи = СтруктураДляТекущегоПериода();
	Если КлючЗаписи = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно определить расписание для текущего периода'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) );
		Возврат;
	КонецЕсли; 
	
	Элементы.Список.ТекущаяСтрока = КлючЗаписи;
	
КонецПроцедуры
 
&НаКлиенте
Процедура Пропустить(Команда)
	
	НеобработанныеОперации = Новый Массив;
	ПропуститьНаСервере(НеобработанныеОперации);
	
	Если НеобработанныеОперации.Количество() > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Невозможно пропустить операций: %1 шт.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, НеобработанныеОперации.Количество());
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли; 
	
	Оповестить("Изменилась дата плановой операции", ЭтаФорма);
		
КонецПроцедуры
 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДополнительноеОформлениеСписка()

	СтандартныйШрифт = Элементы.Список.Шрифт;
	
	// Пропуск
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Список");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.Пропустить");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// Операция не проведена
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПлановаяОперация");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("АктуальнаяДата");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ПлановаяОперация");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ОперацияПомеченаНаУдаление");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.Выполнена");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	// Просрочено АктуальнаяДата
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("АктуальнаяДата");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.АктуальнаяДата");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение  = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.Активность");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);

	// Просрочено ПлановаяДата
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПлановаяДата");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ПлановаяДата");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение  = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.Активность");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);

	// Выполнено
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПлановаяДата");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("АктуальнаяДата");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.Выполнена");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(СтандартныйШрифт, , , , , , Истина));

	// Шаблон помечен на удаление
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ШаблонОперации");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ШаблонОперацииОписаниеОперации");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ШаблонПомеченНаУдаление");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(СтандартныйШрифт, , , , , , Истина));

	// Операция помечена на удаление
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПлановаяОперация");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("АктуальнаяДата");

	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Список.ШаблонПомеченНаУдаление");
	ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение  = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(СтандартныйШрифт, , , , , , Истина));

КонецПроцедуры

&НаСервере
Функция СтруктураДляТекущегоПериода()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сегодня", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Шаблон", ?(ЗначениеЗаполнено(Шаблон), Шаблон, Неопределено));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДатыРасписаний.ВладелецРасписания) КАК ВладелецРасписания,
	|	МАКСИМУМ(ДатыРасписаний.ПлановаяДата) КАК ПлановаяДата
	|ИЗ
	|	РегистрСведений.ДатыРасписаний КАК ДатыРасписаний
	|ГДЕ
	|	ДатыРасписаний.АктуальнаяДата <= &Сегодня
	|	И (&Шаблон = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДатыРасписаний.ВладелецРасписания = &Шаблон)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат РегистрыСведений.ДатыРасписаний.СоздатьКлючЗаписи(Новый Структура("ВладелецРасписания,ПлановаяДата", Выборка.ВладелецРасписания, Выборка.ПлановаяДата));
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

&НаСервере
Процедура ПропуститьНаСервере(НеобработанныеОперации)
	
	СтрокиСписка = Элементы.Список.ВыделенныеСтроки;
	Для Каждого КлючЗаписи Из СтрокиСписка Цикл
		
		МенеджерЗаписи = РегистрыСведений.ДатыРасписаний.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			
			Если НЕ МенеджерЗаписи.Пропустить И (НЕ ЗначениеЗаполнено(МенеджерЗаписи.ПлановаяОперация) ИЛИ Не МенеджерЗаписи.ПлановаяОперация.Проведен) Тогда
				МенеджерЗаписи.Пропустить = Истина;
				МенеджерЗаписи.Записать(Истина);
			Иначе
				Если НЕ МенеджерЗаписи.Пропустить Тогда
					НеобработанныеОперации.Добавить(КлючЗаписи.ВладелецРасписания);
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти










