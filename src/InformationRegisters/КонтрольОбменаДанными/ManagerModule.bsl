////////////////////////////////////////////////////////////////////////////////
// Регистр предназначен для информирования пользователя о результатах обмена даными 
//с каждым конкретным узлом плана обмена.
//Не заменяет записи в журнал регистрации, в котором собирается подробная технологическая информация.
//  
////////////////////////////////////////////////////////////////////////////////


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// Обновляет запись, отмечая начало обмена данными
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	Транспорт - СправочникСсылка.ТранспортыОбменаДанными - транспорт, с помощью которого выполняется обмен
//
Процедура ОтметитьНачалоОбмена(Узел, Транспорт) Экспорт
	
	Запись = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	
	// обновляем и очищаем только те поля, которые описывают последний обмен
	Запись.УзелИнформационнойБазы = Узел;
	Запись.Транспорт = Транспорт;
	Запись.НомерСеанса = НомерСеансаИнформационнойБазы();
	Запись.ТекущееДействие = НСтр("ru='начало обмена'"); 
	Запись.НачалоОбмена = ТекущаяДатаСеанса(); 
	Запись.ЗавершениеОбмена        = Неопределено;
	
	Запись.РезультатОтправкиДанных = Неопределено;
	Запись.ПоследнееПолучение      = Неопределено;
	Запись.ТекстОшибокПолучения    = "";
	
	Запись.РезультатПолученияДанных = Неопределено;
	Запись.ПоследняяОтправка        = Неопределено;
	Запись.ТекстОшибокОтправки      = "";
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Обновляет запись, отмечая окончание и результат загрузки данных
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	ПолученоОбъектов - Число или Неопределено
//	ТекстОшибки - Строка или Неопределено
//
Процедура ОтметитьРезультатПолученияДанных(Узел, ПолученоОбъектов = 0, ТекстОшибки = Неопределено) Экспорт
	
	Запись = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	
	// обновляем и очищаем только те поля, которые описывают последний обмен
	Запись.УзелИнформационнойБазы = Узел;
	Запись.ТекущееДействие = ""; 
	
	Запись.ПоследнееПолучение       = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Запись.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		Запись.ТекстОшибокПолучения     = ТекстОшибки;
	Иначе
		Запись.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено;
		Запись.ПоследнееУспешноеПолучение = Запись.ПоследнееПолучение;
		Запись.ПолученоОбъектов = ПолученоОбъектов;
	КонецЕсли;
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Обновляет запись, отмечая окончание и результат загрузки данных
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	ПолученоОбъектов - Число или Неопределено
//	ТекстОшибки - Строка или Неопределено
//
Процедура ОтметитьРезультатОтправкиДанных(Узел, ОтправленоОбъектов = 0, ТекстОшибки = Неопределено) Экспорт
	
	Запись = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	
	// обновляем и очищаем только те поля, которые описывают последний обмен
	Запись.УзелИнформационнойБазы = Узел;
	Запись.ТекущееДействие = ""; 
	
	Запись.ПоследняяОтправка       = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Запись.РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка;
		Запись.ТекстОшибокОтправки     = ТекстОшибки;
	Иначе
		Запись.РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено;
		Запись.ПоследняяУспешнаяОтправка = Запись.ПоследняяОтправка;
		Запись.ОтправленоОбъектов = ОтправленоОбъектов;
	КонецЕсли;
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Обновляет запись, отмечая окончание и результат загрузки данных
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	ПолученоОбъектов - Число или Неопределено
//	ТекстОшибки - Строка или Неопределено
//
Процедура ОтметитьТекущееДействие(Узел, ТекущееДействие) Экспорт
	
	Запись = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	
	// обновляем и очищаем только те поля, которые описывают последний обмен
	Запись.УзелИнформационнойБазы = Узел;
	Запись.ТекущееДействие = ТекущееДействие; 
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Обновляет запись, отмечая окончание и результат загрузки данных
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, с которым выполняется обмен данными
//	ПолученоОбъектов - Число или Неопределено
//	ТекстОшибки - Строка или Неопределено
//
Процедура ОтметитьЗавершениеОбмена(Узел) Экспорт
	
	Запись = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	
	// обновляем и очищаем только те поля, которые описывают последний обмен
	Запись.УзелИнформационнойБазы = Узел;
	Запись.ТекущееДействие        = ""; 
	Запись.ЗавершениеОбмена       = ТекущаяДатаСеанса();
	
	Запись.Записать(Истина);
	
КонецПроцедуры

// Вовзращает текст ошибки зафиксированной для выбранного узла обмена
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, для которого устанавливается соединение
//
//Возвращаемое значение:
//	Строка
//
Функция ТекстОшибкиОбмена(Узел) Экспорт

	Результат = "";
	
	ЗаписьРегистра = ПолучитьЗаписьУзла(Узел);
	Если Не ЗаписьРегистра.Выбран() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЕстьОшибкаПолучения = (ЗаписьРегистра.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка
					Или ЗаписьРегистра.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения
					Или ЗаписьРегистра.РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято);
	ЕстьОшибкаОтправки  = (ЗаписьРегистра.РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка
					Или ЗаписьРегистра.РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения
					Или ЗаписьРегистра.РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято);
	Если Не ЕстьОшибкаОтправки И Не ЕстьОшибкаПолучения Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ШаблонОшибкиПолучения = НСтр("ru='Ошибки загрузки данных на сервере: %1 %2'"); 
		ШаблонОшибкиОтправки = НСтр("ru='Ошибки выгрузки данных на сервере: %1 %2'"); 
	Иначе
		ШаблонОшибкиПолучения = НСтр("ru='Ошибки загрузки данных в настольную программу: %1 %2'"); 
		ШаблонОшибкиОтправки = НСтр("ru='Ошибки выгрузки данных из настольной программы: %1 %2'"); 
	КонецЕсли;
	
	Если ЕстьОшибкаПолучения Тогда
		Результат = СтрШаблон(ШаблонОшибкиПолучения, Символы.ПС, ЗаписьРегистра.ТекстОшибокПолучения);
	КонецЕсли;
	
	Если ЕстьОшибкаОтправки Тогда
		Результат = Результат + ?(Результат = "", "", Символы.ПС + Символы.ПС);
		Результат = СтрШаблон(ШаблонОшибкиПолучения, Символы.ПС, ЗаписьРегистра.ТекстОшибокОтправки);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции


#Область Устаревшие_методы


// Проверяет текущее состояние обмена с указанным узлом и возвращает возможность начать новый обмен
//
// Параметры: 
//	Узел - ПланОбменаСсылка - узел, для которого устанавливается соединение
//	Транспорт - СправочникСсылка.ТранспортыОбменаДанными - транспорт, которым осуществляется обмен
//	ОписаниеКонкурентов - Строка - информация для пользователя об использовании узла в другом сеансе/транспорте
//	КонкурирующийСеанс - Число, по умолчанию 0 - сеанс в котором в данный момент используется узел плана обмена
//	КонкурирующийТранспорт - СправочникСсылка.ТранспортыОбменаДанными, по умолчанию Неопределено
//								- транспорт, в котором в данный момент используется узел плана обмена
//
//
// Возвращаемое значение 
//	Булево - ИСТИНА, если узел свободен для обмена или ЛОЖЬ, если уже выполняется обмен каким-либо другим сеансом.
//
Функция УзелДляОбменаДоступен(Узел, Транспорт, ОписаниеКонкурентов = "", КонкурирующийСеанс = 0, КонкурирующийТранспорт = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	МенеджерЗаписи = ЗаписьРегистраДляУзлаПланаОбмена(Узел, Транспорт, КонкурирующийСеанс, КонкурирующийТранспорт, ОписаниеКонкурентов);
	Если МенеджерЗаписи <> Неопределено И МенеджерЗаписи.Модифицированность() Тогда
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	Возврат МенеджерЗаписи <> Неопределено;
	
КонецФункции

// Фиксирует начало процесса обмена с указанным в параметрах узлом: 
//	в регистр записывается номер сеанса, транспорт, обнуляются результаты и даты
//	Если узел уже используется в обмене в каком-либо активном сеансе или в другом транспорте
//	фиксации не произойдет и функция вернет Ложь, выходные параметры будут заполнены информацией о 
//	сеансе и транспорте, в которых осуществляется обмен с данным узлом.
//
// Параметры: 
//	Узел - ПланОбменаСсылка - узел, для которого устанавливается соединение
//	Транспорт - СправочникСсылка - транспорт, которым осуществляется обмен
//	ОписаниеКонкурентов - Строка - информация для пользователя об использовании узла в другом сеансе/транспорте
//	КонкурирующийСеанс - Число, по умолчанию 0 - сеанс в котором в данный момент используется узел плана обмена
//	КонкурирующийТранспорт - СправочникСсылка.ТранспортыОбменаДанными, по умолчанию Неопределено
//								- транспорт, в котором в данный момент используется узел плана обмена
//
// Возвращаемое значение 
//	Булево - ИСТИНА, если узел свободен для обмена или ЛОЖЬ, если уже выполняется обмен каким-либо другим сеансом.
//
Функция УстановитьНачалоОбмена(Узел, Транспорт, ОписаниеКонкурентов = "", КонкурирующийСеанс = 0, КонкурирующийТранспорт = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	// Если возможно, получаем менеджер записи с указанными параметрами
	ЗаписьУзла = ЗаписьРегистраДляУзлаПланаОбмена(Узел, Транспорт, КонкурирующийСеанс, КонкурирующийТранспорт, ОписаниеКонкурентов);
	
	Если ЗаписьУзла = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	 
	// Отметка о начале синхронизации
	ЗаписьУзла.ТекущееДействие           = НСтр("ru='Подготовка к обмену данными'");
	ЗаписьУзла.НачалоОбмена              = ТекущаяДатаСеанса();
	ЗаписьУзла.ЗавершениеОбмена          = '00010101';
	ЗаписьУзла.ПоследнееПолучение        = '00010101';
	ЗаписьУзла.ПоследняяОтправка         = '00010101';
	ЗаписьУзла.РезультатОтправкиДанных   = Перечисления.РезультатыВыполненияОбмена.ПустаяСсылка();
	ЗаписьУзла.РезультатПолученияДанных  = Перечисления.РезультатыВыполненияОбмена.ПустаяСсылка();
	ЗаписьУзла.ТекстОшибокПолучения      = "";
	ЗаписьУзла.ТекстОшибокОтправки       = "";

	ЗаписьУзла.Записать(Истина);
	
	Возврат Истина;
	
КонецФункции

// Фиксирует завершение процесса обмена с указанным в параметрах узлом: 
//	в записи регистра обнуляется номер сеанса и изменяется текст текущего действия
//
// Параметры: 
//	Узел - ПланОбменаСсылка - узел, для которого устанавливается соединение
//
Процедура УстановитьОкончаниеОбмена(Узел) Экспорт

	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли; 
	
	// Если возможно, получаем менеджер записи с указанными параметрами
	//ЗаписьУзла = ЗаписьРегистраДляУзлаПланаОбмена(Узел, Транспорт);
	ЗаписьУзла = ПолучитьЗаписьУзла(Узел);
	
	// Отмечаем завершение обмена
	ЗаписьУзла.НомерСеанса         = 0;
	ЗаписьУзла.ТекущееДействие     = "";
	ЗаписьУзла.ЗавершениеОбмена    = ТекущаяДатаСеанса();
	Если Не ЗначениеЗаполнено(ЗаписьУзла.ПоследнееПолучение) Тогда
		ЗаписьУзла.ПоследнееПолучение = ЗаписьУзла.ЗавершениеОбмена;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗаписьУзла.ПоследняяОтправка) Тогда
		ЗаписьУзла.ПоследняяОтправка = ЗаписьУзла.ЗавершениеОбмена;
	КонецЕсли;
	
	ЗаписьУзла.Записать(Истина);
	
КонецПроцедуры

// Изменяет значения ресурсов, описывающих получение данных
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, для которого устанавливается соединение
//	РезультатПолученияДанных - ПеречислениеСсылка.РезультатыВыполненияОбмена - результат получения данных. 
//								В случае ошибки или неуспеха рекомендуется заполнять ТекстОшибокПолучения 
//
Процедура УстановитьРезультатПолученияДанных(Узел, РезультатПолученияДанных, ТекстОшибокПолучения = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерЗаписи = ПолучитьЗаписьУзла(Узел);
	МенеджерЗаписи.ПоследнееПолучение       = ТекущаяДатаСеанса();
	МенеджерЗаписи.РезультатПолученияДанных = РезультатПолученияДанных;
	Если ЗначениеЗаполнено(ТекстОшибокПолучения) Тогда
		МенеджерЗаписи.ТекстОшибокПолучения = МенеджерЗаписи.ТекстОшибокПолучения 
				+ ?(ЗначениеЗаполнено(МенеджерЗаписи.ТекстОшибокПолучения), Символы.ПС, "") 
				+ ТекстОшибокПолучения;
	КонецЕсли;
	
	Если РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено
		Или РезультатПолученияДанных = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями
		Тогда
		МенеджерЗаписи.ПоследнееУспешноеПолучение = МенеджерЗаписи.ПоследнееПолучение;
	КонецЕсли;
	
	МенеджерЗаписи.ТекущееДействие = "";
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Изменяет значения ресурсов, описывающих отправку данных
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, для которого устанавливается соединение
//	РезультатОтправкиДанных - ПеречислениеСсылка.РезультатыВыполненияОбмена - результат получения данных. 
//								В случае ошибки или неуспеха рекомендуется заполнять ТекстОшибокОтправки 
//
Процедура УстановитьРезультатОтправкиДанных(Узел, РезультатОтправкиДанных, ТекстОшибокОтправки = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерЗаписи = ПолучитьЗаписьУзла(Узел);
	МенеджерЗаписи.ПоследняяОтправка       = ТекущаяДатаСеанса();
	МенеджерЗаписи.РезультатОтправкиДанных = РезультатОтправкиДанных;
	Если ЗначениеЗаполнено(ТекстОшибокОтправки) Тогда
		МенеджерЗаписи.ТекстОшибокОтправки = МенеджерЗаписи.ТекстОшибокОтправки 
				+ ?(ЗначениеЗаполнено(МенеджерЗаписи.ТекстОшибокОтправки), Символы.ПС, "") 
				+ ТекстОшибокОтправки;
	КонецЕсли;
	
	Если РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.Выполнено
		Или РезультатОтправкиДанных = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями
		Тогда
		МенеджерЗаписи.ПоследняяУспешнаяОтправка = МенеджерЗаписи.ПоследняяОтправка;
	КонецЕсли;
	
	МенеджерЗаписи.ТекущееДействие = "";
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Изменяет значения ресурсов для указанного узла плана обмена
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, для которого нужно изменить значения ресурсов
//	НовыеЗначенияРесурсов - Структура - ключ соответствует имени ресурва, значение - значению
//	ТекстОшибокПолучения - Строка - текст, который следует добавить к описаниям ошибок получения данных
//	ТекстОшибокОтправки - Строка - текст, который следует добавить к описаниям ошибок отправки данных
//	ПроверятьДоступность - Булево - нужно ли проверить доступность узла в текущем сеансе?
//
Процедура ИзменитьСостояниеУзла(Узел, НовыеЗначенияРесурсов, ТекстОшибокПолучения = "", ТекстОшибокОтправки = "", ПроверятьДоступность = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Узел) ИЛИ ТипЗнч(НовыеЗначенияРесурсов) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПроверятьДоступность И НовыеЗначенияРесурсов.Свойство("Транспорт") И ЗначениеЗаполнено(НовыеЗначенияРесурсов.Транспорт) Тогда
		МенеджерЗаписи = ЗаписьРегистраДляУзлаПланаОбмена(Узел, НовыеЗначенияРесурсов.Транспорт);
	Иначе
		МенеджерЗаписи = ПолучитьЗаписьУзла(Узел);
	КонецЕсли;
	
	Если МенеджерЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НовыеЗначенияРесурсов);
	
	Если ЗначениеЗаполнено(ТекстОшибокПолучения) Тогда
		МенеджерЗаписи.ТекстОшибокПолучения = МенеджерЗаписи.ТекстОшибокПолучения 
				+ ?(ЗначениеЗаполнено(МенеджерЗаписи.ТекстОшибокПолучения), Символы.ПС, "") 
				+ ТекстОшибокПолучения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибокОтправки) Тогда
		МенеджерЗаписи.ТекстОшибокОтправки = МенеджерЗаписи.ТекстОшибокОтправки 
				+ ?(ЗначениеЗаполнено(МенеджерЗаписи.ТекстОшибокОтправки), Символы.ПС, "") 
				+ ТекстОшибокОтправки;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Изменяет значение ресурса "ТекущееДействие"
//
//Параметры:
//	Узел - ПланОбменаСсылка - узел, для которого нужно изменить значения ресурсов
//	ТекущееДействие	- Строка - описание текущего действия
//
Процедура ИзменитьТекущееДействиеДляУзла(Узел, ТекущееДействие) Экспорт
	
	ИзменитьСостояниеУзла(Узел, Новый Структура("ТекущееДействие", ТекущееДействие));
	
КонецПроцедуры

// Обработчик записи журнала регистрации, вызываемый из ОМ ОбменДаннымиXDTOСервер - 
//	записывает проблемы конвертации с конкретным узлом
//
//Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  Уровень          - Уровень сообщения журнала регистрации (по умолчанию Ошибка).
//  Комментарий      - Строка, комментарий для записи в журнал регистрации.
//  СсылкаНаОбъект   - произвольная ссылка или Неопределено
//
Процедура ОбработатьЗаписьЖурналаРегистрацииОбменаXDTO(КомпонентыОбмена, Уровень, Комментарий, СсылкаНаОбъект) Экспорт
	
	Если Уровень <> УровеньЖурналаРегистрации.Ошибка И Уровень <> УровеньЖурналаРегистрации.Предупреждение Тогда
		Возврат;
	КонецЕсли;
	
	Узел = Неопределено;
	Если Не КомпонентыОбмена.Свойство("УзелКорреспондента", Узел) Или Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеОбмена = Неопределено;
	КомпонентыОбмена.Свойство("НаправлениеОбмена", НаправлениеОбмена);
	Если Не ЗначениеЗаполнено(НаправлениеОбмена) Тогда
		НаправлениеОбмена = "Отправка";
	КонецЕсли;
	
	Если Уровень = УровеньЖурналаРегистрации.Ошибка Тогда
		Результат = Перечисления.РезультатыВыполненияОбмена.Ошибка;
	Иначе
		Результат = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
	КонецЕсли;
	
	Если НаправлениеОбмена = "Отправка" Тогда
		УстановитьРезультатОтправкиДанных(Узел, Результат, Комментарий);
	Иначе
		УстановитьРезультатПолученияДанных(Узел, Результат, Комментарий);
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ЗаписьРегистраДляУзлаПланаОбмена(Узел, Транспорт, КонкурирующийСеанс = 0, КонкурирующийТранспорт = Неопределено, ОписаниеКонкурентов = "") 

	МенеджерЗаписи = ПолучитьЗаписьУзла(Узел);
	
	// Изменить состояние можно только в том же сеансе и тем же транспортом обмена,
	// который начал процесс синхронизации
	НомерСеансаИБ = НомерСеансаИнформационнойБазы();
	Если МенеджерЗаписи.Выбран() И ЗначениеЗаполнено(МенеджерЗаписи.НомерСеанса) Тогда
		
		// Если номер сеанса не пуст, обмен с указанным узлом не завершен.
		КонкурирующийТранспорт = МенеджерЗаписи.Транспорт;
		
		// Проверяем сеанс и его активность.  Сеанс, длящийся более часа игнорируем
		Если МенеджерЗаписи.НомерСеанса <> НомерСеансаИБ И ОбщегоНазначенияДеньги.СеансАктивен(МенеджерЗаписи.НомерСеанса)
			И ЗначениеЗаполнено(МенеджерЗаписи.НачалоОбмена) И ТекущаяДатаСеанса() - МенеджерЗаписи.НачалоОбмена > 86400 Тогда
			
			КонкурирующийСеанс  = МенеджерЗаписи.НомерСеанса;
			ОписаниеКонкурентов = НСтр("ru='В текущий момент обмен данными с приложением ""%1"" осуществляется в другом сеансе %2 с помощью транспорта %3'"); 
			ОписаниеКонкурентов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеКонкурентов, Строка(Узел), КонкурирующийСеанс, КонкурирующийТранспорт);
			Возврат Неопределено;
			
		КонецЕсли;
		 
		КонкурирующийСеанс     = ?(МенеджерЗаписи.НомерСеанса = НомерСеансаИБ, НомерСеансаИБ, 0); // Номера неактивных сеансов не являются конкурирующими
		
		// Проверка транспорта
		Если МенеджерЗаписи.НомерСеанса = НомерСеансаИБ И МенеджерЗаписи.Транспорт <> Транспорт Тогда
			
			ОписаниеКонкурентов = НСтр("ru='В текущий момент обмен данными с приложением ""%1"" осуществляется с помощью транспорта %2'"); 
			ОписаниеКонкурентов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеКонкурентов, Строка(Узел), КонкурирующийТранспорт);
			Возврат Неопределено;
			
		КонецЕсли; 
		
	КонецЕсли;

	Если МенеджерЗаписи.УзелИнформационнойБазы <> Узел Тогда
		МенеджерЗаписи.УзелИнформационнойБазы = Узел;
	КонецЕсли;
	Если МенеджерЗаписи.НомерСеанса <> НомерСеансаИБ Тогда
		МенеджерЗаписи.НомерСеанса = НомерСеансаИБ;
	КонецЕсли;
	Если МенеджерЗаписи.Транспорт <> Транспорт Тогда
		МенеджерЗаписи.Транспорт = Транспорт;
	КонецЕсли;
	
	Возврат МенеджерЗаписи;
	
КонецФункции

Функция ПолучитьЗаписьУзла(Узел) 

	МенеджерЗаписи = РегистрыСведений.КонтрольОбменаДанными.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УзелИнформационнойБазы = Узел;
	МенеджерЗаписи.Прочитать();
	Если Не МенеджерЗаписи.Выбран() Или МенеджерЗаписи.УзелИнформационнойБазы <> Узел Тогда
		МенеджерЗаписи.УзелИнформационнойБазы    = Узел;
	КонецЕсли;
	Возврат МенеджерЗаписи;

КонецФункции


#КонецОбласти

#КонецЕсли