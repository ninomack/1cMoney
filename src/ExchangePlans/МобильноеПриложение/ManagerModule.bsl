#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


// Возвращает массив узлов обмена, для которых обмен не запрещен.
//
Функция ПолучитьИспользуемыеУзлыПланаОбмена() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МобильноеПриложение.Ссылка КАК Ссылка
		|ИЗ
		|	ПланОбмена.МобильноеПриложение КАК МобильноеПриложение
		|ГДЕ
		|	МобильноеПриложение.Активность
		|	И МобильноеПриложение.Ссылка <> &ЭтотУзел");
		
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.МобильноеПриложение.ЭтотУзел());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбменДанными

// Заполняет настройки, влияющие на использование плана обмена.
// 
// Параметры:
//  Настройки - Структура - настройки плана обмена по умолчанию, см. ОбменДаннымиСервер.НастройкиПланаОбменаПоУмолчанию,
//                          описание возвращаемого значения функции.
//
Процедура ПриПолученииНастроек(Настройки) Экспорт
	
	Настройки.ИмяКонфигурацииИсточника = Метаданные.Имя;
	
	Настройки.НазначениеПланаОбмена = "СинхронизацияСДругойПрограммой";
	
	Настройки.ЭтоПланОбменаXDTO = Истина;
	Настройки.ФорматОбмена = "http://v8.1c.ru/Money/MoneyData";
	
	ВерсииФормата = Новый Соответствие;
	ВерсииФормата.Вставить(СинхронизацияАвтономныхКопийКлиентСервер.ТекущаяВерсияФормата(), МенеджерСинхронизацииАвтономныхКопий_10);
	ВерсииФормата.Вставить("1.6.3", МенеджерСинхронизацииАвтономныхКопий_10);
	
	Настройки.ВерсииФорматаОбмена = ВерсииФормата;
	
	Настройки.ПланОбменаИспользуетсяВМоделиСервиса = Истина;
	
	Настройки.Алгоритмы.ПриПолученииВариантовНастроекОбмена   = Истина;
	Настройки.Алгоритмы.ПриПолученииОписанияВариантаНастройки = Истина;
	
	Настройки.Алгоритмы.ПредставлениеОтбораИнтерактивнойВыгрузки = Ложь;
	Настройки.Алгоритмы.НастроитьИнтерактивнуюВыгрузку           = Ложь;
	
	Настройки.Алгоритмы.ОбработчикПроверкиПараметровУчета = Истина;
	Настройки.Алгоритмы.ПриПодключенииККорреспонденту     = Истина;
	
КонецПроцедуры

// Заполняет коллекцию вариантов настроек, предусмотренных для плана обмена.
// 
// Параметры:
//  ВариантыНастроекОбмена - ТаблицаЗначений - коллекция вариантов настроек обмена, см. описание возвращаемого значения
//                                       функции НастройкиПланаОбменаПоУмолчанию общего модуля ОбменДаннымиСервер.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияВариантовНастроек,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииВариантовНастроекОбмена(ВариантыНастроекОбмена, ПараметрыКонтекста) Экспорт
	
	ВариантНастройки = ВариантыНастроекОбмена.Добавить();
	ВариантНастройки.ИдентификаторНастройки        = "Двухсторонний";
	ВариантНастройки.КорреспондентВМоделиСервиса   = Истина;
	ВариантНастройки.КорреспондентВЛокальномРежиме = Истина;
	
	Если ПараметрыКонтекста.КорреспондентВМоделиСервиса = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВариантНастройки = ВариантыНастроекОбмена.Добавить();
	ВариантНастройки.ИдентификаторНастройки        = "ТолькоОтправка";
	ВариантНастройки.КорреспондентВМоделиСервиса   = Истина;
	ВариантНастройки.КорреспондентВЛокальномРежиме = Истина;
	
	ВариантНастройки = ВариантыНастроекОбмена.Добавить();
	ВариантНастройки.ИдентификаторНастройки        = "ТолькоПолучение";
	ВариантНастройки.КорреспондентВМоделиСервиса   = Истина;
	ВариантНастройки.КорреспондентВЛокальномРежиме = Истина;

КонецПроцедуры

// Заполняет набор параметров, определяющих вариант настройки обмена.
// 
// Параметры:
//  ОписаниеВарианта       - Структура - набор варианта настройки по умолчанию,
//                                       см. ОбменДаннымиСервер.ОписаниеВариантаНастройкиОбменаПоУмолчанию,
//                                       описание возвращаемого значения.
//  ИдентификаторНастройки - Строка    - идентификатор варианта настройки обмена.
//  ПараметрыКонтекста     - Структура - см. ОбменДаннымиСервер.ПараметрыКонтекстаПолученияОписанияВариантаНастройки,
//                                       описание возвращаемого значения функции.
//
Процедура ПриПолученииОписанияВариантаНастройки(ОписаниеВарианта, ИдентификаторНастройки, ПараметрыКонтекста) Экспорт
	
	КраткаяИнформацияПоОбмену = "";
	Если ИдентификаторНастройки = "ТолькоОтправка" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет отправлять данные в мобильное приложение.
		|Отправляются следующие типы данных:
		| - справочники и курсы валют,
		| - операции,
		| - расписания плановых операций
		| - плановые показатели бюджета.'");
	ИначеЕсли ИдентификаторНастройки = "ТолькоПолучение" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет получать данные из мобильного приложения.
		|Получаются следующие типы данных:
		| - справочники и курсы валют,
		| - операции,
		| - расписания плановых операций
		| - плановые показатели бюджета.'");
	ИначеЕсли ИдентификаторНастройки = "Двухсторонний" Тогда
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет синхронизировать данные настольной программы с мобильным приложением.
		|В синхронизации данных участвуют следующие типы данных:
		| - справочники и курсы валют,
		| - операции,
		| - расписания плановых операций
		| - плановые показатели бюджета.'");
	Иначе
		КраткаяИнформацияПоОбмену = НСтр("ru = 'Позволяет синхронизировать данные.
		|В синхронизации данных участвуют следующие типы данных:
		| - справочники и курсы валют,
		| - операции,
		| - расписания плановых операций
		| - плановые показатели бюджета.'");
	КонецЕсли;
	
	ОписаниеВарианта.КраткаяИнформацияПоОбмену   = КраткаяИнформацияПоОбмену;
	ОписаниеВарианта.ПодробнаяИнформацияПоОбмену = Неопределено;
	
	ОписаниеВарианта.НаименованиеКонфигурацииКорреспондента = НСтр("ru = 'Мобильное приложение ""Миниденьги""'");
	ОписаниеВарианта.ИмяФайлаНастроекДляПриемника           = НСтр("ru = 'Синхронизация мобильного приложения'");
	
	ЗаголовокКоманды   = НСтр("ru = 'Синхронизация данных с мобильным приложением'");
	ЗаголовокПомощника = "";
	ЗаголовокУзла      = "";
	Если ИдентификаторНастройки = "ТолькоОтправка" Тогда
		
		ЗаголовокКоманды   = НСтр("ru = 'Отправка данных'");
		ЗаголовокПомощника = НСтр("ru = 'Отправка данных в мобильное приложение (настройка)'");
		ЗаголовокУзла      = НСтр("ru = 'Отправка данных в мобильное приложение'");
		
		
	ИначеЕсли ИдентификаторНастройки = "ТолькоПолучение" Тогда
		
		ЗаголовокКоманды   = НСтр("ru = 'Получение данных'");
		ЗаголовокПомощника = НСтр("ru = 'Получение данных из мобильного приложения (настройка)'");
		ЗаголовокУзла      = НСтр("ru = 'Получение данных из мобильного приложения'");
		
		
		
	ИначеЕсли ИдентификаторНастройки = "Двухсторонний" Тогда
		
		ЗаголовокКоманды   = НСтр("ru = 'Полная синхронизация'");
		ЗаголовокПомощника = НСтр("ru = 'Синхронизация данных с мобильным приложением (настройка)'");
		ЗаголовокУзла      = НСтр("ru = 'Синхронизация данных с мобильным приложением'");
		
	КонецЕсли;
	
	ОписаниеВарианта.ЗаголовокКомандыДляСозданияНовогоОбменаДанными = ЗаголовокКоманды;
	ОписаниеВарианта.ЗаголовокПомощникаСозданияОбмена               = ЗаголовокПомощника;
	ОписаниеВарианта.ЗаголовокУзлаПланаОбмена                       = ЗаголовокУзла;
	
	ОписаниеВарианта.ПояснениеДляНастройкиПараметровУчета = "";
	

КонецПроцедуры

// Проверяет корректность настройки параметров учета.
//
// Параметры:
//	Отказ - Булево - Признак невозможности продолжения настройки обмена из-за некорректно настроенных параметров учета.
//	Получатель - ПланОбменаСсылка - Узел обмена, для которого выполняется проверка параметров учета.
//	Сообщение - Строка - Содержит текст сообщения о некорректных параметрах учета.
//
Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
	
КонецПроцедуры

// Обработчик события при подключении к корреспонденту.
// Событие возникает при успешном подключении к корреспонденту и получении версии конфигурации корреспондента
// при настройке обмена с использованием помощника через прямое подключение
// или при подключении к корреспонденту через Интернет.
// В обработчике можно проанализировать версию корреспондента и,
// если настройка обмена не поддерживается с корреспондентом указанной версии, то вызвать исключение.
//
//  Параметры:
// ВерсияКорреспондента (только чтение) - Строка - версия конфигурации корреспондента, например, "2.1.5.1".
//
Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт
	
	Если ВерсияКорреспондента = "0.0.0.0" Тогда
		ВерсияКорреспондента = "2.0.2.1";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКорреспондента, "2.0.2.1") < 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Настройка синхронизации данных поддерживается только с мобильным приложением
			|""1С:Деньги 8"" версии 2.0.2 и выше.'"
		);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбменДанными

#КонецОбласти





// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru = '1С:Деньги 8, обмен с мобильным приложением'");
	
КонецФункции

// Возвращает имя обработки выгрузки в составе конфигурации
//
Функция ИмяОбработкиВыгрузки() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает имя обработки загрузки в составе конфигурации
//
Функция ИмяОбработкиЗагрузки() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать информацию между настольной и мобильными версиями программы 1С:Деньги 8.
		|Из мобильного версии в настольную автоматически загружаются все операции и все элементы справочников. 
		|Выгрузку из настольной версии приложения в мобильную можно ограничить периодом (например, выгружать операции только за полседний месяц или неделю)
		|и списком кошельков. Например, если на мобильном устройстве не планируется работать с банковскими депозитами, их можно исключить из выгружаемых данных.'");

	Возврат ПоясняющийТекст;

КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
//
Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
	
		Возврат "http://its.1c.ru/db/bspdoc#content:120:1:IssOgl2_Обмен%2520с%2520Библиотекой%2520стандартных%2520подсистем";
	
	Иначе
		
		Возврат "ПланОбмена.МобильноеПриложение.Форма.ПодробнаяИнформация";
		
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы через подключение к корреспонденту через внешнее соединение или веб-сервис

// Процедура предназначена для получения дополнительных данных, используемых при настройке обмена в базе-корреспонденте.
//
//  Параметры:
// ДополнительныеДанные - Структура. Дополнительные данные, которые будут использованы
// в базе-корреспонденте при настройке обмена.
// В качестве значений структуры применимы только значения, поддерживающие XDTO-сериализацию.
//
Процедура ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Константы и проверка параметров учета

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая настройка дополнения выгрузки

// Возвращает флаг того, что при обмене в модели сервиса будет использована дополнительная настройка выгрузки
//
// Возвращаемое значение: 
//     Булево - Истина, если необходимо вызывать НастроитьИнтерактивнуюВыгрузкуВМоделиСервиса для определения настроек
//                      для данного узла
//
Функция НастраиватьИнтерактивнуюВыгрузкуВМоделиСервиса(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат Ложь;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("РегистрироватьИзменения");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле(ИдентификаторНастройки)
	
	СтруктураТабличнойЧастиКошельки = Новый Структура;
	СтруктураТабличнойЧастиКошельки.Вставить("Кошельки", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КоличествоВыгружаемыхПериодов",     1);
	СтруктураНастроек.Вставить("ВидВыгружаемогоПериода",            Перечисления.Периодичность.Месяц);
	СтруктураНастроек.Вставить("ВыгружатьОперацииТолькоПоУказаннымКошелькам",   Ложь);
	
	СтруктураНастроек.Вставить("Кошельки",                          СтруктураТабличнойЧастиКошельки);
	СтруктураНастроек.Вставить("ВерсияФорматаОбмена", СинхронизацияАвтономныхКопийКлиентСервер.ТекущаяВерсияФормата());
	
	Возврат СтруктураНастроек;
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле(ИдентификаторНастройки)
	
	СтруктураНастроек = Неопределено;
	
	//СтруктураНастроек = Новый Структура;
	//СтруктураНастроек.Вставить("КоличествоВыгружаемыхПериодов",     10);
	//СтруктураНастроек.Вставить("ВидВыгружаемогоПериода",            Перечисления.Периодичность.День);
	//СтруктураНастроек.Вставить("ВыгружатьОперацииТолькоПоУказаннымКошелькам",   Ложь);
	
	Возврат СтруктураНастроек;
КонецФункции

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента(ИдентификаторНастройки)
	
	СтруктураТабличнойЧастиКошельки = Новый Структура;
	СтруктураТабличнойЧастиКошельки.Вставить("Кошельки", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КоличествоВыгружаемыхПериодов",     1);
	СтруктураНастроек.Вставить("ВидВыгружаемогоПериода",            Перечисления.Периодичность.Месяц);
	СтруктураНастроек.Вставить("РежимВыгрузкиСправочников",         Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	
	СтруктураНастроек.Вставить("Кошельки",                          СтруктураТабличнойЧастиКошельки);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ИдентификаторНастройки)
	
	Возврат Неопределено;
КонецФункции

// Расчет параметров выгрузки по умолчанию.
//
// Параметры:
//     Получатель - ПланОбменаСсылка - Узел, для которого производитсят настройка
//
// Возвращаемое значение - Структура - содержит поля:
//     ПредставлениеОтбора - Строка - текстовое описание отбора по умолчанию 
//     Период              - СтандартныйПериод     - значение периода общего отбора по умолчанию
//     Отбор               - ОтборКомпоновкиДанных - отбор
//
Функция ПараметрыВыгрузкиПоУмолчанию(Получатель) Экспорт
	
	Результат = Новый Структура;
	
	
	Возврат Результат;
КонецФункции

#КонецОбласти




#КонецЕсли
