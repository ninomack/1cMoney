&НаКлиенте
Перем ДополнительныеПараметрыНаКлиенте Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	#Область ПрикрепленныеФайлы
	МедиаФайлы = ПрикрепленныеФайлыСервер.ПрочитатьСписокФайлов(Объект.Ссылка);
	#КонецОбласти
	
	Если Объект.РазделУчета.Пустая() Тогда
		Объект.РазделУчета = ПланыСчетов.РазделыУчета.СвободныеДеньги;
	КонецЕсли; 

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере(); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ФормаВладельца = ЭтотОбъект.УникальныйИдентификатор И Параметр.ЭтоШаблон <> Объект.ЭтоШаблон Тогда
			ЗаполнитьДанныеПоШаблону(Параметр.Ссылка);
		КонецЕсли;
		
	КонецЕсли;

	#Область ПрикрепленныеФайлы
	Если (ПрикрепленныеФайлыКлиент.ЭтоПрикреплениеФайла(ЭтаФорма, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиент.ДобавитьФайлВСписокФормы(ЭтотОбъект, Параметр); 
	КонецЕсли;
	#КонецОбласти
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//удаление пустых строк
	УдалитьПустыеСтроки();
	
	// Интерактивная проверка содержимого
	Если Объект.Расходы.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Расходы[Объект.Расходы.Количество() - 1].СтатьяРасходаИмущество) Тогда
		// Удаляем последнюю строку
		Объект.Расходы.Удалить(Объект.Расходы[Объект.Расходы.Количество() - 1]);
	КонецЕсли; 
	
	// Обслуживание плановых операций
	ПлановыеОперацииКлиент.ПередЗаписьюДокумента(ЭтаФорма, Отказ, ПараметрыЗаписи);
	// Общий функционал перед записью документов
	ОбслуживаниеДокументовКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обслуживание плановых операций
	ПлановыеОперации.ПроверкаПлановПередЗаписьюДокумента(ТекущийОбъект, ПараметрыЗаписи, ЭтотОбъект);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыСервер.ОбработатьИЗаписатьДанныеМультимедиа(МедиаФайлы, ТекущийОбъект.Ссылка);
	#КонецОбласти 	
	
	ЗаполнитьДобавленныеКолонки();
	ПараметрыСеанса.ДатаПоследнейОперации = ТекущийОбъект.Дата;
	РаботаСФормамиДокументовКлиентСервер.ОбновитьСостояниеОперации(ЭтотОбъект);
	ОбновитьОстатокДенег();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Записана операция", Новый Структура("Дата, ВидДокумента, Ссылка, ЭтоШаблон, ВладелецФормы", 
			Объект.Дата, "Расход", Объект.Ссылка, Объект.ЭтоШаблон, 
			?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено)));
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Общий функционал перед закрытием форм документов
	ОбслуживаниеДокументовКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И Открыта() Тогда
		Закрыть(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	РаботаСФормамиДокументовКлиентСервер.ОбновитьЗаголовкиКомандФормы(ЭтотОбъект);
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИзменитьРасписание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПлановыеОперацииКлиент.ОткрытьРедакторРасписания(ЭтаФорма);
	
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИнформацияОШаблонеНажатие(Элемент, СтандартнаяОбработка)
	
	ПлановыеОперацииКлиент.ИнформацияОШаблонеНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Расход");
	
КонецПроцедуры

&НаКлиенте
Процедура КошелекДолгПриИзменении(Элемент)
	
	КошелекДолгПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КошелекДолгОчистка(Элемент, СтандартнаяОбработка)
	
	КошелекДолгПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КошелекДолгОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВыбранноеЗначение = ВыбранноеЗначение.Ссылка
	Иначе
		// РасширенныйВыбор
		ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Конец РасширенныйВыбор
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		КошелекДолгПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура СуммаЧекаПриИзменении(Элемент)
	
	ИнформацияСуммаЧека = ПолучитьНадписьКонтроляЧека(СуммаСтрок, Объект.СуммаЧека, ВалютаКошелька, Элементы.ИнформацияСуммаЧека.Подсказка);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиВШапке(Элемент)
	
	АналитикаСтатейКлиент.ПриИзмененииАналитикиВШапке(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСуммуЧекаПриИзменении(Элемент)
	
	Если НЕ КонтролироватьСуммуЧека Тогда
		Объект.СуммаЧека = 0;
	Иначе
		ИнформацияСуммаЧека = ПолучитьНадписьКонтроляЧека(СуммаСтрок, Объект.СуммаЧека, ВалютаКошелька, Элементы.ИнформацияСуммаЧека.Подсказка);
	КонецЕсли; 
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиПриИзменении(Элемент)
	
	ПересчитатьСуммуСкидки("ВсегоСуммаСкидки");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область ПрикрепленныеФайлы

&НаКлиенте
Процедура ПредставлениеФайловОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ПрикрепленныеФайлыКлиент.ОбработчикНажатияНаПредставлениеФайлов(ЭтотОбъект, СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

#КонецОбласти 


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	ОбновитьТекстИнформацияСуммаЧека();

КонецПроцедуры

&НаКлиенте
Процедура РасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле = Элементы.РасходыКоличество ИЛИ Поле = Элементы.РасходыЦена) Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные.КоличественныйУчет И ТекущиеДанные.Количество = 0 И ТипЗнч(ТекущиеДанные.СтатьяРасходаИмущество) = Тип("СправочникСсылка.СтатьиРасходов") Тогда
			
			ТекстВопроса = НСтр("ru = 
			|'У статьи ""%1"" отключен количественный учет -
			|ввод количества и цены недоступен.
			|
			|Включить учет количества и цены для этой статьи?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекущиеДанные.СтатьяРасходаИмущество);
			ДополнительныеПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
			ОбработчикОтвета = Новый ОписаниеОповещения("РасходыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаДокумента = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если НЕ Копирование Тогда
			ИтогСумма = Объект.Расходы.Итог("Сумма");
			Если Объект.СуммаЧека <> 0 И Объект.СуммаЧека > ИтогСумма Тогда
				СтрокаДокумента.Сумма = Объект.СуммаЧека - ИтогСумма;
			КонецЕсли; 
			ОписьТипа = Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходов");
			СтрокаДокумента.СтатьяРасходаИмущество   = ОписьТипа.ПривестиЗначение(СтрокаДокумента.СтатьяРасходаИмущество);
			СтрокаДокумента.КартинкаСтроки = ПолучитьКартинкуДляСтатьи(ТипЗнч(СтрокаДокумента.СтатьяРасходаИмущество));
			СтрокаДокумента.Создать = "Создать";
			Если ДопПараметрыФормы.КошелекДляНакоплений Тогда
				СтрокаДокумента.ФинансоваяЦель = ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления");
			КонецЕсли; 
		Иначе
			СтрокаДокумента.Скидка = 0;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0;
	
	Если ОтменаРедактирования Тогда
		ОбновитьТекстИнформацияСуммаЧека();
	КонецЕсли; 
	
	// Обслуживание аналитики статей:
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходаИмущество) Тогда
		СтатьяРасходаИмуществоПриИзмененииСервер(ВыделенныеСтрокиТаблицы());
	КонецЕсли;
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПриОкончанииРедактированияСтрокиТабличнойЧасти(ЭтаФорма, Истина, "Расходы", ТекущиеДанные);
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	
	ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0;
	ПересчитатьСуммуСкидки("Сумма");
	
	// Обслуживание аналитики статей:
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПослеУдаленияСтрокиТабличнойЧасти(ЭтаФорма, Истина, "Расходы");
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходаИмуществоПриИзменении(Элемент)
	
	ПересчитыватьСуммы = Ложь;
	СтатьяРасходаИмуществоПриИзмененииСервер(ВыделенныеСтрокиТаблицы(), ПересчитыватьСуммы);
	Если ПересчитыватьСуммы Тогда
		ПересчитатьСуммуСкидки("СуммаДоВычетаСкидки");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходаИмуществоОчистка(Элемент, СтандартнаяОбработка)
	
	СтатьяРасходаИмуществоПриИзмененииСервер(ВыделенныеСтрокиТаблицы());
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходаИмуществоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// РасширенныйВыбор
	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	// Конец РасширенныйВыбор
	
	Если Не СтандартнаяОбработка Тогда
		СтатьяРасходаИмуществоПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	ЦенаКоличествоПриИзменении("Количество");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	ЦенаКоличествоПриИзменении("Цена");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.Сумма;
	
	Для Каждого ИДСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Расходы.НайтиПоИдентификатору(ИдСтроки);
		СтрокаДокумента.Сумма = НовоеЗначение;
		
		Если Объект.СуммаСкидки = 0 Тогда
			СтрокаДокумента.СуммаДоВычетаСкидки = СтрокаДокумента.Сумма;
		Иначе
			СтрокаДокумента.СкидкаВведенаВручную = Истина;
			Если СтрокаДокумента.Сумма > СтрокаДокумента.СуммаДоВычетаСкидки Тогда
				СтрокаДокумента.Сумма = СтрокаДокумента.СуммаДоВычетаСкидки;
			КонецЕсли; 
			Если НовоеЗначение < 0 Тогда
				// сторно суммы
				СтрокаДокумента.СуммаДоВычетаСкидки = -СтрокаДокумента.СуммаДоВычетаСкидки;
				СтрокаДокумента.Скидка = СтрокаДокумента.СуммаДоВычетаСкидки - СтрокаДокумента.Сумма;
			Иначе
				СтрокаДокумента.Скидка = СтрокаДокумента.СуммаДоВычетаСкидки - СтрокаДокумента.Сумма;
			КонецЕсли;
		КонецЕсли; 
		
		ПриИзмененииСуммыДоВычета(ИДСтроки);
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаДоВычетаСкидкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.СуммаДоВычетаСкидки;
	Для Каждого ИдСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		СтрокаРасхода = Объект.Расходы.НайтиПоИдентификатору(ИдСтроки);
		СтрокаРасхода.СуммаДоВычетаСкидки = НовоеЗначение;
		Если НовоеЗначение < 0 Тогда
			// сторно
			СтрокаРасхода.Цена   = -СтрокаРасхода.Цена;
			СтрокаРасхода.Скидка = -СтрокаРасхода.Скидка;
			СтрокаРасхода.Сумма  = -СтрокаРасхода.Сумма;
		КонецЕсли;
		ПриИзмененииСуммыДоВычета(ИдСтроки);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСкидкаВведенаВручнуюПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.СкидкаВведенаВручную;
	Для Каждого ИдСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		СтрокаРасхода = Объект.Расходы.НайтиПоИдентификатору(ИдСтроки);
		СтрокаРасхода.СкидкаВведенаВручную = НовоеЗначение;
	КонецЦикла; 
	Если НЕ ТекущиеДанные.СкидкаВведенаВручную Тогда
		ПересчитатьСуммуСкидки("СуммаДоВычетаСкидки");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	ТекущиеДанные.СкидкаВведенаВручную = Истина;
	НовоеЗначение = ТекущиеДанные.Скидка;
	Для Каждого ИдСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		СтрокаРасхода = Объект.Расходы.НайтиПоИдентификатору(ИдСтроки);
		СтрокаРасхода.СкидкаВведенаВручную = Истина;
		СтрокаРасхода.Скидка = Мин(НовоеЗначение, СтрокаРасхода.СуммаДоВычетаСкидки);
		СтрокаРасхода.Сумма = СтрокаРасхода.СуммаДоВычетаСкидки - СтрокаРасхода.Скидка;
		ПриИзмененииСуммыДоВычета(ИдСтроки);
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура РасходыФинансоваяЦельПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ДопПараметрыФормы.КошелекДляНакоплений И НЕ ЗначениеЗаполнено(ТекущиеДанные.ФинансоваяЦель) Тогда
		ТекущиеДанные.ФинансоваяЦель = ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления");
	ИначеЕсли НЕ ДопПараметрыФормы.КошелекДляНакоплений И ТекущиеДанные.ФинансоваяЦель = ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления") Тогда
		ТекущиеДанные.ФинансоваяЦель = Неопределено;
	КонецЕсли; 
	ВыбраннаяЦель = ТекущиеДанные.ФинансоваяЦель;
	
	Для Каждого ИдСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		СтрокаРасхода = Объект.Расходы.НайтиПоИдентификатору(ИдСтроки);
		СтрокаРасхода.ФинансоваяЦель = ВыбраннаяЦель;
	КонецЦикла; 
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиВТаблице(Элемент)
	
	АналитикаСтатейКлиент.ПриИзмененииАналитикиВТаблице(ЭтаФорма, Элемент, "Расходы");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКомментарийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.КомментарийСтроки;
	
	Для Каждого ИДСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Расходы.НайтиПоИдентификатору(ИдСтроки);
		СтрокаДокумента.КомментарийСтроки = НовоеЗначение;
		
	КонецЦикла; 
	
КонецПроцедуры
 
 
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УказатьФинансовуюЦель(Команда)
	
	Если ВидимостьФинансовойЦели И Объект.Расходы.Количество() > 0 Тогда
		ЕстьЦели = Ложь;
		Для Каждого СтрокаДокумента Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаДокумента.ФинансоваяЦель) И СтрокаДокумента.ФинансоваяЦель <> ДопПараметрыФормы.ОбщаяФинансоваяЦель Тогда
				ЕстьЦели = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		Если ЕстьЦели Тогда
			ТекстВопроса = НСтр("ru = 'Очистить финансовые цели во всех строках операции?'"); 
			ОбработчикОтвета = Новый ОписаниеОповещения("УказатьФинансовуюЦельЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ВидимостьФинансовойЦели = НЕ ВидимостьФинансовойЦели;
	Элементы.РасходыУказатьФинансовуюЦель.Пометка = ВидимостьФинансовойЦели;
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_НастройкаКолонокАналитики(Команда)

	АналитикаСтатейКлиент.ИзменитьНастройкиКолонокАналитики(ЭтаФорма, Истина, "Расход");

КонецПроцедуры
 
&НаКлиенте
Процедура ПодборСтатейРасходов(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораСтатей", ЭтотОбъект);
	ПараметрыПодбора = Новый Структура("ВидимостьФинансовойЦели,ВидимостьКоличестваИЦены,ДатаОтбора,ВалютаКошелька,ДатаОперации,КошелекОперации,СтрокаПоиска",
			ВидимостьФинансовойЦели, ВидимостьКоличестваИЦены, , ВалютаКошелька, Объект.Дата, Объект.КошелекДолг, "");
	ОткрытьФорму("Обработка.ФормыПодборов.Форма.ПодборСтатейРасходов", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры
 
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции   

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Подготовка реквизитов формы
	ДопПараметрыФормы = Новый Структура();
	ДопПараметрыФормы.Вставить("ВалютаУчета",                Константы.ВалютаУчета.Получить());
	ДопПараметрыФормы.Вставить("РазделУчетаСвободныеДеньги", ПланыСчетов.РазделыУчета.СвободныеДеньги);
	ДопПараметрыФормы.Вставить("РазделУчетаНакопления",      ПланыСчетов.РазделыУчета.Накопления);
	ДопПараметрыФормы.Вставить("РазделУчетаДолги",           ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов);
	ДопПараметрыФормы.Вставить("ПрежняяСуммаСкидки",         Объект.СуммаСкидки);
	ДопПараметрыФормы.Вставить("ОбщаяФинансоваяЦель",        Справочники.ФинансовыеЦели.ОбщиеНакопления);
	ДопПараметрыФормы.Вставить("ЦветТекстаПоля",             ЦветаСтиля.ЦветТекстаПоля);
	ДопПараметрыФормы.Вставить("ЦветОтрицательногоЧисла",    ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	Если ТипЗнч(Объект.КошелекДолг) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		КошелекДляНакоплений    = ЗначениеЗаполнено(Объект.КошелекДолг) И Объект.КошелекДолг.ИспользоватьДляНакоплений;
		ВидимостьФинансовойЦели = КошелекДляНакоплений;
	Иначе
		КошелекДляНакоплений    = Ложь;
		ВидимостьФинансовойЦели = Ложь;
	КонецЕсли;
	ДопПараметрыФормы.Вставить("КошелекДляНакоплений",    КошелекДляНакоплений);
	
	ВалютаКошелька = ?(Объект.КошелекДолг <> Неопределено И ЗначениеЗаполнено(Объект.КошелекДолг.Валюта), Объект.КошелекДолг.Валюта, ДопПараметрыФормы.ВалютаУчета);
	
	КонтролироватьСуммуЧека = ЗначениеЗаполнено(Объект.СуммаЧека);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтаФорма, "", "", "СтатьяРасходаИмущество", "АналитикаСтатьи", "ФормаКоманднаяПанель", Истина);
	
	// Заполнение дополнительных колонок
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм элементов документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Проверка работы с шаблонами
	РаботаСФормамиДокументов.ПодготовитьФормуНаСервереПоРаботеСШаблонами(ЭтаФорма);
	
	Если НЕ ВидимостьФинансовойЦели Тогда
		Для Каждого СтрокаДокумента Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаДокумента.ФинансоваяЦель) И СтрокаДокумента.ФинансоваяЦель <> ДопПараметрыФормы.ОбщаяФинансоваяЦель Тогда
				ВидимостьФинансовойЦели = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0;
	ВидимостьСкидки = Объект.СуммаСкидки <> 0;
	
	// Обслуживание аналитики статей:
	УправлениеРеквизитамиАналитики();
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеМедиафайлов(ЭтотОбъект);
	#КонецОбласти	
	
	// Настройка внешнего вида
	ОбновитьОстатокДенег();
	УправлениеФормой(ЭтотОбъект);
	
	Если Объект.СуммаЧека <> 0 Тогда
		ИнформацияСуммаЧека = ПолучитьНадписьКонтроляЧека(СуммаСтрок, Объект.СуммаЧека, ВалютаКошелька, Элементы.ИнформацияСуммаЧека.Подсказка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()

	// Обслуживание аналитики статей:
	АналитикаСтатей.ЗаполнитьРеквизитыАналитикой(ЭтаФорма);
	
	ТипСтатьиРасходов = Тип("СправочникСсылка.СтатьиРасходов");
	
	Для Каждого СтрокаДокумента Из Объект.Расходы Цикл
		
		СтрокаДокумента.ЕстьКоличество = (СтрокаДокумента.Количество <> 0);
		СтрокаДокумента.КоличественныйУчет = ТипЗнч(СтрокаДокумента.СтатьяРасходаИмущество) = ТипСтатьиРасходов 
												И СтрокаДокумента.СтатьяРасходаИмущество.КоличественныйУчет;
		
		СтрокаДокумента.КартинкаСтроки = ПолучитьКартинкуДляСтатьи(ТипЗнч(СтрокаДокумента.СтатьяРасходаИмущество));
		
		СтрокаДокумента.СуммаДоВычетаСкидки = СтрокаДокумента.Сумма + СтрокаДокумента.Скидка;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Количество) Тогда
			СтрокаДокумента.Цена = Окр(СтрокаДокумента.СуммаДоВычетаСкидки / СтрокаДокумента.Количество, 2,1);
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект            = Форма.Объект;
	Элементы          = Форма.Элементы;
	ДопПараметрыФормы = Форма.ДопПараметрыФормы;
	
	// Обслуживание плановых операций
	ПлановыеОперацииКлиентСервер.ОбновитьИнформациюОСвязиОперацииСРасписанием(Форма);
	
	Элементы.РасходыУказатьФинансовуюЦель.Пометка     = Форма.ВидимостьФинансовойЦели;
	Элементы.РасходыУказатьФинансовуюЦель.Доступность = НЕ Форма.ДопПараметрыФормы.КошелекДляНакоплений;
	
	Элементы.ГруппаФинансоваяЦельОткуда.Видимость = Форма.ДопПараметрыФормы.КошелекДляНакоплений;
	
	Элементы.ГруппаКонтрольСуммыЧека.Видимость         = Форма.КонтролироватьСуммуЧека;
	
	Если Объект.РазделУчета = ДопПараметрыФормы.РазделУчетаДолги Тогда
		Элементы.КошелекДолг.Заголовок = НСтр("ru = 'Покупка в долг'") ;
	Иначе
		Элементы.КошелекДолг.Заголовок = НСтр("ru = 'Расход из кошелька'") ;
	КонецЕсли; 
	
	Форма.СуммаСтрок = (Объект.Расходы.Итог("Сумма"));
	
	Форма.ВидимостьСкидки = Объект.СуммаСкидки <> 0;
	ЗаголовокСуммы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
		?(Форма.ВидимостьСкидки, НСтр("ru = 'К оплате'"), НСтр("ru = 'Сумма'")),
		Форма.ВалютаКошелька); 
	Если Элементы.РасходыСумма.Заголовок <> ЗаголовокСуммы Тогда
		Элементы.РасходыСумма.Заголовок = ЗаголовокСуммы;
	КонецЕсли;

	Форма.ВсегоДоВычета = Объект.Расходы.Итог("СуммаДоВычетаСкидки");
	Если Объект.СуммаСкидки = 0 Тогда
		Форма.ТекстПроцентаСкидки = "";
	Иначе
		ПроцентСкидки = ?(Форма.ВсегоДоВычета = 0, 0, (Объект.СуммаСкидки / Форма.ВсегоДоВычета) * 100);
		Форма.ТекстПроцентаСкидки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(%1 %2)",
						Формат(ПроцентСкидки, "ЧДЦ=1; ЧГ=") + " %",
		                НСтр("ru = 'от общей суммы'"));
	КонецЕсли; 	
	
	РаботаСФормамиДокументовКлиентСервер.ОбновитьЭлементыФормыПоСостояниюОперации(Форма);
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаСервере
Процедура УправлениеРеквизитамиАналитики(ИспользоватьЗначенияПоУмолчанию = Ложь, ПотеряДанныхРазрешена = Ложь)

	АналитикаСтатей.УправлениеФормой(ЭтаФорма, ИспользоватьЗначенияПоУмолчанию, ПотеряДанныхРазрешена);

КонецПроцедуры

// Обслуживание плановых операций
&НаСервере
Процедура ЗаполнитьДанныеПоШаблону(СсылкаНаШаблон)
	
	РаботаСФормамиДокументов.ОбновитьФормуОперацииПоШаблону(ЭтотОбъект, СсылкаНаШаблон);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтаФорма, "", "", "СтатьяРасходаИмущество", "АналитикаСтатьи", "ФормаКоманднаяПанель", Истина);
	
	// Заполнение дополнительных колонок и реквизитов
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм элементов документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Обслуживание аналитики статей:
	УправлениеРеквизитамиАналитики();
	
	// Настройка внешнего вида
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКартинкуДляСтатьи(Знач ТипЗначенияСтатьи)

	Если ТипЗначенияСтатьи = Тип("СправочникСсылка.СтатьиРасходов") Тогда
		Возврат БиблиотекаКартинок.СтатьиРасходов16;
	ИначеЕсли ТипЗначенияСтатьи = Тип("СправочникСсылка.Имущество") Тогда
		Возврат БиблиотекаКартинок.Имущество16;
	КонецЕсли; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНадписьКонтроляЧека(Знач СуммаСтрок, Знач СуммаЧека, Знач ВалютаКошелька, ТекстПодсказки)//, ЦветТекста)

	СтрокаРезультата = "";
	
	Если СуммаЧека = 0 Тогда
		СтрокаРезультата = НСтр("ru = 'Укажите итоговую сумму к оплате за вычетом скидки'") ;
		ТекстПодсказки = НСтр("ru = 'Программа сравнит сумму всех строк операции с суммой чека и покажет разницу'");
	ИначеЕсли СуммаСтрок > СуммаЧека Тогда
		СтрокаРезультата =
			НСтр("ru = 'Суммы в строках больше, чем в чеке на %1 %2'");
		СтрокаРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаРезультата, Формат(СуммаСтрок - СуммаЧека, "ЧДЦ=2"), ВалютаКошелька);
		ТекстПодсказки = НСтр("ru = 'Очевидно, в операции есть лишние строки или какая-то сумма больше указанной в чеке'");
	ИначеЕсли СуммаСтрок = СуммаЧека Тогда
		СтрокаРезультата = НСтр("ru = 'итог по чеку совпал с суммой строк'") ;
		ТекстПодсказки = НСтр("ru = 'Содержание чека полностью учтено в операции'");
	ИначеЕсли СуммаСтрок < СуммаЧека Тогда
		СтрокаРезультата =
			НСтр("ru = 'Сумма чека больше сумм в строках на %1 %2'");
		СтрокаРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаРезультата, Формат(СуммаЧека - СуммаСтрок, "ЧДЦ=2"), ВалютаКошелька);
		ТекстПодсказки = НСтр("ru = 'Очевидно, в операции учтены не все строки из чека, или какая-то сумма меньше указанной в чеке'");
	КонецЕсли;
	
	Возврат СтрокаРезультата;

КонецФункции
 
&НаСервере
Процедура КошелекДолгПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.КошелекДолг) И Объект.КошелекДолг.ЭтоГруппа Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выберите элемент, а не группу!'"), , "Объект.КошелекДолг");
		ОписаниеТипов = Новый ОписаниеТипов(ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(Объект.КошелекДолг)));
		Объект.КошелекДолг = ОписаниеТипов.ПривестиЗначение(Неопределено);
	КонецЕсли;

	Если ТипЗнч(Объект.КошелекДолг) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		ДопПараметрыФормы.КошелекДляНакоплений    = Объект.КошелекДолг.ИспользоватьДляНакоплений;
		Объект.РазделУчета      = ?(ДопПараметрыФормы.КошелекДляНакоплений, ПланыСчетов.РазделыУчета.Накопления, ПланыСчетов.РазделыУчета.СвободныеДеньги);
		ВидимостьФинансовойЦели = ДопПараметрыФормы.КошелекДляНакоплений; 
	Иначе
		Объект.РазделУчета      = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов;
		ДопПараметрыФормы.КошелекДляНакоплений    = Ложь;
		ВидимостьФинансовойЦели = Ложь;
	КонецЕсли; 
	
	Если НЕ ВидимостьФинансовойЦели Тогда
		Для Каждого СтрокаДокумента Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаДокумента.ФинансоваяЦель) И СтрокаДокумента.ФинансоваяЦель <> ДопПараметрыФормы.ОбщаяФинансоваяЦель Тогда
				ВидимостьФинансовойЦели = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	ВалютаКошелька = ?(Объект.КошелекДолг <> Неопределено, Объект.КошелекДолг.Валюта, ДопПараметрыФормы.ВалютаУчета);
	
	ОбновитьОстатокДенег();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстИнформацияСуммаЧека()

	Элементы.РасходыСумма.Заголовок = "Сумма (" + ?(ЗначениеЗаполнено(Объект.КошелекДолг), ВалютаКошелька, ДопПараметрыФормы.ВалютаУчета) + ")";
	СуммаСтрок = (Объект.Расходы.Итог("Сумма"));
	ИнформацияСуммаЧека = ПолучитьНадписьКонтроляЧека(СуммаСтрок, 
				Объект.СуммаЧека, ВалютаКошелька, Элементы.ИнформацияСуммаЧека.Подсказка);

КонецПроцедуры

&НаСервере
Процедура СтатьяРасходаИмуществоПриИзмененииСервер(ВыделенныеСтроки, ПересчитыватьСуммы = Ложь)

	МассивСтрок = Новый Массив;
	Если ТипЗнч(ВыделенныеСтроки) = Тип("Массив") Тогда
		Для Каждого ИДстроки Из ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Расходы.НайтиПоИдентификатору(ИДСтроки));
		КонецЦикла; 
	Иначе
		МассивСтрок.Добавить(Объект.Расходы.НайтиПоИдентификатору(ВыделенныеСтроки));
	КонецЕсли;
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	Иначе
		НовоеЗначениеСтатьи = ?(МассивСтрок[0].СтатьяРасходаИмущество = Неопределено, Справочники.СтатьиРасходов.ПустаяСсылка(), МассивСтрок[0].СтатьяРасходаИмущество);
	КонецЕсли; 
	
	Для Каждого СтрокаДокумента Из МассивСтрок Цикл
		
		Если СтрокаДокумента <> Неопределено Тогда
			
			Если СтрокаДокумента.СтатьяРасходаИмущество <> НовоеЗначениеСтатьи Тогда
				СтрокаДокумента.СтатьяРасходаИмущество = НовоеЗначениеСтатьи;
			КонецЕсли; 
			
			// Обслуживание аналитики статей:
			Если ТипЗнч(СтрокаДокумента.СтатьяРасходаИмущество) = Тип("СправочникСсылка.СтатьиРасходов") Тогда
				АналитикаСтатей.ПриИзмененииСтатьиВТабличнойЧасти(ЭтаФорма, СтрокаДокумента.СтатьяРасходаИмущество, "Расходы", СтрокаДокумента.ПолучитьИдентификатор());
			Иначе
				СтрокаДокумента.АналитикаСтатьи = Неопределено;
			КонецЕсли; 
			
			// Картинка
			СтрокаДокумента.КартинкаСтроки = ПолучитьКартинкуДляСтатьи(ТипЗнч(СтрокаДокумента.СтатьяРасходаИмущество));
			
			// Количество и цена
			Если ТипЗнч(СтрокаДокумента.СтатьяРасходаИмущество) = Тип("СправочникСсылка.СтатьиРасходов") Тогда
				
				Если НЕ СтрокаДокумента.СтатьяРасходаИмущество.КоличественныйУчет Тогда
					СтрокаДокумента.Количество = 0;
					СтрокаДокумента.Цена = 0;
				Иначе
					Если СтрокаДокумента.Количество = 0 Тогда
						СтрокаДокумента.Количество = 1;
					КонецЕсли; 
					ЗначенияАналитики = ПолучитьЗначенияАналитикиПоСтроке(СтрокаДокумента, ЭтотОбъект);
					Цена = ПолучитьЦеныПоСтатьеИАналитике(СтрокаДокумента.СтатьяРасходаИмущество, ЗначенияАналитики, Объект.Дата, ВалютаКошелька, ДопПараметрыФормы.ВалютаУчета);
					Если ЗначениеЗаполнено(Цена) Тогда
						ПересчитыватьСуммы    = Истина;
						СтрокаДокумента.Цена  = Цена;
						СтрокаДокумента.Сумма = СтрокаДокумента.Цена * СтрокаДокумента.Количество;
					Иначе
						СтрокаДокумента.Цена = СтрокаДокумента.Сумма;
					КонецЕсли; 
				КонецЕсли;
				СтрокаДокумента.СуммаДоВычетаСкидки = СтрокаДокумента.Сумма + СтрокаДокумента.Скидка;
				СтрокаДокумента.ЕстьКоличество = (СтрокаДокумента.Количество <> 0);
				СтрокаДокумента.КоличественныйУчет = СтрокаДокумента.СтатьяРасходаИмущество.КоличественныйУчет;
				ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0 
											ИЛИ СтрокаДокумента.ЕстьКоличество ИЛИ СтрокаДокумента.КоличественныйУчет;
			Иначе
				СтрокаДокумента.ЕстьКоличество = 0;
				СтрокаДокумента.КоличественныйУчет = 0;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	

КонецПроцедуры

&НаСервере
Процедура ВключитьКоличественныйУчетДляСтатьиРасходовСервер(Знач СтатьяРасходов)
	
	СтатьяРасходовОбъект = СтатьяРасходов.ПолучитьОбъект();
	СтатьяРасходовОбъект.КоличественныйУчет = Истина;
	СтатьяРасходовОбъект.Записать();
	
	МассивСтрок = Объект.Расходы.НайтиСтроки(Новый Структура("СтатьяРасходаИмущество", СтатьяРасходов));
	Для каждого Строка Из МассивСтрок Цикл
		СтатьяРасходаИмуществоПриИзмененииСервер(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиПриИзмененииСидки()

	СуммаСтрок = Объект.Расходы.Итог("Сумма");
	ДопПараметрыФормы.Вставить("ПрежняяСуммаСкидки", Объект.СуммаСкидки);
	ИнформацияСуммаЧека = ПолучитьНадписьКонтроляЧека(СуммаСтрок, Объект.СуммаЧека, ВалютаКошелька, Элементы.ИнформацияСуммаЧека.Подсказка);

КонецПроцедуры

&НаКлиенте
Процедура ЦенаКоличествоПриИзменении(ИмяИзмененногоПоля)

	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	ИзмененоКоличество = (ИмяИзмененногоПоля = "Количество");
	ИзмененаЦена       = (ИмяИзмененногоПоля = "Цена");
	НовоеЗначение      = ?(ИзмененоКоличество, ТекущиеДанные.Количество, ТекущиеДанные.Цена);
	
	МассивСтрок = Элементы.Расходы.ВыделенныеСтроки;
	Для Каждого ИДСтроки Из МассивСтрок Цикл
		
		СтрокаДокумента = Объект.Расходы.НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаДокумента <> Неопределено Тогда
			
			Если СтрокаДокумента.КоличественныйУчет = 0 И СтрокаДокумента.Количество = 0 Тогда
				Продолжить;
			ИначеЕсли ИзмененоКоличество Тогда
				СтрокаДокумента.Количество = НовоеЗначение;
			Иначе
				СтрокаДокумента.Цена = НовоеЗначение;
			КонецЕсли; 
						
			Если СтрокаДокумента.Количество <> 0 И СтрокаДокумента.Цена = 0 И ИзмененоКоличество Тогда
				СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
			ИначеЕсли СтрокаДокумента.Количество = 0 И СтрокаДокумента.Цена <> 0 Тогда
				Если ИзмененоКоличество Тогда
					СтрокаДокумента.Цена = 0;
				Иначе
					СтрокаДокумента.Количество = СтрокаДокумента.СуммаДоВычетаСкидки / СтрокаДокумента.Цена;
				КонецЕсли;
			Иначе
				СтрокаДокумента.СуммаДоВычетаСкидки = СтрокаДокумента.Количество * СтрокаДокумента.Цена;
			КонецЕсли;
			
			СтрокаДокумента.Сумма = СтрокаДокумента.СуммаДоВычетаСкидки - СтрокаДокумента.Скидка;
			СтрокаДокумента.ЕстьКоличество = (СтрокаДокумента.Количество <> 0);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПересчитатьСуммуСкидки("СуммаДоВычетаСкидки");

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСкидки(ИмяИзмененногоРеквизита)

	ВсегоДоВычета = Объект.Расходы.Итог("СуммаДоВычетаСкидки");
	ВсегоДоВычетаСкидокВведенныхВручную = 0;
	СуммаСкидкиВведеннойВручную = 0;
	КоличествоСтрокСРучнойСкидкой = 0;
	Для Каждого СтрокаРасхода Из Объект.Расходы Цикл
		Если СтрокаРасхода.СкидкаВведенаВручную Тогда
			СуммаСкидкиВведеннойВручную = СуммаСкидкиВведеннойВручную + СтрокаРасхода.Скидка;
			ВсегоДоВычетаСкидокВведенныхВручную = ВсегоДоВычетаСкидокВведенныхВручную + СтрокаРасхода.СуммаДоВычетаСкидки;
			КоличествоСтрокСРучнойСкидкой = КоличествоСтрокСРучнойСкидкой + 1;
		Иначе
			СтрокаРасхода.Скидка = 0;
		КонецЕсли; 
	КонецЦикла;
	
	// В ситуции, когда все строки с автоматической скидкой удалены, а сума "ручной" скидки равна 0,
	//нужно убрать признак ручного изменения со всех строк
	Если КоличествоСтрокСРучнойСкидкой = Объект.Расходы.Количество() И СуммаСкидкиВведеннойВручную = 0 Тогда
		Для Каждого СтрокаРасхода Из Объект.Расходы Цикл
			СтрокаРасхода.СкидкаВведенаВручную  = Ложь;
		КонецЦикла;
	КонецЕсли; 
	
	Если Объект.Расходы.Итог("СуммаДоВычетаСкидки") < 0 Или Объект.Расходы.Итог("Сумма") < 0 Тогда
		// сторно строк
		ВсегоДоВычетаСкидокАвтоматических = 0;
	Иначе
		ВсегоДоВычетаСкидокАвтоматических = Объект.Расходы.Итог("СуммаДоВычетаСкидки") - ВсегоДоВычетаСкидокВведенныхВручную;
	КонецЕсли;
	
	Если ИмяИзмененногоРеквизита = "ВсегоСуммаСкидки" Тогда 
		
		// Изменили сумму скидки по операции. Проверяем корректность нового значения:
		Если Объект.СуммаСкидки = 0 Тогда
			ОчиститьСкидкуВСтроках();
			ДопПараметрыФормы.Вставить("ПрежняяСуммаСкидки", 0);
			ОбновитьНадписиПриИзмененииСидки();
			Возврат;
		ИначеЕсли НЕ ПроверитьКорректностьИзмененияВсегоСуммаСкидки(ВсегоДоВычета, СуммаСкидкиВведеннойВручную, ВсегоДоВычетаСкидокВведенныхВручную) Тогда
			ОбновитьНадписиПриИзмененииСидки();
			Возврат;
		КонецЕсли; 
		
	Иначе
		
		// Уточним сумму скидки документа:
		Объект.СуммаСкидки = Мин(ВсегоДоВычета, Макс(СуммаСкидкиВведеннойВручную, Объект.СуммаСкидки));
		
	КонецЕсли;
	
	//Выполняем пересчет скидки по строкам:
	Если ВсегоДоВычетаСкидокАвтоматических <> 0 Тогда
		МаксимальнаяСумма = 0;
		СтрокаМаксимальнойСуммы = Неопределено;
		СкидкаАвтоматом = Объект.СуммаСкидки - СуммаСкидкиВведеннойВручную;
		НеРаспределено  = +СкидкаАвтоматом;
		Для Каждого СтрокаРасхода Из Объект.Расходы Цикл
			Если СтрокаРасхода.СкидкаВведенаВручную Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаРасхода.Скидка = Окр(СтрокаРасхода.СуммаДоВычетаСкидки * СкидкаАвтоматом / ВсегоДоВычетаСкидокАвтоматических, 2,1);
			СтрокаРасхода.Сумма = СтрокаРасхода.СуммаДоВычетаСкидки - СтрокаРасхода.Скидка;
			НеРаспределено = НеРаспределено - СтрокаРасхода.Скидка;
			Если СтрокаРасхода.Сумма > МаксимальнаяСумма Тогда
				СтрокаМаксимальнойСуммы = СтрокаРасхода;
				МаксимальнаяСумма = СтрокаРасхода.Сумма;
			КонецЕсли; 
		КонецЦикла; 
		Если НеРаспределено <> 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Скидка = СтрокаМаксимальнойСуммы.Скидка + НеРаспределено;
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.СуммаДоВычетаСкидки - СтрокаМаксимальнойСуммы.Скидка;
		КонецЕсли; 
	КонецЕсли;
	
	// Обновляем итоги
	Объект.СуммаОплаты = Объект.Расходы.Итог("Сумма");
	Объект.СуммаСкидки = Объект.Расходы.Итог("Скидка");
	ВсегоДоВычета      = Объект.Расходы.Итог("СуммаДоВычетаСкидки");

	НоваяВидимостьСкидки = Объект.СуммаСкидки <> 0;
	Если ВидимостьСкидки <> НоваяВидимостьСкидки ИЛИ ДопПараметрыФормы.ПрежняяСуммаСкидки <> Объект.СуммаСкидки Тогда
		ВидимостьСкидки = НоваяВидимостьСкидки;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 
	
	ОбновитьНадписиПриИзмененииСидки();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьИзмененияВсегоСуммаСкидки(ВсегоДоВычета, СуммаСкидкиВведеннойВручную, ВсегоДоВычетаСкидокВведенныхВручную)

	// Выполняем проверку возможности / корректности применяемой скидки
	СкидкаВозможна = Истина;
	ТекстСообщения = "";
	
	// Скидка возможна только при наличии хотя бы одной строки
	Если Объект.Расходы.Количество() = 0 И Объект.СуммаСкидки <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'В операции нет строк, для применения скидки'"); 
		СкидкаВозможна = Ложь;
		Объект.СуммаСкидки = 0;
	КонецЕсли; 
	
	// Скидка не может быть меньше суммы скидок, введенных вручную
	Если Объект.СуммаСкидки < СуммаСкидкиВведеннойВручную Тогда
		ТекстСообщения = НСтр("ru = 'Сумма скидки автоматически увеличена, т.к. она не может быть меньше суммы всех скидок, введенных вручную.'"); 
		СкидкаВозможна = Истина;
		Объект.СуммаСкидки = СуммаСкидкиВведеннойВручную;
	КонецЕсли; 
	
	// Скидка не может превышать сумму всех расходов
	Если Объект.СуммаСкидки > ВсегоДоВычета Тогда
		ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", Символы.ПС) 
			+ НСтр("ru = 'Сумма скидки автоматически уменьшена, т.к. она не может быть больше суммы всех расходов.'"); 
		СкидкаВозможна = Истина;
		Объект.СуммаСкидки = ВсегоДоВычета;
	КонецЕсли; 
	
	// Итог автоматических скидок не может превышать сумму расхода по строкам с автоматическими скидками
	СуммаАвтоСкидок = Объект.СуммаСкидки - СуммаСкидкиВведеннойВручную;
	ДоВычетаАвтоСкидок = ВсегоДоВычета - ВсегоДоВычетаСкидокВведенныхВручную;
	Если СуммаАвтоСкидок > ДоВычетаАвтоСкидок Тогда
		ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", Символы.ПС) 
			+ НСтр("ru = 'Сумма скидки автоматически уменьшена, т.к. она не может быть больше суммы расходов.'"); 
		СкидкаВозможна = Истина;
		Объект.СуммаСкидки = СуммаСкидкиВведеннойВручную + ДоВычетаАвтоСкидок;
	КонецЕсли; 
	
	
	Если ТекстСообщения <> "" Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения, ,
			//"Объект.СуммаСкидки"
			);
	КонецЕсли; 

	Возврат СкидкаВозможна;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииСуммыДоВычета(ИДТекущейСтроки = Неопределено)

	// Если количество есть, но кол. учет по статье не включен, значит он был включен раньше. Введенное ранее кол-во мы не очищаем.
	// Поэтому кол-во никогда не обнуляем. А если оно введено, пересчитываем цену.
	
	Если ИДТекущейСтроки = Неопределено Тогда
		ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
		МассивСтрок = Элементы.Расходы.ВыделенныеСтроки;
	Иначе
		ТекущиеДанные = Объект.Расходы.НайтиПоИдентификатору(ИДТекущейСтроки);
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ИДТекущейСтроки);
	КонецЕсли; 
	НовоеЗначение = ТекущиеДанные.СуммаДоВычетаСкидки;
	
	Для Каждого ИДСтроки Из МассивСтрок Цикл
		
		СтрокаДокумента = Объект.Расходы.НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаДокумента.КоличественныйУчет Тогда
			Если СтрокаДокумента.Количество = 0 И СтрокаДокумента.Цена <> 0 Тогда
				СтрокаДокумента.Количество = СтрокаДокумента.СуммаДоВычетаСкидки / СтрокаДокумента.Цена;
			ИначеЕсли СтрокаДокумента.Количество <> 0 Тогда
				СтрокаДокумента.Цена = СтрокаДокумента.СуммаДоВычетаСкидки / СтрокаДокумента.Количество;
			КонецЕсли; 
		Иначе
			Если СтрокаДокумента.Количество <> 0 Тогда
				СтрокаДокумента.Цена = СтрокаДокумента.СуммаДоВычетаСкидки / СтрокаДокумента.Количество;
			КонецЕсли; 
		КонецЕсли;
		
		СтрокаДокумента.Сумма = СтрокаДокумента.СуммаДоВычетаСкидки - СтрокаДокумента.Скидка;
		СтрокаДокумента.ЕстьКоличество = (СтрокаДокумента.Количество <> 0);
		
	КонецЦикла; 
	
	ПересчитатьСуммуСкидки("Сумма");

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСкидкуВСтроках()

	Для Каждого СтрокаРасхода Из Объект.Расходы Цикл
		СтрокаРасхода.Скидка = 0;
		СтрокаРасхода.Сумма = СтрокаРасхода.СуммаДоВычетаСкидки;
		СтрокаРасхода.СкидкаВведенаВручную = Ложь;
	КонецЦикла;
	Объект.СуммаСкидки = 0;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначенияАналитикиПоСтроке(СтрокаОперации, Форма)

	Результат = Новый Соответствие;
	Если Форма.ИспользуетсяАналитикаСтатей Тогда
		
		ПоляАналитики  = Форма.НаборАналитики;
		Для Каждого СтрокаНабора Из ПоляАналитики Цикл
			Если СтрокаНабора.ИспользоватьДляРасхода Тогда
				Если СтрокаНабора.РедактироватьВШапке Тогда
					ЗначениеАналитики = Форма[СтрокаНабора.ИДАналитики];
				Иначе
					ЗначениеАналитики = СтрокаОперации["Расходы" + СтрокаНабора.ИДАналитики];
				КонецЕсли; 
				Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
					Результат.Вставить(СтрокаНабора.ВидАналитики, ЗначениеАналитики);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 

	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЦеныПоСтатьеИАналитике(Статья, АналитикаСтатьи, МаксимальнаяДата, Валюта, ВалютаУчета)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасхода", Статья);
	Запрос.УстановитьПараметр("МаксимальнаяДата", КонецДня(МаксимальнаяДата));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОборотыЦен.СтатьяРасхода,
	|	ОборотыЦен.Валюта,
	|	ОборотыЦен.Количество,
	|	ОборотыЦен.ВалютнаяСумма,
	|	ОборотыЦен.ВалютнаяСуммаСкидки
	|ИЗ
	|	РегистрНакопления.КоличественныеОборотыПоСтатьямРасходов КАК ОборотыЦен
	|ГДЕ
	|	ОборотыЦен.СтатьяРасхода = &СтатьяРасхода
	|	И ОборотыЦен.Период <= &МаксимальнаяДата
	|   //УсловиеАналитики
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОборотыЦен.Период УБЫВ";
	
	Если ТипЗнч(АналитикаСтатьи) = Тип("Соответствие") Тогда
		Счетчик = "1";
		Для Каждого КлючИЗначение Из АналитикаСтатьи Цикл
			
			Запрос.УстановитьПараметр("ВидАналитики" + Счетчик, КлючИЗначение.Ключ);
			Запрос.УстановитьПараметр("ЗначениеАналитики" + Счетчик, КлючИЗначение.Значение);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеАналитики",
			"
			|	И ОборотыЦен.АналитикаСтатьи.ВидыИЗначенияАналитики.ВидАналитики = &ВидАналитики" + Счетчик + "
			|	И ОборотыЦен.АналитикаСтатьи.ВидыИЗначенияАналитики.ЗначениеАналитики = &ЗначениеАналитики" + Счетчик + "
			|   //УсловиеАналитики
			|");
			Счетчик = Счетчик + "1";
		КонецЦикла; 
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Цена = ?(ЗначениеЗаполнено(Выборка.Количество), Выборка.ВалютнаяСумма / Выборка.Количество, Выборка.ВалютнаяСумма);
		Если ЗначениеЗаполнено(Цена) Тогда
			Если Выборка.Валюта = Валюта Тогда
				Возврат Окр(Цена, 2, 1);
			Иначе
				Если Валюта = ДопПараметрыФормы.ВалютаУчета Тогда
					КурсИКратностьОперации = Новый Структура("Курс,Кратность", 1, 1);
				Иначе
					КурсИКратностьОперации = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, МаксимальнаяДата, ДопПараметрыФормы.ВалютаУчета);
				КонецЕсли; 
				Если  Выборка.Валюта = ДопПараметрыФормы.ВалютаУчета Тогда
					КурсИКратностьВыборки = Новый Структура("Курс,Кратность", 1, 1);
				Иначе
					КурсИКратностьВыборки = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, МаксимальнаяДата, ДопПараметрыФормы.ВалютаУчета);
				КонецЕсли; 
				Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, Выборка.Валюта, Валюта,
						КурсИКратностьВыборки.Курс, КурсИКратностьОперации.Курс, КурсИКратностьВыборки.Кратность, КурсИКратностьОперации.Кратность);
			КонецЕсли; 
		Иначе
			Возврат 0;
		КонецЕсли; 
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура ОбработкаПодбораСтатей(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура")
		ИЛИ НЕ РезультатПодбора.Свойство("АдресТаблицыВыбора") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВРасходыСтатьиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВРасходыСтатьиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		Если ЗначениеЗаполнено(СтрокаПодбора.СтатьяРасхода) Тогда
			СтрокаРасхода = Объект.Расходы.Добавить();
			СтрокаРасхода.СтатьяРасходаИмущество      = СтрокаПодбора.СтатьяРасхода;
			СтрокаРасхода.КартинкаСтроки      = ПолучитьКартинкуДляСтатьи(ТипЗнч(СтрокаРасхода.СтатьяРасходаИмущество));
			СтрокаРасхода.КомментарийСтроки   = СтрокаПодбора.КомментарийСтроки;
			СтрокаРасхода.Сумма               = СтрокаПодбора.Сумма;
			
			СтрокаРасхода.КоличественныйУчет  = СтрокаПодбора.КоличественныйУчет;
			Если СтрокаРасхода.КоличественныйУчет <> 0 Тогда
				СтрокаРасхода.Количество  = СтрокаПодбора.Количество;
				Если НЕ ЗначениеЗаполнено(СтрокаПодбора.Цена) Тогда
					ЗначенияАналитики   = ПолучитьЗначенияАналитикиПоСтроке(СтрокаРасхода, ЭтотОбъект);
					СтрокаРасхода.Цена  = ПолучитьЦеныПоСтатьеИАналитике(СтрокаРасхода.СтатьяРасходаИмущество, ЗначенияАналитики, Объект.Дата, ВалютаКошелька, ДопПараметрыФормы.ВалютаУчета);
					СтрокаРасхода.Сумма = СтрокаРасхода.Цена * ?(СтрокаРасхода.Количество = 0, 1, СтрокаРасхода.Количество);
					СтрокаРасхода.Скидка = 0;
				Иначе
					СтрокаРасхода.Цена        = СтрокаПодбора.Цена;
				КонецЕсли; 
			КонецЕсли; 
			СтрокаРасхода.ЕстьКоличество = (СтрокаРасхода.Количество <> 0);
			СтрокаРасхода.СуммаДоВычетаСкидки = СтрокаПодбора.Сумма + СтрокаПодбора.Скидка;
			
			АналитикаСтатей.ПриИзмененииСтатьиВТабличнойЧасти(ЭтаФорма, СтрокаРасхода.СтатьяРасходаИмущество, "Расходы", СтрокаРасхода.ПолучитьИдентификатор());
			
		КонецЕсли; 
	КонецЦикла; 
	
	ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0;

КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура НастройкаКолонокАналитикиЗавершение(НастройкиИзменены) Экспорт

	Если НастройкиИзменены Тогда
		УправлениеРеквизитамиАналитики(Истина, Истина);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура РасходыВыборЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВключитьКоличественныйУчетДляСтатьиРасходовСервер(ДополнительныеПараметры.ТекущиеДанные.СтатьяРасходаИмущество);
	КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура УказатьФинансовуюЦельЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да  Тогда 
		Для Каждого СтрокаДокументов Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаДокументов.ФинансоваяЦель) Тогда
				СтрокаДокументов.ФинансоваяЦель = Неопределено;
			КонецЕсли; 
		КонецЦикла; 
		ВидимостьФинансовойЦели = НЕ ВидимостьФинансовойЦели;
		Элементы.РасходыУказатьФинансовуюЦель.Пометка = ВидимостьФинансовойЦели;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеСтрокиТаблицы()

	МассивСтрок = Элементы.Расходы.ВыделенныеСтроки;
	Если МассивСтрок.Количество() = 0 Тогда
		
		// Нет выделенных строк
		Возврат Неопределено;
		
	ИначеЕсли МассивСтрок.Количество() = 1 Тогда
		
		// Выделена одна строка
		Возврат МассивСтрок[0];
		
	Иначе
		
		// Выделено несколько строк. Текущая строка будет первой в массиве
		ИндексЭлемента = МассивСтрок.Найти(Элементы.Расходы.ТекущаяСтрока);
		Если ИндексЭлемента <> Неопределено И ИндексЭлемента > 0 Тогда
			МассивСтрок.Удалить(ИндексЭлемента);
			МассивСтрок.Вставить(0, Элементы.Расходы.ТекущаяСтрока);
		КонецЕсли; 
		
		Возврат МассивСтрок;
		
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ОбновитьОстатокДенег()

	Если ТипЗнч(Объект.КошелекДолг) = Тип("СправочникСсылка.КошелькиИСчета") И Объект.КошелекДолг.ИспользоватьДляНакоплений
		И ЗначениеЗаполнено(Объект.ФинансоваяЦельОткуда) Тогда
		ФинЦель = Объект.ФинансоваяЦельОткуда;
		ИмяЭлементаФинцели = "НадписьОстатокНакоплений"
	Иначе
		ФинЦель = Неопределено;
		ИмяЭлементаФинцели = "";
		Элементы.НадписьОстатокНакоплений.Заголовок = "";
	КонецЕсли;
	
	РаботаСФормамиДокументов.ОбновитьОстатокПоОбъектуУчета(ЭтотОбъект, "НадписьОстатокДенег",
			?(ТипЗнч(Объект.КошелекДолг) = Тип("СправочникСсылка.Долги"), ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов, ПланыСчетов.РазделыУчета.Деньги),
			Объект.КошелекДолг, "ОстатокДоОперации", ФинЦель, ИмяЭлементаФинцели);

КонецПроцедуры

&НаКлиенте
Процедура ФинансоваяЦельОткудаПриИзменении(Элемент)
	
	ФинцельОткудаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансоваяЦельОткудаОчистка(Элемент, СтандартнаяОбработка)
	
	ФинцельОткудаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансоваяЦельОткудаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипВыбранного = ТипЗнч(ВыбранноеЗначение);
	
	Если ТипВыбранного = Тип("Строка") Тогда
		
		ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ФинцельОткудаПриИзмененииСервер()

	ОбновитьОстатокДенег();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки()
	
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаДокумента Из Объект.Расходы Цикл
		Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяРасходаИмущество)
			И Не ЗначениеЗаполнено(СтрокаДокумента.Сумма)
			И Не ЗначениеЗаполнено(СтрокаДокумента.Количество)
			И Не ЗначениеЗаполнено(СтрокаДокумента.КомментарийСтроки)
			Тогда
			СтрокиКУдалению.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из СтрокиКУдалению Цикл
		Объект.Расходы.Удалить(СтрокаДокумента);
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

