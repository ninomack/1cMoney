&НаКлиенте
Перем ДополнительныеПараметрыНаКлиенте Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	#Область ПрикрепленныеФайлы
	МедиаФайлы = ПрикрепленныеФайлыСервер.ПрочитатьСписокФайлов(Объект.Ссылка);
	#КонецОбласти
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыСервер.ОбработатьИЗаписатьДанныеМультимедиа(МедиаФайлы, ТекущийОбъект.Ссылка);
	#КонецОбласти 
	
	ЗаполнитьДобавленныеКолонки();
	РаботаСФормамиДокументовКлиентСервер.ОбновитьСостояниеОперации(ЭтотОбъект);
	ПараметрыСеанса.ДатаПоследнейОперации = ТекущийОбъект.Дата;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Записана операция", Новый Структура("Дата, ВидДокумента, Ссылка, ЭтоШаблон, ВладелецФормы", 
			Объект.Дата, "Доход", Объект.Ссылка, Объект.ЭтоШаблон, 
			?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено)));
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обслуживание плановых операций
	ПлановыеОперации.ПроверкаПлановПередЗаписьюДокумента(ТекущийОбъект, ПараметрыЗаписи, ЭтотОбъект);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записана операция" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ФормаВладельца = ЭтаФорма.УникальныйИдентификатор И Параметр.ЭтоШаблон <> Объект.ЭтоШаблон Тогда
			ЗаполнитьДанныеПоШаблону(Параметр.Ссылка);
		КонецЕсли;
	КонецЕсли; 
		
	#Область ПрикрепленныеФайлы
	Если (ПрикрепленныеФайлыКлиент.ЭтоПрикреплениеФайла(ЭтаФорма, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиент.ДобавитьФайлВСписокФормы(ЭтотОбъект, Параметр); 
	КонецЕсли; 
	#КонецОбласти
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//удаление пустых строк
	УдалитьПустыеСтроки();
	
	// Обслуживание плановых операций
	ПлановыеОперацииКлиент.ПередЗаписьюДокумента(ЭтаФорма, Отказ, ПараметрыЗаписи);
	// Общий функционал перед записью документов
	ОбслуживаниеДокументовКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Общий функционал перед записью документов
	ОбслуживаниеДокументовКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И Открыта() Тогда
		Закрыть(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	РаботаСФормамиДокументовКлиентСервер.ОбновитьЗаголовкиКомандФормы(ЭтотОбъект);
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИнформацияОШаблонеНажатие(Элемент, СтандартнаяОбработка)
	
	ПлановыеОперацииКлиент.ИнформацияОШаблонеНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Доход");
	
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИзменитьРасписание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПлановыеОперацииКлиент.ОткрытьРедакторРасписания(ЭтаФорма);
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиВШапке(Элемент)
	
	АналитикаСтатейКлиент.ПриИзмененииАналитикиВШапке(ЭтаФорма, Элемент);
	
КонецПроцедуры

#Область ПрикрепленныеФайлы

&НаКлиенте
Процедура ПредставлениеФайловОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ПрикрепленныеФайлыКлиент.ОбработчикНажатияНаПредставлениеФайлов(ЭтотОбъект, СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

#КонецОбласти 


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДоходы

&НаКлиенте
Процедура ДоходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.Доходы.Количество() > 1 Тогда
			СтрокаШаблон = Объект.Доходы[Объект.Доходы.Количество() - 2];
			ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
			ТекущиеДанные.Кошелек = СтрокаШаблон.Кошелек;
		ИначеЕсли Объект.Доходы.Количество() = 1 Тогда
			Элементы.Доходы.ТекущиеДанные.Кошелек = КошелекПоУмолчанию;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПриИзменении(Элемент)
	
	ВидимостьКолонкиКурса = Объект.Доходы.Итог("ДоступностьКурса") > 0;
	Объект.СуммаОперации = Объект.Доходы.Итог("СуммаВВалютеОперации");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Обслуживание аналитики статей:
	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяДохода) Тогда
		СтатьяПриИзмененииСервер(Элементы.Доходы.ТекущиеДанные.СтатьяДохода);
	КонецЕсли;
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПриОкончанииРедактированияСтрокиТабличнойЧасти(ЭтаФорма, Ложь, "Доходы", ТекущиеДанные);
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПослеУдаления(Элемент)
	
	// Обслуживание аналитики статей:
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПослеУдаленияСтрокиТабличнойЧасти(ЭтаФорма, Ложь, "Доходы");
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
	ОбновитьВалютуПоКошелькам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыКошелекПриИзменении(Элемент)
	
	ДоходыКошелекПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыКурсаКратности("СуммаДохода");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСтатьяПриИзменении(Элемент)
	
	СтатьяПриИзмененииСервер(Элементы.Доходы.ТекущиеДанные.СтатьяДохода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСтатьяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяДохода) И Объект.Доходы.Количество() > 1 Тогда
		СубконтоДляПодстановки = Объект.Доходы[Объект.Доходы.Количество()-2].СтатьяДохода;
	Иначе
		СубконтоДляПодстановки = ТекущиеДанные.СтатьяДохода;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СтатьиДоходов.ФормаВыбора", Новый Структура("ТекущаяСтрока", СубконтоДляПодстановки), Элемент, ДанныеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСтатьяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыФинансоваяЦельПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	НовоеЗначение = ?(ТекущиеДанные.ФинансоваяЦель = Неопределено, ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления"), ТекущиеДанные.ФинансоваяЦель);
	
	Для Каждого ИДСтроки Из Элементы.Доходы.ВыделенныеСтроки Цикл
		СтрокаДокумента = Объект.Доходы.НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаДокумента.ДоступностьФинансовойЦели > 0 Тогда
			СтрокаДокумента.ФинансоваяЦель = НовоеЗначение;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиВТаблице(Элемент)
	
	АналитикаСтатейКлиент.ПриИзмененииАналитикиВТаблице(ЭтаФорма, Элемент, "Доходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыКомментарийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.Комментарий;
	
	Для Каждого ИДСтроки Из Элементы.Доходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Доходы.НайтиПоИдентификатору(ИдСтроки);
		СтрокаДокумента.Комментарий = НовоеЗначение;
		
	КонецЦикла; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДоходыКурсПриИзменении(Элемент)
	ПриИзмененииСуммыКурсаКратности("Курс");
КонецПроцедуры

&НаКлиенте
Процедура ДоходыКратностьПриИзменении(Элемент)
	ПриИзмененииСуммыКурсаКратности("Кратность");
КонецПроцедуры
 
#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборСтатейДоходов(Команда)
	
	ОписаниеОбработчикаВыбора = Новый ОписаниеОповещения("ОбработкаПодбораСтатей", ЭтотОбъект);
	КошелекПодбора    = Неопределено;
	ВидимостьФинЦелей = ВидимостьКолонкиФинансовойЦели;
	Если Объект.Доходы.Количество() > 0 Тогда
		Для Каждого СтрокаДохода Из Объект.Доходы Цикл
			Если ЗначениеЗаполнено(СтрокаДохода.Кошелек) Тогда
				КошелекПодбора = СтрокаДохода.Кошелек;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	ПараметрыПодбора = Новый Структура("КошелекОперации,ДатаОперации",
			КошелекПодбора, Объект.Дата);
	ОткрытьФорму("Обработка.ФормыПодборов.Форма.ПодборСтатейДоходов", ПараметрыПодбора, ЭтаФорма, Объект.Ссылка, ,, ОписаниеОбработчикаВыбора); 
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_НастройкаКолонокАналитики(Команда)

	АналитикаСтатейКлиент.ИзменитьНастройкиКолонокАналитики(ЭтаФорма, Ложь, "Доход");

КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура НастройкаКолонокАналитикиЗавершение(НастройкиИзменены) Экспорт

	Если НастройкиИзменены Тогда
		УправлениеРеквизитамиАналитики(Истина, Истина);
	КонецЕсли; 

КонецПроцедуры
 
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Подготовка реквизитов формы
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	КошелекПоУмолчанию = ПользовательскиеНастройкиДеньгиСервер.ОсновнойКошелек();
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаОперации) Тогда
		Объект.ВалютаОперации = ВалютаУчета;
	КонецЕсли; 
	
	Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения <> Неопределено Тогда
		Параметры.ЗначенияЗаполнения.Свойство("Кошелек", КошелекПоУмолчанию);
	КонецЕсли;
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтаФорма, "СтатьяДохода", "АналитикаСтатьи", "", "", "ФормаКоманднаяПанель", Истина);
	
	// Заполнение дополнительных колонок и реквизитов
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм элементов документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Обслуживание плановых операций
	РаботаСФормамиДокументов.ПодготовитьФормуНаСервереПоРаботеСШаблонами(ЭтаФорма);
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеМедиафайлов(ЭтотОбъект);
	#КонецОбласти	
	
	// Настройка внешнего вида
	УправлениеФормой();
	
	// Определение текущей строки
	Если Параметры.Свойство("ОписаниеТекущейСтроки") Тогда
		ОписаниеТекущейСтроки = Параметры.ОписаниеТекущейСтроки;
		// Определим табличную часть:
		СтруктураПоиска = Новый Структура("Кошелек,СтатьяДохода,СуммаДохода",
				ОписаниеТекущейСтроки.СубконтоДт, 
				ОписаниеТекущейСтроки.СубконтоКт, 
				ОписаниеТекущейСтроки.Сумма);
		СтрокиТЧ = Объект.Доходы.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧ.Количество() > 0 Тогда
			СтрокаТЧ = СтрокиТЧ[0].ПолучитьИдентификатор();
			Элементы.Доходы.ТекущаяСтрока = СтрокаТЧ;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()
	
	ФлагМодифицированности = Модифицированность;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокумента", Объект.Доходы.Выгрузить());
	Запрос.УстановитьПараметр("Период", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ВалютаОперации", Объект.ВалютаОперации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Кошелек,
	|	ТаблицаДокумента.СтатьяДохода,
	|	ТаблицаДокумента.СуммаДохода,
	|	ТаблицаДокумента.Комментарий,
	|	ТаблицаДокумента.АналитикаСтатьи,
	|	ТаблицаДокумента.СуммаВВалютеОперации,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.ФинансоваяЦель
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Кошелек,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Кошельки.Валюта, НЕОПРЕДЕЛЕНО) = &ВалютаОперации
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДоступностьКурса,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Кошельки.ИспользоватьДляНакоплений, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоступностьФинансовойЦели,
	|	ТаблицаДокумента.СтатьяДохода,
	|	ТаблицаДокумента.СуммаДохода,
	|	ТаблицаДокумента.Комментарий,
	|	ТаблицаДокумента.АналитикаСтатьи,
	|	ТаблицаДокумента.СуммаВВалютеОперации,
	|	ТаблицаДокумента.Курс,
	|	ТаблицаДокумента.Кратность,
	|	ТаблицаДокумента.ФинансоваяЦель
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КошелькиИСчета КАК Кошельки
	|		ПО (Кошельки.Ссылка = ТаблицаДокумента.Кошелек)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.Доходы.Загрузить(РезультатЗапроса);
	
	ВидимостьКолонкиКурса = Объект.Доходы.Итог("ДоступностьКурса") > 0;
	ВидимостьКолонкиФинансовойЦели = Объект.Доходы.Итог("ДоступностьФинансовойЦели") > 0;
	
	Модифицированность = ФлагМодифицированности;
 
	// Обслуживание аналитики статей:
	АналитикаСтатей.ЗаполнитьРеквизитыАналитикой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	// Обслуживание плановых операций
	ПлановыеОперацииКлиентСервер.ОбновитьИнформациюОСвязиОперацииСРасписанием(ЭтотОбъект);
	
	// Обслуживание аналитики статей:
	УправлениеРеквизитамиАналитики();

	РаботаСФормамиДокументовКлиентСервер.ОбновитьЭлементыФормыПоСостояниюОперации(ЭтотОбъект);
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаСервере
Процедура УправлениеРеквизитамиАналитики(ИспользоватьЗначенияПоУмолчанию = Ложь, ПотеряДанныхРазрешена = Ложь)

	АналитикаСтатей.УправлениеФормой(ЭтаФорма, ИспользоватьЗначенияПоУмолчанию, ПотеряДанныхРазрешена);

КонецПроцедуры
 

&НаСервере
Процедура ДоходыКошелекПриИзмененииСервер(ИндексСтроки = Неопределено)

	Если ИндексСтроки = Неопределено Тогда
		ТекущиеДанные = Объект.Доходы.НайтиПоИдентификатору(Элементы.Доходы.ТекущаяСтрока);
		МассивСтрок = Элементы.Доходы.ВыделенныеСтроки;
	Иначе
		ТекущиеДанные = Объект.Доходы.НайтиПоИдентификатору(ИндексСтроки);
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ИндексСтроки);
	КонецЕсли; 
	НовоеЗначение             = ТекущиеДанные.Кошелек;
	ДоступностьФинансовойЦели = ?(ЗначениеЗаполнено(НовоеЗначение) И НовоеЗначение.ИспользоватьДляНакоплений, 1, 0);
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		СтрокаДокумента = Объект.Доходы.НайтиПоИдентификатору(ИДСтроки);
		СтрокаДокумента.Кошелек = НовоеЗначение;
		
		СтрокаДокумента.ДоступностьФинансовойЦели = ДоступностьФинансовойЦели;
		Если СтрокаДокумента.ДоступностьФинансовойЦели > 0 И НЕ ЗначениеЗаполнено(СтрокаДокумента.ФинансоваяЦель) Тогда
			СтрокаДокумента.ФинансоваяЦель = Справочники.ФинансовыеЦели.ОбщиеНакопления;
		ИначеЕсли СтрокаДокумента.ДоступностьФинансовойЦели = 0 Тогда
			СтрокаДокумента.ФинансоваяЦель = Справочники.ФинансовыеЦели.ПустаяСсылка();
		КонецЕсли; 
		
	КонецЦикла;
	
	ОбновитьВалютуПоКошелькам();

КонецПроцедуры

&НаСервере
Процедура ОбновитьВалютуПоКошелькам()
	
	ВалютыОперации  = Новый Соответствие;
	ПоследняяВалюта = ВалютаУчета;
	Для каждого СтрокаДокумента Из Объект.Доходы Цикл
		Если ЗначениеЗаполнено(СтрокаДокумента.Кошелек) Тогда
			ПоследняяВалюта = СтрокаДокумента.Кошелек.Валюта;
			ВалютыОперации.Вставить(ПоследняяВалюта, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если ВалютыОперации.Количество() = 1 Тогда
		Объект.ВалютаОперации = ПоследняяВалюта;
		ВидимостьКолонкиКурса = Ложь;
	Иначе
		Объект.ВалютаОперации = ВалютаУчета;
		ВидимостьКолонкиКурса = ВалютыОперации.Количество() > 1;
	КонецЕсли;
	
	Для каждого СтрокаДокумента Из Объект.Доходы Цикл
		
		СтрокаДокумента.ДоступностьКурса = ВидимостьКолонкиКурса 
				И ЗначениеЗаполнено(СтрокаДокумента.Кошелек.Валюта) 
				И СтрокаДокумента.Кошелек.Валюта <> Объект.ВалютаОперации;
				
		Если СтрокаДокумента.ДоступностьКурса = 1 Тогда
			КурсИКратность            = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаДокумента.Кошелек.Валюта, Объект.Дата, Объект.ВалютаОперации);
			СтрокаДокумента.Курс      = КурсИКратность.Курс;
			СтрокаДокумента.Кратность = КурсИКратность.Кратность;
		Иначе
			СтрокаДокумента.Курс      = 1;
			СтрокаДокумента.Кратность = 1;
		КонецЕсли; 
		СтрокаДокумента.СуммаВВалютеОперации = СтрокаДокумента.СуммаДохода * СтрокаДокумента.Курс / ?(ЗначениеЗаполнено(СтрокаДокумента.Кратность), СтрокаДокумента.Кратность, 1);
		
	КонецЦикла;
	
	ВидимостьКолонкиФинансовойЦели = Объект.Доходы.Итог("ДоступностьФинансовойЦели") > 0;
	Объект.СуммаОперации = Объект.Доходы.Итог("СуммаВВалютеОперации");
	
КонецПроцедуры
 

&НаСервере
Процедура СтатьяПриИзмененииСервер(Статья)

	Для Каждого ИДСтроки Из Элементы.Доходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Доходы.НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаДокумента.СтатьяДохода <> Статья Тогда
			СтрокаДокумента.СтатьяДохода = Статья;
		КонецЕсли; 
		// Обслуживание аналитики статей:
		АналитикаСтатейВызовСервера.ПриИзмененииСтатьиВТабличнойЧасти(ЭтаФорма, Статья, "Доходы", ИдСтроки);
		
	КонецЦикла; 

КонецПроцедуры

// Обслуживание плановых операций
&НаСервере
Процедура ЗаполнитьДанныеПоШаблону(СсылкаНаШаблон)
	
	РаботаСФормамиДокументов.ОбновитьФормуОперацииПоШаблону(ЭтотОбъект, СсылкаНаШаблон);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтаФорма, "СтатьяДохода", "АналитикаСтатьи", "", "", "ФормаКоманднаяПанель", Истина);
	
	// Заполнение дополнительных колонок и реквизитов
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм элементов документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Настройка внешнего вида
	УправлениеФормой();

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаПодбораСтатей(РезультатПодбора, ДополнительныеПараметры) Экспорт

	Если НЕ ТипЗнч(РезультатПодбора) = Тип("Структура")
		ИЛИ НЕ РезультатПодбора.Свойство("АдресТаблицыВыбора") Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьВДоходыСтатьиНаСервере(РезультатПодбора);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВДоходыСтатьиНаСервере(РезультатПодбора)

	ТаблицаПодбора = ПолучитьИзВременногоХранилища(РезультатПодбора.АдресТаблицыВыбора);
	Для Каждого СтрокаПодбора Из ТаблицаПодбора Цикл
		Если ЗначениеЗаполнено(СтрокаПодбора.СтатьяДохода) Тогда
			
			СтрокаДохода = Объект.Доходы.Добавить();
			СтрокаДохода.СтатьяДохода      = СтрокаПодбора.СтатьяДохода;
			СтрокаДохода.Кошелек           = СтрокаПодбора.Кошелек;
			СтрокаДохода.Комментарий       = СтрокаПодбора.КомментарийСтроки;
			СтрокаДохода.СуммаДохода       = СтрокаПодбора.Сумма;
			
			ИДСтроки = СтрокаДохода.ПолучитьИдентификатор();
			АналитикаСтатей.ПриИзмененииСтатьиВТабличнойЧасти(ЭтаФорма, СтрокаДохода.СтатьяДохода, "Доходы", ИДСтроки);
			ДоходыКошелекПриИзмененииСервер(ИДСтроки);
			Если СтрокаПодбора.ВидимостьФинансовойЦели Тогда
				СтрокаДохода.ФинансоваяЦель = СтрокаПодбора.ФинансоваяЦель;
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла; 
	

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыКурсаКратности(ИмяПоля)

	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные[ИмяПоля];
	
	Для Каждого ИДСтроки Из Элементы.Доходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Доходы.НайтиПоИдентификатору(ИдСтроки);
		Если СтрокаДокумента.ДоступностьКурса Или ИмяПоля = "СуммаДохода" Тогда
			СтрокаДокумента[ИмяПоля] = НовоеЗначение;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Курс) ИЛИ НЕ ЗначениеЗаполнено(СтрокаДокумента.Кратность) Тогда
			ДоходыКошелекПриИзмененииСервер(ИДСтроки);
		Иначе
			СтрокаДокумента.СуммаВВалютеОперации = СтрокаДокумента.СуммаДохода * СтрокаДокумента.Курс / ?(ЗначениеЗаполнено(СтрокаДокумента.Кратность), СтрокаДокумента.Кратность, 1);
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыеСтроки()
	
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаДокумента Из Объект.Доходы Цикл
		Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДохода)
			И Не ЗначениеЗаполнено(СтрокаДокумента.Кошелек)
			И Не ЗначениеЗаполнено(СтрокаДокумента.СуммаДохода)
			И Не ЗначениеЗаполнено(СтрокаДокумента.Комментарий)
			Тогда
			СтрокиКУдалению.Добавить(СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента Из СтрокиКУдалению Цикл
		Объект.Доходы.Удалить(СтрокаДокумента);
	КонецЦикла;
	
КонецПроцедуры


// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


