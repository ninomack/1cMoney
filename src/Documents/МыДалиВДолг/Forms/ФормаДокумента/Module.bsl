&НаКлиенте
Перем ДополнительныеПараметрыНаКлиенте Экспорт;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	#Область ПрикрепленныеФайлы
	МедиаФайлы = ПрикрепленныеФайлыСервер.ПрочитатьСписокФайлов(Объект.Ссылка);
	#КонецОбласти
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записан элемент справочника" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ИмяСправочника = Неопределено;
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ИмяСправочника", ИмяСправочника) И ЗначениеЗаполнено(ИмяСправочника)
			И Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ЗначениеЗаполнено(ФормаВладельца)
			И ФормаВладельца = ЭтотОбъект.УникальныйИдентификатор Тогда
			Если ИмяСправочника = "Контакты" Тогда
				Объект.Контакт = Параметр.Ссылка;
				КонтактПриИзмененииСервер();
				ТекущийЭлемент = Элементы.Контакт;
			ИначеЕсли ИмяСправочника = "Долги" Тогда
				Объект.Долг = Параметр.Ссылка;
				ДолгПриИзмененииСервер();
				ТекущийЭлемент = Элементы.Долг;
			КонецЕсли;
		ИначеЕсли Параметр.Свойство("ИмяСправочника", ИмяСправочника) И ЗначениеЗаполнено(ИмяСправочника) Тогда
			Если ИмяСправочника = "Долги" И Объект.Долг = Параметр.Ссылка Тогда
				ДолгПриИзмененииСервер();
			ИначеЕсли ВРег(ИмяСправочника) = "КОШЕЛЬКИИСЧЕТА" И Объект.Кошелек = Параметр.Ссылка Тогда
				КошелекПриИзмененииСервер();
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "Записана операция" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ФормаВладельца = ЭтотОбъект.УникальныйИдентификатор И Параметр.ЭтоШаблон <> Объект.ЭтоШаблон Тогда
			ЗаполнитьДанныеПоШаблону(Параметр.Ссылка);
		КонецЕсли;
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	#Область ПрикрепленныеФайлы
	Если (ПрикрепленныеФайлыКлиент.ЭтоПрикреплениеФайла(ЭтаФорма, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиент.ДобавитьФайлВСписокФормы(ЭтотОбъект, Параметр); 
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Обслуживание плановых операций
	ПлановыеОперацииКлиент.ПередЗаписьюДокумента(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	// Общий функционал перед записью документов
	ОбслуживаниеДокументовКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обслуживание плановых операций
	Документы.МыДалиВДолг.ОбновитьИтоговыеСуммыДокумента(ТекущийОбъект);
	ПлановыеОперации.ПроверкаПлановПередЗаписьюДокумента(ТекущийОбъект, ПараметрыЗаписи, ЭтотОбъект);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыСервер.ОбработатьИЗаписатьДанныеМультимедиа(МедиаФайлы, ТекущийОбъект.Ссылка);
	#КонецОбласти 	
	ЗаполнитьДобавленныеКолонки();
	ПараметрыСеанса.ДатаПоследнейОперации = ТекущийОбъект.Дата;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Записана операция", Новый Структура("Дата, ВидДокумента, Ссылка, ЭтоШаблон, ВладелецФормы", 
			Объект.Дата, "МыДалиВДолг", Объект.Ссылка, Объект.ЭтоШаблон, 
			?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено)));
			
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Общий функционал перед закрытием форм документов
	ОбслуживаниеДокументовКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И Открыта() Тогда
		Закрыть(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	РаботаСФормамиДокументовКлиентСервер.ОбновитьЗаголовкиКомандФормы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КонтактПриИзменении(Элемент)
	
	КонтактПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДолгНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыГрафика.СуммаДолга = ?(ЗначениеЗаполнено(Объект.Долг), Объект.СуммаЗайма, Объект.СуммаВыдано);
	ПараметрыГрафика.ДатаВозникновенияДолга = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.КошелекДляПогашения) Тогда
		ПараметрыГрафика.КошелекДляПогашения = Объект.Кошелек;
	КонецЕсли;
	
	Валюта = ?(ЗначениеЗаполнено(Объект.Долг), Объект.ВалютаЗайма, Объект.ВалютаВыдано);
	ПараметрыЗаполнения = Новый Структура("Контакт,ИспользоватьДляУчетаВыданныхДолгов,ИспользоватьДляУчетаВзятыхДолгов,Валюта,ПараметрыГрафика", 
		Объект.Контакт, Истина, Ложь, Валюта, ПараметрыГрафика);
		
	ПараметрыОтбора = Новый Структура("Контакт,ИспользоватьДляУчетаВыданныхДолгов", Объект.Контакт, Истина);
	ОткрытьФорму("Справочник.Долги.ФормаВыбора", 
		Новый Структура("ЗначенияЗаполнения,СкрыватьОстатокНаНачало, ТекстЗаполнения, Отбор", 
			ПараметрыЗаполнения, Истина, Элемент.ТекстРедактирования, ПараметрыОтбора), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолгСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыГрафика.СуммаДолга = ?(ЗначениеЗаполнено(Объект.Долг), Объект.СуммаЗайма, Объект.СуммаВыдано);
	ПараметрыГрафика.ДатаВозникновенияДолга = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.СпособПогашения) Тогда
		ПараметрыГрафика.СпособПогашения = ПредопределенноеЗначение("Перечисление.СпособыПогашенияКредита.РазовыйПлатеж");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыГрафика.КошелекДляПогашения) Тогда
		ПараметрыГрафика.КошелекДляПогашения = Объект.Кошелек;
	КонецЕсли;
	
	Валюта = ?(ЗначениеЗаполнено(Объект.Долг), Объект.ВалютаЗайма, Объект.ВалютаВыдано);
	ПараметрыЗаполнения = Новый Структура("Контакт,ИспользоватьДляУчетаВыданныхДолгов,ИспользоватьДляУчетаВзятыхДолгов,Валюта,ПараметрыГрафика", 
		Объект.Контакт, Истина, Ложь, Валюта, ПараметрыГрафика);
	ОткрытьФорму("Обработка.ПомощникСозданияДолга.Форма", 
		Новый Структура("ЗначенияЗаполнения,СкрыватьОстатокНаНачало,ТекстЗаполнения", ПараметрыЗаполнения, Истина, Элемент.ТекстРедактирования), ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ДолгПриИзменении(Элемент)
	
	ДолгПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КошелекПриИзменении(Элемент)
	
	КошелекПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансоваяЦельПриИзменении(Элемент)
	ОбновитьОстаткиДенег();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОперацииПриИзменении(Элемент)
	
	Объект.СуммаЗайма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаВыдано,
		Объект.ВалютаВыдано, Объект.ВалютаЗайма, КурсВыдано, КурсЗайма, КратностьВыдано, КратностьЗайма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаЗаймаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СуммаВыдано) Тогда
		Объект.СуммаВыдано = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаЗайма,
			Объект.ВалютаЗайма, Объект.ВалютаВыдано, КурсЗайма, КурсВыдано, КратностьЗайма, КратностьВыдано);
	КонецЕсли; 
		
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИзменитьРасписание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПлановыеОперацииКлиент.ОткрытьРедакторРасписания(ЭтотОбъект);
	
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИнформацияОШаблонеНажатие(Элемент, СтандартнаяОбработка)
	
	ПлановыеОперацииКлиент.ИнформацияОШаблонеНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, "МыДалиВДолг");
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиВШапке(Элемент)
	
	АналитикаСтатейКлиент.ПриИзмененииАналитикиВШапке(ЭтотОбъект, Элемент);
	
КонецПроцедуры

#Область ПрикрепленныеФайлы

&НаКлиенте
Процедура ПредставлениеФайловОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ПрикрепленныеФайлыКлиент.ОбработчикНажатияНаПредставлениеФайлов(ЭтотОбъект, СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

#КонецОбласти 


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРасходы

&НаКлиенте
Процедура ДополнительныеРасходыПриИзменении(Элемент)
	
	ТекстЗаголовка = НСтр("ru = 'Дополнительные расходы (%1)'");
	ИтогДопРасходов = Объект.ДополнительныеРасходы.Итог("СуммаРасхода");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, 
		Формат(ИтогДопРасходов, "ЧДЦ=2; ЧН=0; ЧГ=") + ?(ЗначениеЗаполнено(Объект.ВалютаВыдано) И ИтогДопРасходов <> 0, " " + Объект.ВалютаВыдано, ""));
	Элементы.ГруппаСтраницаДополнительныеРасходы.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ДанныеСтроки = Элементы.ДополнительныеРасходы.ТекущиеДанные;
		ДанныеСтроки.КошелекРасхода = Объект.Кошелек;
		ДанныеСтроки.ФинансоваяЦель = Объект.ФинансоваяЦель;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Обслуживание аналитики статей:
	ТекущиеДанные = Элементы.ДополнительныеРасходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасхода) Тогда
		СтатьяРасходаПриИзмененииСервер(Элементы.ДополнительныеРасходы.ТекущаяСтрока);
	КонецЕсли;
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтотОбъект) Тогда
		АналитикаСтатейКлиент.ПриОкончанииРедактированияСтрокиТабличнойЧасти(ЭтотОбъект, Истина, "ДополнительныеРасходы", ТекущиеДанные);
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыПослеУдаления(Элемент)
	
	// Обслуживание аналитики статей:
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтотОбъект) Тогда
		АналитикаСтатейКлиент.ПослеУдаленияСтрокиТабличнойЧасти(ЭтотОбъект, Истина, "ДополнительныеРасходы");
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыСтатьяРасходаПриИзменении(Элемент)
	
	СтатьяРасходаПриИзмененииСервер(Элементы.ДополнительныеРасходы.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРасходыСтатьяРасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_НастройкаКолонокАналитики(Команда)

	АналитикаСтатейКлиент.ИзменитьНастройкиКолонокАналитики(ЭтотОбъект, Истина, "МыДалиВДолг");

КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура НастройкаКолонокАналитикиЗавершение(НастройкиИзменены) Экспорт

	Если НастройкиИзменены Тогда
		УправлениеРеквизитамиАналитики(Истина, Истина);
	КонецЕсли; 

КонецПроцедуры
 
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Подготовка реквизитов формы
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	ВалютаОперации = Объект.ВалютаВыдано;
	Если Объект.ВалютаВыдано = ВалютаУчета ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаВыдано) Тогда
		КурсВыдано      = 1;
		КратностьВыдано = 1;
	Иначе
		КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаВыдано, Объект.Дата, ВалютаУчета);
		КурсВыдано      = КурсИКратность.Курс;
		КратностьВыдано = КурсИКратность.Кратность;
	КонецЕсли; 
	Если Объект.ВалютаЗайма = ВалютаУчета ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаЗайма) Тогда
		КурсЗайма      = 1;
		КратностьЗайма = 1;
	Иначе
		КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаЗайма, Объект.Дата, ВалютаУчета);
		КурсЗайма      = КурсИКратность.Курс;
		КратностьЗайма = КурсИКратность.Кратность;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Кошелек) Тогда
			Объект.Кошелек = ПользовательскиеНастройкиДеньгиСервер.ОсновнойКошелек();
		КонецЕсли; 
		Объект.ВалютаВыдано  = Объект.Кошелек.Валюта;
	КонецЕсли;
	
	// Контакт должен соответствовать долгу
	Если Объект.Контакт <> Объект.Долг.Контакт Тогда
		Объект.Контакт = Объект.Долг.Контакт;
		Модифицированность = Истина;
	КонецЕсли;
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтотОбъект, "", "", "СтатьяРасхода", "АналитикаСтатьи", "ДополнительныеРасходыКоманднаяПанель");
	
	// Заполнение дополнительных колонок и реквизитов
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	// Обслуживание плановых операций
	РаботаСФормамиДокументов.ПодготовитьФормуНаСервереПоРаботеСШаблонами(ЭтотОбъект);
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеМедиафайлов(ЭтотОбъект);
	#КонецОбласти	
	
	ОбновитьОстаткиДенег();
	
	// Настройка внешнего вида
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()

	// Обслуживание аналитики статей:
	АналитикаСтатей.ЗаполнитьРеквизитыАналитикой(ЭтотОбъект);
	
КонецПроцедуры
 
&НаСервере
Процедура УправлениеФормой()

	// Обслуживание плановых операций
	ПлановыеОперацииКлиентСервер.ОбновитьИнформациюОСвязиОперацииСРасписанием(ЭтотОбъект);
	
	// Обслуживание аналитики статей:
	УправлениеРеквизитамиАналитики();
	
	РаботаСФормамиДокументовКлиентСервер.ОбновитьСостояниеОперации(ЭтотОбъект);
	
	ПериодОстатков = ?(Объект.Проведен, Объект.Ссылка.МоментВремени(), КонецДня(ТекущаяДатаКлиентСервер()));
	ОстатокДолга     = РазделыУчета.ПолучитьОстатокПоСубконто(ПланыСчетов.РазделыУчета.Долги, Объект.Долг, ПериодОстатков);
	
	ЭтоНоваяОперация = НЕ Объект.ЭтоШаблон И Объект.Ссылка.Пустая();
	ВидимостьФинансовойЦели = ЗначениеЗаполнено(Объект.Кошелек) И Объект.Кошелек.ИспользоватьДляНакоплений = Истина;
	
	Если ЗначениеЗаполнено(Объект.Контакт) Тогда
		Массив = Новый Массив();
		Массив.Добавить(Новый СвязьПараметраВыбора("Отбор.Контакт", "Объект.Контакт", РежимИзмененияСвязанногоЗначения.НеИзменять));
		Элементы.Долг.СвязиПараметровВыбора  = Новый ФиксированныйМассив(Массив);
	Иначе
		Элементы.Долг.СвязиПараметровВыбора  = Новый ФиксированныйМассив(Новый Массив());
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Остаток до выдачи: %1 %2'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Формат(ОстатокДолга, "ЧДЦ=2; ЧН=0,00"), Объект.Долг.Валюта);
	Элементы.ОстатокДолга.Заголовок  = ТекстЗаголовка;
	
	// Финансовая цель
	Элементы.ФинансоваяЦель.Видимость = ВидимостьФинансовойЦели;
	Элементы.ДополнительныеРасходыФинансоваяЦель.Видимость = ВидимостьФинансовойЦели;
	
	// Сумма
	ВидимостьПересчетов = ЗначениеЗаполнено(Объект.ВалютаВыдано) 
		И ЗначениеЗаполнено(Объект.ВалютаЗайма)
		И Объект.ВалютаВыдано <> Объект.ВалютаЗайма;
	Элементы.СуммаЗайма.Видимость  = ВидимостьПересчетов;
	Элементы.ВалютаЗайма.Видимость = ВидимостьПересчетов;
	
	// Дополнительные расходы
	ТекстЗаголовка = НСтр("ru = 'Дополнительные расходы (%1)'");
	ИтогДопРасходов = Объект.ДополнительныеРасходы.Итог("СуммаРасхода");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, 
		Формат(ИтогДопРасходов, "ЧДЦ=2; ЧН=0; ЧГ=") + ?(ЗначениеЗаполнено(Объект.ВалютаВыдано) И ИтогДопРасходов <> 0, " " + Объект.ВалютаВыдано, ""));
	Элементы.ГруппаСтраницаДополнительныеРасходы.Заголовок = ТекстЗаголовка;
	
	РаботаСФормамиДокументовКлиентСервер.ОбновитьЭлементыФормыПоСостояниюОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КонтактПриИзмененииСервер()

	Если Объект.Долг.Контакт <> Объект.Контакт Тогда
		Объект.Долг = Неопределено;
	КонецЕсли;
	
	ДолгиКонтакта = РазделыУчета.ПолучитьАктуальныеДолгиКонтакта(Объект.Контакт, Истина, Ложь);
	Если ДолгиКонтакта <> Неопределено И ДолгиКонтакта.Количество() = 1 Тогда
		Объект.Долг = ДолгиКонтакта[0].Ссылка;
	КонецЕсли;
	ДолгПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ДолгПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.Долг) Тогда
		Объект.Контакт = Объект.Долг.Контакт;
	КонецЕсли;
	
	Объект.ВалютаЗайма = Объект.Долг.Валюта;
	Если Объект.ВалютаЗайма = ВалютаУчета ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаЗайма) Тогда
		КурсЗайма      = 1;
		КратностьЗайма = 1;
	Иначе
		КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаЗайма, Объект.Дата, ВалютаУчета);
		КурсЗайма      = КурсИКратность.Курс;
		КратностьЗайма = КурсИКратность.Кратность;
	КонецЕсли; 
	
	Если Объект.ВалютаВыдано = Объект.ВалютаЗайма Тогда
		Объект.СуммаЗайма = Объект.СуммаВыдано;
	Иначе
		Объект.СуммаЗайма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаВыдано,
			Объект.ВалютаВыдано, Объект.ВалютаЗайма, КурсВыдано, КурсЗайма, КратностьВыдано, КратностьЗайма);
	КонецЕсли; 
	
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура КошелекПриИзмененииСервер()

	Объект.ВалютаВыдано  = Объект.Кошелек.Валюта;
	Если Объект.ВалютаВыдано = ВалютаУчета ИЛИ НЕ ЗначениеЗаполнено(Объект.ВалютаВыдано) Тогда
		КурсВыдано      = 1;
		КратностьВыдано = 1;
	Иначе
		КурсИКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаВыдано, Объект.Дата, ВалютаУчета);
		КурсВыдано      = КурсИКратность.Курс;
		КратностьВыдано = КурсИКратность.Кратность;
	КонецЕсли; 
	Если Объект.ВалютаВыдано = Объект.ВалютаЗайма Тогда
		Объект.СуммаВыдано = Объект.СуммаЗайма;
	Иначе
		Объект.СуммаВыдано = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Объект.СуммаЗайма,
			 Объект.ВалютаЗайма, Объект.ВалютаВыдано, КурсЗайма, КурсВыдано, КратностьЗайма, КратностьВыдано);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.ФинансоваяЦель) Тогда
		Объект.ФинансоваяЦель = Справочники.ФинансовыеЦели.ОбщиеНакопления;
	КонецЕсли; 
	Для Каждого СтрокаРасхода Из Объект.ДополнительныеРасходы Цикл
		СтрокаРасхода.КошелекРасхода = Объект.Кошелек;
		СтрокаРасхода.ФинансоваяЦель = Объект.ФинансоваяЦель;
	КонецЦикла; 
	
	ОбновитьОстаткиДенег();
	УправлениеФормой();

КонецПроцедуры


&НаСервере
Процедура ОбновитьОстаткиДенег()

	РаботаСФормамиДокументов.ОбновитьОстатокПоОбъектуУчета(ЭтотОбъект, "ОстатокВКошельке", 
			ПланыСчетов.РазделыУчета.Деньги, Объект.Кошелек, , Объект.ФинансоваяЦель, "ОстатокФинансоваяЦель");

КонецПроцедуры

// Обслуживание плановых операций
&НаСервере
Процедура ЗаполнитьДанныеПоШаблону(СсылкаНаШаблон)
	
	РаботаСФормамиДокументов.ОбновитьФормуОперацииПоШаблону(ЭтотОбъект, СсылкаНаШаблон);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтотОбъект, "", "", "СтатьяРасхода", "АналитикаСтатьи", "ДополнительныеРасходыКоманднаяПанель");
	
	// Заполнение дополнительных колонок и реквизитов
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм элементов документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	
	// Настройка внешнего вида
	УправлениеФормой();

КонецПроцедуры

// Обслуживание аналитики статей:
&НаСервере
Процедура УправлениеРеквизитамиАналитики(ИспользоватьЗначенияПоУмолчанию = Ложь, ПотеряДанныхРазрешена = Ложь)

	АналитикаСтатей.УправлениеФормой(ЭтотОбъект, ИспользоватьЗначенияПоУмолчанию, ПотеряДанныхРазрешена);

КонецПроцедуры

// Обслуживание аналитики статей:
&НаСервере
Процедура СтатьяРасходаПриИзмененииСервер(ИДСтроки)
	
	СтрокаДокумента = Объект.ДополнительныеРасходы.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента <> Неопределено Тогда
		АналитикаСтатей.ПриИзмененииСтатьиВТабличнойЧасти(ЭтотОбъект, СтрокаДокумента.СтатьяРасхода, "ДополнительныеРасходы", ИДСтроки);
	КонецЕсли; 

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяДатаКлиентСервер()
	#Если Сервер Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли 
КонецФункции 

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

