#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	// Заполняем документ данными заполнения
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ОбщегоНазначенияДеньги.ЗаполнитьОбъектПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;

	// Проверяем реквизиты нового документа в соответствии с настройками пользователя
	ОбслуживаниеДокументов.ПроверитьЗаполнениеНовогоДокумента(ЭтотОбъект);
	
	// Проверяем соответствие объекта и раздела учетов
	РазделыУчета.ПроверитьЗначенияРазделаИОбъектаУчета(РазделУчета, ОбъектУчета);
	
	Если ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") И
			ОбъектУчета.ИспользоватьДляНакоплений И НЕ ЗначениеЗаполнено(ФинансоваяЦель) Тогда
		ФинансоваяЦель = Справочники.ФинансовыеЦели.ОбщиеНакопления;
	КонецЕсли; 
	
	ВалютаОперации = ?(ЗначениеЗаполнено(ОбъектУчета), ОбъектУчета.Валюта, Константы.ВалютаУчета.Получить());

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	// Очищаем реквизиты, не подлежащие копированию
	Пользователь = Неопределено;
	Дата         = Неопределено;
	
	// Проверяем реквизиты нового документа в соответствии с настройками пользователя
	ОбслуживаниеДокументов.ПроверитьЗаполнениеНовогоДокумента(ЭтотОбъект, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если ОбменДанными.Загрузка ИЛИ ЭтоШаблон Тогда
		Возврат;
	КонецЕсли; 
	
	Движения.ЖурналОпераций.Записывать            = Истина;
	Движения.ФактическиеОборотыБюджета.Записывать = Истина;
	СформироватьПроводки(Движения.ЖурналОпераций, Движения.ФактическиеОборотыБюджета);
	
	// Проверим границы последовательности
	ПоследовательностьМенеджер = Последовательности.ВводИзменениеОстатков;
	ОтборГраниц = Новый Структура("РазделУчета, ОбъектУчета", РазделУчета, ОбъектУчета);
	МоментВремени = МоментВремени();
	
	// Передвинем границу вперед, если возможно
	Если ПоследовательностьМенеджер.Проверить(МоментВремени, ОтборГраниц) Тогда
		ПоследовательностьМенеджер.УстановитьГраницу(МоментВремени, ОтборГраниц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Проверку раздела учета выполняем даже в случае загрузки
	РазделыУчета.ЗаполнитьРазделУчетаПоОбъекту(РазделУчета, ОбъектУчета);
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	// Проверяем зависимые реквизиты
	ВалютаОперации = ?(ЗначениеЗаполнено(ОбъектУчета) И ЗначениеЗаполнено(ОбъектУчета.Валюта), ОбъектУчета.Валюта, Константы.ВалютаУчета.Получить());
	РазделыУчета.ЗаполнитьФинансовуюЦельПоОбъектуУчета(ОбъектУчета, ФинансоваяЦель);
	
	// Готовим к записи движения
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// Очистим движения
		Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
			
			ЭтотОбъект.Движения.ЖурналОпераций.Записать();
			ЭтотОбъект.Движения.ФактическиеОборотыБюджета.Записать();
			
			Если ДополнительныеСвойства.Свойство("НеВосстанавливатьПоследовательность") 
				Или ДополнительныеСвойства.Свойство("ОтложенноеПроведение") Тогда
				// Проведение документа инициировано из модуля набора записей последовательности или при проведении загруженных данных.
				// Скопируем свойство в набор записей последовательности, связанный с этим документом.
				ПринадлежностьПоследовательностям.ВводИзменениеОстатков.ДополнительныеСвойства.Вставить(
					"НеВосстанавливатьПоследовательность", Истина);
				// Отменим регистрацию изменений.
				ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				ОбменДанными.Получатели.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		// Рассчитаем суммы корректировок
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Документы.ВводИзменениеОстатка.РассчитатьСуммуДоходаИлиРасхода(ЭтотОбъект);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			СуммаДохода  = 0;
			СуммаРасхода = 0;
		КонецЕсли;
		
	КонецЕсли;

	// Заполним информационные реквизиты документа
	ПредставлениеНовогоОстатка = НСтр("ru='Остаток: %1 %2'"); 
	ПредставлениеНовогоОстатка = СтрШаблон(ПредставлениеНовогоОстатка, Формат(СуммаНовогоОстатка, "ЧДЦ=2"), ВалютаОперации);
	
	Если ЗначениеЗаполнено(СуммаНовогоОстаткаПроцентов) Тогда
		ПредставлениеНовогоОстаткаПроцентов = НСтр("ru='Остаток %%: %1 %2'"); 
		ПредставлениеНовогоОстаткаПроцентов = СтрШаблон(ПредставлениеНовогоОстаткаПроцентов, Формат(СуммаНовогоОстаткаПроцентов, "ЧДЦ=2"), ВалютаОперации);
	КонецЕсли;
	
	ОписаниеОперации = "";
	
	Если РазделУчета.Родитель = ПланыСчетов.РазделыУчета.Деньги Тогда
		ОписаниеОперации = НСтр("ru='Изменен остаток в кошельке ['")    + ОбъектУчета + "]";
		Если ОбъектУчета.ИспользоватьДляНакоплений Тогда
			ОписаниеОперации = ОписаниеОперации + НСтр("ru = 'на финансовую цель ['") + ФинансоваяЦель + "]";
		КонецЕсли; 
	ИначеЕсли РазделУчета = ПланыСчетов.РазделыУчета.Имущество Тогда
		ОписаниеОперации = НСтр("ru='Изменена стоимость имущества ['")  + ОбъектУчета + "]";
	ИначеЕсли РазделУчета = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов Тогда
		Если ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов И ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов Тогда
			ОписаниеОперации = НСтр("ru='Изменен остаток взаиморасчетов ['")	+ ОбъектУчета + "]";
		ИначеЕсли ОбъектУчета.ИспользоватьДляУчетаВыданныхДолгов Тогда
			ОписаниеОперации = НСтр("ru='Изменен остаток долга нам ['")         	+ ОбъектУчета + "]";
		ИначеЕсли ОбъектУчета.ИспользоватьДляУчетаВзятыхДолгов Тогда
			ОписаниеОперации = НСтр("ru='Изменен остаток нашего долга ['")       	+ ОбъектУчета + "]";
		КонецЕсли;
	КонецЕсли;
	 
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ОписаниеОперации = ОписаниеОперации + " (" + Комментарий + ")";
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполним таблицу объектов для быстрого отбора операций
	ЗаполнитьТаблицуОбъектовОперации();
	
	ОбслуживаниеДокументов.ПриЗаписиОбъектаДокумента(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СформироватьПроводки(ЖурналОперацийНаборЗаписей, ОборотыБюджетаНаборЗаписей)

	СуммыКорректировок = Неопределено;
	Если НЕ ДополнительныеСвойства.Свойство("СуммыКорректировок", СуммыКорректировок) Тогда
		ВызватьИсключение "Суммы корректировок не определены";
	КонецЕсли;
	
 	ВалютаОперации = ?(ЗначениеЗаполнено(ОбъектУчета), ОбъектУчета.Валюта, Константы.ВалютаУчета.Получить());
	
	ФормироватьОборотБюджета = ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") И ОбъектУчета.ТипСчета <> Перечисления.ТипыСчетов.БанковскаяКартаКредитная;

	Если СуммыКорректировок.СуммаДоходаОсновная <> 0 ИЛИ СуммыКорректировок.СуммаРасходаОсновная <> 0 Тогда
		
		// Проводка в журнал операций
		НоваяПроводка = ЖурналОперацийНаборЗаписей.Добавить();
		НоваяПроводка.Регистратор = Ссылка;
		НоваяПроводка.Период = Дата;
		НоваяПроводка.Валюта = ВалютаОперации;
		СвойстваСчета = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(РазделУчета);
		НоваяПроводка.Содержание    = Комментарий;

		// Запись оборота бюджета
		Если ФормироватьОборотБюджета Тогда
			НовыйОборот = ОборотыБюджетаНаборЗаписей.Добавить();
			НовыйОборот.Регистратор   = Ссылка;
			НовыйОборот.Период        = Дата;
			НовыйОборот.РазделБюджета = ФинансоваяЦель;
			НовыйОборот.Кошелек       = ОбъектУчета;
			НовыйОборот.Валюта        = ВалютаОперации;
			НовыйОборот.Комментарий   = Комментарий;
		КонецЕсли;
		
		Если СуммыКорректировок.СуммаДоходаОсновная <> 0 Тогда
			
			// Проводка в журнал операций
			НоваяПроводка.СчетДт = РазделУчета;
			НоваяПроводка.СубконтоДт.Вставить(СвойстваСчета.ВидСубконто1, ОбъектУчета);
			Если СвойстваСчета.КоличествоСубконто > 1 Тогда
				НоваяПроводка.СубконтоДт.Вставить(СвойстваСчета.ВидСубконто2, ФинансоваяЦель);
			КонецЕсли; 

			НоваяПроводка.СчетКт = ПланыСчетов.РазделыУчета.Капитал;
			НоваяПроводка.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов, Справочники.СтатьиДоходов.ИзменениеОстатка);
			
			НоваяПроводка.ВалютнаяСумма = СуммыКорректировок.СуммаДоходаОсновная;
			
			// Запись оборота бюджета
			Если ФормироватьОборотБюджета Тогда
				НовыйОборот.Сумма         = СуммыКорректировок.СуммаДоходаОсновная;
				НовыйОборот.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление;
				НовыйОборот.СтатьяБюджета = Справочники.СтатьиДоходов.ИзменениеОстатка;
			КонецЕсли;
			
		ИначеЕсли СуммыКорректировок.СуммаРасходаОсновная <> 0 Тогда
			
			НоваяПроводка.СчетКт = РазделУчета;
			НоваяПроводка.СубконтоКт.Вставить(СвойстваСчета.ВидСубконто1, ОбъектУчета);
			Если СвойстваСчета.КоличествоСубконто > 1 Тогда
				НоваяПроводка.СубконтоКт.Вставить(СвойстваСчета.ВидСубконто2, ФинансоваяЦель);
			КонецЕсли; 

			НоваяПроводка.СчетДт = ПланыСчетов.РазделыУчета.Капитал;
			НоваяПроводка.СубконтоДт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов, Справочники.СтатьиРасходов.ИзменениеОстатка);
			
			НоваяПроводка.ВалютнаяСумма = СуммыКорректировок.СуммаРасходаОсновная;
			
			// Запись оборота бюджета
			Если ФормироватьОборотБюджета Тогда
				НовыйОборот.Сумма         = СуммыКорректировок.СуммаРасходаОсновная;
				НовыйОборот.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание;
				НовыйОборот.СтатьяБюджета = Справочники.СтатьиРасходов.ИзменениеОстатка;
			КонецЕсли;
			
		КонецЕсли; 

	КонецЕсли; 

	Если СуммыКорректировок.СуммаДоходаПоПроцентам <> 0 ИЛИ СуммыКорректировок.СуммаРасходаПоПроцентам <> 0 Тогда
		
		НоваяПроводка = ЖурналОперацийНаборЗаписей.Добавить();
		НоваяПроводка.Регистратор = Ссылка;
		НоваяПроводка.Период = Дата;
		НоваяПроводка.Валюта = ВалютаОперации;
		СчетПроцентов = ПланыСчетов.РазделыУчета.ПроцентыПоДолгам;
		СвойстваСчета = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(СчетПроцентов);
		НоваяПроводка.Содержание = Комментарий;
		
		Если СуммыКорректировок.СуммаДоходаПоПроцентам <> 0 Тогда
			
			НоваяПроводка.СчетДт = СчетПроцентов;
			НоваяПроводка.СубконтоДт.Вставить(СвойстваСчета.ВидСубконто1, ОбъектУчета);

			НоваяПроводка.СчетКт = ПланыСчетов.РазделыУчета.Капитал;
			НоваяПроводка.СубконтоКт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов, Справочники.СтатьиДоходов.ИзменениеОстатка);
			
			НоваяПроводка.ВалютнаяСумма = СуммыКорректировок.СуммаДоходаПоПроцентам;
			
		ИначеЕсли СуммыКорректировок.СуммаРасходаПоПроцентам <> 0 Тогда
			
			НоваяПроводка.СчетКт = СчетПроцентов;
			НоваяПроводка.СубконтоКт.Вставить(СвойстваСчета.ВидСубконто1, ОбъектУчета);

			НоваяПроводка.СчетДт = ПланыСчетов.РазделыУчета.Капитал;
			НоваяПроводка.СубконтоДт.Вставить(ПланыВидовХарактеристик.ВидыСубконто.СтатьиДоходовРасходов, Справочники.СтатьиРасходов.ИзменениеОстатка);
			
			НоваяПроводка.ВалютнаяСумма = СуммыКорректировок.СуммаРасходаПоПроцентам;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОбъектовОперации() Экспорт

	ТаблицаОбъектов = ОбслуживаниеДокументов.НоваяТаблицаРегистраОбъектыОпераций();
	
	ФинЦель = ?(ЗначениеЗаполнено(ФинансоваяЦель) И ФинансоваяЦель <> Справочники.ФинансовыеЦели.ОбщиеНакопления, 
		ФинансоваяЦель, Неопределено);
		
	ЗаписьОбъектаУчета = ТаблицаОбъектов.Добавить();
	ЗаписьОбъектаУчета.Дата           = Дата;
	ЗаписьОбъектаУчета.Операция       = Ссылка;
	ЗаписьОбъектаУчета.РазделУчета    = РазделУчета;
	ЗаписьОбъектаУчета.ПредметУчета   = ОбъектУчета;
	ЗаписьОбъектаУчета.ФинансоваяЦель = ФинЦель;
	Если ЗаписьОбъектаУчета.РазделУчета = ПланыСчетов.РазделыУчета.Деньги 
		ИЛИ ЗаписьОбъектаУчета.РазделУчета.Родитель = ПланыСчетов.РазделыУчета.Деньги  Тогда
		Если СуммаДохода > 0 Тогда 
			ЗаписьОбъектаУчета.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление;
		Иначе
			ЗаписьОбъектаУчета.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание;
		КонецЕсли; 
	КонецЕсли; 
	Если СуммаДохода > 0 Тогда 
		ЗаписьОбъектаУчета.СуммаПоступления = СуммаДохода;
	Иначе
		ЗаписьОбъектаУчета.СуммаСписания = СуммаРасхода;
	КонецЕсли; 
	ЗаписьОбъектаУчета.Валюта = ВалютаОперации;

	ЗаписьСтатьи = ТаблицаОбъектов.Добавить();
	ЗаписьСтатьи.Дата           = Дата;
	ЗаписьСтатьи.Операция       = Ссылка;
	ЗаписьСтатьи.РазделУчета    = ПланыСчетов.РазделыУчета.Капитал;
	ЗаписьСтатьи.ФинансоваяЦель = ФинЦель;
	Если СуммаДохода > 0 Тогда 
		ЗаписьСтатьи.ТипПоказателя    = Перечисления.ТипыБюджетныхПоказателей.Поступление;
		ЗаписьСтатьи.ПредметУчета     = Справочники.СтатьиДоходов.ИзменениеОстатка;
		ЗаписьСтатьи.СуммаПоступления = СуммаДохода;
	Иначе
		ЗаписьСтатьи.ТипПоказателя    = Перечисления.ТипыБюджетныхПоказателей.Списание;
		ЗаписьСтатьи.ПредметУчета     = Справочники.СтатьиРасходов.ИзменениеОстатка;
		ЗаписьСтатьи.СуммаСписания    = СуммаРасхода;
	КонецЕсли; 
	ЗаписьСтатьи.Валюта = ВалютаОперации;
	
	Если ЗначениеЗаполнено(ФинЦель) Тогда
		
		ЗаписьНабора = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗаписьОбъектаУчета);
		ЗаписьНабора.ФинансоваяЦель = Неопределено;
		
		ЗаписьНабора = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗаписьСтатьи);
		ЗаписьНабора.ФинансоваяЦель = Неопределено;
		
	КонецЕсли; 
	
	ДополнительныеСвойства.Вставить("ТаблицыДокумента", Новый Структура);
	ДополнительныеСвойства.ТаблицыДокумента.Вставить("ОбъектыОперации", ТаблицаОбъектов);
	
КонецПроцедуры

#КонецОбласти	


#КонецЕсли
