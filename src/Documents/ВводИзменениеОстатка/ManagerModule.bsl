#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ПрограммныйИнтерфейс

// Вычисляет и записывает в документ сумму разницы между текущим остатком и новым
//	В зависимости от вычисленной суммы в документе заполняется сумма дохода или сумма расхода
//
//Параметры:
//	ДокументКорректировки	- ДокументОбъект - корректировка остатка
//
Процедура РассчитатьСуммуДоходаИлиРасхода(ДокументКорректировки) Экспорт

	ЭтоДолги = ДокументКорректировки.РазделУчета.Родитель = ПланыСчетов.РазделыУчета.Долги;
	
	// Документ еще не записан - ДокументКорректировки.Ссылка.МоментВремени() использовать нельзя.
	МоментОстатка = Новый МоментВремени(ДокументКорректировки.Дата, ДокументКорректировки.Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субконто", ДокументКорректировки.ОбъектУчета);
	Запрос.УстановитьПараметр("ФинЦель", ДокументКорректировки.ФинансоваяЦель);
	Запрос.УстановитьПараметр("Период", МоментОстатка);
	Запрос.УстановитьПараметр("Счет", ?(ЭтоДолги, ПланыСчетов.РазделыУчета.Долги, ДокументКорректировки.РазделУчета));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОперацийОстаткиИОбороты.Счет КАК Счет,
	|	ЖурналОперацийОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.ОстаткиИОбороты(&Период, &Период, Период, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&Счет), , Субконто1 = &Субконто 
	|		//УсловиеСубконто2
	|		) КАК ЖурналОперацийОстаткиИОбороты";
	
	Если ДокументКорректировки.РазделУчета = ПланыСчетов.РазделыУчета.Накопления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловиеСубконто2", "И Субконто2 = &ФинЦель");
	КонецЕсли; 
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ТекущийОстаток = 0;
	ТекущийОстатокПроцентов = 0;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Счет = ПланыСчетов.РазделыУчета.ПроцентыПоДолгам Тогда
			ТекущийОстатокПроцентов = ?(Выборка.Остаток = NULL, 0, Выборка.Остаток);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Счет) Тогда
			ТекущийОстаток = ?(Выборка.Остаток = NULL, 0, Выборка.Остаток);
		КонецЕсли; 
	КонецЦикла;
	
	ДокументКорректировки.СуммаДохода                 = 0;
	ДокументКорректировки.СуммаРасхода                = 0;
	СуммыКорректировок = СтруктураСуммКорректировок();
	
	СуммаКорректировкиОсновная = ДокументКорректировки.СуммаНовогоОстатка - ТекущийОстаток;
	Если СуммаКорректировкиОсновная > 0 Тогда
		СуммыКорректировок.СуммаДоходаОсновная   = СуммаКорректировкиОсновная;
	ИначеЕсли СуммаКорректировкиОсновная < 0 Тогда
		СуммыКорректировок.СуммаРасходаОсновная  = -СуммаКорректировкиОсновная;
	КонецЕсли; 
	
	Если ЭтоДолги Тогда
		СуммаКорректировкиПроцентов      = ДокументКорректировки.СуммаНовогоОстаткаПроцентов - ТекущийОстатокПроцентов;
		Если СуммаКорректировкиПроцентов > 0 Тогда
			СуммыКорректировок.СуммаДоходаПоПроцентам   = СуммаКорректировкиПроцентов;
		ИначеЕсли СуммаКорректировкиПроцентов < 0 Тогда
			СуммыКорректировок.СуммаРасходаПоПроцентам  = -СуммаКорректировкиПроцентов;
		КонецЕсли; 
	КонецЕсли; 
	
	ДокументКорректировки.СуммаДохода  = СуммыКорректировок.СуммаДоходаОсновная  + СуммыКорректировок.СуммаДоходаПоПроцентам;
	ДокументКорректировки.СуммаРасхода = СуммыКорректировок.СуммаРасходаОсновная + СуммыКорректировок.СуммаРасходаПоПроцентам;
	
	ДокументКорректировки.ДополнительныеСвойства.Вставить("СуммыКорректировок", СуммыКорректировок);
	
КонецПроцедуры

// Проверяет, равны ли остатки после проведения документа заданным
//
Функция ОстаткиВерны(Ссылка) Экспорт
	
	Если НЕ Ссылка.Проведен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоДолги = Ссылка.РазделУчета.ПринадлежитЭлементу(ПланыСчетов.РазделыУчета.Долги);
	ЭтоНакопления = (Ссылка.РазделУчета = ПланыСчетов.РазделыУчета.Накопления);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счет", ?(ЭтоДолги, ПланыСчетов.РазделыУчета.Долги, Ссылка.РазделУчета));
	Запрос.УстановитьПараметр("ОбъектУчета", Ссылка.ОбъектУчета);
	Запрос.УстановитьПараметр("ФинансоваяЦель", Ссылка.ФинансоваяЦель);
	Запрос.УстановитьПараметр("Валюта", Ссылка.ВалютаОперации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналОперацийОстатки.Счет,
	|	ЖурналОперацийОстатки.ВалютнаяСуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.ЖурналОпераций.Остатки(
	|			&Период,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Валюта = &Валюта
	|				И Субконто1 = &ОбъектУчета
	|				И (&Счет <> ЗНАЧЕНИЕ(ПланСчетов.РазделыУчета.Накопления)
	|					ИЛИ Субконто2 = &ФинансоваяЦель)) КАК ЖурналОперацийОстатки";
	
	ТаблицаИтогов = Запрос.Выполнить().Выгрузить();
	
	Если ЭтоДолги Тогда
		
		Строка = ТаблицаИтогов.Найти(ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов, "Счет");
		Если Строка = Неопределено ИЛИ Строка.ВалютнаяСуммаОстаток <> Ссылка.СуммаНовогоОстатка Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Строка = ТаблицаИтогов.Найти(ПланыСчетов.РазделыУчета.ПроцентыПоДолгам, "Счет");
		Если Строка = Неопределено ИЛИ Строка.ВалютнаяСуммаОстаток <> Ссылка.СуммаНовогоОстаткаПроцентов Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Строка = ТаблицаИтогов.Найти(Ссылка.РазделУчета, "Счет");
		Если Строка = Неопределено ИЛИ Строка.ВалютнаяСуммаОстаток <> Ссылка.СуммаНовогоОстатка Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СкорректироватьОстатокНаДату(Дата, Кошелек, НовыйОстаток) Экспорт

	ДокументНаДату = ПолучитьДокументКорректировкиНаДату(Дата, Кошелек);
	Если ЗначениеЗаполнено(ДокументНаДату) Тогда
		ДокументОбъект = ДокументНаДату.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ВводИзменениеОстатка.СоздатьДокумент();
	КонецЕсли; 
	
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.Кошелек = Кошелек;
	ДокументОбъект.ПометкаУдаления = Ложь;
	ДокументОбъект.СуммаНовогоОстатка = НовыйОстаток;
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
	Возврат ДокументОбъект.Ссылка;

КонецФункции

// Записывает в регистр сведений информацию об использованных в документе объектах учета.
//	Данная информация является вспомогательной и не зависит от проведенности или пометки на удаление документа
//
//Параметры:
//	СсылкаНаДокумент       - ДокументСсылка.Расход - регистратор движений
//	ДополнительныеСвойства - Структура - сордержит дополнительные свойства документа
//	ТаблицыДокумента       - Структура - набор таблиц с информацией о документе (см. СтруктураТаблицФормированияДвижений())
//
Процедура ЗаписатьОбъектыОперации(ОбъектОперации) Экспорт

	НаборЗаписей = РегистрыСведений.ОбъектыОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Операция.Установить(ОбъектОперации.Ссылка);
	
	ФинЦель = ?(ЗначениеЗаполнено(ОбъектОперации.ФинансоваяЦель) И ОбъектОперации.ФинансоваяЦель <> Справочники.ФинансовыеЦели.ОбщиеНакопления, 
		ОбъектОперации.ФинансоваяЦель, Неопределено);
		
	ЗаписьОбъектаУчета = НаборЗаписей.Добавить();
	ЗаписьОбъектаУчета.Дата           = ОбъектОперации.Дата;
	ЗаписьОбъектаУчета.Операция       = ОбъектОперации.Ссылка;
	ЗаписьОбъектаУчета.РазделУчета    = ОбъектОперации.РазделУчета;
	ЗаписьОбъектаУчета.ПредметУчета   = ОбъектОперации.ОбъектУчета;
	ЗаписьОбъектаУчета.ФинансоваяЦель = ФинЦель;
	Если ЗаписьОбъектаУчета.РазделУчета = ПланыСчетов.РазделыУчета.Деньги 
		ИЛИ ЗаписьОбъектаУчета.РазделУчета.Родитель = ПланыСчетов.РазделыУчета.Деньги  Тогда
		Если ОбъектОперации.СуммаДохода > 0 Тогда 
			ЗаписьОбъектаУчета.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Поступление;
		Иначе
			ЗаписьОбъектаУчета.ТипПоказателя = Перечисления.ТипыБюджетныхПоказателей.Списание;
		КонецЕсли; 
	КонецЕсли; 
	Если ОбъектОперации.СуммаДохода > 0 Тогда 
		ЗаписьОбъектаУчета.СуммаПоступления = ОбъектОперации.СуммаДохода;
	Иначе
		ЗаписьОбъектаУчета.СуммаСписания = ОбъектОперации.СуммаРасхода;
	КонецЕсли; 
	ЗаписьОбъектаУчета.Валюта = ОбъектОперации.ВалютаОперации;

	ЗаписьСтатьи = НаборЗаписей.Добавить();
	ЗаписьСтатьи.Дата           = ОбъектОперации.Дата;
	ЗаписьСтатьи.Операция       = ОбъектОперации.Ссылка;
	ЗаписьСтатьи.РазделУчета    = ПланыСчетов.РазделыУчета.Капитал;
	ЗаписьСтатьи.ФинансоваяЦель = ФинЦель;
	Если ОбъектОперации.СуммаДохода > 0 Тогда 
		ЗаписьСтатьи.ТипПоказателя    = Перечисления.ТипыБюджетныхПоказателей.Поступление;
		ЗаписьСтатьи.ПредметУчета     = Справочники.СтатьиДоходов.ИзменениеОстатка;
		ЗаписьСтатьи.СуммаПоступления = ОбъектОперации.СуммаДохода;
	Иначе
		ЗаписьСтатьи.ТипПоказателя    = Перечисления.ТипыБюджетныхПоказателей.Списание;
		ЗаписьСтатьи.ПредметУчета     = Справочники.СтатьиРасходов.ИзменениеОстатка;
		ЗаписьСтатьи.СуммаСписания    = ОбъектОперации.СуммаРасхода;
	КонецЕсли; 
	ЗаписьСтатьи.Валюта = ОбъектОперации.ВалютаОперации;
	
	Если ЗначениеЗаполнено(ФинЦель) Тогда
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗаписьОбъектаУчета);
		ЗаписьНабора.ФинансоваяЦель = Неопределено;
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗаписьСтатьи);
		ЗаписьНабора.ФинансоваяЦель = Неопределено;
		
	КонецЕсли; 
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Удаляет документы ввода/изменения остакта по указанному объекту учета
//
//Параметры:
//	Ссылка - СправочникСсылка - объект учета, по которому нужно удалить документы
//	Отказ - булево - возвращаемый параметр
//
Процедура УдалитьДокументыОбъектаУчета(Ссылка, Отказ = Ложь) Экспорт
	
	Если Не Метаданные.Документы.ВводИзменениеОстатка.Реквизиты.ОбъектУчета.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводИзменениеОстатка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводИзменениеОстатка КАК ВводИзменениеОстатка
	|ГДЕ
	|	ВводИзменениеОстатка.ОбъектУчета = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("НеВосстанавливатьПоследовательность", Истина);
		ДокументОбъект.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Дата");
	Поля.Добавить("ЭтоШаблон");
	Поля.Добавить("ОписаниеОперации");
	Поля.Добавить("СуммаНовогоОстатка");
	Поля.Добавить("ВалютаОперации");
	Поля.Добавить("ОбъектУчета");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Данные.ЭтоШаблон Тогда
		Представление = ДеньгиКлиентСервер.СокращенноеПредставление(Данные.ОписаниеОперации, 250, Ложь);
	Иначе
		Представление = НСтр("ru='Ввод/изменение остатка от'") + " " + Формат(Данные.Дата, "ДФ='дд.ММ.гггг (ЧЧ:мм)'")
				+ ": " + Формат(Данные.СуммаНовогоОстатка, "ЧДЦ=2; ЧН=0,00") + " " + Данные.ВалютаОперации
				+ " " + ДеньгиКлиентСервер.СокращенноеПредставление(Данные.ОбъектУчета)
				; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция СтруктураСуммКорректировок()
	
	Результат = Новый Структура;
	Результат.Вставить("СуммаДоходаОсновная", 0);
	Результат.Вставить("СуммаДоходаПоПроцентам", 0);
	Результат.Вставить("СуммаРасходаОсновная", 0);
	Результат.Вставить("СуммаРасходаПоПроцентам", 0);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументКорректировкиНаДату(Дата, Кошелек, ИсключаемыеДокументы = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(Дата));
	Запрос.УстановитьПараметр("Кошелек", Кошелек);
	Запрос.УстановитьПараметр("ИсключаемыеДокументы", ?(ИсключаемыеДокументы = Неопределено, Документы.ВводИзменениеОстатка.ПустаяСсылка(), ИсключаемыеДокументы));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводИзменениеОстатка.Ссылка
	|ИЗ
	|	Документ.ВводИзменениеОстатка КАК ВводИзменениеОстатка
	|ГДЕ
	|	ВводИзменениеОстатка.Кошелек = &Кошелек
	|	И ВводИзменениеОстатка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И (НЕ ВводИзменениеОстатка.Ссылка В (&ИсключаемыеДокументы))
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ВводИзменениеОстатка.ПустаяСсылка();
	КонецЕсли; 

КонецФункции


#КонецОбласти



#КонецЕсли
