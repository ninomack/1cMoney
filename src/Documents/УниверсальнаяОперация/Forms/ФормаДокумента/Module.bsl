&НаКлиенте
Перем ДополнительныеПараметрыНаКлиенте Экспорт;



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	#Область ПрикрепленныеФайлы
	МедиаФайлы = ПрикрепленныеФайлыСервер.ПрочитатьСписокФайлов(Объект.Ссылка);
	#КонецОбласти
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Записан элемент справочника" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ИмяСправочника = Неопределено;
		Ссылка = Неопределено;
		Если Параметр.Свойство("ИмяСправочника", ИмяСправочника) И ИмяСправочника = "СтатьиРасходов"
			И Параметр.Свойство("Ссылка", Ссылка) И ЗначениеЗаполнено(Ссылка) Тогда
			МассивСтрок = Объект.Расходы.НайтиСтроки(Новый Структура("СтатьяРасхода", Ссылка));
			Для каждого Строка Из МассивСтрок Цикл
				РасходыСтатьяРасходаПриИзмененииСервер(Строка.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЕсли; 
	ИначеЕсли ИмяСобытия = "Записана операция" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ФормаВладельца = Неопределено;
		Если Параметр.Свойство("ВладелецФормы", ФормаВладельца) И ФормаВладельца = ЭтаФорма.УникальныйИдентификатор И Параметр.ЭтоШаблон <> Объект.ЭтоШаблон Тогда
			ЗаполнитьДанныеПоШаблону(Параметр.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	#Область ПрикрепленныеФайлы
	Если (ПрикрепленныеФайлыКлиент.ЭтоПрикреплениеФайла(ЭтаФорма, ИмяСобытия, Источник))Тогда
		ПрикрепленныеФайлыКлиент.ДобавитьФайлВСписокФормы(ЭтотОбъект, Параметр); 
	КонецЕсли;
	#КонецОбласти
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Интерактивная проверка содержимого
	Если Объект.Расходы.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Расходы[Объект.Расходы.Количество() - 1].СтатьяРасхода) Тогда
		Объект.Расходы.Удалить(Объект.Расходы[Объект.Расходы.Количество() - 1]);
	КонецЕсли; 
	Если Объект.Доходы.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Доходы[Объект.Доходы.Количество() - 1].СтатьяДохода) Тогда
		Объект.Доходы.Удалить(Объект.Доходы[Объект.Доходы.Количество() - 1]);
	КонецЕсли; 
	Если Объект.Перемещения.Количество() > 0 
			И НЕ ЗначениеЗаполнено(Объект.Перемещения[Объект.Перемещения.Количество() - 1].ОбъектУчетаКт)
			И НЕ ЗначениеЗаполнено(Объект.Перемещения[Объект.Перемещения.Количество() - 1].ОбъектУчетаДт) Тогда
		Объект.Перемещения.Удалить(Объект.Перемещения[Объект.Перемещения.Количество() - 1]);
	КонецЕсли; 
	
	// Обслуживание плановых операций
	ПлановыеОперацииКлиент.ПередЗаписьюДокумента(ЭтаФорма, Отказ, ПараметрыЗаписи);
	// Общий функционал перед записью документов
	ОбслуживаниеДокументовКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обслуживание плановых операций
	Документы.УниверсальнаяОперация.ОбновитьИтоговыеСуммыДокумента(ТекущийОбъект);
	ПлановыеОперации.ПроверкаПлановПередЗаписьюДокумента(ТекущийОбъект, ПараметрыЗаписи, ЭтотОбъект);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыСервер.ОбработатьИЗаписатьДанныеМультимедиа(МедиаФайлы, ТекущийОбъект.Ссылка);
	#КонецОбласти 	
	
	ЗаполнитьДобавленныеКолонки();
	ПараметрыСеанса.ДатаПоследнейОперации = ТекущийОбъект.Дата;
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Записана операция", Новый Структура("Дата, ВидДокумента, Ссылка, ЭтоШаблон, ВладелецФормы", 
			Объект.Дата, "УниверсальнаяОперация", Объект.Ссылка, Объект.ЭтоШаблон, 
			?(ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения"), ВладелецФормы.УникальныйИдентификатор, Неопределено)));
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Общий функционал перед закрытием форм документов
	ОбслуживаниеДокументовКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И Открыта() Тогда
		Закрыть(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	РаботаСФормамиДокументовКлиентСервер.ОбновитьЗаголовкиКомандФормы(ЭтотОбъект);
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИзменитьРасписание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПлановыеОперацииКлиент.ОткрытьРедакторРасписания(ЭтаФорма);
	
КонецПроцедуры

// Обслуживание плановых операций
&НаКлиенте
Процедура ИнформацияОШаблонеНажатие(Элемент, СтандартнаяОбработка)
	
	ПлановыеОперацииКлиент.ИнформацияОШаблонеНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, "УниверсальнаяОперация");
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиВШапке(Элемент)
	
	АналитикаСтатейКлиент.ПриИзмененииАналитикиВШапке(ЭтаФорма, Элемент);
	
КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиВТаблице(Элемент)
	
	Если Найти(Элемент.Имя, "Доходы") = 1 Тогда
		ИмяТаблицы = "Доходы";
	ИначеЕсли Найти(Элемент.Имя, "Расходы") = 1 Тогда
		ИмяТаблицы = "Расходы";
	Иначе
		Возврат;
	КонецЕсли; 
	
	АналитикаСтатейКлиент.ПриИзмененииАналитикиВТаблице(ЭтаФорма, Элемент, ИмяТаблицы);
	
КонецПроцедуры

#Область ПрикрепленныеФайлы

&НаКлиенте
Процедура ПредставлениеФайловОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ПрикрепленныеФайлыКлиент.ОбработчикНажатияНаПредставлениеФайлов(ЭтотОбъект, СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
КонецПроцедуры

#КонецОбласти 


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДоходы

&НаКлиенте
Процедура ДоходыПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Обслуживание аналитики статей:
	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяДохода) Тогда
		ДоходыСтатьяДоходаПриИзмененииСервер(Элементы.Доходы.ТекущаяСтрока);
	КонецЕсли;
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПриОкончанииРедактированияСтрокиТабличнойЧасти(ЭтаФорма, Ложь, "Доходы", ТекущиеДанные);
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыПослеУдаления(Элемент)

	// Обслуживание аналитики статей:
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПослеУдаленияСтрокиТабличнойЧасти(ЭтаФорма, Ложь, "Доходы");
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСтатьяДоходаПриИзменении(Элемент)
	
	ДоходыСтатьяДоходаПриИзмененииСервер(Элементы.Доходы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСтатьяДоходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСубконтоПриИзменении(Элемент)
	
	ИзменениеСубконтоСервер("Доходы", Элементы.Доходы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		// РасширенныйВыбор
		ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Конец РасширенныйВыбор
	Иначе
		
		СтрокаТабЧасти = Элементы.Доходы.ТекущиеДанные;
		Если СтрокаТабЧасти <> Неопределено Тогда
			СвойстваВыбранногоЗначения = ПолучитьСтруктуруОписанияВыбранногоОбъектаУчета(ВыбранноеЗначение);
			СтрокаТабЧасти.РазделУчета                 = СвойстваВыбранногоЗначения.РазделУчета;
			СтрокаТабЧасти.ОбъектУчета                 = СвойстваВыбранногоЗначения.ОбъектУчета;
			ВыбранноеЗначение = СтрокаТабЧасти.ОбъектУчета;
		КонецЕсли;
		
		Если Не СтандартнаяОбработка Тогда
			ИзменениеСубконтоСервер("Доходы", Элементы.Доходы.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыФинансоваяЦельПриИзменении(Элемент)
	
	ПриИзмененииФинансоваяЦель("Доходы", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыКомментарийСтрокиПриИзменении(Элемент)
	ПриИзмененииКомментарийСтроки("Доходы");
КонецПроцедуры

&НаКлиенте
Процедура ДоходыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Доходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.Сумма;
	
	Для Каждого ИДСтроки Из Элементы.Доходы.ВыделенныеСтроки Цикл
		СтрокаДокумента = Объект.Доходы.НайтиПоИдентификатору(ИДСтроки);
		СтрокаДокумента.Сумма = НовоеЗначение;
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле = Элементы.РасходыКоличество ИЛИ Поле = Элементы.РасходыЦена) Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные.КоличественныйУчет И ТекущиеДанные.Количество = 0 Тогда
			
			ТекстВопроса = НСтр("ru = 
			|'У статьи ""%1"" отключен количественный учет -
			|ввод количества и цены недоступен.
			|
			|Включить учет количества и цены для этой статьи?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекущиеДанные.СтатьяРасхода);
			ДополнительныеПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
			ОбработчикОтвета = Новый ОписаниеОповещения("РасходыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0;
	
	// Обслуживание аналитики статей:
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасхода) Тогда
		РасходыСтатьяРасходаПриИзмененииСервер(Элементы.Расходы.ТекущаяСтрока);
	КонецЕсли;
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПриОкончанииРедактированияСтрокиТабличнойЧасти(ЭтаФорма, Истина, "Расходы", ТекущиеДанные);
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	
	ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0;
	
	// Обслуживание аналитики статей:
	Если НЕ АналитикаСтатейКлиент.ВидимостьЭлементовШапкиИзменилась(ЭтаФорма) Тогда
		АналитикаСтатейКлиент.ПослеУдаленияСтрокиТабличнойЧасти(ЭтаФорма, Истина, "Расходы");
	Иначе
		УправлениеРеквизитамиАналитики();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходаПриИзменении(Элемент)
	РасходыСтатьяРасходаПриИзмененииСервер(Элементы.Расходы.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСубконтоПриИзменении(Элемент)
	
	ИзменениеСубконтоСервер("Расходы", Элементы.Расходы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыФинансоваяЦельОткудаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Расходы.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Или Не ВидимостьФинЦелиРасходы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ФинансоваяЦельОткуда) Тогда
		ДанныеСтроки.ФинансоваяЦельОткуда = ?(ЗначениеЗаполнено(ДанныеСтроки.ФинансоваяЦель), ДанныеСтроки.ФинансоваяЦель, 
					ПредопределенноеЗначение("Справочник.ФинансовыеЦели.ОбщиеНакопления"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСубконтоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		// РасширенныйВыбор
		ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Конец РасширенныйВыбор
	Иначе
		
		СтрокаТабЧасти = Элементы.Расходы.ТекущиеДанные;
		Если СтрокаТабЧасти <> Неопределено Тогда
			СвойстваВыбранногоЗначения = ПолучитьСтруктуруОписанияВыбранногоОбъектаУчета(ВыбранноеЗначение);
			СтрокаТабЧасти.РазделУчета                  = СвойстваВыбранногоЗначения.РазделУчета;
			СтрокаТабЧасти.ОбъектУчета                  = СвойстваВыбранногоЗначения.ОбъектУчета;
			ВыбранноеЗначение = СтрокаТабЧасти.ОбъектУчета;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	ИзмененоКоличество = (Элемент = Элементы.РасходыКоличество);
	ИзмененаЦена       = (Элемент = Элементы.РасходыЦена);
	НовоеЗначение      = ?(ИзмененоКоличество, ТекущиеДанные.Количество, ТекущиеДанные.Цена);
	
	Для Каждого ИДСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Расходы.НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаДокумента.КоличественныйУчет Тогда
			Если ИзмененоКоличество Тогда
				СтрокаДокумента.Количество = НовоеЗначение;
			Иначе
				СтрокаДокумента.Цена = НовоеЗначение;
			КонецЕсли; 
		КонецЕсли; 
		
		Если СтрокаДокумента.Количество <> 0 И СтрокаДокумента.Цена = 0 И ИзмененоКоличество Тогда
			СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
		ИначеЕсли СтрокаДокумента.Количество = 0 И СтрокаДокумента.Цена <> 0 Тогда
			Если ИзмененоКоличество Тогда
				СтрокаДокумента.Цена = 0;
			Иначе
				СтрокаДокумента.Количество = СтрокаДокумента.Сумма / СтрокаДокумента.Цена;
			КонецЕсли;
		Иначе
			СтрокаДокумента.Сумма = СтрокаДокумента.Количество * СтрокаДокумента.Цена;
		КонецЕсли;
		
		СтрокаДокумента.ЕстьКоличество = (СтрокаДокумента.Количество <> 0);
		
	КонецЦикла; 
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	// Если количество есть, но кол. учет по статье не включен, значит он был включен раньше. Введенное ранее кол-во мы не очищаем.
	// Поэтому кол-во никогда не обнуляем. А если оно введено, пересчитываем цену.
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.Сумма;
	
	Для Каждого ИДСтроки Из Элементы.Расходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Расходы.НайтиПоИдентификатору(ИДСтроки);
		СтрокаДокумента.Сумма = НовоеЗначение;
		
		Если СтрокаДокумента.КоличественныйУчет Тогда
			Если СтрокаДокумента.Количество = 0 И СтрокаДокумента.Цена <> 0 Тогда
				СтрокаДокумента.Количество = СтрокаДокумента.Сумма / СтрокаДокумента.Цена;
			ИначеЕсли СтрокаДокумента.Количество <> 0 Тогда
				СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
			КонецЕсли; 
		Иначе
			Если СтрокаДокумента.Количество <> 0 Тогда
				СтрокаДокумента.Цена = СтрокаДокумента.Сумма / СтрокаДокумента.Количество;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла; 
	
	ТекущиеДанные.ЕстьКоличество = (ТекущиеДанные.Количество <> 0);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыФинансоваяЦельПриИзменении(Элемент)
	
	ПриИзмененииФинансоваяЦель("Расходы", "");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКомментарийСтрокиПриИзменении(Элемент)
	ПриИзмененииКомментарийСтроки("Расходы");
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПеремещения

&НаКлиенте
Процедура ПеремещенияПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияСубконтоКтПриИзменении(Элемент)
	
	ИзменениеСубконтоПеремещенияСервер(Элементы.Перемещения.ТекущаяСтрока, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияСубконтоКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		// РасширенныйВыбор
		ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Конец РасширенныйВыбор
	Иначе
		
		СтрокаТабЧасти = Элементы.Перемещения.ТекущиеДанные;
		Если СтрокаТабЧасти <> Неопределено Тогда
			СвойстваВыбранногоЗначения = ПолучитьСтруктуруОписанияВыбранногоОбъектаУчета(ВыбранноеЗначение);
			СтрокаТабЧасти.РазделУчетаКт                      = СвойстваВыбранногоЗначения.РазделУчета;
			СтрокаТабЧасти.ОбъектУчетаКт                      = СвойстваВыбранногоЗначения.ОбъектУчета;
			ВыбранноеЗначение = СтрокаТабЧасти.ОбъектУчетаКт;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияСубконтоДтПриИзменении(Элемент)
	
	ИзменениеСубконтоПеремещенияСервер(Элементы.Перемещения.ТекущаяСтрока, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияСубконтоДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		// РасширенныйВыбор
		ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Конец РасширенныйВыбор
	Иначе
		
		СтрокаТабЧасти = Элементы.Перемещения.ТекущиеДанные;
		Если СтрокаТабЧасти <> Неопределено Тогда
			СвойстваВыбранногоЗначения = ПолучитьСтруктуруОписанияВыбранногоОбъектаУчета(ВыбранноеЗначение);
			СтрокаТабЧасти.РазделУчетаДт                      = СвойстваВыбранногоЗначения.РазделУчета;
			СтрокаТабЧасти.ОбъектУчетаДт                      = СвойстваВыбранногоЗначения.ОбъектУчета;
			ВыбранноеЗначение = СтрокаТабЧасти.ОбъектУчетаДт;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияФинансоваяЦельКтПриИзменении(Элемент)
	
	ПриИзмененииФинансоваяЦель("Перемещения", "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияФинансоваяЦельДтПриИзменении(Элемент)
	
	ПриИзмененииФинансоваяЦель("Перемещения", "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияКомментарийСтрокиПриИзменении(Элемент)
	ПриИзмененииКомментарийСтроки("Перемещения");
КонецПроцедуры

&НаКлиенте
Процедура ПеремещенияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Перемещения.ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.Сумма;
	
	Для Каждого ИДСтроки Из Элементы.Перемещения.ВыделенныеСтроки Цикл
		СтрокаДокумента = Объект.Перемещения.НайтиПоИдентификатору(ИДСтроки);
		СтрокаДокумента.Сумма = НовоеЗначение;
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыНакопления

&НаКлиенте
Процедура НакопленияФинансоваяЦельПриИзменении(Элемент)
	
	НакопленияФинансоваяЦельПриИзмененииСервер(Элементы.Накопления.ТекущаяСтрока);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоРасходамИПереводам(Команда)
	
	Если Объект.Накопления.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'В таблице уже есть строки с тратами на цель. 
			|Очистить таблицу перед заполнением?'");
		ОбработчикОтвета = Новый ОписаниеОповещения("ЗаполнитьПоРасходамИПереводамЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Если ЗаполнитьТаблицуКорректировкиЦелей() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'В расходах и переводах не найдено сумм, потраченных из накоплений на финансовые цели.'");
			ПоказатьПредупреждение(, ТекстСообщения);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьРасходыНаЦели(Команда)
	
	Если Элементы.ФормаПоказатьРасходыНаЦели.Пометка И Объект.Накопления.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить все строки расходов на цели?'") ;
		ОбработчикОтвета = Новый ОписаниеОповещения("ПоказатьРасходыНаЦелиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		Элементы.ФормаПоказатьРасходыНаЦели.Пометка = НЕ Элементы.ФормаПоказатьРасходыНаЦели.Пометка;
		УправлениеФормой();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонокАналитики(Команда)

	ЭтоРасход = Элементы.ГруппаСтраницыДокумента.ТекущаяСтраница = Элементы.ГруппаСтраницаРасходы;
	АналитикаСтатейКлиент.ИзменитьНастройкиКолонокАналитики(ЭтаФорма, ЭтоРасход, "УниверсальнаяОперация");

КонецПроцедуры

// Обслуживание аналитики статей:
&НаКлиенте
Процедура НастройкаКолонокАналитикиЗавершение(НастройкиИзменены) Экспорт

	Если НастройкиИзменены Тогда
		УправлениеРеквизитамиАналитики(Истина, Истина);
	КонецЕсли; 

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	// Подготовка реквизитов формы
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтаФорма, "СтатьяДохода", "АналитикаСтатьиДохода", "СтатьяРасхода", "АналитикаСтатьиРасхода", Неопределено);
	
	// Заполнение дополнительных колонок
	ЗаполнитьДобавленныеКолонки();
	
	// настройка стандартных команд формы
	РаботаСФормамиДокументовКлиентСервер.ПереименоватьКнопкиИПанелиФормыДокумента(ЭтаФорма);
	
	// Общие настройки форм элементов документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Проверка работы с шаблонами
	РаботаСФормамиДокументов.ПодготовитьФормуНаСервереПоРаботеСШаблонами(ЭтаФорма);
	
	Элементы.ФормаПоказатьРасходыНаЦели.Пометка = Объект.Накопления.Количество() > 0 ИЛИ ВидимостьФинЦелиРасходы ИЛИ ВидимостьФинЦелиПереводыКт;
	
	#Область ПрикрепленныеФайлы
	ПрикрепленныеФайлыКлиентСервер.ОбновитьПредставлениеМедиафайлов(ЭтотОбъект);
	#КонецОбласти	
	
	// Настройка внешнего вида
	УправлениеФормой();
	
	// Открытие на заполненной вкладке
	Если Объект.Доходы.Количество() > 0  Тогда
		Элементы.ГруппаСтраницыДокумента.ТекущаяСтраница = Элементы.ГруппаСтраницаДоходы;
	ИначеЕсли Объект.Расходы.Количество() > 0  Тогда
		Элементы.ГруппаСтраницыДокумента.ТекущаяСтраница = Элементы.ГруппаСтраницаРасходы;
	ИначеЕсли Объект.Перемещения.Количество() > 0  Тогда
		Элементы.ГруппаСтраницыДокумента.ТекущаяСтраница = Элементы.ГруппаСтраницаПеремещения;
	ИначеЕсли Объект.Накопления.Количество() > 0  Тогда
		Элементы.ГруппаСтраницыДокумента.ТекущаяСтраница = Элементы.ГруппаСтраницаКорректировкаРасходовНаЦель;
	КонецЕсли; 
	
	КартинкаСвободныхДенег = РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоСчету(ПланыСчетов.РазделыУчета.СвободныеДеньги);
	
	// Определение текущей строки
	Если Параметры.Свойство("ОписаниеТекущейСтроки") Тогда
		ОписаниеТекущейСтроки = Параметры.ОписаниеТекущейСтроки;
		// Определим табличную часть:
		Если ОписаниеТекущейСтроки.СчетДт = ПланыСчетов.РазделыУчета.Капитал Тогда
			ТабличнаяЧасть = Объект.Расходы;
			ЭлементТЧ = Элементы.Расходы;
			СтраницаТЧ = Элементы.ГруппаСтраницаРасходы;
			СтруктураПоиска = Новый Структура("СтатьяРасхода, РазделУчета, ОбъектУчета,Сумма",
					ОписаниеТекущейСтроки.СубконтоДт, ОписаниеТекущейСтроки.СчетКт, 
					ОписаниеТекущейСтроки.СубконтоКт, ОписаниеТекущейСтроки.Сумма);
		ИначеЕсли ОписаниеТекущейСтроки.СчетКт = ПланыСчетов.РазделыУчета.Капитал Тогда
			ТабличнаяЧасть = Объект.Доходы;
			ЭлементТЧ = Элементы.Доходы;
			СтраницаТЧ = Элементы.ГруппаСтраницаДоходы;
			СтруктураПоиска = Новый Структура("СтатьяДохода,РазделУчета,ОбъектУчета,Сумма",
					ОписаниеТекущейСтроки.СубконтоКт, ОписаниеТекущейСтроки.СчетДт, 
					ОписаниеТекущейСтроки.СубконтоДт, ОписаниеТекущейСтроки.Сумма);
		Иначе
			ТабличнаяЧасть = Объект.Перемещения;
			ЭлементТЧ = Элементы.Перемещения;
			СтраницаТЧ = Элементы.ГруппаСтраницаПеремещения;
			СтруктураПоиска = Новый Структура("РазделУчетаДт,ОбъектУчетаДт,РазделУчетаКт,ОбъектУчетаКт,Сумма",
					ОписаниеТекущейСтроки.СчетДт, ОписаниеТекущейСтроки.СубконтоДт, 
					ОписаниеТекущейСтроки.СчетКт, ОписаниеТекущейСтроки.СубконтоКт, 
					ОписаниеТекущейСтроки.Сумма);
		КонецЕсли; 
		СтрокиТЧ = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧ.Количество() > 0 Тогда
			СтрокаТЧ = СтрокиТЧ[0].ПолучитьИдентификатор();
			ЭлементТЧ.ТекущаяСтрока = СтрокаТЧ;
			Элементы.ГруппаСтраницыДокумента.ТекущаяСтраница = СтраницаТЧ;
		КонецЕсли; 
		
	КонецЕсли; 
	
	ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонки()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Доходы",   Объект.Доходы.Выгрузить());
	Запрос.УстановитьПараметр("Расходы",  Объект.Расходы.Выгрузить());
	Запрос.УстановитьПараметр("Переводы", Объект.Перемещения.Выгрузить());
	Запрос.УстановитьПараметр("Период",   Объект.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ИспользоватьДляУчетаВыданныхДолгов,
	|	ЛОЖЬ КАК ИспользоватьДляУчетаВзятыхДолгов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДолгов.ВыданныйЗаем) КАК ВидДолга
	|ПОМЕСТИТЬ ВидыДолгов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДолгов.ПолученныйКредит)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблица.СтатьяДохода,
	|	ВремТаблица.РазделУчета,
	|	ВремТаблица.ОбъектУчета,
	|	ВремТаблица.Валюта,
	|	ВремТаблица.Сумма,
	|	ВремТаблица.ФинансоваяЦель,
	|	ВремТаблица.АналитикаСтатьиДохода,
	|	ВремТаблица.КомментарийСтроки
	|ПОМЕСТИТЬ Доходы
	|ИЗ
	|	&Доходы КАК ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблица.СтатьяРасхода,
	|	ВремТаблица.РазделУчета,
	|	ВремТаблица.ОбъектУчета,
	|	ВремТаблица.Валюта,
	|	ВремТаблица.Сумма,
	|	ВремТаблица.Количество,
	|	ВремТаблица.ФинансоваяЦель,
	|	ВремТаблица.ФинансоваяЦельОткуда,
	|	ВремТаблица.АналитикаСтатьиРасхода,
	|	ВремТаблица.КомментарийСтроки
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	&Расходы КАК ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблица.РазделУчетаДт,
	|	ВремТаблица.ОбъектУчетаДт,
	|	ВремТаблица.ФинансоваяЦельДт,
	|	ВремТаблица.РазделУчетаКт,
	|	ВремТаблица.ОбъектУчетаКт,
	|	ВремТаблица.ФинансоваяЦельКт,
	|	ВремТаблица.Валюта,
	|	ВремТаблица.Сумма,
	|	ВремТаблица.СуммаКт,
	|	ВремТаблица.КомментарийСтроки
	|ПОМЕСТИТЬ Переводы
	|ИЗ
	|	&Переводы КАК ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.СтатьяДохода,
	|	Доходы.РазделУчета,
	|	Доходы.ОбъектУчета,
	|	Доходы.Валюта,
	|	Доходы.Сумма,
	|	Доходы.ФинансоваяЦель,
	|	Доходы.АналитикаСтатьиДохода,
	|	Доходы.КомментарийСтроки,
	|	ВЫБОР
	|		КОГДА Доходы.ОбъектУчета ССЫЛКА Справочник.КошелькиИСчета
	|			ТОГДА ВЫРАЗИТЬ(Доходы.ОбъектУчета КАК Справочник.КошелькиИСчета).ТипСчета
	|		КОГДА Доходы.ОбъектУчета ССЫЛКА Справочник.Долги
	|			ТОГДА ЕСТЬNULL(ВидыДолгов.ВидДолга, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипСчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Доходы.ОбъектУчета КАК Справочник.КошелькиИСчета).ИспользоватьДляНакоплений, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидимостьФинЦели
	|ИЗ
	|	Доходы КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыДолгов КАК ВидыДолгов
	|		ПО (Доходы.ОбъектУчета ССЫЛКА Справочник.Долги)
	|			И (ВЫРАЗИТЬ(Доходы.ОбъектУчета КАК Справочник.Долги).ИспользоватьДляУчетаВыданныхДолгов = ВидыДолгов.ИспользоватьДляУчетаВыданныхДолгов)
	|			И (ВЫРАЗИТЬ(Доходы.ОбъектУчета КАК Справочник.Долги).ИспользоватьДляУчетаВзятыхДолгов = ВидыДолгов.ИспользоватьДляУчетаВзятыхДолгов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.СтатьяРасхода,
	|	Расходы.РазделУчета,
	|	Расходы.ОбъектУчета,
	|	Расходы.Валюта,
	|	Расходы.Сумма,
	|	Расходы.Количество,
	|	ВЫБОР
	|		КОГДА Расходы.Количество <> 0
	|			ТОГДА ВЫРАЗИТЬ(Расходы.Сумма / Расходы.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	Расходы.ФинансоваяЦель,
	|	Расходы.ФинансоваяЦельОткуда,
	|	Расходы.АналитикаСтатьиРасхода,
	|	Расходы.КомментарийСтроки,
	|	ВЫБОР
	|		КОГДА Расходы.ОбъектУчета ССЫЛКА Справочник.КошелькиИСчета
	|			ТОГДА ВЫРАЗИТЬ(Расходы.ОбъектУчета КАК Справочник.КошелькиИСчета).ТипСчета
	|		КОГДА Расходы.ОбъектУчета ССЫЛКА Справочник.Долги
	|			ТОГДА ЕСТЬNULL(ВидыДолгов.ВидДолга, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипСчета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Расходы.ОбъектУчета КАК Справочник.КошелькиИСчета).ИспользоватьДляНакоплений, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидимостьФинЦели,
	|	ВЫБОР
	|		КОГДА Расходы.Количество <> 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьКоличество,
	|	ВЫРАЗИТЬ(Расходы.СтатьяРасхода КАК Справочник.СтатьиРасходов).КоличественныйУчет КАК КоличественныйУчет
	|ИЗ
	|	Расходы КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыДолгов КАК ВидыДолгов
	|		ПО (Расходы.ОбъектУчета ССЫЛКА Справочник.Долги)
	|			И (ВЫРАЗИТЬ(Расходы.ОбъектУчета КАК Справочник.Долги).ИспользоватьДляУчетаВыданныхДолгов = ВидыДолгов.ИспользоватьДляУчетаВыданныхДолгов)
	|			И (ВЫРАЗИТЬ(Расходы.ОбъектУчета КАК Справочник.Долги).ИспользоватьДляУчетаВзятыхДолгов = ВидыДолгов.ИспользоватьДляУчетаВзятыхДолгов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Переводы.РазделУчетаДт,
	|	Переводы.ОбъектУчетаДт,
	|	Переводы.ФинансоваяЦельДт,
	|	ВЫБОР
	|		КОГДА Переводы.ОбъектУчетаДт ССЫЛКА Справочник.КошелькиИСчета
	|			ТОГДА ВЫРАЗИТЬ(Переводы.ОбъектУчетаДт КАК Справочник.КошелькиИСчета).ТипСчета
	|		КОГДА Переводы.ОбъектУчетаДт ССЫЛКА Справочник.Долги
	|			ТОГДА ЕСТЬNULL(ВидыДолговДт.ВидДолга, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипСчетаДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Переводы.ОбъектУчетаДт КАК Справочник.КошелькиИСчета).ИспользоватьДляНакоплений, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидимостьФинЦелиДт,
	|	Переводы.РазделУчетаКт,
	|	Переводы.ОбъектУчетаКт,
	|	Переводы.ФинансоваяЦельКт,
	|	ВЫБОР
	|		КОГДА Переводы.ОбъектУчетаКт ССЫЛКА Справочник.КошелькиИСчета
	|			ТОГДА ВЫРАЗИТЬ(Переводы.ОбъектУчетаКт КАК Справочник.КошелькиИСчета).ТипСчета
	|		КОГДА Переводы.ОбъектУчетаКт ССЫЛКА Справочник.Долги
	|			ТОГДА ЕСТЬNULL(ВидыДолговКт.ВидДолга, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ТипСчетаКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(Переводы.ОбъектУчетаКт КАК Справочник.КошелькиИСчета).ИспользоватьДляНакоплений, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидимостьФинЦелиКт,
	|	Переводы.Валюта,
	|	Переводы.Сумма,
	|	Переводы.СуммаКт,
	|	Переводы.КомментарийСтроки
	|ИЗ
	|	Переводы КАК Переводы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыДолгов КАК ВидыДолговДт
	|		ПО (Переводы.ОбъектУчетаДт ССЫЛКА Справочник.Долги)
	|			И (ВЫРАЗИТЬ(Переводы.ОбъектУчетаДт КАК Справочник.Долги).ИспользоватьДляУчетаВыданныхДолгов = ВидыДолговДт.ИспользоватьДляУчетаВыданныхДолгов)
	|			И (ВЫРАЗИТЬ(Переводы.ОбъектУчетаДт КАК Справочник.Долги).ИспользоватьДляУчетаВзятыхДолгов = ВидыДолговДт.ИспользоватьДляУчетаВзятыхДолгов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыДолгов КАК ВидыДолговКт
	|		ПО (Переводы.ОбъектУчетаКт ССЫЛКА Справочник.Долги)
	|			И (ВЫРАЗИТЬ(Переводы.ОбъектУчетаКт КАК Справочник.Долги).ИспользоватьДляУчетаВыданныхДолгов = ВидыДолговКт.ИспользоватьДляУчетаВыданныхДолгов)
	|			И (ВЫРАЗИТЬ(Переводы.ОбъектУчетаКт КАК Справочник.Долги).ИспользоватьДляУчетаВзятыхДолгов = ВидыДолговКт.ИспользоватьДляУчетаВзятыхДолгов)";
	
	ПакетыРезультатов = Запрос.ВыполнитьПакет();
	
	МодифицированностьДоЗагрузки = Модифицированность;
	
	Объект.Доходы.Загрузить(ПакетыРезультатов[4].Выгрузить());
	Объект.Расходы.Загрузить(ПакетыРезультатов[5].Выгрузить());
	Объект.Перемещения.Загрузить(ПакетыРезультатов[6].Выгрузить());

	// Обслуживание аналитики статей:
	АналитикаСтатей.ЗаполнитьРеквизитыАналитикой(ЭтаФорма);
	
	Для Каждого СтрокаДокумента Из Объект.Доходы Цикл
		СтрокаДокумента.КартинкаСчета = РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоСчету(СтрокаДокумента.РазделУчета, СтрокаДокумента.ТипСчета, СтрокаДокумента.ВидимостьФинЦели);
	КонецЦикла; 
	Для Каждого СтрокаДокумента Из Объект.Расходы Цикл
		СтрокаДокумента.КартинкаСчета = РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоСчету(СтрокаДокумента.РазделУчета, СтрокаДокумента.ТипСчета, СтрокаДокумента.ВидимостьФинЦели);
	КонецЦикла; 
	Для Каждого СтрокаДокумента Из Объект.Перемещения Цикл
		СтрокаДокумента.КартинкаСчетаДт = РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоСчету(СтрокаДокумента.РазделУчетаДт, СтрокаДокумента.ТипСчетаДт, СтрокаДокумента.ВидимостьФинЦелиДт);
		СтрокаДокумента.КартинкаСчетаКт = РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоСчету(СтрокаДокумента.РазделУчетаКт, СтрокаДокумента.ТипСчетаКт, СтрокаДокумента.ВидимостьФинЦелиКт);
	КонецЦикла; 
	
	ВидимостьФинЦелиДоходы      = Объект.Доходы.Итог("ВидимостьФинЦели") > 0;
	ВидимостьФинЦелиРасходы     = Объект.Расходы.Итог("ВидимостьФинЦели") > 0;
	ВидимостьФинЦелиПереводыДт  = Объект.Перемещения.Итог("ВидимостьФинЦелиДт") > 0;
	ВидимостьФинЦелиПереводыКт  = Объект.Перемещения.Итог("ВидимостьФинЦелиКт") > 0;

	Модифицированность = МодифицированностьДоЗагрузки;

	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	// Обслуживание плановых операций
	ПлановыеОперацииКлиентСервер.ОбновитьИнформациюОСвязиОперацииСРасписанием(ЭтаФорма);
	РаботаСФормамиДокументовКлиентСервер.ОбновитьСостояниеОперации(ЭтотОбъект);
	
	// Обслуживание аналитики статей:
	УправлениеРеквизитамиАналитики();
	
	Элементы.ГруппаСтраницаКорректировкаРасходовНаЦель.Видимость = Элементы.ФормаПоказатьРасходыНаЦели.Пометка;
	Элементы.НакопленияЗаполнитьПоРасходамИПереводам.Доступность = ВидимостьФинЦелиРасходы ИЛИ ВидимостьФинЦелиПереводыКт;

	РаботаСФормамиДокументовКлиентСервер.ОбновитьЭлементыФормыПоСостояниюОперации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()

	ТаблицаИтогов.Очистить();
	
	ПоВалютам = Объект.Доходы.Выгрузить(, "Валюта, Сумма");
	ПоВалютам.Свернуть("Валюта", "Сумма");
	ДобавитьИтогВТаблицуОстатков(ПоВалютам, "Доход");

	ПоВалютам = Объект.Расходы.Выгрузить(, "Валюта, Сумма");
	ПоВалютам.Свернуть("Валюта", "Сумма");
	ДобавитьИтогВТаблицуОстатков(ПоВалютам, "Расход");

	ПоВалютам = Объект.Перемещения.Выгрузить(, "Валюта, Сумма");
	ПоВалютам.Свернуть("Валюта", "Сумма");
	ДобавитьИтогВТаблицуОстатков(ПоВалютам, "Перемещение");

	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИтогВТаблицуОстатков(ТаблицаПоВалютам, ИмяКолонкиИтога)

	Для Каждого СтрокаВалюты Из ТаблицаПоВалютам Цикл
		
		СтрокаИтога = ТаблицаИтогов.НайтиСтроки(Новый Структура("Валюта", СтрокаВалюты.Валюта));
		Если СтрокаИтога.Количество() = 0 Тогда
			СтрокаИтога = ТаблицаИтогов.Добавить();
			СтрокаИтога.Валюта = СтрокаВалюты.Валюта;
		Иначе
			СтрокаИтога = СтрокаИтога[0];
		КонецЕсли; 
		СтрокаИтога[ИмяКолонкиИтога] = СтрокаИтога[ИмяКолонкиИтога] + СтрокаВалюты.Сумма;
		
	КонецЦикла; 

КонецПроцедуры
 
// Обслуживание аналитики статей:
&НаСервере
Процедура УправлениеРеквизитамиАналитики(ИспользоватьЗначенияПоУмолчанию = Ложь, ПотеряДанныхРазрешена = Ложь)

	АналитикаСтатей.УправлениеФормой(ЭтаФорма, ИспользоватьЗначенияПоУмолчанию, ПотеряДанныхРазрешена);

КонецПроцедуры

// Общие обработчики для табличных частей

&НаКлиенте
Процедура СтрокаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если НЕ Копирование Тогда
			Если Элемент.Имя = "Доходы" ИЛИ Элемент.Имя = "Расходы" Тогда
				ТекущиеДанные.РазделУчета   = ПредопределенноеЗначение("ПланСчетов.РазделыУчета.СвободныеДеньги");
				ТекущиеДанные.КартинкаСчета = КартинкаСвободныхДенег;
			Иначе
				ТекущиеДанные.Валюта   = ВалютаУчета;
				ТекущиеДанные.ВалютаКт = ВалютаУчета;
				ТекущиеДанные.РазделУчетаДт   = ПредопределенноеЗначение("ПланСчетов.РазделыУчета.СвободныеДеньги");
				ТекущиеДанные.РазделУчетаКт   = ТекущиеДанные.РазделУчетаДт;
				ТекущиеДанные.КартинкаСчетаДт = КартинкаСвободныхДенег;
				ТекущиеДанные.КартинкаСчетаКт = КартинкаСвободныхДенег;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Элемент.Имя = "Доходы" ИЛИ Элемент.Имя = "Расходы" Тогда
		СвойстваСчета = РазделыУчетаВызовСервера.ПолучитьСвойстваСчета(ТекущиеДанные.РазделУчета);
		ТекущиеДанные.ОбъектУчета = СвойстваСчета.ВидСубконто1ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОбъектУчета);
		//Элементы[Элемент.Имя + "ОбъектУчета"].ОграничениеТипа = СвойстваСчета.ВидСубконто1ТипЗначения;
	Иначе
		
		СвойстваСчета = РазделыУчетаВызовСервера.ПолучитьСвойстваСчета(ТекущиеДанные.РазделУчетаДт);
		ТекущиеДанные.ОбъектУчетаДт = СвойстваСчета.ВидСубконто1ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОбъектУчетаДт);
		//Элементы[Элемент.Имя + "ОбъектУчетаДт"].ОграничениеТипа = СвойстваСчета.ВидСубконто1ТипЗначения;
		
		СвойстваСчета = РазделыУчетаВызовСервера.ПолучитьСвойстваСчета(ТекущиеДанные.РазделУчетаКт);
		ТекущиеДанные.ОбъектУчетаКт = СвойстваСчета.ВидСубконто1ТипЗначения.ПривестиЗначение(ТекущиеДанные.ОбъектУчетаКт);
		//Элементы[Элемент.Имя + "ОбъектУчетаКт"].ОграничениеТипа = СвойстваСчета.ВидСубконто1ТипЗначения;
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ИзменениеСубконтоСервер(ИмяТабличнойЧасти, ИндексСтроки)

	ТекущиеДанные = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИндексСтроки);
	НовоеЗначение = ТекущиеДанные.ОбъектУчета;
	ВалютаСтроки  = ?(ЗначениеЗаполнено(НовоеЗначение), НовоеЗначение.Валюта, ВалютаУчета);
	ПроверитьФинансовуюЦельИРазделУчетаПоОбъектуУчетаСервер(ТекущиеДанные.ОбъектУчета, 
					ТекущиеДанные.ВидимостьФинЦели, ТекущиеДанные.ФинансоваяЦель, 
					ТекущиеДанные.РазделУчета, ?(ИмяТабличнойЧасти = "Расходы", ТекущиеДанные.ФинансоваяЦельОткуда, Неопределено));
	ТипСчета      = ОбщегоНазначенияДеньги.ПолучитьПодтипОбъектаУчета(НовоеЗначение);
	КартинкаСчета = РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоСчету(ТекущиеДанные.РазделУчета, ТипСчета, ТекущиеДанные.ВидимостьФинЦели);
	
	Для Каждого ИДСтроки Из Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки Цикл
		
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СтрокаТабличнойЧасти.ОбъектУчета      = НовоеЗначение;
			СтрокаТабличнойЧасти.РазделУчета      = ТекущиеДанные.РазделУчета;
			ПроверитьФинансовуюЦельИРазделУчетаПоОбъектуУчетаСервер(СтрокаТабличнойЧасти.ОбъектУчета, 
						СтрокаТабличнойЧасти.ВидимостьФинЦели, СтрокаТабличнойЧасти.ФинансоваяЦель, 
						СтрокаТабличнойЧасти.РазделУчета, ?(ИмяТабличнойЧасти = "Расходы", ТекущиеДанные.ФинансоваяЦельОткуда, Неопределено));
			СтрокаТабличнойЧасти.Валюта           = ВалютаСтроки;
			
			СтрокаТабличнойЧасти.ТипСчета         = ТипСчета;
			СтрокаТабличнойЧасти.КартинкаСчета    = КартинкаСчета;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ВидимостьФинЦелиДоходы  = Объект.Доходы.Итог("ВидимостьФинЦели") > 0;
	ВидимостьФинЦелиРасходы = Объект.Расходы.Итог("ВидимостьФинЦели") > 0;

	Если НЕ Элементы.ФормаПоказатьРасходыНаЦели.Пометка Тогда
		Элементы.ФормаПоказатьРасходыНаЦели.Пометка = Объект.Накопления.Количество() > 0 ИЛИ ВидимостьФинЦелиРасходы ИЛИ ВидимостьФинЦелиПереводыКт;
		Элементы.ГруппаСтраницаКорректировкаРасходовНаЦель.Видимость = Элементы.ФормаПоказатьРасходыНаЦели.Пометка;
	КонецЕсли; 
	Элементы.НакопленияЗаполнитьПоРасходамИПереводам.Доступность = ВидимостьФинЦелиРасходы ИЛИ ВидимостьФинЦелиПереводыКт;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСубконтоПеремещенияСервер(ИндексСтроки, Сторона)

	ТекущиеДанные = Объект.Перемещения.НайтиПоИдентификатору(ИндексСтроки);
	РазделДт        = ТекущиеДанные.РазделУчетаДт;
	НовоеЗначениеДт = ТекущиеДанные.ОбъектУчетаДт;
	РазделКт        = ТекущиеДанные.РазделУчетаКт;
	НовоеЗначениеКт = ТекущиеДанные.ОбъектУчетаКт;
	ВалютаСтроки  = ?(ЗначениеЗаполнено(НовоеЗначениеКт), НовоеЗначениеКт.Валюта, ?(ЗначениеЗаполнено(НовоеЗначениеДт), НовоеЗначениеДт.Валюта, ВалютаУчета));
	
	ПроверитьФинансовуюЦельИРазделУчетаПоОбъектуУчетаСервер(ТекущиеДанные["ОбъектУчета" + Сторона], ТекущиеДанные["ВидимостьФинЦели" + Сторона], ТекущиеДанные["ФинансоваяЦель" + Сторона], ТекущиеДанные["РазделУчета" + Сторона]);
	ТипСчета = ОбщегоНазначенияДеньги.ПолучитьПодтипОбъектаУчета(ТекущиеДанные["ОбъектУчета" + Сторона]);
	КартинкаСчета = РаботаСФормамиДокументовПовтИсп.ПолучитьИконкуПоСчету(ТекущиеДанные["РазделУчета" + Сторона], ТипСчета, ТекущиеДанные["ВидимостьФинЦели" + Сторона]);
	
	СвойстваСчетаДт = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(РазделДт);
	СвойстваСчетаКт = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(РазделКт);
	//Если Сторона = "Кт" Тогда
	//	Элементы.ПеремещенияОбъектУчетаКт.ОграничениеТипа = СвойстваСчетаКт.ВидСубконто1ТипЗначения;
	//Иначе
	//	Элементы.ПеремещенияОбъектУчетаДт.ОграничениеТипа = СвойстваСчетаДт.ВидСубконто1ТипЗначения;
	//КонецЕсли; 
	
	Для Каждого ИДСтроки Из Элементы.Перемещения.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Перемещения.НайтиПоИдентификатору(ИДСтроки);
		
		Если СтрокаДокумента <> Неопределено Тогда

			Если Сторона = "Кт" Тогда
				СтрокаДокумента.РазделУчетаКт = РазделКт;
				СтрокаДокумента.ОбъектУчетаКт = НовоеЗначениеКт;
				СвойстваСчетаДт = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(СтрокаДокумента.РазделУчетаДт);
			Иначе
				СтрокаДокумента.РазделУчетаДт = РазделДт;
				СтрокаДокумента.ОбъектУчетаДт = НовоеЗначениеДт;
				СвойстваСчетаКт = РазделыУчетаПовтИсп.ПолучитьСвойстваСчета(СтрокаДокумента.РазделУчетаКт);
			КонецЕсли; 
			
			ПроверитьОбъектУчетаСервер(СтрокаДокумента.ОбъектУчетаДт, , "Объект.Перемещения[" + ИДСтроки + "].ОбъектУчетаДт");
			ПроверитьОбъектУчетаСервер(СтрокаДокумента.ОбъектУчетаКт, , "Объект.Перемещения[" + ИДСтроки + "].ОбъектУчетаКт");
			
			ПроверитьФинансовуюЦельИРазделУчетаПоОбъектуУчетаСервер(СтрокаДокумента.ОбъектУчетаДт, СтрокаДокумента.ВидимостьФинЦелиДт, СтрокаДокумента.ФинансоваяЦельДт, СтрокаДокумента.РазделУчетаДт);
			ПроверитьФинансовуюЦельИРазделУчетаПоОбъектуУчетаСервер(СтрокаДокумента.ОбъектУчетаКт, СтрокаДокумента.ВидимостьФинЦелиКт, СтрокаДокумента.ФинансоваяЦельКт, СтрокаДокумента.РазделУчетаКт);
			
			ВалютаДт = ?(ЗначениеЗаполнено(СтрокаДокумента.ОбъектУчетаДт), СтрокаДокумента.ОбъектУчетаДт.Валюта, ВалютаУчета);
			ВалютаКт = ?(ЗначениеЗаполнено(СтрокаДокумента.ОбъектУчетаКт), СтрокаДокумента.ОбъектУчетаКт.Валюта, ВалютаУчета);
			
			Если ВалютаДт <> ВалютаКт Тогда
				Если Сторона = "Дт" Тогда
					СтрокаДокумента.ОбъектУчетаКт = СвойстваСчетаКт.ВидСубконто1ТипЗначения.ПривестиЗначение(Неопределено);
					СтрокаДокумента.Валюта = ВалютаДт;
				Иначе
					СтрокаДокумента.ОбъектУчетаДт = СвойстваСчетаДт.ВидСубконто1ТипЗначения.ПривестиЗначение(Неопределено);
					СтрокаДокумента.Валюта = ВалютаКт;
				КонецЕсли; 
			Иначе
				СтрокаДокумента.Валюта = ВалютаДт;
			КонецЕсли; 
			СтрокаДокумента.ВалютаКт = СтрокаДокумента.Валюта;
			
			
			СтрокаДокумента["ТипСчета" + Сторона] = ТипСчета;
			СтрокаДокумента["КартинкаСчета" + Сторона] = КартинкаСчета;
			
			Если НЕ Элементы.ФормаПоказатьРасходыНаЦели.Пометка Тогда
				Элементы.ФормаПоказатьРасходыНаЦели.Пометка = Объект.Накопления.Количество() > 0 ИЛИ ВидимостьФинЦелиРасходы ИЛИ ВидимостьФинЦелиПереводыКт;
				Элементы.ГруппаСтраницаКорректировкаРасходовНаЦель.Видимость = Элементы.ФормаПоказатьРасходыНаЦели.Пометка;
			КонецЕсли; 
			Элементы.НакопленияЗаполнитьПоРасходамИПереводам.Доступность = ВидимостьФинЦелиРасходы ИЛИ ВидимостьФинЦелиПереводыКт;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ВидимостьФинЦелиПереводыДт      = Объект.Перемещения.Итог("ВидимостьФинЦелиДт") > 0;
	ВидимостьФинЦелиПереводыКт      = Объект.Перемещения.Итог("ВидимостьФинЦелиКт") > 0;

КонецПроцедуры

// Проверяет, что ОбъектУчета - не группа, иначе очищает ОбъектУчета и выводит сообщение
//
&НаСервере
Процедура ПроверитьОбъектУчетаСервер(ОбъектУчета, КлючДанных = Неопределено, Поле = "", ПутьКДанным = "")

	Если ЗначениеЗаполнено(ОбъектУчета) И ОбъектУчета.ЭтоГруппа Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Выберите элемент, а не группу!'"), КлючДанных, Поле, ПутьКДанным);
		ОписаниеТипов = Новый ОписаниеТипов(ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(ОбъектУчета)));
		ОбъектУчета = ОписаниеТипов.ПривестиЗначение(Неопределено);
	КонецЕсли;

КонецПроцедуры

// Обслуживание аналитики статей:
&НаСервере
Процедура ДоходыСтатьяДоходаПриИзмененииСервер(ИДСтроки)

	ТекущиеДанные = Объект.Доходы.НайтиПоИдентификатору(ИДСтроки);
	НовоеЗначение = ТекущиеДанные.СтатьяДохода;
	
	Для Каждого ИДСтроки Из Элементы.Доходы.ВыделенныеСтроки Цикл
		
		СтрокаДокумента = Объект.Доходы.НайтиПоИдентификатору(ИДСтроки);
			
		Если СтрокаДокумента <> Неопределено Тогда
			СтрокаДокумента.СтатьяДохода = НовоеЗначение;
			Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяДохода) Тогда
				АналитикаСтатей.ПриИзмененииСтатьиВТабличнойЧасти(ЭтаФорма, СтрокаДокумента.СтатьяДохода, "Доходы", ИДСтроки);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры
 
// Обслуживание аналитики статей:
&НаСервере
Процедура РасходыСтатьяРасходаПриИзмененииСервер(ИДСтроки)

	СтрокаДокумента = Объект.Расходы.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаДокумента <> Неопределено Тогда
		
		// Обслуживание аналитики статей:
		Если ЗначениеЗаполнено(СтрокаДокумента.СтатьяРасхода) Тогда
			АналитикаСтатей.ПриИзмененииСтатьиВТабличнойЧасти(ЭтаФорма, СтрокаДокумента.СтатьяРасхода, "Расходы", ИДСтроки);
		КонецЕсли; 
		
		// Количество и цена
		Если НЕ СтрокаДокумента.СтатьяРасхода.КоличественныйУчет Тогда
			СтрокаДокумента.Количество = 0;
			СтрокаДокумента.Цена = 0;
		ИначеЕсли СтрокаДокумента.Количество = 0 Тогда
			СтрокаДокумента.Количество = 1;
			СтрокаДокумента.Цена = СтрокаДокумента.Сумма;
		КонецЕсли;
		СтрокаДокумента.ЕстьКоличество = (СтрокаДокумента.Количество <> 0);
		СтрокаДокумента.КоличественныйУчет = СтрокаДокумента.СтатьяРасхода.КоличественныйУчет;
		ВидимостьКоличестваИЦены = Объект.Расходы.Итог("ЕстьКоличество") <> 0 ИЛИ Объект.Расходы.Итог("КоличественныйУчет") <> 0 
									ИЛИ СтрокаДокумента.ЕстьКоличество ИЛИ СтрокаДокумента.КоличественныйУчет;
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура НакопленияФинансоваяЦельПриИзмененииСервер(ИДСтроки)

	СтрокаРедактирования = Объект.Накопления.НайтиПоИдентификатору(ИДСтроки);
	Если СтрокаРедактирования <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаРедактирования.ФинансоваяЦель) Тогда
			СтрокаРедактирования.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРедактирования.ФинансоваяЦель, "Валюта");
		Иначе
			СтрокаРедактирования.Валюта = ВалютаУчета;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Для не накопительных кошельков очищает ФинЦель, устанавливает РазделУчета по виду кошелька.
// Если ОбъектУчета - не кошелек, РазделУчета не изменяется
//
&НаСервереБезКонтекста
Процедура ПроверитьФинансовуюЦельИРазделУчетаПоОбъектуУчетаСервер(ОбъектУчета, ВидимостьФинЦели, ФинансоваяЦель, РазделУчета, ФинансоваяЦельОткуда = Неопределено)
	
	РаботаСФормамиДокументов.ПроверитьТипСубконто(ОбъектУчета, РазделУчета);
	
	Если ЗначениеЗаполнено(ОбъектУчета) И ТипЗнч(ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
		
		ВидимостьФинЦели = ОбъектУчета.ИспользоватьДляНакоплений;
		Если ВидимостьФинЦели Тогда
			
			РазделУчета = ПланыСчетов.РазделыУчета.Накопления;
			Если НЕ ЗначениеЗаполнено(ФинансоваяЦель) Тогда
				ФинансоваяЦель = Справочники.ФинансовыеЦели.ОбщиеНакопления;
			КонецЕсли; 
			Если Не ЗначениеЗаполнено(ФинансоваяЦельОткуда) Тогда
				ФинансоваяЦельОткуда = ФинансоваяЦель;
			КонецЕсли; 
			
		Иначе
			
			РазделУчета = ПланыСчетов.РазделыУчета.СвободныеДеньги;
			Если ЗначениеЗаполнено(ФинансоваяЦель) Тогда
				ФинансоваяЦель = Справочники.ФинансовыеЦели.ПустаяСсылка();
			КонецЕсли; 
			Если ЗначениеЗаполнено(ФинансоваяЦельОткуда) Тогда
				ФинансоваяЦельОткуда = Справочники.ФинансовыеЦели.ПустаяСсылка();
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		
		ВидимостьФинЦели = 0;
		ФинансоваяЦель = Справочники.ФинансовыеЦели.ПустаяСсылка();
		ФинансоваяЦельОткуда = Справочники.ФинансовыеЦели.ПустаяСсылка();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуКорректировкиЦелей()

	ДобавленоСтрок = 0;
	
	Для Каждого СтрокаРасхода Из Объект.Расходы Цикл
		Если ТипЗнч(СтрокаРасхода.ОбъектУчета) = Тип("СправочникСсылка.КошелькиИСчета") И СтрокаРасхода.ОбъектУчета.ИспользоватьДляНакоплений Тогда
			СтрокаКорректировки = Объект.Накопления.Добавить();
			СтрокаКорректировки.ФинансоваяЦель = СтрокаРасхода.ФинансоваяЦель;
			СтрокаКорректировки.Валюта = СтрокаРасхода.Валюта;
			СтрокаКорректировки.ИспользованоНакоплений = СтрокаРасхода.Сумма;
			ДобавленоСтрок = ДобавленоСтрок + 1;
		КонецЕсли; 
	КонецЦикла; 

	Для Каждого СтрокаРасхода Из Объект.Перемещения Цикл
		Если ТипЗнч(СтрокаРасхода.ОбъектУчетаКт) = Тип("СправочникСсылка.КошелькиИСчета") И СтрокаРасхода.ОбъектУчетаКт.ИспользоватьДляНакоплений Тогда
			СтрокаКорректировки = Объект.Накопления.Добавить();
			СтрокаКорректировки.ФинансоваяЦель = СтрокаРасхода.ФинансоваяЦельКт;
			СтрокаКорректировки.Валюта = СтрокаРасхода.Валюта;
			СтрокаКорректировки.ИспользованоСвободныхСредств = СтрокаРасхода.Сумма;
			ДобавленоСтрок = ДобавленоСтрок + 1;
		КонецЕсли; 
	КонецЦикла; 

	Возврат ДобавленоСтрок;
	
КонецФункции

&НаСервере
Процедура ВключитьКоличественныйУчетДляСтатьиРасходовСервер(Знач СтатьяРасходов)
	
	СтатьяРасходовОбъект = СтатьяРасходов.ПолучитьОбъект();
	СтатьяРасходовОбъект.КоличественныйУчет = Истина;
	СтатьяРасходовОбъект.Записать();
	
	МассивСтрок = Объект.Расходы.НайтиСтроки(Новый Структура("СтатьяРасхода", СтатьяРасходов));
	Для каждого Строка Из МассивСтрок Цикл
		РасходыСтатьяРасходаПриИзмененииСервер(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Обслуживание плановых операций
&НаСервере
Процедура ЗаполнитьДанныеПоШаблону(СсылкаНаШаблон)
	
	РаботаСФормамиДокументов.ОбновитьФормуОперацииПоШаблону(ЭтотОбъект, СсылкаНаШаблон);
	
	// Обслуживание аналитики статей:
	АналитикаСтатей.ПриСозданииНаСервере(ЭтаФорма, "СтатьяДохода", "АналитикаСтатьиДохода", "СтатьяРасхода", "АналитикаСтатьиРасхода", Неопределено);
	
	// Заполнение дополнительных колонок и реквизитов
	ЗаполнитьДобавленныеКолонки();
	
	// Общие настройки форм элементов документов
	РаботаСФормамиДокументов.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Настройка внешнего вида
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура РасходыВыборЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВключитьКоличественныйУчетДляСтатьиРасходовСервер(ДополнительныеПараметры.ТекущиеДанные.СтатьяРасхода);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРасходамИПереводамЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Накопления.Очистить();
	КонецЕсли;
	
	Если ЗаполнитьТаблицуКорректировкиЦелей() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В расходах и переводах не найдено сумм, потраченных из накоплений на финансовые цели.'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура ПоказатьРасходыНаЦелиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Накопления.Очистить();
	КонецЕсли; 
	
	Элементы.ФормаПоказатьРасходыНаЦели.Пометка = НЕ Элементы.ФормаПоказатьРасходыНаЦели.Пометка;
	УправлениеФормой();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФинансоваяЦель(ИмяТаблицы, СуффиксИмениПоля)

	ТекущиеДанные = Элементы[Имятаблицы].ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные["ФинансоваяЦель" + СуффиксИмениПоля];
	
	Для Каждого ИДСтроки Из Элементы[Имятаблицы].ВыделенныеСтроки Цикл
		СтрокаДокумента = Объект[Имятаблицы].НайтиПоИдентификатору(ИДСтроки);
		Если СтрокаДокумента["ВидимостьФинЦели" + СуффиксИмениПоля] > 0 Тогда
			СтрокаДокумента["ФинансоваяЦель" + СуффиксИмениПоля] = НовоеЗначение;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииКомментарийСтроки(Имятаблицы)
	
	ТекущиеДанные = Элементы[Имятаблицы].ТекущиеДанные;
	НовоеЗначение = ТекущиеДанные.КомментарийСтроки;
	
	Для Каждого ИДСтроки Из Элементы[Имятаблицы].ВыделенныеСтроки Цикл
		СтрокаДокумента = Объект[Имятаблицы].НайтиПоИдентификатору(ИДСтроки);
		СтрокаДокумента.КомментарийСтроки = НовоеЗначение;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруОписанияВыбранногоОбъектаУчета(ОбъектУчета)

	Результат = Новый Структура("ОбъектУчета,РазделУчета,ОписаниеТипа", ОбъектУчета);
	ТипОбъекта = ТипЗнч(ОбъектУчета);
	Если ТипОбъекта = Тип("СправочникСсылка.КошелькиИСчета") Или ОбъектУчета = Неопределено Тогда
		Результат.РазделУчета = ?(ОбъектУчета.ИспользоватьДляНакоплений, ПланыСчетов.РазделыУчета.Накопления, ПланыСчетов.РазделыУчета.СвободныеДеньги);
		Результат.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.КошелькиИСчета");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Имущество") Тогда
		Результат.РазделУчета = ПланыСчетов.РазделыУчета.Имущество;
		Результат.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Имущество");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Долги") Тогда
		Результат.РазделУчета = ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов;
		Результат.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Долги");
	ИначеЕсли ТипОбъекта = Тип("Структура") Тогда
		Результат.РазделУчета = ?(СтрНайти(ОбъектУчета.ВидДолга, "Проценты") > 0, ПланыСчетов.РазделыУчета.ПроцентыПоДолгам, ПланыСчетов.РазделыУчета.ОсновныеСуммыДолгов);
		Результат.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Долги");
		Результат.ОбъектУчета = ОбъектУчета.Ссылка;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции



// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
