
#Область СлужебныеПроцедурыИФункции

// Возвращает код центральной базы - для проверки корреспондента
Функция КодЦентральнойБазы()
	
	ДобавитьЗаписьВЖурналРегистрации(НСтр("ru = 'Запрос кода центральной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),,,);
	Возврат ОбменМобильноеПриложениеВызовСервера.ПолучитьКодЦентральнойБазы();
	
КонецФункции

// Выполняет проверку кодов, инициализирует узел плана обмена и обновляет его настройки
// Возвращает результат проверки
Функция ОбменРазрешен(ВерсияОбмена, КодЦентральнойБазы, ИДМобильногоПриложения, 
				ИмяМобильногоПриложения, КоличествоПериодов, ВидПериода, 
				ОграничиватьСпискомКошельков, СписокКодовКошельков, 
				ОписаниеПроблемы, НомерПринятого, НомерОтправленного)
	
	ДобавитьЗаписьВЖурналРегистрации(НСтр("ru = 'Проверка возможности обмена'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) );
	ОписаниеПроблемы = "";
	ЭтапОбмена = "ЗагрузкаДанных";
	
	Если НЕ ПользователюДоступенОбмен(ОписаниеПроблемы) Тогда
		ДобавитьЗаписьВЖурналРегистрации(ОписаниеПроблемы, УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		ОписаниеПроблемы = НСтр("ru = 'Синхронизация данных выключена в программе на настольном компьютере'");
		ДобавитьЗаписьВЖурналРегистрации(ОписаниеПроблемы, УровеньЖурналаРегистрации.Предупреждение);
		Возврат Ложь;
	КонецЕсли;
	
	Транспорт = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети();
	Если Транспорт.ЗапретитьИспользование Тогда
		ОписаниеПроблемы = СтрШаблон(НСтр("ru = 'В настольном приложении запрещено использование транспорта <%1>.'"), Строка(Транспорт));
		ДобавитьЗаписьВЖурналРегистрации(ОписаниеПроблемы, УровеньЖурналаРегистрации.Предупреждение);
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	УзелКорреспондента = Неопределено;
	
	// Проверяем, что выгрузка предназначена именно для этой базы
	ПравильныйКодЦБ = ОбменМобильноеПриложениеВызовСервера.ПолучитьКодЦентральнойБазы();
	Если ПравильныйКодЦБ <> КодЦентральнойБазы Тогда
		
		ОписаниеПроблемы = НСтр("ru = 'Сообщения от приложения <%1> не предназначены для загрузки в эту информационную базу'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, ИмяМобильногоПриложения);
		ТекстКомментарияОшибки = НСтр("ru = 'От приложения <%1> получен код центральной базы: %2, а ожидается код: %3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстКомментарияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментарияОшибки, ИмяМобильногоПриложения, ИДМобильногоПриложения, ПравильныйКодЦБ);
		ИмяМобильногоПриложения = ОписаниеПроблемы + Символы.ПС + ИмяМобильногоПриложения;
		ДобавитьЗаписьВЖурналРегистрации(ТекстКомментарияОшибки, УровеньЖурналаРегистрации.Ошибка);
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	// Прверяем версию обмена данными
	Если ЗначениеЗаполнено(ВерсияОбмена) Тогда
		
		Если ВерсияОбмена < ОбменМобильноеПриложениеВызовСервера.МинимальноДопустимаяВерсияОбмена() Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'Для выполнения синхронизации нужно обновить мобильное приложение <%1>'");
			ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, ИмяМобильногоПриложения);
			ТекстКомментарияОшибки = ОписаниеПроблемы + Символы.ПС + НСтр("ru = 'минимально возможная версия обмена %1, пакет передается версией %2'");
			ТекстКомментарияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментарияОшибки, ОбменМобильноеПриложениеВызовСервера.МинимальноДопустимаяВерсияОбмена(), ВерсияОбмена);
			ДобавитьЗаписьВЖурналРегистрации(ТекстКомментарияОшибки, УровеньЖурналаРегистрации.Ошибка);
			
			Возврат Ложь;
			
		ИначеЕсли ВерсияОбмена > ОбменМобильноеПриложениеВызовСервера.НомерВерсииОбмена() Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'Для выполнения синхронизации нужно обновить настольную программу'");
			ТекстКомментарияОшибки = ОписаниеПроблемы + Символы.ПС + НСтр("ru = 'текущая версия обмена %1, пакет передается версией %2'");
			ТекстКомментарияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментарияОшибки, ОбменМобильноеПриложениеВызовСервера.НомерВерсииОбмена(), ВерсияОбмена);
			ДобавитьЗаписьВЖурналРегистрации(ОписаниеПроблемы, УровеньЖурналаРегистрации.Ошибка);
			
			Возврат Ложь;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Проверяем/обновляем узел плана обмена
	Попытка
	
		УзелКорреспондента = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(ИДМобильногоПриложения);
		Если УзелКорреспондента.Пустая() Тогда
			
			Узел = ПланыОбмена.МобильноеПриложение.СоздатьУзел();
			Узел.Код                   = ИДМобильногоПриложения;
			Узел.Наименование          = ИмяМобильногоПриложения;
			Узел.Активность            = Истина;
			Узел.ЗатребованныйСценарий = Перечисления.СценарииОбменаСМобильнымПриложением.МобильныеЗаменитьНастольными;
			Узел.Записать();
			УзелКорреспондента = Узел.Ссылка;
			
		КонецЕсли; 
		
		Если ПустаяСтрока(СписокКодовКошельков) Тогда
			МассивКодов = Неопределено;
		Иначе
			
			МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокКодовКошельков, ",", Истина);
			МассивКошельков = Новый Массив;
			Для Каждого ЭлементМассива Из МассивКодов Цикл
				МассивКошельков.Добавить(Справочники.КошелькиИСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементМассива)));
			КонецЦикла; 
			
		КонецЕсли; 
		
		ОбменМобильноеПриложение.ПроверитьОбновитьНастройкиУзла(УзелКорреспондента, КоличествоПериодов, ВидПериода, ОграничиватьСпискомКошельков, 
					МассивКошельков, ИмяМобильногоПриложения);
		
		НомерПринятого     = УзелКорреспондента.НомерПринятого;
		НомерОтправленного = УзелКорреспондента.НомерОтправленного;
		
	Исключение
		
		Ошибка  = ИнформацияОбОшибке();
		ОписаниеПроблемы = НСтр("ru = 'Ошибка при обновлении узла плана обмена <%1>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, ИмяМобильногоПриложения) + Символы.ПС 
							+ Ошибка.Описание;
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Ошибка, УзелКорреспондента, ЭтапОбмена);
							
		Возврат Ложь;
		
	КонецПопытки; 
	
	// Проверяем текущее состояние обмена с указанным узлом
	Если НЕ РегистрыСведений.КонтрольОбменаДанными.УзелДляОбменаДоступен(УзелКорреспондента, 
				Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети(), ОписаниеПроблемы) Тогда
				
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена);
							
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции


// Устарела. Следует использовать ОбменРазрешен()
//
Функция ОбменВозможен(КодЦентральнойБазы, ИДМобильногоПриложения, ИмяМобильногоПриложения, 
				КоличествоПериодов, ВидПериода, ОграничиватьСпискомКошельков, СписокКодовКошельков, 
				ОписаниеПроблемы = "", НомерПринятого = 0, НомерОтправленного = 0)
				
	Возврат ОбменРазрешен("1.0.0", КодЦентральнойБазы, ИДМобильногоПриложения, ИмяМобильногоПриложения, КоличествоПериодов, ВидПериода, ОграничиватьСпискомКошельков, СписокКодовКошельков, ОписаниеПроблемы, НомерПринятого, НомерОтправленного);
	
КонецФункции

// Принимает сообщение от приложения и обрабатывает его согласно указанному сценарию
//
Функция ЗагрузитьСообщение(ИДПриложения, ХранилищеСообщения, СценарийОбмена, НомерОтправленного, НомерПринятого, ОписаниеПроблемы)
	
	ОписаниеПроблемы = "";
	ЭтапОбмена = "ЗагрузкаДанных";
	
	// Проверка узла обмена
	УзелКорреспондента = Неопределено;
	Если НЕ УзелСуществует(ИДПриложения, УзелКорреспондента, ОписаниеПроблемы) Тогда
		
		ДополнениеКОписанию = НСтр("ru = 'Устройство не зарегистрировано в плане обмена.
			|В момент вызова процедуры выгрузки в плане обмена уже должна быть запись о синхронизируемом устройстве'") + Символы.ПС;
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ДополнениеКОписанию + ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена);
		Возврат Ложь;
		
	КонецЕсли; 
	
	ТранспортДомашняяСеть = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Устаналиваем отметку на начале выполнения обмена с данным узлом
	Если НЕ РегистрыСведений.КонтрольОбменаДанными.УстановитьНачалоОбмена(УзелКорреспондента, ТранспортДомашняяСеть, ОписаниеПроблемы) Тогда
		ДобавитьЗаписьВЖурналРегистрации(ОписаниеПроблемы, УровеньЖурналаРегистрации.Ошибка, Метаданные.ПланыОбмена.МобильноеПриложение);
		Возврат Ложь;
	КонецЕсли;
	
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Получение пакета'"));
	
	// Проверка содержимого пакета
	Попытка
	
		ТелоСообщения = ХранилищеСообщения.Получить();
		ПараметрыСообщения = ОбменМобильноеПриложение.ПолучитьПараметрыСообщения(ТелоСообщения);
		
	Исключение
		
		// Получаем представление ошибки
		Ошибка = ИнформацияОбОшибке();
		ОписаниеПроблемы = НСтр("ru = 'Не удалось прочитать сообщение от приложения %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, УзелКорреспондента);
		
		// Добавляем запись в журнал регистрации
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Ошибка, УзелКорреспондента, ЭтапОбмена);
		
		// Фиксируем окончание обмена с узлом
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
		
		// Дублируем состояние синхронизации в облачный сервис
		ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
		
		Возврат Ложь;
		
	КонецПопытки; 
	
	// Проверка сценария
	Если СценарийОбмена = "НастольныеЗаменитьМобильными" Тогда
		
		Если Не ОбщегоНазначенияДеньги.ИнформационнаяБазаПустая() Тогда
			
			РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			Отказ = Истина;
			ОписаниеПроблемы = НСтр("ru='Настольная программа не пустая. Заменить ее данные данными мобильного приложения невозможно.'"); 
			ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
				
			// Фиксируем окончание обмена с узлом
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
			РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
			
			// Дублируем состояние синхронизации в облачный сервис
			ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
		
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СценарийОбмена <> "МобильныеЗаменитьНастольными" И СценарийОбмена <> "ОбъединениеДанных" Тогда
		
		ОписаниеПроблемы = НСтр("ru = 'Указан неверный сценарий обмена данными с приложением %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, УзелКорреспондента);
		ДобавитьЗаписьВЖурналРегистрации(ОписаниеПроблемы, УровеньЖурналаРегистрации.Ошибка, ,УзелКорреспондента);
		
		// Фиксируем окончание обмена с узлом
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
		
		// Дублируем состояние синхронизации в облачный сервис
		ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	// Чтение сообщения
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, НСтр("ru='Чтение пакета'"));
	
	Попытка
		
		// Проверка счетчика сообщений
		Если СценарийОбмена = "НастольныеЗаменитьМобильными" ИЛИ СценарийОбмена = "МобильныеЗаменитьНастольными" 
			ИЛИ УзелКорреспондента.НомерПринятого >= НомерОтправленного Тогда
			
			ОбъектУзла = УзелКорреспондента.ПолучитьОбъект();
			ОбъектУзла.НомерПринятого     = НомерОтправленного - 1;
			
			Если СценарийОбмена = "НастольныеЗаменитьМобильными" ИЛИ СценарийОбмена = "МобильныеЗаменитьНастольными" Тогда
				ОбъектУзла.ЗатребованныйСценарий = Перечисления.СценарииОбменаСМобильнымПриложением[СценарийОбмена];
			КонецЕсли;
			
			ОбъектУзла.Записать();
			
		КонецЕсли;
		
		ОбменДаннымиСервер.ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезСтроку("МобильноеПриложение", ИДПриложения, ТелоСообщения);
		
		СостояниеПроцесса = ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением;
		Если СостояниеПроцесса.ЗавершеноСОшибками Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'Чтение сообщения от приложения %1 завершилось с ошибкой'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
			ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, УзелКорреспондента);
			ОписаниеПроблемы = СостояниеПроцесса.ПредставлениеОшибки;
			
			// Фиксируем окончание обмена с узлом
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
			РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
			
			// Дублируем состояние синхронизации в облачный сервис
			ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
		
			Возврат Ложь;
			
		Иначе
			
			// Фиксируем выполнение чтения
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Выполнено);
			
			// Дублируем состояние синхронизации в облачный сервис
			ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
			
			Возврат Истина;
			
		КонецЕсли; 
		
		
	Исключение
		
		Ошибка = ИнформацияОбОшибке();
		
		СостояниеПроцесса = ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением;
		ОписаниеПроблемы  = "";
		Если СостояниеПроцесса.ЗавершеноСОшибками Тогда
			ОписаниеПроблемы = ОписаниеПроблемы +  СостояниеПроцесса.ПредставлениеОшибки;
		КонецЕсли; 
		ОписаниеПроблемы = ОписаниеПроблемы + Символы.ПС + "---- Технологическая информация настольного приложения:" 
					+ Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка);
		
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Ошибка, УзелКорреспондента, ЭтапОбмена);
		
		// Фиксируем окончание обмена с узлом
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
		
		// Дублируем состояние синхронизации в облачный сервис
		ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	
КонецФункции
 
// Формирует и выгружает сообщение; в возвращаемые параметры записывыает номера принятого и оправленного сообщений
Функция ВыгрузитьСообщение(ИДПриложения, НомерОтправленного, НомерПринятого, ОписаниеПроблемы)
	
	ОписаниеПроблемы        = "";
	ЭтапОбмена = "ВыгрузкаДанных";
	КлючЖурналаРегистрации  = ОбменМобильноеПриложение.КлючСобытияЖурналаРегистрации(ЭтапОбмена);
	
	ТранспортДомашняяСеть = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети();
	
	// Проверка узла обмена
	УзелКорреспондента = Неопределено;
	Если НЕ УзелСуществует(ИДПриложения, УзелКорреспондента, ОписаниеПроблемы) Тогда
		ДополнениеКОписанию = НСтр("ru = 'Устройство не зарегистрировано в плане обмена.
			|В момент вызова процедуры выгрузки в плане обмена уже должна быть запись о синхронизируемом устройстве'") + Символы.ПС;
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ДополнениеКОписанию + ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена);
		Возврат Неопределено;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РегистрыСведений.КонтрольОбменаДанными.УзелДляОбменаДоступен(УзелКорреспондента, ТранспортДомашняяСеть, ОписаниеПроблемы) Тогда
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(ОписаниеПроблемы, УзелКорреспондента, ЭтапОбмена);
		Возврат Неопределено;
	КонецЕсли;
	
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(УзелКорреспондента, "Выгрузка изменений");
	
	Попытка
	
		// Формирование пакета
		СообщениеОбмена = Неопределено;
		ОбменДаннымиСервер.ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезСтроку("МобильноеПриложение", ИДПриложения, СообщениеОбмена);
		
		СостояниеПроцесса = ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением;
		Если СостояниеПроцесса.ЗавершеноСОшибками Тогда
			
			ОписаниеПроблемы = СостояниеПроцесса.ПредставлениеОшибки;
			// Фиксируем окончание обмена с узлом
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
			РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
			
			// Дублируем состояние синхронизации в облачный сервис
			ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
		
			Возврат Неопределено;
			
		КонецЕсли; 
		
		// Фиксируем окончание обмена с узлом
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Выполнено);
		
		НомераПакетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УзелКорреспондента, "НомерОтправленного, НомерПринятого");
		НомерОтправленного = НомераПакетов.НомерОтправленного;
		НомерПринятого     = НомераПакетов.НомерПринятого;
	
	Исключение
	
		
		Ошибка = ИнформацияОбОшибке();
		
		СостояниеПроцесса = ПараметрыСеанса.СостояниеСинхронизацииСМобильнымПриложением;
		ОписаниеПроблемы  = "";
		Если СостояниеПроцесса.ЗавершеноСОшибками Тогда
			ОписаниеПроблемы = ОписаниеПроблемы +  СостояниеПроцесса.ПредставлениеОшибки;
		КонецЕсли; 
		ОписаниеПроблемы = ОписаниеПроблемы + Символы.ПС + "---- Технологическая информация настольного приложения:" 
					+ Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка);
		
		// Фиксируем окончание обмена с узлом
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(УзелКорреспондента, Перечисления.РезультатыВыполненияОбмена.Ошибка, ОписаниеПроблемы);
		ОбменМобильноеПриложениеВызовСервера.ЗафиксироватьОшибкуСинхронизации(Ошибка, УзелКорреспондента, ЭтапОбмена);
		
		СообщениеОбмена = Неопределено;
		
	КонецПопытки; 
	
	// Фиксируем окончание обмена с узлом
	РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(УзелКорреспондента);
	
	// Дублируем состояние синхронизации в облачный сервис
	ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента);
	
	Если СообщениеОбмена = Неопределено Тогда
		Возврат  Неопределено
	Иначе
		Возврат Новый ХранилищеЗначения(СообщениеОбмена, Новый СжатиеДанных(9));
	КонецЕсли;
	
КонецФункции

// Возвращает номер версии обмена
Функция НомерВерсииОбмена()
	Возврат ОбменМобильноеПриложениеВызовСервера.НомерВерсииОбмена();
КонецФункции

// Возвращает номер версии указанной в параметрах подсистемы
//	Если параметр пустой, будет возвращена версия основной подсистемы - "Деньги"
Функция НомерВерсииПодсистемы(ИмяПодсистемы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПодсистемы", ?(ЗначениеЗаполнено(ИмяПодсистемы), ИмяПодсистемы, "Деньги"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииПодсистем.ИмяПодсистемы КАК ИмяПодсистемы,
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|ГДЕ
	|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Версия
	Иначе
		Возврат "";
	КонецЕсли; 
	
КонецФункции



// Вспомогательный функционал

Функция ПользователюДоступенОбмен(ОписаниеПроблемы)

	Пользователь = Пользователи.АвторизованныйПользователь();
	
	Если ЗначениеЗаполнено(Пользователь) 
		И НЕ РольДоступна(Метаданные.Роли.ПолныеПрава)
		И НЕ РольДоступна(Метаданные.Роли.Администрирование)
	    И НЕ РольДоступна(Метаданные.Роли.ВыполнениеСинхронизацииДанных) Тогда // 
		  
			ОписаниеПроблемы = НСтр("ru='У пользователя %1 нет прав на синхронизацию данных с мобильным приложением 1С:Деньги. Необходимо добавить права <Полные права> или <Право на выполнение синхронизации>.'");
			ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, Пользователь);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Обмен с мобильным приложением через веб-сервис.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,ОписаниеПроблемы
				);
			
			Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция УзелСуществует(ИДПриложения, УзелКорреспондента, ОписаниеПроблемы)

	// Проверка узла обмена
	УзелКорреспондента = ПланыОбмена.МобильноеПриложение.НайтиПоКоду(ИДПриложения);
	Если УзелКорреспондента.Пустая() Тогда
		
		ОписаниеПроблемы = НСтр("ru = 'Приложение с кодом %1 не найдено в списке зарегистрированных приложений'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) ;
		ОписаниеПроблемы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеПроблемы, ИДПриложения);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обмен с мобильным приложением через веб-сервис.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,ОписаниеПроблемы
			);
		Возврат Ложь;
		
	КонецЕсли; 

	Возврат Истина;
	
КонецФункции


Процедура ДобавитьЗаписьВЖурналРегистрации(Текст, Уровень = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено, Ключ = Неопределено)

	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	Если Ключ = Неопределено Тогда
		Ключ = ОбменМобильноеПриложение.КлючСобытияЖурналаРегистрации("ЗагрузкаДанных");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		Ключ,
		Уровень,
		ОбъектМетаданных,
		Данные,
		Текст);

КонецПроцедуры

// Обновляем состояние обмена с узлами в облачном сервисе (если он используется)
Процедура ЗаписатьРезультатыСинхронизацииВОблако(ЭтапОбмена, УзелКорреспондента)
	
	Попытка
	
		ОбработкаОбмена = Обработки.ТранспортСообщенийОбменаОблачныйФайловыйСервис.Создать();
		ОбработкаОбмена.Инициализация();
		
		Если Не ЗначениеЗаполнено(ОбработкаОбмена.Провайдер) Тогда
			Возврат;
		КонецЕсли;
		
		ТранспортОблако = Справочники.ТранспортыОбменаДанными.ОсновнойТранспортОблачногоПровайдера(ОбработкаОбмена.Провайдер);
		Если Не ЗначениеЗаполнено(ТранспортОблако) Или ТранспортОблако.ЗапретитьИспользование 
			Или Не РегистрыСведений.КонтрольТранспортовОбмена.УстановитьНачалоРаботыТранспорта(ТранспортОблако) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Транспорт", Справочники.ТранспортыОбменаДанными.ОсновнойТранспортДомашнейСети());
		Запрос.УстановитьПараметр("УзелКорреспондента", ?(ЗначениеЗаполнено(УзелКорреспондента), УзелКорреспондента, Неопределено));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрольОбменаДанными.УзелИнформационнойБазы КАК Узел,
		|	КонтрольОбменаДанными.УзелИнформационнойБазы.Код КАК КодУзла,
		|	КонтрольОбменаДанными.Транспорт.ВидТранспорта КАК ВидТранспорта,
		|	КонтрольОбменаДанными.ПоследнееПолучение,
		|	КонтрольОбменаДанными.РезультатПолученияДанных,
		|	КонтрольОбменаДанными.ТекстОшибокПолучения,
		|	КонтрольОбменаДанными.ПоследняяОтправка,
		|	КонтрольОбменаДанными.РезультатОтправкиДанных,
		|	КонтрольОбменаДанными.ТекстОшибокОтправки,
		|	КонтрольОбменаДанными.УзелИнформационнойБазы.Активность КАК Активность
		|ИЗ
		|	РегистрСведений.КонтрольОбменаДанными КАК КонтрольОбменаДанными
		|ГДЕ
		|	НЕ КонтрольОбменаДанными.УзелИнформационнойБазы.ЭтотУзел
		|	И КонтрольОбменаДанными.Транспорт = &Транспорт
		|	И (&УзелКорреспондента = НЕОПРЕДЕЛЕНО
		|			ИЛИ КонтрольОбменаДанными.УзелИнформационнойБазы = &УзелКорреспондента)";
		
		КодЦБ = ОбменМобильноеПриложениеВызовСервера.ПолучитьКодЦентральнойБазы();
		ОбработкаОбмена.ВыполнитьДействияПередОбработкойСообщения();
		ОбработкаОбмена.ОтправитьРезультатыОбмена(КодЦБ, Запрос.Выполнить().Выбрать());
		ОбработкаОбмена.ВыполнитьДействияПослеОбработкиСообщения();
		РегистрыСведений.КонтрольТранспортовОбмена.УстановитьЗавершениеРаботыТранспорта(ТранспортОблако);
	
	Исключение
	
		Ошибка = ИнформацияОбОшибке();
		ОписаниеПроблемы = "---- Технологическая информация настольного приложения:" 
					+ Символы.ПС + ПодробноеПредставлениеОшибки(Ошибка);
		КлючСообщения = ОбменМобильноеПриложениеВызовСервера.КлючСообщенияОбменаДляУзла(Неопределено, ЭтапОбмена);
		ЗаписьЖурналаРегистрации(КлючСообщения, 
			УровеньЖурналаРегистрации.Ошибка, 
			Неопределено, 
			Неопределено, 
			ПодробноеПредставлениеОшибки(Ошибка)); 
		
	КонецПопытки; 
	
КонецПроцедуры


#КонецОбласти








