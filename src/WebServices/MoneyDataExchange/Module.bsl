
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики операций

// Соответствует операции Upload.
Функция ВыполнитьВыгрузку(ИмяПланаОбмена, КодУзлаИнформационнойБазы, ХранилищеСообщенияОбмена)
	
	ПроверитьБлокировкуИнформационнойБазыДляОбновления();
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	ПроверитьДоступностьУслуги("ВыгрузкаДанных", ИмяПланаОбмена, КодУзлаИнформационнойБазы);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СообщениеОбмена = "";
	
	ОбменДаннымиСервер.ВыполнитьВыгрузкуДляУзлаИнформационнойБазыЧерезСтроку(ИмяПланаОбмена, КодУзлаИнформационнойБазы, СообщениеОбмена);
	
	ХранилищеСообщенияОбмена = Новый ХранилищеЗначения(СообщениеОбмена, Новый СжатиеДанных(9));
	
КонецФункции

// Соответствует операции Download.
Функция ВыполнитьЗагрузку(ИмяПланаОбмена, КодУзлаИнформационнойБазы, ХранилищеСообщенияОбмена)
	
	ПроверитьБлокировкуИнформационнойБазыДляОбновления();
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	ПроверитьДоступностьУслуги("ЗагрузкаДанных", ИмяПланаОбмена, КодУзлаИнформационнойБазы);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбменДаннымиСервер.ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезСтроку(ИмяПланаОбмена, КодУзлаИнформационнойБазы, ХранилищеСообщенияОбмена.Получить());
	
КонецФункции

// Соответствует операции UploadData.
Функция ВыполнитьВыгрузкуДанных(ИмяПланаОбмена,
								КодУзлаИнформационнойБазы,
								ИдентификаторФайлаСтрокой,
								ДлительнаяОперация,
								ИдентификаторОперации,
								ДлительнаяОперацияРазрешена)
	
	ПроверитьБлокировкуИнформационнойБазыДляОбновления();
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	ПроверитьДоступностьУслуги("ВыгрузкаДанных", ИмяПланаОбмена, КодУзлаИнформационнойБазы);
	
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	ИдентификаторФайлаСтрокой = Строка(ИдентификаторФайла);
	ВыполнитьВыгрузкуДанныхВКлиентСерверномРежиме(ИмяПланаОбмена, КодУзлаИнформационнойБазы, ИдентификаторФайла, ДлительнаяОперация, ИдентификаторОперации, ДлительнаяОперацияРазрешена);
	
КонецФункции

// Соответствует операции DownloadData.
Функция ВыполнитьЗагрузкуДанных(ИмяПланаОбмена,
								КодУзлаИнформационнойБазы,
								ИдентификаторФайлаСтрокой,
								ДлительнаяОперация,
								ИдентификаторОперации,
								ДлительнаяОперацияРазрешена)
	
	ПроверитьБлокировкуИнформационнойБазыДляОбновления();
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	ПроверитьДоступностьУслуги("ЗагрузкаДанных", ИмяПланаОбмена, КодУзлаИнформационнойБазы);
	
	ИдентификаторФайла = Новый УникальныйИдентификатор(ИдентификаторФайлаСтрокой);
	ВыполнитьЗагрузкуДанныхВКлиентСерверномРежиме(ИмяПланаОбмена, КодУзлаИнформационнойБазы, ИдентификаторФайла, ДлительнаяОперация, ИдентификаторОперации, ДлительнаяОперацияРазрешена);
	
КонецФункции

// Соответствует операции GetIBParameters.
Функция ПолучитьПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке)
	
	Результат = ОбменДаннымиСервер.ПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке);
	Возврат СериализаторXDTO.ЗаписатьXDTO(Результат);
	
КонецФункции

// Соответствует операции CreateExchangeNode.
Функция СоздатьУзелОбменаДанными(ПараметрыXDTO)
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными(Истина);
	
	Параметры = СериализаторXDTO.ПрочитатьXDTO(ПараметрыXDTO);
	
	НастройкиПодключения = Параметры.НастройкиПодключения;
	СтрокаПараметровXML  = Параметры.СтрокаПараметровXML;
	
	МодульПомощникНастройки = ОбменДаннымиСервер.МодульПомощникСозданияОбменаДанными();
	Попытка
		МодульПомощникНастройки.ЗаполнитьНастройкиПодключенияИзXML(
			НастройкиПодключения, Параметры.СтрокаПараметровXML);
			
		МодульПомощникНастройки.ВыполнитьДействияПоНастройкеОбменаДанными(
			НастройкиПодключения);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииСозданиеОбменаДанными(),
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
			
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецФункции

// Соответствует операции RemoveExchangeNode.
Функция УдалитьУзелОбменаДанными(ИмяПланаОбмена, ИдентификаторУзла)
	
	УзелОбмена = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, ИдентификаторУзла);
		
	Если УзелОбмена = Неопределено Тогда
		ПредставлениеПрограммы = ?(ОбщегоНазначения.РазделениеВключено(),
			Метаданные.Синоним, ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы());
			
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В ""%1"" не найден узел плана обмена ""%2"" с идентификатором ""%3"".'"),
			ПредставлениеПрограммы, ИмяПланаОбмена, ИдентификаторУзла);
	КонецЕсли;
	
	ОбменДаннымиСервер.УдалитьНастройкуСинхронизации(УзелОбмена);
	
КонецФункции

// Соответствует операции GetContinuousOperationStatus.
Функция ПолучитьСостояниеДлительнойОперации(ИдентификаторОперации, СтрокаСообщенияОбОшибке)
	
	СостоянияФоновогоЗадания = Новый Соответствие;
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.Активно,           "Active");
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.Завершено,         "Completed");
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.ЗавершеноАварийно, "Failed");
	СостоянияФоновогоЗадания.Вставить(СостояниеФоновогоЗадания.Отменено,          "Canceled");
	СостоянияФоновогоЗадания.Вставить(0,                                          "NotFound");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторОперации));
	
	Если ФоновоеЗадание = Неопределено Тогда
		
		СтрокаСообщенияОбОшибке = СтрШаблон(НСтр("ru='Не удалось найти фоновое задание по идентифкатору ""%1""'"), ИдентификаторОперации);
		Возврат СостоянияФоновогоЗадания.Получить(0);
		
	ИначеЕсли ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
		
		СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	Возврат СостоянияФоновогоЗадания.Получить(ФоновоеЗадание.Состояние);
КонецФункции

// Соответствует операции PrepareGetFile.
Функция PrepareGetFile(FileId, BlockSize, TransferId, PartQuantity)
	
	УстановитьПривилегированныйРежим(Истина);
	
	TransferId = Новый УникальныйИдентификатор;
	
	ИмяИсходногоФайла = ОбменДаннымиСервер.ПолучитьФайлИзХранилища(FileId);
	
	ВременныйКаталог = ВременныйКаталогВыгрузки(TransferId);
	
	Файл = Новый Файл(ИмяИсходногоФайла);
	
	ИмяИсходногоФайлаВоВременномКаталоге = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ВременныйКаталог, "data.zip");
	
	СоздатьКаталог(ВременныйКаталог);
	
	ПереместитьФайл(ИмяИсходногоФайла, ИмяИсходногоФайлаВоВременномКаталоге);
	
	Если BlockSize <> 0 Тогда
		// Разделение файла на части
		ИменаФайлов = РазделитьФайл(ИмяИсходногоФайлаВоВременномКаталоге, BlockSize * 1024);
		PartQuantity = ИменаФайлов.Количество();
		
		УдалитьФайлы(ИмяИсходногоФайлаВоВременномКаталоге);
	Иначе
		PartQuantity = 1;
		ПереместитьФайл(ИмяИсходногоФайлаВоВременномКаталоге, ИмяИсходногоФайлаВоВременномКаталоге + ".1");
	КонецЕсли;
	
КонецФункции

// Соответствует операции GetFilePart.
Функция GetFilePart(TransferId, PartNumber, PartData)
	
	ИменаФайлов = НайтиФайлЧасти(ВременныйКаталогВыгрузки(TransferId), PartNumber);
	
	Если ИменаФайлов.Количество() = 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не найден фрагмент %1 сессии передачи с идентификатором %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(PartNumber), Строка(TransferId));
		ВызватьИсключение(ТекстСообщения);
		
	ИначеЕсли ИменаФайлов.Количество() > 1 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Найдено несколько фрагментов %1 сессии передачи с идентификатором %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(PartNumber), Строка(TransferId));
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
	ИмяФайлаЧасти = ИменаФайлов[0].ПолноеИмя;
	PartData = Новый ДвоичныеДанные(ИмяФайлаЧасти);
	
КонецФункции

// Соответствует операции ReleaseFile.
Функция ReleaseFile(TransferId)
	
	Попытка
		УдалитьФайлы(ВременныйКаталогВыгрузки(TransferId));
	Исключение
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

// Соответствует операции PutFilePart.
Функция PutFilePart(TransferId, PartNumber, PartData)
	
	ВременныйКаталог = ВременныйКаталогВыгрузки(TransferId);
	
	Если PartNumber = 1 Тогда
		
		СоздатьКаталог(ВременныйКаталог);
		
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ВременныйКаталог, ПолучитьИмяФайлаЧасти(PartNumber));
	
	PartData.Записать(ИмяФайла);
	
КонецФункции

// Соответствует операции SaveFileFromParts.
Функция SaveFileFromParts(ExchangePlanName, NodeID, TransferId, PartQuantity, FileId)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтрольОбмена_ИзменитьТекущееДействие(ExchangePlanName, NodeID, НСтр("ru='Получение файла'"));
	
	ВременныйКаталог = ВременныйКаталогВыгрузки(TransferId);
	
	ФайлыЧастейДляОбъединения = Новый Массив;
	
	Для НомерЧасти = 1 По PartQuantity Цикл
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ВременныйКаталог, ПолучитьИмяФайлаЧасти(НомерЧасти));
		
		Если НайтиФайлы(ИмяФайла).Количество() = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'Не найден фрагмент %1 сессии передачи с идентификатором %2.
					|Необходимо убедиться, что в настройках программы заданы параметры
					|""Каталог временных файлов для Linux"" и ""Каталог временных файлов для Windows"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(НомерЧасти), Строка(TransferId));
			КонтрольОбмена_УстановитьРезультат("Загрузка", ExchangePlanName, NodeID, Истина, ТекстСообщения);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		ФайлыЧастейДляОбъединения.Добавить(ИмяФайла);
		
	КонецЦикла;
	
	// ДЕНЬГИ - обеспечение обмена с мобильными устройствами без архивирования файлов
	ЭтоМобильноеПриложение = СинхронизацияАвтономныхКопийВызовСервера.ЭтоМобильноеПриложение(ExchangePlanName, NodeID);
	КаталогВыгрузки = ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов();
	Если ЭтоМобильноеПриложение Тогда
		
		ШаблонИмениФайла = СинхронизацияАвтономныхКопий.ИмяФайлаСообщенияОбмена(NodeID, СинхронизацияАвтономныхКопийВызовСервера.КодЭтогоУзла(), Ложь);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузки,  ШаблонИмениФайла + ".xml");
		ОбъединитьФайлы(ФайлыЧастейДляОбъединения, ИмяФайла);
		
	Иначе
		
		ИмяАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ВременныйКаталог,  "data.zip");
		
		ОбъединитьФайлы(ФайлыЧастейДляОбъединения, ИмяАрхива);
		
		Разархиватор = Новый ЧтениеZipФайла(ИмяАрхива);
		
		Если Разархиватор.Элементы.Количество() = 0 Тогда
			Попытка
				УдалитьФайлы(ВременныйКаталог);
			Исключение
				ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ТекстСообщения = НСтр("ru = 'Файл архива не содержит данных.'");
			КонтрольОбмена_УстановитьРезультат("Получение", ExchangePlanName, NodeID, Истина, ТекстСообщения);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогВыгрузки, Разархиватор.Элементы[0].Имя);
		
		Разархиватор.Извлечь(Разархиватор.Элементы[0], КаталогВыгрузки);
		Разархиватор.Закрыть();
		
	КонецЕсли;
	
	FileId = ОбменДаннымиСервер.ПоместитьФайлВХранилище(ИмяФайла);
	
	Попытка
		УдалитьФайлы(ВременныйКаталог);
	Исключение
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУдалениеВременногоФайла(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецФункции

// Соответствует операции PutMessageForDataMatching.
Функция PutMessageForDataMatching(ИмяПланаОбмена, ИдентификаторУзла, ИдентификаторФайла)
	
	УзелОбмена = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, ИдентификаторУзла);
		
	Если УзелОбмена = Неопределено Тогда
		ПредставлениеПрограммы = ?(ОбщегоНазначения.РазделениеВключено(),
			Метаданные.Синоним, ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы());
			
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В ""%1"" не найден узел плана обмена ""%2"" с идентификатором ""%3"".'"),
			ПредставлениеПрограммы, ИмяПланаОбмена, ИдентификаторУзла);
	КонецЕсли;
	
	ПроверитьБлокировкуИнформационнойБазыДляОбновления();
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	ОбменДаннымиСлужебный.ПоместитьСообщениеДляСопоставленияДанных(УзелОбмена, ИдентификаторФайла);
	
КонецФункции

// Соответствует операции PutFileIntoStorage.
Функция PutFileIntoStorage(FileName, FileId)
	
	УстановитьПривилегированныйРежим(Истина);
	
	FileId = ОбменДаннымиСервер.ПоместитьФайлВХранилище(FileName);
	
КонецФункции

// Соответствует операции Ping.
Функция Ping()
	// Проверка связи.
	Возврат СинхронизацияАвтономныхКопийКлиентСервер.МинимальнаяВерсияФормата();
КонецФункции

// Соответствует операции TestConnection.
Функция TestConnection(ИмяПланаОбмена, КодУзла, Результат)
	
	Результат = "";
	
	// Проверяем, что информационная база является центральной для остальных баз.
	Если Не СинхронизацияАвтономныхКопийВызовСервера.ЭтоЦентральнаяБаза() Тогда
		Результат = НСтр("ru = 'Подключаемая информационная база не предназначена для работы в режиме web-сервера.
			|Укажите правильный адрес базы в настройках синхронизации.'");
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем наличие прав для выполнения обмена.
	Попытка
		ОбменДаннымиСервер.ПроверитьВозможностьВыполненияОбменов(Истина);
	Исключение
		Результат = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	// Проверяем блокировку информационной базы для обновления.
	Попытка
		ПроверитьБлокировкуИнформационнойБазыДляОбновления();
	Исключение
		Результат = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверяем наличие узла плана обмена (возможно узел уже удален).
	Если ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзла) = Неопределено Тогда
		
		ПредставлениеПрограммы = ?(ОбщегоНазначения.РазделениеВключено(),
			Метаданные.Синоним, ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы());
			
		ПредставлениеПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Представление();
			
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В ""%1"" не найдена настройка синхронизации данных ""%2"" с идентификатором ""%3"".'"),
			ПредставлениеПрограммы, ПредставлениеПланаОбмена, КодУзла);
		
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка разрешений на обмен данными
	Попытка
		ПроверитьДоступностьУслуги("ЗагрузкаДанных", ИмяПланаОбмена, КодУзла);
	Исключение
		Результат = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

// Метод NodeStatusOnServer() - обновляет параметры узла на сервере и возвращает 
//структуру с описанием состояния узла плана обмена на сервере
//В случае невозможности обновить параметры выходной параметр СообщениеОбОшибке заполняется причиной отказа
Функция СтатусУзлаНаСервере(PlanName, ServerID, NodeID, NodeName, FormatVersion, Options, СообщениеОбОшибке)
	
	СообщениеОбОшибке = "";
	
	ПроверитьБлокировкуИнформационнойБазыДляОбновления();
	
	#Область ПроверкаВходящихПараметров
		
	ИмяПлана = СокрЛП(PlanName);
	Если НРег(ИмяПлана) <> "мобильноеприложение" И НРег(ИмяПлана) <> "синхронизацияавтономныхкопий" Тогда
		СообщениеОбОшибке = НСтр("ru='Указано некорректное имя плана обмена (параметр PlanName)'"); 
		Возврат Неопределено;
	КонецЕсли;
	
	КодЦБИзпараметров = СокрЛП(ServerID);
	Если КодЦБИзпараметров <> "000" И СтрДлина(КодЦБИзпараметров) <> 36 Тогда
		СообщениеОбОшибке = НСтр("ru='Передано неверное значение параметра ServerID'"); 
		Возврат Неопределено;
	КонецЕсли;
	КодЦентральнойБазы = СинхронизацияАвтономныхКопийВызовСервера.КодЦентральнойБазы(ИмяПлана);
	Если КодЦБИзпараметров <> "000" И КодЦентральнойБазы <> "000" И КодЦБИзпараметров <> КодЦентральнойБазы Тогда
		СообщениеОбОшибке = НСтр("ru='Эта база привязана к другому серверу (ServerID не соответствет коду веб-сервера)'"); 
		Возврат Неопределено;
	КонецЕсли;
	
	КодУзла = СокрЛП(NodeID);
	Если СтрДлина(КодУзла) <> 36 Тогда
		СообщениеОбОшибке = НСтр("ru='Передано неверное значение параметра NodeID'"); 
		Возврат Неопределено;
	КонецЕсли;
	
	НомерВерсии = СокрЛП(FormatVersion);
	Если Не ЗначениеЗаполнено(НомерВерсии) Тогда
		СообщениеОбОшибке = НСтр("ru='Не указан номер версии формата (параметр FormatVersion)'"); 
		Возврат Неопределено;
	КонецЕсли;
	Если Не СинхронизацияАвтономныхКопийКлиентСервер.ВерсияФорматаПоддерживается(НомерВерсии) Тогда
		СообщениеОбОшибке = НСтр("ru='Указанная версия формата не поддерживается в текущей версии сервера. Обновите приложение и повторите попытку'"); 
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКорреспондента = ?(Options = Неопределено, Новый Структура, Options.Получить());
	Если ТипЗнч(ПараметрыКорреспондента) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru='Передано неверное значение параметра Options'"); 
		Возврат Неопределено;
	КонецЕсли;
	
	#КонецОбласти 
	
	СоздаватьУзел = КодЦентральнойБазы = "000" Или КодЦБИзпараметров = "000";
	
	Если КодЦентральнойБазы = "000" Тогда
		// установка нового кода для узлов плана обмена
		КодЦентральнойБазы = ?(КодЦБИзпараметров = "000", СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы(), КодЦБИзпараметров);
		
		Попытка
			СинхронизацияАвтономныхКопийВызовСервера.ЗаменитьКодЦентральнойБазы(КодЦентральнойБазы);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru='На сервере не удалось установить новый код центральной базы: %1%2'"), Символы.ПС, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			СообщениеОбОшибке = НСтр("ru='На сервере не удалось установить новый код центральной базы. Попробуйте подключиться позже или оборатитесь в службу поддержки'");
		КонецПопытки;
	КонецЕсли;
	
	УзелКорреспондента = СинхронизацияАвтономныхКопий.УзелПланаОбменаПоКоду(ИмяПлана, КодУзла, СоздаватьУзел);
	Если Не ЗначениеЗаполнено(УзелКорреспондента) Тогда
		СообщениеОбОшибке = СтрШаблон(НСтр("ru='Узел с кодом ""%1"" отсутствует в плане обмена %2'"), КодУзла, ИмяПлана); 
		Возврат Неопределено;
	КонецЕсли;
	
	Если УзелКорреспондента.СинхронизацияЗапрещена Тогда
		СообщениеОбОшибке = СтрШаблон(НСтр("ru='На сервере запрещен обмен с узлом %1'"), КодУзла); 
		Возврат Неопределено;
	КонецЕсли;
	
	// Текущие значения параметров обмена
	ПараметрыОбмена = СинхронизацияАвтономныхКопий.ПараметрыОбменаСУзлом(УзелКорреспондента);
	
	// Обновление параметров обмена
	НовыеЗначения = Новый Структура;
	
	Если ЗначениеЗаполнено(NodeName) И ПараметрыОбмена.Наименование <> NodeName Тогда
		НовыеЗначения.Вставить("Наименование", NodeName);
	КонецЕсли;
	
	Если ПараметрыОбмена.ВерсияФорматаОбмена <> FormatVersion Тогда
		НовыеЗначения.Вставить("ВерсияФорматаОбмена", FormatVersion);
	КонецЕсли;
	
	ИмяПараметра = "СценарийПереданныхДанных";
	Значение = ЗначениеИзСтруктуры(ПараметрыКорреспондента, ИмяПараметра);
	Если ЗначениеЗаполнено(Значение) Тогда
		Если Значение = "НастольныеЗаменитьМобильными" Тогда
			Значение = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВЦентральнойБазе;
		ИначеЕсли Значение = "МобильныеЗаменитьНастольными" Тогда
			Значение = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВАвтономнойКопии;
		Иначе
			Значение = Перечисления.СценарииСинхронизацииАвтономныхКопий[Значение];
		КонецЕсли;
		Если ЗначениеЗаполнено(Значение) И ПараметрыОбмена[ИмяПараметра] <> Значение Тогда
			НовыеЗначения.Вставить(ИмяПараметра, Значение);
		КонецЕсли;
	КонецЕсли;
	
	ИмяПараметра = "СценарийЗапрашиваемыхДанных";
	Значение = ЗначениеИзСтруктуры(ПараметрыКорреспондента, ИмяПараметра);
	Если ЗначениеЗаполнено(Значение) Тогда
		
		// Приведение значения к стандартному виду
		Если Значение = "НастольныеЗаменитьМобильными" Тогда
			Значение = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВЦентральнойБазе;
		ИначеЕсли Значение = "МобильныеЗаменитьНастольными" Тогда
			Значение = Перечисления.СценарииСинхронизацииАвтономныхКопий.ЗаменитьВсеВАвтономнойКопии;
		Иначе
			Значение = Перечисления.СценарииСинхронизацииАвтономныхКопий[Значение];
		КонецЕсли;
		
		// проверка возможности применения сценария
		Если Значение <> ПараметрыОбмена[ИмяПараметра] Тогда
			НовыеЗначения.Вставить(ИмяПараметра, Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПараметра = "ВидПериода";
	Значение = ЗначениеИзСтруктуры(ПараметрыКорреспондента, ИмяПараметра);
	Если ЗначениеЗаполнено(Значение) Тогда
		Значение = Перечисления.Периодичность[Значение];
		Если ЗначениеЗаполнено(Значение) И ПараметрыОбмена[ИмяПараметра] <> Значение Тогда
			НовыеЗначения.Вставить(ИмяПараметра, Значение);
		КонецЕсли;
	КонецЕсли;
	
	ИмяПараметра = "КоличествоПериодов";
	Значение = ЗначениеИзСтруктуры(ПараметрыКорреспондента, ИмяПараметра);
	Если ЗначениеЗаполнено(Значение) Тогда
		Если ПараметрыОбмена[ИмяПараметра] <> Значение Тогда
			НовыеЗначения.Вставить(ИмяПараметра, Значение);
		КонецЕсли;
	КонецЕсли;
	
	ИмяПараметра = "НомерПринятого";
	Значение = ЗначениеИзСтруктуры(ПараметрыКорреспондента, ИмяПараметра);
	Если Значение <> Неопределено И Значение > ПараметрыОбмена["НомерОтправленного"] Тогда
		НовыеЗначения.Вставить("НомерОтправленного", Значение);
	КонецЕсли;
	
	ИмяПараметра = "НомерОтправленного";
	Значение = ЗначениеИзСтруктуры(ПараметрыКорреспондента, ИмяПараметра);
	Если Значение <> Неопределено И Значение > ПараметрыОбмена["НомерПринятого"] Тогда
		НовыеЗначения.Вставить("НомерПринятого", Значение);
	КонецЕсли;
	
	Если НовыеЗначения.Количество() > 0 Тогда
		Попытка
			СинхронизацияАвтономныхКопий.ЗаписатьНовыеПараметрыОбменаСУзлом(УзелКорреспондента, НовыеЗначения);
			ПараметрыОбмена = СинхронизацияАвтономныхКопий.ПараметрыОбменаСУзлом(УзелКорреспондента);
		Исключение
			СообщениеОбОшибке = СтрШаблон(НСтр("ru='Не удалось обновить параметры обмена: %1%2'"), 
					Символы.ПС, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли;
	
	Результат = Новый Структура;
	// код для автоматической регистрации центральной базы в плане обмена корреспондента:
	Результат.Вставить("КодЦентральнойБазы", КодЦентральнойБазы); 
	// сценарий, по которому узел корреспондента должен отправить данные на сервер 
	Если ЗначениеЗаполнено(ПараметрыОбмена.СценарийЗапрашиваемыхДанных) Тогда
		Результат.Вставить("ЗатребованныйСценарий", ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыОбмена.СценарийЗапрашиваемыхДанных)); 
	Иначе
		Результат.Вставить("ЗатребованныйСценарий", ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.СценарииСинхронизацииАвтономныхКопий.ОбъединениеДанных)); 
	КонецЕсли;
	// Активность узла. Если ЛОЖЬ - обмен запрещен
	Результат.Вставить("Активность",         ПараметрыОбмена.Активность); 
	Результат.Вставить("НомерОтправленного", ПараметрыОбмена.НомерОтправленного); 
	Результат.Вставить("НомерПринятого",     ПараметрыОбмена.НомерПринятого); 
	
	Возврат Новый ХранилищеЗначения(Результат);
	
КонецФункции

// Устанавливает отметку о результатах обмена для информирования пользователя
Функция ChangeControlData(ExchangePlanName, NodeCode, Direction, Act, Result, Message, Complete)
	
	Узел = ПланыОбмена[ExchangePlanName].НайтиПоКоду(NodeCode);
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Запись результата
	Если ЗначениеЗаполнено(Result) Тогда
		
		РезультатОбмена = Перечисления.РезультатыВыполненияОбмена[Result];
		Если Direction = "Получение" Тогда
			
			// Получение данных от клиента
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Узел, РезультатОбмена, Message);
			
		Иначе
			
			// Отправка данных с серевера на клиент
			РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(Узел, РезультатОбмена, Message);
			Если РезультатОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
				
				НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "НомерОтправленного");
				Если ЗначениеЗаполнено(НомерОтправленного) Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерОтправленного);
				КонецЕсли;
				
				НовыеЗначения = Новый Структура("СценарийЗапрашиваемыхДанных", Перечисления.СценарииСинхронизацииАвтономныхКопий.ОбъединениеДанных);
				СинхронизацияАвтономныхКопий.ЗаписатьНовыеПараметрыОбменаСУзлом(Узел, НовыеЗначения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись/изменение текущего действия
	Если ЗначениеЗаполнено(Act) Тогда
		РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(Узел, Act);
	КонецЕсли;
	
	// Отметка о завершении обмена
	Если Complete Тогда
		РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(Узел);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает информацию, запрошенную в параметре InfoTypes
Функция GetInfo(InfoTypes, ExchangePlanName, NodeCode, ResultMessage)
	
	Результат = Новый Структура;
	
	Узел = ПланыОбмена[ExchangePlanName].НайтиПоКоду(NodeCode);
	ТипыИнформации = СтрРазделить(InfoTypes, ",", Ложь);
	
	Если ТипыИнформации.Количество() = 0 Тогда
		ResultMessage = НСтр("ru='Не указан тип запрошенной информации'"); 
		Возврат СериализаторXDTO.ЗаписатьXDTO(Результат);
	КонецЕсли;
	
	ПроверятьДоступностьУслуги = Ложь;
	Для каждого ТипИнформации Из ТипыИнформации Цикл
		
		Если ТипИнформации = "БазаПустая" Тогда
			Результат.Вставить(ТипИнформации, ОбщегоНазначенияДеньги.ИнформационнаяБазаПустая());
		ИначеЕсли ТипИнформации = "ЕстьИзмененияДляВыгрузки" Тогда
			Результат.Вставить(ТипИнформации, ОбменДаннымиСлужебный.ИзмененияЗарегистрированы(Узел));
		ИначеЕсли СтрНайти(ТипИнформации, "КоличествоЗаписей_") > 0 Тогда
			ПроверятьДоступностьУслуги = Истина;
			ИмяТаблицы = СтрЗаменить(Сред(ТипИнформации, 19), "_", ".");
			Результат.Вставить(ТипИнформации, СинхронизацияАвтономныхКопий.КоличествоЗаписейВТаблице(ИмяТаблицы));
		ИначеЕсли СтрНайти(ТипИнформации, "КонтрольРазделаУчета_") > 0 Тогда
			ПроверятьДоступностьУслуги = Истина;
			ИмяРазделаУчета = Сред(ТипИнформации, 22);
			Результат.Вставить(ТипИнформации, СинхронизацияАвтономныхКопий.КонтрольныйОстатокРазделаУчета(ИмяРазделаУчета));
		Иначе
			
			ResultMessage = СтрШаблон(НСтр("ru='Неверный тип информации ""%1""'"), ТипИнформации); 
			Возврат СериализаторXDTO.ЗаписатьXDTO(Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверятьДоступностьУслуги Тогда
		Попытка
			ПроверитьДоступностьУслуги("ЗагрузкаДанных", ExchangePlanName, NodeCode);
		Исключение
			ResultMessage = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат СериализаторXDTO.ЗаписатьXDTO(Новый Структура);
		КонецПопытки; 
	КонецЕсли;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Результат);
	
КонецФункции

Функция RegisterAllRecords(ExchangePlanName, NodeCode, ErrorMessage)
	
	Узел = ПланыОбмена[ExchangePlanName].НайтиПоКоду(NodeCode);
	Если Не ЗначениеЗаполнено(Узел) Тогда
		ErrorMessage = СтрШаблон(НСтр("ru='На сервере нет узла с кодом %1 в плане обмена %2'"), NodeCode, ExchangePlanName); 
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		СинхронизацияАвтономныхКопий.ЗарегистрироватьВсеОбъектыДляОтправкиНаУзел(Узел);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ErrorMessage = СтрШаблон(НСтр("ru='На сервере не удалось зарегистрировать все записи для отправки в узел %1: %2%3'"), 
				Узел, Символы.ПС, ПодробноеПредставлениеОшибки(Ошибка) ); 
		Возврат Ложь;
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

Процедура ПроверитьБлокировкуИнформационнойБазыДляОбновления()
	
	Если ЗначениеЗаполнено(ОбновлениеИнформационнойБазыСлужебный.ИнформационнаяБазаЗаблокированаДляОбновления()) Тогда
		
		ВызватьИсключение НСтр("ru = 'Синхронизация данных временно недоступна в связи с обновлением приложения в Интернете.'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуДанныхВКлиентСерверномРежиме(ИмяПланаОбмена,
														КодУзлаИнформационнойБазы,
														ИдентификаторФайла,
														ДлительнаяОперация,
														ИдентификаторОперации,
														ДлительнаяОперацияРазрешена)
	
	КлючФоновогоЗадания = КлючФоновогоЗаданияВыгрузкиЗагрузкиДанных(ИмяПланаОбмена,
		КодУзлаИнформационнойБазы,
		НСтр("ru = 'Выгрузка'"));
		
	Если ЕстьАктивныеФоновыеЗаданияСинхронизацииДанных(КлючФоновогоЗадания) Тогда
		ВызватьИсключение НСтр("ru = 'Синхронизация данных уже выполняется.'");
	КонецЕсли;
	
	КонтрольОбмена_ИзменитьТекущееДействие(ИмяПланаОбмена, КодУзлаИнформационнойБазы, НСтр("ru='Выгрузка данных'"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	ПараметрыПроцедуры.Вставить("КодУзлаИнформационнойБазы", КодУзлаИнформационнойБазы);
	ПараметрыПроцедуры.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	ПараметрыПроцедуры.Вставить("ИспользоватьСжатие", 
				Не СинхронизацияАвтономныхКопийВызовСервера.ЭтоМобильноеПриложение(ИмяПланаОбмена, КодУзлаИнформационнойБазы));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Выгрузка данных через веб-сервис.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
	
	ПараметрыВыполнения.ЗапуститьНеВФоне = Не ДлительнаяОперацияРазрешена;
	ПараметрыВыполнения.ЗапуститьВФоне   = ДлительнаяОперацияРазрешена;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменДаннымиСервер.ВыполнитьВыгрузкуДляУзлаИнформационнойБазыВСервисПередачиФайлов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ИдентификаторОперации = Строка(ФоновоеЗадание.ИдентификаторЗадания);
		ДлительнаяОперация = Истина;
		Возврат;
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ДлительнаяОперация = Ложь;
		Возврат;
	Иначе
		Сообщение = НСтр("ru = 'Ошибка при выгрузке данных через веб-сервис.'");
		Если ЗначениеЗаполнено(ФоновоеЗадание.ПодробноеПредставлениеОшибки) Тогда
			Сообщение = ФоновоеЗадание.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииВыгрузкаДанныхВСервисПередачиФайлов(),
			УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		КонтрольОбмена_УстановитьРезультат("Отправка", ИмяПланаОбмена, КодУзлаИнформационнойБазы, Истина, Сообщение);
		
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуДанныхВКлиентСерверномРежиме(ИмяПланаОбмена,
													КодУзлаИнформационнойБазы,
													ИдентификаторФайла,
													ДлительнаяОперация,
													ИдентификаторОперации,
													ДлительнаяОперацияРазрешена)
	
													
	КлючФоновогоЗадания = КлючФоновогоЗаданияВыгрузкиЗагрузкиДанных(ИмяПланаОбмена,
		КодУзлаИнформационнойБазы,
		НСтр("ru = 'Загрузка'"));
		
	Если ЕстьАктивныеФоновыеЗаданияСинхронизацииДанных(КлючФоновогоЗадания) Тогда
		ВызватьИсключение НСтр("ru = 'Синхронизация данных уже выполняется.'");
	КонецЕсли;
	
	КонтрольОбмена_ИзменитьТекущееДействие(ИмяПланаОбмена, КодУзлаИнформационнойБазы, НСтр("ru='Загрузка данных в базу'"));
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	ПараметрыПроцедуры.Вставить("КодУзлаИнформационнойБазы", КодУзлаИнформационнойБазы);
	ПараметрыПроцедуры.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка данных через веб-сервис.'");
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
	
	ПараметрыВыполнения.ЗапуститьНеВФоне = Не ДлительнаяОперацияРазрешена;
	ПараметрыВыполнения.ЗапуститьВФоне   = ДлительнаяОперацияРазрешена;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(
		"ОбменДаннымиСервер.ВыполнитьЗагрузкуДляУзлаИнформационнойБазыИзСервисаПередачиФайлов",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ИдентификаторОперации = Строка(ФоновоеЗадание.ИдентификаторЗадания);
		ДлительнаяОперация = Истина;
		Возврат;
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ДлительнаяОперация = Ложь;
		КонтрольОбмена_УстановитьРезультат("Получение", ИмяПланаОбмена, КодУзлаИнформационнойБазы, Ложь, "");
		Возврат;
	Иначе
		
		Сообщение = НСтр("ru = 'Ошибка при загрузке данных через веб-сервис.'");
		Если ЗначениеЗаполнено(ФоновоеЗадание.ПодробноеПредставлениеОшибки) Тогда
			Сообщение = ФоновоеЗадание.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииЗагрузкаДанныхИзСервисаПередачиФайлов(),
			УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
		
		КонтрольОбмена_УстановитьРезультат("Получение", ИмяПланаОбмена, КодУзлаИнформационнойБазы, Истина, Сообщение);
		
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
КонецПроцедуры

Функция КлючФоновогоЗаданияВыгрузкиЗагрузкиДанных(ПланОбмена, КодУзла, Действие)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ПланОбмена:%1 КодУзла:%2 Действие:%3'"),
		ПланОбмена,
		КодУзла,
		Действие);
	
КонецФункции

Функция ЕстьАктивныеФоновыеЗаданияСинхронизацииДанных(КлючФоновогоЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

Функция ЗарегистрироватьДанныеДляНачальнойВыгрузки(Знач ИмяПланаОбмена, Знач КодУзла, ДлительнаяОперация, ИдентификаторОперации, ТолькоСправочники)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзелИнформационнойБазы = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзла);
	
	Если Не ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
		Сообщение = НСтр("ru = 'Не найден узел плана обмена; имя плана обмена %1; код узла %2'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КодУзла);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Если ТолькоСправочники Тогда
			
			ОбменДаннымиСервер.ЗарегистрироватьТолькоСправочникиДляНачальнойВыгрузки(УзелИнформационнойБазы);
			
		Иначе
			
			ОбменДаннымиСервер.ЗарегистрироватьВсеДанныеКромеСправочниковДляНачальнойВыгрузки(УзелИнформационнойБазы);
			
		КонецЕсли;
		
	Иначе
		
		Если ТолькоСправочники Тогда
			ИмяМетода = "ОбменДаннымиСервер.ЗарегистрироватьТолькоСправочникиДляНачальнойВыгрузкиВФоне";
			НаименованиеЗадания = НСтр("ru = 'Регистрация изменений справочников для начальной выгрузки.'");
		Иначе
			ИмяМетода = "ОбменДаннымиСервер.ЗарегистрироватьВсеДанныеКромеСправочниковДляНачальнойВыгрузкиВФоне";
			НаименованиеЗадания = НСтр("ru = 'Регистрация изменений всех данных кроме справочников для начальной выгрузки.'");
		КонецЕсли;
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
			
		Если ФоновоеЗадание.Статус = "Выполняется" Тогда
			ИдентификаторОперации = Строка(ФоновоеЗадание.ИдентификаторЗадания);
			ДлительнаяОперация = Истина;
		ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
			ДлительнаяОперация = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ФоновоеЗадание.ПодробноеПредставлениеОшибки) Тогда
				ВызватьИсключение ФоновоеЗадание.ПодробноеПредставлениеОшибки;
			КонецЕсли;
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении фонового задания: %1'"),
				НаименованиеЗадания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФайлаЧасти(PartNumber)
	
	Результат = "data.[n]";
	
	Возврат СтрЗаменить(Результат, "[n]", Формат(PartNumber, "ЧГ=0"));
КонецФункции

Функция ВременныйКаталогВыгрузки(Знач ИдентификаторСессии)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВременныйКаталог = "{ИдентификаторСессии}";
	ВременныйКаталог = СтрЗаменить(ВременныйКаталог, "ИдентификаторСессии", Строка(ИдентификаторСессии));
	
	Результат = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов(), ВременныйКаталог);
	
	Возврат Результат;
КонецФункции

Функция НайтиФайлЧасти(Знач Каталог, Знач НомерФайла)
	
	Для КоличествоРазрядов = КоличествоРазрядовЧисла(НомерФайла) По 5 Цикл
		
		ФорматнаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧЦ=%1; ЧВН=; ЧГ=0", Строка(КоличествоРазрядов));
		
		ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("data.zip.%1", Формат(НомерФайла, ФорматнаяСтрока));
		
		ИменаФайлов = НайтиФайлы(Каталог, ИмяФайла);
		
		Если ИменаФайлов.Количество() > 0 Тогда
			
			Возврат ИменаФайлов;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Массив;
КонецФункции

Функция КоличествоРазрядовЧисла(Знач Число)
	
	Возврат СтрДлина(Формат(Число, "ЧДЦ=0; ЧГ=0"));
	
КонецФункции

Функция ЗначениеИзСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) 

	Если Структура.Свойство(Ключ) Тогда
		Возврат Структура[Ключ];
	КонецЕсли;

	Возврат ЗначениеПоУмолчанию;
	
КонецФункции


Процедура КонтрольОбмена_ИзменитьТекущееДействие(ИмяПлана, КодУзла, Текущеедействие) 
	РегистрыСведений.КонтрольОбменаДанными.ИзменитьТекущееДействиеДляУзла(ПланыОбмена[ИмяПлана].НайтиПоКоду(КодУзла), Текущеедействие);
КонецПроцедуры

Процедура КонтрольОбмена_УстановитьРезультат(Направление, ИмяПлана, КодУзла, ЕстьОшибки, ТекстОшибки) 
	
	РезультатОбмена = ?(ЕстьОшибки, Перечисления.РезультатыВыполненияОбмена.Ошибка, Перечисления.РезультатыВыполненияОбмена.Выполнено);
	Узел = ПланыОбмена[ИмяПлана].НайтиПоКоду(КодУзла);
	Если Направление = "Отправка" Тогда
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатОтправкиДанных(Узел, РезультатОбмена, ТекстОшибки);
	Иначе
		РегистрыСведений.КонтрольОбменаДанными.УстановитьРезультатПолученияДанных(Узел, РезультатОбмена, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрольОбмена_УстановитьОкончание(Направление, ИмяПлана, КодУзла) 
	
	РегистрыСведений.КонтрольОбменаДанными.УстановитьОкончаниеОбмена(ПланыОбмена[ИмяПлана].НайтиПоКоду(КодУзла));
	
КонецПроцедуры

Процедура ПроверитьДоступностьУслуги(ТипУслуги, ИмяПланаОбмена, КодУзлаИнформационнойБазы) 
	
	Режим = ДеньгиВызовСервераПовтИсп.РежимИспользованияПриложения();
	
	Если Режим <> "Разделенный" Тогда
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			ВызватьИсключение НСтр("ru='Приложение запущено в неразделенном режиме'");
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ДеньгиВОблаке");
	Модуль.ПроверитьСостояниеПодпискиНаУслугу(ТипУслуги, ИмяПланаОбмена, КодУзлаИнформационнойБазы);
	
КонецПроцедуры

#КонецОбласти
